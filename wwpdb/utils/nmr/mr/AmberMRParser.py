# Generated from AmberMRParser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00cc")
        buf.write("\u0364\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\7\2D\n\2\f\2\16\2G\13\2\3")
        buf.write("\2\3\2\3\3\3\3\6\3M\n\3\r\3\16\3N\3\3\3\3\3\4\3\4\3\4")
        buf.write("\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3")
        buf.write("\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n\7\nl\n\n\f\n\16\no")
        buf.write("\13\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u0082\n\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u00b7\n\13\3")
        buf.write("\f\7\f\u00ba\n\f\f\f\16\f\u00bd\13\f\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\5\r\u00e1\n\r\3\16\7\16\u00e4\n\16\f\16\16")
        buf.write("\16\u00e7\13\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\5\17\u0116\n\17\3\20\7\20\u0119\n")
        buf.write("\20\f\20\16\20\u011c\13\20\3\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u013f\n\21\3\22\7")
        buf.write("\22\u0142\n\22\f\22\16\22\u0145\13\22\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\5\23\u0165\n\23\3\24\7\24\u0168")
        buf.write("\n\24\f\24\16\24\u016b\13\24\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25")
        buf.write("\u0187\n\25\3\26\3\26\3\26\3\26\5\26\u018d\n\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\5\26\u0196\n\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\5\26\u019f\n\26\3\26\3\26\3")
        buf.write("\26\5\26\u01a4\n\26\3\27\3\27\3\27\3\27\5\27\u01aa\n\27")
        buf.write("\3\27\3\27\5\27\u01ae\n\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\3\27\5\27\u01b7\n\27\3\27\3\27\5\27\u01bb\n\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u01c4\n\27\3\27\3")
        buf.write("\27\5\27\u01c8\n\27\3\27\3\27\3\27\5\27\u01cd\n\27\3\30")
        buf.write("\3\30\3\30\3\30\5\30\u01d3\n\30\3\30\3\30\5\30\u01d7\n")
        buf.write("\30\3\30\3\30\5\30\u01db\n\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\5\30\u01e4\n\30\3\30\3\30\5\30\u01e8\n\30\3")
        buf.write("\30\3\30\5\30\u01ec\n\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\5\30\u01f5\n\30\3\30\3\30\5\30\u01f9\n\30\3\30\3")
        buf.write("\30\5\30\u01fd\n\30\3\30\3\30\3\30\5\30\u0202\n\30\3\31")
        buf.write("\3\31\3\31\3\31\5\31\u0208\n\31\3\31\3\31\5\31\u020c\n")
        buf.write("\31\3\31\3\31\5\31\u0210\n\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\5\31\u0219\n\31\3\31\3\31\5\31\u021d\n\31\3")
        buf.write("\31\3\31\5\31\u0221\n\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\5\31\u022a\n\31\3\31\3\31\5\31\u022e\n\31\3\31\3")
        buf.write("\31\5\31\u0232\n\31\3\31\3\31\3\31\5\31\u0237\n\31\3\32")
        buf.write("\3\32\3\32\3\32\5\32\u023d\n\32\3\32\3\32\5\32\u0241\n")
        buf.write("\32\3\32\3\32\5\32\u0245\n\32\3\32\3\32\5\32\u0249\n\32")
        buf.write("\3\32\3\32\5\32\u024d\n\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\5\32\u0256\n\32\3\32\3\32\5\32\u025a\n\32\3\32")
        buf.write("\3\32\5\32\u025e\n\32\3\32\3\32\5\32\u0262\n\32\3\32\3")
        buf.write("\32\5\32\u0266\n\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\5\32\u026f\n\32\3\32\3\32\5\32\u0273\n\32\3\32\3\32\5")
        buf.write("\32\u0277\n\32\3\32\3\32\5\32\u027b\n\32\3\32\3\32\5\32")
        buf.write("\u027f\n\32\3\32\3\32\3\32\5\32\u0284\n\32\3\33\3\33\3")
        buf.write("\33\3\33\5\33\u028a\n\33\3\33\3\33\5\33\u028e\n\33\3\33")
        buf.write("\3\33\5\33\u0292\n\33\3\33\3\33\5\33\u0296\n\33\3\33\3")
        buf.write("\33\5\33\u029a\n\33\3\33\3\33\5\33\u029e\n\33\3\33\3\33")
        buf.write("\5\33\u02a2\n\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5")
        buf.write("\33\u02ab\n\33\3\33\3\33\5\33\u02af\n\33\3\33\3\33\5\33")
        buf.write("\u02b3\n\33\3\33\3\33\5\33\u02b7\n\33\3\33\3\33\5\33\u02bb")
        buf.write("\n\33\3\33\3\33\5\33\u02bf\n\33\3\33\3\33\5\33\u02c3\n")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u02cc\n\33")
        buf.write("\3\33\3\33\5\33\u02d0\n\33\3\33\3\33\5\33\u02d4\n\33\3")
        buf.write("\33\3\33\5\33\u02d8\n\33\3\33\3\33\5\33\u02dc\n\33\3\33")
        buf.write("\3\33\5\33\u02e0\n\33\3\33\3\33\5\33\u02e4\n\33\3\33\3")
        buf.write("\33\3\33\5\33\u02e9\n\33\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\5\34\u0301\n\34\3\35\3\35\3")
        buf.write("\35\3\35\5\35\u0307\n\35\3\35\3\35\5\35\u030b\n\35\3\35")
        buf.write("\3\35\5\35\u030f\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3")
        buf.write("\35\5\35\u0318\n\35\3\35\3\35\5\35\u031c\n\35\3\35\3\35")
        buf.write("\5\35\u0320\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5")
        buf.write("\35\u0329\n\35\3\35\3\35\5\35\u032d\n\35\3\35\3\35\5\35")
        buf.write("\u0331\n\35\3\35\3\35\3\35\5\35\u0336\n\35\3\36\3\36\3")
        buf.write("\36\3\36\5\36\u033c\n\36\3\36\7\36\u033f\n\36\f\36\16")
        buf.write("\36\u0342\13\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u034a")
        buf.write("\n\36\3\36\7\36\u034d\n\36\f\36\16\36\u0350\13\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\5\36\u0358\n\36\3\36\7\36\u035b")
        buf.write("\n\36\f\36\16\36\u035e\13\36\3\36\3\36\5\36\u0362\n\36")
        buf.write("\3\36\2\2\37\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:\2\36\4\2\5\5\")\3\2\u00aa\u00ab\4")
        buf.write("\2\6\6!!\3\2\u00b1\u00b2\4\2\b\b,\63\7\2\t\t\f\r\20\20")
        buf.write("++\64\65\5\2\n\13\16\17\668\3\2\21 \3\2\")\3\2BC\3\2D")
        buf.write("F\4\2GKMM\5\2OOXXZ[\4\2PPTT\4\2SSVW\4\2XX]]\4\2TTff\4")
        buf.write("\2UU_c\4\2WWee\4\2hhno\3\2ij\3\2kl\4\2mmuu\4\2ptvw\4\2")
        buf.write("zz\u0081\u0081\3\2{}\3\2~\177\3\2\u0082\u0088\2\u03e4")
        buf.write("\2E\3\2\2\2\4J\3\2\2\2\6R\3\2\2\2\bV\3\2\2\2\nZ\3\2\2")
        buf.write("\2\f^\3\2\2\2\16b\3\2\2\2\20f\3\2\2\2\22m\3\2\2\2\24\u00b6")
        buf.write("\3\2\2\2\26\u00bb\3\2\2\2\30\u00e0\3\2\2\2\32\u00e5\3")
        buf.write("\2\2\2\34\u0115\3\2\2\2\36\u011a\3\2\2\2 \u013e\3\2\2")
        buf.write("\2\"\u0143\3\2\2\2$\u0164\3\2\2\2&\u0169\3\2\2\2(\u0186")
        buf.write("\3\2\2\2*\u01a3\3\2\2\2,\u01cc\3\2\2\2.\u0201\3\2\2\2")
        buf.write("\60\u0236\3\2\2\2\62\u0283\3\2\2\2\64\u02e8\3\2\2\2\66")
        buf.write("\u0300\3\2\2\28\u0335\3\2\2\2:\u0361\3\2\2\2<D\5\4\3\2")
        buf.write("=D\5\6\4\2>D\5\b\5\2?D\5\n\6\2@D\5\f\7\2AD\5\16\b\2BD")
        buf.write("\5\20\t\2C<\3\2\2\2C=\3\2\2\2C>\3\2\2\2C?\3\2\2\2C@\3")
        buf.write("\2\2\2CA\3\2\2\2CB\3\2\2\2DG\3\2\2\2EC\3\2\2\2EF\3\2\2")
        buf.write("\2FH\3\2\2\2GE\3\2\2\2HI\7\2\2\3I\3\3\2\2\2JL\7\u008b")
        buf.write("\2\2KM\7\u0098\2\2LK\3\2\2\2MN\3\2\2\2NL\3\2\2\2NO\3\2")
        buf.write("\2\2OP\3\2\2\2PQ\7\u009a\2\2Q\5\3\2\2\2RS\7\4\2\2ST\5")
        buf.write("\22\n\2TU\7\3\2\2U\7\3\2\2\2VW\7?\2\2WX\5\26\f\2XY\7\3")
        buf.write("\2\2Y\t\3\2\2\2Z[\7N\2\2[\\\5\32\16\2\\]\7\3\2\2]\13\3")
        buf.write("\2\2\2^_\7\\\2\2_`\5\36\20\2`a\7\3\2\2a\r\3\2\2\2bc\7")
        buf.write("g\2\2cd\5\"\22\2de\7\3\2\2e\17\3\2\2\2fg\7y\2\2gh\5&\24")
        buf.write("\2hi\7\3\2\2i\21\3\2\2\2jl\5\24\13\2kj\3\2\2\2lo\3\2\2")
        buf.write("\2mk\3\2\2\2mn\3\2\2\2n\23\3\2\2\2om\3\2\2\2pq\t\2\2\2")
        buf.write("qr\7\u00a7\2\2rs\t\3\2\2s\u00b7\7\u00a8\2\2tu\t\4\2\2")
        buf.write("uv\7\u00ae\2\2vw\t\5\2\2w\u00b7\7\u00af\2\2xy\7\7\2\2")
        buf.write("yz\7\u0093\2\2z\u0081\7\u0094\2\2{\u0082\5*\26\2|\u0082")
        buf.write("\5,\27\2}\u0082\5.\30\2~\u0082\5\60\31\2\177\u0082\5\62")
        buf.write("\32\2\u0080\u0082\5\64\33\2\u0081{\3\2\2\2\u0081|\3\2")
        buf.write("\2\2\u0081}\3\2\2\2\u0081~\3\2\2\2\u0081\177\3\2\2\2\u0081")
        buf.write("\u0080\3\2\2\2\u0082\u0083\3\2\2\2\u0083\u0084\7\u00cb")
        buf.write("\2\2\u0084\u0085\7\u0089\2\2\u0085\u00b7\3\2\2\2\u0086")
        buf.write("\u0087\t\6\2\2\u0087\u0088\7\u00b9\2\2\u0088\u0089\7\u00bb")
        buf.write("\2\2\u0089\u00b7\7\u00ba\2\2\u008a\u008b\t\7\2\2\u008b")
        buf.write("\u008c\7\u00a3\2\2\u008c\u008d\7\u00a4\2\2\u008d\u00b7")
        buf.write("\7\u0089\2\2\u008e\u008f\t\b\2\2\u008f\u0090\7\u009b\2")
        buf.write("\2\u0090\u0091\7\u009d\2\2\u0091\u00b7\7\u0089\2\2\u0092")
        buf.write("\u0093\t\t\2\2\u0093\u0094\7\u009f\2\2\u0094\u0095\7\u00a1")
        buf.write("\2\2\u0095\u00b7\7\u0089\2\2\u0096\u0097\7*\2\2\u0097")
        buf.write("\u0098\7\u00b4\2\2\u0098\u0099\7\u00b6\2\2\u0099\u00b7")
        buf.write("\7\u00b5\2\2\u009a\u009b\7\5\2\2\u009b\u009c\7\u009c\2")
        buf.write("\2\u009c\u009d\7\u00bf\2\2\u009d\u009e\7\u00be\2\2\u009e")
        buf.write("\u009f\7\u009b\2\2\u009f\u00a0\7\u009d\2\2\u00a0\u00b7")
        buf.write("\7\u0089\2\2\u00a1\u00a2\t\n\2\2\u00a2\u00a3\7\u00a6\2")
        buf.write("\2\u00a3\u00a4\7\u00bf\2\2\u00a4\u00a5\7\u00be\2\2\u00a5")
        buf.write("\u00a6\7\u00a7\2\2\u00a6\u00a7\t\3\2\2\u00a7\u00b7\7\u00a8")
        buf.write("\2\2\u00a8\u00a9\7\6\2\2\u00a9\u00aa\7\u00a0\2\2\u00aa")
        buf.write("\u00ab\7\u00bf\2\2\u00ab\u00ac\7\u00be\2\2\u00ac\u00ad")
        buf.write("\7\u009f\2\2\u00ad\u00ae\7\u00a1\2\2\u00ae\u00b7\7\u0089")
        buf.write("\2\2\u00af\u00b0\t\6\2\2\u00b0\u00b1\7\u00b8\2\2\u00b1")
        buf.write("\u00b2\7\u00bf\2\2\u00b2\u00b3\7\u00be\2\2\u00b3\u00b4")
        buf.write("\7\u00b9\2\2\u00b4\u00b5\7\u00bb\2\2\u00b5\u00b7\7\u00ba")
        buf.write("\2\2\u00b6p\3\2\2\2\u00b6t\3\2\2\2\u00b6x\3\2\2\2\u00b6")
        buf.write("\u0086\3\2\2\2\u00b6\u008a\3\2\2\2\u00b6\u008e\3\2\2\2")
        buf.write("\u00b6\u0092\3\2\2\2\u00b6\u0096\3\2\2\2\u00b6\u009a\3")
        buf.write("\2\2\2\u00b6\u00a1\3\2\2\2\u00b6\u00a8\3\2\2\2\u00b6\u00af")
        buf.write("\3\2\2\2\u00b7\25\3\2\2\2\u00b8\u00ba\5\30\r\2\u00b9\u00b8")
        buf.write("\3\2\2\2\u00ba\u00bd\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bb")
        buf.write("\u00bc\3\2\2\2\u00bc\27\3\2\2\2\u00bd\u00bb\3\2\2\2\u00be")
        buf.write("\u00bf\7@\2\2\u00bf\u00c0\7\u00a7\2\2\u00c0\u00c1\t\3")
        buf.write("\2\2\u00c1\u00e1\7\u00a8\2\2\u00c2\u00c3\7A\2\2\u00c3")
        buf.write("\u00c4\7\u00ae\2\2\u00c4\u00c5\t\5\2\2\u00c5\u00e1\7\u00af")
        buf.write("\2\2\u00c6\u00c7\t\13\2\2\u00c7\u00c8\7\u00a6\2\2\u00c8")
        buf.write("\u00c9\7\u00bf\2\2\u00c9\u00ca\7\u00bd\2\2\u00ca\u00cb")
        buf.write("\7\u00bf\2\2\u00cb\u00cc\7\u00be\2\2\u00cc\u00cd\7\u00a7")
        buf.write("\2\2\u00cd\u00ce\t\3\2\2\u00ce\u00e1\7\u00a8\2\2\u00cf")
        buf.write("\u00d0\t\f\2\2\u00d0\u00d1\7\u00ad\2\2\u00d1\u00d2\7\u00bf")
        buf.write("\2\2\u00d2\u00d3\7\u00bd\2\2\u00d3\u00d4\7\u00bf\2\2\u00d4")
        buf.write("\u00d5\7\u00be\2\2\u00d5\u00d6\7\u00ae\2\2\u00d6\u00d7")
        buf.write("\t\5\2\2\u00d7\u00e1\7\u00af\2\2\u00d8\u00d9\t\r\2\2\u00d9")
        buf.write("\u00da\7\u009f\2\2\u00da\u00db\7\u00a1\2\2\u00db\u00e1")
        buf.write("\7\u0089\2\2\u00dc\u00dd\7L\2\2\u00dd\u00de\7\u00a3\2")
        buf.write("\2\u00de\u00df\7\u00a4\2\2\u00df\u00e1\7\u0089\2\2\u00e0")
        buf.write("\u00be\3\2\2\2\u00e0\u00c2\3\2\2\2\u00e0\u00c6\3\2\2\2")
        buf.write("\u00e0\u00cf\3\2\2\2\u00e0\u00d8\3\2\2\2\u00e0\u00dc\3")
        buf.write("\2\2\2\u00e1\31\3\2\2\2\u00e2\u00e4\5\34\17\2\u00e3\u00e2")
        buf.write("\3\2\2\2\u00e4\u00e7\3\2\2\2\u00e5\u00e3\3\2\2\2\u00e5")
        buf.write("\u00e6\3\2\2\2\u00e6\33\3\2\2\2\u00e7\u00e5\3\2\2\2\u00e8")
        buf.write("\u00e9\t\16\2\2\u00e9\u00ea\7\u009b\2\2\u00ea\u00eb\7")
        buf.write("\u009d\2\2\u00eb\u0116\7\u0089\2\2\u00ec\u00ed\t\17\2")
        buf.write("\2\u00ed\u00ee\7\u00a6\2\2\u00ee\u00ef\7\u00bf\2\2\u00ef")
        buf.write("\u00f0\7\u00be\2\2\u00f0\u00f1\7\u00a7\2\2\u00f1\u00f2")
        buf.write("\t\3\2\2\u00f2\u0116\7\u00a8\2\2\u00f3\u00f4\7Q\2\2\u00f4")
        buf.write("\u00f5\7\u009c\2\2\u00f5\u00f6\7\u00bf\2\2\u00f6\u00f7")
        buf.write("\7\u00bd\2\2\u00f7\u00f8\7\u00bf\2\2\u00f8\u00f9\7\u00be")
        buf.write("\2\2\u00f9\u00fa\7\u009b\2\2\u00fa\u00fb\7\u009d\2\2\u00fb")
        buf.write("\u0116\7\u0089\2\2\u00fc\u00fd\7U\2\2\u00fd\u00fe\7\u00a0")
        buf.write("\2\2\u00fe\u00ff\7\u00bf\2\2\u00ff\u0100\7\u00be\2\2\u0100")
        buf.write("\u0101\7\u009f\2\2\u0101\u0102\7\u00a1\2\2\u0102\u0116")
        buf.write("\7\u0089\2\2\u0103\u0104\t\20\2\2\u0104\u0105\7\u00ad")
        buf.write("\2\2\u0105\u0106\7\u00bf\2\2\u0106\u0107\7\u00be\2\2\u0107")
        buf.write("\u0108\7\u00ae\2\2\u0108\u0109\t\5\2\2\u0109\u0116\7\u00af")
        buf.write("\2\2\u010a\u010b\7R\2\2\u010b\u010c\7\u00b8\2\2\u010c")
        buf.write("\u010d\7\u00bf\2\2\u010d\u010e\7\u00be\2\2\u010e\u010f")
        buf.write("\7\u00b9\2\2\u010f\u0110\7\u00bb\2\2\u0110\u0116\7\u00ba")
        buf.write("\2\2\u0111\u0112\7Y\2\2\u0112\u0113\7\u009f\2\2\u0113")
        buf.write("\u0114\7\u00a1\2\2\u0114\u0116\7\u0089\2\2\u0115\u00e8")
        buf.write("\3\2\2\2\u0115\u00ec\3\2\2\2\u0115\u00f3\3\2\2\2\u0115")
        buf.write("\u00fc\3\2\2\2\u0115\u0103\3\2\2\2\u0115\u010a\3\2\2\2")
        buf.write("\u0115\u0111\3\2\2\2\u0116\35\3\2\2\2\u0117\u0119\5 \21")
        buf.write("\2\u0118\u0117\3\2\2\2\u0119\u011c\3\2\2\2\u011a\u0118")
        buf.write("\3\2\2\2\u011a\u011b\3\2\2\2\u011b\37\3\2\2\2\u011c\u011a")
        buf.write("\3\2\2\2\u011d\u011e\t\21\2\2\u011e\u011f\7\u009b\2\2")
        buf.write("\u011f\u0120\7\u009d\2\2\u0120\u013f\7\u0089\2\2\u0121")
        buf.write("\u0122\7^\2\2\u0122\u0123\7\u00b9\2\2\u0123\u0124\7\u00bb")
        buf.write("\2\2\u0124\u013f\7\u00ba\2\2\u0125\u0126\t\22\2\2\u0126")
        buf.write("\u0127\7\u00a6\2\2\u0127\u0128\7\u00bf\2\2\u0128\u0129")
        buf.write("\7\u00be\2\2\u0129\u012a\7\u00a7\2\2\u012a\u012b\t\3\2")
        buf.write("\2\u012b\u013f\7\u00a8\2\2\u012c\u012d\t\23\2\2\u012d")
        buf.write("\u012e\7\u00a0\2\2\u012e\u012f\7\u00bf\2\2\u012f\u0130")
        buf.write("\7\u00be\2\2\u0130\u0131\7\u009f\2\2\u0131\u0132\7\u00a1")
        buf.write("\2\2\u0132\u013f\7\u0089\2\2\u0133\u0134\t\24\2\2\u0134")
        buf.write("\u0135\7\u00ad\2\2\u0135\u0136\7\u00bf\2\2\u0136\u0137")
        buf.write("\7\u00be\2\2\u0137\u0138\7\u00ae\2\2\u0138\u0139\t\5\2")
        buf.write("\2\u0139\u013f\7\u00af\2\2\u013a\u013b\7d\2\2\u013b\u013c")
        buf.write("\7\u009f\2\2\u013c\u013d\7\u00a1\2\2\u013d\u013f\7\u0089")
        buf.write("\2\2\u013e\u011d\3\2\2\2\u013e\u0121\3\2\2\2\u013e\u0125")
        buf.write("\3\2\2\2\u013e\u012c\3\2\2\2\u013e\u0133\3\2\2\2\u013e")
        buf.write("\u013a\3\2\2\2\u013f!\3\2\2\2\u0140\u0142\5$\23\2\u0141")
        buf.write("\u0140\3\2\2\2\u0142\u0145\3\2\2\2\u0143\u0141\3\2\2\2")
        buf.write("\u0143\u0144\3\2\2\2\u0144#\3\2\2\2\u0145\u0143\3\2\2")
        buf.write("\2\u0146\u0147\t\25\2\2\u0147\u0148\7\u009b\2\2\u0148")
        buf.write("\u0149\7\u009d\2\2\u0149\u0165\7\u0089\2\2\u014a\u014b")
        buf.write("\t\26\2\2\u014b\u014c\7\u009c\2\2\u014c\u014d\7\u00bf")
        buf.write("\2\2\u014d\u014e\7\u00be\2\2\u014e\u014f\7\u009b\2\2\u014f")
        buf.write("\u0150\7\u009d\2\2\u0150\u0165\7\u0089\2\2\u0151\u0152")
        buf.write("\t\27\2\2\u0152\u0153\7\u00a0\2\2\u0153\u0154\7\u00bf")
        buf.write("\2\2\u0154\u0155\7\u00be\2\2\u0155\u0156\7\u009f\2\2\u0156")
        buf.write("\u0157\7\u00a1\2\2\u0157\u0165\7\u0089\2\2\u0158\u0159")
        buf.write("\t\30\2\2\u0159\u015a\7\u00ae\2\2\u015a\u015b\t\5\2\2")
        buf.write("\u015b\u0165\7\u00af\2\2\u015c\u015d\t\31\2\2\u015d\u015e")
        buf.write("\7\u009f\2\2\u015e\u015f\7\u00a1\2\2\u015f\u0165\7\u0089")
        buf.write("\2\2\u0160\u0161\7x\2\2\u0161\u0162\7\u0093\2\2\u0162")
        buf.write("\u0163\7\u008c\2\2\u0163\u0165\7\u0089\2\2\u0164\u0146")
        buf.write("\3\2\2\2\u0164\u014a\3\2\2\2\u0164\u0151\3\2\2\2\u0164")
        buf.write("\u0158\3\2\2\2\u0164\u015c\3\2\2\2\u0164\u0160\3\2\2\2")
        buf.write("\u0165%\3\2\2\2\u0166\u0168\5(\25\2\u0167\u0166\3\2\2")
        buf.write("\2\u0168\u016b\3\2\2\2\u0169\u0167\3\2\2\2\u0169\u016a")
        buf.write("\3\2\2\2\u016a\'\3\2\2\2\u016b\u0169\3\2\2\2\u016c\u016d")
        buf.write("\t\32\2\2\u016d\u016e\7\u009b\2\2\u016e\u016f\7\u009d")
        buf.write("\2\2\u016f\u0187\7\u0089\2\2\u0170\u0171\t\33\2\2\u0171")
        buf.write("\u0172\7\u009c\2\2\u0172\u0173\7\u00bf\2\2\u0173\u0174")
        buf.write("\7\u00be\2\2\u0174\u0175\7\u009b\2\2\u0175\u0176\7\u009d")
        buf.write("\2\2\u0176\u0187\7\u0089\2\2\u0177\u0178\t\34\2\2\u0178")
        buf.write("\u0179\7\u00a0\2\2\u0179\u017a\7\u00bf\2\2\u017a\u017b")
        buf.write("\7\u00be\2\2\u017b\u017c\7\u009f\2\2\u017c\u017d\7\u00a1")
        buf.write("\2\2\u017d\u0187\7\u0089\2\2\u017e\u017f\7\u0080\2\2\u017f")
        buf.write("\u0180\7\u00ae\2\2\u0180\u0181\t\5\2\2\u0181\u0187\7\u00af")
        buf.write("\2\2\u0182\u0183\t\35\2\2\u0183\u0184\7\u009f\2\2\u0184")
        buf.write("\u0185\7\u00a1\2\2\u0185\u0187\7\u0089\2\2\u0186\u016c")
        buf.write("\3\2\2\2\u0186\u0170\3\2\2\2\u0186\u0177\3\2\2\2\u0186")
        buf.write("\u017e\3\2\2\2\u0186\u0182\3\2\2\2\u0187)\3\2\2\2\u0188")
        buf.write("\u0189\79\2\2\u0189\u018a\7\u00c5\2\2\u018a\u018c\5\66")
        buf.write("\34\2\u018b\u018d\7\u00c4\2\2\u018c\u018b\3\2\2\2\u018c")
        buf.write("\u018d\3\2\2\2\u018d\u018e\3\2\2\2\u018e\u018f\5\66\34")
        buf.write("\2\u018f\u0190\7\u00c6\2\2\u0190\u01a4\3\2\2\2\u0191\u0192")
        buf.write("\79\2\2\u0192\u0193\7\u00c7\2\2\u0193\u0195\5\66\34\2")
        buf.write("\u0194\u0196\7\u00c4\2\2\u0195\u0194\3\2\2\2\u0195\u0196")
        buf.write("\3\2\2\2\u0196\u0197\3\2\2\2\u0197\u0198\5\66\34\2\u0198")
        buf.write("\u0199\7\u00c8\2\2\u0199\u01a4\3\2\2\2\u019a\u019b\79")
        buf.write("\2\2\u019b\u019c\7\u00c9\2\2\u019c\u019e\5\66\34\2\u019d")
        buf.write("\u019f\7\u00c4\2\2\u019e\u019d\3\2\2\2\u019e\u019f\3\2")
        buf.write("\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a1\5\66\34\2\u01a1\u01a2")
        buf.write("\7\u00ca\2\2\u01a2\u01a4\3\2\2\2\u01a3\u0188\3\2\2\2\u01a3")
        buf.write("\u0191\3\2\2\2\u01a3\u019a\3\2\2\2\u01a4+\3\2\2\2\u01a5")
        buf.write("\u01a6\7:\2\2\u01a6\u01a7\7\u00c5\2\2\u01a7\u01a9\5\66")
        buf.write("\34\2\u01a8\u01aa\7\u00c4\2\2\u01a9\u01a8\3\2\2\2\u01a9")
        buf.write("\u01aa\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ad\5\66\34")
        buf.write("\2\u01ac\u01ae\7\u00c4\2\2\u01ad\u01ac\3\2\2\2\u01ad\u01ae")
        buf.write("\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b0\5\66\34\2\u01b0")
        buf.write("\u01b1\7\u00c6\2\2\u01b1\u01cd\3\2\2\2\u01b2\u01b3\7:")
        buf.write("\2\2\u01b3\u01b4\7\u00c7\2\2\u01b4\u01b6\5\66\34\2\u01b5")
        buf.write("\u01b7\7\u00c4\2\2\u01b6\u01b5\3\2\2\2\u01b6\u01b7\3\2")
        buf.write("\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01ba\5\66\34\2\u01b9\u01bb")
        buf.write("\7\u00c4\2\2\u01ba\u01b9\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb")
        buf.write("\u01bc\3\2\2\2\u01bc\u01bd\5\66\34\2\u01bd\u01be\7\u00c8")
        buf.write("\2\2\u01be\u01cd\3\2\2\2\u01bf\u01c0\7:\2\2\u01c0\u01c1")
        buf.write("\7\u00c9\2\2\u01c1\u01c3\5\66\34\2\u01c2\u01c4\7\u00c4")
        buf.write("\2\2\u01c3\u01c2\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01c5")
        buf.write("\3\2\2\2\u01c5\u01c7\5\66\34\2\u01c6\u01c8\7\u00c4\2\2")
        buf.write("\u01c7\u01c6\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c9\3")
        buf.write("\2\2\2\u01c9\u01ca\5\66\34\2\u01ca\u01cb\7\u00ca\2\2\u01cb")
        buf.write("\u01cd\3\2\2\2\u01cc\u01a5\3\2\2\2\u01cc\u01b2\3\2\2\2")
        buf.write("\u01cc\u01bf\3\2\2\2\u01cd-\3\2\2\2\u01ce\u01cf\7;\2\2")
        buf.write("\u01cf\u01d0\7\u00c5\2\2\u01d0\u01d2\5\66\34\2\u01d1\u01d3")
        buf.write("\7\u00c4\2\2\u01d2\u01d1\3\2\2\2\u01d2\u01d3\3\2\2\2\u01d3")
        buf.write("\u01d4\3\2\2\2\u01d4\u01d6\5\66\34\2\u01d5\u01d7\7\u00c4")
        buf.write("\2\2\u01d6\u01d5\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01d8")
        buf.write("\3\2\2\2\u01d8\u01da\5\66\34\2\u01d9\u01db\7\u00c4\2\2")
        buf.write("\u01da\u01d9\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01dc\3")
        buf.write("\2\2\2\u01dc\u01dd\5\66\34\2\u01dd\u01de\7\u00c6\2\2\u01de")
        buf.write("\u0202\3\2\2\2\u01df\u01e0\7;\2\2\u01e0\u01e1\7\u00c7")
        buf.write("\2\2\u01e1\u01e3\5\66\34\2\u01e2\u01e4\7\u00c4\2\2\u01e3")
        buf.write("\u01e2\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4\u01e5\3\2\2\2")
        buf.write("\u01e5\u01e7\5\66\34\2\u01e6\u01e8\7\u00c4\2\2\u01e7\u01e6")
        buf.write("\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u01e9\3\2\2\2\u01e9")
        buf.write("\u01eb\5\66\34\2\u01ea\u01ec\7\u00c4\2\2\u01eb\u01ea\3")
        buf.write("\2\2\2\u01eb\u01ec\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01ee")
        buf.write("\5\66\34\2\u01ee\u01ef\7\u00c8\2\2\u01ef\u0202\3\2\2\2")
        buf.write("\u01f0\u01f1\7;\2\2\u01f1\u01f2\7\u00c9\2\2\u01f2\u01f4")
        buf.write("\5\66\34\2\u01f3\u01f5\7\u00c4\2\2\u01f4\u01f3\3\2\2\2")
        buf.write("\u01f4\u01f5\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f8\5")
        buf.write("\66\34\2\u01f7\u01f9\7\u00c4\2\2\u01f8\u01f7\3\2\2\2\u01f8")
        buf.write("\u01f9\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fc\5\66\34")
        buf.write("\2\u01fb\u01fd\7\u00c4\2\2\u01fc\u01fb\3\2\2\2\u01fc\u01fd")
        buf.write("\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\u01ff\5\66\34\2\u01ff")
        buf.write("\u0200\7\u00ca\2\2\u0200\u0202\3\2\2\2\u0201\u01ce\3\2")
        buf.write("\2\2\u0201\u01df\3\2\2\2\u0201\u01f0\3\2\2\2\u0202/\3")
        buf.write("\2\2\2\u0203\u0204\7<\2\2\u0204\u0205\7\u00c5\2\2\u0205")
        buf.write("\u0207\5*\26\2\u0206\u0208\7\u00c4\2\2\u0207\u0206\3\2")
        buf.write("\2\2\u0207\u0208\3\2\2\2\u0208\u0209\3\2\2\2\u0209\u020b")
        buf.write("\7\u00c2\2\2\u020a\u020c\7\u00c4\2\2\u020b\u020a\3\2\2")
        buf.write("\2\u020b\u020c\3\2\2\2\u020c\u020d\3\2\2\2\u020d\u020f")
        buf.write("\5*\26\2\u020e\u0210\7\u00c4\2\2\u020f\u020e\3\2\2\2\u020f")
        buf.write("\u0210\3\2\2\2\u0210\u0211\3\2\2\2\u0211\u0212\7\u00c2")
        buf.write("\2\2\u0212\u0213\7\u00c6\2\2\u0213\u0237\3\2\2\2\u0214")
        buf.write("\u0215\7<\2\2\u0215\u0216\7\u00c7\2\2\u0216\u0218\5*\26")
        buf.write("\2\u0217\u0219\7\u00c4\2\2\u0218\u0217\3\2\2\2\u0218\u0219")
        buf.write("\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021c\7\u00c2\2\2\u021b")
        buf.write("\u021d\7\u00c4\2\2\u021c\u021b\3\2\2\2\u021c\u021d\3\2")
        buf.write("\2\2\u021d\u021e\3\2\2\2\u021e\u0220\5*\26\2\u021f\u0221")
        buf.write("\7\u00c4\2\2\u0220\u021f\3\2\2\2\u0220\u0221\3\2\2\2\u0221")
        buf.write("\u0222\3\2\2\2\u0222\u0223\7\u00c2\2\2\u0223\u0224\7\u00c8")
        buf.write("\2\2\u0224\u0237\3\2\2\2\u0225\u0226\7<\2\2\u0226\u0227")
        buf.write("\7\u00c9\2\2\u0227\u0229\5*\26\2\u0228\u022a\7\u00c4\2")
        buf.write("\2\u0229\u0228\3\2\2\2\u0229\u022a\3\2\2\2\u022a\u022b")
        buf.write("\3\2\2\2\u022b\u022d\7\u00c2\2\2\u022c\u022e\7\u00c4\2")
        buf.write("\2\u022d\u022c\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u022f")
        buf.write("\3\2\2\2\u022f\u0231\5*\26\2\u0230\u0232\7\u00c4\2\2\u0231")
        buf.write("\u0230\3\2\2\2\u0231\u0232\3\2\2\2\u0232\u0233\3\2\2\2")
        buf.write("\u0233\u0234\7\u00c2\2\2\u0234\u0235\7\u00ca\2\2\u0235")
        buf.write("\u0237\3\2\2\2\u0236\u0203\3\2\2\2\u0236\u0214\3\2\2\2")
        buf.write("\u0236\u0225\3\2\2\2\u0237\61\3\2\2\2\u0238\u0239\7<\2")
        buf.write("\2\u0239\u023a\7\u00c5\2\2\u023a\u023c\5*\26\2\u023b\u023d")
        buf.write("\7\u00c4\2\2\u023c\u023b\3\2\2\2\u023c\u023d\3\2\2\2\u023d")
        buf.write("\u023e\3\2\2\2\u023e\u0240\7\u00c2\2\2\u023f\u0241\7\u00c4")
        buf.write("\2\2\u0240\u023f\3\2\2\2\u0240\u0241\3\2\2\2\u0241\u0242")
        buf.write("\3\2\2\2\u0242\u0244\5*\26\2\u0243\u0245\7\u00c4\2\2\u0244")
        buf.write("\u0243\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0246\3\2\2\2")
        buf.write("\u0246\u0248\7\u00c2\2\2\u0247\u0249\7\u00c4\2\2\u0248")
        buf.write("\u0247\3\2\2\2\u0248\u0249\3\2\2\2\u0249\u024a\3\2\2\2")
        buf.write("\u024a\u024c\5*\26\2\u024b\u024d\7\u00c4\2\2\u024c\u024b")
        buf.write("\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u024e\3\2\2\2\u024e")
        buf.write("\u024f\7\u00c2\2\2\u024f\u0250\7\u00c6\2\2\u0250\u0284")
        buf.write("\3\2\2\2\u0251\u0252\7<\2\2\u0252\u0253\7\u00c7\2\2\u0253")
        buf.write("\u0255\5*\26\2\u0254\u0256\7\u00c4\2\2\u0255\u0254\3\2")
        buf.write("\2\2\u0255\u0256\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u0259")
        buf.write("\7\u00c2\2\2\u0258\u025a\7\u00c4\2\2\u0259\u0258\3\2\2")
        buf.write("\2\u0259\u025a\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u025d")
        buf.write("\5*\26\2\u025c\u025e\7\u00c4\2\2\u025d\u025c\3\2\2\2\u025d")
        buf.write("\u025e\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0261\7\u00c2")
        buf.write("\2\2\u0260\u0262\7\u00c4\2\2\u0261\u0260\3\2\2\2\u0261")
        buf.write("\u0262\3\2\2\2\u0262\u0263\3\2\2\2\u0263\u0265\5*\26\2")
        buf.write("\u0264\u0266\7\u00c4\2\2\u0265\u0264\3\2\2\2\u0265\u0266")
        buf.write("\3\2\2\2\u0266\u0267\3\2\2\2\u0267\u0268\7\u00c2\2\2\u0268")
        buf.write("\u0269\7\u00c8\2\2\u0269\u0284\3\2\2\2\u026a\u026b\7<")
        buf.write("\2\2\u026b\u026c\7\u00c9\2\2\u026c\u026e\5*\26\2\u026d")
        buf.write("\u026f\7\u00c4\2\2\u026e\u026d\3\2\2\2\u026e\u026f\3\2")
        buf.write("\2\2\u026f\u0270\3\2\2\2\u0270\u0272\7\u00c2\2\2\u0271")
        buf.write("\u0273\7\u00c4\2\2\u0272\u0271\3\2\2\2\u0272\u0273\3\2")
        buf.write("\2\2\u0273\u0274\3\2\2\2\u0274\u0276\5*\26\2\u0275\u0277")
        buf.write("\7\u00c4\2\2\u0276\u0275\3\2\2\2\u0276\u0277\3\2\2\2\u0277")
        buf.write("\u0278\3\2\2\2\u0278\u027a\7\u00c2\2\2\u0279\u027b\7\u00c4")
        buf.write("\2\2\u027a\u0279\3\2\2\2\u027a\u027b\3\2\2\2\u027b\u027c")
        buf.write("\3\2\2\2\u027c\u027e\5*\26\2\u027d\u027f\7\u00c4\2\2\u027e")
        buf.write("\u027d\3\2\2\2\u027e\u027f\3\2\2\2\u027f\u0280\3\2\2\2")
        buf.write("\u0280\u0281\7\u00c2\2\2\u0281\u0282\7\u00ca\2\2\u0282")
        buf.write("\u0284\3\2\2\2\u0283\u0238\3\2\2\2\u0283\u0251\3\2\2\2")
        buf.write("\u0283\u026a\3\2\2\2\u0284\63\3\2\2\2\u0285\u0286\7<\2")
        buf.write("\2\u0286\u0287\7\u00c5\2\2\u0287\u0289\5*\26\2\u0288\u028a")
        buf.write("\7\u00c4\2\2\u0289\u0288\3\2\2\2\u0289\u028a\3\2\2\2\u028a")
        buf.write("\u028b\3\2\2\2\u028b\u028d\7\u00c2\2\2\u028c\u028e\7\u00c4")
        buf.write("\2\2\u028d\u028c\3\2\2\2\u028d\u028e\3\2\2\2\u028e\u028f")
        buf.write("\3\2\2\2\u028f\u0291\5*\26\2\u0290\u0292\7\u00c4\2\2\u0291")
        buf.write("\u0290\3\2\2\2\u0291\u0292\3\2\2\2\u0292\u0293\3\2\2\2")
        buf.write("\u0293\u0295\7\u00c2\2\2\u0294\u0296\7\u00c4\2\2\u0295")
        buf.write("\u0294\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u0297\3\2\2\2")
        buf.write("\u0297\u0299\5*\26\2\u0298\u029a\7\u00c4\2\2\u0299\u0298")
        buf.write("\3\2\2\2\u0299\u029a\3\2\2\2\u029a\u029b\3\2\2\2\u029b")
        buf.write("\u029d\7\u00c2\2\2\u029c\u029e\7\u00c4\2\2\u029d\u029c")
        buf.write("\3\2\2\2\u029d\u029e\3\2\2\2\u029e\u029f\3\2\2\2\u029f")
        buf.write("\u02a1\5*\26\2\u02a0\u02a2\7\u00c4\2\2\u02a1\u02a0\3\2")
        buf.write("\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02a4")
        buf.write("\7\u00c2\2\2\u02a4\u02a5\7\u00c6\2\2\u02a5\u02e9\3\2\2")
        buf.write("\2\u02a6\u02a7\7<\2\2\u02a7\u02a8\7\u00c7\2\2\u02a8\u02aa")
        buf.write("\5*\26\2\u02a9\u02ab\7\u00c4\2\2\u02aa\u02a9\3\2\2\2\u02aa")
        buf.write("\u02ab\3\2\2\2\u02ab\u02ac\3\2\2\2\u02ac\u02ae\7\u00c2")
        buf.write("\2\2\u02ad\u02af\7\u00c4\2\2\u02ae\u02ad\3\2\2\2\u02ae")
        buf.write("\u02af\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02b2\5*\26\2")
        buf.write("\u02b1\u02b3\7\u00c4\2\2\u02b2\u02b1\3\2\2\2\u02b2\u02b3")
        buf.write("\3\2\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02b6\7\u00c2\2\2\u02b5")
        buf.write("\u02b7\7\u00c4\2\2\u02b6\u02b5\3\2\2\2\u02b6\u02b7\3\2")
        buf.write("\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02ba\5*\26\2\u02b9\u02bb")
        buf.write("\7\u00c4\2\2\u02ba\u02b9\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bb")
        buf.write("\u02bc\3\2\2\2\u02bc\u02be\7\u00c2\2\2\u02bd\u02bf\7\u00c4")
        buf.write("\2\2\u02be\u02bd\3\2\2\2\u02be\u02bf\3\2\2\2\u02bf\u02c0")
        buf.write("\3\2\2\2\u02c0\u02c2\5*\26\2\u02c1\u02c3\7\u00c4\2\2\u02c2")
        buf.write("\u02c1\3\2\2\2\u02c2\u02c3\3\2\2\2\u02c3\u02c4\3\2\2\2")
        buf.write("\u02c4\u02c5\7\u00c2\2\2\u02c5\u02c6\7\u00c8\2\2\u02c6")
        buf.write("\u02e9\3\2\2\2\u02c7\u02c8\7<\2\2\u02c8\u02c9\7\u00c9")
        buf.write("\2\2\u02c9\u02cb\5*\26\2\u02ca\u02cc\7\u00c4\2\2\u02cb")
        buf.write("\u02ca\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02cd\3\2\2\2")
        buf.write("\u02cd\u02cf\7\u00c2\2\2\u02ce\u02d0\7\u00c4\2\2\u02cf")
        buf.write("\u02ce\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02d1\3\2\2\2")
        buf.write("\u02d1\u02d3\5*\26\2\u02d2\u02d4\7\u00c4\2\2\u02d3\u02d2")
        buf.write("\3\2\2\2\u02d3\u02d4\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5")
        buf.write("\u02d7\7\u00c2\2\2\u02d6\u02d8\7\u00c4\2\2\u02d7\u02d6")
        buf.write("\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02d9\3\2\2\2\u02d9")
        buf.write("\u02db\5*\26\2\u02da\u02dc\7\u00c4\2\2\u02db\u02da\3\2")
        buf.write("\2\2\u02db\u02dc\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02df")
        buf.write("\7\u00c2\2\2\u02de\u02e0\7\u00c4\2\2\u02df\u02de\3\2\2")
        buf.write("\2\u02df\u02e0\3\2\2\2\u02e0\u02e1\3\2\2\2\u02e1\u02e3")
        buf.write("\5*\26\2\u02e2\u02e4\7\u00c4\2\2\u02e3\u02e2\3\2\2\2\u02e3")
        buf.write("\u02e4\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5\u02e6\7\u00c2")
        buf.write("\2\2\u02e6\u02e7\7\u00ca\2\2\u02e7\u02e9\3\2\2\2\u02e8")
        buf.write("\u0285\3\2\2\2\u02e8\u02a6\3\2\2\2\u02e8\u02c7\3\2\2\2")
        buf.write("\u02e9\65\3\2\2\2\u02ea\u0301\7\u00c1\2\2\u02eb\u02ec")
        buf.write("\7\u00c5\2\2\u02ec\u02ed\7\u00c1\2\2\u02ed\u0301\7\u00c6")
        buf.write("\2\2\u02ee\u02ef\7\u00c7\2\2\u02ef\u02f0\7\u00c1\2\2\u02f0")
        buf.write("\u0301\7\u00c8\2\2\u02f1\u02f2\7\u00c9\2\2\u02f2\u02f3")
        buf.write("\7\u00c1\2\2\u02f3\u0301\7\u00ca\2\2\u02f4\u0301\7\u00c3")
        buf.write("\2\2\u02f5\u02f6\7\u00c5\2\2\u02f6\u02f7\7\u00c3\2\2\u02f7")
        buf.write("\u0301\7\u00c6\2\2\u02f8\u02f9\7\u00c7\2\2\u02f9\u02fa")
        buf.write("\7\u00c3\2\2\u02fa\u0301\7\u00c8\2\2\u02fb\u02fc\7\u00c9")
        buf.write("\2\2\u02fc\u02fd\7\u00c3\2\2\u02fd\u0301\7\u00ca\2\2\u02fe")
        buf.write("\u0301\58\35\2\u02ff\u0301\5:\36\2\u0300\u02ea\3\2\2\2")
        buf.write("\u0300\u02eb\3\2\2\2\u0300\u02ee\3\2\2\2\u0300\u02f1\3")
        buf.write("\2\2\2\u0300\u02f4\3\2\2\2\u0300\u02f5\3\2\2\2\u0300\u02f8")
        buf.write("\3\2\2\2\u0300\u02fb\3\2\2\2\u0300\u02fe\3\2\2\2\u0300")
        buf.write("\u02ff\3\2\2\2\u0301\67\3\2\2\2\u0302\u0303\7=\2\2\u0303")
        buf.write("\u0304\7\u00c5\2\2\u0304\u0306\5\66\34\2\u0305\u0307\7")
        buf.write("\u00c4\2\2\u0306\u0305\3\2\2\2\u0306\u0307\3\2\2\2\u0307")
        buf.write("\u0308\3\2\2\2\u0308\u030a\5\66\34\2\u0309\u030b\7\u00c4")
        buf.write("\2\2\u030a\u0309\3\2\2\2\u030a\u030b\3\2\2\2\u030b\u030c")
        buf.write("\3\2\2\2\u030c\u030e\5\66\34\2\u030d\u030f\7\u00c4\2\2")
        buf.write("\u030e\u030d\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0310\3")
        buf.write("\2\2\2\u0310\u0311\5\66\34\2\u0311\u0312\7\u00c6\2\2\u0312")
        buf.write("\u0336\3\2\2\2\u0313\u0314\7=\2\2\u0314\u0315\7\u00c7")
        buf.write("\2\2\u0315\u0317\5\66\34\2\u0316\u0318\7\u00c4\2\2\u0317")
        buf.write("\u0316\3\2\2\2\u0317\u0318\3\2\2\2\u0318\u0319\3\2\2\2")
        buf.write("\u0319\u031b\5\66\34\2\u031a\u031c\7\u00c4\2\2\u031b\u031a")
        buf.write("\3\2\2\2\u031b\u031c\3\2\2\2\u031c\u031d\3\2\2\2\u031d")
        buf.write("\u031f\5\66\34\2\u031e\u0320\7\u00c4\2\2\u031f\u031e\3")
        buf.write("\2\2\2\u031f\u0320\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0322")
        buf.write("\5\66\34\2\u0322\u0323\7\u00c8\2\2\u0323\u0336\3\2\2\2")
        buf.write("\u0324\u0325\7=\2\2\u0325\u0326\7\u00c9\2\2\u0326\u0328")
        buf.write("\5\66\34\2\u0327\u0329\7\u00c4\2\2\u0328\u0327\3\2\2\2")
        buf.write("\u0328\u0329\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u032c\5")
        buf.write("\66\34\2\u032b\u032d\7\u00c4\2\2\u032c\u032b\3\2\2\2\u032c")
        buf.write("\u032d\3\2\2\2\u032d\u032e\3\2\2\2\u032e\u0330\5\66\34")
        buf.write("\2\u032f\u0331\7\u00c4\2\2\u0330\u032f\3\2\2\2\u0330\u0331")
        buf.write("\3\2\2\2\u0331\u0332\3\2\2\2\u0332\u0333\5\66\34\2\u0333")
        buf.write("\u0334\7\u00ca\2\2\u0334\u0336\3\2\2\2\u0335\u0302\3\2")
        buf.write("\2\2\u0335\u0313\3\2\2\2\u0335\u0324\3\2\2\2\u03369\3")
        buf.write("\2\2\2\u0337\u0338\7>\2\2\u0338\u0339\7\u00c5\2\2\u0339")
        buf.write("\u0340\5\66\34\2\u033a\u033c\7\u00c4\2\2\u033b\u033a\3")
        buf.write("\2\2\2\u033b\u033c\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u033f")
        buf.write("\5\66\34\2\u033e\u033b\3\2\2\2\u033f\u0342\3\2\2\2\u0340")
        buf.write("\u033e\3\2\2\2\u0340\u0341\3\2\2\2\u0341\u0343\3\2\2\2")
        buf.write("\u0342\u0340\3\2\2\2\u0343\u0344\7\u00c6\2\2\u0344\u0362")
        buf.write("\3\2\2\2\u0345\u0346\7>\2\2\u0346\u0347\7\u00c7\2\2\u0347")
        buf.write("\u034e\5\66\34\2\u0348\u034a\7\u00c4\2\2\u0349\u0348\3")
        buf.write("\2\2\2\u0349\u034a\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034d")
        buf.write("\5\66\34\2\u034c\u0349\3\2\2\2\u034d\u0350\3\2\2\2\u034e")
        buf.write("\u034c\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0351\3\2\2\2")
        buf.write("\u0350\u034e\3\2\2\2\u0351\u0352\7\u00c8\2\2\u0352\u0362")
        buf.write("\3\2\2\2\u0353\u0354\7>\2\2\u0354\u0355\7\u00c9\2\2\u0355")
        buf.write("\u035c\5\66\34\2\u0356\u0358\7\u00c4\2\2\u0357\u0356\3")
        buf.write("\2\2\2\u0357\u0358\3\2\2\2\u0358\u0359\3\2\2\2\u0359\u035b")
        buf.write("\5\66\34\2\u035a\u0357\3\2\2\2\u035b\u035e\3\2\2\2\u035c")
        buf.write("\u035a\3\2\2\2\u035c\u035d\3\2\2\2\u035d\u035f\3\2\2\2")
        buf.write("\u035e\u035c\3\2\2\2\u035f\u0360\7\u00ca\2\2\u0360\u0362")
        buf.write("\3\2\2\2\u0361\u0337\3\2\2\2\u0361\u0345\3\2\2\2\u0361")
        buf.write("\u0353\3\2\2\2\u0362;\3\2\2\2iCENm\u0081\u00b6\u00bb\u00e0")
        buf.write("\u00e5\u0115\u011a\u013e\u0143\u0164\u0169\u0186\u018c")
        buf.write("\u0195\u019e\u01a3\u01a9\u01ad\u01b6\u01ba\u01c3\u01c7")
        buf.write("\u01cc\u01d2\u01d6\u01da\u01e3\u01e7\u01eb\u01f4\u01f8")
        buf.write("\u01fc\u0201\u0207\u020b\u020f\u0218\u021c\u0220\u0229")
        buf.write("\u022d\u0231\u0236\u023c\u0240\u0244\u0248\u024c\u0255")
        buf.write("\u0259\u025d\u0261\u0265\u026e\u0272\u0276\u027a\u027e")
        buf.write("\u0283\u0289\u028d\u0291\u0295\u0299\u029d\u02a1\u02aa")
        buf.write("\u02ae\u02b2\u02b6\u02ba\u02be\u02c2\u02cb\u02cf\u02d3")
        buf.write("\u02d7\u02db\u02df\u02e3\u02e8\u0300\u0306\u030a\u030e")
        buf.write("\u0317\u031b\u031f\u0328\u032c\u0330\u0335\u033b\u0340")
        buf.write("\u0349\u034e\u0357\u035c\u0361")
        return buf.getvalue()


class AmberMRParser ( Parser ):

    grammarFileName = "AmberMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'&'" ]

    symbolicNames = [ "<INVALID>", "END", "RST", "IAT", "RSTWT", "RESTRAINT", 
                      "ATNAM", "IRESID", "NSTEP1", "NSTEP2", "IRSTYP", "IALTD", 
                      "IFVARI", "NINC", "IMULT", "R1", "R2", "R3", "R4", 
                      "RK2", "RK3", "R1A", "R2A", "R3A", "R4A", "RK2A", 
                      "RK3A", "R0", "K0", "R0A", "K0A", "RJCOEF", "IGR1", 
                      "IGR2", "IGR3", "IGR4", "IGR5", "IGR6", "IGR7", "IGR8", 
                      "FXYZ", "OUTXYZ", "GRNAM1", "GRNAM2", "GRNAM3", "GRNAM4", 
                      "GRNAM5", "GRNAM6", "GRNAM7", "GRNAM8", "IR6", "IFNTYP", 
                      "IXPK", "NXPK", "ICONSTR", "DISTANCE_F", "ANGLE_F", 
                      "TORSION_F", "COORDINATE_F", "PLANE_F", "COM_F", "NOEEXP", 
                      "NPEAK", "EMIX", "IHP", "JHP", "AEXP", "ARANGE", "AWT", 
                      "INVWT1", "INVWT2", "OMEGA", "TAUROT", "TAUMET", "ID2O", 
                      "OSCALE", "SHF", "NRING", "NATR", "IATR", "NAMR", 
                      "STR", "IPROT", "OBS", "SHRANG", "WT", "NPROT", "SHCUT", 
                      "NTER", "CTER", "PCSHF", "NME", "NMPMC", "OPTPHI", 
                      "OPTTET", "OPTOMG", "OPTA1", "OPTA2", "OPTKON", "TOLPRO", 
                      "MLTPRO", "ALIGN", "NDIP", "ID", "JD", "DOBSL", "DOBSU", 
                      "DWT", "DATASET", "NUM_DATASET", "S11", "S12", "S13", 
                      "S22", "S23", "GIGJ", "DIJ", "DCUT", "FREEZEMOL", 
                      "CSA", "NCSA", "ICSA", "JCSA", "KCSA", "COBSL", "COBSU", 
                      "CWT", "DATASETC", "FIELD", "SIGMA11", "SIGMA12", 
                      "SIGMA13", "SIGMA22", "SIGMA23", "CCUT", "Comma", 
                      "Ampersand", "COMMENT", "Logical", "L_paren", "R_paren", 
                      "L_brace", "R_brace", "L_brakt", "R_brakt", "Equ_op", 
                      "L_QUOT", "SPACE", "HIDDEN_COMMENT", "EMPTY_COMMENT", 
                      "Any_name", "SPACE_C", "RETURN_C", "Equ_op_IP", "L_paren_IP", 
                      "Integer", "SPACE_IP", "Equ_op_RP", "L_paren_RP", 
                      "Real", "SPACE_RP", "Equ_op_BP", "BoolInt", "SPACE_BP", 
                      "L_paren_IA", "Equ_op_IA", "Comma_IA", "Asterisk_IA", 
                      "Integers", "MultiplicativeInt", "RETURN_IA", "L_paren_RA", 
                      "Equ_op_RA", "Comma_RA", "Asterisk_RA", "Reals", "MultiplicativeReal", 
                      "RETURN_RA", "Equ_op_BA", "Comma_BA", "BoolInts", 
                      "RETURN_BA", "L_paren_QA", "Equ_op_QA", "Comma_QA", 
                      "Qstrings", "RETURN_QA", "Comma_A", "R_paren_A", "Decimal", 
                      "SPACE_A", "Int_F", "Real_F", "Ambmask_F", "Comma_F", 
                      "L_paren_F", "R_paren_F", "L_brace_F", "R_brace_F", 
                      "L_brakt_F", "R_brakt_F", "R_QUOT", "SPACE_F" ]

    RULE_amber_mr = 0
    RULE_comment = 1
    RULE_nmr_restraint = 2
    RULE_noesy_volume_restraint = 3
    RULE_chemical_shift_restraint = 4
    RULE_pcs_restraint = 5
    RULE_dipolar_coupling_restraint = 6
    RULE_csa_restraint = 7
    RULE_restraint_statement = 8
    RULE_restraint_factor = 9
    RULE_noeexp_statement = 10
    RULE_noeexp_factor = 11
    RULE_shf_statement = 12
    RULE_shf_factor = 13
    RULE_pcshf_statement = 14
    RULE_pcshf_factor = 15
    RULE_align_statement = 16
    RULE_align_factor = 17
    RULE_csa_statement = 18
    RULE_csa_factor = 19
    RULE_distance_rst_func_call = 20
    RULE_angle_rst_func_call = 21
    RULE_torsion_rst_func_call = 22
    RULE_coordinate2_rst_func_call = 23
    RULE_coordinate3_rst_func_call = 24
    RULE_coordinate4_rst_func_call = 25
    RULE_restraint_func_expr = 26
    RULE_plane_rst_func_call = 27
    RULE_com_rst_func_call = 28

    ruleNames =  [ "amber_mr", "comment", "nmr_restraint", "noesy_volume_restraint", 
                   "chemical_shift_restraint", "pcs_restraint", "dipolar_coupling_restraint", 
                   "csa_restraint", "restraint_statement", "restraint_factor", 
                   "noeexp_statement", "noeexp_factor", "shf_statement", 
                   "shf_factor", "pcshf_statement", "pcshf_factor", "align_statement", 
                   "align_factor", "csa_statement", "csa_factor", "distance_rst_func_call", 
                   "angle_rst_func_call", "torsion_rst_func_call", "coordinate2_rst_func_call", 
                   "coordinate3_rst_func_call", "coordinate4_rst_func_call", 
                   "restraint_func_expr", "plane_rst_func_call", "com_rst_func_call" ]

    EOF = Token.EOF
    END=1
    RST=2
    IAT=3
    RSTWT=4
    RESTRAINT=5
    ATNAM=6
    IRESID=7
    NSTEP1=8
    NSTEP2=9
    IRSTYP=10
    IALTD=11
    IFVARI=12
    NINC=13
    IMULT=14
    R1=15
    R2=16
    R3=17
    R4=18
    RK2=19
    RK3=20
    R1A=21
    R2A=22
    R3A=23
    R4A=24
    RK2A=25
    RK3A=26
    R0=27
    K0=28
    R0A=29
    K0A=30
    RJCOEF=31
    IGR1=32
    IGR2=33
    IGR3=34
    IGR4=35
    IGR5=36
    IGR6=37
    IGR7=38
    IGR8=39
    FXYZ=40
    OUTXYZ=41
    GRNAM1=42
    GRNAM2=43
    GRNAM3=44
    GRNAM4=45
    GRNAM5=46
    GRNAM6=47
    GRNAM7=48
    GRNAM8=49
    IR6=50
    IFNTYP=51
    IXPK=52
    NXPK=53
    ICONSTR=54
    DISTANCE_F=55
    ANGLE_F=56
    TORSION_F=57
    COORDINATE_F=58
    PLANE_F=59
    COM_F=60
    NOEEXP=61
    NPEAK=62
    EMIX=63
    IHP=64
    JHP=65
    AEXP=66
    ARANGE=67
    AWT=68
    INVWT1=69
    INVWT2=70
    OMEGA=71
    TAUROT=72
    TAUMET=73
    ID2O=74
    OSCALE=75
    SHF=76
    NRING=77
    NATR=78
    IATR=79
    NAMR=80
    STR=81
    IPROT=82
    OBS=83
    SHRANG=84
    WT=85
    NPROT=86
    SHCUT=87
    NTER=88
    CTER=89
    PCSHF=90
    NME=91
    NMPMC=92
    OPTPHI=93
    OPTTET=94
    OPTOMG=95
    OPTA1=96
    OPTA2=97
    OPTKON=98
    TOLPRO=99
    MLTPRO=100
    ALIGN=101
    NDIP=102
    ID=103
    JD=104
    DOBSL=105
    DOBSU=106
    DWT=107
    DATASET=108
    NUM_DATASET=109
    S11=110
    S12=111
    S13=112
    S22=113
    S23=114
    GIGJ=115
    DIJ=116
    DCUT=117
    FREEZEMOL=118
    CSA=119
    NCSA=120
    ICSA=121
    JCSA=122
    KCSA=123
    COBSL=124
    COBSU=125
    CWT=126
    DATASETC=127
    FIELD=128
    SIGMA11=129
    SIGMA12=130
    SIGMA13=131
    SIGMA22=132
    SIGMA23=133
    CCUT=134
    Comma=135
    Ampersand=136
    COMMENT=137
    Logical=138
    L_paren=139
    R_paren=140
    L_brace=141
    R_brace=142
    L_brakt=143
    R_brakt=144
    Equ_op=145
    L_QUOT=146
    SPACE=147
    HIDDEN_COMMENT=148
    EMPTY_COMMENT=149
    Any_name=150
    SPACE_C=151
    RETURN_C=152
    Equ_op_IP=153
    L_paren_IP=154
    Integer=155
    SPACE_IP=156
    Equ_op_RP=157
    L_paren_RP=158
    Real=159
    SPACE_RP=160
    Equ_op_BP=161
    BoolInt=162
    SPACE_BP=163
    L_paren_IA=164
    Equ_op_IA=165
    Comma_IA=166
    Asterisk_IA=167
    Integers=168
    MultiplicativeInt=169
    RETURN_IA=170
    L_paren_RA=171
    Equ_op_RA=172
    Comma_RA=173
    Asterisk_RA=174
    Reals=175
    MultiplicativeReal=176
    RETURN_RA=177
    Equ_op_BA=178
    Comma_BA=179
    BoolInts=180
    RETURN_BA=181
    L_paren_QA=182
    Equ_op_QA=183
    Comma_QA=184
    Qstrings=185
    RETURN_QA=186
    Comma_A=187
    R_paren_A=188
    Decimal=189
    SPACE_A=190
    Int_F=191
    Real_F=192
    Ambmask_F=193
    Comma_F=194
    L_paren_F=195
    R_paren_F=196
    L_brace_F=197
    R_brace_F=198
    L_brakt_F=199
    R_brakt_F=200
    R_QUOT=201
    SPACE_F=202

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Amber_mrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(AmberMRParser.EOF, 0)

        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.CommentContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.CommentContext,i)


        def nmr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Nmr_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Nmr_restraintContext,i)


        def noesy_volume_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Noesy_volume_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Noesy_volume_restraintContext,i)


        def chemical_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Chemical_shift_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Chemical_shift_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Pcs_restraintContext,i)


        def dipolar_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Dipolar_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Dipolar_coupling_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Csa_restraintContext,i)


        def getRuleIndex(self):
            return AmberMRParser.RULE_amber_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmber_mr" ):
                listener.enterAmber_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmber_mr" ):
                listener.exitAmber_mr(self)




    def amber_mr(self):

        localctx = AmberMRParser.Amber_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_amber_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 67
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AmberMRParser.RST or _la==AmberMRParser.NOEEXP or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (AmberMRParser.SHF - 76)) | (1 << (AmberMRParser.PCSHF - 76)) | (1 << (AmberMRParser.ALIGN - 76)) | (1 << (AmberMRParser.CSA - 76)) | (1 << (AmberMRParser.COMMENT - 76)))) != 0):
                self.state = 65
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [AmberMRParser.COMMENT]:
                    self.state = 58
                    self.comment()
                    pass
                elif token in [AmberMRParser.RST]:
                    self.state = 59
                    self.nmr_restraint()
                    pass
                elif token in [AmberMRParser.NOEEXP]:
                    self.state = 60
                    self.noesy_volume_restraint()
                    pass
                elif token in [AmberMRParser.SHF]:
                    self.state = 61
                    self.chemical_shift_restraint()
                    pass
                elif token in [AmberMRParser.PCSHF]:
                    self.state = 62
                    self.pcs_restraint()
                    pass
                elif token in [AmberMRParser.ALIGN]:
                    self.state = 63
                    self.dipolar_coupling_restraint()
                    pass
                elif token in [AmberMRParser.CSA]:
                    self.state = 64
                    self.csa_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 69
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 70
            self.match(AmberMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(AmberMRParser.COMMENT, 0)

        def RETURN_C(self):
            return self.getToken(AmberMRParser.RETURN_C, 0)

        def Any_name(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Any_name)
            else:
                return self.getToken(AmberMRParser.Any_name, i)

        def getRuleIndex(self):
            return AmberMRParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)




    def comment(self):

        localctx = AmberMRParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_comment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 72
            self.match(AmberMRParser.COMMENT)
            self.state = 74 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 73
                self.match(AmberMRParser.Any_name)
                self.state = 76 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==AmberMRParser.Any_name):
                    break

            self.state = 78
            self.match(AmberMRParser.RETURN_C)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nmr_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RST(self):
            return self.getToken(AmberMRParser.RST, 0)

        def restraint_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Restraint_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_nmr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNmr_restraint" ):
                listener.enterNmr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNmr_restraint" ):
                listener.exitNmr_restraint(self)




    def nmr_restraint(self):

        localctx = AmberMRParser.Nmr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_nmr_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 80
            self.match(AmberMRParser.RST)
            self.state = 81
            self.restraint_statement()
            self.state = 82
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noesy_volume_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOEEXP(self):
            return self.getToken(AmberMRParser.NOEEXP, 0)

        def noeexp_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Noeexp_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_noesy_volume_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoesy_volume_restraint" ):
                listener.enterNoesy_volume_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoesy_volume_restraint" ):
                listener.exitNoesy_volume_restraint(self)




    def noesy_volume_restraint(self):

        localctx = AmberMRParser.Noesy_volume_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_noesy_volume_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 84
            self.match(AmberMRParser.NOEEXP)
            self.state = 85
            self.noeexp_statement()
            self.state = 86
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Chemical_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHF(self):
            return self.getToken(AmberMRParser.SHF, 0)

        def shf_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Shf_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_chemical_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChemical_shift_restraint" ):
                listener.enterChemical_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChemical_shift_restraint" ):
                listener.exitChemical_shift_restraint(self)




    def chemical_shift_restraint(self):

        localctx = AmberMRParser.Chemical_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_chemical_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 88
            self.match(AmberMRParser.SHF)
            self.state = 89
            self.shf_statement()
            self.state = 90
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PCSHF(self):
            return self.getToken(AmberMRParser.PCSHF, 0)

        def pcshf_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Pcshf_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = AmberMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_pcs_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 92
            self.match(AmberMRParser.PCSHF)
            self.state = 93
            self.pcshf_statement()
            self.state = 94
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dipolar_coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIGN(self):
            return self.getToken(AmberMRParser.ALIGN, 0)

        def align_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Align_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_dipolar_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDipolar_coupling_restraint" ):
                listener.enterDipolar_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDipolar_coupling_restraint" ):
                listener.exitDipolar_coupling_restraint(self)




    def dipolar_coupling_restraint(self):

        localctx = AmberMRParser.Dipolar_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_dipolar_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 96
            self.match(AmberMRParser.ALIGN)
            self.state = 97
            self.align_statement()
            self.state = 98
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CSA(self):
            return self.getToken(AmberMRParser.CSA, 0)

        def csa_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Csa_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = AmberMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_csa_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 100
            self.match(AmberMRParser.CSA)
            self.state = 101
            self.csa_statement()
            self.state = 102
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restraint_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def restraint_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_factorContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_factorContext,i)


        def getRuleIndex(self):
            return AmberMRParser.RULE_restraint_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestraint_statement" ):
                listener.enterRestraint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestraint_statement" ):
                listener.exitRestraint_statement(self)




    def restraint_statement(self):

        localctx = AmberMRParser.Restraint_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_restraint_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.RESTRAINT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.RJCOEF) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8) | (1 << AmberMRParser.FXYZ) | (1 << AmberMRParser.OUTXYZ) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8) | (1 << AmberMRParser.IR6) | (1 << AmberMRParser.IFNTYP) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK) | (1 << AmberMRParser.ICONSTR))) != 0):
                self.state = 104
                self.restraint_factor()
                self.state = 109
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restraint_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def IGR4(self):
            return self.getToken(AmberMRParser.IGR4, 0)

        def IGR5(self):
            return self.getToken(AmberMRParser.IGR5, 0)

        def IGR6(self):
            return self.getToken(AmberMRParser.IGR6, 0)

        def IGR7(self):
            return self.getToken(AmberMRParser.IGR7, 0)

        def IGR8(self):
            return self.getToken(AmberMRParser.IGR8, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def RJCOEF(self):
            return self.getToken(AmberMRParser.RJCOEF, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def RESTRAINT(self):
            return self.getToken(AmberMRParser.RESTRAINT, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def L_QUOT(self):
            return self.getToken(AmberMRParser.L_QUOT, 0)

        def R_QUOT(self):
            return self.getToken(AmberMRParser.R_QUOT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def distance_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Distance_rst_func_callContext,0)


        def angle_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Angle_rst_func_callContext,0)


        def torsion_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Torsion_rst_func_callContext,0)


        def coordinate2_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Coordinate2_rst_func_callContext,0)


        def coordinate3_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Coordinate3_rst_func_callContext,0)


        def coordinate4_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Coordinate4_rst_func_callContext,0)


        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def GRNAM4(self):
            return self.getToken(AmberMRParser.GRNAM4, 0)

        def GRNAM5(self):
            return self.getToken(AmberMRParser.GRNAM5, 0)

        def GRNAM6(self):
            return self.getToken(AmberMRParser.GRNAM6, 0)

        def GRNAM7(self):
            return self.getToken(AmberMRParser.GRNAM7, 0)

        def GRNAM8(self):
            return self.getToken(AmberMRParser.GRNAM8, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IALTD(self):
            return self.getToken(AmberMRParser.IALTD, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def OUTXYZ(self):
            return self.getToken(AmberMRParser.OUTXYZ, 0)

        def IR6(self):
            return self.getToken(AmberMRParser.IR6, 0)

        def IFNTYP(self):
            return self.getToken(AmberMRParser.IFNTYP, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def ICONSTR(self):
            return self.getToken(AmberMRParser.ICONSTR, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def FXYZ(self):
            return self.getToken(AmberMRParser.FXYZ, 0)

        def Equ_op_BA(self):
            return self.getToken(AmberMRParser.Equ_op_BA, 0)

        def BoolInts(self):
            return self.getToken(AmberMRParser.BoolInts, 0)

        def Comma_BA(self):
            return self.getToken(AmberMRParser.Comma_BA, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_A(self):
            return self.getToken(AmberMRParser.R_paren_A, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_restraint_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestraint_factor" ):
                listener.enterRestraint_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestraint_factor" ):
                listener.exitRestraint_factor(self)




    def restraint_factor(self):

        localctx = AmberMRParser.Restraint_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_restraint_factor)
        self._la = 0 # Token type
        try:
            self.state = 180
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 110
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 111
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 112
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 113
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 114
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.RSTWT or _la==AmberMRParser.RJCOEF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 115
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 116
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 117
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 118
                self.match(AmberMRParser.RESTRAINT)
                self.state = 119
                self.match(AmberMRParser.Equ_op)
                self.state = 120
                self.match(AmberMRParser.L_QUOT)
                self.state = 127
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
                if la_ == 1:
                    self.state = 121
                    self.distance_rst_func_call()
                    pass

                elif la_ == 2:
                    self.state = 122
                    self.angle_rst_func_call()
                    pass

                elif la_ == 3:
                    self.state = 123
                    self.torsion_rst_func_call()
                    pass

                elif la_ == 4:
                    self.state = 124
                    self.coordinate2_rst_func_call()
                    pass

                elif la_ == 5:
                    self.state = 125
                    self.coordinate3_rst_func_call()
                    pass

                elif la_ == 6:
                    self.state = 126
                    self.coordinate4_rst_func_call()
                    pass


                self.state = 129
                self.match(AmberMRParser.R_QUOT)
                self.state = 130
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 132
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 133
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 134
                self.match(AmberMRParser.Qstrings)
                self.state = 135
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 136
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.OUTXYZ) | (1 << AmberMRParser.IR6) | (1 << AmberMRParser.IFNTYP))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 137
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 138
                self.match(AmberMRParser.BoolInt)
                self.state = 139
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 140
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK) | (1 << AmberMRParser.ICONSTR))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 141
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 142
                self.match(AmberMRParser.Integer)
                self.state = 143
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 144
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 145
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 146
                self.match(AmberMRParser.Real)
                self.state = 147
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 148
                self.match(AmberMRParser.FXYZ)
                self.state = 149
                self.match(AmberMRParser.Equ_op_BA)
                self.state = 150
                self.match(AmberMRParser.BoolInts)
                self.state = 151
                self.match(AmberMRParser.Comma_BA)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 152
                self.match(AmberMRParser.IAT)
                self.state = 153
                self.match(AmberMRParser.L_paren_IP)
                self.state = 154
                self.match(AmberMRParser.Decimal)
                self.state = 155
                self.match(AmberMRParser.R_paren_A)
                self.state = 156
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 157
                self.match(AmberMRParser.Integer)
                self.state = 158
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 159
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 160
                self.match(AmberMRParser.L_paren_IA)
                self.state = 161
                self.match(AmberMRParser.Decimal)
                self.state = 162
                self.match(AmberMRParser.R_paren_A)
                self.state = 163
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 164
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 165
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 166
                self.match(AmberMRParser.RSTWT)
                self.state = 167
                self.match(AmberMRParser.L_paren_RP)
                self.state = 168
                self.match(AmberMRParser.Decimal)
                self.state = 169
                self.match(AmberMRParser.R_paren_A)
                self.state = 170
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 171
                self.match(AmberMRParser.Real)
                self.state = 172
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 173
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 174
                self.match(AmberMRParser.L_paren_QA)
                self.state = 175
                self.match(AmberMRParser.Decimal)
                self.state = 176
                self.match(AmberMRParser.R_paren_A)
                self.state = 177
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 178
                self.match(AmberMRParser.Qstrings)
                self.state = 179
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noeexp_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noeexp_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Noeexp_factorContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Noeexp_factorContext,i)


        def getRuleIndex(self):
            return AmberMRParser.RULE_noeexp_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoeexp_statement" ):
                listener.enterNoeexp_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoeexp_statement" ):
                listener.exitNoeexp_statement(self)




    def noeexp_statement(self):

        localctx = AmberMRParser.Noeexp_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_noeexp_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 62)) & ~0x3f) == 0 and ((1 << (_la - 62)) & ((1 << (AmberMRParser.NPEAK - 62)) | (1 << (AmberMRParser.EMIX - 62)) | (1 << (AmberMRParser.IHP - 62)) | (1 << (AmberMRParser.JHP - 62)) | (1 << (AmberMRParser.AEXP - 62)) | (1 << (AmberMRParser.ARANGE - 62)) | (1 << (AmberMRParser.AWT - 62)) | (1 << (AmberMRParser.INVWT1 - 62)) | (1 << (AmberMRParser.INVWT2 - 62)) | (1 << (AmberMRParser.OMEGA - 62)) | (1 << (AmberMRParser.TAUROT - 62)) | (1 << (AmberMRParser.TAUMET - 62)) | (1 << (AmberMRParser.ID2O - 62)) | (1 << (AmberMRParser.OSCALE - 62)))) != 0):
                self.state = 182
                self.noeexp_factor()
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noeexp_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NPEAK(self):
            return self.getToken(AmberMRParser.NPEAK, 0)

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def EMIX(self):
            return self.getToken(AmberMRParser.EMIX, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def Decimal(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Decimal)
            else:
                return self.getToken(AmberMRParser.Decimal, i)

        def Comma_A(self):
            return self.getToken(AmberMRParser.Comma_A, 0)

        def R_paren_A(self):
            return self.getToken(AmberMRParser.R_paren_A, 0)

        def IHP(self):
            return self.getToken(AmberMRParser.IHP, 0)

        def JHP(self):
            return self.getToken(AmberMRParser.JHP, 0)

        def L_paren_RA(self):
            return self.getToken(AmberMRParser.L_paren_RA, 0)

        def AEXP(self):
            return self.getToken(AmberMRParser.AEXP, 0)

        def ARANGE(self):
            return self.getToken(AmberMRParser.ARANGE, 0)

        def AWT(self):
            return self.getToken(AmberMRParser.AWT, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def INVWT1(self):
            return self.getToken(AmberMRParser.INVWT1, 0)

        def INVWT2(self):
            return self.getToken(AmberMRParser.INVWT2, 0)

        def OMEGA(self):
            return self.getToken(AmberMRParser.OMEGA, 0)

        def TAUROT(self):
            return self.getToken(AmberMRParser.TAUROT, 0)

        def TAUMET(self):
            return self.getToken(AmberMRParser.TAUMET, 0)

        def OSCALE(self):
            return self.getToken(AmberMRParser.OSCALE, 0)

        def ID2O(self):
            return self.getToken(AmberMRParser.ID2O, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_noeexp_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoeexp_factor" ):
                listener.enterNoeexp_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoeexp_factor" ):
                listener.exitNoeexp_factor(self)




    def noeexp_factor(self):

        localctx = AmberMRParser.Noeexp_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_noeexp_factor)
        self._la = 0 # Token type
        try:
            self.state = 222
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NPEAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 188
                self.match(AmberMRParser.NPEAK)
                self.state = 189
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 190
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 191
                self.match(AmberMRParser.Comma_IA)
                pass
            elif token in [AmberMRParser.EMIX]:
                self.enterOuterAlt(localctx, 2)
                self.state = 192
                self.match(AmberMRParser.EMIX)
                self.state = 193
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 194
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 195
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.IHP, AmberMRParser.JHP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 196
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.IHP or _la==AmberMRParser.JHP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 197
                self.match(AmberMRParser.L_paren_IA)
                self.state = 198
                self.match(AmberMRParser.Decimal)
                self.state = 199
                self.match(AmberMRParser.Comma_A)
                self.state = 200
                self.match(AmberMRParser.Decimal)
                self.state = 201
                self.match(AmberMRParser.R_paren_A)
                self.state = 202
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 203
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 204
                self.match(AmberMRParser.Comma_IA)
                pass
            elif token in [AmberMRParser.AEXP, AmberMRParser.ARANGE, AmberMRParser.AWT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 205
                _la = self._input.LA(1)
                if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (AmberMRParser.AEXP - 66)) | (1 << (AmberMRParser.ARANGE - 66)) | (1 << (AmberMRParser.AWT - 66)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 206
                self.match(AmberMRParser.L_paren_RA)
                self.state = 207
                self.match(AmberMRParser.Decimal)
                self.state = 208
                self.match(AmberMRParser.Comma_A)
                self.state = 209
                self.match(AmberMRParser.Decimal)
                self.state = 210
                self.match(AmberMRParser.R_paren_A)
                self.state = 211
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 212
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 213
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.INVWT1, AmberMRParser.INVWT2, AmberMRParser.OMEGA, AmberMRParser.TAUROT, AmberMRParser.TAUMET, AmberMRParser.OSCALE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 214
                _la = self._input.LA(1)
                if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (AmberMRParser.INVWT1 - 69)) | (1 << (AmberMRParser.INVWT2 - 69)) | (1 << (AmberMRParser.OMEGA - 69)) | (1 << (AmberMRParser.TAUROT - 69)) | (1 << (AmberMRParser.TAUMET - 69)) | (1 << (AmberMRParser.OSCALE - 69)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 215
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 216
                self.match(AmberMRParser.Real)
                self.state = 217
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.ID2O]:
                self.enterOuterAlt(localctx, 6)
                self.state = 218
                self.match(AmberMRParser.ID2O)
                self.state = 219
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 220
                self.match(AmberMRParser.BoolInt)
                self.state = 221
                self.match(AmberMRParser.Comma)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shf_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shf_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Shf_factorContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Shf_factorContext,i)


        def getRuleIndex(self):
            return AmberMRParser.RULE_shf_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShf_statement" ):
                listener.enterShf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShf_statement" ):
                listener.exitShf_statement(self)




    def shf_statement(self):

        localctx = AmberMRParser.Shf_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_shf_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (AmberMRParser.NRING - 77)) | (1 << (AmberMRParser.NATR - 77)) | (1 << (AmberMRParser.IATR - 77)) | (1 << (AmberMRParser.NAMR - 77)) | (1 << (AmberMRParser.STR - 77)) | (1 << (AmberMRParser.IPROT - 77)) | (1 << (AmberMRParser.OBS - 77)) | (1 << (AmberMRParser.SHRANG - 77)) | (1 << (AmberMRParser.WT - 77)) | (1 << (AmberMRParser.NPROT - 77)) | (1 << (AmberMRParser.SHCUT - 77)) | (1 << (AmberMRParser.NTER - 77)) | (1 << (AmberMRParser.CTER - 77)))) != 0):
                self.state = 224
                self.shf_factor()
                self.state = 229
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shf_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def NRING(self):
            return self.getToken(AmberMRParser.NRING, 0)

        def NPROT(self):
            return self.getToken(AmberMRParser.NPROT, 0)

        def NTER(self):
            return self.getToken(AmberMRParser.NTER, 0)

        def CTER(self):
            return self.getToken(AmberMRParser.CTER, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def Decimal(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Decimal)
            else:
                return self.getToken(AmberMRParser.Decimal, i)

        def R_paren_A(self):
            return self.getToken(AmberMRParser.R_paren_A, 0)

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def NATR(self):
            return self.getToken(AmberMRParser.NATR, 0)

        def IPROT(self):
            return self.getToken(AmberMRParser.IPROT, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def IATR(self):
            return self.getToken(AmberMRParser.IATR, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Comma_A(self):
            return self.getToken(AmberMRParser.Comma_A, 0)

        def OBS(self):
            return self.getToken(AmberMRParser.OBS, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def L_paren_RA(self):
            return self.getToken(AmberMRParser.L_paren_RA, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def STR(self):
            return self.getToken(AmberMRParser.STR, 0)

        def SHRANG(self):
            return self.getToken(AmberMRParser.SHRANG, 0)

        def WT(self):
            return self.getToken(AmberMRParser.WT, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def NAMR(self):
            return self.getToken(AmberMRParser.NAMR, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def SHCUT(self):
            return self.getToken(AmberMRParser.SHCUT, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_shf_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShf_factor" ):
                listener.enterShf_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShf_factor" ):
                listener.exitShf_factor(self)




    def shf_factor(self):

        localctx = AmberMRParser.Shf_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_shf_factor)
        self._la = 0 # Token type
        try:
            self.state = 275
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NRING, AmberMRParser.NPROT, AmberMRParser.NTER, AmberMRParser.CTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 230
                _la = self._input.LA(1)
                if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (AmberMRParser.NRING - 77)) | (1 << (AmberMRParser.NPROT - 77)) | (1 << (AmberMRParser.NTER - 77)) | (1 << (AmberMRParser.CTER - 77)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 231
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 232
                self.match(AmberMRParser.Integer)
                self.state = 233
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.NATR, AmberMRParser.IPROT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 234
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.NATR or _la==AmberMRParser.IPROT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 235
                self.match(AmberMRParser.L_paren_IA)
                self.state = 236
                self.match(AmberMRParser.Decimal)
                self.state = 237
                self.match(AmberMRParser.R_paren_A)
                self.state = 238
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 239
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 240
                self.match(AmberMRParser.Comma_IA)
                pass
            elif token in [AmberMRParser.IATR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 241
                self.match(AmberMRParser.IATR)
                self.state = 242
                self.match(AmberMRParser.L_paren_IP)
                self.state = 243
                self.match(AmberMRParser.Decimal)
                self.state = 244
                self.match(AmberMRParser.Comma_A)
                self.state = 245
                self.match(AmberMRParser.Decimal)
                self.state = 246
                self.match(AmberMRParser.R_paren_A)
                self.state = 247
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 248
                self.match(AmberMRParser.Integer)
                self.state = 249
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.OBS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 250
                self.match(AmberMRParser.OBS)
                self.state = 251
                self.match(AmberMRParser.L_paren_RP)
                self.state = 252
                self.match(AmberMRParser.Decimal)
                self.state = 253
                self.match(AmberMRParser.R_paren_A)
                self.state = 254
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 255
                self.match(AmberMRParser.Real)
                self.state = 256
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.STR, AmberMRParser.SHRANG, AmberMRParser.WT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 257
                _la = self._input.LA(1)
                if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (AmberMRParser.STR - 81)) | (1 << (AmberMRParser.SHRANG - 81)) | (1 << (AmberMRParser.WT - 81)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 258
                self.match(AmberMRParser.L_paren_RA)
                self.state = 259
                self.match(AmberMRParser.Decimal)
                self.state = 260
                self.match(AmberMRParser.R_paren_A)
                self.state = 261
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 262
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 263
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.NAMR]:
                self.enterOuterAlt(localctx, 6)
                self.state = 264
                self.match(AmberMRParser.NAMR)
                self.state = 265
                self.match(AmberMRParser.L_paren_QA)
                self.state = 266
                self.match(AmberMRParser.Decimal)
                self.state = 267
                self.match(AmberMRParser.R_paren_A)
                self.state = 268
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 269
                self.match(AmberMRParser.Qstrings)
                self.state = 270
                self.match(AmberMRParser.Comma_QA)
                pass
            elif token in [AmberMRParser.SHCUT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 271
                self.match(AmberMRParser.SHCUT)
                self.state = 272
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 273
                self.match(AmberMRParser.Real)
                self.state = 274
                self.match(AmberMRParser.Comma)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcshf_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcshf_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Pcshf_factorContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Pcshf_factorContext,i)


        def getRuleIndex(self):
            return AmberMRParser.RULE_pcshf_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcshf_statement" ):
                listener.enterPcshf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcshf_statement" ):
                listener.exitPcshf_statement(self)




    def pcshf_statement(self):

        localctx = AmberMRParser.Pcshf_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pcshf_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 82)) & ~0x3f) == 0 and ((1 << (_la - 82)) & ((1 << (AmberMRParser.IPROT - 82)) | (1 << (AmberMRParser.OBS - 82)) | (1 << (AmberMRParser.WT - 82)) | (1 << (AmberMRParser.NPROT - 82)) | (1 << (AmberMRParser.NME - 82)) | (1 << (AmberMRParser.NMPMC - 82)) | (1 << (AmberMRParser.OPTPHI - 82)) | (1 << (AmberMRParser.OPTTET - 82)) | (1 << (AmberMRParser.OPTOMG - 82)) | (1 << (AmberMRParser.OPTA1 - 82)) | (1 << (AmberMRParser.OPTA2 - 82)) | (1 << (AmberMRParser.OPTKON - 82)) | (1 << (AmberMRParser.TOLPRO - 82)) | (1 << (AmberMRParser.MLTPRO - 82)))) != 0):
                self.state = 277
                self.pcshf_factor()
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcshf_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def NPROT(self):
            return self.getToken(AmberMRParser.NPROT, 0)

        def NME(self):
            return self.getToken(AmberMRParser.NME, 0)

        def NMPMC(self):
            return self.getToken(AmberMRParser.NMPMC, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_A(self):
            return self.getToken(AmberMRParser.R_paren_A, 0)

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IPROT(self):
            return self.getToken(AmberMRParser.IPROT, 0)

        def MLTPRO(self):
            return self.getToken(AmberMRParser.MLTPRO, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def OPTPHI(self):
            return self.getToken(AmberMRParser.OPTPHI, 0)

        def OPTTET(self):
            return self.getToken(AmberMRParser.OPTTET, 0)

        def OPTOMG(self):
            return self.getToken(AmberMRParser.OPTOMG, 0)

        def OPTA1(self):
            return self.getToken(AmberMRParser.OPTA1, 0)

        def OPTA2(self):
            return self.getToken(AmberMRParser.OPTA2, 0)

        def OBS(self):
            return self.getToken(AmberMRParser.OBS, 0)

        def L_paren_RA(self):
            return self.getToken(AmberMRParser.L_paren_RA, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def WT(self):
            return self.getToken(AmberMRParser.WT, 0)

        def TOLPRO(self):
            return self.getToken(AmberMRParser.TOLPRO, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def OPTKON(self):
            return self.getToken(AmberMRParser.OPTKON, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_pcshf_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcshf_factor" ):
                listener.enterPcshf_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcshf_factor" ):
                listener.exitPcshf_factor(self)




    def pcshf_factor(self):

        localctx = AmberMRParser.Pcshf_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pcshf_factor)
        self._la = 0 # Token type
        try:
            self.state = 316
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NPROT, AmberMRParser.NME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 283
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.NPROT or _la==AmberMRParser.NME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 284
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 285
                self.match(AmberMRParser.Integer)
                self.state = 286
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.NMPMC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 287
                self.match(AmberMRParser.NMPMC)
                self.state = 288
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 289
                self.match(AmberMRParser.Qstrings)
                self.state = 290
                self.match(AmberMRParser.Comma_QA)
                pass
            elif token in [AmberMRParser.IPROT, AmberMRParser.MLTPRO]:
                self.enterOuterAlt(localctx, 3)
                self.state = 291
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.IPROT or _la==AmberMRParser.MLTPRO):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 292
                self.match(AmberMRParser.L_paren_IA)
                self.state = 293
                self.match(AmberMRParser.Decimal)
                self.state = 294
                self.match(AmberMRParser.R_paren_A)
                self.state = 295
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 296
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 297
                self.match(AmberMRParser.Comma_IA)
                pass
            elif token in [AmberMRParser.OBS, AmberMRParser.OPTPHI, AmberMRParser.OPTTET, AmberMRParser.OPTOMG, AmberMRParser.OPTA1, AmberMRParser.OPTA2]:
                self.enterOuterAlt(localctx, 4)
                self.state = 298
                _la = self._input.LA(1)
                if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (AmberMRParser.OBS - 83)) | (1 << (AmberMRParser.OPTPHI - 83)) | (1 << (AmberMRParser.OPTTET - 83)) | (1 << (AmberMRParser.OPTOMG - 83)) | (1 << (AmberMRParser.OPTA1 - 83)) | (1 << (AmberMRParser.OPTA2 - 83)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 299
                self.match(AmberMRParser.L_paren_RP)
                self.state = 300
                self.match(AmberMRParser.Decimal)
                self.state = 301
                self.match(AmberMRParser.R_paren_A)
                self.state = 302
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 303
                self.match(AmberMRParser.Real)
                self.state = 304
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.WT, AmberMRParser.TOLPRO]:
                self.enterOuterAlt(localctx, 5)
                self.state = 305
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.WT or _la==AmberMRParser.TOLPRO):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 306
                self.match(AmberMRParser.L_paren_RA)
                self.state = 307
                self.match(AmberMRParser.Decimal)
                self.state = 308
                self.match(AmberMRParser.R_paren_A)
                self.state = 309
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 310
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 311
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.OPTKON]:
                self.enterOuterAlt(localctx, 6)
                self.state = 312
                self.match(AmberMRParser.OPTKON)
                self.state = 313
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 314
                self.match(AmberMRParser.Real)
                self.state = 315
                self.match(AmberMRParser.Comma)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Align_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def align_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Align_factorContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Align_factorContext,i)


        def getRuleIndex(self):
            return AmberMRParser.RULE_align_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlign_statement" ):
                listener.enterAlign_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlign_statement" ):
                listener.exitAlign_statement(self)




    def align_statement(self):

        localctx = AmberMRParser.Align_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_align_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (AmberMRParser.NDIP - 102)) | (1 << (AmberMRParser.ID - 102)) | (1 << (AmberMRParser.JD - 102)) | (1 << (AmberMRParser.DOBSL - 102)) | (1 << (AmberMRParser.DOBSU - 102)) | (1 << (AmberMRParser.DWT - 102)) | (1 << (AmberMRParser.DATASET - 102)) | (1 << (AmberMRParser.NUM_DATASET - 102)) | (1 << (AmberMRParser.S11 - 102)) | (1 << (AmberMRParser.S12 - 102)) | (1 << (AmberMRParser.S13 - 102)) | (1 << (AmberMRParser.S22 - 102)) | (1 << (AmberMRParser.S23 - 102)) | (1 << (AmberMRParser.GIGJ - 102)) | (1 << (AmberMRParser.DIJ - 102)) | (1 << (AmberMRParser.DCUT - 102)) | (1 << (AmberMRParser.FREEZEMOL - 102)))) != 0):
                self.state = 318
                self.align_factor()
                self.state = 323
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Align_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def NDIP(self):
            return self.getToken(AmberMRParser.NDIP, 0)

        def DATASET(self):
            return self.getToken(AmberMRParser.DATASET, 0)

        def NUM_DATASET(self):
            return self.getToken(AmberMRParser.NUM_DATASET, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_A(self):
            return self.getToken(AmberMRParser.R_paren_A, 0)

        def ID(self):
            return self.getToken(AmberMRParser.ID, 0)

        def JD(self):
            return self.getToken(AmberMRParser.JD, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def DOBSL(self):
            return self.getToken(AmberMRParser.DOBSL, 0)

        def DOBSU(self):
            return self.getToken(AmberMRParser.DOBSU, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def DWT(self):
            return self.getToken(AmberMRParser.DWT, 0)

        def GIGJ(self):
            return self.getToken(AmberMRParser.GIGJ, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def S11(self):
            return self.getToken(AmberMRParser.S11, 0)

        def S12(self):
            return self.getToken(AmberMRParser.S12, 0)

        def S13(self):
            return self.getToken(AmberMRParser.S13, 0)

        def S22(self):
            return self.getToken(AmberMRParser.S22, 0)

        def S23(self):
            return self.getToken(AmberMRParser.S23, 0)

        def DIJ(self):
            return self.getToken(AmberMRParser.DIJ, 0)

        def DCUT(self):
            return self.getToken(AmberMRParser.DCUT, 0)

        def FREEZEMOL(self):
            return self.getToken(AmberMRParser.FREEZEMOL, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def Logical(self):
            return self.getToken(AmberMRParser.Logical, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_align_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlign_factor" ):
                listener.enterAlign_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlign_factor" ):
                listener.exitAlign_factor(self)




    def align_factor(self):

        localctx = AmberMRParser.Align_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_align_factor)
        self._la = 0 # Token type
        try:
            self.state = 354
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NDIP, AmberMRParser.DATASET, AmberMRParser.NUM_DATASET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 324
                _la = self._input.LA(1)
                if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (AmberMRParser.NDIP - 102)) | (1 << (AmberMRParser.DATASET - 102)) | (1 << (AmberMRParser.NUM_DATASET - 102)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 325
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 326
                self.match(AmberMRParser.Integer)
                self.state = 327
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.ID, AmberMRParser.JD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 328
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.ID or _la==AmberMRParser.JD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 329
                self.match(AmberMRParser.L_paren_IP)
                self.state = 330
                self.match(AmberMRParser.Decimal)
                self.state = 331
                self.match(AmberMRParser.R_paren_A)
                self.state = 332
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 333
                self.match(AmberMRParser.Integer)
                self.state = 334
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.DOBSL, AmberMRParser.DOBSU]:
                self.enterOuterAlt(localctx, 3)
                self.state = 335
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.DOBSL or _la==AmberMRParser.DOBSU):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 336
                self.match(AmberMRParser.L_paren_RP)
                self.state = 337
                self.match(AmberMRParser.Decimal)
                self.state = 338
                self.match(AmberMRParser.R_paren_A)
                self.state = 339
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 340
                self.match(AmberMRParser.Real)
                self.state = 341
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.DWT, AmberMRParser.GIGJ]:
                self.enterOuterAlt(localctx, 4)
                self.state = 342
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.DWT or _la==AmberMRParser.GIGJ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 343
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 344
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 345
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.S11, AmberMRParser.S12, AmberMRParser.S13, AmberMRParser.S22, AmberMRParser.S23, AmberMRParser.DIJ, AmberMRParser.DCUT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 346
                _la = self._input.LA(1)
                if not(((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (AmberMRParser.S11 - 110)) | (1 << (AmberMRParser.S12 - 110)) | (1 << (AmberMRParser.S13 - 110)) | (1 << (AmberMRParser.S22 - 110)) | (1 << (AmberMRParser.S23 - 110)) | (1 << (AmberMRParser.DIJ - 110)) | (1 << (AmberMRParser.DCUT - 110)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 347
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 348
                self.match(AmberMRParser.Real)
                self.state = 349
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.FREEZEMOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 350
                self.match(AmberMRParser.FREEZEMOL)
                self.state = 351
                self.match(AmberMRParser.Equ_op)
                self.state = 352
                self.match(AmberMRParser.Logical)
                self.state = 353
                self.match(AmberMRParser.Comma)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Csa_factorContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Csa_factorContext,i)


        def getRuleIndex(self):
            return AmberMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = AmberMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_csa_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 359
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (AmberMRParser.NCSA - 120)) | (1 << (AmberMRParser.ICSA - 120)) | (1 << (AmberMRParser.JCSA - 120)) | (1 << (AmberMRParser.KCSA - 120)) | (1 << (AmberMRParser.COBSL - 120)) | (1 << (AmberMRParser.COBSU - 120)) | (1 << (AmberMRParser.CWT - 120)) | (1 << (AmberMRParser.DATASETC - 120)) | (1 << (AmberMRParser.FIELD - 120)) | (1 << (AmberMRParser.SIGMA11 - 120)) | (1 << (AmberMRParser.SIGMA12 - 120)) | (1 << (AmberMRParser.SIGMA13 - 120)) | (1 << (AmberMRParser.SIGMA22 - 120)) | (1 << (AmberMRParser.SIGMA23 - 120)) | (1 << (AmberMRParser.CCUT - 120)))) != 0):
                self.state = 356
                self.csa_factor()
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_factorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def NCSA(self):
            return self.getToken(AmberMRParser.NCSA, 0)

        def DATASETC(self):
            return self.getToken(AmberMRParser.DATASETC, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_A(self):
            return self.getToken(AmberMRParser.R_paren_A, 0)

        def ICSA(self):
            return self.getToken(AmberMRParser.ICSA, 0)

        def JCSA(self):
            return self.getToken(AmberMRParser.JCSA, 0)

        def KCSA(self):
            return self.getToken(AmberMRParser.KCSA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def COBSL(self):
            return self.getToken(AmberMRParser.COBSL, 0)

        def COBSU(self):
            return self.getToken(AmberMRParser.COBSU, 0)

        def CWT(self):
            return self.getToken(AmberMRParser.CWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def SIGMA11(self):
            return self.getToken(AmberMRParser.SIGMA11, 0)

        def SIGMA12(self):
            return self.getToken(AmberMRParser.SIGMA12, 0)

        def SIGMA13(self):
            return self.getToken(AmberMRParser.SIGMA13, 0)

        def SIGMA22(self):
            return self.getToken(AmberMRParser.SIGMA22, 0)

        def SIGMA23(self):
            return self.getToken(AmberMRParser.SIGMA23, 0)

        def FIELD(self):
            return self.getToken(AmberMRParser.FIELD, 0)

        def CCUT(self):
            return self.getToken(AmberMRParser.CCUT, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_csa_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_factor" ):
                listener.enterCsa_factor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_factor" ):
                listener.exitCsa_factor(self)




    def csa_factor(self):

        localctx = AmberMRParser.Csa_factorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_csa_factor)
        self._la = 0 # Token type
        try:
            self.state = 388
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NCSA, AmberMRParser.DATASETC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 362
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.NCSA or _la==AmberMRParser.DATASETC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 363
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 364
                self.match(AmberMRParser.Integer)
                self.state = 365
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.ICSA, AmberMRParser.JCSA, AmberMRParser.KCSA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 366
                _la = self._input.LA(1)
                if not(((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & ((1 << (AmberMRParser.ICSA - 121)) | (1 << (AmberMRParser.JCSA - 121)) | (1 << (AmberMRParser.KCSA - 121)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 367
                self.match(AmberMRParser.L_paren_IP)
                self.state = 368
                self.match(AmberMRParser.Decimal)
                self.state = 369
                self.match(AmberMRParser.R_paren_A)
                self.state = 370
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 371
                self.match(AmberMRParser.Integer)
                self.state = 372
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.COBSL, AmberMRParser.COBSU]:
                self.enterOuterAlt(localctx, 3)
                self.state = 373
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.COBSL or _la==AmberMRParser.COBSU):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 374
                self.match(AmberMRParser.L_paren_RP)
                self.state = 375
                self.match(AmberMRParser.Decimal)
                self.state = 376
                self.match(AmberMRParser.R_paren_A)
                self.state = 377
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 378
                self.match(AmberMRParser.Real)
                self.state = 379
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.CWT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 380
                self.match(AmberMRParser.CWT)
                self.state = 381
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 382
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 383
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.FIELD, AmberMRParser.SIGMA11, AmberMRParser.SIGMA12, AmberMRParser.SIGMA13, AmberMRParser.SIGMA22, AmberMRParser.SIGMA23, AmberMRParser.CCUT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 384
                _la = self._input.LA(1)
                if not(((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (AmberMRParser.FIELD - 128)) | (1 << (AmberMRParser.SIGMA11 - 128)) | (1 << (AmberMRParser.SIGMA12 - 128)) | (1 << (AmberMRParser.SIGMA13 - 128)) | (1 << (AmberMRParser.SIGMA22 - 128)) | (1 << (AmberMRParser.SIGMA23 - 128)) | (1 << (AmberMRParser.CCUT - 128)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 385
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 386
                self.match(AmberMRParser.Real)
                self.state = 387
                self.match(AmberMRParser.Comma)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTANCE_F(self):
            return self.getToken(AmberMRParser.DISTANCE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self):
            return self.getToken(AmberMRParser.Comma_F, 0)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_distance_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_rst_func_call" ):
                listener.enterDistance_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_rst_func_call" ):
                listener.exitDistance_rst_func_call(self)




    def distance_rst_func_call(self):

        localctx = AmberMRParser.Distance_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_distance_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 390
                self.match(AmberMRParser.DISTANCE_F)
                self.state = 391
                self.match(AmberMRParser.L_paren_F)
                self.state = 392
                self.restraint_func_expr()
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 393
                    self.match(AmberMRParser.Comma_F)


                self.state = 396
                self.restraint_func_expr()
                self.state = 397
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 399
                self.match(AmberMRParser.DISTANCE_F)
                self.state = 400
                self.match(AmberMRParser.L_brace_F)
                self.state = 401
                self.restraint_func_expr()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 402
                    self.match(AmberMRParser.Comma_F)


                self.state = 405
                self.restraint_func_expr()
                self.state = 406
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 408
                self.match(AmberMRParser.DISTANCE_F)
                self.state = 409
                self.match(AmberMRParser.L_brakt_F)
                self.state = 410
                self.restraint_func_expr()
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 411
                    self.match(AmberMRParser.Comma_F)


                self.state = 414
                self.restraint_func_expr()
                self.state = 415
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANGLE_F(self):
            return self.getToken(AmberMRParser.ANGLE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_angle_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_rst_func_call" ):
                listener.enterAngle_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_rst_func_call" ):
                listener.exitAngle_rst_func_call(self)




    def angle_rst_func_call(self):

        localctx = AmberMRParser.Angle_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_angle_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 458
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,26,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 419
                self.match(AmberMRParser.ANGLE_F)
                self.state = 420
                self.match(AmberMRParser.L_paren_F)
                self.state = 421
                self.restraint_func_expr()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 422
                    self.match(AmberMRParser.Comma_F)


                self.state = 425
                self.restraint_func_expr()
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 426
                    self.match(AmberMRParser.Comma_F)


                self.state = 429
                self.restraint_func_expr()
                self.state = 430
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 432
                self.match(AmberMRParser.ANGLE_F)
                self.state = 433
                self.match(AmberMRParser.L_brace_F)
                self.state = 434
                self.restraint_func_expr()
                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 435
                    self.match(AmberMRParser.Comma_F)


                self.state = 438
                self.restraint_func_expr()
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 439
                    self.match(AmberMRParser.Comma_F)


                self.state = 442
                self.restraint_func_expr()
                self.state = 443
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 445
                self.match(AmberMRParser.ANGLE_F)
                self.state = 446
                self.match(AmberMRParser.L_brakt_F)
                self.state = 447
                self.restraint_func_expr()
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 448
                    self.match(AmberMRParser.Comma_F)


                self.state = 451
                self.restraint_func_expr()
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 452
                    self.match(AmberMRParser.Comma_F)


                self.state = 455
                self.restraint_func_expr()
                self.state = 456
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TORSION_F(self):
            return self.getToken(AmberMRParser.TORSION_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_torsion_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_rst_func_call" ):
                listener.enterTorsion_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_rst_func_call" ):
                listener.exitTorsion_rst_func_call(self)




    def torsion_rst_func_call(self):

        localctx = AmberMRParser.Torsion_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_torsion_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 511
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 460
                self.match(AmberMRParser.TORSION_F)
                self.state = 461
                self.match(AmberMRParser.L_paren_F)
                self.state = 462
                self.restraint_func_expr()
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 463
                    self.match(AmberMRParser.Comma_F)


                self.state = 466
                self.restraint_func_expr()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 467
                    self.match(AmberMRParser.Comma_F)


                self.state = 470
                self.restraint_func_expr()
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 471
                    self.match(AmberMRParser.Comma_F)


                self.state = 474
                self.restraint_func_expr()
                self.state = 475
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 477
                self.match(AmberMRParser.TORSION_F)
                self.state = 478
                self.match(AmberMRParser.L_brace_F)
                self.state = 479
                self.restraint_func_expr()
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 480
                    self.match(AmberMRParser.Comma_F)


                self.state = 483
                self.restraint_func_expr()
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 484
                    self.match(AmberMRParser.Comma_F)


                self.state = 487
                self.restraint_func_expr()
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 488
                    self.match(AmberMRParser.Comma_F)


                self.state = 491
                self.restraint_func_expr()
                self.state = 492
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 494
                self.match(AmberMRParser.TORSION_F)
                self.state = 495
                self.match(AmberMRParser.L_brakt_F)
                self.state = 496
                self.restraint_func_expr()
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 497
                    self.match(AmberMRParser.Comma_F)


                self.state = 500
                self.restraint_func_expr()
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 501
                    self.match(AmberMRParser.Comma_F)


                self.state = 504
                self.restraint_func_expr()
                self.state = 506
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 505
                    self.match(AmberMRParser.Comma_F)


                self.state = 508
                self.restraint_func_expr()
                self.state = 509
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coordinate2_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COORDINATE_F(self):
            return self.getToken(AmberMRParser.COORDINATE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def distance_rst_func_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Distance_rst_func_callContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Distance_rst_func_callContext,i)


        def Real_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Real_F)
            else:
                return self.getToken(AmberMRParser.Real_F, i)

        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_coordinate2_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinate2_rst_func_call" ):
                listener.enterCoordinate2_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinate2_rst_func_call" ):
                listener.exitCoordinate2_rst_func_call(self)




    def coordinate2_rst_func_call(self):

        localctx = AmberMRParser.Coordinate2_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_coordinate2_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 564
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 513
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 514
                self.match(AmberMRParser.L_paren_F)
                self.state = 515
                self.distance_rst_func_call()
                self.state = 517
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 516
                    self.match(AmberMRParser.Comma_F)


                self.state = 519
                self.match(AmberMRParser.Real_F)
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 520
                    self.match(AmberMRParser.Comma_F)


                self.state = 523
                self.distance_rst_func_call()
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 524
                    self.match(AmberMRParser.Comma_F)


                self.state = 527
                self.match(AmberMRParser.Real_F)
                self.state = 528
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 530
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 531
                self.match(AmberMRParser.L_brace_F)
                self.state = 532
                self.distance_rst_func_call()
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 533
                    self.match(AmberMRParser.Comma_F)


                self.state = 536
                self.match(AmberMRParser.Real_F)
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 537
                    self.match(AmberMRParser.Comma_F)


                self.state = 540
                self.distance_rst_func_call()
                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 541
                    self.match(AmberMRParser.Comma_F)


                self.state = 544
                self.match(AmberMRParser.Real_F)
                self.state = 545
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 547
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 548
                self.match(AmberMRParser.L_brakt_F)
                self.state = 549
                self.distance_rst_func_call()
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 550
                    self.match(AmberMRParser.Comma_F)


                self.state = 553
                self.match(AmberMRParser.Real_F)
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 554
                    self.match(AmberMRParser.Comma_F)


                self.state = 557
                self.distance_rst_func_call()
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 558
                    self.match(AmberMRParser.Comma_F)


                self.state = 561
                self.match(AmberMRParser.Real_F)
                self.state = 562
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coordinate3_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COORDINATE_F(self):
            return self.getToken(AmberMRParser.COORDINATE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def distance_rst_func_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Distance_rst_func_callContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Distance_rst_func_callContext,i)


        def Real_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Real_F)
            else:
                return self.getToken(AmberMRParser.Real_F, i)

        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_coordinate3_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinate3_rst_func_call" ):
                listener.enterCoordinate3_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinate3_rst_func_call" ):
                listener.exitCoordinate3_rst_func_call(self)




    def coordinate3_rst_func_call(self):

        localctx = AmberMRParser.Coordinate3_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_coordinate3_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 641
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 566
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 567
                self.match(AmberMRParser.L_paren_F)
                self.state = 568
                self.distance_rst_func_call()
                self.state = 570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 569
                    self.match(AmberMRParser.Comma_F)


                self.state = 572
                self.match(AmberMRParser.Real_F)
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 573
                    self.match(AmberMRParser.Comma_F)


                self.state = 576
                self.distance_rst_func_call()
                self.state = 578
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 577
                    self.match(AmberMRParser.Comma_F)


                self.state = 580
                self.match(AmberMRParser.Real_F)
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 581
                    self.match(AmberMRParser.Comma_F)


                self.state = 584
                self.distance_rst_func_call()
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 585
                    self.match(AmberMRParser.Comma_F)


                self.state = 588
                self.match(AmberMRParser.Real_F)
                self.state = 589
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 591
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 592
                self.match(AmberMRParser.L_brace_F)
                self.state = 593
                self.distance_rst_func_call()
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 594
                    self.match(AmberMRParser.Comma_F)


                self.state = 597
                self.match(AmberMRParser.Real_F)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 598
                    self.match(AmberMRParser.Comma_F)


                self.state = 601
                self.distance_rst_func_call()
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 602
                    self.match(AmberMRParser.Comma_F)


                self.state = 605
                self.match(AmberMRParser.Real_F)
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 606
                    self.match(AmberMRParser.Comma_F)


                self.state = 609
                self.distance_rst_func_call()
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 610
                    self.match(AmberMRParser.Comma_F)


                self.state = 613
                self.match(AmberMRParser.Real_F)
                self.state = 614
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 616
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 617
                self.match(AmberMRParser.L_brakt_F)
                self.state = 618
                self.distance_rst_func_call()
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 619
                    self.match(AmberMRParser.Comma_F)


                self.state = 622
                self.match(AmberMRParser.Real_F)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 623
                    self.match(AmberMRParser.Comma_F)


                self.state = 626
                self.distance_rst_func_call()
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 627
                    self.match(AmberMRParser.Comma_F)


                self.state = 630
                self.match(AmberMRParser.Real_F)
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 631
                    self.match(AmberMRParser.Comma_F)


                self.state = 634
                self.distance_rst_func_call()
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 635
                    self.match(AmberMRParser.Comma_F)


                self.state = 638
                self.match(AmberMRParser.Real_F)
                self.state = 639
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coordinate4_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COORDINATE_F(self):
            return self.getToken(AmberMRParser.COORDINATE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def distance_rst_func_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Distance_rst_func_callContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Distance_rst_func_callContext,i)


        def Real_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Real_F)
            else:
                return self.getToken(AmberMRParser.Real_F, i)

        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_coordinate4_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinate4_rst_func_call" ):
                listener.enterCoordinate4_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinate4_rst_func_call" ):
                listener.exitCoordinate4_rst_func_call(self)




    def coordinate4_rst_func_call(self):

        localctx = AmberMRParser.Coordinate4_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coordinate4_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 643
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 644
                self.match(AmberMRParser.L_paren_F)
                self.state = 645
                self.distance_rst_func_call()
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 646
                    self.match(AmberMRParser.Comma_F)


                self.state = 649
                self.match(AmberMRParser.Real_F)
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 650
                    self.match(AmberMRParser.Comma_F)


                self.state = 653
                self.distance_rst_func_call()
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 654
                    self.match(AmberMRParser.Comma_F)


                self.state = 657
                self.match(AmberMRParser.Real_F)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 658
                    self.match(AmberMRParser.Comma_F)


                self.state = 661
                self.distance_rst_func_call()
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 662
                    self.match(AmberMRParser.Comma_F)


                self.state = 665
                self.match(AmberMRParser.Real_F)
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 666
                    self.match(AmberMRParser.Comma_F)


                self.state = 669
                self.distance_rst_func_call()
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 670
                    self.match(AmberMRParser.Comma_F)


                self.state = 673
                self.match(AmberMRParser.Real_F)
                self.state = 674
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 677
                self.match(AmberMRParser.L_brace_F)
                self.state = 678
                self.distance_rst_func_call()
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 679
                    self.match(AmberMRParser.Comma_F)


                self.state = 682
                self.match(AmberMRParser.Real_F)
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 683
                    self.match(AmberMRParser.Comma_F)


                self.state = 686
                self.distance_rst_func_call()
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 687
                    self.match(AmberMRParser.Comma_F)


                self.state = 690
                self.match(AmberMRParser.Real_F)
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 691
                    self.match(AmberMRParser.Comma_F)


                self.state = 694
                self.distance_rst_func_call()
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 695
                    self.match(AmberMRParser.Comma_F)


                self.state = 698
                self.match(AmberMRParser.Real_F)
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 699
                    self.match(AmberMRParser.Comma_F)


                self.state = 702
                self.distance_rst_func_call()
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 703
                    self.match(AmberMRParser.Comma_F)


                self.state = 706
                self.match(AmberMRParser.Real_F)
                self.state = 707
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 709
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 710
                self.match(AmberMRParser.L_brakt_F)
                self.state = 711
                self.distance_rst_func_call()
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 712
                    self.match(AmberMRParser.Comma_F)


                self.state = 715
                self.match(AmberMRParser.Real_F)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 716
                    self.match(AmberMRParser.Comma_F)


                self.state = 719
                self.distance_rst_func_call()
                self.state = 721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 720
                    self.match(AmberMRParser.Comma_F)


                self.state = 723
                self.match(AmberMRParser.Real_F)
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 724
                    self.match(AmberMRParser.Comma_F)


                self.state = 727
                self.distance_rst_func_call()
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 728
                    self.match(AmberMRParser.Comma_F)


                self.state = 731
                self.match(AmberMRParser.Real_F)
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 732
                    self.match(AmberMRParser.Comma_F)


                self.state = 735
                self.distance_rst_func_call()
                self.state = 737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 736
                    self.match(AmberMRParser.Comma_F)


                self.state = 739
                self.match(AmberMRParser.Real_F)
                self.state = 740
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restraint_func_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int_F(self):
            return self.getToken(AmberMRParser.Int_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def Ambmask_F(self):
            return self.getToken(AmberMRParser.Ambmask_F, 0)

        def plane_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Plane_rst_func_callContext,0)


        def com_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Com_rst_func_callContext,0)


        def getRuleIndex(self):
            return AmberMRParser.RULE_restraint_func_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestraint_func_expr" ):
                listener.enterRestraint_func_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestraint_func_expr" ):
                listener.exitRestraint_func_expr(self)




    def restraint_func_expr(self):

        localctx = AmberMRParser.Restraint_func_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_restraint_func_expr)
        try:
            self.state = 766
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 744
                self.match(AmberMRParser.Int_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 745
                self.match(AmberMRParser.L_paren_F)
                self.state = 746
                self.match(AmberMRParser.Int_F)
                self.state = 747
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 748
                self.match(AmberMRParser.L_brace_F)
                self.state = 749
                self.match(AmberMRParser.Int_F)
                self.state = 750
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 751
                self.match(AmberMRParser.L_brakt_F)
                self.state = 752
                self.match(AmberMRParser.Int_F)
                self.state = 753
                self.match(AmberMRParser.R_brakt_F)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 754
                self.match(AmberMRParser.Ambmask_F)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 755
                self.match(AmberMRParser.L_paren_F)
                self.state = 756
                self.match(AmberMRParser.Ambmask_F)
                self.state = 757
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 758
                self.match(AmberMRParser.L_brace_F)
                self.state = 759
                self.match(AmberMRParser.Ambmask_F)
                self.state = 760
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 761
                self.match(AmberMRParser.L_brakt_F)
                self.state = 762
                self.match(AmberMRParser.Ambmask_F)
                self.state = 763
                self.match(AmberMRParser.R_brakt_F)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 764
                self.plane_rst_func_call()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 765
                self.com_rst_func_call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLANE_F(self):
            return self.getToken(AmberMRParser.PLANE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_plane_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_rst_func_call" ):
                listener.enterPlane_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_rst_func_call" ):
                listener.exitPlane_rst_func_call(self)




    def plane_rst_func_call(self):

        localctx = AmberMRParser.Plane_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_plane_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 768
                self.match(AmberMRParser.PLANE_F)
                self.state = 769
                self.match(AmberMRParser.L_paren_F)
                self.state = 770
                self.restraint_func_expr()
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 771
                    self.match(AmberMRParser.Comma_F)


                self.state = 774
                self.restraint_func_expr()
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 775
                    self.match(AmberMRParser.Comma_F)


                self.state = 778
                self.restraint_func_expr()
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 779
                    self.match(AmberMRParser.Comma_F)


                self.state = 782
                self.restraint_func_expr()
                self.state = 783
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 785
                self.match(AmberMRParser.PLANE_F)
                self.state = 786
                self.match(AmberMRParser.L_brace_F)
                self.state = 787
                self.restraint_func_expr()
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 788
                    self.match(AmberMRParser.Comma_F)


                self.state = 791
                self.restraint_func_expr()
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 792
                    self.match(AmberMRParser.Comma_F)


                self.state = 795
                self.restraint_func_expr()
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 796
                    self.match(AmberMRParser.Comma_F)


                self.state = 799
                self.restraint_func_expr()
                self.state = 800
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 802
                self.match(AmberMRParser.PLANE_F)
                self.state = 803
                self.match(AmberMRParser.L_brakt_F)
                self.state = 804
                self.restraint_func_expr()
                self.state = 806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 805
                    self.match(AmberMRParser.Comma_F)


                self.state = 808
                self.restraint_func_expr()
                self.state = 810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 809
                    self.match(AmberMRParser.Comma_F)


                self.state = 812
                self.restraint_func_expr()
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 813
                    self.match(AmberMRParser.Comma_F)


                self.state = 816
                self.restraint_func_expr()
                self.state = 817
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Com_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COM_F(self):
            return self.getToken(AmberMRParser.COM_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_com_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCom_rst_func_call" ):
                listener.enterCom_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCom_rst_func_call" ):
                listener.exitCom_rst_func_call(self)




    def com_rst_func_call(self):

        localctx = AmberMRParser.Com_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_com_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 863
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 821
                self.match(AmberMRParser.COM_F)
                self.state = 822
                self.match(AmberMRParser.L_paren_F)
                self.state = 823
                self.restraint_func_expr()
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==AmberMRParser.PLANE_F or _la==AmberMRParser.COM_F or ((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & ((1 << (AmberMRParser.Int_F - 191)) | (1 << (AmberMRParser.Ambmask_F - 191)) | (1 << (AmberMRParser.Comma_F - 191)) | (1 << (AmberMRParser.L_paren_F - 191)) | (1 << (AmberMRParser.L_brace_F - 191)) | (1 << (AmberMRParser.L_brakt_F - 191)))) != 0):
                    self.state = 825
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==AmberMRParser.Comma_F:
                        self.state = 824
                        self.match(AmberMRParser.Comma_F)


                    self.state = 827
                    self.restraint_func_expr()
                    self.state = 832
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 833
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 835
                self.match(AmberMRParser.COM_F)
                self.state = 836
                self.match(AmberMRParser.L_brace_F)
                self.state = 837
                self.restraint_func_expr()
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==AmberMRParser.PLANE_F or _la==AmberMRParser.COM_F or ((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & ((1 << (AmberMRParser.Int_F - 191)) | (1 << (AmberMRParser.Ambmask_F - 191)) | (1 << (AmberMRParser.Comma_F - 191)) | (1 << (AmberMRParser.L_paren_F - 191)) | (1 << (AmberMRParser.L_brace_F - 191)) | (1 << (AmberMRParser.L_brakt_F - 191)))) != 0):
                    self.state = 839
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==AmberMRParser.Comma_F:
                        self.state = 838
                        self.match(AmberMRParser.Comma_F)


                    self.state = 841
                    self.restraint_func_expr()
                    self.state = 846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 847
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 849
                self.match(AmberMRParser.COM_F)
                self.state = 850
                self.match(AmberMRParser.L_brakt_F)
                self.state = 851
                self.restraint_func_expr()
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==AmberMRParser.PLANE_F or _la==AmberMRParser.COM_F or ((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & ((1 << (AmberMRParser.Int_F - 191)) | (1 << (AmberMRParser.Ambmask_F - 191)) | (1 << (AmberMRParser.Comma_F - 191)) | (1 << (AmberMRParser.L_paren_F - 191)) | (1 << (AmberMRParser.L_brace_F - 191)) | (1 << (AmberMRParser.L_brakt_F - 191)))) != 0):
                    self.state = 853
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==AmberMRParser.Comma_F:
                        self.state = 852
                        self.match(AmberMRParser.Comma_F)


                    self.state = 855
                    self.restraint_func_expr()
                    self.state = 860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 861
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





