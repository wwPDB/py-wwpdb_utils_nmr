# Generated from AmberMRParser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00cc")
        buf.write("\u050c\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \3\2\3\2\3\2\3\2\3\2\3\2\3\2\7\2H\n\2")
        buf.write("\f\2\16\2K\13\2\3\2\3\2\3\3\3\3\6\3Q\n\3\r\3\16\3R\3\3")
        buf.write("\3\3\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3")
        buf.write("\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n\7\n")
        buf.write("p\n\n\f\n\16\ns\13\n\3\n\7\nv\n\n\f\n\16\ny\13\n\3\n\7")
        buf.write("\n|\n\n\f\n\16\n\177\13\n\3\n\7\n\u0082\n\n\f\n\16\n\u0085")
        buf.write("\13\n\3\n\7\n\u0088\n\n\f\n\16\n\u008b\13\n\3\n\7\n\u008e")
        buf.write("\n\n\f\n\16\n\u0091\13\n\3\n\7\n\u0094\n\n\f\n\16\n\u0097")
        buf.write("\13\n\3\n\7\n\u009a\n\n\f\n\16\n\u009d\13\n\5\n\u009f")
        buf.write("\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u00e0")
        buf.write("\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\3\f\3\f\5\f\u011d\n\f\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\5\r\u015a\n\r\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\5\16\u0190\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\5\17\u01c6\n\17\3\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20")
        buf.write("\u0203\n\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0240\n\21\3")
        buf.write("\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\5\22\u027d\n\22\3\23\3\23\3\23\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u02a1")
        buf.write("\n\23\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\5\24\u02d0\n\24\3\25\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u02f3\n\25\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0313\n\26\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\5\27\u032f\n\27\3\30\3\30\3\30\3")
        buf.write("\30\5\30\u0335\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\5\30\u033e\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5")
        buf.write("\30\u0347\n\30\3\30\3\30\3\30\5\30\u034c\n\30\3\31\3\31")
        buf.write("\3\31\3\31\5\31\u0352\n\31\3\31\3\31\5\31\u0356\n\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u035f\n\31\3\31")
        buf.write("\3\31\5\31\u0363\n\31\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\5\31\u036c\n\31\3\31\3\31\5\31\u0370\n\31\3\31\3\31")
        buf.write("\3\31\5\31\u0375\n\31\3\32\3\32\3\32\3\32\5\32\u037b\n")
        buf.write("\32\3\32\3\32\5\32\u037f\n\32\3\32\3\32\5\32\u0383\n\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u038c\n\32\3")
        buf.write("\32\3\32\5\32\u0390\n\32\3\32\3\32\5\32\u0394\n\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u039d\n\32\3\32\3")
        buf.write("\32\5\32\u03a1\n\32\3\32\3\32\5\32\u03a5\n\32\3\32\3\32")
        buf.write("\3\32\5\32\u03aa\n\32\3\33\3\33\3\33\3\33\5\33\u03b0\n")
        buf.write("\33\3\33\3\33\5\33\u03b4\n\33\3\33\3\33\5\33\u03b8\n\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u03c1\n\33\3")
        buf.write("\33\3\33\5\33\u03c5\n\33\3\33\3\33\5\33\u03c9\n\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u03d2\n\33\3\33\3")
        buf.write("\33\5\33\u03d6\n\33\3\33\3\33\5\33\u03da\n\33\3\33\3\33")
        buf.write("\3\33\5\33\u03df\n\33\3\34\3\34\3\34\3\34\5\34\u03e5\n")
        buf.write("\34\3\34\3\34\5\34\u03e9\n\34\3\34\3\34\5\34\u03ed\n\34")
        buf.write("\3\34\3\34\5\34\u03f1\n\34\3\34\3\34\5\34\u03f5\n\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u03fe\n\34\3\34")
        buf.write("\3\34\5\34\u0402\n\34\3\34\3\34\5\34\u0406\n\34\3\34\3")
        buf.write("\34\5\34\u040a\n\34\3\34\3\34\5\34\u040e\n\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\3\34\5\34\u0417\n\34\3\34\3\34\5")
        buf.write("\34\u041b\n\34\3\34\3\34\5\34\u041f\n\34\3\34\3\34\5\34")
        buf.write("\u0423\n\34\3\34\3\34\5\34\u0427\n\34\3\34\3\34\3\34\5")
        buf.write("\34\u042c\n\34\3\35\3\35\3\35\3\35\5\35\u0432\n\35\3\35")
        buf.write("\3\35\5\35\u0436\n\35\3\35\3\35\5\35\u043a\n\35\3\35\3")
        buf.write("\35\5\35\u043e\n\35\3\35\3\35\5\35\u0442\n\35\3\35\3\35")
        buf.write("\5\35\u0446\n\35\3\35\3\35\5\35\u044a\n\35\3\35\3\35\3")
        buf.write("\35\3\35\3\35\3\35\3\35\5\35\u0453\n\35\3\35\3\35\5\35")
        buf.write("\u0457\n\35\3\35\3\35\5\35\u045b\n\35\3\35\3\35\5\35\u045f")
        buf.write("\n\35\3\35\3\35\5\35\u0463\n\35\3\35\3\35\5\35\u0467\n")
        buf.write("\35\3\35\3\35\5\35\u046b\n\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\3\35\3\35\5\35\u0474\n\35\3\35\3\35\5\35\u0478\n\35\3")
        buf.write("\35\3\35\5\35\u047c\n\35\3\35\3\35\5\35\u0480\n\35\3\35")
        buf.write("\3\35\5\35\u0484\n\35\3\35\3\35\5\35\u0488\n\35\3\35\3")
        buf.write("\35\5\35\u048c\n\35\3\35\3\35\3\35\5\35\u0491\n\35\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36")
        buf.write("\u04a9\n\36\3\37\3\37\3\37\3\37\5\37\u04af\n\37\3\37\3")
        buf.write("\37\5\37\u04b3\n\37\3\37\3\37\5\37\u04b7\n\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\5\37\u04c0\n\37\3\37\3\37\5")
        buf.write("\37\u04c4\n\37\3\37\3\37\5\37\u04c8\n\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\5\37\u04d1\n\37\3\37\3\37\5\37\u04d5")
        buf.write("\n\37\3\37\3\37\5\37\u04d9\n\37\3\37\3\37\3\37\5\37\u04de")
        buf.write("\n\37\3 \3 \3 \3 \5 \u04e4\n \3 \7 \u04e7\n \f \16 \u04ea")
        buf.write("\13 \3 \3 \3 \3 \3 \3 \5 \u04f2\n \3 \7 \u04f5\n \f \16")
        buf.write(" \u04f8\13 \3 \3 \3 \3 \3 \3 \5 \u0500\n \3 \7 \u0503")
        buf.write("\n \f \16 \u0506\13 \3 \3 \5 \u050a\n \3 \2\2!\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>\2\61\4\2\5\5\"#\3\2\u00aa\u00ab\3\2\u00b1\u00b2\4")
        buf.write("\2\b\b,-\7\2\t\t\f\r\20\20++\64\65\5\2\n\13\16\17\668")
        buf.write("\3\2\21 \3\2\"#\4\2\5\5\"$\4\2\b\b,.\6\2\t\t\f\f\20\20")
        buf.write("\65\65\5\2\n\13\16\17\66\67\3\2\"$\4\2\5\5\"%\4\2\6\6")
        buf.write("!!\4\2\b\b,/\3\2\"%\4\2\5\5\"&\4\2\b\b,\60\5\2\t\t\f\f")
        buf.write("\20\20\3\2\"&\4\2\5\5\")\4\2\b\b,\63\3\2\")\6\2\t\t\f")
        buf.write("\r\20\20\65\65\4\2\5\5\"\'\4\2\b\b,\61\3\2\"\'\3\2BC\3")
        buf.write("\2DF\4\2GKMM\5\2OOXXZ[\4\2PPTT\4\2SSVW\4\2XX]]\4\2TTf")
        buf.write("f\4\2UU_c\4\2WWee\4\2hhno\3\2ij\3\2kl\4\2mmuu\4\2ptvw")
        buf.write("\4\2zz\u0081\u0081\3\2{}\3\2~\177\3\2\u0082\u0088\2\u05d2")
        buf.write("\2I\3\2\2\2\4N\3\2\2\2\6V\3\2\2\2\bZ\3\2\2\2\n^\3\2\2")
        buf.write("\2\fb\3\2\2\2\16f\3\2\2\2\20j\3\2\2\2\22\u009e\3\2\2\2")
        buf.write("\24\u00df\3\2\2\2\26\u011c\3\2\2\2\30\u0159\3\2\2\2\32")
        buf.write("\u018f\3\2\2\2\34\u01c5\3\2\2\2\36\u0202\3\2\2\2 \u023f")
        buf.write("\3\2\2\2\"\u027c\3\2\2\2$\u02a0\3\2\2\2&\u02cf\3\2\2\2")
        buf.write("(\u02f2\3\2\2\2*\u0312\3\2\2\2,\u032e\3\2\2\2.\u034b\3")
        buf.write("\2\2\2\60\u0374\3\2\2\2\62\u03a9\3\2\2\2\64\u03de\3\2")
        buf.write("\2\2\66\u042b\3\2\2\28\u0490\3\2\2\2:\u04a8\3\2\2\2<\u04dd")
        buf.write("\3\2\2\2>\u0509\3\2\2\2@H\5\4\3\2AH\5\6\4\2BH\5\b\5\2")
        buf.write("CH\5\n\6\2DH\5\f\7\2EH\5\16\b\2FH\5\20\t\2G@\3\2\2\2G")
        buf.write("A\3\2\2\2GB\3\2\2\2GC\3\2\2\2GD\3\2\2\2GE\3\2\2\2GF\3")
        buf.write("\2\2\2HK\3\2\2\2IG\3\2\2\2IJ\3\2\2\2JL\3\2\2\2KI\3\2\2")
        buf.write("\2LM\7\2\2\3M\3\3\2\2\2NP\7\u008b\2\2OQ\7\u0098\2\2PO")
        buf.write("\3\2\2\2QR\3\2\2\2RP\3\2\2\2RS\3\2\2\2ST\3\2\2\2TU\7\u009a")
        buf.write("\2\2U\5\3\2\2\2VW\7\4\2\2WX\5\22\n\2XY\7\3\2\2Y\7\3\2")
        buf.write("\2\2Z[\7?\2\2[\\\5$\23\2\\]\7\3\2\2]\t\3\2\2\2^_\7N\2")
        buf.write("\2_`\5&\24\2`a\7\3\2\2a\13\3\2\2\2bc\7\\\2\2cd\5(\25\2")
        buf.write("de\7\3\2\2e\r\3\2\2\2fg\7g\2\2gh\5*\26\2hi\7\3\2\2i\17")
        buf.write("\3\2\2\2jk\7y\2\2kl\5,\27\2lm\7\3\2\2m\21\3\2\2\2np\5")
        buf.write("\24\13\2on\3\2\2\2ps\3\2\2\2qo\3\2\2\2qr\3\2\2\2r\u009f")
        buf.write("\3\2\2\2sq\3\2\2\2tv\5\26\f\2ut\3\2\2\2vy\3\2\2\2wu\3")
        buf.write("\2\2\2wx\3\2\2\2x\u009f\3\2\2\2yw\3\2\2\2z|\5\30\r\2{")
        buf.write("z\3\2\2\2|\177\3\2\2\2}{\3\2\2\2}~\3\2\2\2~\u009f\3\2")
        buf.write("\2\2\177}\3\2\2\2\u0080\u0082\5\32\16\2\u0081\u0080\3")
        buf.write("\2\2\2\u0082\u0085\3\2\2\2\u0083\u0081\3\2\2\2\u0083\u0084")
        buf.write("\3\2\2\2\u0084\u009f\3\2\2\2\u0085\u0083\3\2\2\2\u0086")
        buf.write("\u0088\5\34\17\2\u0087\u0086\3\2\2\2\u0088\u008b\3\2\2")
        buf.write("\2\u0089\u0087\3\2\2\2\u0089\u008a\3\2\2\2\u008a\u009f")
        buf.write("\3\2\2\2\u008b\u0089\3\2\2\2\u008c\u008e\5\36\20\2\u008d")
        buf.write("\u008c\3\2\2\2\u008e\u0091\3\2\2\2\u008f\u008d\3\2\2\2")
        buf.write("\u008f\u0090\3\2\2\2\u0090\u009f\3\2\2\2\u0091\u008f\3")
        buf.write("\2\2\2\u0092\u0094\5 \21\2\u0093\u0092\3\2\2\2\u0094\u0097")
        buf.write("\3\2\2\2\u0095\u0093\3\2\2\2\u0095\u0096\3\2\2\2\u0096")
        buf.write("\u009f\3\2\2\2\u0097\u0095\3\2\2\2\u0098\u009a\5\"\22")
        buf.write("\2\u0099\u0098\3\2\2\2\u009a\u009d\3\2\2\2\u009b\u0099")
        buf.write("\3\2\2\2\u009b\u009c\3\2\2\2\u009c\u009f\3\2\2\2\u009d")
        buf.write("\u009b\3\2\2\2\u009eq\3\2\2\2\u009ew\3\2\2\2\u009e}\3")
        buf.write("\2\2\2\u009e\u0083\3\2\2\2\u009e\u0089\3\2\2\2\u009e\u008f")
        buf.write("\3\2\2\2\u009e\u0095\3\2\2\2\u009e\u009b\3\2\2\2\u009f")
        buf.write("\23\3\2\2\2\u00a0\u00a1\t\2\2\2\u00a1\u00a2\7\u00a7\2")
        buf.write("\2\u00a2\u00a3\t\3\2\2\u00a3\u00e0\7\u00a8\2\2\u00a4\u00a5")
        buf.write("\7\6\2\2\u00a5\u00a6\7\u00ae\2\2\u00a6\u00a7\t\4\2\2\u00a7")
        buf.write("\u00e0\7\u00af\2\2\u00a8\u00a9\7\7\2\2\u00a9\u00aa\7\u0093")
        buf.write("\2\2\u00aa\u00ab\7\u0094\2\2\u00ab\u00ac\5.\30\2\u00ac")
        buf.write("\u00ad\7\u00cb\2\2\u00ad\u00ae\7\u0089\2\2\u00ae\u00e0")
        buf.write("\3\2\2\2\u00af\u00b0\t\5\2\2\u00b0\u00b1\7\u00b9\2\2\u00b1")
        buf.write("\u00b2\7\u00bb\2\2\u00b2\u00e0\7\u00ba\2\2\u00b3\u00b4")
        buf.write("\t\6\2\2\u00b4\u00b5\7\u00a3\2\2\u00b5\u00b6\7\u00a4\2")
        buf.write("\2\u00b6\u00e0\7\u0089\2\2\u00b7\u00b8\t\7\2\2\u00b8\u00b9")
        buf.write("\7\u009b\2\2\u00b9\u00ba\7\u009d\2\2\u00ba\u00e0\7\u0089")
        buf.write("\2\2\u00bb\u00bc\t\b\2\2\u00bc\u00bd\7\u009f\2\2\u00bd")
        buf.write("\u00be\7\u00a1\2\2\u00be\u00e0\7\u0089\2\2\u00bf\u00c0")
        buf.write("\7*\2\2\u00c0\u00c1\7\u00b4\2\2\u00c1\u00c2\7\u00b6\2")
        buf.write("\2\u00c2\u00e0\7\u00b5\2\2\u00c3\u00c4\7\5\2\2\u00c4\u00c5")
        buf.write("\7\u009c\2\2\u00c5\u00c6\7\u00bf\2\2\u00c6\u00c7\7\u00be")
        buf.write("\2\2\u00c7\u00c8\7\u009b\2\2\u00c8\u00c9\7\u009d\2\2\u00c9")
        buf.write("\u00e0\7\u0089\2\2\u00ca\u00cb\t\t\2\2\u00cb\u00cc\7\u00a6")
        buf.write("\2\2\u00cc\u00cd\7\u00bf\2\2\u00cd\u00ce\7\u00be\2\2\u00ce")
        buf.write("\u00cf\7\u00a7\2\2\u00cf\u00d0\t\3\2\2\u00d0\u00e0\7\u00a8")
        buf.write("\2\2\u00d1\u00d2\7\6\2\2\u00d2\u00d3\7\u00a0\2\2\u00d3")
        buf.write("\u00d4\7\u00bf\2\2\u00d4\u00d5\7\u00be\2\2\u00d5\u00d6")
        buf.write("\7\u009f\2\2\u00d6\u00d7\7\u00a1\2\2\u00d7\u00e0\7\u0089")
        buf.write("\2\2\u00d8\u00d9\t\5\2\2\u00d9\u00da\7\u00b8\2\2\u00da")
        buf.write("\u00db\7\u00bf\2\2\u00db\u00dc\7\u00be\2\2\u00dc\u00dd")
        buf.write("\7\u00b9\2\2\u00dd\u00de\7\u00bb\2\2\u00de\u00e0\7\u00ba")
        buf.write("\2\2\u00df\u00a0\3\2\2\2\u00df\u00a4\3\2\2\2\u00df\u00a8")
        buf.write("\3\2\2\2\u00df\u00af\3\2\2\2\u00df\u00b3\3\2\2\2\u00df")
        buf.write("\u00b7\3\2\2\2\u00df\u00bb\3\2\2\2\u00df\u00bf\3\2\2\2")
        buf.write("\u00df\u00c3\3\2\2\2\u00df\u00ca\3\2\2\2\u00df\u00d1\3")
        buf.write("\2\2\2\u00df\u00d8\3\2\2\2\u00e0\25\3\2\2\2\u00e1\u00e2")
        buf.write("\t\n\2\2\u00e2\u00e3\7\u00a7\2\2\u00e3\u00e4\t\3\2\2\u00e4")
        buf.write("\u011d\7\u00a8\2\2\u00e5\u00e6\7\6\2\2\u00e6\u00e7\7\u00ae")
        buf.write("\2\2\u00e7\u00e8\t\4\2\2\u00e8\u011d\7\u00af\2\2\u00e9")
        buf.write("\u00ea\7\7\2\2\u00ea\u00eb\7\u0093\2\2\u00eb\u00ec\7\u0094")
        buf.write("\2\2\u00ec\u00ed\5\60\31\2\u00ed\u00ee\7\u00cb\2\2\u00ee")
        buf.write("\u00ef\7\u0089\2\2\u00ef\u011d\3\2\2\2\u00f0\u00f1\t\13")
        buf.write("\2\2\u00f1\u00f2\7\u00b9\2\2\u00f2\u00f3\7\u00bb\2\2\u00f3")
        buf.write("\u011d\7\u00ba\2\2\u00f4\u00f5\t\f\2\2\u00f5\u00f6\7\u00a3")
        buf.write("\2\2\u00f6\u00f7\7\u00a4\2\2\u00f7\u011d\7\u0089\2\2\u00f8")
        buf.write("\u00f9\t\r\2\2\u00f9\u00fa\7\u009b\2\2\u00fa\u00fb\7\u009d")
        buf.write("\2\2\u00fb\u011d\7\u0089\2\2\u00fc\u00fd\t\b\2\2\u00fd")
        buf.write("\u00fe\7\u009f\2\2\u00fe\u00ff\7\u00a1\2\2\u00ff\u011d")
        buf.write("\7\u0089\2\2\u0100\u0101\7\5\2\2\u0101\u0102\7\u009c\2")
        buf.write("\2\u0102\u0103\7\u00bf\2\2\u0103\u0104\7\u00be\2\2\u0104")
        buf.write("\u0105\7\u009b\2\2\u0105\u0106\7\u009d\2\2\u0106\u011d")
        buf.write("\7\u0089\2\2\u0107\u0108\t\16\2\2\u0108\u0109\7\u00a6")
        buf.write("\2\2\u0109\u010a\7\u00bf\2\2\u010a\u010b\7\u00be\2\2\u010b")
        buf.write("\u010c\7\u00a7\2\2\u010c\u010d\t\3\2\2\u010d\u011d\7\u00a8")
        buf.write("\2\2\u010e\u010f\7\6\2\2\u010f\u0110\7\u00a0\2\2\u0110")
        buf.write("\u0111\7\u00bf\2\2\u0111\u0112\7\u00be\2\2\u0112\u0113")
        buf.write("\7\u009f\2\2\u0113\u0114\7\u00a1\2\2\u0114\u011d\7\u0089")
        buf.write("\2\2\u0115\u0116\t\13\2\2\u0116\u0117\7\u00b8\2\2\u0117")
        buf.write("\u0118\7\u00bf\2\2\u0118\u0119\7\u00be\2\2\u0119\u011a")
        buf.write("\7\u00b9\2\2\u011a\u011b\7\u00bb\2\2\u011b\u011d\7\u00ba")
        buf.write("\2\2\u011c\u00e1\3\2\2\2\u011c\u00e5\3\2\2\2\u011c\u00e9")
        buf.write("\3\2\2\2\u011c\u00f0\3\2\2\2\u011c\u00f4\3\2\2\2\u011c")
        buf.write("\u00f8\3\2\2\2\u011c\u00fc\3\2\2\2\u011c\u0100\3\2\2\2")
        buf.write("\u011c\u0107\3\2\2\2\u011c\u010e\3\2\2\2\u011c\u0115\3")
        buf.write("\2\2\2\u011d\27\3\2\2\2\u011e\u011f\t\17\2\2\u011f\u0120")
        buf.write("\7\u00a7\2\2\u0120\u0121\t\3\2\2\u0121\u015a\7\u00a8\2")
        buf.write("\2\u0122\u0123\t\20\2\2\u0123\u0124\7\u00ae\2\2\u0124")
        buf.write("\u0125\t\4\2\2\u0125\u015a\7\u00af\2\2\u0126\u0127\7\7")
        buf.write("\2\2\u0127\u0128\7\u0093\2\2\u0128\u0129\7\u0094\2\2\u0129")
        buf.write("\u012a\5\62\32\2\u012a\u012b\7\u00cb\2\2\u012b\u012c\7")
        buf.write("\u0089\2\2\u012c\u015a\3\2\2\2\u012d\u012e\t\21\2\2\u012e")
        buf.write("\u012f\7\u00b9\2\2\u012f\u0130\7\u00bb\2\2\u0130\u015a")
        buf.write("\7\u00ba\2\2\u0131\u0132\t\f\2\2\u0132\u0133\7\u00a3\2")
        buf.write("\2\u0133\u0134\7\u00a4\2\2\u0134\u015a\7\u0089\2\2\u0135")
        buf.write("\u0136\t\r\2\2\u0136\u0137\7\u009b\2\2\u0137\u0138\7\u009d")
        buf.write("\2\2\u0138\u015a\7\u0089\2\2\u0139\u013a\t\b\2\2\u013a")
        buf.write("\u013b\7\u009f\2\2\u013b\u013c\7\u00a1\2\2\u013c\u015a")
        buf.write("\7\u0089\2\2\u013d\u013e\7\5\2\2\u013e\u013f\7\u009c\2")
        buf.write("\2\u013f\u0140\7\u00bf\2\2\u0140\u0141\7\u00be\2\2\u0141")
        buf.write("\u0142\7\u009b\2\2\u0142\u0143\7\u009d\2\2\u0143\u015a")
        buf.write("\7\u0089\2\2\u0144\u0145\t\22\2\2\u0145\u0146\7\u00a6")
        buf.write("\2\2\u0146\u0147\7\u00bf\2\2\u0147\u0148\7\u00be\2\2\u0148")
        buf.write("\u0149\7\u00a7\2\2\u0149\u014a\t\3\2\2\u014a\u015a\7\u00a8")
        buf.write("\2\2\u014b\u014c\7\6\2\2\u014c\u014d\7\u00a0\2\2\u014d")
        buf.write("\u014e\7\u00bf\2\2\u014e\u014f\7\u00be\2\2\u014f\u0150")
        buf.write("\7\u009f\2\2\u0150\u0151\7\u00a1\2\2\u0151\u015a\7\u0089")
        buf.write("\2\2\u0152\u0153\t\21\2\2\u0153\u0154\7\u00b8\2\2\u0154")
        buf.write("\u0155\7\u00bf\2\2\u0155\u0156\7\u00be\2\2\u0156\u0157")
        buf.write("\7\u00b9\2\2\u0157\u0158\7\u00bb\2\2\u0158\u015a\7\u00ba")
        buf.write("\2\2\u0159\u011e\3\2\2\2\u0159\u0122\3\2\2\2\u0159\u0126")
        buf.write("\3\2\2\2\u0159\u012d\3\2\2\2\u0159\u0131\3\2\2\2\u0159")
        buf.write("\u0135\3\2\2\2\u0159\u0139\3\2\2\2\u0159\u013d\3\2\2\2")
        buf.write("\u0159\u0144\3\2\2\2\u0159\u014b\3\2\2\2\u0159\u0152\3")
        buf.write("\2\2\2\u015a\31\3\2\2\2\u015b\u015c\t\23\2\2\u015c\u015d")
        buf.write("\7\u00a7\2\2\u015d\u015e\t\3\2\2\u015e\u0190\7\u00a8\2")
        buf.write("\2\u015f\u0160\7\6\2\2\u0160\u0161\7\u00ae\2\2\u0161\u0162")
        buf.write("\t\4\2\2\u0162\u0190\7\u00af\2\2\u0163\u0164\t\24\2\2")
        buf.write("\u0164\u0165\7\u00b9\2\2\u0165\u0166\7\u00bb\2\2\u0166")
        buf.write("\u0190\7\u00ba\2\2\u0167\u0168\t\25\2\2\u0168\u0169\7")
        buf.write("\u00a3\2\2\u0169\u016a\7\u00a4\2\2\u016a\u0190\7\u0089")
        buf.write("\2\2\u016b\u016c\t\r\2\2\u016c\u016d\7\u009b\2\2\u016d")
        buf.write("\u016e\7\u009d\2\2\u016e\u0190\7\u0089\2\2\u016f\u0170")
        buf.write("\t\b\2\2\u0170\u0171\7\u009f\2\2\u0171\u0172\7\u00a1\2")
        buf.write("\2\u0172\u0190\7\u0089\2\2\u0173\u0174\7\5\2\2\u0174\u0175")
        buf.write("\7\u009c\2\2\u0175\u0176\7\u00bf\2\2\u0176\u0177\7\u00be")
        buf.write("\2\2\u0177\u0178\7\u009b\2\2\u0178\u0179\7\u009d\2\2\u0179")
        buf.write("\u0190\7\u0089\2\2\u017a\u017b\t\26\2\2\u017b\u017c\7")
        buf.write("\u00a6\2\2\u017c\u017d\7\u00bf\2\2\u017d\u017e\7\u00be")
        buf.write("\2\2\u017e\u017f\7\u00a7\2\2\u017f\u0180\t\3\2\2\u0180")
        buf.write("\u0190\7\u00a8\2\2\u0181\u0182\7\6\2\2\u0182\u0183\7\u00a0")
        buf.write("\2\2\u0183\u0184\7\u00bf\2\2\u0184\u0185\7\u00be\2\2\u0185")
        buf.write("\u0186\7\u009f\2\2\u0186\u0187\7\u00a1\2\2\u0187\u0190")
        buf.write("\7\u0089\2\2\u0188\u0189\t\24\2\2\u0189\u018a\7\u00b8")
        buf.write("\2\2\u018a\u018b\7\u00bf\2\2\u018b\u018c\7\u00be\2\2\u018c")
        buf.write("\u018d\7\u00b9\2\2\u018d\u018e\7\u00bb\2\2\u018e\u0190")
        buf.write("\7\u00ba\2\2\u018f\u015b\3\2\2\2\u018f\u015f\3\2\2\2\u018f")
        buf.write("\u0163\3\2\2\2\u018f\u0167\3\2\2\2\u018f\u016b\3\2\2\2")
        buf.write("\u018f\u016f\3\2\2\2\u018f\u0173\3\2\2\2\u018f\u017a\3")
        buf.write("\2\2\2\u018f\u0181\3\2\2\2\u018f\u0188\3\2\2\2\u0190\33")
        buf.write("\3\2\2\2\u0191\u0192\t\27\2\2\u0192\u0193\7\u00a7\2\2")
        buf.write("\u0193\u0194\t\3\2\2\u0194\u01c6\7\u00a8\2\2\u0195\u0196")
        buf.write("\7\6\2\2\u0196\u0197\7\u00ae\2\2\u0197\u0198\t\4\2\2\u0198")
        buf.write("\u01c6\7\u00af\2\2\u0199\u019a\t\30\2\2\u019a\u019b\7")
        buf.write("\u00b9\2\2\u019b\u019c\7\u00bb\2\2\u019c\u01c6\7\u00ba")
        buf.write("\2\2\u019d\u019e\t\25\2\2\u019e\u019f\7\u00a3\2\2\u019f")
        buf.write("\u01a0\7\u00a4\2\2\u01a0\u01c6\7\u0089\2\2\u01a1\u01a2")
        buf.write("\t\r\2\2\u01a2\u01a3\7\u009b\2\2\u01a3\u01a4\7\u009d\2")
        buf.write("\2\u01a4\u01c6\7\u0089\2\2\u01a5\u01a6\t\b\2\2\u01a6\u01a7")
        buf.write("\7\u009f\2\2\u01a7\u01a8\7\u00a1\2\2\u01a8\u01c6\7\u0089")
        buf.write("\2\2\u01a9\u01aa\7\5\2\2\u01aa\u01ab\7\u009c\2\2\u01ab")
        buf.write("\u01ac\7\u00bf\2\2\u01ac\u01ad\7\u00be\2\2\u01ad\u01ae")
        buf.write("\7\u009b\2\2\u01ae\u01af\7\u009d\2\2\u01af\u01c6\7\u0089")
        buf.write("\2\2\u01b0\u01b1\t\31\2\2\u01b1\u01b2\7\u00a6\2\2\u01b2")
        buf.write("\u01b3\7\u00bf\2\2\u01b3\u01b4\7\u00be\2\2\u01b4\u01b5")
        buf.write("\7\u00a7\2\2\u01b5\u01b6\t\3\2\2\u01b6\u01c6\7\u00a8\2")
        buf.write("\2\u01b7\u01b8\7\6\2\2\u01b8\u01b9\7\u00a0\2\2\u01b9\u01ba")
        buf.write("\7\u00bf\2\2\u01ba\u01bb\7\u00be\2\2\u01bb\u01bc\7\u009f")
        buf.write("\2\2\u01bc\u01bd\7\u00a1\2\2\u01bd\u01c6\7\u0089\2\2\u01be")
        buf.write("\u01bf\t\30\2\2\u01bf\u01c0\7\u00b8\2\2\u01c0\u01c1\7")
        buf.write("\u00bf\2\2\u01c1\u01c2\7\u00be\2\2\u01c2\u01c3\7\u00b9")
        buf.write("\2\2\u01c3\u01c4\7\u00bb\2\2\u01c4\u01c6\7\u00ba\2\2\u01c5")
        buf.write("\u0191\3\2\2\2\u01c5\u0195\3\2\2\2\u01c5\u0199\3\2\2\2")
        buf.write("\u01c5\u019d\3\2\2\2\u01c5\u01a1\3\2\2\2\u01c5\u01a5\3")
        buf.write("\2\2\2\u01c5\u01a9\3\2\2\2\u01c5\u01b0\3\2\2\2\u01c5\u01b7")
        buf.write("\3\2\2\2\u01c5\u01be\3\2\2\2\u01c6\35\3\2\2\2\u01c7\u01c8")
        buf.write("\t\17\2\2\u01c8\u01c9\7\u00a7\2\2\u01c9\u01ca\t\3\2\2")
        buf.write("\u01ca\u0203\7\u00a8\2\2\u01cb\u01cc\7\6\2\2\u01cc\u01cd")
        buf.write("\7\u00ae\2\2\u01cd\u01ce\t\4\2\2\u01ce\u0203\7\u00af\2")
        buf.write("\2\u01cf\u01d0\7\7\2\2\u01d0\u01d1\7\u0093\2\2\u01d1\u01d2")
        buf.write("\7\u0094\2\2\u01d2\u01d3\5\64\33\2\u01d3\u01d4\7\u00cb")
        buf.write("\2\2\u01d4\u01d5\7\u0089\2\2\u01d5\u0203\3\2\2\2\u01d6")
        buf.write("\u01d7\t\21\2\2\u01d7\u01d8\7\u00b9\2\2\u01d8\u01d9\7")
        buf.write("\u00bb\2\2\u01d9\u0203\7\u00ba\2\2\u01da\u01db\t\32\2")
        buf.write("\2\u01db\u01dc\7\u00a3\2\2\u01dc\u01dd\7\u00a4\2\2\u01dd")
        buf.write("\u0203\7\u0089\2\2\u01de\u01df\t\r\2\2\u01df\u01e0\7\u009b")
        buf.write("\2\2\u01e0\u01e1\7\u009d\2\2\u01e1\u0203\7\u0089\2\2\u01e2")
        buf.write("\u01e3\t\b\2\2\u01e3\u01e4\7\u009f\2\2\u01e4\u01e5\7\u00a1")
        buf.write("\2\2\u01e5\u0203\7\u0089\2\2\u01e6\u01e7\7\5\2\2\u01e7")
        buf.write("\u01e8\7\u009c\2\2\u01e8\u01e9\7\u00bf\2\2\u01e9\u01ea")
        buf.write("\7\u00be\2\2\u01ea\u01eb\7\u009b\2\2\u01eb\u01ec\7\u009d")
        buf.write("\2\2\u01ec\u0203\7\u0089\2\2\u01ed\u01ee\t\22\2\2\u01ee")
        buf.write("\u01ef\7\u00a6\2\2\u01ef\u01f0\7\u00bf\2\2\u01f0\u01f1")
        buf.write("\7\u00be\2\2\u01f1\u01f2\7\u00a7\2\2\u01f2\u01f3\t\3\2")
        buf.write("\2\u01f3\u0203\7\u00a8\2\2\u01f4\u01f5\7\6\2\2\u01f5\u01f6")
        buf.write("\7\u00a0\2\2\u01f6\u01f7\7\u00bf\2\2\u01f7\u01f8\7\u00be")
        buf.write("\2\2\u01f8\u01f9\7\u009f\2\2\u01f9\u01fa\7\u00a1\2\2\u01fa")
        buf.write("\u0203\7\u0089\2\2\u01fb\u01fc\t\21\2\2\u01fc\u01fd\7")
        buf.write("\u00b8\2\2\u01fd\u01fe\7\u00bf\2\2\u01fe\u01ff\7\u00be")
        buf.write("\2\2\u01ff\u0200\7\u00b9\2\2\u0200\u0201\7\u00bb\2\2\u0201")
        buf.write("\u0203\7\u00ba\2\2\u0202\u01c7\3\2\2\2\u0202\u01cb\3\2")
        buf.write("\2\2\u0202\u01cf\3\2\2\2\u0202\u01d6\3\2\2\2\u0202\u01da")
        buf.write("\3\2\2\2\u0202\u01de\3\2\2\2\u0202\u01e2\3\2\2\2\u0202")
        buf.write("\u01e6\3\2\2\2\u0202\u01ed\3\2\2\2\u0202\u01f4\3\2\2\2")
        buf.write("\u0202\u01fb\3\2\2\2\u0203\37\3\2\2\2\u0204\u0205\t\33")
        buf.write("\2\2\u0205\u0206\7\u00a7\2\2\u0206\u0207\t\3\2\2\u0207")
        buf.write("\u0240\7\u00a8\2\2\u0208\u0209\7\6\2\2\u0209\u020a\7\u00ae")
        buf.write("\2\2\u020a\u020b\t\4\2\2\u020b\u0240\7\u00af\2\2\u020c")
        buf.write("\u020d\7\7\2\2\u020d\u020e\7\u0093\2\2\u020e\u020f\7\u0094")
        buf.write("\2\2\u020f\u0210\5\66\34\2\u0210\u0211\7\u00cb\2\2\u0211")
        buf.write("\u0212\7\u0089\2\2\u0212\u0240\3\2\2\2\u0213\u0214\t\34")
        buf.write("\2\2\u0214\u0215\7\u00b9\2\2\u0215\u0216\7\u00bb\2\2\u0216")
        buf.write("\u0240\7\u00ba\2\2\u0217\u0218\t\32\2\2\u0218\u0219\7")
        buf.write("\u00a3\2\2\u0219\u021a\7\u00a4\2\2\u021a\u0240\7\u0089")
        buf.write("\2\2\u021b\u021c\t\r\2\2\u021c\u021d\7\u009b\2\2\u021d")
        buf.write("\u021e\7\u009d\2\2\u021e\u0240\7\u0089\2\2\u021f\u0220")
        buf.write("\t\b\2\2\u0220\u0221\7\u009f\2\2\u0221\u0222\7\u00a1\2")
        buf.write("\2\u0222\u0240\7\u0089\2\2\u0223\u0224\7\5\2\2\u0224\u0225")
        buf.write("\7\u009c\2\2\u0225\u0226\7\u00bf\2\2\u0226\u0227\7\u00be")
        buf.write("\2\2\u0227\u0228\7\u009b\2\2\u0228\u0229\7\u009d\2\2\u0229")
        buf.write("\u0240\7\u0089\2\2\u022a\u022b\t\35\2\2\u022b\u022c\7")
        buf.write("\u00a6\2\2\u022c\u022d\7\u00bf\2\2\u022d\u022e\7\u00be")
        buf.write("\2\2\u022e\u022f\7\u00a7\2\2\u022f\u0230\t\3\2\2\u0230")
        buf.write("\u0240\7\u00a8\2\2\u0231\u0232\7\6\2\2\u0232\u0233\7\u00a0")
        buf.write("\2\2\u0233\u0234\7\u00bf\2\2\u0234\u0235\7\u00be\2\2\u0235")
        buf.write("\u0236\7\u009f\2\2\u0236\u0237\7\u00a1\2\2\u0237\u0240")
        buf.write("\7\u0089\2\2\u0238\u0239\t\34\2\2\u0239\u023a\7\u00b8")
        buf.write("\2\2\u023a\u023b\7\u00bf\2\2\u023b\u023c\7\u00be\2\2\u023c")
        buf.write("\u023d\7\u00b9\2\2\u023d\u023e\7\u00bb\2\2\u023e\u0240")
        buf.write("\7\u00ba\2\2\u023f\u0204\3\2\2\2\u023f\u0208\3\2\2\2\u023f")
        buf.write("\u020c\3\2\2\2\u023f\u0213\3\2\2\2\u023f\u0217\3\2\2\2")
        buf.write("\u023f\u021b\3\2\2\2\u023f\u021f\3\2\2\2\u023f\u0223\3")
        buf.write("\2\2\2\u023f\u022a\3\2\2\2\u023f\u0231\3\2\2\2\u023f\u0238")
        buf.write("\3\2\2\2\u0240!\3\2\2\2\u0241\u0242\t\27\2\2\u0242\u0243")
        buf.write("\7\u00a7\2\2\u0243\u0244\t\3\2\2\u0244\u027d\7\u00a8\2")
        buf.write("\2\u0245\u0246\7\6\2\2\u0246\u0247\7\u00ae\2\2\u0247\u0248")
        buf.write("\t\4\2\2\u0248\u027d\7\u00af\2\2\u0249\u024a\7\7\2\2\u024a")
        buf.write("\u024b\7\u0093\2\2\u024b\u024c\7\u0094\2\2\u024c\u024d")
        buf.write("\58\35\2\u024d\u024e\7\u00cb\2\2\u024e\u024f\7\u0089\2")
        buf.write("\2\u024f\u027d\3\2\2\2\u0250\u0251\t\30\2\2\u0251\u0252")
        buf.write("\7\u00b9\2\2\u0252\u0253\7\u00bb\2\2\u0253\u027d\7\u00ba")
        buf.write("\2\2\u0254\u0255\t\32\2\2\u0255\u0256\7\u00a3\2\2\u0256")
        buf.write("\u0257\7\u00a4\2\2\u0257\u027d\7\u0089\2\2\u0258\u0259")
        buf.write("\t\r\2\2\u0259\u025a\7\u009b\2\2\u025a\u025b\7\u009d\2")
        buf.write("\2\u025b\u027d\7\u0089\2\2\u025c\u025d\t\b\2\2\u025d\u025e")
        buf.write("\7\u009f\2\2\u025e\u025f\7\u00a1\2\2\u025f\u027d\7\u0089")
        buf.write("\2\2\u0260\u0261\7\5\2\2\u0261\u0262\7\u009c\2\2\u0262")
        buf.write("\u0263\7\u00bf\2\2\u0263\u0264\7\u00be\2\2\u0264\u0265")
        buf.write("\7\u009b\2\2\u0265\u0266\7\u009d\2\2\u0266\u027d\7\u0089")
        buf.write("\2\2\u0267\u0268\t\31\2\2\u0268\u0269\7\u00a6\2\2\u0269")
        buf.write("\u026a\7\u00bf\2\2\u026a\u026b\7\u00be\2\2\u026b\u026c")
        buf.write("\7\u00a7\2\2\u026c\u026d\t\3\2\2\u026d\u027d\7\u00a8\2")
        buf.write("\2\u026e\u026f\7\6\2\2\u026f\u0270\7\u00a0\2\2\u0270\u0271")
        buf.write("\7\u00bf\2\2\u0271\u0272\7\u00be\2\2\u0272\u0273\7\u009f")
        buf.write("\2\2\u0273\u0274\7\u00a1\2\2\u0274\u027d\7\u0089\2\2\u0275")
        buf.write("\u0276\t\30\2\2\u0276\u0277\7\u00b8\2\2\u0277\u0278\7")
        buf.write("\u00bf\2\2\u0278\u0279\7\u00be\2\2\u0279\u027a\7\u00b9")
        buf.write("\2\2\u027a\u027b\7\u00bb\2\2\u027b\u027d\7\u00ba\2\2\u027c")
        buf.write("\u0241\3\2\2\2\u027c\u0245\3\2\2\2\u027c\u0249\3\2\2\2")
        buf.write("\u027c\u0250\3\2\2\2\u027c\u0254\3\2\2\2\u027c\u0258\3")
        buf.write("\2\2\2\u027c\u025c\3\2\2\2\u027c\u0260\3\2\2\2\u027c\u0267")
        buf.write("\3\2\2\2\u027c\u026e\3\2\2\2\u027c\u0275\3\2\2\2\u027d")
        buf.write("#\3\2\2\2\u027e\u027f\7@\2\2\u027f\u0280\7\u00a7\2\2\u0280")
        buf.write("\u0281\t\3\2\2\u0281\u02a1\7\u00a8\2\2\u0282\u0283\7A")
        buf.write("\2\2\u0283\u0284\7\u00ae\2\2\u0284\u0285\t\4\2\2\u0285")
        buf.write("\u02a1\7\u00af\2\2\u0286\u0287\t\36\2\2\u0287\u0288\7")
        buf.write("\u00a6\2\2\u0288\u0289\7\u00bf\2\2\u0289\u028a\7\u00bd")
        buf.write("\2\2\u028a\u028b\7\u00bf\2\2\u028b\u028c\7\u00be\2\2\u028c")
        buf.write("\u028d\7\u00a7\2\2\u028d\u028e\t\3\2\2\u028e\u02a1\7\u00a8")
        buf.write("\2\2\u028f\u0290\t\37\2\2\u0290\u0291\7\u00ad\2\2\u0291")
        buf.write("\u0292\7\u00bf\2\2\u0292\u0293\7\u00bd\2\2\u0293\u0294")
        buf.write("\7\u00bf\2\2\u0294\u0295\7\u00be\2\2\u0295\u0296\7\u00ae")
        buf.write("\2\2\u0296\u0297\t\4\2\2\u0297\u02a1\7\u00af\2\2\u0298")
        buf.write("\u0299\t \2\2\u0299\u029a\7\u009f\2\2\u029a\u029b\7\u00a1")
        buf.write("\2\2\u029b\u02a1\7\u0089\2\2\u029c\u029d\7L\2\2\u029d")
        buf.write("\u029e\7\u00a3\2\2\u029e\u029f\7\u00a4\2\2\u029f\u02a1")
        buf.write("\7\u0089\2\2\u02a0\u027e\3\2\2\2\u02a0\u0282\3\2\2\2\u02a0")
        buf.write("\u0286\3\2\2\2\u02a0\u028f\3\2\2\2\u02a0\u0298\3\2\2\2")
        buf.write("\u02a0\u029c\3\2\2\2\u02a1%\3\2\2\2\u02a2\u02a3\t!\2\2")
        buf.write("\u02a3\u02a4\7\u009b\2\2\u02a4\u02a5\7\u009d\2\2\u02a5")
        buf.write("\u02d0\7\u0089\2\2\u02a6\u02a7\t\"\2\2\u02a7\u02a8\7\u00a6")
        buf.write("\2\2\u02a8\u02a9\7\u00bf\2\2\u02a9\u02aa\7\u00be\2\2\u02aa")
        buf.write("\u02ab\7\u00a7\2\2\u02ab\u02ac\t\3\2\2\u02ac\u02d0\7\u00a8")
        buf.write("\2\2\u02ad\u02ae\7Q\2\2\u02ae\u02af\7\u009c\2\2\u02af")
        buf.write("\u02b0\7\u00bf\2\2\u02b0\u02b1\7\u00bd\2\2\u02b1\u02b2")
        buf.write("\7\u00bf\2\2\u02b2\u02b3\7\u00be\2\2\u02b3\u02b4\7\u009b")
        buf.write("\2\2\u02b4\u02b5\7\u009d\2\2\u02b5\u02d0\7\u0089\2\2\u02b6")
        buf.write("\u02b7\7U\2\2\u02b7\u02b8\7\u00a0\2\2\u02b8\u02b9\7\u00bf")
        buf.write("\2\2\u02b9\u02ba\7\u00be\2\2\u02ba\u02bb\7\u009f\2\2\u02bb")
        buf.write("\u02bc\7\u00a1\2\2\u02bc\u02d0\7\u0089\2\2\u02bd\u02be")
        buf.write("\t#\2\2\u02be\u02bf\7\u00ad\2\2\u02bf\u02c0\7\u00bf\2")
        buf.write("\2\u02c0\u02c1\7\u00be\2\2\u02c1\u02c2\7\u00ae\2\2\u02c2")
        buf.write("\u02c3\t\4\2\2\u02c3\u02d0\7\u00af\2\2\u02c4\u02c5\7R")
        buf.write("\2\2\u02c5\u02c6\7\u00b8\2\2\u02c6\u02c7\7\u00bf\2\2\u02c7")
        buf.write("\u02c8\7\u00be\2\2\u02c8\u02c9\7\u00b9\2\2\u02c9\u02ca")
        buf.write("\7\u00bb\2\2\u02ca\u02d0\7\u00ba\2\2\u02cb\u02cc\7Y\2")
        buf.write("\2\u02cc\u02cd\7\u009f\2\2\u02cd\u02ce\7\u00a1\2\2\u02ce")
        buf.write("\u02d0\7\u0089\2\2\u02cf\u02a2\3\2\2\2\u02cf\u02a6\3\2")
        buf.write("\2\2\u02cf\u02ad\3\2\2\2\u02cf\u02b6\3\2\2\2\u02cf\u02bd")
        buf.write("\3\2\2\2\u02cf\u02c4\3\2\2\2\u02cf\u02cb\3\2\2\2\u02d0")
        buf.write("\'\3\2\2\2\u02d1\u02d2\t$\2\2\u02d2\u02d3\7\u009b\2\2")
        buf.write("\u02d3\u02d4\7\u009d\2\2\u02d4\u02f3\7\u0089\2\2\u02d5")
        buf.write("\u02d6\7^\2\2\u02d6\u02d7\7\u00b9\2\2\u02d7\u02d8\7\u00bb")
        buf.write("\2\2\u02d8\u02f3\7\u00ba\2\2\u02d9\u02da\t%\2\2\u02da")
        buf.write("\u02db\7\u00a6\2\2\u02db\u02dc\7\u00bf\2\2\u02dc\u02dd")
        buf.write("\7\u00be\2\2\u02dd\u02de\7\u00a7\2\2\u02de\u02df\t\3\2")
        buf.write("\2\u02df\u02f3\7\u00a8\2\2\u02e0\u02e1\t&\2\2\u02e1\u02e2")
        buf.write("\7\u00a0\2\2\u02e2\u02e3\7\u00bf\2\2\u02e3\u02e4\7\u00be")
        buf.write("\2\2\u02e4\u02e5\7\u009f\2\2\u02e5\u02e6\7\u00a1\2\2\u02e6")
        buf.write("\u02f3\7\u0089\2\2\u02e7\u02e8\t\'\2\2\u02e8\u02e9\7\u00ad")
        buf.write("\2\2\u02e9\u02ea\7\u00bf\2\2\u02ea\u02eb\7\u00be\2\2\u02eb")
        buf.write("\u02ec\7\u00ae\2\2\u02ec\u02ed\t\4\2\2\u02ed\u02f3\7\u00af")
        buf.write("\2\2\u02ee\u02ef\7d\2\2\u02ef\u02f0\7\u009f\2\2\u02f0")
        buf.write("\u02f1\7\u00a1\2\2\u02f1\u02f3\7\u0089\2\2\u02f2\u02d1")
        buf.write("\3\2\2\2\u02f2\u02d5\3\2\2\2\u02f2\u02d9\3\2\2\2\u02f2")
        buf.write("\u02e0\3\2\2\2\u02f2\u02e7\3\2\2\2\u02f2\u02ee\3\2\2\2")
        buf.write("\u02f3)\3\2\2\2\u02f4\u02f5\t(\2\2\u02f5\u02f6\7\u009b")
        buf.write("\2\2\u02f6\u02f7\7\u009d\2\2\u02f7\u0313\7\u0089\2\2\u02f8")
        buf.write("\u02f9\t)\2\2\u02f9\u02fa\7\u009c\2\2\u02fa\u02fb\7\u00bf")
        buf.write("\2\2\u02fb\u02fc\7\u00be\2\2\u02fc\u02fd\7\u009b\2\2\u02fd")
        buf.write("\u02fe\7\u009d\2\2\u02fe\u0313\7\u0089\2\2\u02ff\u0300")
        buf.write("\t*\2\2\u0300\u0301\7\u00a0\2\2\u0301\u0302\7\u00bf\2")
        buf.write("\2\u0302\u0303\7\u00be\2\2\u0303\u0304\7\u009f\2\2\u0304")
        buf.write("\u0305\7\u00a1\2\2\u0305\u0313\7\u0089\2\2\u0306\u0307")
        buf.write("\t+\2\2\u0307\u0308\7\u00ae\2\2\u0308\u0309\t\4\2\2\u0309")
        buf.write("\u0313\7\u00af\2\2\u030a\u030b\t,\2\2\u030b\u030c\7\u009f")
        buf.write("\2\2\u030c\u030d\7\u00a1\2\2\u030d\u0313\7\u0089\2\2\u030e")
        buf.write("\u030f\7x\2\2\u030f\u0310\7\u0093\2\2\u0310\u0311\7\u008c")
        buf.write("\2\2\u0311\u0313\7\u0089\2\2\u0312\u02f4\3\2\2\2\u0312")
        buf.write("\u02f8\3\2\2\2\u0312\u02ff\3\2\2\2\u0312\u0306\3\2\2\2")
        buf.write("\u0312\u030a\3\2\2\2\u0312\u030e\3\2\2\2\u0313+\3\2\2")
        buf.write("\2\u0314\u0315\t-\2\2\u0315\u0316\7\u009b\2\2\u0316\u0317")
        buf.write("\7\u009d\2\2\u0317\u032f\7\u0089\2\2\u0318\u0319\t.\2")
        buf.write("\2\u0319\u031a\7\u009c\2\2\u031a\u031b\7\u00bf\2\2\u031b")
        buf.write("\u031c\7\u00be\2\2\u031c\u031d\7\u009b\2\2\u031d\u031e")
        buf.write("\7\u009d\2\2\u031e\u032f\7\u0089\2\2\u031f\u0320\t/\2")
        buf.write("\2\u0320\u0321\7\u00a0\2\2\u0321\u0322\7\u00bf\2\2\u0322")
        buf.write("\u0323\7\u00be\2\2\u0323\u0324\7\u009f\2\2\u0324\u0325")
        buf.write("\7\u00a1\2\2\u0325\u032f\7\u0089\2\2\u0326\u0327\7\u0080")
        buf.write("\2\2\u0327\u0328\7\u00ae\2\2\u0328\u0329\t\4\2\2\u0329")
        buf.write("\u032f\7\u00af\2\2\u032a\u032b\t\60\2\2\u032b\u032c\7")
        buf.write("\u009f\2\2\u032c\u032d\7\u00a1\2\2\u032d\u032f\7\u0089")
        buf.write("\2\2\u032e\u0314\3\2\2\2\u032e\u0318\3\2\2\2\u032e\u031f")
        buf.write("\3\2\2\2\u032e\u0326\3\2\2\2\u032e\u032a\3\2\2\2\u032f")
        buf.write("-\3\2\2\2\u0330\u0331\79\2\2\u0331\u0332\7\u00c5\2\2\u0332")
        buf.write("\u0334\5:\36\2\u0333\u0335\7\u00c4\2\2\u0334\u0333\3\2")
        buf.write("\2\2\u0334\u0335\3\2\2\2\u0335\u0336\3\2\2\2\u0336\u0337")
        buf.write("\5:\36\2\u0337\u0338\7\u00c6\2\2\u0338\u034c\3\2\2\2\u0339")
        buf.write("\u033a\79\2\2\u033a\u033b\7\u00c7\2\2\u033b\u033d\5:\36")
        buf.write("\2\u033c\u033e\7\u00c4\2\2\u033d\u033c\3\2\2\2\u033d\u033e")
        buf.write("\3\2\2\2\u033e\u033f\3\2\2\2\u033f\u0340\5:\36\2\u0340")
        buf.write("\u0341\7\u00c8\2\2\u0341\u034c\3\2\2\2\u0342\u0343\79")
        buf.write("\2\2\u0343\u0344\7\u00c9\2\2\u0344\u0346\5:\36\2\u0345")
        buf.write("\u0347\7\u00c4\2\2\u0346\u0345\3\2\2\2\u0346\u0347\3\2")
        buf.write("\2\2\u0347\u0348\3\2\2\2\u0348\u0349\5:\36\2\u0349\u034a")
        buf.write("\7\u00ca\2\2\u034a\u034c\3\2\2\2\u034b\u0330\3\2\2\2\u034b")
        buf.write("\u0339\3\2\2\2\u034b\u0342\3\2\2\2\u034c/\3\2\2\2\u034d")
        buf.write("\u034e\7:\2\2\u034e\u034f\7\u00c5\2\2\u034f\u0351\5:\36")
        buf.write("\2\u0350\u0352\7\u00c4\2\2\u0351\u0350\3\2\2\2\u0351\u0352")
        buf.write("\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0355\5:\36\2\u0354")
        buf.write("\u0356\7\u00c4\2\2\u0355\u0354\3\2\2\2\u0355\u0356\3\2")
        buf.write("\2\2\u0356\u0357\3\2\2\2\u0357\u0358\5:\36\2\u0358\u0359")
        buf.write("\7\u00c6\2\2\u0359\u0375\3\2\2\2\u035a\u035b\7:\2\2\u035b")
        buf.write("\u035c\7\u00c7\2\2\u035c\u035e\5:\36\2\u035d\u035f\7\u00c4")
        buf.write("\2\2\u035e\u035d\3\2\2\2\u035e\u035f\3\2\2\2\u035f\u0360")
        buf.write("\3\2\2\2\u0360\u0362\5:\36\2\u0361\u0363\7\u00c4\2\2\u0362")
        buf.write("\u0361\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u0364\3\2\2\2")
        buf.write("\u0364\u0365\5:\36\2\u0365\u0366\7\u00c8\2\2\u0366\u0375")
        buf.write("\3\2\2\2\u0367\u0368\7:\2\2\u0368\u0369\7\u00c9\2\2\u0369")
        buf.write("\u036b\5:\36\2\u036a\u036c\7\u00c4\2\2\u036b\u036a\3\2")
        buf.write("\2\2\u036b\u036c\3\2\2\2\u036c\u036d\3\2\2\2\u036d\u036f")
        buf.write("\5:\36\2\u036e\u0370\7\u00c4\2\2\u036f\u036e\3\2\2\2\u036f")
        buf.write("\u0370\3\2\2\2\u0370\u0371\3\2\2\2\u0371\u0372\5:\36\2")
        buf.write("\u0372\u0373\7\u00ca\2\2\u0373\u0375\3\2\2\2\u0374\u034d")
        buf.write("\3\2\2\2\u0374\u035a\3\2\2\2\u0374\u0367\3\2\2\2\u0375")
        buf.write("\61\3\2\2\2\u0376\u0377\7;\2\2\u0377\u0378\7\u00c5\2\2")
        buf.write("\u0378\u037a\5:\36\2\u0379\u037b\7\u00c4\2\2\u037a\u0379")
        buf.write("\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u037c\3\2\2\2\u037c")
        buf.write("\u037e\5:\36\2\u037d\u037f\7\u00c4\2\2\u037e\u037d\3\2")
        buf.write("\2\2\u037e\u037f\3\2\2\2\u037f\u0380\3\2\2\2\u0380\u0382")
        buf.write("\5:\36\2\u0381\u0383\7\u00c4\2\2\u0382\u0381\3\2\2\2\u0382")
        buf.write("\u0383\3\2\2\2\u0383\u0384\3\2\2\2\u0384\u0385\5:\36\2")
        buf.write("\u0385\u0386\7\u00c6\2\2\u0386\u03aa\3\2\2\2\u0387\u0388")
        buf.write("\7;\2\2\u0388\u0389\7\u00c7\2\2\u0389\u038b\5:\36\2\u038a")
        buf.write("\u038c\7\u00c4\2\2\u038b\u038a\3\2\2\2\u038b\u038c\3\2")
        buf.write("\2\2\u038c\u038d\3\2\2\2\u038d\u038f\5:\36\2\u038e\u0390")
        buf.write("\7\u00c4\2\2\u038f\u038e\3\2\2\2\u038f\u0390\3\2\2\2\u0390")
        buf.write("\u0391\3\2\2\2\u0391\u0393\5:\36\2\u0392\u0394\7\u00c4")
        buf.write("\2\2\u0393\u0392\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u0395")
        buf.write("\3\2\2\2\u0395\u0396\5:\36\2\u0396\u0397\7\u00c8\2\2\u0397")
        buf.write("\u03aa\3\2\2\2\u0398\u0399\7;\2\2\u0399\u039a\7\u00c9")
        buf.write("\2\2\u039a\u039c\5:\36\2\u039b\u039d\7\u00c4\2\2\u039c")
        buf.write("\u039b\3\2\2\2\u039c\u039d\3\2\2\2\u039d\u039e\3\2\2\2")
        buf.write("\u039e\u03a0\5:\36\2\u039f\u03a1\7\u00c4\2\2\u03a0\u039f")
        buf.write("\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2")
        buf.write("\u03a4\5:\36\2\u03a3\u03a5\7\u00c4\2\2\u03a4\u03a3\3\2")
        buf.write("\2\2\u03a4\u03a5\3\2\2\2\u03a5\u03a6\3\2\2\2\u03a6\u03a7")
        buf.write("\5:\36\2\u03a7\u03a8\7\u00ca\2\2\u03a8\u03aa\3\2\2\2\u03a9")
        buf.write("\u0376\3\2\2\2\u03a9\u0387\3\2\2\2\u03a9\u0398\3\2\2\2")
        buf.write("\u03aa\63\3\2\2\2\u03ab\u03ac\7<\2\2\u03ac\u03ad\7\u00c5")
        buf.write("\2\2\u03ad\u03af\5.\30\2\u03ae\u03b0\7\u00c4\2\2\u03af")
        buf.write("\u03ae\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0\u03b1\3\2\2\2")
        buf.write("\u03b1\u03b3\7\u00c2\2\2\u03b2\u03b4\7\u00c4\2\2\u03b3")
        buf.write("\u03b2\3\2\2\2\u03b3\u03b4\3\2\2\2\u03b4\u03b5\3\2\2\2")
        buf.write("\u03b5\u03b7\5.\30\2\u03b6\u03b8\7\u00c4\2\2\u03b7\u03b6")
        buf.write("\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8\u03b9\3\2\2\2\u03b9")
        buf.write("\u03ba\7\u00c2\2\2\u03ba\u03bb\7\u00c6\2\2\u03bb\u03df")
        buf.write("\3\2\2\2\u03bc\u03bd\7<\2\2\u03bd\u03be\7\u00c7\2\2\u03be")
        buf.write("\u03c0\5.\30\2\u03bf\u03c1\7\u00c4\2\2\u03c0\u03bf\3\2")
        buf.write("\2\2\u03c0\u03c1\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c4")
        buf.write("\7\u00c2\2\2\u03c3\u03c5\7\u00c4\2\2\u03c4\u03c3\3\2\2")
        buf.write("\2\u03c4\u03c5\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03c8")
        buf.write("\5.\30\2\u03c7\u03c9\7\u00c4\2\2\u03c8\u03c7\3\2\2\2\u03c8")
        buf.write("\u03c9\3\2\2\2\u03c9\u03ca\3\2\2\2\u03ca\u03cb\7\u00c2")
        buf.write("\2\2\u03cb\u03cc\7\u00c8\2\2\u03cc\u03df\3\2\2\2\u03cd")
        buf.write("\u03ce\7<\2\2\u03ce\u03cf\7\u00c9\2\2\u03cf\u03d1\5.\30")
        buf.write("\2\u03d0\u03d2\7\u00c4\2\2\u03d1\u03d0\3\2\2\2\u03d1\u03d2")
        buf.write("\3\2\2\2\u03d2\u03d3\3\2\2\2\u03d3\u03d5\7\u00c2\2\2\u03d4")
        buf.write("\u03d6\7\u00c4\2\2\u03d5\u03d4\3\2\2\2\u03d5\u03d6\3\2")
        buf.write("\2\2\u03d6\u03d7\3\2\2\2\u03d7\u03d9\5.\30\2\u03d8\u03da")
        buf.write("\7\u00c4\2\2\u03d9\u03d8\3\2\2\2\u03d9\u03da\3\2\2\2\u03da")
        buf.write("\u03db\3\2\2\2\u03db\u03dc\7\u00c2\2\2\u03dc\u03dd\7\u00ca")
        buf.write("\2\2\u03dd\u03df\3\2\2\2\u03de\u03ab\3\2\2\2\u03de\u03bc")
        buf.write("\3\2\2\2\u03de\u03cd\3\2\2\2\u03df\65\3\2\2\2\u03e0\u03e1")
        buf.write("\7<\2\2\u03e1\u03e2\7\u00c5\2\2\u03e2\u03e4\5.\30\2\u03e3")
        buf.write("\u03e5\7\u00c4\2\2\u03e4\u03e3\3\2\2\2\u03e4\u03e5\3\2")
        buf.write("\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e8\7\u00c2\2\2\u03e7")
        buf.write("\u03e9\7\u00c4\2\2\u03e8\u03e7\3\2\2\2\u03e8\u03e9\3\2")
        buf.write("\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03ec\5.\30\2\u03eb\u03ed")
        buf.write("\7\u00c4\2\2\u03ec\u03eb\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed")
        buf.write("\u03ee\3\2\2\2\u03ee\u03f0\7\u00c2\2\2\u03ef\u03f1\7\u00c4")
        buf.write("\2\2\u03f0\u03ef\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f2")
        buf.write("\3\2\2\2\u03f2\u03f4\5.\30\2\u03f3\u03f5\7\u00c4\2\2\u03f4")
        buf.write("\u03f3\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u03f6\3\2\2\2")
        buf.write("\u03f6\u03f7\7\u00c2\2\2\u03f7\u03f8\7\u00c6\2\2\u03f8")
        buf.write("\u042c\3\2\2\2\u03f9\u03fa\7<\2\2\u03fa\u03fb\7\u00c7")
        buf.write("\2\2\u03fb\u03fd\5.\30\2\u03fc\u03fe\7\u00c4\2\2\u03fd")
        buf.write("\u03fc\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff\3\2\2\2")
        buf.write("\u03ff\u0401\7\u00c2\2\2\u0400\u0402\7\u00c4\2\2\u0401")
        buf.write("\u0400\3\2\2\2\u0401\u0402\3\2\2\2\u0402\u0403\3\2\2\2")
        buf.write("\u0403\u0405\5.\30\2\u0404\u0406\7\u00c4\2\2\u0405\u0404")
        buf.write("\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0407\3\2\2\2\u0407")
        buf.write("\u0409\7\u00c2\2\2\u0408\u040a\7\u00c4\2\2\u0409\u0408")
        buf.write("\3\2\2\2\u0409\u040a\3\2\2\2\u040a\u040b\3\2\2\2\u040b")
        buf.write("\u040d\5.\30\2\u040c\u040e\7\u00c4\2\2\u040d\u040c\3\2")
        buf.write("\2\2\u040d\u040e\3\2\2\2\u040e\u040f\3\2\2\2\u040f\u0410")
        buf.write("\7\u00c2\2\2\u0410\u0411\7\u00c8\2\2\u0411\u042c\3\2\2")
        buf.write("\2\u0412\u0413\7<\2\2\u0413\u0414\7\u00c9\2\2\u0414\u0416")
        buf.write("\5.\30\2\u0415\u0417\7\u00c4\2\2\u0416\u0415\3\2\2\2\u0416")
        buf.write("\u0417\3\2\2\2\u0417\u0418\3\2\2\2\u0418\u041a\7\u00c2")
        buf.write("\2\2\u0419\u041b\7\u00c4\2\2\u041a\u0419\3\2\2\2\u041a")
        buf.write("\u041b\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u041e\5.\30\2")
        buf.write("\u041d\u041f\7\u00c4\2\2\u041e\u041d\3\2\2\2\u041e\u041f")
        buf.write("\3\2\2\2\u041f\u0420\3\2\2\2\u0420\u0422\7\u00c2\2\2\u0421")
        buf.write("\u0423\7\u00c4\2\2\u0422\u0421\3\2\2\2\u0422\u0423\3\2")
        buf.write("\2\2\u0423\u0424\3\2\2\2\u0424\u0426\5.\30\2\u0425\u0427")
        buf.write("\7\u00c4\2\2\u0426\u0425\3\2\2\2\u0426\u0427\3\2\2\2\u0427")
        buf.write("\u0428\3\2\2\2\u0428\u0429\7\u00c2\2\2\u0429\u042a\7\u00ca")
        buf.write("\2\2\u042a\u042c\3\2\2\2\u042b\u03e0\3\2\2\2\u042b\u03f9")
        buf.write("\3\2\2\2\u042b\u0412\3\2\2\2\u042c\67\3\2\2\2\u042d\u042e")
        buf.write("\7<\2\2\u042e\u042f\7\u00c5\2\2\u042f\u0431\5.\30\2\u0430")
        buf.write("\u0432\7\u00c4\2\2\u0431\u0430\3\2\2\2\u0431\u0432\3\2")
        buf.write("\2\2\u0432\u0433\3\2\2\2\u0433\u0435\7\u00c2\2\2\u0434")
        buf.write("\u0436\7\u00c4\2\2\u0435\u0434\3\2\2\2\u0435\u0436\3\2")
        buf.write("\2\2\u0436\u0437\3\2\2\2\u0437\u0439\5.\30\2\u0438\u043a")
        buf.write("\7\u00c4\2\2\u0439\u0438\3\2\2\2\u0439\u043a\3\2\2\2\u043a")
        buf.write("\u043b\3\2\2\2\u043b\u043d\7\u00c2\2\2\u043c\u043e\7\u00c4")
        buf.write("\2\2\u043d\u043c\3\2\2\2\u043d\u043e\3\2\2\2\u043e\u043f")
        buf.write("\3\2\2\2\u043f\u0441\5.\30\2\u0440\u0442\7\u00c4\2\2\u0441")
        buf.write("\u0440\3\2\2\2\u0441\u0442\3\2\2\2\u0442\u0443\3\2\2\2")
        buf.write("\u0443\u0445\7\u00c2\2\2\u0444\u0446\7\u00c4\2\2\u0445")
        buf.write("\u0444\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u0447\3\2\2\2")
        buf.write("\u0447\u0449\5.\30\2\u0448\u044a\7\u00c4\2\2\u0449\u0448")
        buf.write("\3\2\2\2\u0449\u044a\3\2\2\2\u044a\u044b\3\2\2\2\u044b")
        buf.write("\u044c\7\u00c2\2\2\u044c\u044d\7\u00c6\2\2\u044d\u0491")
        buf.write("\3\2\2\2\u044e\u044f\7<\2\2\u044f\u0450\7\u00c7\2\2\u0450")
        buf.write("\u0452\5.\30\2\u0451\u0453\7\u00c4\2\2\u0452\u0451\3\2")
        buf.write("\2\2\u0452\u0453\3\2\2\2\u0453\u0454\3\2\2\2\u0454\u0456")
        buf.write("\7\u00c2\2\2\u0455\u0457\7\u00c4\2\2\u0456\u0455\3\2\2")
        buf.write("\2\u0456\u0457\3\2\2\2\u0457\u0458\3\2\2\2\u0458\u045a")
        buf.write("\5.\30\2\u0459\u045b\7\u00c4\2\2\u045a\u0459\3\2\2\2\u045a")
        buf.write("\u045b\3\2\2\2\u045b\u045c\3\2\2\2\u045c\u045e\7\u00c2")
        buf.write("\2\2\u045d\u045f\7\u00c4\2\2\u045e\u045d\3\2\2\2\u045e")
        buf.write("\u045f\3\2\2\2\u045f\u0460\3\2\2\2\u0460\u0462\5.\30\2")
        buf.write("\u0461\u0463\7\u00c4\2\2\u0462\u0461\3\2\2\2\u0462\u0463")
        buf.write("\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u0466\7\u00c2\2\2\u0465")
        buf.write("\u0467\7\u00c4\2\2\u0466\u0465\3\2\2\2\u0466\u0467\3\2")
        buf.write("\2\2\u0467\u0468\3\2\2\2\u0468\u046a\5.\30\2\u0469\u046b")
        buf.write("\7\u00c4\2\2\u046a\u0469\3\2\2\2\u046a\u046b\3\2\2\2\u046b")
        buf.write("\u046c\3\2\2\2\u046c\u046d\7\u00c2\2\2\u046d\u046e\7\u00c8")
        buf.write("\2\2\u046e\u0491\3\2\2\2\u046f\u0470\7<\2\2\u0470\u0471")
        buf.write("\7\u00c9\2\2\u0471\u0473\5.\30\2\u0472\u0474\7\u00c4\2")
        buf.write("\2\u0473\u0472\3\2\2\2\u0473\u0474\3\2\2\2\u0474\u0475")
        buf.write("\3\2\2\2\u0475\u0477\7\u00c2\2\2\u0476\u0478\7\u00c4\2")
        buf.write("\2\u0477\u0476\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u0479")
        buf.write("\3\2\2\2\u0479\u047b\5.\30\2\u047a\u047c\7\u00c4\2\2\u047b")
        buf.write("\u047a\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u047d\3\2\2\2")
        buf.write("\u047d\u047f\7\u00c2\2\2\u047e\u0480\7\u00c4\2\2\u047f")
        buf.write("\u047e\3\2\2\2\u047f\u0480\3\2\2\2\u0480\u0481\3\2\2\2")
        buf.write("\u0481\u0483\5.\30\2\u0482\u0484\7\u00c4\2\2\u0483\u0482")
        buf.write("\3\2\2\2\u0483\u0484\3\2\2\2\u0484\u0485\3\2\2\2\u0485")
        buf.write("\u0487\7\u00c2\2\2\u0486\u0488\7\u00c4\2\2\u0487\u0486")
        buf.write("\3\2\2\2\u0487\u0488\3\2\2\2\u0488\u0489\3\2\2\2\u0489")
        buf.write("\u048b\5.\30\2\u048a\u048c\7\u00c4\2\2\u048b\u048a\3\2")
        buf.write("\2\2\u048b\u048c\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e")
        buf.write("\7\u00c2\2\2\u048e\u048f\7\u00ca\2\2\u048f\u0491\3\2\2")
        buf.write("\2\u0490\u042d\3\2\2\2\u0490\u044e\3\2\2\2\u0490\u046f")
        buf.write("\3\2\2\2\u04919\3\2\2\2\u0492\u04a9\7\u00c1\2\2\u0493")
        buf.write("\u0494\7\u00c5\2\2\u0494\u0495\7\u00c1\2\2\u0495\u04a9")
        buf.write("\7\u00c6\2\2\u0496\u0497\7\u00c7\2\2\u0497\u0498\7\u00c1")
        buf.write("\2\2\u0498\u04a9\7\u00c8\2\2\u0499\u049a\7\u00c9\2\2\u049a")
        buf.write("\u049b\7\u00c1\2\2\u049b\u04a9\7\u00ca\2\2\u049c\u04a9")
        buf.write("\7\u00c3\2\2\u049d\u049e\7\u00c5\2\2\u049e\u049f\7\u00c3")
        buf.write("\2\2\u049f\u04a9\7\u00c6\2\2\u04a0\u04a1\7\u00c7\2\2\u04a1")
        buf.write("\u04a2\7\u00c3\2\2\u04a2\u04a9\7\u00c8\2\2\u04a3\u04a4")
        buf.write("\7\u00c9\2\2\u04a4\u04a5\7\u00c3\2\2\u04a5\u04a9\7\u00ca")
        buf.write("\2\2\u04a6\u04a9\5<\37\2\u04a7\u04a9\5> \2\u04a8\u0492")
        buf.write("\3\2\2\2\u04a8\u0493\3\2\2\2\u04a8\u0496\3\2\2\2\u04a8")
        buf.write("\u0499\3\2\2\2\u04a8\u049c\3\2\2\2\u04a8\u049d\3\2\2\2")
        buf.write("\u04a8\u04a0\3\2\2\2\u04a8\u04a3\3\2\2\2\u04a8\u04a6\3")
        buf.write("\2\2\2\u04a8\u04a7\3\2\2\2\u04a9;\3\2\2\2\u04aa\u04ab")
        buf.write("\7=\2\2\u04ab\u04ac\7\u00c5\2\2\u04ac\u04ae\5:\36\2\u04ad")
        buf.write("\u04af\7\u00c4\2\2\u04ae\u04ad\3\2\2\2\u04ae\u04af\3\2")
        buf.write("\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b2\5:\36\2\u04b1\u04b3")
        buf.write("\7\u00c4\2\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3\3\2\2\2\u04b3")
        buf.write("\u04b4\3\2\2\2\u04b4\u04b6\5:\36\2\u04b5\u04b7\7\u00c4")
        buf.write("\2\2\u04b6\u04b5\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7\u04b8")
        buf.write("\3\2\2\2\u04b8\u04b9\5:\36\2\u04b9\u04ba\7\u00c6\2\2\u04ba")
        buf.write("\u04de\3\2\2\2\u04bb\u04bc\7=\2\2\u04bc\u04bd\7\u00c7")
        buf.write("\2\2\u04bd\u04bf\5:\36\2\u04be\u04c0\7\u00c4\2\2\u04bf")
        buf.write("\u04be\3\2\2\2\u04bf\u04c0\3\2\2\2\u04c0\u04c1\3\2\2\2")
        buf.write("\u04c1\u04c3\5:\36\2\u04c2\u04c4\7\u00c4\2\2\u04c3\u04c2")
        buf.write("\3\2\2\2\u04c3\u04c4\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5")
        buf.write("\u04c7\5:\36\2\u04c6\u04c8\7\u00c4\2\2\u04c7\u04c6\3\2")
        buf.write("\2\2\u04c7\u04c8\3\2\2\2\u04c8\u04c9\3\2\2\2\u04c9\u04ca")
        buf.write("\5:\36\2\u04ca\u04cb\7\u00c8\2\2\u04cb\u04de\3\2\2\2\u04cc")
        buf.write("\u04cd\7=\2\2\u04cd\u04ce\7\u00c9\2\2\u04ce\u04d0\5:\36")
        buf.write("\2\u04cf\u04d1\7\u00c4\2\2\u04d0\u04cf\3\2\2\2\u04d0\u04d1")
        buf.write("\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d4\5:\36\2\u04d3")
        buf.write("\u04d5\7\u00c4\2\2\u04d4\u04d3\3\2\2\2\u04d4\u04d5\3\2")
        buf.write("\2\2\u04d5\u04d6\3\2\2\2\u04d6\u04d8\5:\36\2\u04d7\u04d9")
        buf.write("\7\u00c4\2\2\u04d8\u04d7\3\2\2\2\u04d8\u04d9\3\2\2\2\u04d9")
        buf.write("\u04da\3\2\2\2\u04da\u04db\5:\36\2\u04db\u04dc\7\u00ca")
        buf.write("\2\2\u04dc\u04de\3\2\2\2\u04dd\u04aa\3\2\2\2\u04dd\u04bb")
        buf.write("\3\2\2\2\u04dd\u04cc\3\2\2\2\u04de=\3\2\2\2\u04df\u04e0")
        buf.write("\7>\2\2\u04e0\u04e1\7\u00c5\2\2\u04e1\u04e8\5:\36\2\u04e2")
        buf.write("\u04e4\7\u00c4\2\2\u04e3\u04e2\3\2\2\2\u04e3\u04e4\3\2")
        buf.write("\2\2\u04e4\u04e5\3\2\2\2\u04e5\u04e7\5:\36\2\u04e6\u04e3")
        buf.write("\3\2\2\2\u04e7\u04ea\3\2\2\2\u04e8\u04e6\3\2\2\2\u04e8")
        buf.write("\u04e9\3\2\2\2\u04e9\u04eb\3\2\2\2\u04ea\u04e8\3\2\2\2")
        buf.write("\u04eb\u04ec\7\u00c6\2\2\u04ec\u050a\3\2\2\2\u04ed\u04ee")
        buf.write("\7>\2\2\u04ee\u04ef\7\u00c7\2\2\u04ef\u04f6\5:\36\2\u04f0")
        buf.write("\u04f2\7\u00c4\2\2\u04f1\u04f0\3\2\2\2\u04f1\u04f2\3\2")
        buf.write("\2\2\u04f2\u04f3\3\2\2\2\u04f3\u04f5\5:\36\2\u04f4\u04f1")
        buf.write("\3\2\2\2\u04f5\u04f8\3\2\2\2\u04f6\u04f4\3\2\2\2\u04f6")
        buf.write("\u04f7\3\2\2\2\u04f7\u04f9\3\2\2\2\u04f8\u04f6\3\2\2\2")
        buf.write("\u04f9\u04fa\7\u00c8\2\2\u04fa\u050a\3\2\2\2\u04fb\u04fc")
        buf.write("\7>\2\2\u04fc\u04fd\7\u00c9\2\2\u04fd\u0504\5:\36\2\u04fe")
        buf.write("\u0500\7\u00c4\2\2\u04ff\u04fe\3\2\2\2\u04ff\u0500\3\2")
        buf.write("\2\2\u0500\u0501\3\2\2\2\u0501\u0503\5:\36\2\u0502\u04ff")
        buf.write("\3\2\2\2\u0503\u0506\3\2\2\2\u0504\u0502\3\2\2\2\u0504")
        buf.write("\u0505\3\2\2\2\u0505\u0507\3\2\2\2\u0506\u0504\3\2\2\2")
        buf.write("\u0507\u0508\7\u00ca\2\2\u0508\u050a\3\2\2\2\u0509\u04df")
        buf.write("\3\2\2\2\u0509\u04ed\3\2\2\2\u0509\u04fb\3\2\2\2\u050a")
        buf.write("?\3\2\2\2rGIRqw}\u0083\u0089\u008f\u0095\u009b\u009e\u00df")
        buf.write("\u011c\u0159\u018f\u01c5\u0202\u023f\u027c\u02a0\u02cf")
        buf.write("\u02f2\u0312\u032e\u0334\u033d\u0346\u034b\u0351\u0355")
        buf.write("\u035e\u0362\u036b\u036f\u0374\u037a\u037e\u0382\u038b")
        buf.write("\u038f\u0393\u039c\u03a0\u03a4\u03a9\u03af\u03b3\u03b7")
        buf.write("\u03c0\u03c4\u03c8\u03d1\u03d5\u03d9\u03de\u03e4\u03e8")
        buf.write("\u03ec\u03f0\u03f4\u03fd\u0401\u0405\u0409\u040d\u0416")
        buf.write("\u041a\u041e\u0422\u0426\u042b\u0431\u0435\u0439\u043d")
        buf.write("\u0441\u0445\u0449\u0452\u0456\u045a\u045e\u0462\u0466")
        buf.write("\u046a\u0473\u0477\u047b\u047f\u0483\u0487\u048b\u0490")
        buf.write("\u04a8\u04ae\u04b2\u04b6\u04bf\u04c3\u04c7\u04d0\u04d4")
        buf.write("\u04d8\u04dd\u04e3\u04e8\u04f1\u04f6\u04ff\u0504\u0509")
        return buf.getvalue()


class AmberMRParser ( Parser ):

    grammarFileName = "AmberMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'&'" ]

    symbolicNames = [ "<INVALID>", "END", "RST", "IAT", "RSTWT", "RESTRAINT", 
                      "ATNAM", "IRESID", "NSTEP1", "NSTEP2", "IRSTYP", "IALTD", 
                      "IFVARI", "NINC", "IMULT", "R1", "R2", "R3", "R4", 
                      "RK2", "RK3", "R1A", "R2A", "R3A", "R4A", "RK2A", 
                      "RK3A", "R0", "K0", "R0A", "K0A", "RJCOEF", "IGR1", 
                      "IGR2", "IGR3", "IGR4", "IGR5", "IGR6", "IGR7", "IGR8", 
                      "FXYZ", "OUTXYZ", "GRNAM1", "GRNAM2", "GRNAM3", "GRNAM4", 
                      "GRNAM5", "GRNAM6", "GRNAM7", "GRNAM8", "IR6", "IFNTYP", 
                      "IXPK", "NXPK", "ICONSTR", "DISTANCE_F", "ANGLE_F", 
                      "TORSION_F", "COORDINATE_F", "PLANE_F", "COM_F", "NOEEXP", 
                      "NPEAK", "EMIX", "IHP", "JHP", "AEXP", "ARANGE", "AWT", 
                      "INVWT1", "INVWT2", "OMEGA", "TAUROT", "TAUMET", "ID2O", 
                      "OSCALE", "SHF", "NRING", "NATR", "IATR", "NAMR", 
                      "STR", "IPROT", "OBS", "SHRANG", "WT", "NPROT", "SHCUT", 
                      "NTER", "CTER", "PCSHF", "NME", "NMPMC", "OPTPHI", 
                      "OPTTET", "OPTOMG", "OPTA1", "OPTA2", "OPTKON", "TOLPRO", 
                      "MLTPRO", "ALIGN", "NDIP", "ID", "JD", "DOBSL", "DOBSU", 
                      "DWT", "DATASET", "NUM_DATASET", "S11", "S12", "S13", 
                      "S22", "S23", "GIGJ", "DIJ", "DCUT", "FREEZEMOL", 
                      "CSA", "NCSA", "ICSA", "JCSA", "KCSA", "COBSL", "COBSU", 
                      "CWT", "DATASETC", "FIELD", "SIGMA11", "SIGMA12", 
                      "SIGMA13", "SIGMA22", "SIGMA23", "CCUT", "Comma", 
                      "Ampersand", "COMMENT", "Logical", "L_paren", "R_paren", 
                      "L_brace", "R_brace", "L_brakt", "R_brakt", "Equ_op", 
                      "L_QUOT", "SPACE", "HIDDEN_COMMENT", "EMPTY_COMMENT", 
                      "Any_name", "SPACE_C", "RETURN_C", "Equ_op_IP", "L_paren_IP", 
                      "Integer", "SPACE_IP", "Equ_op_RP", "L_paren_RP", 
                      "Real", "SPACE_RP", "Equ_op_BP", "BoolInt", "SPACE_BP", 
                      "L_paren_IA", "Equ_op_IA", "Comma_IA", "Asterisk_IA", 
                      "Integers", "MultiplicativeInt", "RETURN_IA", "L_paren_RA", 
                      "Equ_op_RA", "Comma_RA", "Asterisk_RA", "Reals", "MultiplicativeReal", 
                      "RETURN_RA", "Equ_op_BA", "Comma_BA", "BoolInts", 
                      "RETURN_BA", "L_paren_QA", "Equ_op_QA", "Comma_QA", 
                      "Qstrings", "RETURN_QA", "Comma_ARG", "R_paren_ARG", 
                      "Decimal", "SPACE_ARG", "Int_F", "Real_F", "Ambmask_F", 
                      "Comma_F", "L_paren_F", "R_paren_F", "L_brace_F", 
                      "R_brace_F", "L_brakt_F", "R_brakt_F", "R_QUOT", "SPACE_F" ]

    RULE_amber_mr = 0
    RULE_comment = 1
    RULE_nmr_restraint = 2
    RULE_noesy_volume_restraint = 3
    RULE_chemical_shift_restraint = 4
    RULE_pcs_restraint = 5
    RULE_dipolar_coupling_restraint = 6
    RULE_csa_restraint = 7
    RULE_restraint_statement = 8
    RULE_distance_statement = 9
    RULE_angle_statement = 10
    RULE_torsion_statement = 11
    RULE_plane_point_angle_statement = 12
    RULE_plane_plane_angle_statement = 13
    RULE_general_distance2_statement = 14
    RULE_general_distance3_statement = 15
    RULE_general_distance4_statement = 16
    RULE_noeexp_statement = 17
    RULE_shf_statement = 18
    RULE_pcshf_statement = 19
    RULE_align_statement = 20
    RULE_csa_statement = 21
    RULE_distance_rst_func_call = 22
    RULE_angle_rst_func_call = 23
    RULE_torsion_rst_func_call = 24
    RULE_coordinate2_rst_func_call = 25
    RULE_coordinate3_rst_func_call = 26
    RULE_coordinate4_rst_func_call = 27
    RULE_restraint_func_expr = 28
    RULE_plane_rst_func_call = 29
    RULE_com_rst_fun_call = 30

    ruleNames =  [ "amber_mr", "comment", "nmr_restraint", "noesy_volume_restraint", 
                   "chemical_shift_restraint", "pcs_restraint", "dipolar_coupling_restraint", 
                   "csa_restraint", "restraint_statement", "distance_statement", 
                   "angle_statement", "torsion_statement", "plane_point_angle_statement", 
                   "plane_plane_angle_statement", "general_distance2_statement", 
                   "general_distance3_statement", "general_distance4_statement", 
                   "noeexp_statement", "shf_statement", "pcshf_statement", 
                   "align_statement", "csa_statement", "distance_rst_func_call", 
                   "angle_rst_func_call", "torsion_rst_func_call", "coordinate2_rst_func_call", 
                   "coordinate3_rst_func_call", "coordinate4_rst_func_call", 
                   "restraint_func_expr", "plane_rst_func_call", "com_rst_fun_call" ]

    EOF = Token.EOF
    END=1
    RST=2
    IAT=3
    RSTWT=4
    RESTRAINT=5
    ATNAM=6
    IRESID=7
    NSTEP1=8
    NSTEP2=9
    IRSTYP=10
    IALTD=11
    IFVARI=12
    NINC=13
    IMULT=14
    R1=15
    R2=16
    R3=17
    R4=18
    RK2=19
    RK3=20
    R1A=21
    R2A=22
    R3A=23
    R4A=24
    RK2A=25
    RK3A=26
    R0=27
    K0=28
    R0A=29
    K0A=30
    RJCOEF=31
    IGR1=32
    IGR2=33
    IGR3=34
    IGR4=35
    IGR5=36
    IGR6=37
    IGR7=38
    IGR8=39
    FXYZ=40
    OUTXYZ=41
    GRNAM1=42
    GRNAM2=43
    GRNAM3=44
    GRNAM4=45
    GRNAM5=46
    GRNAM6=47
    GRNAM7=48
    GRNAM8=49
    IR6=50
    IFNTYP=51
    IXPK=52
    NXPK=53
    ICONSTR=54
    DISTANCE_F=55
    ANGLE_F=56
    TORSION_F=57
    COORDINATE_F=58
    PLANE_F=59
    COM_F=60
    NOEEXP=61
    NPEAK=62
    EMIX=63
    IHP=64
    JHP=65
    AEXP=66
    ARANGE=67
    AWT=68
    INVWT1=69
    INVWT2=70
    OMEGA=71
    TAUROT=72
    TAUMET=73
    ID2O=74
    OSCALE=75
    SHF=76
    NRING=77
    NATR=78
    IATR=79
    NAMR=80
    STR=81
    IPROT=82
    OBS=83
    SHRANG=84
    WT=85
    NPROT=86
    SHCUT=87
    NTER=88
    CTER=89
    PCSHF=90
    NME=91
    NMPMC=92
    OPTPHI=93
    OPTTET=94
    OPTOMG=95
    OPTA1=96
    OPTA2=97
    OPTKON=98
    TOLPRO=99
    MLTPRO=100
    ALIGN=101
    NDIP=102
    ID=103
    JD=104
    DOBSL=105
    DOBSU=106
    DWT=107
    DATASET=108
    NUM_DATASET=109
    S11=110
    S12=111
    S13=112
    S22=113
    S23=114
    GIGJ=115
    DIJ=116
    DCUT=117
    FREEZEMOL=118
    CSA=119
    NCSA=120
    ICSA=121
    JCSA=122
    KCSA=123
    COBSL=124
    COBSU=125
    CWT=126
    DATASETC=127
    FIELD=128
    SIGMA11=129
    SIGMA12=130
    SIGMA13=131
    SIGMA22=132
    SIGMA23=133
    CCUT=134
    Comma=135
    Ampersand=136
    COMMENT=137
    Logical=138
    L_paren=139
    R_paren=140
    L_brace=141
    R_brace=142
    L_brakt=143
    R_brakt=144
    Equ_op=145
    L_QUOT=146
    SPACE=147
    HIDDEN_COMMENT=148
    EMPTY_COMMENT=149
    Any_name=150
    SPACE_C=151
    RETURN_C=152
    Equ_op_IP=153
    L_paren_IP=154
    Integer=155
    SPACE_IP=156
    Equ_op_RP=157
    L_paren_RP=158
    Real=159
    SPACE_RP=160
    Equ_op_BP=161
    BoolInt=162
    SPACE_BP=163
    L_paren_IA=164
    Equ_op_IA=165
    Comma_IA=166
    Asterisk_IA=167
    Integers=168
    MultiplicativeInt=169
    RETURN_IA=170
    L_paren_RA=171
    Equ_op_RA=172
    Comma_RA=173
    Asterisk_RA=174
    Reals=175
    MultiplicativeReal=176
    RETURN_RA=177
    Equ_op_BA=178
    Comma_BA=179
    BoolInts=180
    RETURN_BA=181
    L_paren_QA=182
    Equ_op_QA=183
    Comma_QA=184
    Qstrings=185
    RETURN_QA=186
    Comma_ARG=187
    R_paren_ARG=188
    Decimal=189
    SPACE_ARG=190
    Int_F=191
    Real_F=192
    Ambmask_F=193
    Comma_F=194
    L_paren_F=195
    R_paren_F=196
    L_brace_F=197
    R_brace_F=198
    L_brakt_F=199
    R_brakt_F=200
    R_QUOT=201
    SPACE_F=202

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Amber_mrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(AmberMRParser.EOF, 0)

        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.CommentContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.CommentContext,i)


        def nmr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Nmr_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Nmr_restraintContext,i)


        def noesy_volume_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Noesy_volume_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Noesy_volume_restraintContext,i)


        def chemical_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Chemical_shift_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Chemical_shift_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Pcs_restraintContext,i)


        def dipolar_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Dipolar_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Dipolar_coupling_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Csa_restraintContext,i)


        def getRuleIndex(self):
            return AmberMRParser.RULE_amber_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmber_mr" ):
                listener.enterAmber_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmber_mr" ):
                listener.exitAmber_mr(self)




    def amber_mr(self):

        localctx = AmberMRParser.Amber_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_amber_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 71
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AmberMRParser.RST or _la==AmberMRParser.NOEEXP or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (AmberMRParser.SHF - 76)) | (1 << (AmberMRParser.PCSHF - 76)) | (1 << (AmberMRParser.ALIGN - 76)) | (1 << (AmberMRParser.CSA - 76)) | (1 << (AmberMRParser.COMMENT - 76)))) != 0):
                self.state = 69
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [AmberMRParser.COMMENT]:
                    self.state = 62
                    self.comment()
                    pass
                elif token in [AmberMRParser.RST]:
                    self.state = 63
                    self.nmr_restraint()
                    pass
                elif token in [AmberMRParser.NOEEXP]:
                    self.state = 64
                    self.noesy_volume_restraint()
                    pass
                elif token in [AmberMRParser.SHF]:
                    self.state = 65
                    self.chemical_shift_restraint()
                    pass
                elif token in [AmberMRParser.PCSHF]:
                    self.state = 66
                    self.pcs_restraint()
                    pass
                elif token in [AmberMRParser.ALIGN]:
                    self.state = 67
                    self.dipolar_coupling_restraint()
                    pass
                elif token in [AmberMRParser.CSA]:
                    self.state = 68
                    self.csa_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 73
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 74
            self.match(AmberMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(AmberMRParser.COMMENT, 0)

        def RETURN_C(self):
            return self.getToken(AmberMRParser.RETURN_C, 0)

        def Any_name(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Any_name)
            else:
                return self.getToken(AmberMRParser.Any_name, i)

        def getRuleIndex(self):
            return AmberMRParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)




    def comment(self):

        localctx = AmberMRParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_comment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 76
            self.match(AmberMRParser.COMMENT)
            self.state = 78 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 77
                self.match(AmberMRParser.Any_name)
                self.state = 80 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==AmberMRParser.Any_name):
                    break

            self.state = 82
            self.match(AmberMRParser.RETURN_C)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nmr_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RST(self):
            return self.getToken(AmberMRParser.RST, 0)

        def restraint_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Restraint_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_nmr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNmr_restraint" ):
                listener.enterNmr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNmr_restraint" ):
                listener.exitNmr_restraint(self)




    def nmr_restraint(self):

        localctx = AmberMRParser.Nmr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_nmr_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 84
            self.match(AmberMRParser.RST)
            self.state = 85
            self.restraint_statement()
            self.state = 86
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noesy_volume_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOEEXP(self):
            return self.getToken(AmberMRParser.NOEEXP, 0)

        def noeexp_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Noeexp_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_noesy_volume_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoesy_volume_restraint" ):
                listener.enterNoesy_volume_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoesy_volume_restraint" ):
                listener.exitNoesy_volume_restraint(self)




    def noesy_volume_restraint(self):

        localctx = AmberMRParser.Noesy_volume_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_noesy_volume_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 88
            self.match(AmberMRParser.NOEEXP)
            self.state = 89
            self.noeexp_statement()
            self.state = 90
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Chemical_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHF(self):
            return self.getToken(AmberMRParser.SHF, 0)

        def shf_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Shf_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_chemical_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChemical_shift_restraint" ):
                listener.enterChemical_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChemical_shift_restraint" ):
                listener.exitChemical_shift_restraint(self)




    def chemical_shift_restraint(self):

        localctx = AmberMRParser.Chemical_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_chemical_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 92
            self.match(AmberMRParser.SHF)
            self.state = 93
            self.shf_statement()
            self.state = 94
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PCSHF(self):
            return self.getToken(AmberMRParser.PCSHF, 0)

        def pcshf_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Pcshf_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = AmberMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_pcs_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 96
            self.match(AmberMRParser.PCSHF)
            self.state = 97
            self.pcshf_statement()
            self.state = 98
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dipolar_coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIGN(self):
            return self.getToken(AmberMRParser.ALIGN, 0)

        def align_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Align_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_dipolar_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDipolar_coupling_restraint" ):
                listener.enterDipolar_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDipolar_coupling_restraint" ):
                listener.exitDipolar_coupling_restraint(self)




    def dipolar_coupling_restraint(self):

        localctx = AmberMRParser.Dipolar_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_dipolar_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 100
            self.match(AmberMRParser.ALIGN)
            self.state = 101
            self.align_statement()
            self.state = 102
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CSA(self):
            return self.getToken(AmberMRParser.CSA, 0)

        def csa_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Csa_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = AmberMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_csa_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 104
            self.match(AmberMRParser.CSA)
            self.state = 105
            self.csa_statement()
            self.state = 106
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restraint_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def distance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Distance_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Distance_statementContext,i)


        def angle_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Angle_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Angle_statementContext,i)


        def torsion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Torsion_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Torsion_statementContext,i)


        def plane_point_angle_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Plane_point_angle_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Plane_point_angle_statementContext,i)


        def plane_plane_angle_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Plane_plane_angle_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Plane_plane_angle_statementContext,i)


        def general_distance2_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.General_distance2_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.General_distance2_statementContext,i)


        def general_distance3_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.General_distance3_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.General_distance3_statementContext,i)


        def general_distance4_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.General_distance4_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.General_distance4_statementContext,i)


        def getRuleIndex(self):
            return AmberMRParser.RULE_restraint_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestraint_statement" ):
                listener.enterRestraint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestraint_statement" ):
                listener.exitRestraint_statement(self)




    def restraint_statement(self):

        localctx = AmberMRParser.Restraint_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_restraint_statement)
        self._la = 0 # Token type
        try:
            self.state = 156
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 111
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.RESTRAINT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.FXYZ) | (1 << AmberMRParser.OUTXYZ) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.IR6) | (1 << AmberMRParser.IFNTYP) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK) | (1 << AmberMRParser.ICONSTR))) != 0):
                    self.state = 108
                    self.distance_statement()
                    self.state = 113
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.RESTRAINT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.IFNTYP) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0):
                    self.state = 114
                    self.angle_statement()
                    self.state = 119
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.RESTRAINT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.RJCOEF) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.IFNTYP) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0):
                    self.state = 120
                    self.torsion_statement()
                    self.state = 125
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0):
                    self.state = 126
                    self.plane_point_angle_statement()
                    self.state = 131
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0):
                    self.state = 132
                    self.plane_plane_angle_statement()
                    self.state = 137
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.RESTRAINT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.IFNTYP) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0):
                    self.state = 138
                    self.general_distance2_statement()
                    self.state = 143
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.RESTRAINT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.IFNTYP) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0):
                    self.state = 144
                    self.general_distance3_statement()
                    self.state = 149
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.RESTRAINT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8) | (1 << AmberMRParser.IFNTYP) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0):
                    self.state = 150
                    self.general_distance4_statement()
                    self.state = 155
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def RESTRAINT(self):
            return self.getToken(AmberMRParser.RESTRAINT, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def L_QUOT(self):
            return self.getToken(AmberMRParser.L_QUOT, 0)

        def distance_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Distance_rst_func_callContext,0)


        def R_QUOT(self):
            return self.getToken(AmberMRParser.R_QUOT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IALTD(self):
            return self.getToken(AmberMRParser.IALTD, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def OUTXYZ(self):
            return self.getToken(AmberMRParser.OUTXYZ, 0)

        def IR6(self):
            return self.getToken(AmberMRParser.IR6, 0)

        def IFNTYP(self):
            return self.getToken(AmberMRParser.IFNTYP, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def ICONSTR(self):
            return self.getToken(AmberMRParser.ICONSTR, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def FXYZ(self):
            return self.getToken(AmberMRParser.FXYZ, 0)

        def Equ_op_BA(self):
            return self.getToken(AmberMRParser.Equ_op_BA, 0)

        def BoolInts(self):
            return self.getToken(AmberMRParser.BoolInts, 0)

        def Comma_BA(self):
            return self.getToken(AmberMRParser.Comma_BA, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_distance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_statement" ):
                listener.enterDistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_statement" ):
                listener.exitDistance_statement(self)




    def distance_statement(self):

        localctx = AmberMRParser.Distance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_distance_statement)
        self._la = 0 # Token type
        try:
            self.state = 221
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 158
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 159
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 160
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 161
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 162
                self.match(AmberMRParser.RSTWT)
                self.state = 163
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 164
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 165
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 166
                self.match(AmberMRParser.RESTRAINT)
                self.state = 167
                self.match(AmberMRParser.Equ_op)
                self.state = 168
                self.match(AmberMRParser.L_QUOT)
                self.state = 169
                self.distance_rst_func_call()
                self.state = 170
                self.match(AmberMRParser.R_QUOT)
                self.state = 171
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 173
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 174
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 175
                self.match(AmberMRParser.Qstrings)
                self.state = 176
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 177
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.OUTXYZ) | (1 << AmberMRParser.IR6) | (1 << AmberMRParser.IFNTYP))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 178
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 179
                self.match(AmberMRParser.BoolInt)
                self.state = 180
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 181
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK) | (1 << AmberMRParser.ICONSTR))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 182
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 183
                self.match(AmberMRParser.Integer)
                self.state = 184
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 185
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 186
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 187
                self.match(AmberMRParser.Real)
                self.state = 188
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 189
                self.match(AmberMRParser.FXYZ)
                self.state = 190
                self.match(AmberMRParser.Equ_op_BA)
                self.state = 191
                self.match(AmberMRParser.BoolInts)
                self.state = 192
                self.match(AmberMRParser.Comma_BA)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 193
                self.match(AmberMRParser.IAT)
                self.state = 194
                self.match(AmberMRParser.L_paren_IP)
                self.state = 195
                self.match(AmberMRParser.Decimal)
                self.state = 196
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 197
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 198
                self.match(AmberMRParser.Integer)
                self.state = 199
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 200
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.IGR1 or _la==AmberMRParser.IGR2):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 201
                self.match(AmberMRParser.L_paren_IA)
                self.state = 202
                self.match(AmberMRParser.Decimal)
                self.state = 203
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 204
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 205
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 206
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 207
                self.match(AmberMRParser.RSTWT)
                self.state = 208
                self.match(AmberMRParser.L_paren_RP)
                self.state = 209
                self.match(AmberMRParser.Decimal)
                self.state = 210
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 211
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 212
                self.match(AmberMRParser.Real)
                self.state = 213
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 214
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 215
                self.match(AmberMRParser.L_paren_QA)
                self.state = 216
                self.match(AmberMRParser.Decimal)
                self.state = 217
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 218
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 219
                self.match(AmberMRParser.Qstrings)
                self.state = 220
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def RESTRAINT(self):
            return self.getToken(AmberMRParser.RESTRAINT, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def L_QUOT(self):
            return self.getToken(AmberMRParser.L_QUOT, 0)

        def angle_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Angle_rst_func_callContext,0)


        def R_QUOT(self):
            return self.getToken(AmberMRParser.R_QUOT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def IFNTYP(self):
            return self.getToken(AmberMRParser.IFNTYP, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_angle_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_statement" ):
                listener.enterAngle_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_statement" ):
                listener.exitAngle_statement(self)




    def angle_statement(self):

        localctx = AmberMRParser.Angle_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_angle_statement)
        self._la = 0 # Token type
        try:
            self.state = 282
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 223
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 224
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 225
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 226
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 227
                self.match(AmberMRParser.RSTWT)
                self.state = 228
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 229
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 230
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 231
                self.match(AmberMRParser.RESTRAINT)
                self.state = 232
                self.match(AmberMRParser.Equ_op)
                self.state = 233
                self.match(AmberMRParser.L_QUOT)
                self.state = 234
                self.angle_rst_func_call()
                self.state = 235
                self.match(AmberMRParser.R_QUOT)
                self.state = 236
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 238
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 239
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 240
                self.match(AmberMRParser.Qstrings)
                self.state = 241
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 242
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.IFNTYP))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 243
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 244
                self.match(AmberMRParser.BoolInt)
                self.state = 245
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 246
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 247
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 248
                self.match(AmberMRParser.Integer)
                self.state = 249
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 250
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 251
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 252
                self.match(AmberMRParser.Real)
                self.state = 253
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 254
                self.match(AmberMRParser.IAT)
                self.state = 255
                self.match(AmberMRParser.L_paren_IP)
                self.state = 256
                self.match(AmberMRParser.Decimal)
                self.state = 257
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 258
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 259
                self.match(AmberMRParser.Integer)
                self.state = 260
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 261
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 262
                self.match(AmberMRParser.L_paren_IA)
                self.state = 263
                self.match(AmberMRParser.Decimal)
                self.state = 264
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 265
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 266
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 267
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 268
                self.match(AmberMRParser.RSTWT)
                self.state = 269
                self.match(AmberMRParser.L_paren_RP)
                self.state = 270
                self.match(AmberMRParser.Decimal)
                self.state = 271
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 272
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 273
                self.match(AmberMRParser.Real)
                self.state = 274
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 275
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 276
                self.match(AmberMRParser.L_paren_QA)
                self.state = 277
                self.match(AmberMRParser.Decimal)
                self.state = 278
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 279
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 280
                self.match(AmberMRParser.Qstrings)
                self.state = 281
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def IGR4(self):
            return self.getToken(AmberMRParser.IGR4, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def RJCOEF(self):
            return self.getToken(AmberMRParser.RJCOEF, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def RESTRAINT(self):
            return self.getToken(AmberMRParser.RESTRAINT, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def L_QUOT(self):
            return self.getToken(AmberMRParser.L_QUOT, 0)

        def torsion_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Torsion_rst_func_callContext,0)


        def R_QUOT(self):
            return self.getToken(AmberMRParser.R_QUOT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def GRNAM4(self):
            return self.getToken(AmberMRParser.GRNAM4, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def IFNTYP(self):
            return self.getToken(AmberMRParser.IFNTYP, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_torsion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_statement" ):
                listener.enterTorsion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_statement" ):
                listener.exitTorsion_statement(self)




    def torsion_statement(self):

        localctx = AmberMRParser.Torsion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_torsion_statement)
        self._la = 0 # Token type
        try:
            self.state = 343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 284
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 285
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 286
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 287
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 288
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.RSTWT or _la==AmberMRParser.RJCOEF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 289
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 290
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 291
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 292
                self.match(AmberMRParser.RESTRAINT)
                self.state = 293
                self.match(AmberMRParser.Equ_op)
                self.state = 294
                self.match(AmberMRParser.L_QUOT)
                self.state = 295
                self.torsion_rst_func_call()
                self.state = 296
                self.match(AmberMRParser.R_QUOT)
                self.state = 297
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 299
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 300
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 301
                self.match(AmberMRParser.Qstrings)
                self.state = 302
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 303
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.IFNTYP))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 304
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 305
                self.match(AmberMRParser.BoolInt)
                self.state = 306
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 307
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 308
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 309
                self.match(AmberMRParser.Integer)
                self.state = 310
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 311
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 312
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 313
                self.match(AmberMRParser.Real)
                self.state = 314
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 315
                self.match(AmberMRParser.IAT)
                self.state = 316
                self.match(AmberMRParser.L_paren_IP)
                self.state = 317
                self.match(AmberMRParser.Decimal)
                self.state = 318
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 319
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 320
                self.match(AmberMRParser.Integer)
                self.state = 321
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 322
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 323
                self.match(AmberMRParser.L_paren_IA)
                self.state = 324
                self.match(AmberMRParser.Decimal)
                self.state = 325
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 326
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 327
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 328
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 329
                self.match(AmberMRParser.RSTWT)
                self.state = 330
                self.match(AmberMRParser.L_paren_RP)
                self.state = 331
                self.match(AmberMRParser.Decimal)
                self.state = 332
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 333
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 334
                self.match(AmberMRParser.Real)
                self.state = 335
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 336
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 337
                self.match(AmberMRParser.L_paren_QA)
                self.state = 338
                self.match(AmberMRParser.Decimal)
                self.state = 339
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 340
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 341
                self.match(AmberMRParser.Qstrings)
                self.state = 342
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_point_angle_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def IGR4(self):
            return self.getToken(AmberMRParser.IGR4, 0)

        def IGR5(self):
            return self.getToken(AmberMRParser.IGR5, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def GRNAM4(self):
            return self.getToken(AmberMRParser.GRNAM4, 0)

        def GRNAM5(self):
            return self.getToken(AmberMRParser.GRNAM5, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_plane_point_angle_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_point_angle_statement" ):
                listener.enterPlane_point_angle_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_point_angle_statement" ):
                listener.exitPlane_point_angle_statement(self)




    def plane_point_angle_statement(self):

        localctx = AmberMRParser.Plane_point_angle_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_plane_point_angle_statement)
        self._la = 0 # Token type
        try:
            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 345
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 346
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 347
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 348
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 349
                self.match(AmberMRParser.RSTWT)
                self.state = 350
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 351
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 352
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 353
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 354
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 355
                self.match(AmberMRParser.Qstrings)
                self.state = 356
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 357
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IMULT))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 358
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 359
                self.match(AmberMRParser.BoolInt)
                self.state = 360
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 361
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 362
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 363
                self.match(AmberMRParser.Integer)
                self.state = 364
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 365
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 366
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 367
                self.match(AmberMRParser.Real)
                self.state = 368
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 369
                self.match(AmberMRParser.IAT)
                self.state = 370
                self.match(AmberMRParser.L_paren_IP)
                self.state = 371
                self.match(AmberMRParser.Decimal)
                self.state = 372
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 373
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 374
                self.match(AmberMRParser.Integer)
                self.state = 375
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 376
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 377
                self.match(AmberMRParser.L_paren_IA)
                self.state = 378
                self.match(AmberMRParser.Decimal)
                self.state = 379
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 380
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 381
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 382
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 383
                self.match(AmberMRParser.RSTWT)
                self.state = 384
                self.match(AmberMRParser.L_paren_RP)
                self.state = 385
                self.match(AmberMRParser.Decimal)
                self.state = 386
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 387
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 388
                self.match(AmberMRParser.Real)
                self.state = 389
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 390
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 391
                self.match(AmberMRParser.L_paren_QA)
                self.state = 392
                self.match(AmberMRParser.Decimal)
                self.state = 393
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 394
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 395
                self.match(AmberMRParser.Qstrings)
                self.state = 396
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_plane_angle_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def IGR4(self):
            return self.getToken(AmberMRParser.IGR4, 0)

        def IGR5(self):
            return self.getToken(AmberMRParser.IGR5, 0)

        def IGR6(self):
            return self.getToken(AmberMRParser.IGR6, 0)

        def IGR7(self):
            return self.getToken(AmberMRParser.IGR7, 0)

        def IGR8(self):
            return self.getToken(AmberMRParser.IGR8, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def GRNAM4(self):
            return self.getToken(AmberMRParser.GRNAM4, 0)

        def GRNAM5(self):
            return self.getToken(AmberMRParser.GRNAM5, 0)

        def GRNAM6(self):
            return self.getToken(AmberMRParser.GRNAM6, 0)

        def GRNAM7(self):
            return self.getToken(AmberMRParser.GRNAM7, 0)

        def GRNAM8(self):
            return self.getToken(AmberMRParser.GRNAM8, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_plane_plane_angle_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_plane_angle_statement" ):
                listener.enterPlane_plane_angle_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_plane_angle_statement" ):
                listener.exitPlane_plane_angle_statement(self)




    def plane_plane_angle_statement(self):

        localctx = AmberMRParser.Plane_plane_angle_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_plane_plane_angle_statement)
        self._la = 0 # Token type
        try:
            self.state = 451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 399
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 400
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 401
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 402
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 403
                self.match(AmberMRParser.RSTWT)
                self.state = 404
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 405
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 406
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 407
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 408
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 409
                self.match(AmberMRParser.Qstrings)
                self.state = 410
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 411
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IMULT))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 412
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 413
                self.match(AmberMRParser.BoolInt)
                self.state = 414
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 415
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 416
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 417
                self.match(AmberMRParser.Integer)
                self.state = 418
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 419
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 420
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 421
                self.match(AmberMRParser.Real)
                self.state = 422
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 423
                self.match(AmberMRParser.IAT)
                self.state = 424
                self.match(AmberMRParser.L_paren_IP)
                self.state = 425
                self.match(AmberMRParser.Decimal)
                self.state = 426
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 427
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 428
                self.match(AmberMRParser.Integer)
                self.state = 429
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 430
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 431
                self.match(AmberMRParser.L_paren_IA)
                self.state = 432
                self.match(AmberMRParser.Decimal)
                self.state = 433
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 434
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 435
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 436
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 437
                self.match(AmberMRParser.RSTWT)
                self.state = 438
                self.match(AmberMRParser.L_paren_RP)
                self.state = 439
                self.match(AmberMRParser.Decimal)
                self.state = 440
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 441
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 442
                self.match(AmberMRParser.Real)
                self.state = 443
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 444
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 445
                self.match(AmberMRParser.L_paren_QA)
                self.state = 446
                self.match(AmberMRParser.Decimal)
                self.state = 447
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 448
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 449
                self.match(AmberMRParser.Qstrings)
                self.state = 450
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_distance2_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def IGR4(self):
            return self.getToken(AmberMRParser.IGR4, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def RESTRAINT(self):
            return self.getToken(AmberMRParser.RESTRAINT, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def L_QUOT(self):
            return self.getToken(AmberMRParser.L_QUOT, 0)

        def coordinate2_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Coordinate2_rst_func_callContext,0)


        def R_QUOT(self):
            return self.getToken(AmberMRParser.R_QUOT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def GRNAM4(self):
            return self.getToken(AmberMRParser.GRNAM4, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IALTD(self):
            return self.getToken(AmberMRParser.IALTD, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def IFNTYP(self):
            return self.getToken(AmberMRParser.IFNTYP, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_general_distance2_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_distance2_statement" ):
                listener.enterGeneral_distance2_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_distance2_statement" ):
                listener.exitGeneral_distance2_statement(self)




    def general_distance2_statement(self):

        localctx = AmberMRParser.General_distance2_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_general_distance2_statement)
        self._la = 0 # Token type
        try:
            self.state = 512
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 453
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 454
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 455
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 456
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 457
                self.match(AmberMRParser.RSTWT)
                self.state = 458
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 459
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 460
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 461
                self.match(AmberMRParser.RESTRAINT)
                self.state = 462
                self.match(AmberMRParser.Equ_op)
                self.state = 463
                self.match(AmberMRParser.L_QUOT)
                self.state = 464
                self.coordinate2_rst_func_call()
                self.state = 465
                self.match(AmberMRParser.R_QUOT)
                self.state = 466
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 468
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 469
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 470
                self.match(AmberMRParser.Qstrings)
                self.state = 471
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 472
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.IFNTYP))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 473
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 474
                self.match(AmberMRParser.BoolInt)
                self.state = 475
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 476
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 477
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 478
                self.match(AmberMRParser.Integer)
                self.state = 479
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 480
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 481
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 482
                self.match(AmberMRParser.Real)
                self.state = 483
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 484
                self.match(AmberMRParser.IAT)
                self.state = 485
                self.match(AmberMRParser.L_paren_IP)
                self.state = 486
                self.match(AmberMRParser.Decimal)
                self.state = 487
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 488
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 489
                self.match(AmberMRParser.Integer)
                self.state = 490
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 491
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 492
                self.match(AmberMRParser.L_paren_IA)
                self.state = 493
                self.match(AmberMRParser.Decimal)
                self.state = 494
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 495
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 496
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 497
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 498
                self.match(AmberMRParser.RSTWT)
                self.state = 499
                self.match(AmberMRParser.L_paren_RP)
                self.state = 500
                self.match(AmberMRParser.Decimal)
                self.state = 501
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 502
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 503
                self.match(AmberMRParser.Real)
                self.state = 504
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 505
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 506
                self.match(AmberMRParser.L_paren_QA)
                self.state = 507
                self.match(AmberMRParser.Decimal)
                self.state = 508
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 509
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 510
                self.match(AmberMRParser.Qstrings)
                self.state = 511
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_distance3_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def IGR4(self):
            return self.getToken(AmberMRParser.IGR4, 0)

        def IGR5(self):
            return self.getToken(AmberMRParser.IGR5, 0)

        def IGR6(self):
            return self.getToken(AmberMRParser.IGR6, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def RESTRAINT(self):
            return self.getToken(AmberMRParser.RESTRAINT, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def L_QUOT(self):
            return self.getToken(AmberMRParser.L_QUOT, 0)

        def coordinate3_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Coordinate3_rst_func_callContext,0)


        def R_QUOT(self):
            return self.getToken(AmberMRParser.R_QUOT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def GRNAM4(self):
            return self.getToken(AmberMRParser.GRNAM4, 0)

        def GRNAM5(self):
            return self.getToken(AmberMRParser.GRNAM5, 0)

        def GRNAM6(self):
            return self.getToken(AmberMRParser.GRNAM6, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IALTD(self):
            return self.getToken(AmberMRParser.IALTD, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def IFNTYP(self):
            return self.getToken(AmberMRParser.IFNTYP, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_general_distance3_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_distance3_statement" ):
                listener.enterGeneral_distance3_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_distance3_statement" ):
                listener.exitGeneral_distance3_statement(self)




    def general_distance3_statement(self):

        localctx = AmberMRParser.General_distance3_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_general_distance3_statement)
        self._la = 0 # Token type
        try:
            self.state = 573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 514
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 515
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 516
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 517
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.match(AmberMRParser.RSTWT)
                self.state = 519
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 520
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 521
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 522
                self.match(AmberMRParser.RESTRAINT)
                self.state = 523
                self.match(AmberMRParser.Equ_op)
                self.state = 524
                self.match(AmberMRParser.L_QUOT)
                self.state = 525
                self.coordinate3_rst_func_call()
                self.state = 526
                self.match(AmberMRParser.R_QUOT)
                self.state = 527
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 529
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 530
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 531
                self.match(AmberMRParser.Qstrings)
                self.state = 532
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 533
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.IFNTYP))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 534
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 535
                self.match(AmberMRParser.BoolInt)
                self.state = 536
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 537
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 538
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 539
                self.match(AmberMRParser.Integer)
                self.state = 540
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 541
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 542
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 543
                self.match(AmberMRParser.Real)
                self.state = 544
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 545
                self.match(AmberMRParser.IAT)
                self.state = 546
                self.match(AmberMRParser.L_paren_IP)
                self.state = 547
                self.match(AmberMRParser.Decimal)
                self.state = 548
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 549
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 550
                self.match(AmberMRParser.Integer)
                self.state = 551
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 552
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 553
                self.match(AmberMRParser.L_paren_IA)
                self.state = 554
                self.match(AmberMRParser.Decimal)
                self.state = 555
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 556
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 557
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 558
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 559
                self.match(AmberMRParser.RSTWT)
                self.state = 560
                self.match(AmberMRParser.L_paren_RP)
                self.state = 561
                self.match(AmberMRParser.Decimal)
                self.state = 562
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 563
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 564
                self.match(AmberMRParser.Real)
                self.state = 565
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 566
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 567
                self.match(AmberMRParser.L_paren_QA)
                self.state = 568
                self.match(AmberMRParser.Decimal)
                self.state = 569
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 570
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 571
                self.match(AmberMRParser.Qstrings)
                self.state = 572
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_distance4_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def IGR4(self):
            return self.getToken(AmberMRParser.IGR4, 0)

        def IGR5(self):
            return self.getToken(AmberMRParser.IGR5, 0)

        def IGR6(self):
            return self.getToken(AmberMRParser.IGR6, 0)

        def IGR7(self):
            return self.getToken(AmberMRParser.IGR7, 0)

        def IGR8(self):
            return self.getToken(AmberMRParser.IGR8, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def RESTRAINT(self):
            return self.getToken(AmberMRParser.RESTRAINT, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def L_QUOT(self):
            return self.getToken(AmberMRParser.L_QUOT, 0)

        def coordinate4_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Coordinate4_rst_func_callContext,0)


        def R_QUOT(self):
            return self.getToken(AmberMRParser.R_QUOT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def GRNAM4(self):
            return self.getToken(AmberMRParser.GRNAM4, 0)

        def GRNAM5(self):
            return self.getToken(AmberMRParser.GRNAM5, 0)

        def GRNAM6(self):
            return self.getToken(AmberMRParser.GRNAM6, 0)

        def GRNAM7(self):
            return self.getToken(AmberMRParser.GRNAM7, 0)

        def GRNAM8(self):
            return self.getToken(AmberMRParser.GRNAM8, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IALTD(self):
            return self.getToken(AmberMRParser.IALTD, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def IFNTYP(self):
            return self.getToken(AmberMRParser.IFNTYP, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_general_distance4_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_distance4_statement" ):
                listener.enterGeneral_distance4_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_distance4_statement" ):
                listener.exitGeneral_distance4_statement(self)




    def general_distance4_statement(self):

        localctx = AmberMRParser.General_distance4_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_general_distance4_statement)
        self._la = 0 # Token type
        try:
            self.state = 634
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 575
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 576
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 577
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 578
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 579
                self.match(AmberMRParser.RSTWT)
                self.state = 580
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 581
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 582
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 583
                self.match(AmberMRParser.RESTRAINT)
                self.state = 584
                self.match(AmberMRParser.Equ_op)
                self.state = 585
                self.match(AmberMRParser.L_QUOT)
                self.state = 586
                self.coordinate4_rst_func_call()
                self.state = 587
                self.match(AmberMRParser.R_QUOT)
                self.state = 588
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 590
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 591
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 592
                self.match(AmberMRParser.Qstrings)
                self.state = 593
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 594
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.IFNTYP))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 595
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 596
                self.match(AmberMRParser.BoolInt)
                self.state = 597
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 598
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 599
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 600
                self.match(AmberMRParser.Integer)
                self.state = 601
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 602
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 603
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 604
                self.match(AmberMRParser.Real)
                self.state = 605
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 606
                self.match(AmberMRParser.IAT)
                self.state = 607
                self.match(AmberMRParser.L_paren_IP)
                self.state = 608
                self.match(AmberMRParser.Decimal)
                self.state = 609
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 610
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 611
                self.match(AmberMRParser.Integer)
                self.state = 612
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 613
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 614
                self.match(AmberMRParser.L_paren_IA)
                self.state = 615
                self.match(AmberMRParser.Decimal)
                self.state = 616
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 617
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 618
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 619
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 620
                self.match(AmberMRParser.RSTWT)
                self.state = 621
                self.match(AmberMRParser.L_paren_RP)
                self.state = 622
                self.match(AmberMRParser.Decimal)
                self.state = 623
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 624
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 625
                self.match(AmberMRParser.Real)
                self.state = 626
                self.match(AmberMRParser.Comma)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 627
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 628
                self.match(AmberMRParser.L_paren_QA)
                self.state = 629
                self.match(AmberMRParser.Decimal)
                self.state = 630
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 631
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 632
                self.match(AmberMRParser.Qstrings)
                self.state = 633
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noeexp_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NPEAK(self):
            return self.getToken(AmberMRParser.NPEAK, 0)

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def EMIX(self):
            return self.getToken(AmberMRParser.EMIX, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def Decimal(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Decimal)
            else:
                return self.getToken(AmberMRParser.Decimal, i)

        def Comma_ARG(self):
            return self.getToken(AmberMRParser.Comma_ARG, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def IHP(self):
            return self.getToken(AmberMRParser.IHP, 0)

        def JHP(self):
            return self.getToken(AmberMRParser.JHP, 0)

        def L_paren_RA(self):
            return self.getToken(AmberMRParser.L_paren_RA, 0)

        def AEXP(self):
            return self.getToken(AmberMRParser.AEXP, 0)

        def ARANGE(self):
            return self.getToken(AmberMRParser.ARANGE, 0)

        def AWT(self):
            return self.getToken(AmberMRParser.AWT, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def INVWT1(self):
            return self.getToken(AmberMRParser.INVWT1, 0)

        def INVWT2(self):
            return self.getToken(AmberMRParser.INVWT2, 0)

        def OMEGA(self):
            return self.getToken(AmberMRParser.OMEGA, 0)

        def TAUROT(self):
            return self.getToken(AmberMRParser.TAUROT, 0)

        def TAUMET(self):
            return self.getToken(AmberMRParser.TAUMET, 0)

        def OSCALE(self):
            return self.getToken(AmberMRParser.OSCALE, 0)

        def ID2O(self):
            return self.getToken(AmberMRParser.ID2O, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_noeexp_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoeexp_statement" ):
                listener.enterNoeexp_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoeexp_statement" ):
                listener.exitNoeexp_statement(self)




    def noeexp_statement(self):

        localctx = AmberMRParser.Noeexp_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_noeexp_statement)
        self._la = 0 # Token type
        try:
            self.state = 670
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NPEAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 636
                self.match(AmberMRParser.NPEAK)
                self.state = 637
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 638
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 639
                self.match(AmberMRParser.Comma_IA)
                pass
            elif token in [AmberMRParser.EMIX]:
                self.enterOuterAlt(localctx, 2)
                self.state = 640
                self.match(AmberMRParser.EMIX)
                self.state = 641
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 642
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 643
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.IHP, AmberMRParser.JHP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 644
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.IHP or _la==AmberMRParser.JHP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 645
                self.match(AmberMRParser.L_paren_IA)
                self.state = 646
                self.match(AmberMRParser.Decimal)
                self.state = 647
                self.match(AmberMRParser.Comma_ARG)
                self.state = 648
                self.match(AmberMRParser.Decimal)
                self.state = 649
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 650
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 651
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 652
                self.match(AmberMRParser.Comma_IA)
                pass
            elif token in [AmberMRParser.AEXP, AmberMRParser.ARANGE, AmberMRParser.AWT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 653
                _la = self._input.LA(1)
                if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (AmberMRParser.AEXP - 66)) | (1 << (AmberMRParser.ARANGE - 66)) | (1 << (AmberMRParser.AWT - 66)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 654
                self.match(AmberMRParser.L_paren_RA)
                self.state = 655
                self.match(AmberMRParser.Decimal)
                self.state = 656
                self.match(AmberMRParser.Comma_ARG)
                self.state = 657
                self.match(AmberMRParser.Decimal)
                self.state = 658
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 659
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 660
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 661
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.INVWT1, AmberMRParser.INVWT2, AmberMRParser.OMEGA, AmberMRParser.TAUROT, AmberMRParser.TAUMET, AmberMRParser.OSCALE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 662
                _la = self._input.LA(1)
                if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (AmberMRParser.INVWT1 - 69)) | (1 << (AmberMRParser.INVWT2 - 69)) | (1 << (AmberMRParser.OMEGA - 69)) | (1 << (AmberMRParser.TAUROT - 69)) | (1 << (AmberMRParser.TAUMET - 69)) | (1 << (AmberMRParser.OSCALE - 69)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 663
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 664
                self.match(AmberMRParser.Real)
                self.state = 665
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.ID2O]:
                self.enterOuterAlt(localctx, 6)
                self.state = 666
                self.match(AmberMRParser.ID2O)
                self.state = 667
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 668
                self.match(AmberMRParser.BoolInt)
                self.state = 669
                self.match(AmberMRParser.Comma)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shf_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def NRING(self):
            return self.getToken(AmberMRParser.NRING, 0)

        def NPROT(self):
            return self.getToken(AmberMRParser.NPROT, 0)

        def NTER(self):
            return self.getToken(AmberMRParser.NTER, 0)

        def CTER(self):
            return self.getToken(AmberMRParser.CTER, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def Decimal(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Decimal)
            else:
                return self.getToken(AmberMRParser.Decimal, i)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def NATR(self):
            return self.getToken(AmberMRParser.NATR, 0)

        def IPROT(self):
            return self.getToken(AmberMRParser.IPROT, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def IATR(self):
            return self.getToken(AmberMRParser.IATR, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Comma_ARG(self):
            return self.getToken(AmberMRParser.Comma_ARG, 0)

        def OBS(self):
            return self.getToken(AmberMRParser.OBS, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def L_paren_RA(self):
            return self.getToken(AmberMRParser.L_paren_RA, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def STR(self):
            return self.getToken(AmberMRParser.STR, 0)

        def SHRANG(self):
            return self.getToken(AmberMRParser.SHRANG, 0)

        def WT(self):
            return self.getToken(AmberMRParser.WT, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def NAMR(self):
            return self.getToken(AmberMRParser.NAMR, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def SHCUT(self):
            return self.getToken(AmberMRParser.SHCUT, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_shf_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShf_statement" ):
                listener.enterShf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShf_statement" ):
                listener.exitShf_statement(self)




    def shf_statement(self):

        localctx = AmberMRParser.Shf_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_shf_statement)
        self._la = 0 # Token type
        try:
            self.state = 717
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NRING, AmberMRParser.NPROT, AmberMRParser.NTER, AmberMRParser.CTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 672
                _la = self._input.LA(1)
                if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (AmberMRParser.NRING - 77)) | (1 << (AmberMRParser.NPROT - 77)) | (1 << (AmberMRParser.NTER - 77)) | (1 << (AmberMRParser.CTER - 77)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 673
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 674
                self.match(AmberMRParser.Integer)
                self.state = 675
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.NATR, AmberMRParser.IPROT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 676
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.NATR or _la==AmberMRParser.IPROT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 677
                self.match(AmberMRParser.L_paren_IA)
                self.state = 678
                self.match(AmberMRParser.Decimal)
                self.state = 679
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 680
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 681
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 682
                self.match(AmberMRParser.Comma_IA)
                pass
            elif token in [AmberMRParser.IATR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 683
                self.match(AmberMRParser.IATR)
                self.state = 684
                self.match(AmberMRParser.L_paren_IP)
                self.state = 685
                self.match(AmberMRParser.Decimal)
                self.state = 686
                self.match(AmberMRParser.Comma_ARG)
                self.state = 687
                self.match(AmberMRParser.Decimal)
                self.state = 688
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 689
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 690
                self.match(AmberMRParser.Integer)
                self.state = 691
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.OBS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 692
                self.match(AmberMRParser.OBS)
                self.state = 693
                self.match(AmberMRParser.L_paren_RP)
                self.state = 694
                self.match(AmberMRParser.Decimal)
                self.state = 695
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 696
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 697
                self.match(AmberMRParser.Real)
                self.state = 698
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.STR, AmberMRParser.SHRANG, AmberMRParser.WT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 699
                _la = self._input.LA(1)
                if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (AmberMRParser.STR - 81)) | (1 << (AmberMRParser.SHRANG - 81)) | (1 << (AmberMRParser.WT - 81)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 700
                self.match(AmberMRParser.L_paren_RA)
                self.state = 701
                self.match(AmberMRParser.Decimal)
                self.state = 702
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 703
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 704
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 705
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.NAMR]:
                self.enterOuterAlt(localctx, 6)
                self.state = 706
                self.match(AmberMRParser.NAMR)
                self.state = 707
                self.match(AmberMRParser.L_paren_QA)
                self.state = 708
                self.match(AmberMRParser.Decimal)
                self.state = 709
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 710
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 711
                self.match(AmberMRParser.Qstrings)
                self.state = 712
                self.match(AmberMRParser.Comma_QA)
                pass
            elif token in [AmberMRParser.SHCUT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 713
                self.match(AmberMRParser.SHCUT)
                self.state = 714
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 715
                self.match(AmberMRParser.Real)
                self.state = 716
                self.match(AmberMRParser.Comma)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcshf_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def NPROT(self):
            return self.getToken(AmberMRParser.NPROT, 0)

        def NME(self):
            return self.getToken(AmberMRParser.NME, 0)

        def NMPMC(self):
            return self.getToken(AmberMRParser.NMPMC, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IPROT(self):
            return self.getToken(AmberMRParser.IPROT, 0)

        def MLTPRO(self):
            return self.getToken(AmberMRParser.MLTPRO, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def OPTPHI(self):
            return self.getToken(AmberMRParser.OPTPHI, 0)

        def OPTTET(self):
            return self.getToken(AmberMRParser.OPTTET, 0)

        def OPTOMG(self):
            return self.getToken(AmberMRParser.OPTOMG, 0)

        def OPTA1(self):
            return self.getToken(AmberMRParser.OPTA1, 0)

        def OPTA2(self):
            return self.getToken(AmberMRParser.OPTA2, 0)

        def OBS(self):
            return self.getToken(AmberMRParser.OBS, 0)

        def L_paren_RA(self):
            return self.getToken(AmberMRParser.L_paren_RA, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def WT(self):
            return self.getToken(AmberMRParser.WT, 0)

        def TOLPRO(self):
            return self.getToken(AmberMRParser.TOLPRO, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def OPTKON(self):
            return self.getToken(AmberMRParser.OPTKON, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_pcshf_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcshf_statement" ):
                listener.enterPcshf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcshf_statement" ):
                listener.exitPcshf_statement(self)




    def pcshf_statement(self):

        localctx = AmberMRParser.Pcshf_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pcshf_statement)
        self._la = 0 # Token type
        try:
            self.state = 752
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NPROT, AmberMRParser.NME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 719
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.NPROT or _la==AmberMRParser.NME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 720
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 721
                self.match(AmberMRParser.Integer)
                self.state = 722
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.NMPMC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 723
                self.match(AmberMRParser.NMPMC)
                self.state = 724
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 725
                self.match(AmberMRParser.Qstrings)
                self.state = 726
                self.match(AmberMRParser.Comma_QA)
                pass
            elif token in [AmberMRParser.IPROT, AmberMRParser.MLTPRO]:
                self.enterOuterAlt(localctx, 3)
                self.state = 727
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.IPROT or _la==AmberMRParser.MLTPRO):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 728
                self.match(AmberMRParser.L_paren_IA)
                self.state = 729
                self.match(AmberMRParser.Decimal)
                self.state = 730
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 731
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 732
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 733
                self.match(AmberMRParser.Comma_IA)
                pass
            elif token in [AmberMRParser.OBS, AmberMRParser.OPTPHI, AmberMRParser.OPTTET, AmberMRParser.OPTOMG, AmberMRParser.OPTA1, AmberMRParser.OPTA2]:
                self.enterOuterAlt(localctx, 4)
                self.state = 734
                _la = self._input.LA(1)
                if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (AmberMRParser.OBS - 83)) | (1 << (AmberMRParser.OPTPHI - 83)) | (1 << (AmberMRParser.OPTTET - 83)) | (1 << (AmberMRParser.OPTOMG - 83)) | (1 << (AmberMRParser.OPTA1 - 83)) | (1 << (AmberMRParser.OPTA2 - 83)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 735
                self.match(AmberMRParser.L_paren_RP)
                self.state = 736
                self.match(AmberMRParser.Decimal)
                self.state = 737
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 738
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 739
                self.match(AmberMRParser.Real)
                self.state = 740
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.WT, AmberMRParser.TOLPRO]:
                self.enterOuterAlt(localctx, 5)
                self.state = 741
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.WT or _la==AmberMRParser.TOLPRO):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 742
                self.match(AmberMRParser.L_paren_RA)
                self.state = 743
                self.match(AmberMRParser.Decimal)
                self.state = 744
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 745
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 746
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 747
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.OPTKON]:
                self.enterOuterAlt(localctx, 6)
                self.state = 748
                self.match(AmberMRParser.OPTKON)
                self.state = 749
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 750
                self.match(AmberMRParser.Real)
                self.state = 751
                self.match(AmberMRParser.Comma)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Align_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def NDIP(self):
            return self.getToken(AmberMRParser.NDIP, 0)

        def DATASET(self):
            return self.getToken(AmberMRParser.DATASET, 0)

        def NUM_DATASET(self):
            return self.getToken(AmberMRParser.NUM_DATASET, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def ID(self):
            return self.getToken(AmberMRParser.ID, 0)

        def JD(self):
            return self.getToken(AmberMRParser.JD, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def DOBSL(self):
            return self.getToken(AmberMRParser.DOBSL, 0)

        def DOBSU(self):
            return self.getToken(AmberMRParser.DOBSU, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def DWT(self):
            return self.getToken(AmberMRParser.DWT, 0)

        def GIGJ(self):
            return self.getToken(AmberMRParser.GIGJ, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def S11(self):
            return self.getToken(AmberMRParser.S11, 0)

        def S12(self):
            return self.getToken(AmberMRParser.S12, 0)

        def S13(self):
            return self.getToken(AmberMRParser.S13, 0)

        def S22(self):
            return self.getToken(AmberMRParser.S22, 0)

        def S23(self):
            return self.getToken(AmberMRParser.S23, 0)

        def DIJ(self):
            return self.getToken(AmberMRParser.DIJ, 0)

        def DCUT(self):
            return self.getToken(AmberMRParser.DCUT, 0)

        def FREEZEMOL(self):
            return self.getToken(AmberMRParser.FREEZEMOL, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def Logical(self):
            return self.getToken(AmberMRParser.Logical, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_align_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlign_statement" ):
                listener.enterAlign_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlign_statement" ):
                listener.exitAlign_statement(self)




    def align_statement(self):

        localctx = AmberMRParser.Align_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_align_statement)
        self._la = 0 # Token type
        try:
            self.state = 784
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NDIP, AmberMRParser.DATASET, AmberMRParser.NUM_DATASET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 754
                _la = self._input.LA(1)
                if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (AmberMRParser.NDIP - 102)) | (1 << (AmberMRParser.DATASET - 102)) | (1 << (AmberMRParser.NUM_DATASET - 102)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 755
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 756
                self.match(AmberMRParser.Integer)
                self.state = 757
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.ID, AmberMRParser.JD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 758
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.ID or _la==AmberMRParser.JD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 759
                self.match(AmberMRParser.L_paren_IP)
                self.state = 760
                self.match(AmberMRParser.Decimal)
                self.state = 761
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 762
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 763
                self.match(AmberMRParser.Integer)
                self.state = 764
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.DOBSL, AmberMRParser.DOBSU]:
                self.enterOuterAlt(localctx, 3)
                self.state = 765
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.DOBSL or _la==AmberMRParser.DOBSU):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 766
                self.match(AmberMRParser.L_paren_RP)
                self.state = 767
                self.match(AmberMRParser.Decimal)
                self.state = 768
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 769
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 770
                self.match(AmberMRParser.Real)
                self.state = 771
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.DWT, AmberMRParser.GIGJ]:
                self.enterOuterAlt(localctx, 4)
                self.state = 772
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.DWT or _la==AmberMRParser.GIGJ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 773
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 774
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 775
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.S11, AmberMRParser.S12, AmberMRParser.S13, AmberMRParser.S22, AmberMRParser.S23, AmberMRParser.DIJ, AmberMRParser.DCUT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 776
                _la = self._input.LA(1)
                if not(((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (AmberMRParser.S11 - 110)) | (1 << (AmberMRParser.S12 - 110)) | (1 << (AmberMRParser.S13 - 110)) | (1 << (AmberMRParser.S22 - 110)) | (1 << (AmberMRParser.S23 - 110)) | (1 << (AmberMRParser.DIJ - 110)) | (1 << (AmberMRParser.DCUT - 110)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 777
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 778
                self.match(AmberMRParser.Real)
                self.state = 779
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.FREEZEMOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 780
                self.match(AmberMRParser.FREEZEMOL)
                self.state = 781
                self.match(AmberMRParser.Equ_op)
                self.state = 782
                self.match(AmberMRParser.Logical)
                self.state = 783
                self.match(AmberMRParser.Comma)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def NCSA(self):
            return self.getToken(AmberMRParser.NCSA, 0)

        def DATASETC(self):
            return self.getToken(AmberMRParser.DATASETC, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def ICSA(self):
            return self.getToken(AmberMRParser.ICSA, 0)

        def JCSA(self):
            return self.getToken(AmberMRParser.JCSA, 0)

        def KCSA(self):
            return self.getToken(AmberMRParser.KCSA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def COBSL(self):
            return self.getToken(AmberMRParser.COBSL, 0)

        def COBSU(self):
            return self.getToken(AmberMRParser.COBSU, 0)

        def CWT(self):
            return self.getToken(AmberMRParser.CWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def SIGMA11(self):
            return self.getToken(AmberMRParser.SIGMA11, 0)

        def SIGMA12(self):
            return self.getToken(AmberMRParser.SIGMA12, 0)

        def SIGMA13(self):
            return self.getToken(AmberMRParser.SIGMA13, 0)

        def SIGMA22(self):
            return self.getToken(AmberMRParser.SIGMA22, 0)

        def SIGMA23(self):
            return self.getToken(AmberMRParser.SIGMA23, 0)

        def FIELD(self):
            return self.getToken(AmberMRParser.FIELD, 0)

        def CCUT(self):
            return self.getToken(AmberMRParser.CCUT, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = AmberMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_csa_statement)
        self._la = 0 # Token type
        try:
            self.state = 812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NCSA, AmberMRParser.DATASETC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 786
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.NCSA or _la==AmberMRParser.DATASETC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 787
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 788
                self.match(AmberMRParser.Integer)
                self.state = 789
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.ICSA, AmberMRParser.JCSA, AmberMRParser.KCSA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 790
                _la = self._input.LA(1)
                if not(((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & ((1 << (AmberMRParser.ICSA - 121)) | (1 << (AmberMRParser.JCSA - 121)) | (1 << (AmberMRParser.KCSA - 121)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 791
                self.match(AmberMRParser.L_paren_IP)
                self.state = 792
                self.match(AmberMRParser.Decimal)
                self.state = 793
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 794
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 795
                self.match(AmberMRParser.Integer)
                self.state = 796
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.COBSL, AmberMRParser.COBSU]:
                self.enterOuterAlt(localctx, 3)
                self.state = 797
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.COBSL or _la==AmberMRParser.COBSU):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 798
                self.match(AmberMRParser.L_paren_RP)
                self.state = 799
                self.match(AmberMRParser.Decimal)
                self.state = 800
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 801
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 802
                self.match(AmberMRParser.Real)
                self.state = 803
                self.match(AmberMRParser.Comma)
                pass
            elif token in [AmberMRParser.CWT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 804
                self.match(AmberMRParser.CWT)
                self.state = 805
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 806
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 807
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.FIELD, AmberMRParser.SIGMA11, AmberMRParser.SIGMA12, AmberMRParser.SIGMA13, AmberMRParser.SIGMA22, AmberMRParser.SIGMA23, AmberMRParser.CCUT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 808
                _la = self._input.LA(1)
                if not(((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (AmberMRParser.FIELD - 128)) | (1 << (AmberMRParser.SIGMA11 - 128)) | (1 << (AmberMRParser.SIGMA12 - 128)) | (1 << (AmberMRParser.SIGMA13 - 128)) | (1 << (AmberMRParser.SIGMA22 - 128)) | (1 << (AmberMRParser.SIGMA23 - 128)) | (1 << (AmberMRParser.CCUT - 128)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 809
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 810
                self.match(AmberMRParser.Real)
                self.state = 811
                self.match(AmberMRParser.Comma)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTANCE_F(self):
            return self.getToken(AmberMRParser.DISTANCE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self):
            return self.getToken(AmberMRParser.Comma_F, 0)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_distance_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_rst_func_call" ):
                listener.enterDistance_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_rst_func_call" ):
                listener.exitDistance_rst_func_call(self)




    def distance_rst_func_call(self):

        localctx = AmberMRParser.Distance_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_distance_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 841
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.match(AmberMRParser.DISTANCE_F)
                self.state = 815
                self.match(AmberMRParser.L_paren_F)
                self.state = 816
                self.restraint_func_expr()
                self.state = 818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 817
                    self.match(AmberMRParser.Comma_F)


                self.state = 820
                self.restraint_func_expr()
                self.state = 821
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.match(AmberMRParser.DISTANCE_F)
                self.state = 824
                self.match(AmberMRParser.L_brace_F)
                self.state = 825
                self.restraint_func_expr()
                self.state = 827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 826
                    self.match(AmberMRParser.Comma_F)


                self.state = 829
                self.restraint_func_expr()
                self.state = 830
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 832
                self.match(AmberMRParser.DISTANCE_F)
                self.state = 833
                self.match(AmberMRParser.L_brakt_F)
                self.state = 834
                self.restraint_func_expr()
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 835
                    self.match(AmberMRParser.Comma_F)


                self.state = 838
                self.restraint_func_expr()
                self.state = 839
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANGLE_F(self):
            return self.getToken(AmberMRParser.ANGLE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_angle_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_rst_func_call" ):
                listener.enterAngle_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_rst_func_call" ):
                listener.exitAngle_rst_func_call(self)




    def angle_rst_func_call(self):

        localctx = AmberMRParser.Angle_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_angle_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 882
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 843
                self.match(AmberMRParser.ANGLE_F)
                self.state = 844
                self.match(AmberMRParser.L_paren_F)
                self.state = 845
                self.restraint_func_expr()
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 846
                    self.match(AmberMRParser.Comma_F)


                self.state = 849
                self.restraint_func_expr()
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 850
                    self.match(AmberMRParser.Comma_F)


                self.state = 853
                self.restraint_func_expr()
                self.state = 854
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 856
                self.match(AmberMRParser.ANGLE_F)
                self.state = 857
                self.match(AmberMRParser.L_brace_F)
                self.state = 858
                self.restraint_func_expr()
                self.state = 860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 859
                    self.match(AmberMRParser.Comma_F)


                self.state = 862
                self.restraint_func_expr()
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 863
                    self.match(AmberMRParser.Comma_F)


                self.state = 866
                self.restraint_func_expr()
                self.state = 867
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 869
                self.match(AmberMRParser.ANGLE_F)
                self.state = 870
                self.match(AmberMRParser.L_brakt_F)
                self.state = 871
                self.restraint_func_expr()
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 872
                    self.match(AmberMRParser.Comma_F)


                self.state = 875
                self.restraint_func_expr()
                self.state = 877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 876
                    self.match(AmberMRParser.Comma_F)


                self.state = 879
                self.restraint_func_expr()
                self.state = 880
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TORSION_F(self):
            return self.getToken(AmberMRParser.TORSION_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_torsion_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_rst_func_call" ):
                listener.enterTorsion_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_rst_func_call" ):
                listener.exitTorsion_rst_func_call(self)




    def torsion_rst_func_call(self):

        localctx = AmberMRParser.Torsion_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_torsion_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 935
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 884
                self.match(AmberMRParser.TORSION_F)
                self.state = 885
                self.match(AmberMRParser.L_paren_F)
                self.state = 886
                self.restraint_func_expr()
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 887
                    self.match(AmberMRParser.Comma_F)


                self.state = 890
                self.restraint_func_expr()
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 891
                    self.match(AmberMRParser.Comma_F)


                self.state = 894
                self.restraint_func_expr()
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 895
                    self.match(AmberMRParser.Comma_F)


                self.state = 898
                self.restraint_func_expr()
                self.state = 899
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 901
                self.match(AmberMRParser.TORSION_F)
                self.state = 902
                self.match(AmberMRParser.L_brace_F)
                self.state = 903
                self.restraint_func_expr()
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 904
                    self.match(AmberMRParser.Comma_F)


                self.state = 907
                self.restraint_func_expr()
                self.state = 909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 908
                    self.match(AmberMRParser.Comma_F)


                self.state = 911
                self.restraint_func_expr()
                self.state = 913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 912
                    self.match(AmberMRParser.Comma_F)


                self.state = 915
                self.restraint_func_expr()
                self.state = 916
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 918
                self.match(AmberMRParser.TORSION_F)
                self.state = 919
                self.match(AmberMRParser.L_brakt_F)
                self.state = 920
                self.restraint_func_expr()
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 921
                    self.match(AmberMRParser.Comma_F)


                self.state = 924
                self.restraint_func_expr()
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 925
                    self.match(AmberMRParser.Comma_F)


                self.state = 928
                self.restraint_func_expr()
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 929
                    self.match(AmberMRParser.Comma_F)


                self.state = 932
                self.restraint_func_expr()
                self.state = 933
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coordinate2_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COORDINATE_F(self):
            return self.getToken(AmberMRParser.COORDINATE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def distance_rst_func_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Distance_rst_func_callContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Distance_rst_func_callContext,i)


        def Real_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Real_F)
            else:
                return self.getToken(AmberMRParser.Real_F, i)

        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_coordinate2_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinate2_rst_func_call" ):
                listener.enterCoordinate2_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinate2_rst_func_call" ):
                listener.exitCoordinate2_rst_func_call(self)




    def coordinate2_rst_func_call(self):

        localctx = AmberMRParser.Coordinate2_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coordinate2_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 937
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 938
                self.match(AmberMRParser.L_paren_F)
                self.state = 939
                self.distance_rst_func_call()
                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 940
                    self.match(AmberMRParser.Comma_F)


                self.state = 943
                self.match(AmberMRParser.Real_F)
                self.state = 945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 944
                    self.match(AmberMRParser.Comma_F)


                self.state = 947
                self.distance_rst_func_call()
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 948
                    self.match(AmberMRParser.Comma_F)


                self.state = 951
                self.match(AmberMRParser.Real_F)
                self.state = 952
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 954
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 955
                self.match(AmberMRParser.L_brace_F)
                self.state = 956
                self.distance_rst_func_call()
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 957
                    self.match(AmberMRParser.Comma_F)


                self.state = 960
                self.match(AmberMRParser.Real_F)
                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 961
                    self.match(AmberMRParser.Comma_F)


                self.state = 964
                self.distance_rst_func_call()
                self.state = 966
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 965
                    self.match(AmberMRParser.Comma_F)


                self.state = 968
                self.match(AmberMRParser.Real_F)
                self.state = 969
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 971
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 972
                self.match(AmberMRParser.L_brakt_F)
                self.state = 973
                self.distance_rst_func_call()
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 974
                    self.match(AmberMRParser.Comma_F)


                self.state = 977
                self.match(AmberMRParser.Real_F)
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 978
                    self.match(AmberMRParser.Comma_F)


                self.state = 981
                self.distance_rst_func_call()
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 982
                    self.match(AmberMRParser.Comma_F)


                self.state = 985
                self.match(AmberMRParser.Real_F)
                self.state = 986
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coordinate3_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COORDINATE_F(self):
            return self.getToken(AmberMRParser.COORDINATE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def distance_rst_func_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Distance_rst_func_callContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Distance_rst_func_callContext,i)


        def Real_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Real_F)
            else:
                return self.getToken(AmberMRParser.Real_F, i)

        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_coordinate3_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinate3_rst_func_call" ):
                listener.enterCoordinate3_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinate3_rst_func_call" ):
                listener.exitCoordinate3_rst_func_call(self)




    def coordinate3_rst_func_call(self):

        localctx = AmberMRParser.Coordinate3_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_coordinate3_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1065
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 990
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 991
                self.match(AmberMRParser.L_paren_F)
                self.state = 992
                self.distance_rst_func_call()
                self.state = 994
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 993
                    self.match(AmberMRParser.Comma_F)


                self.state = 996
                self.match(AmberMRParser.Real_F)
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 997
                    self.match(AmberMRParser.Comma_F)


                self.state = 1000
                self.distance_rst_func_call()
                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1001
                    self.match(AmberMRParser.Comma_F)


                self.state = 1004
                self.match(AmberMRParser.Real_F)
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1005
                    self.match(AmberMRParser.Comma_F)


                self.state = 1008
                self.distance_rst_func_call()
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1009
                    self.match(AmberMRParser.Comma_F)


                self.state = 1012
                self.match(AmberMRParser.Real_F)
                self.state = 1013
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 1016
                self.match(AmberMRParser.L_brace_F)
                self.state = 1017
                self.distance_rst_func_call()
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1018
                    self.match(AmberMRParser.Comma_F)


                self.state = 1021
                self.match(AmberMRParser.Real_F)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1022
                    self.match(AmberMRParser.Comma_F)


                self.state = 1025
                self.distance_rst_func_call()
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1026
                    self.match(AmberMRParser.Comma_F)


                self.state = 1029
                self.match(AmberMRParser.Real_F)
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1030
                    self.match(AmberMRParser.Comma_F)


                self.state = 1033
                self.distance_rst_func_call()
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1034
                    self.match(AmberMRParser.Comma_F)


                self.state = 1037
                self.match(AmberMRParser.Real_F)
                self.state = 1038
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1040
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 1041
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1042
                self.distance_rst_func_call()
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1043
                    self.match(AmberMRParser.Comma_F)


                self.state = 1046
                self.match(AmberMRParser.Real_F)
                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1047
                    self.match(AmberMRParser.Comma_F)


                self.state = 1050
                self.distance_rst_func_call()
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1051
                    self.match(AmberMRParser.Comma_F)


                self.state = 1054
                self.match(AmberMRParser.Real_F)
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1055
                    self.match(AmberMRParser.Comma_F)


                self.state = 1058
                self.distance_rst_func_call()
                self.state = 1060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1059
                    self.match(AmberMRParser.Comma_F)


                self.state = 1062
                self.match(AmberMRParser.Real_F)
                self.state = 1063
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coordinate4_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COORDINATE_F(self):
            return self.getToken(AmberMRParser.COORDINATE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def distance_rst_func_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Distance_rst_func_callContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Distance_rst_func_callContext,i)


        def Real_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Real_F)
            else:
                return self.getToken(AmberMRParser.Real_F, i)

        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_coordinate4_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinate4_rst_func_call" ):
                listener.enterCoordinate4_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinate4_rst_func_call" ):
                listener.exitCoordinate4_rst_func_call(self)




    def coordinate4_rst_func_call(self):

        localctx = AmberMRParser.Coordinate4_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_coordinate4_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1166
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1067
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 1068
                self.match(AmberMRParser.L_paren_F)
                self.state = 1069
                self.distance_rst_func_call()
                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1070
                    self.match(AmberMRParser.Comma_F)


                self.state = 1073
                self.match(AmberMRParser.Real_F)
                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1074
                    self.match(AmberMRParser.Comma_F)


                self.state = 1077
                self.distance_rst_func_call()
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1078
                    self.match(AmberMRParser.Comma_F)


                self.state = 1081
                self.match(AmberMRParser.Real_F)
                self.state = 1083
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1082
                    self.match(AmberMRParser.Comma_F)


                self.state = 1085
                self.distance_rst_func_call()
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1086
                    self.match(AmberMRParser.Comma_F)


                self.state = 1089
                self.match(AmberMRParser.Real_F)
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1090
                    self.match(AmberMRParser.Comma_F)


                self.state = 1093
                self.distance_rst_func_call()
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1094
                    self.match(AmberMRParser.Comma_F)


                self.state = 1097
                self.match(AmberMRParser.Real_F)
                self.state = 1098
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1100
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 1101
                self.match(AmberMRParser.L_brace_F)
                self.state = 1102
                self.distance_rst_func_call()
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1103
                    self.match(AmberMRParser.Comma_F)


                self.state = 1106
                self.match(AmberMRParser.Real_F)
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1107
                    self.match(AmberMRParser.Comma_F)


                self.state = 1110
                self.distance_rst_func_call()
                self.state = 1112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1111
                    self.match(AmberMRParser.Comma_F)


                self.state = 1114
                self.match(AmberMRParser.Real_F)
                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1115
                    self.match(AmberMRParser.Comma_F)


                self.state = 1118
                self.distance_rst_func_call()
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1119
                    self.match(AmberMRParser.Comma_F)


                self.state = 1122
                self.match(AmberMRParser.Real_F)
                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1123
                    self.match(AmberMRParser.Comma_F)


                self.state = 1126
                self.distance_rst_func_call()
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1127
                    self.match(AmberMRParser.Comma_F)


                self.state = 1130
                self.match(AmberMRParser.Real_F)
                self.state = 1131
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1133
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 1134
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1135
                self.distance_rst_func_call()
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1136
                    self.match(AmberMRParser.Comma_F)


                self.state = 1139
                self.match(AmberMRParser.Real_F)
                self.state = 1141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1140
                    self.match(AmberMRParser.Comma_F)


                self.state = 1143
                self.distance_rst_func_call()
                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1144
                    self.match(AmberMRParser.Comma_F)


                self.state = 1147
                self.match(AmberMRParser.Real_F)
                self.state = 1149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1148
                    self.match(AmberMRParser.Comma_F)


                self.state = 1151
                self.distance_rst_func_call()
                self.state = 1153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1152
                    self.match(AmberMRParser.Comma_F)


                self.state = 1155
                self.match(AmberMRParser.Real_F)
                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1156
                    self.match(AmberMRParser.Comma_F)


                self.state = 1159
                self.distance_rst_func_call()
                self.state = 1161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1160
                    self.match(AmberMRParser.Comma_F)


                self.state = 1163
                self.match(AmberMRParser.Real_F)
                self.state = 1164
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restraint_func_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int_F(self):
            return self.getToken(AmberMRParser.Int_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def Ambmask_F(self):
            return self.getToken(AmberMRParser.Ambmask_F, 0)

        def plane_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Plane_rst_func_callContext,0)


        def com_rst_fun_call(self):
            return self.getTypedRuleContext(AmberMRParser.Com_rst_fun_callContext,0)


        def getRuleIndex(self):
            return AmberMRParser.RULE_restraint_func_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestraint_func_expr" ):
                listener.enterRestraint_func_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestraint_func_expr" ):
                listener.exitRestraint_func_expr(self)




    def restraint_func_expr(self):

        localctx = AmberMRParser.Restraint_func_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_restraint_func_expr)
        try:
            self.state = 1190
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1168
                self.match(AmberMRParser.Int_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1169
                self.match(AmberMRParser.L_paren_F)
                self.state = 1170
                self.match(AmberMRParser.Int_F)
                self.state = 1171
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1172
                self.match(AmberMRParser.L_brace_F)
                self.state = 1173
                self.match(AmberMRParser.Int_F)
                self.state = 1174
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1175
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1176
                self.match(AmberMRParser.Int_F)
                self.state = 1177
                self.match(AmberMRParser.R_brakt_F)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1178
                self.match(AmberMRParser.Ambmask_F)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1179
                self.match(AmberMRParser.L_paren_F)
                self.state = 1180
                self.match(AmberMRParser.Ambmask_F)
                self.state = 1181
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1182
                self.match(AmberMRParser.L_brace_F)
                self.state = 1183
                self.match(AmberMRParser.Ambmask_F)
                self.state = 1184
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1185
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1186
                self.match(AmberMRParser.Ambmask_F)
                self.state = 1187
                self.match(AmberMRParser.R_brakt_F)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1188
                self.plane_rst_func_call()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1189
                self.com_rst_fun_call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLANE_F(self):
            return self.getToken(AmberMRParser.PLANE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_plane_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_rst_func_call" ):
                listener.enterPlane_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_rst_func_call" ):
                listener.exitPlane_rst_func_call(self)




    def plane_rst_func_call(self):

        localctx = AmberMRParser.Plane_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_plane_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1243
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1192
                self.match(AmberMRParser.PLANE_F)
                self.state = 1193
                self.match(AmberMRParser.L_paren_F)
                self.state = 1194
                self.restraint_func_expr()
                self.state = 1196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1195
                    self.match(AmberMRParser.Comma_F)


                self.state = 1198
                self.restraint_func_expr()
                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1199
                    self.match(AmberMRParser.Comma_F)


                self.state = 1202
                self.restraint_func_expr()
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1203
                    self.match(AmberMRParser.Comma_F)


                self.state = 1206
                self.restraint_func_expr()
                self.state = 1207
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1209
                self.match(AmberMRParser.PLANE_F)
                self.state = 1210
                self.match(AmberMRParser.L_brace_F)
                self.state = 1211
                self.restraint_func_expr()
                self.state = 1213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1212
                    self.match(AmberMRParser.Comma_F)


                self.state = 1215
                self.restraint_func_expr()
                self.state = 1217
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1216
                    self.match(AmberMRParser.Comma_F)


                self.state = 1219
                self.restraint_func_expr()
                self.state = 1221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1220
                    self.match(AmberMRParser.Comma_F)


                self.state = 1223
                self.restraint_func_expr()
                self.state = 1224
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1226
                self.match(AmberMRParser.PLANE_F)
                self.state = 1227
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1228
                self.restraint_func_expr()
                self.state = 1230
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1229
                    self.match(AmberMRParser.Comma_F)


                self.state = 1232
                self.restraint_func_expr()
                self.state = 1234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1233
                    self.match(AmberMRParser.Comma_F)


                self.state = 1236
                self.restraint_func_expr()
                self.state = 1238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1237
                    self.match(AmberMRParser.Comma_F)


                self.state = 1240
                self.restraint_func_expr()
                self.state = 1241
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Com_rst_fun_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COM_F(self):
            return self.getToken(AmberMRParser.COM_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_com_rst_fun_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCom_rst_fun_call" ):
                listener.enterCom_rst_fun_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCom_rst_fun_call" ):
                listener.exitCom_rst_fun_call(self)




    def com_rst_fun_call(self):

        localctx = AmberMRParser.Com_rst_fun_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_com_rst_fun_call)
        self._la = 0 # Token type
        try:
            self.state = 1287
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1245
                self.match(AmberMRParser.COM_F)
                self.state = 1246
                self.match(AmberMRParser.L_paren_F)
                self.state = 1247
                self.restraint_func_expr()
                self.state = 1254
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==AmberMRParser.PLANE_F or _la==AmberMRParser.COM_F or ((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & ((1 << (AmberMRParser.Int_F - 191)) | (1 << (AmberMRParser.Ambmask_F - 191)) | (1 << (AmberMRParser.Comma_F - 191)) | (1 << (AmberMRParser.L_paren_F - 191)) | (1 << (AmberMRParser.L_brace_F - 191)) | (1 << (AmberMRParser.L_brakt_F - 191)))) != 0):
                    self.state = 1249
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==AmberMRParser.Comma_F:
                        self.state = 1248
                        self.match(AmberMRParser.Comma_F)


                    self.state = 1251
                    self.restraint_func_expr()
                    self.state = 1256
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1257
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1259
                self.match(AmberMRParser.COM_F)
                self.state = 1260
                self.match(AmberMRParser.L_brace_F)
                self.state = 1261
                self.restraint_func_expr()
                self.state = 1268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==AmberMRParser.PLANE_F or _la==AmberMRParser.COM_F or ((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & ((1 << (AmberMRParser.Int_F - 191)) | (1 << (AmberMRParser.Ambmask_F - 191)) | (1 << (AmberMRParser.Comma_F - 191)) | (1 << (AmberMRParser.L_paren_F - 191)) | (1 << (AmberMRParser.L_brace_F - 191)) | (1 << (AmberMRParser.L_brakt_F - 191)))) != 0):
                    self.state = 1263
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==AmberMRParser.Comma_F:
                        self.state = 1262
                        self.match(AmberMRParser.Comma_F)


                    self.state = 1265
                    self.restraint_func_expr()
                    self.state = 1270
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1271
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1273
                self.match(AmberMRParser.COM_F)
                self.state = 1274
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1275
                self.restraint_func_expr()
                self.state = 1282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==AmberMRParser.PLANE_F or _la==AmberMRParser.COM_F or ((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & ((1 << (AmberMRParser.Int_F - 191)) | (1 << (AmberMRParser.Ambmask_F - 191)) | (1 << (AmberMRParser.Comma_F - 191)) | (1 << (AmberMRParser.L_paren_F - 191)) | (1 << (AmberMRParser.L_brace_F - 191)) | (1 << (AmberMRParser.L_brakt_F - 191)))) != 0):
                    self.state = 1277
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==AmberMRParser.Comma_F:
                        self.state = 1276
                        self.match(AmberMRParser.Comma_F)


                    self.state = 1279
                    self.restraint_func_expr()
                    self.state = 1284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1285
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





