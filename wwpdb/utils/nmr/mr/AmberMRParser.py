# Generated from AmberMRParser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00cc")
        buf.write("\u05a4\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \3\2\7\2B\n\2\f\2\16\2E\13\2\3\2\7\2H")
        buf.write("\n\2\f\2\16\2K\13\2\3\2\7\2N\n\2\f\2\16\2Q\13\2\3\2\7")
        buf.write("\2T\n\2\f\2\16\2W\13\2\3\2\7\2Z\n\2\f\2\16\2]\13\2\3\2")
        buf.write("\7\2`\n\2\f\2\16\2c\13\2\3\2\7\2f\n\2\f\2\16\2i\13\2\3")
        buf.write("\2\3\2\3\3\3\3\6\3o\n\3\r\3\16\3p\3\3\3\3\3\4\3\4\3\4")
        buf.write("\3\4\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3")
        buf.write("\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n\7\n\u008e\n\n\f\n\16")
        buf.write("\n\u0091\13\n\3\n\7\n\u0094\n\n\f\n\16\n\u0097\13\n\3")
        buf.write("\n\7\n\u009a\n\n\f\n\16\n\u009d\13\n\3\n\7\n\u00a0\n\n")
        buf.write("\f\n\16\n\u00a3\13\n\3\n\7\n\u00a6\n\n\f\n\16\n\u00a9")
        buf.write("\13\n\3\n\7\n\u00ac\n\n\f\n\16\n\u00af\13\n\3\n\7\n\u00b2")
        buf.write("\n\n\f\n\16\n\u00b5\13\n\3\n\7\n\u00b8\n\n\f\n\16\n\u00bb")
        buf.write("\13\n\5\n\u00bd\n\n\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u00cd\n\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5\13\u00d7\n\13")
        buf.write("\3\13\3\13\3\13\3\13\5\13\u00dd\n\13\3\13\3\13\3\13\3")
        buf.write("\13\5\13\u00e3\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\13\5\13\u00f0\n\13\3\13\3\13\3\13\3")
        buf.write("\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13")
        buf.write("\5\13\u0100\n\13\3\13\3\13\3\13\3\13\3\13\3\13\3\13\5")
        buf.write("\13\u0109\n\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\3\f\3\f\5\f\u0119\n\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write("\3\f\3\f\5\f\u0123\n\f\3\f\3\f\3\f\3\f\5\f\u0129\n\f\3")
        buf.write("\f\3\f\3\f\3\f\5\f\u012f\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\5\f\u0138\n\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\3\f\3\f\3\f\5\f\u0148\n\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\f\5\f\u0151\n\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\3\r\3\r\5\r\u0161\n\r\3\r\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\r\5\r\u016b\n\r\3\r\3\r\3\r\3\r\5\r\u0171")
        buf.write("\n\r\3\r\3\r\3\r\3\r\5\r\u0177\n\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\5\r\u0180\n\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\3\r\3\r\3\r\5\r\u0190\n\r\3\r\3\r\3\r\3\r")
        buf.write("\3\r\3\r\3\r\5\r\u0199\n\r\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write("\5\16\u01ab\n\16\3\16\3\16\3\16\3\16\5\16\u01b1\n\16\3")
        buf.write("\16\3\16\3\16\3\16\5\16\u01b7\n\16\3\16\3\16\3\16\3\16")
        buf.write("\3\16\3\16\3\16\5\16\u01c0\n\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16")
        buf.write("\u01d0\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u01d9")
        buf.write("\n\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u01eb\n\17\3\17\3")
        buf.write("\17\3\17\3\17\5\17\u01f1\n\17\3\17\3\17\3\17\3\17\5\17")
        buf.write("\u01f7\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0200")
        buf.write("\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\5\17\u0210\n\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\5\17\u0219\n\17\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20")
        buf.write("\u0229\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5")
        buf.write("\20\u0233\n\20\3\20\3\20\3\20\3\20\5\20\u0239\n\20\3\20")
        buf.write("\3\20\3\20\3\20\5\20\u023f\n\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\5\20\u0248\n\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0258")
        buf.write("\n\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0261\n")
        buf.write("\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\5\21\u0271\n\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\5\21\u027b\n\21\3\21\3\21\3\21")
        buf.write("\3\21\5\21\u0281\n\21\3\21\3\21\3\21\3\21\5\21\u0287\n")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u0290\n\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\5\21\u02a0\n\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\5\21\u02a9\n\21\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u02b9")
        buf.write("\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u02c3")
        buf.write("\n\22\3\22\3\22\3\22\3\22\5\22\u02c9\n\22\3\22\3\22\3")
        buf.write("\22\3\22\5\22\u02cf\n\22\3\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\5\22\u02d8\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u02e8\n\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u02f1\n\22\3")
        buf.write("\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u0311\n")
        buf.write("\23\3\23\3\23\3\23\3\23\5\23\u0317\n\23\5\23\u0319\n\23")
        buf.write("\3\24\3\24\3\24\3\24\5\24\u031f\n\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\5\24\u0331\n\24\3\24\3\24\3\24\3\24\3\24\3")
        buf.write("\24\3\24\5\24\u033a\n\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\24\5\24\u034e\n\24\5\24\u0350\n\24\3\25\3\25\3\25\3")
        buf.write("\25\5\25\u0356\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25")
        buf.write("\5\25\u036a\n\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\5\25\u0377\n\25\5\25\u0379\n\25\3\26")
        buf.write("\3\26\3\26\3\26\5\26\u037f\n\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\5\26\u0388\n\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\5\26\u0391\n\26\3\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\5\26\u039b\n\26\3\26\3\26\3\26\3\26\5\26")
        buf.write("\u03a1\n\26\5\26\u03a3\n\26\3\27\3\27\3\27\3\27\5\27\u03a9")
        buf.write("\n\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u03b2\n")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u03bb\n\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u03c5\n")
        buf.write("\27\5\27\u03c7\n\27\3\30\3\30\3\30\3\30\5\30\u03cd\n\30")
        buf.write("\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u03d6\n\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u03df\n\30\3\30")
        buf.write("\3\30\3\30\5\30\u03e4\n\30\3\31\3\31\3\31\3\31\5\31\u03ea")
        buf.write("\n\31\3\31\3\31\5\31\u03ee\n\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\5\31\u03f7\n\31\3\31\3\31\5\31\u03fb\n\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0404\n\31\3")
        buf.write("\31\3\31\5\31\u0408\n\31\3\31\3\31\3\31\5\31\u040d\n\31")
        buf.write("\3\32\3\32\3\32\3\32\5\32\u0413\n\32\3\32\3\32\5\32\u0417")
        buf.write("\n\32\3\32\3\32\5\32\u041b\n\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\5\32\u0424\n\32\3\32\3\32\5\32\u0428\n\32")
        buf.write("\3\32\3\32\5\32\u042c\n\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\5\32\u0435\n\32\3\32\3\32\5\32\u0439\n\32\3\32")
        buf.write("\3\32\5\32\u043d\n\32\3\32\3\32\3\32\5\32\u0442\n\32\3")
        buf.write("\33\3\33\3\33\3\33\5\33\u0448\n\33\3\33\3\33\5\33\u044c")
        buf.write("\n\33\3\33\3\33\5\33\u0450\n\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\5\33\u0459\n\33\3\33\3\33\5\33\u045d\n\33")
        buf.write("\3\33\3\33\5\33\u0461\n\33\3\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\5\33\u046a\n\33\3\33\3\33\5\33\u046e\n\33\3\33")
        buf.write("\3\33\5\33\u0472\n\33\3\33\3\33\3\33\5\33\u0477\n\33\3")
        buf.write("\34\3\34\3\34\3\34\5\34\u047d\n\34\3\34\3\34\5\34\u0481")
        buf.write("\n\34\3\34\3\34\5\34\u0485\n\34\3\34\3\34\5\34\u0489\n")
        buf.write("\34\3\34\3\34\5\34\u048d\n\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\5\34\u0496\n\34\3\34\3\34\5\34\u049a\n\34\3")
        buf.write("\34\3\34\5\34\u049e\n\34\3\34\3\34\5\34\u04a2\n\34\3\34")
        buf.write("\3\34\5\34\u04a6\n\34\3\34\3\34\3\34\3\34\3\34\3\34\3")
        buf.write("\34\5\34\u04af\n\34\3\34\3\34\5\34\u04b3\n\34\3\34\3\34")
        buf.write("\5\34\u04b7\n\34\3\34\3\34\5\34\u04bb\n\34\3\34\3\34\5")
        buf.write("\34\u04bf\n\34\3\34\3\34\3\34\5\34\u04c4\n\34\3\35\3\35")
        buf.write("\3\35\3\35\5\35\u04ca\n\35\3\35\3\35\5\35\u04ce\n\35\3")
        buf.write("\35\3\35\5\35\u04d2\n\35\3\35\3\35\5\35\u04d6\n\35\3\35")
        buf.write("\3\35\5\35\u04da\n\35\3\35\3\35\5\35\u04de\n\35\3\35\3")
        buf.write("\35\5\35\u04e2\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write("\5\35\u04eb\n\35\3\35\3\35\5\35\u04ef\n\35\3\35\3\35\5")
        buf.write("\35\u04f3\n\35\3\35\3\35\5\35\u04f7\n\35\3\35\3\35\5\35")
        buf.write("\u04fb\n\35\3\35\3\35\5\35\u04ff\n\35\3\35\3\35\5\35\u0503")
        buf.write("\n\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u050c\n")
        buf.write("\35\3\35\3\35\5\35\u0510\n\35\3\35\3\35\5\35\u0514\n\35")
        buf.write("\3\35\3\35\5\35\u0518\n\35\3\35\3\35\5\35\u051c\n\35\3")
        buf.write("\35\3\35\5\35\u0520\n\35\3\35\3\35\5\35\u0524\n\35\3\35")
        buf.write("\3\35\3\35\5\35\u0529\n\35\3\36\3\36\3\36\3\36\3\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0541\n\36\3\37\3")
        buf.write("\37\3\37\3\37\5\37\u0547\n\37\3\37\3\37\5\37\u054b\n\37")
        buf.write("\3\37\3\37\5\37\u054f\n\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\5\37\u0558\n\37\3\37\3\37\5\37\u055c\n\37\3\37")
        buf.write("\3\37\5\37\u0560\n\37\3\37\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\5\37\u0569\n\37\3\37\3\37\5\37\u056d\n\37\3\37\3\37")
        buf.write("\5\37\u0571\n\37\3\37\3\37\3\37\5\37\u0576\n\37\3 \3 ")
        buf.write("\3 \3 \5 \u057c\n \3 \7 \u057f\n \f \16 \u0582\13 \3 ")
        buf.write("\3 \3 \3 \3 \3 \5 \u058a\n \3 \7 \u058d\n \f \16 \u0590")
        buf.write("\13 \3 \3 \3 \3 \3 \3 \5 \u0598\n \3 \7 \u059b\n \f \16")
        buf.write(" \u059e\13 \3 \3 \5 \u05a2\n \3 \2\2!\2\4\6\b\n\f\16\20")
        buf.write("\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>\2\61\4")
        buf.write("\2\5\5\"#\3\2\u00aa\u00ab\3\2\u00b1\u00b2\4\2\b\b,-\7")
        buf.write("\2\t\t\f\r\20\20++\64\65\5\2\n\13\16\17\668\3\2\21 \3")
        buf.write("\2\"#\4\2\5\5\"$\4\2\b\b,.\6\2\t\t\f\f\20\20\65\65\5\2")
        buf.write("\n\13\16\17\66\67\3\2\"$\4\2\5\5\"%\4\2\6\6!!\4\2\b\b")
        buf.write(",/\3\2\"%\4\2\5\5\"&\4\2\b\b,\60\5\2\t\t\f\f\20\20\3\2")
        buf.write("\"&\4\2\5\5\")\4\2\b\b,\63\3\2\")\6\2\t\t\f\r\20\20\65")
        buf.write("\65\4\2\5\5\"\'\4\2\b\b,\61\3\2\"\'\3\2BC\3\2DF\4\2GK")
        buf.write("MM\5\2OOXXZ[\4\2PPTT\4\2SSVW\4\2XX]]\4\2TTff\4\2UU_c\4")
        buf.write("\2WWee\4\2hhno\3\2ij\3\2kl\4\2mmuu\4\2ptvw\4\2zz\u0081")
        buf.write("\u0081\3\2{}\3\2~\177\3\2\u0082\u0088\2\u06aa\2C\3\2\2")
        buf.write("\2\4l\3\2\2\2\6t\3\2\2\2\bx\3\2\2\2\n|\3\2\2\2\f\u0080")
        buf.write("\3\2\2\2\16\u0084\3\2\2\2\20\u0088\3\2\2\2\22\u00bc\3")
        buf.write("\2\2\2\24\u0108\3\2\2\2\26\u0150\3\2\2\2\30\u0198\3\2")
        buf.write("\2\2\32\u01d8\3\2\2\2\34\u0218\3\2\2\2\36\u0260\3\2\2")
        buf.write("\2 \u02a8\3\2\2\2\"\u02f0\3\2\2\2$\u0318\3\2\2\2&\u034f")
        buf.write("\3\2\2\2(\u0378\3\2\2\2*\u03a2\3\2\2\2,\u03c6\3\2\2\2")
        buf.write(".\u03e3\3\2\2\2\60\u040c\3\2\2\2\62\u0441\3\2\2\2\64\u0476")
        buf.write("\3\2\2\2\66\u04c3\3\2\2\28\u0528\3\2\2\2:\u0540\3\2\2")
        buf.write("\2<\u0575\3\2\2\2>\u05a1\3\2\2\2@B\5\4\3\2A@\3\2\2\2B")
        buf.write("E\3\2\2\2CA\3\2\2\2CD\3\2\2\2DI\3\2\2\2EC\3\2\2\2FH\5")
        buf.write("\6\4\2GF\3\2\2\2HK\3\2\2\2IG\3\2\2\2IJ\3\2\2\2JO\3\2\2")
        buf.write("\2KI\3\2\2\2LN\5\b\5\2ML\3\2\2\2NQ\3\2\2\2OM\3\2\2\2O")
        buf.write("P\3\2\2\2PU\3\2\2\2QO\3\2\2\2RT\5\n\6\2SR\3\2\2\2TW\3")
        buf.write("\2\2\2US\3\2\2\2UV\3\2\2\2V[\3\2\2\2WU\3\2\2\2XZ\5\f\7")
        buf.write("\2YX\3\2\2\2Z]\3\2\2\2[Y\3\2\2\2[\\\3\2\2\2\\a\3\2\2\2")
        buf.write("][\3\2\2\2^`\5\16\b\2_^\3\2\2\2`c\3\2\2\2a_\3\2\2\2ab")
        buf.write("\3\2\2\2bg\3\2\2\2ca\3\2\2\2df\5\20\t\2ed\3\2\2\2fi\3")
        buf.write("\2\2\2ge\3\2\2\2gh\3\2\2\2hj\3\2\2\2ig\3\2\2\2jk\7\2\2")
        buf.write("\3k\3\3\2\2\2ln\7\u008b\2\2mo\7\u0098\2\2nm\3\2\2\2op")
        buf.write("\3\2\2\2pn\3\2\2\2pq\3\2\2\2qr\3\2\2\2rs\7\u009a\2\2s")
        buf.write("\5\3\2\2\2tu\7\4\2\2uv\5\22\n\2vw\7\3\2\2w\7\3\2\2\2x")
        buf.write("y\7?\2\2yz\5$\23\2z{\7\3\2\2{\t\3\2\2\2|}\7N\2\2}~\5&")
        buf.write("\24\2~\177\7\3\2\2\177\13\3\2\2\2\u0080\u0081\7\\\2\2")
        buf.write("\u0081\u0082\5(\25\2\u0082\u0083\7\3\2\2\u0083\r\3\2\2")
        buf.write("\2\u0084\u0085\7g\2\2\u0085\u0086\5*\26\2\u0086\u0087")
        buf.write("\7\3\2\2\u0087\17\3\2\2\2\u0088\u0089\7y\2\2\u0089\u008a")
        buf.write("\5,\27\2\u008a\u008b\7\3\2\2\u008b\21\3\2\2\2\u008c\u008e")
        buf.write("\5\24\13\2\u008d\u008c\3\2\2\2\u008e\u0091\3\2\2\2\u008f")
        buf.write("\u008d\3\2\2\2\u008f\u0090\3\2\2\2\u0090\u00bd\3\2\2\2")
        buf.write("\u0091\u008f\3\2\2\2\u0092\u0094\5\26\f\2\u0093\u0092")
        buf.write("\3\2\2\2\u0094\u0097\3\2\2\2\u0095\u0093\3\2\2\2\u0095")
        buf.write("\u0096\3\2\2\2\u0096\u00bd\3\2\2\2\u0097\u0095\3\2\2\2")
        buf.write("\u0098\u009a\5\30\r\2\u0099\u0098\3\2\2\2\u009a\u009d")
        buf.write("\3\2\2\2\u009b\u0099\3\2\2\2\u009b\u009c\3\2\2\2\u009c")
        buf.write("\u00bd\3\2\2\2\u009d\u009b\3\2\2\2\u009e\u00a0\5\32\16")
        buf.write("\2\u009f\u009e\3\2\2\2\u00a0\u00a3\3\2\2\2\u00a1\u009f")
        buf.write("\3\2\2\2\u00a1\u00a2\3\2\2\2\u00a2\u00bd\3\2\2\2\u00a3")
        buf.write("\u00a1\3\2\2\2\u00a4\u00a6\5\34\17\2\u00a5\u00a4\3\2\2")
        buf.write("\2\u00a6\u00a9\3\2\2\2\u00a7\u00a5\3\2\2\2\u00a7\u00a8")
        buf.write("\3\2\2\2\u00a8\u00bd\3\2\2\2\u00a9\u00a7\3\2\2\2\u00aa")
        buf.write("\u00ac\5\36\20\2\u00ab\u00aa\3\2\2\2\u00ac\u00af\3\2\2")
        buf.write("\2\u00ad\u00ab\3\2\2\2\u00ad\u00ae\3\2\2\2\u00ae\u00bd")
        buf.write("\3\2\2\2\u00af\u00ad\3\2\2\2\u00b0\u00b2\5 \21\2\u00b1")
        buf.write("\u00b0\3\2\2\2\u00b2\u00b5\3\2\2\2\u00b3\u00b1\3\2\2\2")
        buf.write("\u00b3\u00b4\3\2\2\2\u00b4\u00bd\3\2\2\2\u00b5\u00b3\3")
        buf.write("\2\2\2\u00b6\u00b8\5\"\22\2\u00b7\u00b6\3\2\2\2\u00b8")
        buf.write("\u00bb\3\2\2\2\u00b9\u00b7\3\2\2\2\u00b9\u00ba\3\2\2\2")
        buf.write("\u00ba\u00bd\3\2\2\2\u00bb\u00b9\3\2\2\2\u00bc\u008f\3")
        buf.write("\2\2\2\u00bc\u0095\3\2\2\2\u00bc\u009b\3\2\2\2\u00bc\u00a1")
        buf.write("\3\2\2\2\u00bc\u00a7\3\2\2\2\u00bc\u00ad\3\2\2\2\u00bc")
        buf.write("\u00b3\3\2\2\2\u00bc\u00b9\3\2\2\2\u00bd\23\3\2\2\2\u00be")
        buf.write("\u00bf\t\2\2\2\u00bf\u00c0\7\u00a7\2\2\u00c0\u00c1\t\3")
        buf.write("\2\2\u00c1\u0109\7\u00a8\2\2\u00c2\u00c3\7\6\2\2\u00c3")
        buf.write("\u00c4\7\u00ae\2\2\u00c4\u00c5\t\4\2\2\u00c5\u0109\7\u00af")
        buf.write("\2\2\u00c6\u00c7\7\7\2\2\u00c7\u00c8\7\u0093\2\2\u00c8")
        buf.write("\u00c9\7\u0094\2\2\u00c9\u00ca\5.\30\2\u00ca\u00cc\7\u00cb")
        buf.write("\2\2\u00cb\u00cd\7\u0089\2\2\u00cc\u00cb\3\2\2\2\u00cc")
        buf.write("\u00cd\3\2\2\2\u00cd\u0109\3\2\2\2\u00ce\u00cf\t\5\2\2")
        buf.write("\u00cf\u00d0\7\u00b9\2\2\u00d0\u00d1\7\u00bb\2\2\u00d1")
        buf.write("\u0109\7\u00ba\2\2\u00d2\u00d3\t\6\2\2\u00d3\u00d4\7\u00a3")
        buf.write("\2\2\u00d4\u00d6\7\u00a4\2\2\u00d5\u00d7\7\u0089\2\2\u00d6")
        buf.write("\u00d5\3\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u0109\3\2\2\2")
        buf.write("\u00d8\u00d9\t\7\2\2\u00d9\u00da\7\u009b\2\2\u00da\u00dc")
        buf.write("\7\u009d\2\2\u00db\u00dd\7\u0089\2\2\u00dc\u00db\3\2\2")
        buf.write("\2\u00dc\u00dd\3\2\2\2\u00dd\u0109\3\2\2\2\u00de\u00df")
        buf.write("\t\b\2\2\u00df\u00e0\7\u009f\2\2\u00e0\u00e2\7\u00a1\2")
        buf.write("\2\u00e1\u00e3\7\u0089\2\2\u00e2\u00e1\3\2\2\2\u00e2\u00e3")
        buf.write("\3\2\2\2\u00e3\u0109\3\2\2\2\u00e4\u00e5\7*\2\2\u00e5")
        buf.write("\u00e6\7\u00b4\2\2\u00e6\u00e7\7\u00b6\2\2\u00e7\u0109")
        buf.write("\7\u00b5\2\2\u00e8\u00e9\7\5\2\2\u00e9\u00ea\7\u009c\2")
        buf.write("\2\u00ea\u00eb\7\u00bf\2\2\u00eb\u00ec\7\u00be\2\2\u00ec")
        buf.write("\u00ed\7\u009b\2\2\u00ed\u00ef\7\u009d\2\2\u00ee\u00f0")
        buf.write("\7\u0089\2\2\u00ef\u00ee\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0")
        buf.write("\u0109\3\2\2\2\u00f1\u00f2\t\t\2\2\u00f2\u00f3\7\u00a6")
        buf.write("\2\2\u00f3\u00f4\7\u00bf\2\2\u00f4\u00f5\7\u00be\2\2\u00f5")
        buf.write("\u00f6\7\u00a7\2\2\u00f6\u00f7\t\3\2\2\u00f7\u0109\7\u00a8")
        buf.write("\2\2\u00f8\u00f9\7\6\2\2\u00f9\u00fa\7\u00a0\2\2\u00fa")
        buf.write("\u00fb\7\u00bf\2\2\u00fb\u00fc\7\u00be\2\2\u00fc\u00fd")
        buf.write("\7\u009f\2\2\u00fd\u00ff\7\u00a1\2\2\u00fe\u0100\7\u0089")
        buf.write("\2\2\u00ff\u00fe\3\2\2\2\u00ff\u0100\3\2\2\2\u0100\u0109")
        buf.write("\3\2\2\2\u0101\u0102\t\5\2\2\u0102\u0103\7\u00b8\2\2\u0103")
        buf.write("\u0104\7\u00bf\2\2\u0104\u0105\7\u00be\2\2\u0105\u0106")
        buf.write("\7\u00b9\2\2\u0106\u0107\7\u00bb\2\2\u0107\u0109\7\u00ba")
        buf.write("\2\2\u0108\u00be\3\2\2\2\u0108\u00c2\3\2\2\2\u0108\u00c6")
        buf.write("\3\2\2\2\u0108\u00ce\3\2\2\2\u0108\u00d2\3\2\2\2\u0108")
        buf.write("\u00d8\3\2\2\2\u0108\u00de\3\2\2\2\u0108\u00e4\3\2\2\2")
        buf.write("\u0108\u00e8\3\2\2\2\u0108\u00f1\3\2\2\2\u0108\u00f8\3")
        buf.write("\2\2\2\u0108\u0101\3\2\2\2\u0109\25\3\2\2\2\u010a\u010b")
        buf.write("\t\n\2\2\u010b\u010c\7\u00a7\2\2\u010c\u010d\t\3\2\2\u010d")
        buf.write("\u0151\7\u00a8\2\2\u010e\u010f\7\6\2\2\u010f\u0110\7\u00ae")
        buf.write("\2\2\u0110\u0111\t\4\2\2\u0111\u0151\7\u00af\2\2\u0112")
        buf.write("\u0113\7\7\2\2\u0113\u0114\7\u0093\2\2\u0114\u0115\7\u0094")
        buf.write("\2\2\u0115\u0116\5\60\31\2\u0116\u0118\7\u00cb\2\2\u0117")
        buf.write("\u0119\7\u0089\2\2\u0118\u0117\3\2\2\2\u0118\u0119\3\2")
        buf.write("\2\2\u0119\u0151\3\2\2\2\u011a\u011b\t\13\2\2\u011b\u011c")
        buf.write("\7\u00b9\2\2\u011c\u011d\7\u00bb\2\2\u011d\u0151\7\u00ba")
        buf.write("\2\2\u011e\u011f\t\f\2\2\u011f\u0120\7\u00a3\2\2\u0120")
        buf.write("\u0122\7\u00a4\2\2\u0121\u0123\7\u0089\2\2\u0122\u0121")
        buf.write("\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0151\3\2\2\2\u0124")
        buf.write("\u0125\t\r\2\2\u0125\u0126\7\u009b\2\2\u0126\u0128\7\u009d")
        buf.write("\2\2\u0127\u0129\7\u0089\2\2\u0128\u0127\3\2\2\2\u0128")
        buf.write("\u0129\3\2\2\2\u0129\u0151\3\2\2\2\u012a\u012b\t\b\2\2")
        buf.write("\u012b\u012c\7\u009f\2\2\u012c\u012e\7\u00a1\2\2\u012d")
        buf.write("\u012f\7\u0089\2\2\u012e\u012d\3\2\2\2\u012e\u012f\3\2")
        buf.write("\2\2\u012f\u0151\3\2\2\2\u0130\u0131\7\5\2\2\u0131\u0132")
        buf.write("\7\u009c\2\2\u0132\u0133\7\u00bf\2\2\u0133\u0134\7\u00be")
        buf.write("\2\2\u0134\u0135\7\u009b\2\2\u0135\u0137\7\u009d\2\2\u0136")
        buf.write("\u0138\7\u0089\2\2\u0137\u0136\3\2\2\2\u0137\u0138\3\2")
        buf.write("\2\2\u0138\u0151\3\2\2\2\u0139\u013a\t\16\2\2\u013a\u013b")
        buf.write("\7\u00a6\2\2\u013b\u013c\7\u00bf\2\2\u013c\u013d\7\u00be")
        buf.write("\2\2\u013d\u013e\7\u00a7\2\2\u013e\u013f\t\3\2\2\u013f")
        buf.write("\u0151\7\u00a8\2\2\u0140\u0141\7\6\2\2\u0141\u0142\7\u00a0")
        buf.write("\2\2\u0142\u0143\7\u00bf\2\2\u0143\u0144\7\u00be\2\2\u0144")
        buf.write("\u0145\7\u009f\2\2\u0145\u0147\7\u00a1\2\2\u0146\u0148")
        buf.write("\7\u0089\2\2\u0147\u0146\3\2\2\2\u0147\u0148\3\2\2\2\u0148")
        buf.write("\u0151\3\2\2\2\u0149\u014a\t\13\2\2\u014a\u014b\7\u00b8")
        buf.write("\2\2\u014b\u014c\7\u00bf\2\2\u014c\u014d\7\u00be\2\2\u014d")
        buf.write("\u014e\7\u00b9\2\2\u014e\u014f\7\u00bb\2\2\u014f\u0151")
        buf.write("\7\u00ba\2\2\u0150\u010a\3\2\2\2\u0150\u010e\3\2\2\2\u0150")
        buf.write("\u0112\3\2\2\2\u0150\u011a\3\2\2\2\u0150\u011e\3\2\2\2")
        buf.write("\u0150\u0124\3\2\2\2\u0150\u012a\3\2\2\2\u0150\u0130\3")
        buf.write("\2\2\2\u0150\u0139\3\2\2\2\u0150\u0140\3\2\2\2\u0150\u0149")
        buf.write("\3\2\2\2\u0151\27\3\2\2\2\u0152\u0153\t\17\2\2\u0153\u0154")
        buf.write("\7\u00a7\2\2\u0154\u0155\t\3\2\2\u0155\u0199\7\u00a8\2")
        buf.write("\2\u0156\u0157\t\20\2\2\u0157\u0158\7\u00ae\2\2\u0158")
        buf.write("\u0159\t\4\2\2\u0159\u0199\7\u00af\2\2\u015a\u015b\7\7")
        buf.write("\2\2\u015b\u015c\7\u0093\2\2\u015c\u015d\7\u0094\2\2\u015d")
        buf.write("\u015e\5\62\32\2\u015e\u0160\7\u00cb\2\2\u015f\u0161\7")
        buf.write("\u0089\2\2\u0160\u015f\3\2\2\2\u0160\u0161\3\2\2\2\u0161")
        buf.write("\u0199\3\2\2\2\u0162\u0163\t\21\2\2\u0163\u0164\7\u00b9")
        buf.write("\2\2\u0164\u0165\7\u00bb\2\2\u0165\u0199\7\u00ba\2\2\u0166")
        buf.write("\u0167\t\f\2\2\u0167\u0168\7\u00a3\2\2\u0168\u016a\7\u00a4")
        buf.write("\2\2\u0169\u016b\7\u0089\2\2\u016a\u0169\3\2\2\2\u016a")
        buf.write("\u016b\3\2\2\2\u016b\u0199\3\2\2\2\u016c\u016d\t\r\2\2")
        buf.write("\u016d\u016e\7\u009b\2\2\u016e\u0170\7\u009d\2\2\u016f")
        buf.write("\u0171\7\u0089\2\2\u0170\u016f\3\2\2\2\u0170\u0171\3\2")
        buf.write("\2\2\u0171\u0199\3\2\2\2\u0172\u0173\t\b\2\2\u0173\u0174")
        buf.write("\7\u009f\2\2\u0174\u0176\7\u00a1\2\2\u0175\u0177\7\u0089")
        buf.write("\2\2\u0176\u0175\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0199")
        buf.write("\3\2\2\2\u0178\u0179\7\5\2\2\u0179\u017a\7\u009c\2\2\u017a")
        buf.write("\u017b\7\u00bf\2\2\u017b\u017c\7\u00be\2\2\u017c\u017d")
        buf.write("\7\u009b\2\2\u017d\u017f\7\u009d\2\2\u017e\u0180\7\u0089")
        buf.write("\2\2\u017f\u017e\3\2\2\2\u017f\u0180\3\2\2\2\u0180\u0199")
        buf.write("\3\2\2\2\u0181\u0182\t\22\2\2\u0182\u0183\7\u00a6\2\2")
        buf.write("\u0183\u0184\7\u00bf\2\2\u0184\u0185\7\u00be\2\2\u0185")
        buf.write("\u0186\7\u00a7\2\2\u0186\u0187\t\3\2\2\u0187\u0199\7\u00a8")
        buf.write("\2\2\u0188\u0189\7\6\2\2\u0189\u018a\7\u00a0\2\2\u018a")
        buf.write("\u018b\7\u00bf\2\2\u018b\u018c\7\u00be\2\2\u018c\u018d")
        buf.write("\7\u009f\2\2\u018d\u018f\7\u00a1\2\2\u018e\u0190\7\u0089")
        buf.write("\2\2\u018f\u018e\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u0199")
        buf.write("\3\2\2\2\u0191\u0192\t\21\2\2\u0192\u0193\7\u00b8\2\2")
        buf.write("\u0193\u0194\7\u00bf\2\2\u0194\u0195\7\u00be\2\2\u0195")
        buf.write("\u0196\7\u00b9\2\2\u0196\u0197\7\u00bb\2\2\u0197\u0199")
        buf.write("\7\u00ba\2\2\u0198\u0152\3\2\2\2\u0198\u0156\3\2\2\2\u0198")
        buf.write("\u015a\3\2\2\2\u0198\u0162\3\2\2\2\u0198\u0166\3\2\2\2")
        buf.write("\u0198\u016c\3\2\2\2\u0198\u0172\3\2\2\2\u0198\u0178\3")
        buf.write("\2\2\2\u0198\u0181\3\2\2\2\u0198\u0188\3\2\2\2\u0198\u0191")
        buf.write("\3\2\2\2\u0199\31\3\2\2\2\u019a\u019b\t\23\2\2\u019b\u019c")
        buf.write("\7\u00a7\2\2\u019c\u019d\t\3\2\2\u019d\u01d9\7\u00a8\2")
        buf.write("\2\u019e\u019f\7\6\2\2\u019f\u01a0\7\u00ae\2\2\u01a0\u01a1")
        buf.write("\t\4\2\2\u01a1\u01d9\7\u00af\2\2\u01a2\u01a3\t\24\2\2")
        buf.write("\u01a3\u01a4\7\u00b9\2\2\u01a4\u01a5\7\u00bb\2\2\u01a5")
        buf.write("\u01d9\7\u00ba\2\2\u01a6\u01a7\t\25\2\2\u01a7\u01a8\7")
        buf.write("\u00a3\2\2\u01a8\u01aa\7\u00a4\2\2\u01a9\u01ab\7\u0089")
        buf.write("\2\2\u01aa\u01a9\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01d9")
        buf.write("\3\2\2\2\u01ac\u01ad\t\r\2\2\u01ad\u01ae\7\u009b\2\2\u01ae")
        buf.write("\u01b0\7\u009d\2\2\u01af\u01b1\7\u0089\2\2\u01b0\u01af")
        buf.write("\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01d9\3\2\2\2\u01b2")
        buf.write("\u01b3\t\b\2\2\u01b3\u01b4\7\u009f\2\2\u01b4\u01b6\7\u00a1")
        buf.write("\2\2\u01b5\u01b7\7\u0089\2\2\u01b6\u01b5\3\2\2\2\u01b6")
        buf.write("\u01b7\3\2\2\2\u01b7\u01d9\3\2\2\2\u01b8\u01b9\7\5\2\2")
        buf.write("\u01b9\u01ba\7\u009c\2\2\u01ba\u01bb\7\u00bf\2\2\u01bb")
        buf.write("\u01bc\7\u00be\2\2\u01bc\u01bd\7\u009b\2\2\u01bd\u01bf")
        buf.write("\7\u009d\2\2\u01be\u01c0\7\u0089\2\2\u01bf\u01be\3\2\2")
        buf.write("\2\u01bf\u01c0\3\2\2\2\u01c0\u01d9\3\2\2\2\u01c1\u01c2")
        buf.write("\t\26\2\2\u01c2\u01c3\7\u00a6\2\2\u01c3\u01c4\7\u00bf")
        buf.write("\2\2\u01c4\u01c5\7\u00be\2\2\u01c5\u01c6\7\u00a7\2\2\u01c6")
        buf.write("\u01c7\t\3\2\2\u01c7\u01d9\7\u00a8\2\2\u01c8\u01c9\7\6")
        buf.write("\2\2\u01c9\u01ca\7\u00a0\2\2\u01ca\u01cb\7\u00bf\2\2\u01cb")
        buf.write("\u01cc\7\u00be\2\2\u01cc\u01cd\7\u009f\2\2\u01cd\u01cf")
        buf.write("\7\u00a1\2\2\u01ce\u01d0\7\u0089\2\2\u01cf\u01ce\3\2\2")
        buf.write("\2\u01cf\u01d0\3\2\2\2\u01d0\u01d9\3\2\2\2\u01d1\u01d2")
        buf.write("\t\24\2\2\u01d2\u01d3\7\u00b8\2\2\u01d3\u01d4\7\u00bf")
        buf.write("\2\2\u01d4\u01d5\7\u00be\2\2\u01d5\u01d6\7\u00b9\2\2\u01d6")
        buf.write("\u01d7\7\u00bb\2\2\u01d7\u01d9\7\u00ba\2\2\u01d8\u019a")
        buf.write("\3\2\2\2\u01d8\u019e\3\2\2\2\u01d8\u01a2\3\2\2\2\u01d8")
        buf.write("\u01a6\3\2\2\2\u01d8\u01ac\3\2\2\2\u01d8\u01b2\3\2\2\2")
        buf.write("\u01d8\u01b8\3\2\2\2\u01d8\u01c1\3\2\2\2\u01d8\u01c8\3")
        buf.write("\2\2\2\u01d8\u01d1\3\2\2\2\u01d9\33\3\2\2\2\u01da\u01db")
        buf.write("\t\27\2\2\u01db\u01dc\7\u00a7\2\2\u01dc\u01dd\t\3\2\2")
        buf.write("\u01dd\u0219\7\u00a8\2\2\u01de\u01df\7\6\2\2\u01df\u01e0")
        buf.write("\7\u00ae\2\2\u01e0\u01e1\t\4\2\2\u01e1\u0219\7\u00af\2")
        buf.write("\2\u01e2\u01e3\t\30\2\2\u01e3\u01e4\7\u00b9\2\2\u01e4")
        buf.write("\u01e5\7\u00bb\2\2\u01e5\u0219\7\u00ba\2\2\u01e6\u01e7")
        buf.write("\t\25\2\2\u01e7\u01e8\7\u00a3\2\2\u01e8\u01ea\7\u00a4")
        buf.write("\2\2\u01e9\u01eb\7\u0089\2\2\u01ea\u01e9\3\2\2\2\u01ea")
        buf.write("\u01eb\3\2\2\2\u01eb\u0219\3\2\2\2\u01ec\u01ed\t\r\2\2")
        buf.write("\u01ed\u01ee\7\u009b\2\2\u01ee\u01f0\7\u009d\2\2\u01ef")
        buf.write("\u01f1\7\u0089\2\2\u01f0\u01ef\3\2\2\2\u01f0\u01f1\3\2")
        buf.write("\2\2\u01f1\u0219\3\2\2\2\u01f2\u01f3\t\b\2\2\u01f3\u01f4")
        buf.write("\7\u009f\2\2\u01f4\u01f6\7\u00a1\2\2\u01f5\u01f7\7\u0089")
        buf.write("\2\2\u01f6\u01f5\3\2\2\2\u01f6\u01f7\3\2\2\2\u01f7\u0219")
        buf.write("\3\2\2\2\u01f8\u01f9\7\5\2\2\u01f9\u01fa\7\u009c\2\2\u01fa")
        buf.write("\u01fb\7\u00bf\2\2\u01fb\u01fc\7\u00be\2\2\u01fc\u01fd")
        buf.write("\7\u009b\2\2\u01fd\u01ff\7\u009d\2\2\u01fe\u0200\7\u0089")
        buf.write("\2\2\u01ff\u01fe\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0219")
        buf.write("\3\2\2\2\u0201\u0202\t\31\2\2\u0202\u0203\7\u00a6\2\2")
        buf.write("\u0203\u0204\7\u00bf\2\2\u0204\u0205\7\u00be\2\2\u0205")
        buf.write("\u0206\7\u00a7\2\2\u0206\u0207\t\3\2\2\u0207\u0219\7\u00a8")
        buf.write("\2\2\u0208\u0209\7\6\2\2\u0209\u020a\7\u00a0\2\2\u020a")
        buf.write("\u020b\7\u00bf\2\2\u020b\u020c\7\u00be\2\2\u020c\u020d")
        buf.write("\7\u009f\2\2\u020d\u020f\7\u00a1\2\2\u020e\u0210\7\u0089")
        buf.write("\2\2\u020f\u020e\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0219")
        buf.write("\3\2\2\2\u0211\u0212\t\30\2\2\u0212\u0213\7\u00b8\2\2")
        buf.write("\u0213\u0214\7\u00bf\2\2\u0214\u0215\7\u00be\2\2\u0215")
        buf.write("\u0216\7\u00b9\2\2\u0216\u0217\7\u00bb\2\2\u0217\u0219")
        buf.write("\7\u00ba\2\2\u0218\u01da\3\2\2\2\u0218\u01de\3\2\2\2\u0218")
        buf.write("\u01e2\3\2\2\2\u0218\u01e6\3\2\2\2\u0218\u01ec\3\2\2\2")
        buf.write("\u0218\u01f2\3\2\2\2\u0218\u01f8\3\2\2\2\u0218\u0201\3")
        buf.write("\2\2\2\u0218\u0208\3\2\2\2\u0218\u0211\3\2\2\2\u0219\35")
        buf.write("\3\2\2\2\u021a\u021b\t\17\2\2\u021b\u021c\7\u00a7\2\2")
        buf.write("\u021c\u021d\t\3\2\2\u021d\u0261\7\u00a8\2\2\u021e\u021f")
        buf.write("\7\6\2\2\u021f\u0220\7\u00ae\2\2\u0220\u0221\t\4\2\2\u0221")
        buf.write("\u0261\7\u00af\2\2\u0222\u0223\7\7\2\2\u0223\u0224\7\u0093")
        buf.write("\2\2\u0224\u0225\7\u0094\2\2\u0225\u0226\5\64\33\2\u0226")
        buf.write("\u0228\7\u00cb\2\2\u0227\u0229\7\u0089\2\2\u0228\u0227")
        buf.write("\3\2\2\2\u0228\u0229\3\2\2\2\u0229\u0261\3\2\2\2\u022a")
        buf.write("\u022b\t\21\2\2\u022b\u022c\7\u00b9\2\2\u022c\u022d\7")
        buf.write("\u00bb\2\2\u022d\u0261\7\u00ba\2\2\u022e\u022f\t\32\2")
        buf.write("\2\u022f\u0230\7\u00a3\2\2\u0230\u0232\7\u00a4\2\2\u0231")
        buf.write("\u0233\7\u0089\2\2\u0232\u0231\3\2\2\2\u0232\u0233\3\2")
        buf.write("\2\2\u0233\u0261\3\2\2\2\u0234\u0235\t\r\2\2\u0235\u0236")
        buf.write("\7\u009b\2\2\u0236\u0238\7\u009d\2\2\u0237\u0239\7\u0089")
        buf.write("\2\2\u0238\u0237\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u0261")
        buf.write("\3\2\2\2\u023a\u023b\t\b\2\2\u023b\u023c\7\u009f\2\2\u023c")
        buf.write("\u023e\7\u00a1\2\2\u023d\u023f\7\u0089\2\2\u023e\u023d")
        buf.write("\3\2\2\2\u023e\u023f\3\2\2\2\u023f\u0261\3\2\2\2\u0240")
        buf.write("\u0241\7\5\2\2\u0241\u0242\7\u009c\2\2\u0242\u0243\7\u00bf")
        buf.write("\2\2\u0243\u0244\7\u00be\2\2\u0244\u0245\7\u009b\2\2\u0245")
        buf.write("\u0247\7\u009d\2\2\u0246\u0248\7\u0089\2\2\u0247\u0246")
        buf.write("\3\2\2\2\u0247\u0248\3\2\2\2\u0248\u0261\3\2\2\2\u0249")
        buf.write("\u024a\t\22\2\2\u024a\u024b\7\u00a6\2\2\u024b\u024c\7")
        buf.write("\u00bf\2\2\u024c\u024d\7\u00be\2\2\u024d\u024e\7\u00a7")
        buf.write("\2\2\u024e\u024f\t\3\2\2\u024f\u0261\7\u00a8\2\2\u0250")
        buf.write("\u0251\7\6\2\2\u0251\u0252\7\u00a0\2\2\u0252\u0253\7\u00bf")
        buf.write("\2\2\u0253\u0254\7\u00be\2\2\u0254\u0255\7\u009f\2\2\u0255")
        buf.write("\u0257\7\u00a1\2\2\u0256\u0258\7\u0089\2\2\u0257\u0256")
        buf.write("\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u0261\3\2\2\2\u0259")
        buf.write("\u025a\t\21\2\2\u025a\u025b\7\u00b8\2\2\u025b\u025c\7")
        buf.write("\u00bf\2\2\u025c\u025d\7\u00be\2\2\u025d\u025e\7\u00b9")
        buf.write("\2\2\u025e\u025f\7\u00bb\2\2\u025f\u0261\7\u00ba\2\2\u0260")
        buf.write("\u021a\3\2\2\2\u0260\u021e\3\2\2\2\u0260\u0222\3\2\2\2")
        buf.write("\u0260\u022a\3\2\2\2\u0260\u022e\3\2\2\2\u0260\u0234\3")
        buf.write("\2\2\2\u0260\u023a\3\2\2\2\u0260\u0240\3\2\2\2\u0260\u0249")
        buf.write("\3\2\2\2\u0260\u0250\3\2\2\2\u0260\u0259\3\2\2\2\u0261")
        buf.write("\37\3\2\2\2\u0262\u0263\t\33\2\2\u0263\u0264\7\u00a7\2")
        buf.write("\2\u0264\u0265\t\3\2\2\u0265\u02a9\7\u00a8\2\2\u0266\u0267")
        buf.write("\7\6\2\2\u0267\u0268\7\u00ae\2\2\u0268\u0269\t\4\2\2\u0269")
        buf.write("\u02a9\7\u00af\2\2\u026a\u026b\7\7\2\2\u026b\u026c\7\u0093")
        buf.write("\2\2\u026c\u026d\7\u0094\2\2\u026d\u026e\5\66\34\2\u026e")
        buf.write("\u0270\7\u00cb\2\2\u026f\u0271\7\u0089\2\2\u0270\u026f")
        buf.write("\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u02a9\3\2\2\2\u0272")
        buf.write("\u0273\t\34\2\2\u0273\u0274\7\u00b9\2\2\u0274\u0275\7")
        buf.write("\u00bb\2\2\u0275\u02a9\7\u00ba\2\2\u0276\u0277\t\32\2")
        buf.write("\2\u0277\u0278\7\u00a3\2\2\u0278\u027a\7\u00a4\2\2\u0279")
        buf.write("\u027b\7\u0089\2\2\u027a\u0279\3\2\2\2\u027a\u027b\3\2")
        buf.write("\2\2\u027b\u02a9\3\2\2\2\u027c\u027d\t\r\2\2\u027d\u027e")
        buf.write("\7\u009b\2\2\u027e\u0280\7\u009d\2\2\u027f\u0281\7\u0089")
        buf.write("\2\2\u0280\u027f\3\2\2\2\u0280\u0281\3\2\2\2\u0281\u02a9")
        buf.write("\3\2\2\2\u0282\u0283\t\b\2\2\u0283\u0284\7\u009f\2\2\u0284")
        buf.write("\u0286\7\u00a1\2\2\u0285\u0287\7\u0089\2\2\u0286\u0285")
        buf.write("\3\2\2\2\u0286\u0287\3\2\2\2\u0287\u02a9\3\2\2\2\u0288")
        buf.write("\u0289\7\5\2\2\u0289\u028a\7\u009c\2\2\u028a\u028b\7\u00bf")
        buf.write("\2\2\u028b\u028c\7\u00be\2\2\u028c\u028d\7\u009b\2\2\u028d")
        buf.write("\u028f\7\u009d\2\2\u028e\u0290\7\u0089\2\2\u028f\u028e")
        buf.write("\3\2\2\2\u028f\u0290\3\2\2\2\u0290\u02a9\3\2\2\2\u0291")
        buf.write("\u0292\t\35\2\2\u0292\u0293\7\u00a6\2\2\u0293\u0294\7")
        buf.write("\u00bf\2\2\u0294\u0295\7\u00be\2\2\u0295\u0296\7\u00a7")
        buf.write("\2\2\u0296\u0297\t\3\2\2\u0297\u02a9\7\u00a8\2\2\u0298")
        buf.write("\u0299\7\6\2\2\u0299\u029a\7\u00a0\2\2\u029a\u029b\7\u00bf")
        buf.write("\2\2\u029b\u029c\7\u00be\2\2\u029c\u029d\7\u009f\2\2\u029d")
        buf.write("\u029f\7\u00a1\2\2\u029e\u02a0\7\u0089\2\2\u029f\u029e")
        buf.write("\3\2\2\2\u029f\u02a0\3\2\2\2\u02a0\u02a9\3\2\2\2\u02a1")
        buf.write("\u02a2\t\34\2\2\u02a2\u02a3\7\u00b8\2\2\u02a3\u02a4\7")
        buf.write("\u00bf\2\2\u02a4\u02a5\7\u00be\2\2\u02a5\u02a6\7\u00b9")
        buf.write("\2\2\u02a6\u02a7\7\u00bb\2\2\u02a7\u02a9\7\u00ba\2\2\u02a8")
        buf.write("\u0262\3\2\2\2\u02a8\u0266\3\2\2\2\u02a8\u026a\3\2\2\2")
        buf.write("\u02a8\u0272\3\2\2\2\u02a8\u0276\3\2\2\2\u02a8\u027c\3")
        buf.write("\2\2\2\u02a8\u0282\3\2\2\2\u02a8\u0288\3\2\2\2\u02a8\u0291")
        buf.write("\3\2\2\2\u02a8\u0298\3\2\2\2\u02a8\u02a1\3\2\2\2\u02a9")
        buf.write("!\3\2\2\2\u02aa\u02ab\t\27\2\2\u02ab\u02ac\7\u00a7\2\2")
        buf.write("\u02ac\u02ad\t\3\2\2\u02ad\u02f1\7\u00a8\2\2\u02ae\u02af")
        buf.write("\7\6\2\2\u02af\u02b0\7\u00ae\2\2\u02b0\u02b1\t\4\2\2\u02b1")
        buf.write("\u02f1\7\u00af\2\2\u02b2\u02b3\7\7\2\2\u02b3\u02b4\7\u0093")
        buf.write("\2\2\u02b4\u02b5\7\u0094\2\2\u02b5\u02b6\58\35\2\u02b6")
        buf.write("\u02b8\7\u00cb\2\2\u02b7\u02b9\7\u0089\2\2\u02b8\u02b7")
        buf.write("\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02f1\3\2\2\2\u02ba")
        buf.write("\u02bb\t\30\2\2\u02bb\u02bc\7\u00b9\2\2\u02bc\u02bd\7")
        buf.write("\u00bb\2\2\u02bd\u02f1\7\u00ba\2\2\u02be\u02bf\t\32\2")
        buf.write("\2\u02bf\u02c0\7\u00a3\2\2\u02c0\u02c2\7\u00a4\2\2\u02c1")
        buf.write("\u02c3\7\u0089\2\2\u02c2\u02c1\3\2\2\2\u02c2\u02c3\3\2")
        buf.write("\2\2\u02c3\u02f1\3\2\2\2\u02c4\u02c5\t\r\2\2\u02c5\u02c6")
        buf.write("\7\u009b\2\2\u02c6\u02c8\7\u009d\2\2\u02c7\u02c9\7\u0089")
        buf.write("\2\2\u02c8\u02c7\3\2\2\2\u02c8\u02c9\3\2\2\2\u02c9\u02f1")
        buf.write("\3\2\2\2\u02ca\u02cb\t\b\2\2\u02cb\u02cc\7\u009f\2\2\u02cc")
        buf.write("\u02ce\7\u00a1\2\2\u02cd\u02cf\7\u0089\2\2\u02ce\u02cd")
        buf.write("\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02f1\3\2\2\2\u02d0")
        buf.write("\u02d1\7\5\2\2\u02d1\u02d2\7\u009c\2\2\u02d2\u02d3\7\u00bf")
        buf.write("\2\2\u02d3\u02d4\7\u00be\2\2\u02d4\u02d5\7\u009b\2\2\u02d5")
        buf.write("\u02d7\7\u009d\2\2\u02d6\u02d8\7\u0089\2\2\u02d7\u02d6")
        buf.write("\3\2\2\2\u02d7\u02d8\3\2\2\2\u02d8\u02f1\3\2\2\2\u02d9")
        buf.write("\u02da\t\31\2\2\u02da\u02db\7\u00a6\2\2\u02db\u02dc\7")
        buf.write("\u00bf\2\2\u02dc\u02dd\7\u00be\2\2\u02dd\u02de\7\u00a7")
        buf.write("\2\2\u02de\u02df\t\3\2\2\u02df\u02f1\7\u00a8\2\2\u02e0")
        buf.write("\u02e1\7\6\2\2\u02e1\u02e2\7\u00a0\2\2\u02e2\u02e3\7\u00bf")
        buf.write("\2\2\u02e3\u02e4\7\u00be\2\2\u02e4\u02e5\7\u009f\2\2\u02e5")
        buf.write("\u02e7\7\u00a1\2\2\u02e6\u02e8\7\u0089\2\2\u02e7\u02e6")
        buf.write("\3\2\2\2\u02e7\u02e8\3\2\2\2\u02e8\u02f1\3\2\2\2\u02e9")
        buf.write("\u02ea\t\30\2\2\u02ea\u02eb\7\u00b8\2\2\u02eb\u02ec\7")
        buf.write("\u00bf\2\2\u02ec\u02ed\7\u00be\2\2\u02ed\u02ee\7\u00b9")
        buf.write("\2\2\u02ee\u02ef\7\u00bb\2\2\u02ef\u02f1\7\u00ba\2\2\u02f0")
        buf.write("\u02aa\3\2\2\2\u02f0\u02ae\3\2\2\2\u02f0\u02b2\3\2\2\2")
        buf.write("\u02f0\u02ba\3\2\2\2\u02f0\u02be\3\2\2\2\u02f0\u02c4\3")
        buf.write("\2\2\2\u02f0\u02ca\3\2\2\2\u02f0\u02d0\3\2\2\2\u02f0\u02d9")
        buf.write("\3\2\2\2\u02f0\u02e0\3\2\2\2\u02f0\u02e9\3\2\2\2\u02f1")
        buf.write("#\3\2\2\2\u02f2\u02f3\7@\2\2\u02f3\u02f4\7\u00a7\2\2\u02f4")
        buf.write("\u02f5\t\3\2\2\u02f5\u0319\7\u00a8\2\2\u02f6\u02f7\7A")
        buf.write("\2\2\u02f7\u02f8\7\u00ae\2\2\u02f8\u02f9\t\4\2\2\u02f9")
        buf.write("\u0319\7\u00af\2\2\u02fa\u02fb\t\36\2\2\u02fb\u02fc\7")
        buf.write("\u00a6\2\2\u02fc\u02fd\7\u00bf\2\2\u02fd\u02fe\7\u00bd")
        buf.write("\2\2\u02fe\u02ff\7\u00bf\2\2\u02ff\u0300\7\u00be\2\2\u0300")
        buf.write("\u0301\7\u00a7\2\2\u0301\u0302\t\3\2\2\u0302\u0319\7\u00a8")
        buf.write("\2\2\u0303\u0304\t\37\2\2\u0304\u0305\7\u00ad\2\2\u0305")
        buf.write("\u0306\7\u00bf\2\2\u0306\u0307\7\u00bd\2\2\u0307\u0308")
        buf.write("\7\u00bf\2\2\u0308\u0309\7\u00be\2\2\u0309\u030a\7\u00ae")
        buf.write("\2\2\u030a\u030b\t\4\2\2\u030b\u0319\7\u00af\2\2\u030c")
        buf.write("\u030d\t \2\2\u030d\u030e\7\u009f\2\2\u030e\u0310\7\u00a1")
        buf.write("\2\2\u030f\u0311\7\u0089\2\2\u0310\u030f\3\2\2\2\u0310")
        buf.write("\u0311\3\2\2\2\u0311\u0319\3\2\2\2\u0312\u0313\7L\2\2")
        buf.write("\u0313\u0314\7\u00a3\2\2\u0314\u0316\7\u00a4\2\2\u0315")
        buf.write("\u0317\7\u0089\2\2\u0316\u0315\3\2\2\2\u0316\u0317\3\2")
        buf.write("\2\2\u0317\u0319\3\2\2\2\u0318\u02f2\3\2\2\2\u0318\u02f6")
        buf.write("\3\2\2\2\u0318\u02fa\3\2\2\2\u0318\u0303\3\2\2\2\u0318")
        buf.write("\u030c\3\2\2\2\u0318\u0312\3\2\2\2\u0319%\3\2\2\2\u031a")
        buf.write("\u031b\t!\2\2\u031b\u031c\7\u009b\2\2\u031c\u031e\7\u009d")
        buf.write("\2\2\u031d\u031f\7\u0089\2\2\u031e\u031d\3\2\2\2\u031e")
        buf.write("\u031f\3\2\2\2\u031f\u0350\3\2\2\2\u0320\u0321\t\"\2\2")
        buf.write("\u0321\u0322\7\u00a6\2\2\u0322\u0323\7\u00bf\2\2\u0323")
        buf.write("\u0324\7\u00be\2\2\u0324\u0325\7\u00a7\2\2\u0325\u0326")
        buf.write("\t\3\2\2\u0326\u0350\7\u00a8\2\2\u0327\u0328\7Q\2\2\u0328")
        buf.write("\u0329\7\u009c\2\2\u0329\u032a\7\u00bf\2\2\u032a\u032b")
        buf.write("\7\u00bd\2\2\u032b\u032c\7\u00bf\2\2\u032c\u032d\7\u00be")
        buf.write("\2\2\u032d\u032e\7\u009b\2\2\u032e\u0330\7\u009d\2\2\u032f")
        buf.write("\u0331\7\u0089\2\2\u0330\u032f\3\2\2\2\u0330\u0331\3\2")
        buf.write("\2\2\u0331\u0350\3\2\2\2\u0332\u0333\7U\2\2\u0333\u0334")
        buf.write("\7\u00a0\2\2\u0334\u0335\7\u00bf\2\2\u0335\u0336\7\u00be")
        buf.write("\2\2\u0336\u0337\7\u009f\2\2\u0337\u0339\7\u00a1\2\2\u0338")
        buf.write("\u033a\7\u0089\2\2\u0339\u0338\3\2\2\2\u0339\u033a\3\2")
        buf.write("\2\2\u033a\u0350\3\2\2\2\u033b\u033c\t#\2\2\u033c\u033d")
        buf.write("\7\u00ad\2\2\u033d\u033e\7\u00bf\2\2\u033e\u033f\7\u00be")
        buf.write("\2\2\u033f\u0340\7\u00ae\2\2\u0340\u0341\t\4\2\2\u0341")
        buf.write("\u0350\7\u00af\2\2\u0342\u0343\7R\2\2\u0343\u0344\7\u00b8")
        buf.write("\2\2\u0344\u0345\7\u00bf\2\2\u0345\u0346\7\u00be\2\2\u0346")
        buf.write("\u0347\7\u00b9\2\2\u0347\u0348\7\u00bb\2\2\u0348\u0350")
        buf.write("\7\u00ba\2\2\u0349\u034a\7Y\2\2\u034a\u034b\7\u009f\2")
        buf.write("\2\u034b\u034d\7\u00a1\2\2\u034c\u034e\7\u0089\2\2\u034d")
        buf.write("\u034c\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u0350\3\2\2\2")
        buf.write("\u034f\u031a\3\2\2\2\u034f\u0320\3\2\2\2\u034f\u0327\3")
        buf.write("\2\2\2\u034f\u0332\3\2\2\2\u034f\u033b\3\2\2\2\u034f\u0342")
        buf.write("\3\2\2\2\u034f\u0349\3\2\2\2\u0350\'\3\2\2\2\u0351\u0352")
        buf.write("\t$\2\2\u0352\u0353\7\u009b\2\2\u0353\u0355\7\u009d\2")
        buf.write("\2\u0354\u0356\7\u0089\2\2\u0355\u0354\3\2\2\2\u0355\u0356")
        buf.write("\3\2\2\2\u0356\u0379\3\2\2\2\u0357\u0358\7^\2\2\u0358")
        buf.write("\u0359\7\u00b9\2\2\u0359\u035a\7\u00bb\2\2\u035a\u0379")
        buf.write("\7\u00ba\2\2\u035b\u035c\t%\2\2\u035c\u035d\7\u00a6\2")
        buf.write("\2\u035d\u035e\7\u00bf\2\2\u035e\u035f\7\u00be\2\2\u035f")
        buf.write("\u0360\7\u00a7\2\2\u0360\u0361\t\3\2\2\u0361\u0379\7\u00a8")
        buf.write("\2\2\u0362\u0363\t&\2\2\u0363\u0364\7\u00a0\2\2\u0364")
        buf.write("\u0365\7\u00bf\2\2\u0365\u0366\7\u00be\2\2\u0366\u0367")
        buf.write("\7\u009f\2\2\u0367\u0369\7\u00a1\2\2\u0368\u036a\7\u0089")
        buf.write("\2\2\u0369\u0368\3\2\2\2\u0369\u036a\3\2\2\2\u036a\u0379")
        buf.write("\3\2\2\2\u036b\u036c\t\'\2\2\u036c\u036d\7\u00ad\2\2\u036d")
        buf.write("\u036e\7\u00bf\2\2\u036e\u036f\7\u00be\2\2\u036f\u0370")
        buf.write("\7\u00ae\2\2\u0370\u0371\t\4\2\2\u0371\u0379\7\u00af\2")
        buf.write("\2\u0372\u0373\7d\2\2\u0373\u0374\7\u009f\2\2\u0374\u0376")
        buf.write("\7\u00a1\2\2\u0375\u0377\7\u0089\2\2\u0376\u0375\3\2\2")
        buf.write("\2\u0376\u0377\3\2\2\2\u0377\u0379\3\2\2\2\u0378\u0351")
        buf.write("\3\2\2\2\u0378\u0357\3\2\2\2\u0378\u035b\3\2\2\2\u0378")
        buf.write("\u0362\3\2\2\2\u0378\u036b\3\2\2\2\u0378\u0372\3\2\2\2")
        buf.write("\u0379)\3\2\2\2\u037a\u037b\t(\2\2\u037b\u037c\7\u009b")
        buf.write("\2\2\u037c\u037e\7\u009d\2\2\u037d\u037f\7\u0089\2\2\u037e")
        buf.write("\u037d\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u03a3\3\2\2\2")
        buf.write("\u0380\u0381\t)\2\2\u0381\u0382\7\u009c\2\2\u0382\u0383")
        buf.write("\7\u00bf\2\2\u0383\u0384\7\u00be\2\2\u0384\u0385\7\u009b")
        buf.write("\2\2\u0385\u0387\7\u009d\2\2\u0386\u0388\7\u0089\2\2\u0387")
        buf.write("\u0386\3\2\2\2\u0387\u0388\3\2\2\2\u0388\u03a3\3\2\2\2")
        buf.write("\u0389\u038a\t*\2\2\u038a\u038b\7\u00a0\2\2\u038b\u038c")
        buf.write("\7\u00bf\2\2\u038c\u038d\7\u00be\2\2\u038d\u038e\7\u009f")
        buf.write("\2\2\u038e\u0390\7\u00a1\2\2\u038f\u0391\7\u0089\2\2\u0390")
        buf.write("\u038f\3\2\2\2\u0390\u0391\3\2\2\2\u0391\u03a3\3\2\2\2")
        buf.write("\u0392\u0393\t+\2\2\u0393\u0394\7\u00ae\2\2\u0394\u0395")
        buf.write("\t\4\2\2\u0395\u03a3\7\u00af\2\2\u0396\u0397\t,\2\2\u0397")
        buf.write("\u0398\7\u009f\2\2\u0398\u039a\7\u00a1\2\2\u0399\u039b")
        buf.write("\7\u0089\2\2\u039a\u0399\3\2\2\2\u039a\u039b\3\2\2\2\u039b")
        buf.write("\u03a3\3\2\2\2\u039c\u039d\7x\2\2\u039d\u039e\7\u0093")
        buf.write("\2\2\u039e\u03a0\7\u008c\2\2\u039f\u03a1\7\u0089\2\2\u03a0")
        buf.write("\u039f\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03a3\3\2\2\2")
        buf.write("\u03a2\u037a\3\2\2\2\u03a2\u0380\3\2\2\2\u03a2\u0389\3")
        buf.write("\2\2\2\u03a2\u0392\3\2\2\2\u03a2\u0396\3\2\2\2\u03a2\u039c")
        buf.write("\3\2\2\2\u03a3+\3\2\2\2\u03a4\u03a5\t-\2\2\u03a5\u03a6")
        buf.write("\7\u009b\2\2\u03a6\u03a8\7\u009d\2\2\u03a7\u03a9\7\u0089")
        buf.write("\2\2\u03a8\u03a7\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9\u03c7")
        buf.write("\3\2\2\2\u03aa\u03ab\t.\2\2\u03ab\u03ac\7\u009c\2\2\u03ac")
        buf.write("\u03ad\7\u00bf\2\2\u03ad\u03ae\7\u00be\2\2\u03ae\u03af")
        buf.write("\7\u009b\2\2\u03af\u03b1\7\u009d\2\2\u03b0\u03b2\7\u0089")
        buf.write("\2\2\u03b1\u03b0\3\2\2\2\u03b1\u03b2\3\2\2\2\u03b2\u03c7")
        buf.write("\3\2\2\2\u03b3\u03b4\t/\2\2\u03b4\u03b5\7\u00a0\2\2\u03b5")
        buf.write("\u03b6\7\u00bf\2\2\u03b6\u03b7\7\u00be\2\2\u03b7\u03b8")
        buf.write("\7\u009f\2\2\u03b8\u03ba\7\u00a1\2\2\u03b9\u03bb\7\u0089")
        buf.write("\2\2\u03ba\u03b9\3\2\2\2\u03ba\u03bb\3\2\2\2\u03bb\u03c7")
        buf.write("\3\2\2\2\u03bc\u03bd\7\u0080\2\2\u03bd\u03be\7\u00ae\2")
        buf.write("\2\u03be\u03bf\t\4\2\2\u03bf\u03c7\7\u00af\2\2\u03c0\u03c1")
        buf.write("\t\60\2\2\u03c1\u03c2\7\u009f\2\2\u03c2\u03c4\7\u00a1")
        buf.write("\2\2\u03c3\u03c5\7\u0089\2\2\u03c4\u03c3\3\2\2\2\u03c4")
        buf.write("\u03c5\3\2\2\2\u03c5\u03c7\3\2\2\2\u03c6\u03a4\3\2\2\2")
        buf.write("\u03c6\u03aa\3\2\2\2\u03c6\u03b3\3\2\2\2\u03c6\u03bc\3")
        buf.write("\2\2\2\u03c6\u03c0\3\2\2\2\u03c7-\3\2\2\2\u03c8\u03c9")
        buf.write("\79\2\2\u03c9\u03ca\7\u00c5\2\2\u03ca\u03cc\5:\36\2\u03cb")
        buf.write("\u03cd\7\u00c4\2\2\u03cc\u03cb\3\2\2\2\u03cc\u03cd\3\2")
        buf.write("\2\2\u03cd\u03ce\3\2\2\2\u03ce\u03cf\5:\36\2\u03cf\u03d0")
        buf.write("\7\u00c6\2\2\u03d0\u03e4\3\2\2\2\u03d1\u03d2\79\2\2\u03d2")
        buf.write("\u03d3\7\u00c7\2\2\u03d3\u03d5\5:\36\2\u03d4\u03d6\7\u00c4")
        buf.write("\2\2\u03d5\u03d4\3\2\2\2\u03d5\u03d6\3\2\2\2\u03d6\u03d7")
        buf.write("\3\2\2\2\u03d7\u03d8\5:\36\2\u03d8\u03d9\7\u00c8\2\2\u03d9")
        buf.write("\u03e4\3\2\2\2\u03da\u03db\79\2\2\u03db\u03dc\7\u00c9")
        buf.write("\2\2\u03dc\u03de\5:\36\2\u03dd\u03df\7\u00c4\2\2\u03de")
        buf.write("\u03dd\3\2\2\2\u03de\u03df\3\2\2\2\u03df\u03e0\3\2\2\2")
        buf.write("\u03e0\u03e1\5:\36\2\u03e1\u03e2\7\u00ca\2\2\u03e2\u03e4")
        buf.write("\3\2\2\2\u03e3\u03c8\3\2\2\2\u03e3\u03d1\3\2\2\2\u03e3")
        buf.write("\u03da\3\2\2\2\u03e4/\3\2\2\2\u03e5\u03e6\7:\2\2\u03e6")
        buf.write("\u03e7\7\u00c5\2\2\u03e7\u03e9\5:\36\2\u03e8\u03ea\7\u00c4")
        buf.write("\2\2\u03e9\u03e8\3\2\2\2\u03e9\u03ea\3\2\2\2\u03ea\u03eb")
        buf.write("\3\2\2\2\u03eb\u03ed\5:\36\2\u03ec\u03ee\7\u00c4\2\2\u03ed")
        buf.write("\u03ec\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee\u03ef\3\2\2\2")
        buf.write("\u03ef\u03f0\5:\36\2\u03f0\u03f1\7\u00c6\2\2\u03f1\u040d")
        buf.write("\3\2\2\2\u03f2\u03f3\7:\2\2\u03f3\u03f4\7\u00c7\2\2\u03f4")
        buf.write("\u03f6\5:\36\2\u03f5\u03f7\7\u00c4\2\2\u03f6\u03f5\3\2")
        buf.write("\2\2\u03f6\u03f7\3\2\2\2\u03f7\u03f8\3\2\2\2\u03f8\u03fa")
        buf.write("\5:\36\2\u03f9\u03fb\7\u00c4\2\2\u03fa\u03f9\3\2\2\2\u03fa")
        buf.write("\u03fb\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u03fd\5:\36\2")
        buf.write("\u03fd\u03fe\7\u00c8\2\2\u03fe\u040d\3\2\2\2\u03ff\u0400")
        buf.write("\7:\2\2\u0400\u0401\7\u00c9\2\2\u0401\u0403\5:\36\2\u0402")
        buf.write("\u0404\7\u00c4\2\2\u0403\u0402\3\2\2\2\u0403\u0404\3\2")
        buf.write("\2\2\u0404\u0405\3\2\2\2\u0405\u0407\5:\36\2\u0406\u0408")
        buf.write("\7\u00c4\2\2\u0407\u0406\3\2\2\2\u0407\u0408\3\2\2\2\u0408")
        buf.write("\u0409\3\2\2\2\u0409\u040a\5:\36\2\u040a\u040b\7\u00ca")
        buf.write("\2\2\u040b\u040d\3\2\2\2\u040c\u03e5\3\2\2\2\u040c\u03f2")
        buf.write("\3\2\2\2\u040c\u03ff\3\2\2\2\u040d\61\3\2\2\2\u040e\u040f")
        buf.write("\7;\2\2\u040f\u0410\7\u00c5\2\2\u0410\u0412\5:\36\2\u0411")
        buf.write("\u0413\7\u00c4\2\2\u0412\u0411\3\2\2\2\u0412\u0413\3\2")
        buf.write("\2\2\u0413\u0414\3\2\2\2\u0414\u0416\5:\36\2\u0415\u0417")
        buf.write("\7\u00c4\2\2\u0416\u0415\3\2\2\2\u0416\u0417\3\2\2\2\u0417")
        buf.write("\u0418\3\2\2\2\u0418\u041a\5:\36\2\u0419\u041b\7\u00c4")
        buf.write("\2\2\u041a\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c")
        buf.write("\3\2\2\2\u041c\u041d\5:\36\2\u041d\u041e\7\u00c6\2\2\u041e")
        buf.write("\u0442\3\2\2\2\u041f\u0420\7;\2\2\u0420\u0421\7\u00c7")
        buf.write("\2\2\u0421\u0423\5:\36\2\u0422\u0424\7\u00c4\2\2\u0423")
        buf.write("\u0422\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0425\3\2\2\2")
        buf.write("\u0425\u0427\5:\36\2\u0426\u0428\7\u00c4\2\2\u0427\u0426")
        buf.write("\3\2\2\2\u0427\u0428\3\2\2\2\u0428\u0429\3\2\2\2\u0429")
        buf.write("\u042b\5:\36\2\u042a\u042c\7\u00c4\2\2\u042b\u042a\3\2")
        buf.write("\2\2\u042b\u042c\3\2\2\2\u042c\u042d\3\2\2\2\u042d\u042e")
        buf.write("\5:\36\2\u042e\u042f\7\u00c8\2\2\u042f\u0442\3\2\2\2\u0430")
        buf.write("\u0431\7;\2\2\u0431\u0432\7\u00c9\2\2\u0432\u0434\5:\36")
        buf.write("\2\u0433\u0435\7\u00c4\2\2\u0434\u0433\3\2\2\2\u0434\u0435")
        buf.write("\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0438\5:\36\2\u0437")
        buf.write("\u0439\7\u00c4\2\2\u0438\u0437\3\2\2\2\u0438\u0439\3\2")
        buf.write("\2\2\u0439\u043a\3\2\2\2\u043a\u043c\5:\36\2\u043b\u043d")
        buf.write("\7\u00c4\2\2\u043c\u043b\3\2\2\2\u043c\u043d\3\2\2\2\u043d")
        buf.write("\u043e\3\2\2\2\u043e\u043f\5:\36\2\u043f\u0440\7\u00ca")
        buf.write("\2\2\u0440\u0442\3\2\2\2\u0441\u040e\3\2\2\2\u0441\u041f")
        buf.write("\3\2\2\2\u0441\u0430\3\2\2\2\u0442\63\3\2\2\2\u0443\u0444")
        buf.write("\7<\2\2\u0444\u0445\7\u00c5\2\2\u0445\u0447\5.\30\2\u0446")
        buf.write("\u0448\7\u00c4\2\2\u0447\u0446\3\2\2\2\u0447\u0448\3\2")
        buf.write("\2\2\u0448\u0449\3\2\2\2\u0449\u044b\7\u00c2\2\2\u044a")
        buf.write("\u044c\7\u00c4\2\2\u044b\u044a\3\2\2\2\u044b\u044c\3\2")
        buf.write("\2\2\u044c\u044d\3\2\2\2\u044d\u044f\5.\30\2\u044e\u0450")
        buf.write("\7\u00c4\2\2\u044f\u044e\3\2\2\2\u044f\u0450\3\2\2\2\u0450")
        buf.write("\u0451\3\2\2\2\u0451\u0452\7\u00c2\2\2\u0452\u0453\7\u00c6")
        buf.write("\2\2\u0453\u0477\3\2\2\2\u0454\u0455\7<\2\2\u0455\u0456")
        buf.write("\7\u00c7\2\2\u0456\u0458\5.\30\2\u0457\u0459\7\u00c4\2")
        buf.write("\2\u0458\u0457\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u045a")
        buf.write("\3\2\2\2\u045a\u045c\7\u00c2\2\2\u045b\u045d\7\u00c4\2")
        buf.write("\2\u045c\u045b\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u045e")
        buf.write("\3\2\2\2\u045e\u0460\5.\30\2\u045f\u0461\7\u00c4\2\2\u0460")
        buf.write("\u045f\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0462\3\2\2\2")
        buf.write("\u0462\u0463\7\u00c2\2\2\u0463\u0464\7\u00c8\2\2\u0464")
        buf.write("\u0477\3\2\2\2\u0465\u0466\7<\2\2\u0466\u0467\7\u00c9")
        buf.write("\2\2\u0467\u0469\5.\30\2\u0468\u046a\7\u00c4\2\2\u0469")
        buf.write("\u0468\3\2\2\2\u0469\u046a\3\2\2\2\u046a\u046b\3\2\2\2")
        buf.write("\u046b\u046d\7\u00c2\2\2\u046c\u046e\7\u00c4\2\2\u046d")
        buf.write("\u046c\3\2\2\2\u046d\u046e\3\2\2\2\u046e\u046f\3\2\2\2")
        buf.write("\u046f\u0471\5.\30\2\u0470\u0472\7\u00c4\2\2\u0471\u0470")
        buf.write("\3\2\2\2\u0471\u0472\3\2\2\2\u0472\u0473\3\2\2\2\u0473")
        buf.write("\u0474\7\u00c2\2\2\u0474\u0475\7\u00ca\2\2\u0475\u0477")
        buf.write("\3\2\2\2\u0476\u0443\3\2\2\2\u0476\u0454\3\2\2\2\u0476")
        buf.write("\u0465\3\2\2\2\u0477\65\3\2\2\2\u0478\u0479\7<\2\2\u0479")
        buf.write("\u047a\7\u00c5\2\2\u047a\u047c\5.\30\2\u047b\u047d\7\u00c4")
        buf.write("\2\2\u047c\u047b\3\2\2\2\u047c\u047d\3\2\2\2\u047d\u047e")
        buf.write("\3\2\2\2\u047e\u0480\7\u00c2\2\2\u047f\u0481\7\u00c4\2")
        buf.write("\2\u0480\u047f\3\2\2\2\u0480\u0481\3\2\2\2\u0481\u0482")
        buf.write("\3\2\2\2\u0482\u0484\5.\30\2\u0483\u0485\7\u00c4\2\2\u0484")
        buf.write("\u0483\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0486\3\2\2\2")
        buf.write("\u0486\u0488\7\u00c2\2\2\u0487\u0489\7\u00c4\2\2\u0488")
        buf.write("\u0487\3\2\2\2\u0488\u0489\3\2\2\2\u0489\u048a\3\2\2\2")
        buf.write("\u048a\u048c\5.\30\2\u048b\u048d\7\u00c4\2\2\u048c\u048b")
        buf.write("\3\2\2\2\u048c\u048d\3\2\2\2\u048d\u048e\3\2\2\2\u048e")
        buf.write("\u048f\7\u00c2\2\2\u048f\u0490\7\u00c6\2\2\u0490\u04c4")
        buf.write("\3\2\2\2\u0491\u0492\7<\2\2\u0492\u0493\7\u00c7\2\2\u0493")
        buf.write("\u0495\5.\30\2\u0494\u0496\7\u00c4\2\2\u0495\u0494\3\2")
        buf.write("\2\2\u0495\u0496\3\2\2\2\u0496\u0497\3\2\2\2\u0497\u0499")
        buf.write("\7\u00c2\2\2\u0498\u049a\7\u00c4\2\2\u0499\u0498\3\2\2")
        buf.write("\2\u0499\u049a\3\2\2\2\u049a\u049b\3\2\2\2\u049b\u049d")
        buf.write("\5.\30\2\u049c\u049e\7\u00c4\2\2\u049d\u049c\3\2\2\2\u049d")
        buf.write("\u049e\3\2\2\2\u049e\u049f\3\2\2\2\u049f\u04a1\7\u00c2")
        buf.write("\2\2\u04a0\u04a2\7\u00c4\2\2\u04a1\u04a0\3\2\2\2\u04a1")
        buf.write("\u04a2\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04a5\5.\30\2")
        buf.write("\u04a4\u04a6\7\u00c4\2\2\u04a5\u04a4\3\2\2\2\u04a5\u04a6")
        buf.write("\3\2\2\2\u04a6\u04a7\3\2\2\2\u04a7\u04a8\7\u00c2\2\2\u04a8")
        buf.write("\u04a9\7\u00c8\2\2\u04a9\u04c4\3\2\2\2\u04aa\u04ab\7<")
        buf.write("\2\2\u04ab\u04ac\7\u00c9\2\2\u04ac\u04ae\5.\30\2\u04ad")
        buf.write("\u04af\7\u00c4\2\2\u04ae\u04ad\3\2\2\2\u04ae\u04af\3\2")
        buf.write("\2\2\u04af\u04b0\3\2\2\2\u04b0\u04b2\7\u00c2\2\2\u04b1")
        buf.write("\u04b3\7\u00c4\2\2\u04b2\u04b1\3\2\2\2\u04b2\u04b3\3\2")
        buf.write("\2\2\u04b3\u04b4\3\2\2\2\u04b4\u04b6\5.\30\2\u04b5\u04b7")
        buf.write("\7\u00c4\2\2\u04b6\u04b5\3\2\2\2\u04b6\u04b7\3\2\2\2\u04b7")
        buf.write("\u04b8\3\2\2\2\u04b8\u04ba\7\u00c2\2\2\u04b9\u04bb\7\u00c4")
        buf.write("\2\2\u04ba\u04b9\3\2\2\2\u04ba\u04bb\3\2\2\2\u04bb\u04bc")
        buf.write("\3\2\2\2\u04bc\u04be\5.\30\2\u04bd\u04bf\7\u00c4\2\2\u04be")
        buf.write("\u04bd\3\2\2\2\u04be\u04bf\3\2\2\2\u04bf\u04c0\3\2\2\2")
        buf.write("\u04c0\u04c1\7\u00c2\2\2\u04c1\u04c2\7\u00ca\2\2\u04c2")
        buf.write("\u04c4\3\2\2\2\u04c3\u0478\3\2\2\2\u04c3\u0491\3\2\2\2")
        buf.write("\u04c3\u04aa\3\2\2\2\u04c4\67\3\2\2\2\u04c5\u04c6\7<\2")
        buf.write("\2\u04c6\u04c7\7\u00c5\2\2\u04c7\u04c9\5.\30\2\u04c8\u04ca")
        buf.write("\7\u00c4\2\2\u04c9\u04c8\3\2\2\2\u04c9\u04ca\3\2\2\2\u04ca")
        buf.write("\u04cb\3\2\2\2\u04cb\u04cd\7\u00c2\2\2\u04cc\u04ce\7\u00c4")
        buf.write("\2\2\u04cd\u04cc\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce\u04cf")
        buf.write("\3\2\2\2\u04cf\u04d1\5.\30\2\u04d0\u04d2\7\u00c4\2\2\u04d1")
        buf.write("\u04d0\3\2\2\2\u04d1\u04d2\3\2\2\2\u04d2\u04d3\3\2\2\2")
        buf.write("\u04d3\u04d5\7\u00c2\2\2\u04d4\u04d6\7\u00c4\2\2\u04d5")
        buf.write("\u04d4\3\2\2\2\u04d5\u04d6\3\2\2\2\u04d6\u04d7\3\2\2\2")
        buf.write("\u04d7\u04d9\5.\30\2\u04d8\u04da\7\u00c4\2\2\u04d9\u04d8")
        buf.write("\3\2\2\2\u04d9\u04da\3\2\2\2\u04da\u04db\3\2\2\2\u04db")
        buf.write("\u04dd\7\u00c2\2\2\u04dc\u04de\7\u00c4\2\2\u04dd\u04dc")
        buf.write("\3\2\2\2\u04dd\u04de\3\2\2\2\u04de\u04df\3\2\2\2\u04df")
        buf.write("\u04e1\5.\30\2\u04e0\u04e2\7\u00c4\2\2\u04e1\u04e0\3\2")
        buf.write("\2\2\u04e1\u04e2\3\2\2\2\u04e2\u04e3\3\2\2\2\u04e3\u04e4")
        buf.write("\7\u00c2\2\2\u04e4\u04e5\7\u00c6\2\2\u04e5\u0529\3\2\2")
        buf.write("\2\u04e6\u04e7\7<\2\2\u04e7\u04e8\7\u00c7\2\2\u04e8\u04ea")
        buf.write("\5.\30\2\u04e9\u04eb\7\u00c4\2\2\u04ea\u04e9\3\2\2\2\u04ea")
        buf.write("\u04eb\3\2\2\2\u04eb\u04ec\3\2\2\2\u04ec\u04ee\7\u00c2")
        buf.write("\2\2\u04ed\u04ef\7\u00c4\2\2\u04ee\u04ed\3\2\2\2\u04ee")
        buf.write("\u04ef\3\2\2\2\u04ef\u04f0\3\2\2\2\u04f0\u04f2\5.\30\2")
        buf.write("\u04f1\u04f3\7\u00c4\2\2\u04f2\u04f1\3\2\2\2\u04f2\u04f3")
        buf.write("\3\2\2\2\u04f3\u04f4\3\2\2\2\u04f4\u04f6\7\u00c2\2\2\u04f5")
        buf.write("\u04f7\7\u00c4\2\2\u04f6\u04f5\3\2\2\2\u04f6\u04f7\3\2")
        buf.write("\2\2\u04f7\u04f8\3\2\2\2\u04f8\u04fa\5.\30\2\u04f9\u04fb")
        buf.write("\7\u00c4\2\2\u04fa\u04f9\3\2\2\2\u04fa\u04fb\3\2\2\2\u04fb")
        buf.write("\u04fc\3\2\2\2\u04fc\u04fe\7\u00c2\2\2\u04fd\u04ff\7\u00c4")
        buf.write("\2\2\u04fe\u04fd\3\2\2\2\u04fe\u04ff\3\2\2\2\u04ff\u0500")
        buf.write("\3\2\2\2\u0500\u0502\5.\30\2\u0501\u0503\7\u00c4\2\2\u0502")
        buf.write("\u0501\3\2\2\2\u0502\u0503\3\2\2\2\u0503\u0504\3\2\2\2")
        buf.write("\u0504\u0505\7\u00c2\2\2\u0505\u0506\7\u00c8\2\2\u0506")
        buf.write("\u0529\3\2\2\2\u0507\u0508\7<\2\2\u0508\u0509\7\u00c9")
        buf.write("\2\2\u0509\u050b\5.\30\2\u050a\u050c\7\u00c4\2\2\u050b")
        buf.write("\u050a\3\2\2\2\u050b\u050c\3\2\2\2\u050c\u050d\3\2\2\2")
        buf.write("\u050d\u050f\7\u00c2\2\2\u050e\u0510\7\u00c4\2\2\u050f")
        buf.write("\u050e\3\2\2\2\u050f\u0510\3\2\2\2\u0510\u0511\3\2\2\2")
        buf.write("\u0511\u0513\5.\30\2\u0512\u0514\7\u00c4\2\2\u0513\u0512")
        buf.write("\3\2\2\2\u0513\u0514\3\2\2\2\u0514\u0515\3\2\2\2\u0515")
        buf.write("\u0517\7\u00c2\2\2\u0516\u0518\7\u00c4\2\2\u0517\u0516")
        buf.write("\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u0519\3\2\2\2\u0519")
        buf.write("\u051b\5.\30\2\u051a\u051c\7\u00c4\2\2\u051b\u051a\3\2")
        buf.write("\2\2\u051b\u051c\3\2\2\2\u051c\u051d\3\2\2\2\u051d\u051f")
        buf.write("\7\u00c2\2\2\u051e\u0520\7\u00c4\2\2\u051f\u051e\3\2\2")
        buf.write("\2\u051f\u0520\3\2\2\2\u0520\u0521\3\2\2\2\u0521\u0523")
        buf.write("\5.\30\2\u0522\u0524\7\u00c4\2\2\u0523\u0522\3\2\2\2\u0523")
        buf.write("\u0524\3\2\2\2\u0524\u0525\3\2\2\2\u0525\u0526\7\u00c2")
        buf.write("\2\2\u0526\u0527\7\u00ca\2\2\u0527\u0529\3\2\2\2\u0528")
        buf.write("\u04c5\3\2\2\2\u0528\u04e6\3\2\2\2\u0528\u0507\3\2\2\2")
        buf.write("\u05299\3\2\2\2\u052a\u0541\7\u00c1\2\2\u052b\u052c\7")
        buf.write("\u00c5\2\2\u052c\u052d\7\u00c1\2\2\u052d\u0541\7\u00c6")
        buf.write("\2\2\u052e\u052f\7\u00c7\2\2\u052f\u0530\7\u00c1\2\2\u0530")
        buf.write("\u0541\7\u00c8\2\2\u0531\u0532\7\u00c9\2\2\u0532\u0533")
        buf.write("\7\u00c1\2\2\u0533\u0541\7\u00ca\2\2\u0534\u0541\7\u00c3")
        buf.write("\2\2\u0535\u0536\7\u00c5\2\2\u0536\u0537\7\u00c3\2\2\u0537")
        buf.write("\u0541\7\u00c6\2\2\u0538\u0539\7\u00c7\2\2\u0539\u053a")
        buf.write("\7\u00c3\2\2\u053a\u0541\7\u00c8\2\2\u053b\u053c\7\u00c9")
        buf.write("\2\2\u053c\u053d\7\u00c3\2\2\u053d\u0541\7\u00ca\2\2\u053e")
        buf.write("\u0541\5<\37\2\u053f\u0541\5> \2\u0540\u052a\3\2\2\2\u0540")
        buf.write("\u052b\3\2\2\2\u0540\u052e\3\2\2\2\u0540\u0531\3\2\2\2")
        buf.write("\u0540\u0534\3\2\2\2\u0540\u0535\3\2\2\2\u0540\u0538\3")
        buf.write("\2\2\2\u0540\u053b\3\2\2\2\u0540\u053e\3\2\2\2\u0540\u053f")
        buf.write("\3\2\2\2\u0541;\3\2\2\2\u0542\u0543\7=\2\2\u0543\u0544")
        buf.write("\7\u00c5\2\2\u0544\u0546\5:\36\2\u0545\u0547\7\u00c4\2")
        buf.write("\2\u0546\u0545\3\2\2\2\u0546\u0547\3\2\2\2\u0547\u0548")
        buf.write("\3\2\2\2\u0548\u054a\5:\36\2\u0549\u054b\7\u00c4\2\2\u054a")
        buf.write("\u0549\3\2\2\2\u054a\u054b\3\2\2\2\u054b\u054c\3\2\2\2")
        buf.write("\u054c\u054e\5:\36\2\u054d\u054f\7\u00c4\2\2\u054e\u054d")
        buf.write("\3\2\2\2\u054e\u054f\3\2\2\2\u054f\u0550\3\2\2\2\u0550")
        buf.write("\u0551\5:\36\2\u0551\u0552\7\u00c6\2\2\u0552\u0576\3\2")
        buf.write("\2\2\u0553\u0554\7=\2\2\u0554\u0555\7\u00c7\2\2\u0555")
        buf.write("\u0557\5:\36\2\u0556\u0558\7\u00c4\2\2\u0557\u0556\3\2")
        buf.write("\2\2\u0557\u0558\3\2\2\2\u0558\u0559\3\2\2\2\u0559\u055b")
        buf.write("\5:\36\2\u055a\u055c\7\u00c4\2\2\u055b\u055a\3\2\2\2\u055b")
        buf.write("\u055c\3\2\2\2\u055c\u055d\3\2\2\2\u055d\u055f\5:\36\2")
        buf.write("\u055e\u0560\7\u00c4\2\2\u055f\u055e\3\2\2\2\u055f\u0560")
        buf.write("\3\2\2\2\u0560\u0561\3\2\2\2\u0561\u0562\5:\36\2\u0562")
        buf.write("\u0563\7\u00c8\2\2\u0563\u0576\3\2\2\2\u0564\u0565\7=")
        buf.write("\2\2\u0565\u0566\7\u00c9\2\2\u0566\u0568\5:\36\2\u0567")
        buf.write("\u0569\7\u00c4\2\2\u0568\u0567\3\2\2\2\u0568\u0569\3\2")
        buf.write("\2\2\u0569\u056a\3\2\2\2\u056a\u056c\5:\36\2\u056b\u056d")
        buf.write("\7\u00c4\2\2\u056c\u056b\3\2\2\2\u056c\u056d\3\2\2\2\u056d")
        buf.write("\u056e\3\2\2\2\u056e\u0570\5:\36\2\u056f\u0571\7\u00c4")
        buf.write("\2\2\u0570\u056f\3\2\2\2\u0570\u0571\3\2\2\2\u0571\u0572")
        buf.write("\3\2\2\2\u0572\u0573\5:\36\2\u0573\u0574\7\u00ca\2\2\u0574")
        buf.write("\u0576\3\2\2\2\u0575\u0542\3\2\2\2\u0575\u0553\3\2\2\2")
        buf.write("\u0575\u0564\3\2\2\2\u0576=\3\2\2\2\u0577\u0578\7>\2\2")
        buf.write("\u0578\u0579\7\u00c5\2\2\u0579\u0580\5:\36\2\u057a\u057c")
        buf.write("\7\u00c4\2\2\u057b\u057a\3\2\2\2\u057b\u057c\3\2\2\2\u057c")
        buf.write("\u057d\3\2\2\2\u057d\u057f\5:\36\2\u057e\u057b\3\2\2\2")
        buf.write("\u057f\u0582\3\2\2\2\u0580\u057e\3\2\2\2\u0580\u0581\3")
        buf.write("\2\2\2\u0581\u0583\3\2\2\2\u0582\u0580\3\2\2\2\u0583\u0584")
        buf.write("\7\u00c6\2\2\u0584\u05a2\3\2\2\2\u0585\u0586\7>\2\2\u0586")
        buf.write("\u0587\7\u00c7\2\2\u0587\u058e\5:\36\2\u0588\u058a\7\u00c4")
        buf.write("\2\2\u0589\u0588\3\2\2\2\u0589\u058a\3\2\2\2\u058a\u058b")
        buf.write("\3\2\2\2\u058b\u058d\5:\36\2\u058c\u0589\3\2\2\2\u058d")
        buf.write("\u0590\3\2\2\2\u058e\u058c\3\2\2\2\u058e\u058f\3\2\2\2")
        buf.write("\u058f\u0591\3\2\2\2\u0590\u058e\3\2\2\2\u0591\u0592\7")
        buf.write("\u00c8\2\2\u0592\u05a2\3\2\2\2\u0593\u0594\7>\2\2\u0594")
        buf.write("\u0595\7\u00c9\2\2\u0595\u059c\5:\36\2\u0596\u0598\7\u00c4")
        buf.write("\2\2\u0597\u0596\3\2\2\2\u0597\u0598\3\2\2\2\u0598\u0599")
        buf.write("\3\2\2\2\u0599\u059b\5:\36\2\u059a\u0597\3\2\2\2\u059b")
        buf.write("\u059e\3\2\2\2\u059c\u059a\3\2\2\2\u059c\u059d\3\2\2\2")
        buf.write("\u059d\u059f\3\2\2\2\u059e\u059c\3\2\2\2\u059f\u05a0\7")
        buf.write("\u00ca\2\2\u05a0\u05a2\3\2\2\2\u05a1\u0577\3\2\2\2\u05a1")
        buf.write("\u0585\3\2\2\2\u05a1\u0593\3\2\2\2\u05a2?\3\2\2\2\u00b7")
        buf.write("CIOU[agp\u008f\u0095\u009b\u00a1\u00a7\u00ad\u00b3\u00b9")
        buf.write("\u00bc\u00cc\u00d6\u00dc\u00e2\u00ef\u00ff\u0108\u0118")
        buf.write("\u0122\u0128\u012e\u0137\u0147\u0150\u0160\u016a\u0170")
        buf.write("\u0176\u017f\u018f\u0198\u01aa\u01b0\u01b6\u01bf\u01cf")
        buf.write("\u01d8\u01ea\u01f0\u01f6\u01ff\u020f\u0218\u0228\u0232")
        buf.write("\u0238\u023e\u0247\u0257\u0260\u0270\u027a\u0280\u0286")
        buf.write("\u028f\u029f\u02a8\u02b8\u02c2\u02c8\u02ce\u02d7\u02e7")
        buf.write("\u02f0\u0310\u0316\u0318\u031e\u0330\u0339\u034d\u034f")
        buf.write("\u0355\u0369\u0376\u0378\u037e\u0387\u0390\u039a\u03a0")
        buf.write("\u03a2\u03a8\u03b1\u03ba\u03c4\u03c6\u03cc\u03d5\u03de")
        buf.write("\u03e3\u03e9\u03ed\u03f6\u03fa\u0403\u0407\u040c\u0412")
        buf.write("\u0416\u041a\u0423\u0427\u042b\u0434\u0438\u043c\u0441")
        buf.write("\u0447\u044b\u044f\u0458\u045c\u0460\u0469\u046d\u0471")
        buf.write("\u0476\u047c\u0480\u0484\u0488\u048c\u0495\u0499\u049d")
        buf.write("\u04a1\u04a5\u04ae\u04b2\u04b6\u04ba\u04be\u04c3\u04c9")
        buf.write("\u04cd\u04d1\u04d5\u04d9\u04dd\u04e1\u04ea\u04ee\u04f2")
        buf.write("\u04f6\u04fa\u04fe\u0502\u050b\u050f\u0513\u0517\u051b")
        buf.write("\u051f\u0523\u0528\u0540\u0546\u054a\u054e\u0557\u055b")
        buf.write("\u055f\u0568\u056c\u0570\u0575\u057b\u0580\u0589\u058e")
        buf.write("\u0597\u059c\u05a1")
        return buf.getvalue()


class AmberMRParser ( Parser ):

    grammarFileName = "AmberMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'&'" ]

    symbolicNames = [ "<INVALID>", "END", "RST", "IAT", "RSTWT", "RESTRAINT", 
                      "ATNAM", "IRESID", "NSTEP1", "NSTEP2", "IRSTYP", "IALTD", 
                      "IFVARI", "NINC", "IMULT", "R1", "R2", "R3", "R4", 
                      "RK2", "RK3", "R1A", "R2A", "R3A", "R4A", "RK2A", 
                      "RK3A", "R0", "K0", "R0A", "K0A", "RJCOEF", "IGR1", 
                      "IGR2", "IGR3", "IGR4", "IGR5", "IGR6", "IGR7", "IGR8", 
                      "FXYZ", "OUTXYZ", "GRNAM1", "GRNAM2", "GRNAM3", "GRNAM4", 
                      "GRNAM5", "GRNAM6", "GRNAM7", "GRNAM8", "IR6", "IFNTYP", 
                      "IXPK", "NXPK", "ICONSTR", "DISTANCE_F", "ANGLE_F", 
                      "TORSION_F", "COORDINATE_F", "PLANE_F", "COM_F", "NOEEXP", 
                      "NPEAK", "EMIX", "IHP", "JHP", "AEXP", "ARANGE", "AWT", 
                      "INVWT1", "INVWT2", "OMEGA", "TAUROT", "TAUMET", "ID2O", 
                      "OSCALE", "SHF", "NRING", "NATR", "IATR", "NAMR", 
                      "STR", "IPROT", "OBS", "SHRANG", "WT", "NPROT", "SHCUT", 
                      "NTER", "CTER", "PCSHF", "NME", "NMPMC", "OPTPHI", 
                      "OPTTET", "OPTOMG", "OPTA1", "OPTA2", "OPTKON", "TOLPRO", 
                      "MLTPRO", "ALIGN", "NDIP", "ID", "JD", "DOBSL", "DOBSU", 
                      "DWT", "DATASET", "NUM_DATASET", "S11", "S12", "S13", 
                      "S22", "S23", "GIGJ", "DIJ", "DCUT", "FREEZEMOL", 
                      "CSA", "NCSA", "ICSA", "JCSA", "KCSA", "COBSL", "COBSU", 
                      "CWT", "DATASETC", "FIELD", "SIGMA11", "SIGMA12", 
                      "SIGMA13", "SIGMA22", "SIGMA23", "CCUT", "Comma", 
                      "Ampersand", "COMMENT", "Logical", "L_paren", "R_paren", 
                      "L_brace", "R_brace", "L_brakt", "R_brakt", "Equ_op", 
                      "L_QUOT", "SPACE", "HIDDEN_COMMENT", "EMPTY_LINE_COMMENT", 
                      "Simple_name", "SPACE_C", "RETURN_C", "Equ_op_IP", 
                      "L_paren_IP", "Integer", "SPACE_IP", "Equ_op_RP", 
                      "L_paren_RP", "Real", "SPACE_RP", "Equ_op_BP", "BoolInt", 
                      "SPACE_BP", "L_paren_IA", "Equ_op_IA", "Comma_IA", 
                      "Asterisk_IA", "Integers", "MultiplicativeInt", "SPACE_IA", 
                      "L_paren_RA", "Equ_op_RA", "Comma_RA", "Asterisk_RA", 
                      "Reals", "MultiplicativeReal", "SPACE_RA", "Equ_op_BA", 
                      "Comma_BA", "BoolInts", "SPACE_BA", "L_paren_QA", 
                      "Equ_op_QA", "Comma_QA", "Qstrings", "SPACE_QA", "Comma_ARG", 
                      "R_paren_ARG", "Decimal", "SPACE_ARG", "Int_F", "Real_F", 
                      "Ambmask_F", "Comma_F", "L_paren_F", "R_paren_F", 
                      "L_brace_F", "R_brace_F", "L_brakt_F", "R_brakt_F", 
                      "R_QUOT", "SPACE_F" ]

    RULE_amber_mr = 0
    RULE_comment = 1
    RULE_nmr_restraint = 2
    RULE_noesy_volume_restraint = 3
    RULE_chemical_shift_restraint = 4
    RULE_pcs_restraint = 5
    RULE_dipolar_coupling_restraint = 6
    RULE_csa_restraint = 7
    RULE_restraint_statement = 8
    RULE_distance_statement = 9
    RULE_angle_statement = 10
    RULE_torsion_statement = 11
    RULE_plane_point_angle_statement = 12
    RULE_plane_plane_angle_statement = 13
    RULE_general_distance2_statement = 14
    RULE_general_distance3_statement = 15
    RULE_general_distance4_statement = 16
    RULE_noeexp_statement = 17
    RULE_shf_statement = 18
    RULE_pcshf_statement = 19
    RULE_align_statement = 20
    RULE_csa_statement = 21
    RULE_distance_rst_func_call = 22
    RULE_angle_rst_func_call = 23
    RULE_torsion_rst_func_call = 24
    RULE_coordinate2_rst_func_call = 25
    RULE_coordinate3_rst_func_call = 26
    RULE_coordinate4_rst_func_call = 27
    RULE_restraint_func_expr = 28
    RULE_plane_rst_func_call = 29
    RULE_com_rst_fun_call = 30

    ruleNames =  [ "amber_mr", "comment", "nmr_restraint", "noesy_volume_restraint", 
                   "chemical_shift_restraint", "pcs_restraint", "dipolar_coupling_restraint", 
                   "csa_restraint", "restraint_statement", "distance_statement", 
                   "angle_statement", "torsion_statement", "plane_point_angle_statement", 
                   "plane_plane_angle_statement", "general_distance2_statement", 
                   "general_distance3_statement", "general_distance4_statement", 
                   "noeexp_statement", "shf_statement", "pcshf_statement", 
                   "align_statement", "csa_statement", "distance_rst_func_call", 
                   "angle_rst_func_call", "torsion_rst_func_call", "coordinate2_rst_func_call", 
                   "coordinate3_rst_func_call", "coordinate4_rst_func_call", 
                   "restraint_func_expr", "plane_rst_func_call", "com_rst_fun_call" ]

    EOF = Token.EOF
    END=1
    RST=2
    IAT=3
    RSTWT=4
    RESTRAINT=5
    ATNAM=6
    IRESID=7
    NSTEP1=8
    NSTEP2=9
    IRSTYP=10
    IALTD=11
    IFVARI=12
    NINC=13
    IMULT=14
    R1=15
    R2=16
    R3=17
    R4=18
    RK2=19
    RK3=20
    R1A=21
    R2A=22
    R3A=23
    R4A=24
    RK2A=25
    RK3A=26
    R0=27
    K0=28
    R0A=29
    K0A=30
    RJCOEF=31
    IGR1=32
    IGR2=33
    IGR3=34
    IGR4=35
    IGR5=36
    IGR6=37
    IGR7=38
    IGR8=39
    FXYZ=40
    OUTXYZ=41
    GRNAM1=42
    GRNAM2=43
    GRNAM3=44
    GRNAM4=45
    GRNAM5=46
    GRNAM6=47
    GRNAM7=48
    GRNAM8=49
    IR6=50
    IFNTYP=51
    IXPK=52
    NXPK=53
    ICONSTR=54
    DISTANCE_F=55
    ANGLE_F=56
    TORSION_F=57
    COORDINATE_F=58
    PLANE_F=59
    COM_F=60
    NOEEXP=61
    NPEAK=62
    EMIX=63
    IHP=64
    JHP=65
    AEXP=66
    ARANGE=67
    AWT=68
    INVWT1=69
    INVWT2=70
    OMEGA=71
    TAUROT=72
    TAUMET=73
    ID2O=74
    OSCALE=75
    SHF=76
    NRING=77
    NATR=78
    IATR=79
    NAMR=80
    STR=81
    IPROT=82
    OBS=83
    SHRANG=84
    WT=85
    NPROT=86
    SHCUT=87
    NTER=88
    CTER=89
    PCSHF=90
    NME=91
    NMPMC=92
    OPTPHI=93
    OPTTET=94
    OPTOMG=95
    OPTA1=96
    OPTA2=97
    OPTKON=98
    TOLPRO=99
    MLTPRO=100
    ALIGN=101
    NDIP=102
    ID=103
    JD=104
    DOBSL=105
    DOBSU=106
    DWT=107
    DATASET=108
    NUM_DATASET=109
    S11=110
    S12=111
    S13=112
    S22=113
    S23=114
    GIGJ=115
    DIJ=116
    DCUT=117
    FREEZEMOL=118
    CSA=119
    NCSA=120
    ICSA=121
    JCSA=122
    KCSA=123
    COBSL=124
    COBSU=125
    CWT=126
    DATASETC=127
    FIELD=128
    SIGMA11=129
    SIGMA12=130
    SIGMA13=131
    SIGMA22=132
    SIGMA23=133
    CCUT=134
    Comma=135
    Ampersand=136
    COMMENT=137
    Logical=138
    L_paren=139
    R_paren=140
    L_brace=141
    R_brace=142
    L_brakt=143
    R_brakt=144
    Equ_op=145
    L_QUOT=146
    SPACE=147
    HIDDEN_COMMENT=148
    EMPTY_LINE_COMMENT=149
    Simple_name=150
    SPACE_C=151
    RETURN_C=152
    Equ_op_IP=153
    L_paren_IP=154
    Integer=155
    SPACE_IP=156
    Equ_op_RP=157
    L_paren_RP=158
    Real=159
    SPACE_RP=160
    Equ_op_BP=161
    BoolInt=162
    SPACE_BP=163
    L_paren_IA=164
    Equ_op_IA=165
    Comma_IA=166
    Asterisk_IA=167
    Integers=168
    MultiplicativeInt=169
    SPACE_IA=170
    L_paren_RA=171
    Equ_op_RA=172
    Comma_RA=173
    Asterisk_RA=174
    Reals=175
    MultiplicativeReal=176
    SPACE_RA=177
    Equ_op_BA=178
    Comma_BA=179
    BoolInts=180
    SPACE_BA=181
    L_paren_QA=182
    Equ_op_QA=183
    Comma_QA=184
    Qstrings=185
    SPACE_QA=186
    Comma_ARG=187
    R_paren_ARG=188
    Decimal=189
    SPACE_ARG=190
    Int_F=191
    Real_F=192
    Ambmask_F=193
    Comma_F=194
    L_paren_F=195
    R_paren_F=196
    L_brace_F=197
    R_brace_F=198
    L_brakt_F=199
    R_brakt_F=200
    R_QUOT=201
    SPACE_F=202

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Amber_mrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(AmberMRParser.EOF, 0)

        def comment(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.CommentContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.CommentContext,i)


        def nmr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Nmr_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Nmr_restraintContext,i)


        def noesy_volume_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Noesy_volume_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Noesy_volume_restraintContext,i)


        def chemical_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Chemical_shift_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Chemical_shift_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Pcs_restraintContext,i)


        def dipolar_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Dipolar_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Dipolar_coupling_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Csa_restraintContext,i)


        def getRuleIndex(self):
            return AmberMRParser.RULE_amber_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAmber_mr" ):
                listener.enterAmber_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAmber_mr" ):
                listener.exitAmber_mr(self)




    def amber_mr(self):

        localctx = AmberMRParser.Amber_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_amber_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 65
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AmberMRParser.COMMENT:
                self.state = 62
                self.comment()
                self.state = 67
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 71
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AmberMRParser.RST:
                self.state = 68
                self.nmr_restraint()
                self.state = 73
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 77
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AmberMRParser.NOEEXP:
                self.state = 74
                self.noesy_volume_restraint()
                self.state = 79
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 83
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AmberMRParser.SHF:
                self.state = 80
                self.chemical_shift_restraint()
                self.state = 85
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 89
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AmberMRParser.PCSHF:
                self.state = 86
                self.pcs_restraint()
                self.state = 91
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 95
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AmberMRParser.ALIGN:
                self.state = 92
                self.dipolar_coupling_restraint()
                self.state = 97
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 101
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==AmberMRParser.CSA:
                self.state = 98
                self.csa_restraint()
                self.state = 103
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 104
            self.match(AmberMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMMENT(self):
            return self.getToken(AmberMRParser.COMMENT, 0)

        def RETURN_C(self):
            return self.getToken(AmberMRParser.RETURN_C, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Simple_name)
            else:
                return self.getToken(AmberMRParser.Simple_name, i)

        def getRuleIndex(self):
            return AmberMRParser.RULE_comment

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComment" ):
                listener.enterComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComment" ):
                listener.exitComment(self)




    def comment(self):

        localctx = AmberMRParser.CommentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_comment)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 106
            self.match(AmberMRParser.COMMENT)
            self.state = 108 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 107
                self.match(AmberMRParser.Simple_name)
                self.state = 110 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==AmberMRParser.Simple_name):
                    break

            self.state = 112
            self.match(AmberMRParser.RETURN_C)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Nmr_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RST(self):
            return self.getToken(AmberMRParser.RST, 0)

        def restraint_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Restraint_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_nmr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNmr_restraint" ):
                listener.enterNmr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNmr_restraint" ):
                listener.exitNmr_restraint(self)




    def nmr_restraint(self):

        localctx = AmberMRParser.Nmr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_nmr_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 114
            self.match(AmberMRParser.RST)
            self.state = 115
            self.restraint_statement()
            self.state = 116
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noesy_volume_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOEEXP(self):
            return self.getToken(AmberMRParser.NOEEXP, 0)

        def noeexp_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Noeexp_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_noesy_volume_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoesy_volume_restraint" ):
                listener.enterNoesy_volume_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoesy_volume_restraint" ):
                listener.exitNoesy_volume_restraint(self)




    def noesy_volume_restraint(self):

        localctx = AmberMRParser.Noesy_volume_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_noesy_volume_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 118
            self.match(AmberMRParser.NOEEXP)
            self.state = 119
            self.noeexp_statement()
            self.state = 120
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Chemical_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHF(self):
            return self.getToken(AmberMRParser.SHF, 0)

        def shf_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Shf_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_chemical_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChemical_shift_restraint" ):
                listener.enterChemical_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChemical_shift_restraint" ):
                listener.exitChemical_shift_restraint(self)




    def chemical_shift_restraint(self):

        localctx = AmberMRParser.Chemical_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_chemical_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 122
            self.match(AmberMRParser.SHF)
            self.state = 123
            self.shf_statement()
            self.state = 124
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PCSHF(self):
            return self.getToken(AmberMRParser.PCSHF, 0)

        def pcshf_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Pcshf_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = AmberMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_pcs_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 126
            self.match(AmberMRParser.PCSHF)
            self.state = 127
            self.pcshf_statement()
            self.state = 128
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dipolar_coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALIGN(self):
            return self.getToken(AmberMRParser.ALIGN, 0)

        def align_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Align_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_dipolar_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDipolar_coupling_restraint" ):
                listener.enterDipolar_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDipolar_coupling_restraint" ):
                listener.exitDipolar_coupling_restraint(self)




    def dipolar_coupling_restraint(self):

        localctx = AmberMRParser.Dipolar_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_dipolar_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 130
            self.match(AmberMRParser.ALIGN)
            self.state = 131
            self.align_statement()
            self.state = 132
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CSA(self):
            return self.getToken(AmberMRParser.CSA, 0)

        def csa_statement(self):
            return self.getTypedRuleContext(AmberMRParser.Csa_statementContext,0)


        def END(self):
            return self.getToken(AmberMRParser.END, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = AmberMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_csa_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 134
            self.match(AmberMRParser.CSA)
            self.state = 135
            self.csa_statement()
            self.state = 136
            self.match(AmberMRParser.END)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restraint_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def distance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Distance_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Distance_statementContext,i)


        def angle_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Angle_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Angle_statementContext,i)


        def torsion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Torsion_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Torsion_statementContext,i)


        def plane_point_angle_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Plane_point_angle_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Plane_point_angle_statementContext,i)


        def plane_plane_angle_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Plane_plane_angle_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Plane_plane_angle_statementContext,i)


        def general_distance2_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.General_distance2_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.General_distance2_statementContext,i)


        def general_distance3_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.General_distance3_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.General_distance3_statementContext,i)


        def general_distance4_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.General_distance4_statementContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.General_distance4_statementContext,i)


        def getRuleIndex(self):
            return AmberMRParser.RULE_restraint_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestraint_statement" ):
                listener.enterRestraint_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestraint_statement" ):
                listener.exitRestraint_statement(self)




    def restraint_statement(self):

        localctx = AmberMRParser.Restraint_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_restraint_statement)
        self._la = 0 # Token type
        try:
            self.state = 186
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.RESTRAINT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.FXYZ) | (1 << AmberMRParser.OUTXYZ) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.IR6) | (1 << AmberMRParser.IFNTYP) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK) | (1 << AmberMRParser.ICONSTR))) != 0):
                    self.state = 138
                    self.distance_statement()
                    self.state = 143
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.RESTRAINT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.IFNTYP) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0):
                    self.state = 144
                    self.angle_statement()
                    self.state = 149
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.RESTRAINT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.RJCOEF) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.IFNTYP) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0):
                    self.state = 150
                    self.torsion_statement()
                    self.state = 155
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0):
                    self.state = 156
                    self.plane_point_angle_statement()
                    self.state = 161
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0):
                    self.state = 162
                    self.plane_plane_angle_statement()
                    self.state = 167
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.RESTRAINT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.IFNTYP) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0):
                    self.state = 168
                    self.general_distance2_statement()
                    self.state = 173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.RESTRAINT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.IFNTYP) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0):
                    self.state = 174
                    self.general_distance3_statement()
                    self.state = 179
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.RSTWT) | (1 << AmberMRParser.RESTRAINT) | (1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.IRESID) | (1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8) | (1 << AmberMRParser.IFNTYP) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0):
                    self.state = 180
                    self.general_distance4_statement()
                    self.state = 185
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def RESTRAINT(self):
            return self.getToken(AmberMRParser.RESTRAINT, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def L_QUOT(self):
            return self.getToken(AmberMRParser.L_QUOT, 0)

        def distance_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Distance_rst_func_callContext,0)


        def R_QUOT(self):
            return self.getToken(AmberMRParser.R_QUOT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IALTD(self):
            return self.getToken(AmberMRParser.IALTD, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def OUTXYZ(self):
            return self.getToken(AmberMRParser.OUTXYZ, 0)

        def IR6(self):
            return self.getToken(AmberMRParser.IR6, 0)

        def IFNTYP(self):
            return self.getToken(AmberMRParser.IFNTYP, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def ICONSTR(self):
            return self.getToken(AmberMRParser.ICONSTR, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def FXYZ(self):
            return self.getToken(AmberMRParser.FXYZ, 0)

        def Equ_op_BA(self):
            return self.getToken(AmberMRParser.Equ_op_BA, 0)

        def BoolInts(self):
            return self.getToken(AmberMRParser.BoolInts, 0)

        def Comma_BA(self):
            return self.getToken(AmberMRParser.Comma_BA, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_distance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_statement" ):
                listener.enterDistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_statement" ):
                listener.exitDistance_statement(self)




    def distance_statement(self):

        localctx = AmberMRParser.Distance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_distance_statement)
        self._la = 0 # Token type
        try:
            self.state = 262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,23,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 188
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 189
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 190
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 191
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 192
                self.match(AmberMRParser.RSTWT)
                self.state = 193
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 194
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 195
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 196
                self.match(AmberMRParser.RESTRAINT)
                self.state = 197
                self.match(AmberMRParser.Equ_op)
                self.state = 198
                self.match(AmberMRParser.L_QUOT)
                self.state = 199
                self.distance_rst_func_call()
                self.state = 200
                self.match(AmberMRParser.R_QUOT)
                self.state = 202
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 201
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 204
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 205
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 206
                self.match(AmberMRParser.Qstrings)
                self.state = 207
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 208
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.OUTXYZ) | (1 << AmberMRParser.IR6) | (1 << AmberMRParser.IFNTYP))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 209
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 210
                self.match(AmberMRParser.BoolInt)
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 211
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 214
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK) | (1 << AmberMRParser.ICONSTR))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 215
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 216
                self.match(AmberMRParser.Integer)
                self.state = 218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 217
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 220
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 221
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 222
                self.match(AmberMRParser.Real)
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 223
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 226
                self.match(AmberMRParser.FXYZ)
                self.state = 227
                self.match(AmberMRParser.Equ_op_BA)
                self.state = 228
                self.match(AmberMRParser.BoolInts)
                self.state = 229
                self.match(AmberMRParser.Comma_BA)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 230
                self.match(AmberMRParser.IAT)
                self.state = 231
                self.match(AmberMRParser.L_paren_IP)
                self.state = 232
                self.match(AmberMRParser.Decimal)
                self.state = 233
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 234
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 235
                self.match(AmberMRParser.Integer)
                self.state = 237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 236
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 239
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.IGR1 or _la==AmberMRParser.IGR2):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 240
                self.match(AmberMRParser.L_paren_IA)
                self.state = 241
                self.match(AmberMRParser.Decimal)
                self.state = 242
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 243
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 244
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 245
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 246
                self.match(AmberMRParser.RSTWT)
                self.state = 247
                self.match(AmberMRParser.L_paren_RP)
                self.state = 248
                self.match(AmberMRParser.Decimal)
                self.state = 249
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 250
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 251
                self.match(AmberMRParser.Real)
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 252
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 255
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 256
                self.match(AmberMRParser.L_paren_QA)
                self.state = 257
                self.match(AmberMRParser.Decimal)
                self.state = 258
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 259
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 260
                self.match(AmberMRParser.Qstrings)
                self.state = 261
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def RESTRAINT(self):
            return self.getToken(AmberMRParser.RESTRAINT, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def L_QUOT(self):
            return self.getToken(AmberMRParser.L_QUOT, 0)

        def angle_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Angle_rst_func_callContext,0)


        def R_QUOT(self):
            return self.getToken(AmberMRParser.R_QUOT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def IFNTYP(self):
            return self.getToken(AmberMRParser.IFNTYP, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_angle_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_statement" ):
                listener.enterAngle_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_statement" ):
                listener.exitAngle_statement(self)




    def angle_statement(self):

        localctx = AmberMRParser.Angle_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_angle_statement)
        self._la = 0 # Token type
        try:
            self.state = 334
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 264
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 265
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 266
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 267
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 268
                self.match(AmberMRParser.RSTWT)
                self.state = 269
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 270
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 271
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 272
                self.match(AmberMRParser.RESTRAINT)
                self.state = 273
                self.match(AmberMRParser.Equ_op)
                self.state = 274
                self.match(AmberMRParser.L_QUOT)
                self.state = 275
                self.angle_rst_func_call()
                self.state = 276
                self.match(AmberMRParser.R_QUOT)
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 277
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 280
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 281
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 282
                self.match(AmberMRParser.Qstrings)
                self.state = 283
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 284
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.IFNTYP))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 285
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 286
                self.match(AmberMRParser.BoolInt)
                self.state = 288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 287
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 290
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 291
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 292
                self.match(AmberMRParser.Integer)
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 293
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 296
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 297
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 298
                self.match(AmberMRParser.Real)
                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 299
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 302
                self.match(AmberMRParser.IAT)
                self.state = 303
                self.match(AmberMRParser.L_paren_IP)
                self.state = 304
                self.match(AmberMRParser.Decimal)
                self.state = 305
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 306
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 307
                self.match(AmberMRParser.Integer)
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 308
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 311
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 312
                self.match(AmberMRParser.L_paren_IA)
                self.state = 313
                self.match(AmberMRParser.Decimal)
                self.state = 314
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 315
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 316
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 317
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 318
                self.match(AmberMRParser.RSTWT)
                self.state = 319
                self.match(AmberMRParser.L_paren_RP)
                self.state = 320
                self.match(AmberMRParser.Decimal)
                self.state = 321
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 322
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 323
                self.match(AmberMRParser.Real)
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 324
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 327
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 328
                self.match(AmberMRParser.L_paren_QA)
                self.state = 329
                self.match(AmberMRParser.Decimal)
                self.state = 330
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 331
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 332
                self.match(AmberMRParser.Qstrings)
                self.state = 333
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def IGR4(self):
            return self.getToken(AmberMRParser.IGR4, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def RJCOEF(self):
            return self.getToken(AmberMRParser.RJCOEF, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def RESTRAINT(self):
            return self.getToken(AmberMRParser.RESTRAINT, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def L_QUOT(self):
            return self.getToken(AmberMRParser.L_QUOT, 0)

        def torsion_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Torsion_rst_func_callContext,0)


        def R_QUOT(self):
            return self.getToken(AmberMRParser.R_QUOT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def GRNAM4(self):
            return self.getToken(AmberMRParser.GRNAM4, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def IFNTYP(self):
            return self.getToken(AmberMRParser.IFNTYP, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_torsion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_statement" ):
                listener.enterTorsion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_statement" ):
                listener.exitTorsion_statement(self)




    def torsion_statement(self):

        localctx = AmberMRParser.Torsion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_torsion_statement)
        self._la = 0 # Token type
        try:
            self.state = 406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 336
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 337
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 338
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 339
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 340
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.RSTWT or _la==AmberMRParser.RJCOEF):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 341
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 342
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 343
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 344
                self.match(AmberMRParser.RESTRAINT)
                self.state = 345
                self.match(AmberMRParser.Equ_op)
                self.state = 346
                self.match(AmberMRParser.L_QUOT)
                self.state = 347
                self.torsion_rst_func_call()
                self.state = 348
                self.match(AmberMRParser.R_QUOT)
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 349
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 352
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 353
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 354
                self.match(AmberMRParser.Qstrings)
                self.state = 355
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 356
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.IFNTYP))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 357
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 358
                self.match(AmberMRParser.BoolInt)
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 359
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 362
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 363
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 364
                self.match(AmberMRParser.Integer)
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 365
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 368
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 369
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 370
                self.match(AmberMRParser.Real)
                self.state = 372
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 371
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 374
                self.match(AmberMRParser.IAT)
                self.state = 375
                self.match(AmberMRParser.L_paren_IP)
                self.state = 376
                self.match(AmberMRParser.Decimal)
                self.state = 377
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 378
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 379
                self.match(AmberMRParser.Integer)
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 380
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 383
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 384
                self.match(AmberMRParser.L_paren_IA)
                self.state = 385
                self.match(AmberMRParser.Decimal)
                self.state = 386
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 387
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 388
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 389
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 390
                self.match(AmberMRParser.RSTWT)
                self.state = 391
                self.match(AmberMRParser.L_paren_RP)
                self.state = 392
                self.match(AmberMRParser.Decimal)
                self.state = 393
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 394
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 395
                self.match(AmberMRParser.Real)
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 396
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 399
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 400
                self.match(AmberMRParser.L_paren_QA)
                self.state = 401
                self.match(AmberMRParser.Decimal)
                self.state = 402
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 403
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 404
                self.match(AmberMRParser.Qstrings)
                self.state = 405
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_point_angle_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def IGR4(self):
            return self.getToken(AmberMRParser.IGR4, 0)

        def IGR5(self):
            return self.getToken(AmberMRParser.IGR5, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def GRNAM4(self):
            return self.getToken(AmberMRParser.GRNAM4, 0)

        def GRNAM5(self):
            return self.getToken(AmberMRParser.GRNAM5, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_plane_point_angle_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_point_angle_statement" ):
                listener.enterPlane_point_angle_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_point_angle_statement" ):
                listener.exitPlane_point_angle_statement(self)




    def plane_point_angle_statement(self):

        localctx = AmberMRParser.Plane_point_angle_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_plane_point_angle_statement)
        self._la = 0 # Token type
        try:
            self.state = 470
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 408
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 409
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 410
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 411
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 412
                self.match(AmberMRParser.RSTWT)
                self.state = 413
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 414
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 415
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 416
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 417
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 418
                self.match(AmberMRParser.Qstrings)
                self.state = 419
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 420
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IMULT))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 421
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 422
                self.match(AmberMRParser.BoolInt)
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 423
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 426
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 427
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 428
                self.match(AmberMRParser.Integer)
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 429
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 432
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 433
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 434
                self.match(AmberMRParser.Real)
                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 435
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 438
                self.match(AmberMRParser.IAT)
                self.state = 439
                self.match(AmberMRParser.L_paren_IP)
                self.state = 440
                self.match(AmberMRParser.Decimal)
                self.state = 441
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 442
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 443
                self.match(AmberMRParser.Integer)
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 444
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 447
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 448
                self.match(AmberMRParser.L_paren_IA)
                self.state = 449
                self.match(AmberMRParser.Decimal)
                self.state = 450
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 451
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 452
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 453
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 454
                self.match(AmberMRParser.RSTWT)
                self.state = 455
                self.match(AmberMRParser.L_paren_RP)
                self.state = 456
                self.match(AmberMRParser.Decimal)
                self.state = 457
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 458
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 459
                self.match(AmberMRParser.Real)
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 460
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 463
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 464
                self.match(AmberMRParser.L_paren_QA)
                self.state = 465
                self.match(AmberMRParser.Decimal)
                self.state = 466
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 467
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 468
                self.match(AmberMRParser.Qstrings)
                self.state = 469
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_plane_angle_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def IGR4(self):
            return self.getToken(AmberMRParser.IGR4, 0)

        def IGR5(self):
            return self.getToken(AmberMRParser.IGR5, 0)

        def IGR6(self):
            return self.getToken(AmberMRParser.IGR6, 0)

        def IGR7(self):
            return self.getToken(AmberMRParser.IGR7, 0)

        def IGR8(self):
            return self.getToken(AmberMRParser.IGR8, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def GRNAM4(self):
            return self.getToken(AmberMRParser.GRNAM4, 0)

        def GRNAM5(self):
            return self.getToken(AmberMRParser.GRNAM5, 0)

        def GRNAM6(self):
            return self.getToken(AmberMRParser.GRNAM6, 0)

        def GRNAM7(self):
            return self.getToken(AmberMRParser.GRNAM7, 0)

        def GRNAM8(self):
            return self.getToken(AmberMRParser.GRNAM8, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_plane_plane_angle_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_plane_angle_statement" ):
                listener.enterPlane_plane_angle_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_plane_angle_statement" ):
                listener.exitPlane_plane_angle_statement(self)




    def plane_plane_angle_statement(self):

        localctx = AmberMRParser.Plane_plane_angle_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_plane_plane_angle_statement)
        self._la = 0 # Token type
        try:
            self.state = 534
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,49,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 472
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 473
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 474
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 475
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 476
                self.match(AmberMRParser.RSTWT)
                self.state = 477
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 478
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 479
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 480
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 481
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 482
                self.match(AmberMRParser.Qstrings)
                self.state = 483
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 484
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IMULT))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 485
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 486
                self.match(AmberMRParser.BoolInt)
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 487
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 490
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 491
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 492
                self.match(AmberMRParser.Integer)
                self.state = 494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 493
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 496
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 497
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 498
                self.match(AmberMRParser.Real)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 499
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 502
                self.match(AmberMRParser.IAT)
                self.state = 503
                self.match(AmberMRParser.L_paren_IP)
                self.state = 504
                self.match(AmberMRParser.Decimal)
                self.state = 505
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 506
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 507
                self.match(AmberMRParser.Integer)
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 508
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 511
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 512
                self.match(AmberMRParser.L_paren_IA)
                self.state = 513
                self.match(AmberMRParser.Decimal)
                self.state = 514
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 515
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 516
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 517
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 518
                self.match(AmberMRParser.RSTWT)
                self.state = 519
                self.match(AmberMRParser.L_paren_RP)
                self.state = 520
                self.match(AmberMRParser.Decimal)
                self.state = 521
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 522
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 523
                self.match(AmberMRParser.Real)
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 524
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 527
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 528
                self.match(AmberMRParser.L_paren_QA)
                self.state = 529
                self.match(AmberMRParser.Decimal)
                self.state = 530
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 531
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 532
                self.match(AmberMRParser.Qstrings)
                self.state = 533
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_distance2_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def IGR4(self):
            return self.getToken(AmberMRParser.IGR4, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def RESTRAINT(self):
            return self.getToken(AmberMRParser.RESTRAINT, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def L_QUOT(self):
            return self.getToken(AmberMRParser.L_QUOT, 0)

        def coordinate2_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Coordinate2_rst_func_callContext,0)


        def R_QUOT(self):
            return self.getToken(AmberMRParser.R_QUOT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def GRNAM4(self):
            return self.getToken(AmberMRParser.GRNAM4, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IALTD(self):
            return self.getToken(AmberMRParser.IALTD, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def IFNTYP(self):
            return self.getToken(AmberMRParser.IFNTYP, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_general_distance2_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_distance2_statement" ):
                listener.enterGeneral_distance2_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_distance2_statement" ):
                listener.exitGeneral_distance2_statement(self)




    def general_distance2_statement(self):

        localctx = AmberMRParser.General_distance2_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_general_distance2_statement)
        self._la = 0 # Token type
        try:
            self.state = 606
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 536
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 537
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 538
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 539
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 540
                self.match(AmberMRParser.RSTWT)
                self.state = 541
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 542
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 543
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 544
                self.match(AmberMRParser.RESTRAINT)
                self.state = 545
                self.match(AmberMRParser.Equ_op)
                self.state = 546
                self.match(AmberMRParser.L_QUOT)
                self.state = 547
                self.coordinate2_rst_func_call()
                self.state = 548
                self.match(AmberMRParser.R_QUOT)
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 549
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 552
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 553
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 554
                self.match(AmberMRParser.Qstrings)
                self.state = 555
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 556
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.IFNTYP))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 557
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 558
                self.match(AmberMRParser.BoolInt)
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 559
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 562
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 563
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 564
                self.match(AmberMRParser.Integer)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 565
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 568
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 569
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 570
                self.match(AmberMRParser.Real)
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 571
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 574
                self.match(AmberMRParser.IAT)
                self.state = 575
                self.match(AmberMRParser.L_paren_IP)
                self.state = 576
                self.match(AmberMRParser.Decimal)
                self.state = 577
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 578
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 579
                self.match(AmberMRParser.Integer)
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 580
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 583
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 584
                self.match(AmberMRParser.L_paren_IA)
                self.state = 585
                self.match(AmberMRParser.Decimal)
                self.state = 586
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 587
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 588
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 589
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 590
                self.match(AmberMRParser.RSTWT)
                self.state = 591
                self.match(AmberMRParser.L_paren_RP)
                self.state = 592
                self.match(AmberMRParser.Decimal)
                self.state = 593
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 594
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 595
                self.match(AmberMRParser.Real)
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 596
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 599
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 600
                self.match(AmberMRParser.L_paren_QA)
                self.state = 601
                self.match(AmberMRParser.Decimal)
                self.state = 602
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 603
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 604
                self.match(AmberMRParser.Qstrings)
                self.state = 605
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_distance3_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def IGR4(self):
            return self.getToken(AmberMRParser.IGR4, 0)

        def IGR5(self):
            return self.getToken(AmberMRParser.IGR5, 0)

        def IGR6(self):
            return self.getToken(AmberMRParser.IGR6, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def RESTRAINT(self):
            return self.getToken(AmberMRParser.RESTRAINT, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def L_QUOT(self):
            return self.getToken(AmberMRParser.L_QUOT, 0)

        def coordinate3_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Coordinate3_rst_func_callContext,0)


        def R_QUOT(self):
            return self.getToken(AmberMRParser.R_QUOT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def GRNAM4(self):
            return self.getToken(AmberMRParser.GRNAM4, 0)

        def GRNAM5(self):
            return self.getToken(AmberMRParser.GRNAM5, 0)

        def GRNAM6(self):
            return self.getToken(AmberMRParser.GRNAM6, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IALTD(self):
            return self.getToken(AmberMRParser.IALTD, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def IFNTYP(self):
            return self.getToken(AmberMRParser.IFNTYP, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_general_distance3_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_distance3_statement" ):
                listener.enterGeneral_distance3_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_distance3_statement" ):
                listener.exitGeneral_distance3_statement(self)




    def general_distance3_statement(self):

        localctx = AmberMRParser.General_distance3_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_general_distance3_statement)
        self._la = 0 # Token type
        try:
            self.state = 678
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 608
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 609
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 610
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 611
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self.match(AmberMRParser.RSTWT)
                self.state = 613
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 614
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 615
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 616
                self.match(AmberMRParser.RESTRAINT)
                self.state = 617
                self.match(AmberMRParser.Equ_op)
                self.state = 618
                self.match(AmberMRParser.L_QUOT)
                self.state = 619
                self.coordinate3_rst_func_call()
                self.state = 620
                self.match(AmberMRParser.R_QUOT)
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 621
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 624
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 625
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 626
                self.match(AmberMRParser.Qstrings)
                self.state = 627
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 628
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.IFNTYP))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 629
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 630
                self.match(AmberMRParser.BoolInt)
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 631
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 634
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 635
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 636
                self.match(AmberMRParser.Integer)
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 637
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 640
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 641
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 642
                self.match(AmberMRParser.Real)
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 643
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 646
                self.match(AmberMRParser.IAT)
                self.state = 647
                self.match(AmberMRParser.L_paren_IP)
                self.state = 648
                self.match(AmberMRParser.Decimal)
                self.state = 649
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 650
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 651
                self.match(AmberMRParser.Integer)
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 652
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 655
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 656
                self.match(AmberMRParser.L_paren_IA)
                self.state = 657
                self.match(AmberMRParser.Decimal)
                self.state = 658
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 659
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 660
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 661
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 662
                self.match(AmberMRParser.RSTWT)
                self.state = 663
                self.match(AmberMRParser.L_paren_RP)
                self.state = 664
                self.match(AmberMRParser.Decimal)
                self.state = 665
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 666
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 667
                self.match(AmberMRParser.Real)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 668
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 671
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 672
                self.match(AmberMRParser.L_paren_QA)
                self.state = 673
                self.match(AmberMRParser.Decimal)
                self.state = 674
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 675
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 676
                self.match(AmberMRParser.Qstrings)
                self.state = 677
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class General_distance4_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IAT(self):
            return self.getToken(AmberMRParser.IAT, 0)

        def IGR1(self):
            return self.getToken(AmberMRParser.IGR1, 0)

        def IGR2(self):
            return self.getToken(AmberMRParser.IGR2, 0)

        def IGR3(self):
            return self.getToken(AmberMRParser.IGR3, 0)

        def IGR4(self):
            return self.getToken(AmberMRParser.IGR4, 0)

        def IGR5(self):
            return self.getToken(AmberMRParser.IGR5, 0)

        def IGR6(self):
            return self.getToken(AmberMRParser.IGR6, 0)

        def IGR7(self):
            return self.getToken(AmberMRParser.IGR7, 0)

        def IGR8(self):
            return self.getToken(AmberMRParser.IGR8, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def RSTWT(self):
            return self.getToken(AmberMRParser.RSTWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def RESTRAINT(self):
            return self.getToken(AmberMRParser.RESTRAINT, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def L_QUOT(self):
            return self.getToken(AmberMRParser.L_QUOT, 0)

        def coordinate4_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Coordinate4_rst_func_callContext,0)


        def R_QUOT(self):
            return self.getToken(AmberMRParser.R_QUOT, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def ATNAM(self):
            return self.getToken(AmberMRParser.ATNAM, 0)

        def GRNAM1(self):
            return self.getToken(AmberMRParser.GRNAM1, 0)

        def GRNAM2(self):
            return self.getToken(AmberMRParser.GRNAM2, 0)

        def GRNAM3(self):
            return self.getToken(AmberMRParser.GRNAM3, 0)

        def GRNAM4(self):
            return self.getToken(AmberMRParser.GRNAM4, 0)

        def GRNAM5(self):
            return self.getToken(AmberMRParser.GRNAM5, 0)

        def GRNAM6(self):
            return self.getToken(AmberMRParser.GRNAM6, 0)

        def GRNAM7(self):
            return self.getToken(AmberMRParser.GRNAM7, 0)

        def GRNAM8(self):
            return self.getToken(AmberMRParser.GRNAM8, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def IRESID(self):
            return self.getToken(AmberMRParser.IRESID, 0)

        def IRSTYP(self):
            return self.getToken(AmberMRParser.IRSTYP, 0)

        def IALTD(self):
            return self.getToken(AmberMRParser.IALTD, 0)

        def IMULT(self):
            return self.getToken(AmberMRParser.IMULT, 0)

        def IFNTYP(self):
            return self.getToken(AmberMRParser.IFNTYP, 0)

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NSTEP1(self):
            return self.getToken(AmberMRParser.NSTEP1, 0)

        def NSTEP2(self):
            return self.getToken(AmberMRParser.NSTEP2, 0)

        def IFVARI(self):
            return self.getToken(AmberMRParser.IFVARI, 0)

        def NINC(self):
            return self.getToken(AmberMRParser.NINC, 0)

        def IXPK(self):
            return self.getToken(AmberMRParser.IXPK, 0)

        def NXPK(self):
            return self.getToken(AmberMRParser.NXPK, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def R1(self):
            return self.getToken(AmberMRParser.R1, 0)

        def R2(self):
            return self.getToken(AmberMRParser.R2, 0)

        def R3(self):
            return self.getToken(AmberMRParser.R3, 0)

        def R4(self):
            return self.getToken(AmberMRParser.R4, 0)

        def RK2(self):
            return self.getToken(AmberMRParser.RK2, 0)

        def RK3(self):
            return self.getToken(AmberMRParser.RK3, 0)

        def R1A(self):
            return self.getToken(AmberMRParser.R1A, 0)

        def R2A(self):
            return self.getToken(AmberMRParser.R2A, 0)

        def R3A(self):
            return self.getToken(AmberMRParser.R3A, 0)

        def R4A(self):
            return self.getToken(AmberMRParser.R4A, 0)

        def RK2A(self):
            return self.getToken(AmberMRParser.RK2A, 0)

        def RK3A(self):
            return self.getToken(AmberMRParser.RK3A, 0)

        def R0(self):
            return self.getToken(AmberMRParser.R0, 0)

        def K0(self):
            return self.getToken(AmberMRParser.K0, 0)

        def R0A(self):
            return self.getToken(AmberMRParser.R0A, 0)

        def K0A(self):
            return self.getToken(AmberMRParser.K0A, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_general_distance4_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneral_distance4_statement" ):
                listener.enterGeneral_distance4_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneral_distance4_statement" ):
                listener.exitGeneral_distance4_statement(self)




    def general_distance4_statement(self):

        localctx = AmberMRParser.General_distance4_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_general_distance4_statement)
        self._la = 0 # Token type
        try:
            self.state = 750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 680
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IAT) | (1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 681
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 682
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 683
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 684
                self.match(AmberMRParser.RSTWT)
                self.state = 685
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 686
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 687
                self.match(AmberMRParser.Comma_RA)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 688
                self.match(AmberMRParser.RESTRAINT)
                self.state = 689
                self.match(AmberMRParser.Equ_op)
                self.state = 690
                self.match(AmberMRParser.L_QUOT)
                self.state = 691
                self.coordinate4_rst_func_call()
                self.state = 692
                self.match(AmberMRParser.R_QUOT)
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 693
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 696
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 697
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 698
                self.match(AmberMRParser.Qstrings)
                self.state = 699
                self.match(AmberMRParser.Comma_QA)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 700
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IRESID) | (1 << AmberMRParser.IRSTYP) | (1 << AmberMRParser.IALTD) | (1 << AmberMRParser.IMULT) | (1 << AmberMRParser.IFNTYP))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 701
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 702
                self.match(AmberMRParser.BoolInt)
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 703
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 706
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.NSTEP1) | (1 << AmberMRParser.NSTEP2) | (1 << AmberMRParser.IFVARI) | (1 << AmberMRParser.NINC) | (1 << AmberMRParser.IXPK) | (1 << AmberMRParser.NXPK))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 707
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 708
                self.match(AmberMRParser.Integer)
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 709
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 712
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.R1) | (1 << AmberMRParser.R2) | (1 << AmberMRParser.R3) | (1 << AmberMRParser.R4) | (1 << AmberMRParser.RK2) | (1 << AmberMRParser.RK3) | (1 << AmberMRParser.R1A) | (1 << AmberMRParser.R2A) | (1 << AmberMRParser.R3A) | (1 << AmberMRParser.R4A) | (1 << AmberMRParser.RK2A) | (1 << AmberMRParser.RK3A) | (1 << AmberMRParser.R0) | (1 << AmberMRParser.K0) | (1 << AmberMRParser.R0A) | (1 << AmberMRParser.K0A))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 713
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 714
                self.match(AmberMRParser.Real)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 715
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 718
                self.match(AmberMRParser.IAT)
                self.state = 719
                self.match(AmberMRParser.L_paren_IP)
                self.state = 720
                self.match(AmberMRParser.Decimal)
                self.state = 721
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 722
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 723
                self.match(AmberMRParser.Integer)
                self.state = 725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 724
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 727
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.IGR1) | (1 << AmberMRParser.IGR2) | (1 << AmberMRParser.IGR3) | (1 << AmberMRParser.IGR4) | (1 << AmberMRParser.IGR5) | (1 << AmberMRParser.IGR6) | (1 << AmberMRParser.IGR7) | (1 << AmberMRParser.IGR8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 728
                self.match(AmberMRParser.L_paren_IA)
                self.state = 729
                self.match(AmberMRParser.Decimal)
                self.state = 730
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 731
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 732
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 733
                self.match(AmberMRParser.Comma_IA)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 734
                self.match(AmberMRParser.RSTWT)
                self.state = 735
                self.match(AmberMRParser.L_paren_RP)
                self.state = 736
                self.match(AmberMRParser.Decimal)
                self.state = 737
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 738
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 739
                self.match(AmberMRParser.Real)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 740
                    self.match(AmberMRParser.Comma)


                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 743
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << AmberMRParser.ATNAM) | (1 << AmberMRParser.GRNAM1) | (1 << AmberMRParser.GRNAM2) | (1 << AmberMRParser.GRNAM3) | (1 << AmberMRParser.GRNAM4) | (1 << AmberMRParser.GRNAM5) | (1 << AmberMRParser.GRNAM6) | (1 << AmberMRParser.GRNAM7) | (1 << AmberMRParser.GRNAM8))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 744
                self.match(AmberMRParser.L_paren_QA)
                self.state = 745
                self.match(AmberMRParser.Decimal)
                self.state = 746
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 747
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 748
                self.match(AmberMRParser.Qstrings)
                self.state = 749
                self.match(AmberMRParser.Comma_QA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noeexp_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NPEAK(self):
            return self.getToken(AmberMRParser.NPEAK, 0)

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def EMIX(self):
            return self.getToken(AmberMRParser.EMIX, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def Decimal(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Decimal)
            else:
                return self.getToken(AmberMRParser.Decimal, i)

        def Comma_ARG(self):
            return self.getToken(AmberMRParser.Comma_ARG, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def IHP(self):
            return self.getToken(AmberMRParser.IHP, 0)

        def JHP(self):
            return self.getToken(AmberMRParser.JHP, 0)

        def L_paren_RA(self):
            return self.getToken(AmberMRParser.L_paren_RA, 0)

        def AEXP(self):
            return self.getToken(AmberMRParser.AEXP, 0)

        def ARANGE(self):
            return self.getToken(AmberMRParser.ARANGE, 0)

        def AWT(self):
            return self.getToken(AmberMRParser.AWT, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def INVWT1(self):
            return self.getToken(AmberMRParser.INVWT1, 0)

        def INVWT2(self):
            return self.getToken(AmberMRParser.INVWT2, 0)

        def OMEGA(self):
            return self.getToken(AmberMRParser.OMEGA, 0)

        def TAUROT(self):
            return self.getToken(AmberMRParser.TAUROT, 0)

        def TAUMET(self):
            return self.getToken(AmberMRParser.TAUMET, 0)

        def OSCALE(self):
            return self.getToken(AmberMRParser.OSCALE, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def ID2O(self):
            return self.getToken(AmberMRParser.ID2O, 0)

        def Equ_op_BP(self):
            return self.getToken(AmberMRParser.Equ_op_BP, 0)

        def BoolInt(self):
            return self.getToken(AmberMRParser.BoolInt, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_noeexp_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoeexp_statement" ):
                listener.enterNoeexp_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoeexp_statement" ):
                listener.exitNoeexp_statement(self)




    def noeexp_statement(self):

        localctx = AmberMRParser.Noeexp_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_noeexp_statement)
        self._la = 0 # Token type
        try:
            self.state = 790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NPEAK]:
                self.enterOuterAlt(localctx, 1)
                self.state = 752
                self.match(AmberMRParser.NPEAK)
                self.state = 753
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 754
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 755
                self.match(AmberMRParser.Comma_IA)
                pass
            elif token in [AmberMRParser.EMIX]:
                self.enterOuterAlt(localctx, 2)
                self.state = 756
                self.match(AmberMRParser.EMIX)
                self.state = 757
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 758
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 759
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.IHP, AmberMRParser.JHP]:
                self.enterOuterAlt(localctx, 3)
                self.state = 760
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.IHP or _la==AmberMRParser.JHP):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 761
                self.match(AmberMRParser.L_paren_IA)
                self.state = 762
                self.match(AmberMRParser.Decimal)
                self.state = 763
                self.match(AmberMRParser.Comma_ARG)
                self.state = 764
                self.match(AmberMRParser.Decimal)
                self.state = 765
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 766
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 767
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 768
                self.match(AmberMRParser.Comma_IA)
                pass
            elif token in [AmberMRParser.AEXP, AmberMRParser.ARANGE, AmberMRParser.AWT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 769
                _la = self._input.LA(1)
                if not(((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (AmberMRParser.AEXP - 66)) | (1 << (AmberMRParser.ARANGE - 66)) | (1 << (AmberMRParser.AWT - 66)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 770
                self.match(AmberMRParser.L_paren_RA)
                self.state = 771
                self.match(AmberMRParser.Decimal)
                self.state = 772
                self.match(AmberMRParser.Comma_ARG)
                self.state = 773
                self.match(AmberMRParser.Decimal)
                self.state = 774
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 775
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 776
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 777
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.INVWT1, AmberMRParser.INVWT2, AmberMRParser.OMEGA, AmberMRParser.TAUROT, AmberMRParser.TAUMET, AmberMRParser.OSCALE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 778
                _la = self._input.LA(1)
                if not(((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (AmberMRParser.INVWT1 - 69)) | (1 << (AmberMRParser.INVWT2 - 69)) | (1 << (AmberMRParser.OMEGA - 69)) | (1 << (AmberMRParser.TAUROT - 69)) | (1 << (AmberMRParser.TAUMET - 69)) | (1 << (AmberMRParser.OSCALE - 69)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 779
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 780
                self.match(AmberMRParser.Real)
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 781
                    self.match(AmberMRParser.Comma)


                pass
            elif token in [AmberMRParser.ID2O]:
                self.enterOuterAlt(localctx, 6)
                self.state = 784
                self.match(AmberMRParser.ID2O)
                self.state = 785
                self.match(AmberMRParser.Equ_op_BP)
                self.state = 786
                self.match(AmberMRParser.BoolInt)
                self.state = 788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 787
                    self.match(AmberMRParser.Comma)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Shf_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NRING(self):
            return self.getToken(AmberMRParser.NRING, 0)

        def NPROT(self):
            return self.getToken(AmberMRParser.NPROT, 0)

        def NTER(self):
            return self.getToken(AmberMRParser.NTER, 0)

        def CTER(self):
            return self.getToken(AmberMRParser.CTER, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def Decimal(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Decimal)
            else:
                return self.getToken(AmberMRParser.Decimal, i)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def NATR(self):
            return self.getToken(AmberMRParser.NATR, 0)

        def IPROT(self):
            return self.getToken(AmberMRParser.IPROT, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def IATR(self):
            return self.getToken(AmberMRParser.IATR, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Comma_ARG(self):
            return self.getToken(AmberMRParser.Comma_ARG, 0)

        def OBS(self):
            return self.getToken(AmberMRParser.OBS, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def L_paren_RA(self):
            return self.getToken(AmberMRParser.L_paren_RA, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def STR(self):
            return self.getToken(AmberMRParser.STR, 0)

        def SHRANG(self):
            return self.getToken(AmberMRParser.SHRANG, 0)

        def WT(self):
            return self.getToken(AmberMRParser.WT, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def NAMR(self):
            return self.getToken(AmberMRParser.NAMR, 0)

        def L_paren_QA(self):
            return self.getToken(AmberMRParser.L_paren_QA, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def SHCUT(self):
            return self.getToken(AmberMRParser.SHCUT, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_shf_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShf_statement" ):
                listener.enterShf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShf_statement" ):
                listener.exitShf_statement(self)




    def shf_statement(self):

        localctx = AmberMRParser.Shf_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_shf_statement)
        self._la = 0 # Token type
        try:
            self.state = 845
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NRING, AmberMRParser.NPROT, AmberMRParser.NTER, AmberMRParser.CTER]:
                self.enterOuterAlt(localctx, 1)
                self.state = 792
                _la = self._input.LA(1)
                if not(((((_la - 77)) & ~0x3f) == 0 and ((1 << (_la - 77)) & ((1 << (AmberMRParser.NRING - 77)) | (1 << (AmberMRParser.NPROT - 77)) | (1 << (AmberMRParser.NTER - 77)) | (1 << (AmberMRParser.CTER - 77)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 793
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 794
                self.match(AmberMRParser.Integer)
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 795
                    self.match(AmberMRParser.Comma)


                pass
            elif token in [AmberMRParser.NATR, AmberMRParser.IPROT]:
                self.enterOuterAlt(localctx, 2)
                self.state = 798
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.NATR or _la==AmberMRParser.IPROT):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 799
                self.match(AmberMRParser.L_paren_IA)
                self.state = 800
                self.match(AmberMRParser.Decimal)
                self.state = 801
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 802
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 803
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 804
                self.match(AmberMRParser.Comma_IA)
                pass
            elif token in [AmberMRParser.IATR]:
                self.enterOuterAlt(localctx, 3)
                self.state = 805
                self.match(AmberMRParser.IATR)
                self.state = 806
                self.match(AmberMRParser.L_paren_IP)
                self.state = 807
                self.match(AmberMRParser.Decimal)
                self.state = 808
                self.match(AmberMRParser.Comma_ARG)
                self.state = 809
                self.match(AmberMRParser.Decimal)
                self.state = 810
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 811
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 812
                self.match(AmberMRParser.Integer)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 813
                    self.match(AmberMRParser.Comma)


                pass
            elif token in [AmberMRParser.OBS]:
                self.enterOuterAlt(localctx, 4)
                self.state = 816
                self.match(AmberMRParser.OBS)
                self.state = 817
                self.match(AmberMRParser.L_paren_RP)
                self.state = 818
                self.match(AmberMRParser.Decimal)
                self.state = 819
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 820
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 821
                self.match(AmberMRParser.Real)
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 822
                    self.match(AmberMRParser.Comma)


                pass
            elif token in [AmberMRParser.STR, AmberMRParser.SHRANG, AmberMRParser.WT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 825
                _la = self._input.LA(1)
                if not(((((_la - 81)) & ~0x3f) == 0 and ((1 << (_la - 81)) & ((1 << (AmberMRParser.STR - 81)) | (1 << (AmberMRParser.SHRANG - 81)) | (1 << (AmberMRParser.WT - 81)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 826
                self.match(AmberMRParser.L_paren_RA)
                self.state = 827
                self.match(AmberMRParser.Decimal)
                self.state = 828
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 829
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 830
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 831
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.NAMR]:
                self.enterOuterAlt(localctx, 6)
                self.state = 832
                self.match(AmberMRParser.NAMR)
                self.state = 833
                self.match(AmberMRParser.L_paren_QA)
                self.state = 834
                self.match(AmberMRParser.Decimal)
                self.state = 835
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 836
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 837
                self.match(AmberMRParser.Qstrings)
                self.state = 838
                self.match(AmberMRParser.Comma_QA)
                pass
            elif token in [AmberMRParser.SHCUT]:
                self.enterOuterAlt(localctx, 7)
                self.state = 839
                self.match(AmberMRParser.SHCUT)
                self.state = 840
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 841
                self.match(AmberMRParser.Real)
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 842
                    self.match(AmberMRParser.Comma)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcshf_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NPROT(self):
            return self.getToken(AmberMRParser.NPROT, 0)

        def NME(self):
            return self.getToken(AmberMRParser.NME, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def NMPMC(self):
            return self.getToken(AmberMRParser.NMPMC, 0)

        def Equ_op_QA(self):
            return self.getToken(AmberMRParser.Equ_op_QA, 0)

        def Qstrings(self):
            return self.getToken(AmberMRParser.Qstrings, 0)

        def Comma_QA(self):
            return self.getToken(AmberMRParser.Comma_QA, 0)

        def L_paren_IA(self):
            return self.getToken(AmberMRParser.L_paren_IA, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def Equ_op_IA(self):
            return self.getToken(AmberMRParser.Equ_op_IA, 0)

        def Comma_IA(self):
            return self.getToken(AmberMRParser.Comma_IA, 0)

        def IPROT(self):
            return self.getToken(AmberMRParser.IPROT, 0)

        def MLTPRO(self):
            return self.getToken(AmberMRParser.MLTPRO, 0)

        def Integers(self):
            return self.getToken(AmberMRParser.Integers, 0)

        def MultiplicativeInt(self):
            return self.getToken(AmberMRParser.MultiplicativeInt, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def OPTPHI(self):
            return self.getToken(AmberMRParser.OPTPHI, 0)

        def OPTTET(self):
            return self.getToken(AmberMRParser.OPTTET, 0)

        def OPTOMG(self):
            return self.getToken(AmberMRParser.OPTOMG, 0)

        def OPTA1(self):
            return self.getToken(AmberMRParser.OPTA1, 0)

        def OPTA2(self):
            return self.getToken(AmberMRParser.OPTA2, 0)

        def OBS(self):
            return self.getToken(AmberMRParser.OBS, 0)

        def L_paren_RA(self):
            return self.getToken(AmberMRParser.L_paren_RA, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def WT(self):
            return self.getToken(AmberMRParser.WT, 0)

        def TOLPRO(self):
            return self.getToken(AmberMRParser.TOLPRO, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def OPTKON(self):
            return self.getToken(AmberMRParser.OPTKON, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_pcshf_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcshf_statement" ):
                listener.enterPcshf_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcshf_statement" ):
                listener.exitPcshf_statement(self)




    def pcshf_statement(self):

        localctx = AmberMRParser.Pcshf_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pcshf_statement)
        self._la = 0 # Token type
        try:
            self.state = 886
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NPROT, AmberMRParser.NME]:
                self.enterOuterAlt(localctx, 1)
                self.state = 847
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.NPROT or _la==AmberMRParser.NME):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 848
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 849
                self.match(AmberMRParser.Integer)
                self.state = 851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 850
                    self.match(AmberMRParser.Comma)


                pass
            elif token in [AmberMRParser.NMPMC]:
                self.enterOuterAlt(localctx, 2)
                self.state = 853
                self.match(AmberMRParser.NMPMC)
                self.state = 854
                self.match(AmberMRParser.Equ_op_QA)
                self.state = 855
                self.match(AmberMRParser.Qstrings)
                self.state = 856
                self.match(AmberMRParser.Comma_QA)
                pass
            elif token in [AmberMRParser.IPROT, AmberMRParser.MLTPRO]:
                self.enterOuterAlt(localctx, 3)
                self.state = 857
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.IPROT or _la==AmberMRParser.MLTPRO):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 858
                self.match(AmberMRParser.L_paren_IA)
                self.state = 859
                self.match(AmberMRParser.Decimal)
                self.state = 860
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 861
                self.match(AmberMRParser.Equ_op_IA)
                self.state = 862
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Integers or _la==AmberMRParser.MultiplicativeInt):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 863
                self.match(AmberMRParser.Comma_IA)
                pass
            elif token in [AmberMRParser.OBS, AmberMRParser.OPTPHI, AmberMRParser.OPTTET, AmberMRParser.OPTOMG, AmberMRParser.OPTA1, AmberMRParser.OPTA2]:
                self.enterOuterAlt(localctx, 4)
                self.state = 864
                _la = self._input.LA(1)
                if not(((((_la - 83)) & ~0x3f) == 0 and ((1 << (_la - 83)) & ((1 << (AmberMRParser.OBS - 83)) | (1 << (AmberMRParser.OPTPHI - 83)) | (1 << (AmberMRParser.OPTTET - 83)) | (1 << (AmberMRParser.OPTOMG - 83)) | (1 << (AmberMRParser.OPTA1 - 83)) | (1 << (AmberMRParser.OPTA2 - 83)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 865
                self.match(AmberMRParser.L_paren_RP)
                self.state = 866
                self.match(AmberMRParser.Decimal)
                self.state = 867
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 868
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 869
                self.match(AmberMRParser.Real)
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 870
                    self.match(AmberMRParser.Comma)


                pass
            elif token in [AmberMRParser.WT, AmberMRParser.TOLPRO]:
                self.enterOuterAlt(localctx, 5)
                self.state = 873
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.WT or _la==AmberMRParser.TOLPRO):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 874
                self.match(AmberMRParser.L_paren_RA)
                self.state = 875
                self.match(AmberMRParser.Decimal)
                self.state = 876
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 877
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 878
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 879
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.OPTKON]:
                self.enterOuterAlt(localctx, 6)
                self.state = 880
                self.match(AmberMRParser.OPTKON)
                self.state = 881
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 882
                self.match(AmberMRParser.Real)
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 883
                    self.match(AmberMRParser.Comma)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Align_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NDIP(self):
            return self.getToken(AmberMRParser.NDIP, 0)

        def DATASET(self):
            return self.getToken(AmberMRParser.DATASET, 0)

        def NUM_DATASET(self):
            return self.getToken(AmberMRParser.NUM_DATASET, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def ID(self):
            return self.getToken(AmberMRParser.ID, 0)

        def JD(self):
            return self.getToken(AmberMRParser.JD, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def DOBSL(self):
            return self.getToken(AmberMRParser.DOBSL, 0)

        def DOBSU(self):
            return self.getToken(AmberMRParser.DOBSU, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def DWT(self):
            return self.getToken(AmberMRParser.DWT, 0)

        def GIGJ(self):
            return self.getToken(AmberMRParser.GIGJ, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def S11(self):
            return self.getToken(AmberMRParser.S11, 0)

        def S12(self):
            return self.getToken(AmberMRParser.S12, 0)

        def S13(self):
            return self.getToken(AmberMRParser.S13, 0)

        def S22(self):
            return self.getToken(AmberMRParser.S22, 0)

        def S23(self):
            return self.getToken(AmberMRParser.S23, 0)

        def DIJ(self):
            return self.getToken(AmberMRParser.DIJ, 0)

        def DCUT(self):
            return self.getToken(AmberMRParser.DCUT, 0)

        def FREEZEMOL(self):
            return self.getToken(AmberMRParser.FREEZEMOL, 0)

        def Equ_op(self):
            return self.getToken(AmberMRParser.Equ_op, 0)

        def Logical(self):
            return self.getToken(AmberMRParser.Logical, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_align_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlign_statement" ):
                listener.enterAlign_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlign_statement" ):
                listener.exitAlign_statement(self)




    def align_statement(self):

        localctx = AmberMRParser.Align_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_align_statement)
        self._la = 0 # Token type
        try:
            self.state = 928
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NDIP, AmberMRParser.DATASET, AmberMRParser.NUM_DATASET]:
                self.enterOuterAlt(localctx, 1)
                self.state = 888
                _la = self._input.LA(1)
                if not(((((_la - 102)) & ~0x3f) == 0 and ((1 << (_la - 102)) & ((1 << (AmberMRParser.NDIP - 102)) | (1 << (AmberMRParser.DATASET - 102)) | (1 << (AmberMRParser.NUM_DATASET - 102)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 889
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 890
                self.match(AmberMRParser.Integer)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 891
                    self.match(AmberMRParser.Comma)


                pass
            elif token in [AmberMRParser.ID, AmberMRParser.JD]:
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.ID or _la==AmberMRParser.JD):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 895
                self.match(AmberMRParser.L_paren_IP)
                self.state = 896
                self.match(AmberMRParser.Decimal)
                self.state = 897
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 898
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 899
                self.match(AmberMRParser.Integer)
                self.state = 901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 900
                    self.match(AmberMRParser.Comma)


                pass
            elif token in [AmberMRParser.DOBSL, AmberMRParser.DOBSU]:
                self.enterOuterAlt(localctx, 3)
                self.state = 903
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.DOBSL or _la==AmberMRParser.DOBSU):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 904
                self.match(AmberMRParser.L_paren_RP)
                self.state = 905
                self.match(AmberMRParser.Decimal)
                self.state = 906
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 907
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 908
                self.match(AmberMRParser.Real)
                self.state = 910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 909
                    self.match(AmberMRParser.Comma)


                pass
            elif token in [AmberMRParser.DWT, AmberMRParser.GIGJ]:
                self.enterOuterAlt(localctx, 4)
                self.state = 912
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.DWT or _la==AmberMRParser.GIGJ):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 913
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 914
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 915
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.S11, AmberMRParser.S12, AmberMRParser.S13, AmberMRParser.S22, AmberMRParser.S23, AmberMRParser.DIJ, AmberMRParser.DCUT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 916
                _la = self._input.LA(1)
                if not(((((_la - 110)) & ~0x3f) == 0 and ((1 << (_la - 110)) & ((1 << (AmberMRParser.S11 - 110)) | (1 << (AmberMRParser.S12 - 110)) | (1 << (AmberMRParser.S13 - 110)) | (1 << (AmberMRParser.S22 - 110)) | (1 << (AmberMRParser.S23 - 110)) | (1 << (AmberMRParser.DIJ - 110)) | (1 << (AmberMRParser.DCUT - 110)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 917
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 918
                self.match(AmberMRParser.Real)
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 919
                    self.match(AmberMRParser.Comma)


                pass
            elif token in [AmberMRParser.FREEZEMOL]:
                self.enterOuterAlt(localctx, 6)
                self.state = 922
                self.match(AmberMRParser.FREEZEMOL)
                self.state = 923
                self.match(AmberMRParser.Equ_op)
                self.state = 924
                self.match(AmberMRParser.Logical)
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 925
                    self.match(AmberMRParser.Comma)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equ_op_IP(self):
            return self.getToken(AmberMRParser.Equ_op_IP, 0)

        def Integer(self):
            return self.getToken(AmberMRParser.Integer, 0)

        def NCSA(self):
            return self.getToken(AmberMRParser.NCSA, 0)

        def DATASETC(self):
            return self.getToken(AmberMRParser.DATASETC, 0)

        def Comma(self):
            return self.getToken(AmberMRParser.Comma, 0)

        def L_paren_IP(self):
            return self.getToken(AmberMRParser.L_paren_IP, 0)

        def Decimal(self):
            return self.getToken(AmberMRParser.Decimal, 0)

        def R_paren_ARG(self):
            return self.getToken(AmberMRParser.R_paren_ARG, 0)

        def ICSA(self):
            return self.getToken(AmberMRParser.ICSA, 0)

        def JCSA(self):
            return self.getToken(AmberMRParser.JCSA, 0)

        def KCSA(self):
            return self.getToken(AmberMRParser.KCSA, 0)

        def L_paren_RP(self):
            return self.getToken(AmberMRParser.L_paren_RP, 0)

        def Equ_op_RP(self):
            return self.getToken(AmberMRParser.Equ_op_RP, 0)

        def Real(self):
            return self.getToken(AmberMRParser.Real, 0)

        def COBSL(self):
            return self.getToken(AmberMRParser.COBSL, 0)

        def COBSU(self):
            return self.getToken(AmberMRParser.COBSU, 0)

        def CWT(self):
            return self.getToken(AmberMRParser.CWT, 0)

        def Equ_op_RA(self):
            return self.getToken(AmberMRParser.Equ_op_RA, 0)

        def Comma_RA(self):
            return self.getToken(AmberMRParser.Comma_RA, 0)

        def Reals(self):
            return self.getToken(AmberMRParser.Reals, 0)

        def MultiplicativeReal(self):
            return self.getToken(AmberMRParser.MultiplicativeReal, 0)

        def SIGMA11(self):
            return self.getToken(AmberMRParser.SIGMA11, 0)

        def SIGMA12(self):
            return self.getToken(AmberMRParser.SIGMA12, 0)

        def SIGMA13(self):
            return self.getToken(AmberMRParser.SIGMA13, 0)

        def SIGMA22(self):
            return self.getToken(AmberMRParser.SIGMA22, 0)

        def SIGMA23(self):
            return self.getToken(AmberMRParser.SIGMA23, 0)

        def FIELD(self):
            return self.getToken(AmberMRParser.FIELD, 0)

        def CCUT(self):
            return self.getToken(AmberMRParser.CCUT, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = AmberMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_csa_statement)
        self._la = 0 # Token type
        try:
            self.state = 964
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [AmberMRParser.NCSA, AmberMRParser.DATASETC]:
                self.enterOuterAlt(localctx, 1)
                self.state = 930
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.NCSA or _la==AmberMRParser.DATASETC):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 931
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 932
                self.match(AmberMRParser.Integer)
                self.state = 934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 933
                    self.match(AmberMRParser.Comma)


                pass
            elif token in [AmberMRParser.ICSA, AmberMRParser.JCSA, AmberMRParser.KCSA]:
                self.enterOuterAlt(localctx, 2)
                self.state = 936
                _la = self._input.LA(1)
                if not(((((_la - 121)) & ~0x3f) == 0 and ((1 << (_la - 121)) & ((1 << (AmberMRParser.ICSA - 121)) | (1 << (AmberMRParser.JCSA - 121)) | (1 << (AmberMRParser.KCSA - 121)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 937
                self.match(AmberMRParser.L_paren_IP)
                self.state = 938
                self.match(AmberMRParser.Decimal)
                self.state = 939
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 940
                self.match(AmberMRParser.Equ_op_IP)
                self.state = 941
                self.match(AmberMRParser.Integer)
                self.state = 943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 942
                    self.match(AmberMRParser.Comma)


                pass
            elif token in [AmberMRParser.COBSL, AmberMRParser.COBSU]:
                self.enterOuterAlt(localctx, 3)
                self.state = 945
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.COBSL or _la==AmberMRParser.COBSU):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 946
                self.match(AmberMRParser.L_paren_RP)
                self.state = 947
                self.match(AmberMRParser.Decimal)
                self.state = 948
                self.match(AmberMRParser.R_paren_ARG)
                self.state = 949
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 950
                self.match(AmberMRParser.Real)
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 951
                    self.match(AmberMRParser.Comma)


                pass
            elif token in [AmberMRParser.CWT]:
                self.enterOuterAlt(localctx, 4)
                self.state = 954
                self.match(AmberMRParser.CWT)
                self.state = 955
                self.match(AmberMRParser.Equ_op_RA)
                self.state = 956
                _la = self._input.LA(1)
                if not(_la==AmberMRParser.Reals or _la==AmberMRParser.MultiplicativeReal):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 957
                self.match(AmberMRParser.Comma_RA)
                pass
            elif token in [AmberMRParser.FIELD, AmberMRParser.SIGMA11, AmberMRParser.SIGMA12, AmberMRParser.SIGMA13, AmberMRParser.SIGMA22, AmberMRParser.SIGMA23, AmberMRParser.CCUT]:
                self.enterOuterAlt(localctx, 5)
                self.state = 958
                _la = self._input.LA(1)
                if not(((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (AmberMRParser.FIELD - 128)) | (1 << (AmberMRParser.SIGMA11 - 128)) | (1 << (AmberMRParser.SIGMA12 - 128)) | (1 << (AmberMRParser.SIGMA13 - 128)) | (1 << (AmberMRParser.SIGMA22 - 128)) | (1 << (AmberMRParser.SIGMA23 - 128)) | (1 << (AmberMRParser.CCUT - 128)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 959
                self.match(AmberMRParser.Equ_op_RP)
                self.state = 960
                self.match(AmberMRParser.Real)
                self.state = 962
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma:
                    self.state = 961
                    self.match(AmberMRParser.Comma)


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISTANCE_F(self):
            return self.getToken(AmberMRParser.DISTANCE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self):
            return self.getToken(AmberMRParser.Comma_F, 0)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_distance_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_rst_func_call" ):
                listener.enterDistance_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_rst_func_call" ):
                listener.exitDistance_rst_func_call(self)




    def distance_rst_func_call(self):

        localctx = AmberMRParser.Distance_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_distance_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 993
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 966
                self.match(AmberMRParser.DISTANCE_F)
                self.state = 967
                self.match(AmberMRParser.L_paren_F)
                self.state = 968
                self.restraint_func_expr()
                self.state = 970
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 969
                    self.match(AmberMRParser.Comma_F)


                self.state = 972
                self.restraint_func_expr()
                self.state = 973
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                self.match(AmberMRParser.DISTANCE_F)
                self.state = 976
                self.match(AmberMRParser.L_brace_F)
                self.state = 977
                self.restraint_func_expr()
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 978
                    self.match(AmberMRParser.Comma_F)


                self.state = 981
                self.restraint_func_expr()
                self.state = 982
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 984
                self.match(AmberMRParser.DISTANCE_F)
                self.state = 985
                self.match(AmberMRParser.L_brakt_F)
                self.state = 986
                self.restraint_func_expr()
                self.state = 988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 987
                    self.match(AmberMRParser.Comma_F)


                self.state = 990
                self.restraint_func_expr()
                self.state = 991
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ANGLE_F(self):
            return self.getToken(AmberMRParser.ANGLE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_angle_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_rst_func_call" ):
                listener.enterAngle_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_rst_func_call" ):
                listener.exitAngle_rst_func_call(self)




    def angle_rst_func_call(self):

        localctx = AmberMRParser.Angle_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_angle_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1034
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 995
                self.match(AmberMRParser.ANGLE_F)
                self.state = 996
                self.match(AmberMRParser.L_paren_F)
                self.state = 997
                self.restraint_func_expr()
                self.state = 999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 998
                    self.match(AmberMRParser.Comma_F)


                self.state = 1001
                self.restraint_func_expr()
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1002
                    self.match(AmberMRParser.Comma_F)


                self.state = 1005
                self.restraint_func_expr()
                self.state = 1006
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1008
                self.match(AmberMRParser.ANGLE_F)
                self.state = 1009
                self.match(AmberMRParser.L_brace_F)
                self.state = 1010
                self.restraint_func_expr()
                self.state = 1012
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1011
                    self.match(AmberMRParser.Comma_F)


                self.state = 1014
                self.restraint_func_expr()
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1015
                    self.match(AmberMRParser.Comma_F)


                self.state = 1018
                self.restraint_func_expr()
                self.state = 1019
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1021
                self.match(AmberMRParser.ANGLE_F)
                self.state = 1022
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1023
                self.restraint_func_expr()
                self.state = 1025
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1024
                    self.match(AmberMRParser.Comma_F)


                self.state = 1027
                self.restraint_func_expr()
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1028
                    self.match(AmberMRParser.Comma_F)


                self.state = 1031
                self.restraint_func_expr()
                self.state = 1032
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TORSION_F(self):
            return self.getToken(AmberMRParser.TORSION_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_torsion_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_rst_func_call" ):
                listener.enterTorsion_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_rst_func_call" ):
                listener.exitTorsion_rst_func_call(self)




    def torsion_rst_func_call(self):

        localctx = AmberMRParser.Torsion_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_torsion_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1087
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1036
                self.match(AmberMRParser.TORSION_F)
                self.state = 1037
                self.match(AmberMRParser.L_paren_F)
                self.state = 1038
                self.restraint_func_expr()
                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1039
                    self.match(AmberMRParser.Comma_F)


                self.state = 1042
                self.restraint_func_expr()
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1043
                    self.match(AmberMRParser.Comma_F)


                self.state = 1046
                self.restraint_func_expr()
                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1047
                    self.match(AmberMRParser.Comma_F)


                self.state = 1050
                self.restraint_func_expr()
                self.state = 1051
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.match(AmberMRParser.TORSION_F)
                self.state = 1054
                self.match(AmberMRParser.L_brace_F)
                self.state = 1055
                self.restraint_func_expr()
                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1056
                    self.match(AmberMRParser.Comma_F)


                self.state = 1059
                self.restraint_func_expr()
                self.state = 1061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1060
                    self.match(AmberMRParser.Comma_F)


                self.state = 1063
                self.restraint_func_expr()
                self.state = 1065
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1064
                    self.match(AmberMRParser.Comma_F)


                self.state = 1067
                self.restraint_func_expr()
                self.state = 1068
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1070
                self.match(AmberMRParser.TORSION_F)
                self.state = 1071
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1072
                self.restraint_func_expr()
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1073
                    self.match(AmberMRParser.Comma_F)


                self.state = 1076
                self.restraint_func_expr()
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1077
                    self.match(AmberMRParser.Comma_F)


                self.state = 1080
                self.restraint_func_expr()
                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1081
                    self.match(AmberMRParser.Comma_F)


                self.state = 1084
                self.restraint_func_expr()
                self.state = 1085
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coordinate2_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COORDINATE_F(self):
            return self.getToken(AmberMRParser.COORDINATE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def distance_rst_func_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Distance_rst_func_callContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Distance_rst_func_callContext,i)


        def Real_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Real_F)
            else:
                return self.getToken(AmberMRParser.Real_F, i)

        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_coordinate2_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinate2_rst_func_call" ):
                listener.enterCoordinate2_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinate2_rst_func_call" ):
                listener.exitCoordinate2_rst_func_call(self)




    def coordinate2_rst_func_call(self):

        localctx = AmberMRParser.Coordinate2_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coordinate2_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1140
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,124,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1089
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 1090
                self.match(AmberMRParser.L_paren_F)
                self.state = 1091
                self.distance_rst_func_call()
                self.state = 1093
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1092
                    self.match(AmberMRParser.Comma_F)


                self.state = 1095
                self.match(AmberMRParser.Real_F)
                self.state = 1097
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1096
                    self.match(AmberMRParser.Comma_F)


                self.state = 1099
                self.distance_rst_func_call()
                self.state = 1101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1100
                    self.match(AmberMRParser.Comma_F)


                self.state = 1103
                self.match(AmberMRParser.Real_F)
                self.state = 1104
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1106
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 1107
                self.match(AmberMRParser.L_brace_F)
                self.state = 1108
                self.distance_rst_func_call()
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1109
                    self.match(AmberMRParser.Comma_F)


                self.state = 1112
                self.match(AmberMRParser.Real_F)
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1113
                    self.match(AmberMRParser.Comma_F)


                self.state = 1116
                self.distance_rst_func_call()
                self.state = 1118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1117
                    self.match(AmberMRParser.Comma_F)


                self.state = 1120
                self.match(AmberMRParser.Real_F)
                self.state = 1121
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1123
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 1124
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1125
                self.distance_rst_func_call()
                self.state = 1127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1126
                    self.match(AmberMRParser.Comma_F)


                self.state = 1129
                self.match(AmberMRParser.Real_F)
                self.state = 1131
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1130
                    self.match(AmberMRParser.Comma_F)


                self.state = 1133
                self.distance_rst_func_call()
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1134
                    self.match(AmberMRParser.Comma_F)


                self.state = 1137
                self.match(AmberMRParser.Real_F)
                self.state = 1138
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coordinate3_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COORDINATE_F(self):
            return self.getToken(AmberMRParser.COORDINATE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def distance_rst_func_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Distance_rst_func_callContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Distance_rst_func_callContext,i)


        def Real_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Real_F)
            else:
                return self.getToken(AmberMRParser.Real_F, i)

        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_coordinate3_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinate3_rst_func_call" ):
                listener.enterCoordinate3_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinate3_rst_func_call" ):
                listener.exitCoordinate3_rst_func_call(self)




    def coordinate3_rst_func_call(self):

        localctx = AmberMRParser.Coordinate3_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_coordinate3_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1142
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 1143
                self.match(AmberMRParser.L_paren_F)
                self.state = 1144
                self.distance_rst_func_call()
                self.state = 1146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1145
                    self.match(AmberMRParser.Comma_F)


                self.state = 1148
                self.match(AmberMRParser.Real_F)
                self.state = 1150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1149
                    self.match(AmberMRParser.Comma_F)


                self.state = 1152
                self.distance_rst_func_call()
                self.state = 1154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1153
                    self.match(AmberMRParser.Comma_F)


                self.state = 1156
                self.match(AmberMRParser.Real_F)
                self.state = 1158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1157
                    self.match(AmberMRParser.Comma_F)


                self.state = 1160
                self.distance_rst_func_call()
                self.state = 1162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1161
                    self.match(AmberMRParser.Comma_F)


                self.state = 1164
                self.match(AmberMRParser.Real_F)
                self.state = 1165
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1167
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 1168
                self.match(AmberMRParser.L_brace_F)
                self.state = 1169
                self.distance_rst_func_call()
                self.state = 1171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1170
                    self.match(AmberMRParser.Comma_F)


                self.state = 1173
                self.match(AmberMRParser.Real_F)
                self.state = 1175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1174
                    self.match(AmberMRParser.Comma_F)


                self.state = 1177
                self.distance_rst_func_call()
                self.state = 1179
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1178
                    self.match(AmberMRParser.Comma_F)


                self.state = 1181
                self.match(AmberMRParser.Real_F)
                self.state = 1183
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1182
                    self.match(AmberMRParser.Comma_F)


                self.state = 1185
                self.distance_rst_func_call()
                self.state = 1187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1186
                    self.match(AmberMRParser.Comma_F)


                self.state = 1189
                self.match(AmberMRParser.Real_F)
                self.state = 1190
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1192
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 1193
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1194
                self.distance_rst_func_call()
                self.state = 1196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1195
                    self.match(AmberMRParser.Comma_F)


                self.state = 1198
                self.match(AmberMRParser.Real_F)
                self.state = 1200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1199
                    self.match(AmberMRParser.Comma_F)


                self.state = 1202
                self.distance_rst_func_call()
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1203
                    self.match(AmberMRParser.Comma_F)


                self.state = 1206
                self.match(AmberMRParser.Real_F)
                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1207
                    self.match(AmberMRParser.Comma_F)


                self.state = 1210
                self.distance_rst_func_call()
                self.state = 1212
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1211
                    self.match(AmberMRParser.Comma_F)


                self.state = 1214
                self.match(AmberMRParser.Real_F)
                self.state = 1215
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coordinate4_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COORDINATE_F(self):
            return self.getToken(AmberMRParser.COORDINATE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def distance_rst_func_call(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Distance_rst_func_callContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Distance_rst_func_callContext,i)


        def Real_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Real_F)
            else:
                return self.getToken(AmberMRParser.Real_F, i)

        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_coordinate4_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoordinate4_rst_func_call" ):
                listener.enterCoordinate4_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoordinate4_rst_func_call" ):
                listener.exitCoordinate4_rst_func_call(self)




    def coordinate4_rst_func_call(self):

        localctx = AmberMRParser.Coordinate4_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_coordinate4_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1219
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 1220
                self.match(AmberMRParser.L_paren_F)
                self.state = 1221
                self.distance_rst_func_call()
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1222
                    self.match(AmberMRParser.Comma_F)


                self.state = 1225
                self.match(AmberMRParser.Real_F)
                self.state = 1227
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1226
                    self.match(AmberMRParser.Comma_F)


                self.state = 1229
                self.distance_rst_func_call()
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1230
                    self.match(AmberMRParser.Comma_F)


                self.state = 1233
                self.match(AmberMRParser.Real_F)
                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1234
                    self.match(AmberMRParser.Comma_F)


                self.state = 1237
                self.distance_rst_func_call()
                self.state = 1239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1238
                    self.match(AmberMRParser.Comma_F)


                self.state = 1241
                self.match(AmberMRParser.Real_F)
                self.state = 1243
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1242
                    self.match(AmberMRParser.Comma_F)


                self.state = 1245
                self.distance_rst_func_call()
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1246
                    self.match(AmberMRParser.Comma_F)


                self.state = 1249
                self.match(AmberMRParser.Real_F)
                self.state = 1250
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1252
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 1253
                self.match(AmberMRParser.L_brace_F)
                self.state = 1254
                self.distance_rst_func_call()
                self.state = 1256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1255
                    self.match(AmberMRParser.Comma_F)


                self.state = 1258
                self.match(AmberMRParser.Real_F)
                self.state = 1260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1259
                    self.match(AmberMRParser.Comma_F)


                self.state = 1262
                self.distance_rst_func_call()
                self.state = 1264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1263
                    self.match(AmberMRParser.Comma_F)


                self.state = 1266
                self.match(AmberMRParser.Real_F)
                self.state = 1268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1267
                    self.match(AmberMRParser.Comma_F)


                self.state = 1270
                self.distance_rst_func_call()
                self.state = 1272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1271
                    self.match(AmberMRParser.Comma_F)


                self.state = 1274
                self.match(AmberMRParser.Real_F)
                self.state = 1276
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1275
                    self.match(AmberMRParser.Comma_F)


                self.state = 1278
                self.distance_rst_func_call()
                self.state = 1280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1279
                    self.match(AmberMRParser.Comma_F)


                self.state = 1282
                self.match(AmberMRParser.Real_F)
                self.state = 1283
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1285
                self.match(AmberMRParser.COORDINATE_F)
                self.state = 1286
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1287
                self.distance_rst_func_call()
                self.state = 1289
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1288
                    self.match(AmberMRParser.Comma_F)


                self.state = 1291
                self.match(AmberMRParser.Real_F)
                self.state = 1293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1292
                    self.match(AmberMRParser.Comma_F)


                self.state = 1295
                self.distance_rst_func_call()
                self.state = 1297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1296
                    self.match(AmberMRParser.Comma_F)


                self.state = 1299
                self.match(AmberMRParser.Real_F)
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1300
                    self.match(AmberMRParser.Comma_F)


                self.state = 1303
                self.distance_rst_func_call()
                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1304
                    self.match(AmberMRParser.Comma_F)


                self.state = 1307
                self.match(AmberMRParser.Real_F)
                self.state = 1309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1308
                    self.match(AmberMRParser.Comma_F)


                self.state = 1311
                self.distance_rst_func_call()
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1312
                    self.match(AmberMRParser.Comma_F)


                self.state = 1315
                self.match(AmberMRParser.Real_F)
                self.state = 1316
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Restraint_func_exprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Int_F(self):
            return self.getToken(AmberMRParser.Int_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def Ambmask_F(self):
            return self.getToken(AmberMRParser.Ambmask_F, 0)

        def plane_rst_func_call(self):
            return self.getTypedRuleContext(AmberMRParser.Plane_rst_func_callContext,0)


        def com_rst_fun_call(self):
            return self.getTypedRuleContext(AmberMRParser.Com_rst_fun_callContext,0)


        def getRuleIndex(self):
            return AmberMRParser.RULE_restraint_func_expr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRestraint_func_expr" ):
                listener.enterRestraint_func_expr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRestraint_func_expr" ):
                listener.exitRestraint_func_expr(self)




    def restraint_func_expr(self):

        localctx = AmberMRParser.Restraint_func_exprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_restraint_func_expr)
        try:
            self.state = 1342
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1320
                self.match(AmberMRParser.Int_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1321
                self.match(AmberMRParser.L_paren_F)
                self.state = 1322
                self.match(AmberMRParser.Int_F)
                self.state = 1323
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1324
                self.match(AmberMRParser.L_brace_F)
                self.state = 1325
                self.match(AmberMRParser.Int_F)
                self.state = 1326
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1327
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1328
                self.match(AmberMRParser.Int_F)
                self.state = 1329
                self.match(AmberMRParser.R_brakt_F)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1330
                self.match(AmberMRParser.Ambmask_F)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1331
                self.match(AmberMRParser.L_paren_F)
                self.state = 1332
                self.match(AmberMRParser.Ambmask_F)
                self.state = 1333
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1334
                self.match(AmberMRParser.L_brace_F)
                self.state = 1335
                self.match(AmberMRParser.Ambmask_F)
                self.state = 1336
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1337
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1338
                self.match(AmberMRParser.Ambmask_F)
                self.state = 1339
                self.match(AmberMRParser.R_brakt_F)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1340
                self.plane_rst_func_call()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1341
                self.com_rst_fun_call()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_rst_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLANE_F(self):
            return self.getToken(AmberMRParser.PLANE_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_plane_rst_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_rst_func_call" ):
                listener.enterPlane_rst_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_rst_func_call" ):
                listener.exitPlane_rst_func_call(self)




    def plane_rst_func_call(self):

        localctx = AmberMRParser.Plane_rst_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_plane_rst_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,173,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1344
                self.match(AmberMRParser.PLANE_F)
                self.state = 1345
                self.match(AmberMRParser.L_paren_F)
                self.state = 1346
                self.restraint_func_expr()
                self.state = 1348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1347
                    self.match(AmberMRParser.Comma_F)


                self.state = 1350
                self.restraint_func_expr()
                self.state = 1352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1351
                    self.match(AmberMRParser.Comma_F)


                self.state = 1354
                self.restraint_func_expr()
                self.state = 1356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1355
                    self.match(AmberMRParser.Comma_F)


                self.state = 1358
                self.restraint_func_expr()
                self.state = 1359
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1361
                self.match(AmberMRParser.PLANE_F)
                self.state = 1362
                self.match(AmberMRParser.L_brace_F)
                self.state = 1363
                self.restraint_func_expr()
                self.state = 1365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1364
                    self.match(AmberMRParser.Comma_F)


                self.state = 1367
                self.restraint_func_expr()
                self.state = 1369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1368
                    self.match(AmberMRParser.Comma_F)


                self.state = 1371
                self.restraint_func_expr()
                self.state = 1373
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1372
                    self.match(AmberMRParser.Comma_F)


                self.state = 1375
                self.restraint_func_expr()
                self.state = 1376
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1378
                self.match(AmberMRParser.PLANE_F)
                self.state = 1379
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1380
                self.restraint_func_expr()
                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1381
                    self.match(AmberMRParser.Comma_F)


                self.state = 1384
                self.restraint_func_expr()
                self.state = 1386
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1385
                    self.match(AmberMRParser.Comma_F)


                self.state = 1388
                self.restraint_func_expr()
                self.state = 1390
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==AmberMRParser.Comma_F:
                    self.state = 1389
                    self.match(AmberMRParser.Comma_F)


                self.state = 1392
                self.restraint_func_expr()
                self.state = 1393
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Com_rst_fun_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COM_F(self):
            return self.getToken(AmberMRParser.COM_F, 0)

        def L_paren_F(self):
            return self.getToken(AmberMRParser.L_paren_F, 0)

        def restraint_func_expr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(AmberMRParser.Restraint_func_exprContext)
            else:
                return self.getTypedRuleContext(AmberMRParser.Restraint_func_exprContext,i)


        def R_paren_F(self):
            return self.getToken(AmberMRParser.R_paren_F, 0)

        def Comma_F(self, i:int=None):
            if i is None:
                return self.getTokens(AmberMRParser.Comma_F)
            else:
                return self.getToken(AmberMRParser.Comma_F, i)

        def L_brace_F(self):
            return self.getToken(AmberMRParser.L_brace_F, 0)

        def R_brace_F(self):
            return self.getToken(AmberMRParser.R_brace_F, 0)

        def L_brakt_F(self):
            return self.getToken(AmberMRParser.L_brakt_F, 0)

        def R_brakt_F(self):
            return self.getToken(AmberMRParser.R_brakt_F, 0)

        def getRuleIndex(self):
            return AmberMRParser.RULE_com_rst_fun_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCom_rst_fun_call" ):
                listener.enterCom_rst_fun_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCom_rst_fun_call" ):
                listener.exitCom_rst_fun_call(self)




    def com_rst_fun_call(self):

        localctx = AmberMRParser.Com_rst_fun_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_com_rst_fun_call)
        self._la = 0 # Token type
        try:
            self.state = 1439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1397
                self.match(AmberMRParser.COM_F)
                self.state = 1398
                self.match(AmberMRParser.L_paren_F)
                self.state = 1399
                self.restraint_func_expr()
                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==AmberMRParser.PLANE_F or _la==AmberMRParser.COM_F or ((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & ((1 << (AmberMRParser.Int_F - 191)) | (1 << (AmberMRParser.Ambmask_F - 191)) | (1 << (AmberMRParser.Comma_F - 191)) | (1 << (AmberMRParser.L_paren_F - 191)) | (1 << (AmberMRParser.L_brace_F - 191)) | (1 << (AmberMRParser.L_brakt_F - 191)))) != 0):
                    self.state = 1401
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==AmberMRParser.Comma_F:
                        self.state = 1400
                        self.match(AmberMRParser.Comma_F)


                    self.state = 1403
                    self.restraint_func_expr()
                    self.state = 1408
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1409
                self.match(AmberMRParser.R_paren_F)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1411
                self.match(AmberMRParser.COM_F)
                self.state = 1412
                self.match(AmberMRParser.L_brace_F)
                self.state = 1413
                self.restraint_func_expr()
                self.state = 1420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==AmberMRParser.PLANE_F or _la==AmberMRParser.COM_F or ((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & ((1 << (AmberMRParser.Int_F - 191)) | (1 << (AmberMRParser.Ambmask_F - 191)) | (1 << (AmberMRParser.Comma_F - 191)) | (1 << (AmberMRParser.L_paren_F - 191)) | (1 << (AmberMRParser.L_brace_F - 191)) | (1 << (AmberMRParser.L_brakt_F - 191)))) != 0):
                    self.state = 1415
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==AmberMRParser.Comma_F:
                        self.state = 1414
                        self.match(AmberMRParser.Comma_F)


                    self.state = 1417
                    self.restraint_func_expr()
                    self.state = 1422
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1423
                self.match(AmberMRParser.R_brace_F)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1425
                self.match(AmberMRParser.COM_F)
                self.state = 1426
                self.match(AmberMRParser.L_brakt_F)
                self.state = 1427
                self.restraint_func_expr()
                self.state = 1434
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==AmberMRParser.PLANE_F or _la==AmberMRParser.COM_F or ((((_la - 191)) & ~0x3f) == 0 and ((1 << (_la - 191)) & ((1 << (AmberMRParser.Int_F - 191)) | (1 << (AmberMRParser.Ambmask_F - 191)) | (1 << (AmberMRParser.Comma_F - 191)) | (1 << (AmberMRParser.L_paren_F - 191)) | (1 << (AmberMRParser.L_brace_F - 191)) | (1 << (AmberMRParser.L_brakt_F - 191)))) != 0):
                    self.state = 1429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==AmberMRParser.Comma_F:
                        self.state = 1428
                        self.match(AmberMRParser.Comma_F)


                    self.state = 1431
                    self.restraint_func_expr()
                    self.state = 1436
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1437
                self.match(AmberMRParser.R_brakt_F)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





