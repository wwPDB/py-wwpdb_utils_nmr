# Generated from BiosymMRLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,233,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,3,0,43,8,0,1,0,1,0,1,1,3,1,48,8,1,1,1,1,1,3,1,52,8,1,1,2,
        3,2,55,8,2,1,2,1,2,3,2,59,8,2,1,2,1,2,3,2,63,8,2,1,2,3,2,66,8,2,
        1,3,1,3,1,3,1,3,1,3,1,3,3,3,74,8,3,1,4,1,4,1,5,4,5,79,8,5,11,5,12,
        5,80,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,91,8,7,1,7,1,7,1,7,1,8,
        1,8,1,9,1,9,3,9,100,8,9,1,10,1,10,3,10,104,8,10,1,11,1,11,3,11,108,
        8,11,1,12,1,12,3,12,112,8,12,1,13,1,13,3,13,116,8,13,1,14,1,14,5,
        14,120,8,14,10,14,12,14,123,9,14,1,15,1,15,1,15,1,16,4,16,129,8,
        16,11,16,12,16,130,1,16,1,16,1,17,1,17,1,17,5,17,138,8,17,10,17,
        12,17,141,9,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,4,18,150,8,18,
        11,18,12,18,151,1,18,1,18,4,18,156,8,18,11,18,12,18,157,1,18,1,18,
        4,18,162,8,18,11,18,12,18,163,1,18,1,18,4,18,168,8,18,11,18,12,18,
        169,1,18,1,18,1,18,1,18,1,18,1,18,3,18,178,8,18,1,18,5,18,181,8,
        18,10,18,12,18,184,9,18,1,18,4,18,187,8,18,11,18,12,18,188,1,18,
        1,18,1,19,1,19,1,19,4,19,196,8,19,11,19,12,19,197,1,19,1,19,4,19,
        202,8,19,11,19,12,19,203,1,19,1,19,4,19,208,8,19,11,19,12,19,209,
        1,19,1,19,4,19,214,8,19,11,19,12,19,215,1,19,1,19,1,19,1,19,1,19,
        1,19,3,19,224,8,19,1,19,5,19,227,8,19,10,19,12,19,230,9,19,1,19,
        1,19,1,139,0,20,1,1,3,2,5,3,7,0,9,0,11,0,13,4,15,5,17,0,19,0,21,
        0,23,0,25,0,27,0,29,0,31,6,33,7,35,8,37,9,39,10,1,0,13,2,0,43,43,
        45,45,2,0,69,69,101,101,1,0,48,57,2,0,82,83,114,115,2,0,65,90,97,
        122,4,0,34,35,39,39,42,43,45,46,3,0,9,10,13,13,32,32,5,0,33,33,35,
        35,38,38,59,59,92,92,2,0,82,82,114,114,2,0,77,77,109,109,2,0,65,
        65,97,97,2,0,75,75,107,107,2,0,10,10,13,13,262,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,31,1,0,0,0,0,33,1,
        0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,42,1,0,0,0,3,47,1,
        0,0,0,5,54,1,0,0,0,7,73,1,0,0,0,9,75,1,0,0,0,11,78,1,0,0,0,13,82,
        1,0,0,0,15,84,1,0,0,0,17,95,1,0,0,0,19,99,1,0,0,0,21,103,1,0,0,0,
        23,107,1,0,0,0,25,111,1,0,0,0,27,115,1,0,0,0,29,117,1,0,0,0,31,124,
        1,0,0,0,33,128,1,0,0,0,35,134,1,0,0,0,37,177,1,0,0,0,39,223,1,0,
        0,0,41,43,7,0,0,0,42,41,1,0,0,0,42,43,1,0,0,0,43,44,1,0,0,0,44,45,
        3,11,5,0,45,2,1,0,0,0,46,48,7,0,0,0,47,46,1,0,0,0,47,48,1,0,0,0,
        48,51,1,0,0,0,49,52,3,11,5,0,50,52,3,7,3,0,51,49,1,0,0,0,51,50,1,
        0,0,0,52,4,1,0,0,0,53,55,7,0,0,0,54,53,1,0,0,0,54,55,1,0,0,0,55,
        58,1,0,0,0,56,59,3,11,5,0,57,59,3,7,3,0,58,56,1,0,0,0,58,57,1,0,
        0,0,59,65,1,0,0,0,60,62,7,1,0,0,61,63,7,0,0,0,62,61,1,0,0,0,62,63,
        1,0,0,0,63,64,1,0,0,0,64,66,3,11,5,0,65,60,1,0,0,0,65,66,1,0,0,0,
        66,6,1,0,0,0,67,68,3,11,5,0,68,69,5,46,0,0,69,70,3,11,5,0,70,74,
        1,0,0,0,71,72,5,46,0,0,72,74,3,11,5,0,73,67,1,0,0,0,73,71,1,0,0,
        0,74,8,1,0,0,0,75,76,7,2,0,0,76,10,1,0,0,0,77,79,3,9,4,0,78,77,1,
        0,0,0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,12,1,0,0,0,82,
        83,7,3,0,0,83,14,1,0,0,0,84,85,3,11,5,0,85,86,5,58,0,0,86,87,3,29,
        14,0,87,88,5,95,0,0,88,90,3,11,5,0,89,91,3,17,8,0,90,89,1,0,0,0,
        90,91,1,0,0,0,91,92,1,0,0,0,92,93,5,58,0,0,93,94,3,29,14,0,94,16,
        1,0,0,0,95,96,7,4,0,0,96,18,1,0,0,0,97,100,3,17,8,0,98,100,3,9,4,
        0,99,97,1,0,0,0,99,98,1,0,0,0,100,20,1,0,0,0,101,104,3,19,9,0,102,
        104,5,95,0,0,103,101,1,0,0,0,103,102,1,0,0,0,104,22,1,0,0,0,105,
        108,3,21,10,0,106,108,7,5,0,0,107,105,1,0,0,0,107,106,1,0,0,0,108,
        24,1,0,0,0,109,112,3,19,9,0,110,112,5,39,0,0,111,109,1,0,0,0,111,
        110,1,0,0,0,112,26,1,0,0,0,113,116,3,19,9,0,114,116,7,0,0,0,115,
        113,1,0,0,0,115,114,1,0,0,0,116,28,1,0,0,0,117,121,3,21,10,0,118,
        120,3,23,11,0,119,118,1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,121,
        122,1,0,0,0,122,30,1,0,0,0,123,121,1,0,0,0,124,125,3,11,5,0,125,
        126,5,46,0,0,126,32,1,0,0,0,127,129,7,6,0,0,128,127,1,0,0,0,129,
        130,1,0,0,0,130,128,1,0,0,0,130,131,1,0,0,0,131,132,1,0,0,0,132,
        133,6,16,0,0,133,34,1,0,0,0,134,139,5,123,0,0,135,138,3,35,17,0,
        136,138,9,0,0,0,137,135,1,0,0,0,137,136,1,0,0,0,138,141,1,0,0,0,
        139,140,1,0,0,0,139,137,1,0,0,0,140,142,1,0,0,0,141,139,1,0,0,0,
        142,143,5,125,0,0,143,144,1,0,0,0,144,145,6,17,1,0,145,36,1,0,0,
        0,146,178,7,7,0,0,147,149,5,47,0,0,148,150,5,47,0,0,149,148,1,0,
        0,0,150,151,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,178,1,0,
        0,0,153,155,5,42,0,0,154,156,5,42,0,0,155,154,1,0,0,0,156,157,1,
        0,0,0,157,155,1,0,0,0,157,158,1,0,0,0,158,178,1,0,0,0,159,161,5,
        45,0,0,160,162,5,45,0,0,161,160,1,0,0,0,162,163,1,0,0,0,163,161,
        1,0,0,0,163,164,1,0,0,0,164,178,1,0,0,0,165,167,5,43,0,0,166,168,
        5,43,0,0,167,166,1,0,0,0,168,169,1,0,0,0,169,167,1,0,0,0,169,170,
        1,0,0,0,170,178,1,0,0,0,171,172,7,8,0,0,172,173,7,1,0,0,173,174,
        7,9,0,0,174,175,7,10,0,0,175,176,7,8,0,0,176,178,7,11,0,0,177,146,
        1,0,0,0,177,147,1,0,0,0,177,153,1,0,0,0,177,159,1,0,0,0,177,165,
        1,0,0,0,177,171,1,0,0,0,178,182,1,0,0,0,179,181,5,32,0,0,180,179,
        1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,186,
        1,0,0,0,184,182,1,0,0,0,185,187,7,12,0,0,186,185,1,0,0,0,187,188,
        1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,190,1,0,0,0,190,191,
        6,18,1,0,191,38,1,0,0,0,192,224,7,7,0,0,193,195,5,47,0,0,194,196,
        5,47,0,0,195,194,1,0,0,0,196,197,1,0,0,0,197,195,1,0,0,0,197,198,
        1,0,0,0,198,224,1,0,0,0,199,201,5,42,0,0,200,202,5,42,0,0,201,200,
        1,0,0,0,202,203,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,224,
        1,0,0,0,205,207,5,45,0,0,206,208,5,45,0,0,207,206,1,0,0,0,208,209,
        1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,224,1,0,0,0,211,213,
        5,43,0,0,212,214,5,43,0,0,213,212,1,0,0,0,214,215,1,0,0,0,215,213,
        1,0,0,0,215,216,1,0,0,0,216,224,1,0,0,0,217,218,7,8,0,0,218,219,
        7,1,0,0,219,220,7,9,0,0,220,221,7,10,0,0,221,222,7,8,0,0,222,224,
        7,11,0,0,223,192,1,0,0,0,223,193,1,0,0,0,223,199,1,0,0,0,223,205,
        1,0,0,0,223,211,1,0,0,0,223,217,1,0,0,0,224,228,1,0,0,0,225,227,
        8,12,0,0,226,225,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,
        1,0,0,0,229,231,1,0,0,0,230,228,1,0,0,0,231,232,6,19,1,0,232,40,
        1,0,0,0,33,0,42,47,51,54,58,62,65,73,80,90,99,103,107,111,115,121,
        130,137,139,151,157,163,169,177,182,188,197,203,209,215,223,228,
        2,6,0,0,0,1,0
    ]

class BiosymMRLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Integer = 1
    Float = 2
    Real = 3
    Chiral_code = 4
    Atom_selection = 5
    Ordinal = 6
    SPACE = 7
    COMMENT = 8
    SECTION_COMMENT = 9
    LINE_COMMENT = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "Integer", "Float", "Real", "Chiral_code", "Atom_selection", 
            "Ordinal", "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "Integer", "Float", "Real", "DEC_DOT_DEC", "DEC_DIGIT", 
                  "DECIMAL", "Chiral_code", "Atom_selection", "ALPHA", "ALPHA_NUM", 
                  "START_CHAR", "NAME_CHAR", "ATM_NAME_CHAR", "ATM_TYPE_CHAR", 
                  "SIMPLE_NAME", "Ordinal", "SPACE", "COMMENT", "SECTION_COMMENT", 
                  "LINE_COMMENT" ]

    grammarFileName = "BiosymMRLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


