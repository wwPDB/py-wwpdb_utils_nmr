# Generated from BiosymMRLexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,337,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,3,0,49,8,0,1,0,1,0,1,1,3,1,
        54,8,1,1,1,1,1,3,1,58,8,1,1,2,3,2,61,8,2,1,2,1,2,1,3,3,3,66,8,3,
        1,3,1,3,3,3,70,8,3,1,3,1,3,3,3,74,8,3,1,3,3,3,77,8,3,1,4,1,4,1,4,
        1,4,1,4,1,4,3,4,85,8,4,1,5,1,5,1,5,1,5,1,5,1,5,3,5,93,8,5,1,6,1,
        6,1,7,4,7,98,8,7,11,7,12,7,99,1,8,4,8,103,8,8,11,8,12,8,104,1,8,
        5,8,108,8,8,10,8,12,8,111,9,8,1,8,5,8,114,8,8,10,8,12,8,117,9,8,
        1,8,5,8,120,8,8,10,8,12,8,123,9,8,1,8,1,8,1,9,4,9,128,8,9,11,9,12,
        9,129,1,9,5,9,133,8,9,10,9,12,9,136,9,9,1,9,5,9,139,8,9,10,9,12,
        9,142,9,9,1,9,5,9,145,8,9,10,9,12,9,148,9,9,1,9,1,9,1,10,4,10,153,
        8,10,11,10,12,10,154,1,10,5,10,158,8,10,10,10,12,10,161,9,10,1,10,
        5,10,164,8,10,10,10,12,10,167,9,10,1,10,5,10,170,8,10,10,10,12,10,
        173,9,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,3,12,
        185,8,12,1,12,3,12,188,8,12,1,12,3,12,191,8,12,1,12,1,12,1,12,1,
        13,1,13,1,14,1,14,3,14,200,8,14,1,15,1,15,3,15,204,8,15,1,16,1,16,
        3,16,208,8,16,1,17,1,17,5,17,212,8,17,10,17,12,17,215,9,17,1,18,
        1,18,1,18,1,19,4,19,221,8,19,11,19,12,19,222,1,19,1,19,1,20,1,20,
        1,20,5,20,230,8,20,10,20,12,20,233,9,20,1,20,1,20,1,20,1,20,1,21,
        1,21,1,21,4,21,242,8,21,11,21,12,21,243,1,21,1,21,4,21,248,8,21,
        11,21,12,21,249,1,21,1,21,4,21,254,8,21,11,21,12,21,255,1,21,1,21,
        4,21,260,8,21,11,21,12,21,261,1,21,1,21,4,21,266,8,21,11,21,12,21,
        267,1,21,1,21,1,21,1,21,1,21,1,21,3,21,276,8,21,1,21,5,21,279,8,
        21,10,21,12,21,282,9,21,1,21,4,21,285,8,21,11,21,12,21,286,1,21,
        1,21,1,22,1,22,1,22,4,22,294,8,22,11,22,12,22,295,1,22,1,22,4,22,
        300,8,22,11,22,12,22,301,1,22,1,22,4,22,306,8,22,11,22,12,22,307,
        1,22,1,22,4,22,312,8,22,11,22,12,22,313,1,22,1,22,4,22,318,8,22,
        11,22,12,22,319,1,22,1,22,1,22,1,22,1,22,1,22,3,22,328,8,22,1,22,
        5,22,331,8,22,10,22,12,22,334,9,22,1,22,1,22,1,231,0,23,1,1,3,2,
        5,3,7,4,9,0,11,0,13,0,15,0,17,5,19,6,21,7,23,8,25,9,27,0,29,0,31,
        0,33,0,35,0,37,10,39,11,41,12,43,13,45,14,1,0,13,2,0,43,43,45,45,
        2,0,69,69,101,101,1,0,48,57,2,0,10,10,13,13,2,0,82,83,114,115,2,
        0,65,90,97,122,4,0,34,35,39,39,42,43,45,46,3,0,9,10,13,13,32,32,
        5,0,33,33,35,35,38,38,59,59,92,92,2,0,82,82,114,114,2,0,77,77,109,
        109,2,0,65,65,97,97,2,0,75,75,107,107,385,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,1,48,1,0,0,0,3,53,1,0,0,0,5,60,1,0,0,0,
        7,65,1,0,0,0,9,84,1,0,0,0,11,92,1,0,0,0,13,94,1,0,0,0,15,97,1,0,
        0,0,17,102,1,0,0,0,19,127,1,0,0,0,21,152,1,0,0,0,23,176,1,0,0,0,
        25,178,1,0,0,0,27,195,1,0,0,0,29,199,1,0,0,0,31,203,1,0,0,0,33,207,
        1,0,0,0,35,209,1,0,0,0,37,216,1,0,0,0,39,220,1,0,0,0,41,226,1,0,
        0,0,43,275,1,0,0,0,45,327,1,0,0,0,47,49,7,0,0,0,48,47,1,0,0,0,48,
        49,1,0,0,0,49,50,1,0,0,0,50,51,3,15,7,0,51,2,1,0,0,0,52,54,7,0,0,
        0,53,52,1,0,0,0,53,54,1,0,0,0,54,57,1,0,0,0,55,58,3,15,7,0,56,58,
        3,9,4,0,57,55,1,0,0,0,57,56,1,0,0,0,58,4,1,0,0,0,59,61,7,0,0,0,60,
        59,1,0,0,0,60,61,1,0,0,0,61,62,1,0,0,0,62,63,3,11,5,0,63,6,1,0,0,
        0,64,66,7,0,0,0,65,64,1,0,0,0,65,66,1,0,0,0,66,69,1,0,0,0,67,70,
        3,15,7,0,68,70,3,9,4,0,69,67,1,0,0,0,69,68,1,0,0,0,70,76,1,0,0,0,
        71,73,7,1,0,0,72,74,7,0,0,0,73,72,1,0,0,0,73,74,1,0,0,0,74,75,1,
        0,0,0,75,77,3,15,7,0,76,71,1,0,0,0,76,77,1,0,0,0,77,8,1,0,0,0,78,
        79,3,15,7,0,79,80,5,46,0,0,80,81,3,15,7,0,81,85,1,0,0,0,82,83,5,
        46,0,0,83,85,3,15,7,0,84,78,1,0,0,0,84,82,1,0,0,0,85,10,1,0,0,0,
        86,87,3,15,7,0,87,88,5,44,0,0,88,89,3,15,7,0,89,93,1,0,0,0,90,91,
        5,44,0,0,91,93,3,15,7,0,92,86,1,0,0,0,92,90,1,0,0,0,93,12,1,0,0,
        0,94,95,7,2,0,0,95,14,1,0,0,0,96,98,3,13,6,0,97,96,1,0,0,0,98,99,
        1,0,0,0,99,97,1,0,0,0,99,100,1,0,0,0,100,16,1,0,0,0,101,103,5,35,
        0,0,102,101,1,0,0,0,103,104,1,0,0,0,104,102,1,0,0,0,104,105,1,0,
        0,0,105,109,1,0,0,0,106,108,8,3,0,0,107,106,1,0,0,0,108,111,1,0,
        0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,115,1,0,0,0,111,109,1,0,
        0,0,112,114,5,35,0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,1,0,
        0,0,115,116,1,0,0,0,116,121,1,0,0,0,117,115,1,0,0,0,118,120,8,3,
        0,0,119,118,1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,1,0,
        0,0,122,124,1,0,0,0,123,121,1,0,0,0,124,125,6,8,0,0,125,18,1,0,0,
        0,126,128,5,33,0,0,127,126,1,0,0,0,128,129,1,0,0,0,129,127,1,0,0,
        0,129,130,1,0,0,0,130,134,1,0,0,0,131,133,8,3,0,0,132,131,1,0,0,
        0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,140,1,0,0,
        0,136,134,1,0,0,0,137,139,5,33,0,0,138,137,1,0,0,0,139,142,1,0,0,
        0,140,138,1,0,0,0,140,141,1,0,0,0,141,146,1,0,0,0,142,140,1,0,0,
        0,143,145,8,3,0,0,144,143,1,0,0,0,145,148,1,0,0,0,146,144,1,0,0,
        0,146,147,1,0,0,0,147,149,1,0,0,0,148,146,1,0,0,0,149,150,6,9,0,
        0,150,20,1,0,0,0,151,153,5,59,0,0,152,151,1,0,0,0,153,154,1,0,0,
        0,154,152,1,0,0,0,154,155,1,0,0,0,155,159,1,0,0,0,156,158,8,3,0,
        0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,
        0,160,165,1,0,0,0,161,159,1,0,0,0,162,164,5,59,0,0,163,162,1,0,0,
        0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,0,166,171,1,0,0,
        0,167,165,1,0,0,0,168,170,8,3,0,0,169,168,1,0,0,0,170,173,1,0,0,
        0,171,169,1,0,0,0,171,172,1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,
        0,174,175,6,10,0,0,175,22,1,0,0,0,176,177,7,4,0,0,177,24,1,0,0,0,
        178,179,3,15,7,0,179,180,5,58,0,0,180,181,3,35,17,0,181,190,5,95,
        0,0,182,184,3,15,7,0,183,185,3,27,13,0,184,183,1,0,0,0,184,185,1,
        0,0,0,185,191,1,0,0,0,186,188,3,27,13,0,187,186,1,0,0,0,187,188,
        1,0,0,0,188,189,1,0,0,0,189,191,3,15,7,0,190,182,1,0,0,0,190,187,
        1,0,0,0,191,192,1,0,0,0,192,193,5,58,0,0,193,194,3,35,17,0,194,26,
        1,0,0,0,195,196,7,5,0,0,196,28,1,0,0,0,197,200,3,27,13,0,198,200,
        3,13,6,0,199,197,1,0,0,0,199,198,1,0,0,0,200,30,1,0,0,0,201,204,
        3,29,14,0,202,204,5,95,0,0,203,201,1,0,0,0,203,202,1,0,0,0,204,32,
        1,0,0,0,205,208,3,31,15,0,206,208,7,6,0,0,207,205,1,0,0,0,207,206,
        1,0,0,0,208,34,1,0,0,0,209,213,3,31,15,0,210,212,3,33,16,0,211,210,
        1,0,0,0,212,215,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,36,1,
        0,0,0,215,213,1,0,0,0,216,217,3,15,7,0,217,218,5,46,0,0,218,38,1,
        0,0,0,219,221,7,7,0,0,220,219,1,0,0,0,221,222,1,0,0,0,222,220,1,
        0,0,0,222,223,1,0,0,0,223,224,1,0,0,0,224,225,6,19,1,0,225,40,1,
        0,0,0,226,231,5,123,0,0,227,230,3,41,20,0,228,230,9,0,0,0,229,227,
        1,0,0,0,229,228,1,0,0,0,230,233,1,0,0,0,231,232,1,0,0,0,231,229,
        1,0,0,0,232,234,1,0,0,0,233,231,1,0,0,0,234,235,5,125,0,0,235,236,
        1,0,0,0,236,237,6,20,0,0,237,42,1,0,0,0,238,276,7,8,0,0,239,241,
        5,47,0,0,240,242,5,47,0,0,241,240,1,0,0,0,242,243,1,0,0,0,243,241,
        1,0,0,0,243,244,1,0,0,0,244,276,1,0,0,0,245,247,5,42,0,0,246,248,
        5,42,0,0,247,246,1,0,0,0,248,249,1,0,0,0,249,247,1,0,0,0,249,250,
        1,0,0,0,250,276,1,0,0,0,251,253,5,45,0,0,252,254,5,45,0,0,253,252,
        1,0,0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,276,
        1,0,0,0,257,259,5,43,0,0,258,260,5,43,0,0,259,258,1,0,0,0,260,261,
        1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,276,1,0,0,0,263,265,
        5,61,0,0,264,266,5,61,0,0,265,264,1,0,0,0,266,267,1,0,0,0,267,265,
        1,0,0,0,267,268,1,0,0,0,268,276,1,0,0,0,269,270,7,9,0,0,270,271,
        7,1,0,0,271,272,7,10,0,0,272,273,7,11,0,0,273,274,7,9,0,0,274,276,
        7,12,0,0,275,238,1,0,0,0,275,239,1,0,0,0,275,245,1,0,0,0,275,251,
        1,0,0,0,275,257,1,0,0,0,275,263,1,0,0,0,275,269,1,0,0,0,276,280,
        1,0,0,0,277,279,5,32,0,0,278,277,1,0,0,0,279,282,1,0,0,0,280,278,
        1,0,0,0,280,281,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,283,285,
        7,3,0,0,284,283,1,0,0,0,285,286,1,0,0,0,286,284,1,0,0,0,286,287,
        1,0,0,0,287,288,1,0,0,0,288,289,6,21,0,0,289,44,1,0,0,0,290,328,
        7,8,0,0,291,293,5,47,0,0,292,294,5,47,0,0,293,292,1,0,0,0,294,295,
        1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,328,1,0,0,0,297,299,
        5,42,0,0,298,300,5,42,0,0,299,298,1,0,0,0,300,301,1,0,0,0,301,299,
        1,0,0,0,301,302,1,0,0,0,302,328,1,0,0,0,303,305,5,45,0,0,304,306,
        5,45,0,0,305,304,1,0,0,0,306,307,1,0,0,0,307,305,1,0,0,0,307,308,
        1,0,0,0,308,328,1,0,0,0,309,311,5,43,0,0,310,312,5,43,0,0,311,310,
        1,0,0,0,312,313,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,328,
        1,0,0,0,315,317,5,61,0,0,316,318,5,61,0,0,317,316,1,0,0,0,318,319,
        1,0,0,0,319,317,1,0,0,0,319,320,1,0,0,0,320,328,1,0,0,0,321,322,
        7,9,0,0,322,323,7,1,0,0,323,324,7,10,0,0,324,325,7,11,0,0,325,326,
        7,9,0,0,326,328,7,12,0,0,327,290,1,0,0,0,327,291,1,0,0,0,327,297,
        1,0,0,0,327,303,1,0,0,0,327,309,1,0,0,0,327,315,1,0,0,0,327,321,
        1,0,0,0,328,332,1,0,0,0,329,331,8,3,0,0,330,329,1,0,0,0,331,334,
        1,0,0,0,332,330,1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,332,
        1,0,0,0,335,336,6,22,0,0,336,46,1,0,0,0,49,0,48,53,57,60,65,69,73,
        76,84,92,99,104,109,115,121,129,134,140,146,154,159,165,171,184,
        187,190,199,203,207,213,222,229,231,243,249,255,261,267,275,280,
        286,295,301,307,313,319,327,332,2,0,1,0,6,0,0
    ]

class BiosymMRLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Integer = 1
    Float = 2
    Float_DecimalComma = 3
    Real = 4
    SHARP_COMMENT = 5
    EXCLM_COMMENT = 6
    SMCLN_COMMENT = 7
    Chiral_code = 8
    Atom_selection = 9
    Ordinal = 10
    SPACE = 11
    ENCLOSE_COMMENT = 12
    SECTION_COMMENT = 13
    LINE_COMMENT = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "Integer", "Float", "Float_DecimalComma", "Real", "SHARP_COMMENT", 
            "EXCLM_COMMENT", "SMCLN_COMMENT", "Chiral_code", "Atom_selection", 
            "Ordinal", "SPACE", "ENCLOSE_COMMENT", "SECTION_COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "Integer", "Float", "Float_DecimalComma", "Real", "DEC_DOT_DEC", 
                  "DEC_COM_DEC", "DEC_DIGIT", "DECIMAL", "SHARP_COMMENT", 
                  "EXCLM_COMMENT", "SMCLN_COMMENT", "Chiral_code", "Atom_selection", 
                  "ALPHA", "ALPHA_NUM", "START_CHAR", "NAME_CHAR", "SIMPLE_NAME", 
                  "Ordinal", "SPACE", "ENCLOSE_COMMENT", "SECTION_COMMENT", 
                  "LINE_COMMENT" ]

    grammarFileName = "BiosymMRLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


