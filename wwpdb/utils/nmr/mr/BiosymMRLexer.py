# Generated from BiosymMRLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,9,217,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,3,0,41,
        8,0,1,0,1,0,1,1,3,1,46,8,1,1,1,1,1,3,1,50,8,1,1,2,3,2,53,8,2,1,2,
        1,2,3,2,57,8,2,1,2,1,2,3,2,61,8,2,1,2,3,2,64,8,2,1,3,1,3,1,3,3,3,
        69,8,3,1,3,1,3,3,3,73,8,3,1,4,1,4,1,5,4,5,78,8,5,11,5,12,5,79,1,
        6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,3,7,90,8,7,1,7,1,7,1,7,1,8,1,8,1,9,
        1,9,3,9,99,8,9,1,10,1,10,3,10,103,8,10,1,11,1,11,3,11,107,8,11,1,
        12,1,12,3,12,111,8,12,1,13,1,13,3,13,115,8,13,1,14,1,14,5,14,119,
        8,14,10,14,12,14,122,9,14,1,15,4,15,125,8,15,11,15,12,15,126,1,15,
        1,15,1,16,1,16,1,16,5,16,134,8,16,10,16,12,16,137,9,16,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,4,17,146,8,17,11,17,12,17,147,1,17,1,17,
        4,17,152,8,17,11,17,12,17,153,1,17,1,17,4,17,158,8,17,11,17,12,17,
        159,1,17,1,17,1,17,1,17,1,17,1,17,3,17,168,8,17,1,17,5,17,171,8,
        17,10,17,12,17,174,9,17,1,17,4,17,177,8,17,11,17,12,17,178,1,17,
        1,17,1,18,1,18,1,18,4,18,186,8,18,11,18,12,18,187,1,18,1,18,4,18,
        192,8,18,11,18,12,18,193,1,18,1,18,4,18,198,8,18,11,18,12,18,199,
        1,18,1,18,1,18,1,18,1,18,1,18,3,18,208,8,18,1,18,5,18,211,8,18,10,
        18,12,18,214,9,18,1,18,1,18,1,135,0,19,1,1,3,2,5,3,7,0,9,0,11,0,
        13,4,15,5,17,0,19,0,21,0,23,0,25,0,27,0,29,0,31,6,33,7,35,8,37,9,
        1,0,13,2,0,43,43,45,45,2,0,69,69,101,101,1,0,48,57,2,0,82,83,114,
        115,2,0,65,90,97,122,4,0,34,35,39,39,42,43,45,46,3,0,9,10,13,13,
        32,32,5,0,33,33,35,35,38,38,47,47,59,59,2,0,82,82,114,114,2,0,77,
        77,109,109,2,0,65,65,97,97,2,0,75,75,107,107,2,0,10,10,13,13,243,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,
        31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,40,1,0,0,0,3,
        45,1,0,0,0,5,52,1,0,0,0,7,72,1,0,0,0,9,74,1,0,0,0,11,77,1,0,0,0,
        13,81,1,0,0,0,15,83,1,0,0,0,17,94,1,0,0,0,19,98,1,0,0,0,21,102,1,
        0,0,0,23,106,1,0,0,0,25,110,1,0,0,0,27,114,1,0,0,0,29,116,1,0,0,
        0,31,124,1,0,0,0,33,130,1,0,0,0,35,167,1,0,0,0,37,207,1,0,0,0,39,
        41,7,0,0,0,40,39,1,0,0,0,40,41,1,0,0,0,41,42,1,0,0,0,42,43,3,11,
        5,0,43,2,1,0,0,0,44,46,7,0,0,0,45,44,1,0,0,0,45,46,1,0,0,0,46,49,
        1,0,0,0,47,50,3,11,5,0,48,50,3,7,3,0,49,47,1,0,0,0,49,48,1,0,0,0,
        50,4,1,0,0,0,51,53,7,0,0,0,52,51,1,0,0,0,52,53,1,0,0,0,53,56,1,0,
        0,0,54,57,3,11,5,0,55,57,3,7,3,0,56,54,1,0,0,0,56,55,1,0,0,0,57,
        63,1,0,0,0,58,60,7,1,0,0,59,61,7,0,0,0,60,59,1,0,0,0,60,61,1,0,0,
        0,61,62,1,0,0,0,62,64,3,11,5,0,63,58,1,0,0,0,63,64,1,0,0,0,64,6,
        1,0,0,0,65,66,3,11,5,0,66,68,5,46,0,0,67,69,3,11,5,0,68,67,1,0,0,
        0,68,69,1,0,0,0,69,73,1,0,0,0,70,71,5,46,0,0,71,73,3,11,5,0,72,65,
        1,0,0,0,72,70,1,0,0,0,73,8,1,0,0,0,74,75,7,2,0,0,75,10,1,0,0,0,76,
        78,3,9,4,0,77,76,1,0,0,0,78,79,1,0,0,0,79,77,1,0,0,0,79,80,1,0,0,
        0,80,12,1,0,0,0,81,82,7,3,0,0,82,14,1,0,0,0,83,84,3,11,5,0,84,85,
        5,58,0,0,85,86,3,29,14,0,86,87,5,95,0,0,87,89,3,11,5,0,88,90,3,17,
        8,0,89,88,1,0,0,0,89,90,1,0,0,0,90,91,1,0,0,0,91,92,5,58,0,0,92,
        93,3,29,14,0,93,16,1,0,0,0,94,95,7,4,0,0,95,18,1,0,0,0,96,99,3,17,
        8,0,97,99,3,9,4,0,98,96,1,0,0,0,98,97,1,0,0,0,99,20,1,0,0,0,100,
        103,3,19,9,0,101,103,5,95,0,0,102,100,1,0,0,0,102,101,1,0,0,0,103,
        22,1,0,0,0,104,107,3,21,10,0,105,107,7,5,0,0,106,104,1,0,0,0,106,
        105,1,0,0,0,107,24,1,0,0,0,108,111,3,19,9,0,109,111,5,39,0,0,110,
        108,1,0,0,0,110,109,1,0,0,0,111,26,1,0,0,0,112,115,3,19,9,0,113,
        115,7,0,0,0,114,112,1,0,0,0,114,113,1,0,0,0,115,28,1,0,0,0,116,120,
        3,21,10,0,117,119,3,23,11,0,118,117,1,0,0,0,119,122,1,0,0,0,120,
        118,1,0,0,0,120,121,1,0,0,0,121,30,1,0,0,0,122,120,1,0,0,0,123,125,
        7,6,0,0,124,123,1,0,0,0,125,126,1,0,0,0,126,124,1,0,0,0,126,127,
        1,0,0,0,127,128,1,0,0,0,128,129,6,15,0,0,129,32,1,0,0,0,130,135,
        5,123,0,0,131,134,3,33,16,0,132,134,9,0,0,0,133,131,1,0,0,0,133,
        132,1,0,0,0,134,137,1,0,0,0,135,136,1,0,0,0,135,133,1,0,0,0,136,
        138,1,0,0,0,137,135,1,0,0,0,138,139,5,125,0,0,139,140,1,0,0,0,140,
        141,6,16,1,0,141,34,1,0,0,0,142,168,7,7,0,0,143,145,5,42,0,0,144,
        146,5,42,0,0,145,144,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,147,
        148,1,0,0,0,148,168,1,0,0,0,149,151,5,45,0,0,150,152,5,45,0,0,151,
        150,1,0,0,0,152,153,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,
        168,1,0,0,0,155,157,5,43,0,0,156,158,5,43,0,0,157,156,1,0,0,0,158,
        159,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,168,1,0,0,0,161,
        162,7,8,0,0,162,163,7,1,0,0,163,164,7,9,0,0,164,165,7,10,0,0,165,
        166,7,8,0,0,166,168,7,11,0,0,167,142,1,0,0,0,167,143,1,0,0,0,167,
        149,1,0,0,0,167,155,1,0,0,0,167,161,1,0,0,0,168,172,1,0,0,0,169,
        171,5,32,0,0,170,169,1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,
        173,1,0,0,0,173,176,1,0,0,0,174,172,1,0,0,0,175,177,7,12,0,0,176,
        175,1,0,0,0,177,178,1,0,0,0,178,176,1,0,0,0,178,179,1,0,0,0,179,
        180,1,0,0,0,180,181,6,17,1,0,181,36,1,0,0,0,182,208,7,7,0,0,183,
        185,5,42,0,0,184,186,5,42,0,0,185,184,1,0,0,0,186,187,1,0,0,0,187,
        185,1,0,0,0,187,188,1,0,0,0,188,208,1,0,0,0,189,191,5,45,0,0,190,
        192,5,45,0,0,191,190,1,0,0,0,192,193,1,0,0,0,193,191,1,0,0,0,193,
        194,1,0,0,0,194,208,1,0,0,0,195,197,5,43,0,0,196,198,5,43,0,0,197,
        196,1,0,0,0,198,199,1,0,0,0,199,197,1,0,0,0,199,200,1,0,0,0,200,
        208,1,0,0,0,201,202,7,8,0,0,202,203,7,1,0,0,203,204,7,9,0,0,204,
        205,7,10,0,0,205,206,7,8,0,0,206,208,7,11,0,0,207,182,1,0,0,0,207,
        183,1,0,0,0,207,189,1,0,0,0,207,195,1,0,0,0,207,201,1,0,0,0,208,
        212,1,0,0,0,209,211,8,12,0,0,210,209,1,0,0,0,211,214,1,0,0,0,212,
        210,1,0,0,0,212,213,1,0,0,0,213,215,1,0,0,0,214,212,1,0,0,0,215,
        216,6,18,1,0,216,38,1,0,0,0,32,0,40,45,49,52,56,60,63,68,72,79,89,
        98,102,106,110,114,120,126,133,135,147,153,159,167,172,178,187,193,
        199,207,212,2,6,0,0,0,1,0
    ]

class BiosymMRLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Integer = 1
    Float = 2
    Real = 3
    Chiral_code = 4
    Atom_selection = 5
    SPACE = 6
    COMMENT = 7
    SECTION_COMMENT = 8
    LINE_COMMENT = 9

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "Integer", "Float", "Real", "Chiral_code", "Atom_selection", 
            "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "Integer", "Float", "Real", "DEC_DOT_DEC", "DEC_DIGIT", 
                  "DECIMAL", "Chiral_code", "Atom_selection", "ALPHA", "ALPHA_NUM", 
                  "START_CHAR", "NAME_CHAR", "ATM_NAME_CHAR", "ATM_TYPE_CHAR", 
                  "SIMPLE_NAME", "SPACE", "COMMENT", "SECTION_COMMENT", 
                  "LINE_COMMENT" ]

    grammarFileName = "BiosymMRLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


