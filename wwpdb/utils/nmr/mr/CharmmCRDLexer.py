# Generated from CharmmCRDLexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,14,289,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,
        7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
        2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,
        7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,1,0,3,0,52,8,0,1,0,
        1,0,1,1,3,1,57,8,1,1,1,1,1,3,1,61,8,1,1,2,1,2,5,2,65,8,2,10,2,12,
        2,68,9,2,1,2,1,2,1,3,1,3,1,3,3,3,75,8,3,1,3,1,3,3,3,79,8,3,1,4,1,
        4,1,5,4,5,84,8,5,11,5,12,5,85,1,6,4,6,89,8,6,11,6,12,6,90,1,6,1,
        6,1,7,1,7,1,7,1,7,1,8,1,8,3,8,101,8,8,1,9,1,9,1,10,1,10,3,10,107,
        8,10,1,11,1,11,3,11,111,8,11,1,12,1,12,3,12,115,8,12,1,13,1,13,3,
        13,119,8,13,1,14,1,14,3,14,123,8,14,1,15,1,15,5,15,127,8,15,10,15,
        12,15,130,9,15,1,16,4,16,133,8,16,11,16,12,16,134,1,16,1,16,1,17,
        4,17,140,8,17,11,17,12,17,141,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
        5,18,151,8,18,10,18,12,18,154,9,18,1,18,1,18,1,18,1,18,1,19,1,19,
        1,19,4,19,163,8,19,11,19,12,19,164,1,19,1,19,4,19,169,8,19,11,19,
        12,19,170,1,19,1,19,4,19,175,8,19,11,19,12,19,176,1,19,1,19,4,19,
        181,8,19,11,19,12,19,182,1,19,1,19,4,19,187,8,19,11,19,12,19,188,
        1,19,1,19,4,19,193,8,19,11,19,12,19,194,1,19,1,19,1,19,1,19,1,19,
        1,19,3,19,203,8,19,1,19,5,19,206,8,19,10,19,12,19,209,9,19,1,19,
        4,19,212,8,19,11,19,12,19,213,1,19,1,19,1,20,1,20,1,20,4,20,221,
        8,20,11,20,12,20,222,1,20,1,20,4,20,227,8,20,11,20,12,20,228,1,20,
        1,20,4,20,233,8,20,11,20,12,20,234,1,20,1,20,4,20,239,8,20,11,20,
        12,20,240,1,20,1,20,4,20,245,8,20,11,20,12,20,246,1,20,1,20,4,20,
        251,8,20,11,20,12,20,252,1,20,1,20,1,20,1,20,1,20,1,20,3,20,261,
        8,20,1,20,5,20,264,8,20,10,20,12,20,267,9,20,1,20,1,20,1,21,4,21,
        272,8,21,11,21,12,21,273,1,22,4,22,277,8,22,11,22,12,22,278,1,22,
        1,22,1,23,4,23,284,8,23,11,23,12,23,285,1,23,1,23,1,152,0,24,2,1,
        4,2,6,3,8,0,10,0,12,0,14,4,16,5,18,6,20,0,22,0,24,0,26,0,28,0,30,
        0,32,0,34,7,36,8,38,9,40,10,42,11,44,12,46,13,48,14,2,0,1,18,2,0,
        43,43,45,45,3,0,10,10,13,13,34,34,1,0,48,57,3,0,33,33,35,35,42,42,
        2,0,69,69,101,101,2,0,88,88,120,120,2,0,84,84,116,116,2,0,65,90,
        97,122,4,0,34,34,39,39,43,43,45,46,3,0,9,10,13,13,32,32,4,0,33,33,
        35,35,59,59,92,92,2,0,82,82,114,114,2,0,77,77,109,109,2,0,65,65,
        97,97,2,0,75,75,107,107,2,0,10,10,13,13,2,0,59,59,92,92,2,0,9,9,
        32,32,328,0,2,1,0,0,0,0,4,1,0,0,0,0,6,1,0,0,0,0,14,1,0,0,0,0,16,
        1,0,0,0,0,18,1,0,0,0,0,34,1,0,0,0,0,36,1,0,0,0,0,38,1,0,0,0,0,40,
        1,0,0,0,0,42,1,0,0,0,1,44,1,0,0,0,1,46,1,0,0,0,1,48,1,0,0,0,2,51,
        1,0,0,0,4,56,1,0,0,0,6,62,1,0,0,0,8,78,1,0,0,0,10,80,1,0,0,0,12,
        83,1,0,0,0,14,88,1,0,0,0,16,94,1,0,0,0,18,100,1,0,0,0,20,102,1,0,
        0,0,22,106,1,0,0,0,24,110,1,0,0,0,26,114,1,0,0,0,28,118,1,0,0,0,
        30,122,1,0,0,0,32,124,1,0,0,0,34,132,1,0,0,0,36,139,1,0,0,0,38,147,
        1,0,0,0,40,202,1,0,0,0,42,260,1,0,0,0,44,271,1,0,0,0,46,276,1,0,
        0,0,48,283,1,0,0,0,50,52,5,45,0,0,51,50,1,0,0,0,51,52,1,0,0,0,52,
        53,1,0,0,0,53,54,3,12,5,0,54,3,1,0,0,0,55,57,7,0,0,0,56,55,1,0,0,
        0,56,57,1,0,0,0,57,60,1,0,0,0,58,61,3,12,5,0,59,61,3,8,3,0,60,58,
        1,0,0,0,60,59,1,0,0,0,61,5,1,0,0,0,62,66,5,34,0,0,63,65,8,1,0,0,
        64,63,1,0,0,0,65,68,1,0,0,0,66,64,1,0,0,0,66,67,1,0,0,0,67,69,1,
        0,0,0,68,66,1,0,0,0,69,70,5,34,0,0,70,7,1,0,0,0,71,72,3,12,5,0,72,
        74,5,46,0,0,73,75,3,12,5,0,74,73,1,0,0,0,74,75,1,0,0,0,75,79,1,0,
        0,0,76,77,5,46,0,0,77,79,3,12,5,0,78,71,1,0,0,0,78,76,1,0,0,0,79,
        9,1,0,0,0,80,81,7,2,0,0,81,11,1,0,0,0,82,84,3,10,4,0,83,82,1,0,0,
        0,84,85,1,0,0,0,85,83,1,0,0,0,85,86,1,0,0,0,86,13,1,0,0,0,87,89,
        7,3,0,0,88,87,1,0,0,0,89,90,1,0,0,0,90,88,1,0,0,0,90,91,1,0,0,0,
        91,92,1,0,0,0,92,93,6,6,0,0,93,15,1,0,0,0,94,95,7,4,0,0,95,96,7,
        5,0,0,96,97,7,6,0,0,97,17,1,0,0,0,98,101,3,32,15,0,99,101,3,16,7,
        0,100,98,1,0,0,0,100,99,1,0,0,0,101,19,1,0,0,0,102,103,7,7,0,0,103,
        21,1,0,0,0,104,107,3,20,9,0,105,107,3,10,4,0,106,104,1,0,0,0,106,
        105,1,0,0,0,107,23,1,0,0,0,108,111,3,22,10,0,109,111,5,95,0,0,110,
        108,1,0,0,0,110,109,1,0,0,0,111,25,1,0,0,0,112,115,3,24,11,0,113,
        115,7,8,0,0,114,112,1,0,0,0,114,113,1,0,0,0,115,27,1,0,0,0,116,119,
        3,22,10,0,117,119,5,39,0,0,118,116,1,0,0,0,118,117,1,0,0,0,119,29,
        1,0,0,0,120,123,3,22,10,0,121,123,7,0,0,0,122,120,1,0,0,0,122,121,
        1,0,0,0,123,31,1,0,0,0,124,128,3,24,11,0,125,127,3,26,12,0,126,125,
        1,0,0,0,127,130,1,0,0,0,128,126,1,0,0,0,128,129,1,0,0,0,129,33,1,
        0,0,0,130,128,1,0,0,0,131,133,7,9,0,0,132,131,1,0,0,0,133,134,1,
        0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,136,1,0,0,0,136,137,6,
        16,1,0,137,35,1,0,0,0,138,140,5,45,0,0,139,138,1,0,0,0,140,141,1,
        0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,143,1,0,0,0,143,144,3,
        34,16,0,144,145,1,0,0,0,145,146,6,17,1,0,146,37,1,0,0,0,147,152,
        5,123,0,0,148,151,3,38,18,0,149,151,9,0,0,0,150,148,1,0,0,0,150,
        149,1,0,0,0,151,154,1,0,0,0,152,153,1,0,0,0,152,150,1,0,0,0,153,
        155,1,0,0,0,154,152,1,0,0,0,155,156,5,125,0,0,156,157,1,0,0,0,157,
        158,6,18,2,0,158,39,1,0,0,0,159,203,7,10,0,0,160,162,5,47,0,0,161,
        163,5,47,0,0,162,161,1,0,0,0,163,164,1,0,0,0,164,162,1,0,0,0,164,
        165,1,0,0,0,165,203,1,0,0,0,166,168,5,42,0,0,167,169,5,42,0,0,168,
        167,1,0,0,0,169,170,1,0,0,0,170,168,1,0,0,0,170,171,1,0,0,0,171,
        203,1,0,0,0,172,174,5,45,0,0,173,175,5,45,0,0,174,173,1,0,0,0,175,
        176,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,203,1,0,0,0,178,
        180,5,43,0,0,179,181,5,43,0,0,180,179,1,0,0,0,181,182,1,0,0,0,182,
        180,1,0,0,0,182,183,1,0,0,0,183,203,1,0,0,0,184,186,5,61,0,0,185,
        187,5,61,0,0,186,185,1,0,0,0,187,188,1,0,0,0,188,186,1,0,0,0,188,
        189,1,0,0,0,189,203,1,0,0,0,190,192,5,62,0,0,191,193,5,62,0,0,192,
        191,1,0,0,0,193,194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,
        203,1,0,0,0,196,197,7,11,0,0,197,198,7,4,0,0,198,199,7,12,0,0,199,
        200,7,13,0,0,200,201,7,11,0,0,201,203,7,14,0,0,202,159,1,0,0,0,202,
        160,1,0,0,0,202,166,1,0,0,0,202,172,1,0,0,0,202,178,1,0,0,0,202,
        184,1,0,0,0,202,190,1,0,0,0,202,196,1,0,0,0,203,207,1,0,0,0,204,
        206,5,32,0,0,205,204,1,0,0,0,206,209,1,0,0,0,207,205,1,0,0,0,207,
        208,1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,210,212,7,15,0,0,211,
        210,1,0,0,0,212,213,1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,
        215,1,0,0,0,215,216,6,19,2,0,216,41,1,0,0,0,217,261,7,16,0,0,218,
        220,5,47,0,0,219,221,5,47,0,0,220,219,1,0,0,0,221,222,1,0,0,0,222,
        220,1,0,0,0,222,223,1,0,0,0,223,261,1,0,0,0,224,226,5,42,0,0,225,
        227,5,42,0,0,226,225,1,0,0,0,227,228,1,0,0,0,228,226,1,0,0,0,228,
        229,1,0,0,0,229,261,1,0,0,0,230,232,5,45,0,0,231,233,5,45,0,0,232,
        231,1,0,0,0,233,234,1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,
        261,1,0,0,0,236,238,5,43,0,0,237,239,5,43,0,0,238,237,1,0,0,0,239,
        240,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,261,1,0,0,0,242,
        244,5,61,0,0,243,245,5,61,0,0,244,243,1,0,0,0,245,246,1,0,0,0,246,
        244,1,0,0,0,246,247,1,0,0,0,247,261,1,0,0,0,248,250,5,62,0,0,249,
        251,5,62,0,0,250,249,1,0,0,0,251,252,1,0,0,0,252,250,1,0,0,0,252,
        253,1,0,0,0,253,261,1,0,0,0,254,255,7,11,0,0,255,256,7,4,0,0,256,
        257,7,12,0,0,257,258,7,13,0,0,258,259,7,11,0,0,259,261,7,14,0,0,
        260,217,1,0,0,0,260,218,1,0,0,0,260,224,1,0,0,0,260,230,1,0,0,0,
        260,236,1,0,0,0,260,242,1,0,0,0,260,248,1,0,0,0,260,254,1,0,0,0,
        261,265,1,0,0,0,262,264,8,15,0,0,263,262,1,0,0,0,264,267,1,0,0,0,
        265,263,1,0,0,0,265,266,1,0,0,0,266,268,1,0,0,0,267,265,1,0,0,0,
        268,269,6,20,2,0,269,43,1,0,0,0,270,272,8,9,0,0,271,270,1,0,0,0,
        272,273,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,45,1,0,0,0,275,
        277,7,17,0,0,276,275,1,0,0,0,277,278,1,0,0,0,278,276,1,0,0,0,278,
        279,1,0,0,0,279,280,1,0,0,0,280,281,6,22,1,0,281,47,1,0,0,0,282,
        284,7,15,0,0,283,282,1,0,0,0,284,285,1,0,0,0,285,283,1,0,0,0,285,
        286,1,0,0,0,286,287,1,0,0,0,287,288,6,23,3,0,288,49,1,0,0,0,41,0,
        1,51,56,60,66,74,78,85,90,100,106,110,114,118,122,128,134,141,150,
        152,164,170,176,182,188,194,202,207,213,222,228,234,240,246,252,
        260,265,273,278,285,4,2,1,0,6,0,0,0,1,0,2,0,0
    ]

class CharmmCRDLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    COMMENT_MODE = 1

    Integer = 1
    Float = 2
    Double_quote_string = 3
    COMMENT = 4
    Ext = 5
    Simple_name = 6
    SPACE = 7
    CONTINUE = 8
    ENCLOSE_COMMENT = 9
    SECTION_COMMENT = 10
    LINE_COMMENT = 11
    Any_name = 12
    SPACE_CM = 13
    RETURN_CM = 14

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE", "COMMENT_MODE" ]

    literalNames = [ "<INVALID>",
            "'EXT'" ]

    symbolicNames = [ "<INVALID>",
            "Integer", "Float", "Double_quote_string", "COMMENT", "Ext", 
            "Simple_name", "SPACE", "CONTINUE", "ENCLOSE_COMMENT", "SECTION_COMMENT", 
            "LINE_COMMENT", "Any_name", "SPACE_CM", "RETURN_CM" ]

    ruleNames = [ "Integer", "Float", "Double_quote_string", "DEC_DOT_DEC", 
                  "DEC_DIGIT", "DECIMAL", "COMMENT", "Ext", "Simple_name", 
                  "ALPHA", "ALPHA_NUM", "START_CHAR", "NAME_CHAR", "ATM_NAME_CHAR", 
                  "ATM_TYPE_CHAR", "SIMPLE_NAME", "SPACE", "CONTINUE", "ENCLOSE_COMMENT", 
                  "SECTION_COMMENT", "LINE_COMMENT", "Any_name", "SPACE_CM", 
                  "RETURN_CM" ]

    grammarFileName = "CharmmCRDLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


