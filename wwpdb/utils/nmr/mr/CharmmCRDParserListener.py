##
# File: CharmmCRDParserListener.py
# Date: 14-Nov-2024
#
# Updates:
""" ParserLister class for CHARMM CRD files.
    @author: Masashi Yokochi
"""
import sys
import collections
import copy

from antlr4 import ParseTreeListener
from rmsd.calculate_rmsd import NAMES_ELEMENT  # noqa: F401 pylint: disable=no-name-in-module, import-error, unused-import

try:
    from wwpdb.utils.align.alignlib import PairwiseAlign  # pylint: disable=no-name-in-module
    from wwpdb.utils.nmr.mr.CharmmCRDParser import CharmmCRDParser
    from wwpdb.utils.nmr.mr.ParserListenerUtil import (coordAssemblyChecker,
                                                       translateToStdAtomName,
                                                       translateToStdAtomNameOfDmpc,
                                                       translateToStdResName,
                                                       translateToLigandName,
                                                       REPRESENTATIVE_MODEL_ID,
                                                       REPRESENTATIVE_ALT_ID)
    from wwpdb.utils.nmr.ChemCompUtil import ChemCompUtil
    from wwpdb.utils.nmr.BMRBChemShiftStat import BMRBChemShiftStat
    from wwpdb.utils.nmr.AlignUtil import (monDict3,
                                           protonBeginCode,
                                           aminoProtonCode,
                                           isReservedLigCode,
                                           letterToDigit, indexToLetter,
                                           alignPolymerSequence,
                                           assignPolymerSequence,
                                           trimSequenceAlignment,
                                           retrieveAtomIdentFromMRMap,
                                           alignPolymerSequenceWithConflicts,
                                           getRestraintFormatName,
                                           getOneLetterCodeCanSequence)
except ImportError:
    from nmr.align.alignlib import PairwiseAlign  # pylint: disable=no-name-in-module
    from nmr.mr.CharmmCRDParser import CharmmCRDParser
    from nmr.mr.ParserListenerUtil import (coordAssemblyChecker,
                                           translateToStdAtomName,
                                           translateToStdAtomNameOfDmpc,
                                           translateToStdResName,
                                           translateToLigandName,
                                           REPRESENTATIVE_MODEL_ID,
                                           REPRESENTATIVE_ALT_ID)
    from nmr.ChemCompUtil import ChemCompUtil
    from nmr.BMRBChemShiftStat import BMRBChemShiftStat
    from nmr.AlignUtil import (monDict3,
                               protonBeginCode,
                               aminoProtonCode,
                               isReservedLigCode,
                               letterToDigit, indexToLetter,
                               alignPolymerSequence,
                               assignPolymerSequence,
                               trimSequenceAlignment,
                               retrieveAtomIdentFromMRMap,
                               alignPolymerSequenceWithConflicts,
                               getRestraintFormatName,
                               getOneLetterCodeCanSequence)


# This class defines a complete listener for a parse tree produced by CharmmCRDParser.
class CharmmCRDParserListener(ParseTreeListener):

    __file_type = 'nm-aux-cha'

    # atom name mapping of public MR file between the archive coordinates and submitted ones
    __mrAtomNameMapping = None

    # CCD accessing utility
    __ccU = None

    # BMRB chemical shift statistics
    __csStat = None

    # Pairwise align
    __pA = None

    # coordinates information generated by ParserListenerUtil.coordAssemblyChecker()
    __polySeqModel = None
    __nonPolyModel = None
    __branchedModel = None
    __coordAtomSite = None
    __coordUnobsRes = None

    __hasPolySeqModel = False
    __hasNonPolyModel = False
    __hasBranchedModel = False
    __noWaterMol = True

    # polymer sequence of CHARMM CRD (parameter/topology) file
    __polySeqPrmTop = None

    __seqAlign = None
    __chainAssign = None

    # atoms
    __atoms = []

    # CHARMM atom number dictionary
    __atomNumberDict = None

    __f = None
    warningMessage = None

    def __init__(self, verbose=True, log=sys.stdout,
                 representativeModelId=REPRESENTATIVE_MODEL_ID,
                 representativeAltId=REPRESENTATIVE_ALT_ID,
                 mrAtomNameMapping=None,
                 cR=None, caC=None, ccU=None, csStat=None):

        self.__mrAtomNameMapping = None if mrAtomNameMapping is None or len(mrAtomNameMapping) == 0 else mrAtomNameMapping

        if cR is not None:
            ret = coordAssemblyChecker(verbose, log, representativeModelId, representativeAltId,
                                       cR, caC, None, fullCheck=True)
            self.__polySeqModel = ret['polymer_sequence']
            self.__nonPolyModel = ret['non_polymer']
            self.__branchedModel = ret['branched']
            self.__coordAtomSite = ret['coord_atom_site']
            self.__coordUnobsRes = ret['coord_unobs_res']

        self.__hasPolySeqModel = self.__polySeqModel is not None and len(self.__polySeqModel) > 0
        self.__hasNonPolyModel = self.__nonPolyModel is not None and len(self.__nonPolyModel) > 0
        self.__hasBranchedModel = self.__branchedModel is not None and len(self.__branchedModel) > 0
        self.__noWaterMol = not self.__hasNonPolyModel or not any(np['comp_id'][0] == 'HOH' for np in self.__nonPolyModel)

        # CCD accessing utility
        self.__ccU = ChemCompUtil(verbose, log) if ccU is None else ccU

        # BMRB chemical shift statistics
        self.__csStat = BMRBChemShiftStat(verbose, log, self.__ccU) if csStat is None else csStat

        # Pairwise align
        if self.__hasPolySeqModel:
            self.__pA = PairwiseAlign()
            self.__pA.setVerbose(verbose)

        self.coordinatesStatements = 0

    # Enter a parse tree produced by CharmmCRDParser#charmm_crd.
    def enterCharmm_crd(self, ctx: CharmmCRDParser.Charmm_crdContext):  # pylint: disable=unused-argument
        self.__atomNumberDict = {}
        self.__polySeqPrmTop = []
        self.__f = []

    # Exit a parse tree produced by CharmmCRDParser#charmm_crd.
    def exitCharmm_crd(self, ctx: CharmmCRDParser.Charmm_crdContext):  # pylint: disable=unused-argument

        try:

            if not self.__hasPolySeqModel:
                return

            if len(self.__atoms) == 0:
                return

            chainIndex = letterToDigit(self.__polySeqModel[0]['chain_id']) - 1  # set tentative chain_id from label_asym_id, which will be assigned to coordinate auth_asym_id
            chainId = indexToLetter(chainIndex)

            terminus = [atom['auth_atom_id'].endswith('T') for atom in self.__atoms]

            atomTotal = len(self.__atoms)
            if terminus[0]:
                terminus[0] = False
            for i in range(0, atomTotal - 1):
                j = i + 1
                if terminus[i] and terminus[j]:
                    terminus[i] = False
            if terminus[-1]:
                terminus[-1] = False

            seqIdList = []
            compIdList = []
            retrievedAtomNumList = []

            NON_METAL_ELEMENTS = ('H', 'C', 'N', 'O', 'P', 'S')

            def is_segment(prev_asym_id, prev_comp_id, prev_atom_name, asym_id, comp_id, atom_name):
                if prev_asym_id is None or prev_comp_id is None:
                    return False
                if prev_asym_id != asym_id:
                    return True
                is_prev_term_atom = prev_atom_name.endswith('T')
                if is_prev_term_atom and atom_name.endswith('T'):
                    return True
                is_prev_3_prime_comp = prev_comp_id.endswith('3')
                if is_prev_3_prime_comp and (is_prev_term_atom
                                             or self.__csStat.peptideLike(translateToStdResName(comp_id, ccU=self.__ccU))):
                    return True
                return comp_id.endswith('5')\
                    and (is_prev_3_prime_comp
                         or self.__csStat.peptideLike(translateToStdResName(prev_comp_id, ccU=self.__ccU)))

            def is_ligand(prev_comp_id, comp_id):
                if prev_comp_id is None or not self.__hasNonPolyModel:
                    return False
                if not prev_comp_id.endswith('3') or prev_comp_id == comp_id:
                    return False
                for np in self.__nonPolyModel:
                    if comp_id in np['comp_id']:
                        return True
                for np in self.__nonPolyModel:
                    if 'alt_comp_id' in np:
                        if comp_id in np['alt_comp_id']:
                            return True
                return False

            def is_metal_ion(comp_id, atom_name):
                if comp_id is None:
                    return False
                if comp_id != atom_name:
                    return False
                return comp_id.split('+')[0].title() in NAMES_ELEMENT\
                    or comp_id.split('-')[0].title() in NAMES_ELEMENT

            def is_metal_elem(prev_atom_name, prev_seq_id, seq_id):
                if len(prev_atom_name) == 0:
                    return False
                return prev_seq_id != seq_id and prev_atom_name[0] not in NON_METAL_ELEMENTS

            hasSegCompId = False
            ancAtomName = prevAtomName = ''
            prevAsymId = prevSeqId = prevCompId = None
            offset = 0
            for atom in self.__atoms:
                atomNum = atom['atom_number']
                atomName = atom['auth_atom_id']
                asymId = atom['auth_chain_id']
                _seqId = atom['auth_seq_id']
                compId = atom['auth_comp_id']
                if self.__noWaterMol and (compId in ('HOH', 'H2O', 'WAT') or (len(compId) > 3 and compId[:3] in ('HOH', 'H2O', 'WAT'))):
                    break
                if not hasSegCompId and (compId.endswith('5') or compId.endswith('3')):
                    hasSegCompId = True
                if not hasSegCompId and compId not in monDict3 and self.__mrAtomNameMapping is not None and atomName[0] in protonBeginCode:
                    _, compId, _atomName = retrieveAtomIdentFromMRMap(self.__ccU, self.__mrAtomNameMapping, _seqId, compId, atomName)
                    if _atomName != atomName:
                        atomName = _atomName
                        retrievedAtomNumList.append(atomNum)

                if (terminus[atomNum - 1] and ancAtomName.endswith('T'))\
                   or is_segment(prevAsymId, prevCompId, prevAtomName, asymId, compId, atomName)\
                   or is_ligand(prevCompId, compId)\
                   or is_metal_ion(compId, atomName)\
                   or is_metal_ion(prevCompId, prevAtomName)\
                   or is_metal_elem(prevAtomName, prevSeqId, _seqId):

                    self.__polySeqPrmTop.append({'chain_id': chainId,
                                                 'seq_id': seqIdList,
                                                 'auth_comp_id': compIdList})
                    seqIdList = []
                    compIdList = []
                    chainIndex += 1
                    chainId = indexToLetter(chainIndex)
                    offset = 1 - _seqId

                seqId = _seqId + offset
                if seqId not in seqIdList:
                    seqIdList.append(seqId)
                    compIdList.append(compId)
                self.__atomNumberDict[atomNum] = {'chain_id': chainId,
                                                  'seq_id': seqId,
                                                  'auth_comp_id': compId,
                                                  'auth_atom_id': atomName}
                ancAtomName = prevAtomName
                prevAtomName = atomName
                prevAsymId = asymId
                prevSeqId = _seqId
                prevCompId = compId

            self.__polySeqPrmTop.append({'chain_id': chainId,
                                         'seq_id': seqIdList,
                                         'auth_comp_id': compIdList})

            nonPolyCompIdList = []
            if self.__hasNonPolyModel:
                for np in self.__nonPolyModel:
                    compId = np['comp_id'][0]
                    if compId not in nonPolyCompIdList:
                        nonPolyCompIdList.append(compId)

            for ps in self.__polySeqPrmTop:
                chainId = ps['chain_id']
                compIdList = []
                for seqId, authCompId in zip(ps['seq_id'], ps['auth_comp_id']):
                    authAtomIds = [translateToStdAtomName(atomNum['auth_atom_id'], atomNum['auth_comp_id'],
                                                          ccU=self.__ccU, unambig=True)
                                   for atomNum in self.__atomNumberDict.values()
                                   if atomNum['chain_id'] == chainId
                                   and atomNum['seq_id'] == seqId
                                   and atomNum['auth_atom_id'][0] not in protonBeginCode]
                    authCompId = translateToStdResName(authCompId, ccU=self.__ccU)
                    if self.__ccU.updateChemCompDict(authCompId):
                        chemCompAtomIds = [cca[self.__ccU.ccaAtomId] for cca in self.__ccU.lastAtomList]
                        valid = True
                        for _atomId in authAtomIds:
                            if _atomId not in chemCompAtomIds:
                                valid = False
                                break
                            if not valid:
                                break
                        if valid:
                            compIdList.append(authCompId)
                            for k, atomNum in self.__atomNumberDict.items():
                                if atomNum['chain_id'] == chainId and atomNum['seq_id'] == seqId:
                                    atomNum['comp_id'] = authCompId

                                    if authCompId in nonPolyCompIdList and self.__mrAtomNameMapping is not None\
                                       and atomNum['auth_atom_id'][0] in protonBeginCode and k not in retrievedAtomNumList:
                                        _, _, atomId = retrieveAtomIdentFromMRMap(self.__ccU, self.__mrAtomNameMapping, None, authCompId, atomNum['auth_atom_id'], None, None, True)
                                    else:
                                        atomId = atomNum['auth_atom_id']

                                    atomId = translateToStdAtomName(atomId, authCompId, chemCompAtomIds, ccU=self.__ccU, unambig=True)

                                    if atomId[0] not in protonBeginCode or atomId in chemCompAtomIds:
                                        atomNum['atom_id'] = atomId
                                    else:
                                        if atomId in chemCompAtomIds:
                                            atomNum['atom_id'] = atomId

                        else:
                            compId = self.__csStat.getSimilarCompIdFromAtomIds([translateToStdAtomName(atomNum['auth_atom_id'],
                                                                                                       atomNum['auth_comp_id'],
                                                                                                       ccU=self.__ccU,
                                                                                                       unambig=True)
                                                                                for atomNum in self.__atomNumberDict.values()
                                                                                if atomNum['chain_id'] == chainId
                                                                                and atomNum['seq_id'] == seqId])

                            if self.__hasNonPolyModel and compId != authCompId:
                                ligands = 0
                                for np in self.__nonPolyModel:
                                    if 'alt_comp_id' in np:
                                        ligands += np['alt_comp_id'].count(authCompId)
                                if ligands > 0:
                                    for np in self.__nonPolyModel:
                                        if authCompId in np['alt_comp_id']:
                                            compId = np['comp_id'][0]
                                            break
                                if ligands == 0:
                                    __compId = None
                                    for np in self.__nonPolyModel:
                                        for ligand in np['comp_id']:
                                            __compId = translateToLigandName(authCompId, ligand, self.__ccU)
                                            if __compId == ligand:
                                                ligands += 1
                                    if ligands == 1:
                                        compId = __compId
                                    elif len(self.__nonPolyModel) == 1 and self.__ccU.updateChemCompDict(authCompId):
                                        if self.__ccU.lastChemCompDict['_chem_comp.pdbx_release_status'] == 'OBS' or isReservedLigCode(authCompId):
                                            compId = self.__nonPolyModel[0]['comp_id'][0]

                            if compId is not None:
                                compIdList.append(compId + '?')  # decide when coordinate is available
                                chemCompAtomIds = None
                                if self.__ccU.updateChemCompDict(compId):
                                    chemCompAtomIds = [cca[self.__ccU.ccaAtomId] for cca in self.__ccU.lastAtomList]
                                for k, atomNum in self.__atomNumberDict.items():
                                    if atomNum['chain_id'] == chainId and atomNum['seq_id'] == seqId:
                                        atomNum['comp_id'] = compId

                                        if compId in nonPolyCompIdList and self.__mrAtomNameMapping is not None\
                                           and atomNum['auth_atom_id'][0] in protonBeginCode and k not in retrievedAtomNumList:
                                            _, _, atomId = retrieveAtomIdentFromMRMap(self.__ccU, self.__mrAtomNameMapping, None, compId, atomNum['auth_atom_id'], None, None, True)
                                        else:
                                            atomId = atomNum['auth_atom_id']

                                        atomId = translateToStdAtomName(atomId, compId, chemCompAtomIds, ccU=self.__ccU, unambig=True)

                                        if chemCompAtomIds is not None and atomId in chemCompAtomIds:
                                            atomNum['atom_id'] = atomId
                                        elif chemCompAtomIds is not None:
                                            if atomId in chemCompAtomIds:
                                                atomNum['atom_id'] = atomId
                            else:
                                compIdList.append('.')
                                unknownAtomIds = [_atomId for _atomId in authAtomIds if _atomId not in chemCompAtomIds]
                                self.__f.append(f"[Unknown atom name] "
                                                f"{unknownAtomIds} are unknown atom names for {authCompId} residue.")
                                compIdList.append(f"? {authCompId} {unknownAtomIds}")
                    else:
                        compId = self.__csStat.getSimilarCompIdFromAtomIds([atomNum['auth_atom_id']
                                                                            for atomNum in self.__atomNumberDict.values()
                                                                            if atomNum['chain_id'] == chainId
                                                                            and atomNum['seq_id'] == seqId])

                        if self.__hasNonPolyModel and compId != authCompId:
                            ligands = 0
                            for np in self.__nonPolyModel:
                                if 'alt_comp_id' in np:
                                    ligands += np['alt_comp_id'].count(authCompId)
                            if ligands == 1:
                                for np in self.__nonPolyModel:
                                    if authCompId in np['alt_comp_id']:
                                        compId = np['comp_id'][0]
                            if ligands == 0:
                                __compId = None
                                for np in self.__nonPolyModel:
                                    for ligand in np['comp_id']:
                                        __compId = translateToLigandName(authCompId, ligand, self.__ccU)
                                        if __compId == ligand:
                                            ligands += 1
                                if ligands == 1:
                                    compId = __compId
                                elif len(self.__nonPolyModel) == 1 and self.__ccU.updateChemCompDict(authCompId):
                                    if self.__ccU.lastChemCompDict['_chem_comp.pdbx_release_status'] == 'OBS' or isReservedLigCode(authCompId):
                                        compId = self.__nonPolyModel[0]['comp_id'][0]

                        if compId is not None:
                            compIdList.append(compId + '?')  # decide when coordinate is available
                            chemCompAtomIds = None
                            if self.__ccU.updateChemCompDict(compId):
                                chemCompAtomIds = [cca[self.__ccU.ccaAtomId] for cca in self.__ccU.lastAtomList]
                            for k, atomNum in self.__atomNumberDict.items():
                                if atomNum['chain_id'] == chainId and atomNum['seq_id'] == seqId:
                                    atomNum['comp_id'] = compId

                                    if compId in nonPolyCompIdList and self.__mrAtomNameMapping is not None\
                                       and atomNum['auth_atom_id'][0] in protonBeginCode and k not in retrievedAtomNumList:
                                        _, _, atomId = retrieveAtomIdentFromMRMap(self.__ccU, self.__mrAtomNameMapping, None, compId, atomNum['auth_atom_id'], None, None, True)
                                    else:
                                        atomId = atomNum['auth_atom_id']

                                    atomId = translateToStdAtomName(atomId, compId, chemCompAtomIds, ccU=self.__ccU, unambig=True)

                                    if chemCompAtomIds is not None and atomId in chemCompAtomIds:
                                        atomNum['atom_id'] = atomId
                                    elif chemCompAtomIds is not None:
                                        if atomId in chemCompAtomIds:
                                            atomNum['atom_id'] = atomId
                        else:
                            compIdList.append('.')
                            """ deferred to assignNonPolymer()
                            self.__f.append(f"[Unknown residue name] "
                                            f"{authCompId!r} is unknown residue name.")
                            """

                ps['comp_id'] = compIdList

            polySeqModel = copy.copy(self.__polySeqModel)
            if self.__hasBranchedModel:
                polySeqModel.extend(self.__branchedModel)

            self.__seqAlign, compIdMapping = alignPolymerSequence(self.__pA, polySeqModel, self.__polySeqPrmTop)

            if len(self.__seqAlign) == 0:
                for c in range(1, 5):
                    self.__seqAlign, compIdMapping = alignPolymerSequenceWithConflicts(self.__pA, polySeqModel, self.__polySeqPrmTop, c)
                    if len(self.__seqAlign) > 0:
                        break

            if len(self.__seqAlign) == 0:
                len_cif_na = sum(len(ps_cif['seq_id']) for ps_cif in polySeqModel if 'identical_chain_id' in ps_cif and len(ps_cif['seq_id']) > 3)
                len_top_na = sum(len(ps_top['seq_id']) for ps_top in self.__polySeqPrmTop
                                 if len(ps_top['seq_id']) > 3 and any(compId in ('DA?', 'DT?', 'DG?', 'DC?', 'A?', 'U?', 'G?', 'C?') for compId in ps_top['comp_id']))
                if len_cif_na == len_top_na:
                    chainIdList = []
                    seqIdList = []
                    authCompIdList = []
                    for ps_top in self.__polySeqPrmTop:
                        len_ps_cif_seq = len(ps_top['seq_id'])
                        if len_ps_cif_seq > 3 and any(compId in ('DA?', 'DT?', 'DG?', 'DC?', 'A?', 'U?', 'G?', 'C?') for compId in ps_top['comp_id']):
                            chainId = ps_top['chain_id']
                            for seqId, compId in zip(ps_top['seq_id'], ps_top['auth_comp_id']):
                                chainIdList.append(chainId)
                                seqIdList.append(seqId)
                                authCompIdList.append(compId)

                    chainIndex = letterToDigit(self.__polySeqModel[0]['chain_id']) - 1
                    idOffset = 0

                    touched = []

                    polySeqPrmTop = []
                    for ps_cif in polySeqModel:
                        len_ps_cif_seq = len(ps_cif['seq_id'])
                        if 'identical_chain_id' in ps_cif and len_ps_cif_seq > 3:
                            chainId = indexToLetter(chainIndex)
                            polySeqPrmTop.append({'chain_id': chainId,
                                                  'seq_id': seqIdList[idOffset:idOffset + len_ps_cif_seq],
                                                  'comp_id': ps_cif['comp_id'],
                                                  'auth_comp_id': authCompIdList[idOffset:idOffset + len_ps_cif_seq]})

                            for idx, (_chainId, _seqId) in enumerate(zip(chainIdList[idOffset:idOffset + len_ps_cif_seq],
                                                                         seqIdList[idOffset:idOffset + len_ps_cif_seq])):
                                for k, atomNum in self.__atomNumberDict.items():
                                    if atomNum['chain_id'] == _chainId and atomNum['seq_id'] == _seqId:
                                        atomNum['chain_id'] = chainId
                                        atomNum['cif_comp_id'] = ps_cif['comp_id'][idx]
                                        touched.append(k)

                            idOffset += len_ps_cif_seq
                            chainIndex += 1

                    for ps_top in self.__polySeqPrmTop:
                        if len(ps_top['seq_id']) > 3 and any(compId in ('DA?', 'DT?', 'DG?', 'DC?', 'A?', 'U?', 'G?', 'C?') for compId in ps_top['comp_id']):
                            continue
                        _chainId = copy.copy(ps_top['chain_id'])
                        chainId = indexToLetter(chainIndex)
                        ps_top['chain_id'] = chainId
                        polySeqPrmTop.append(ps_top)

                        for k, atomNum in self.__atomNumberDict.items():
                            if k in touched:
                                continue
                            if atomNum['chain_id'] == _chainId:
                                atomNum['chain_id'] = chainId
                                touched.append(k)

                        chainIndex += 1

                    self.__polySeqPrmTop = polySeqPrmTop

                    self.__seqAlign, compIdMapping = alignPolymerSequence(self.__pA, polySeqModel, self.__polySeqPrmTop)

                    _seqAlign = copy.copy(self.__seqAlign)
                    for sa in _seqAlign:
                        if sa['ref_chain_id'] != sa['test_chain_id']:
                            self.__seqAlign.remove(sa)

            # test chain assignment before applying comp_id mapping
            self.__chainAssign, message = assignPolymerSequence(self.__pA, self.__ccU, self.__file_type, self.__polySeqModel, self.__polySeqPrmTop, self.__seqAlign)

            for cmap in compIdMapping:
                if any(ca for ca in self.__chainAssign if ca['test_chain_id'] == cmap['chain_id']):
                    for k, atomNum in self.__atomNumberDict.items():
                        if atomNum['chain_id'] == cmap['chain_id'] and atomNum['seq_id'] == cmap['seq_id']:
                            atomNum['comp_id'] = cmap['comp_id']
                            atomNum['auth_comp_id'] = cmap['auth_comp_id']

            self.__chainAssign, message = assignPolymerSequence(self.__pA, self.__ccU, self.__file_type, self.__polySeqModel, self.__polySeqPrmTop, self.__seqAlign)

            if len(message) > 0:
                self.__f.extend(message)

            if len(self.__seqAlign) == 0:
                mrFormatName = getRestraintFormatName(self.__file_type)
                _a_mr_format_name = 'the ' + mrFormatName

                ref_code = getOneLetterCodeCanSequence(self.__polySeqModel[0]['comp_id'])
                test_code = getOneLetterCodeCanSequence(self.__polySeqPrmTop[0]['comp_id'])

                hint = ''
                if abs(len(ref_code) - len(test_code)) < 20 and len(ref_code) > 40:
                    hint = f"For example, coordinates ({self.__polySeqModel[0]['auth_chain_id']}): {ref_code} vs topology: {test_code}. "

                self.__f.append(f"[Sequence mismatch] Polymer sequence between the coordinate and {_a_mr_format_name} data does not match. {hint}"
                                "Please verify the two sequences and re-upload the correct file(s) if required.")

            assi_ref_chain_ids = {}
            proc_test_chain_ids = []
            atom_nums = []
            delete_atom_nums = []

            def update_atom_num(seq_align, orphan):
                ref_chain_id = seq_align['ref_chain_id']
                test_chain_id = seq_align['test_chain_id']

                if ref_chain_id in assi_ref_chain_ids or test_chain_id in proc_test_chain_ids:
                    return

                ps_cif = next(ps for ps in self.__polySeqModel if ps['auth_chain_id'] == ref_chain_id)

                if ref_chain_id not in assi_ref_chain_ids:
                    assi_ref_chain_ids[ref_chain_id] = seq_align['length'] - seq_align['matched'] - seq_align['conflict']
                else:
                    assi_ref_chain_ids[ref_chain_id] -= seq_align['matched'] + seq_align['conflict']
                proc_test_chain_ids.append(test_chain_id)

                offset = first_seq_id = None

                for atom_num, atomNum in self.__atomNumberDict.items():
                    if atom_num in atom_nums:
                        continue
                    if atomNum['chain_id'] == test_chain_id:
                        atom_nums.append(atom_num)

                        test_seq_id = atomNum['seq_id']

                        if first_seq_id is None:
                            first_seq_id = test_seq_id

                        if test_seq_id in seq_align['test_seq_id']:
                            idx = seq_align['test_seq_id'].index(test_seq_id)
                            if 'ref_auth_seq_id' in seq_align and idx < len(seq_align['ref_auth_seq_id']):
                                ref_seq_id = seq_align['ref_auth_seq_id'][idx]
                            elif offset is not None:
                                ref_seq_id = test_seq_id + offset
                            else:
                                continue
                        elif offset is not None:
                            ref_seq_id = test_seq_id + offset
                        else:
                            continue

                        if offset is None:
                            offset = ref_seq_id - test_seq_id

                        atomNum['chain_id'] = ref_chain_id
                        atomNum['seq_id'] = ref_seq_id

                        if ref_seq_id in ps_cif['auth_seq_id']:
                            idx = ps_cif['auth_seq_id'].index(ref_seq_id)
                            atomNum['comp_id'] = ps_cif['comp_id'][idx]

                        if orphan and test_seq_id == first_seq_id\
                           and self.__csStat.peptideLike(translateToStdResName(atomNum['comp_id'], ccU=self.__ccU)):
                            if self.__ccU.updateChemCompDict(atomNum['comp_id']):
                                chemCompAtomIds = [cca[self.__ccU.ccaAtomId] for cca in self.__ccU.lastAtomList]
                                leavingAtomIds = [cca[self.__ccU.ccaAtomId] for cca in self.__ccU.lastAtomList
                                                  if cca[self.__ccU.ccaLeavingAtomFlag] == 'Y']
                                if atomNum['atom_id'] not in chemCompAtomIds or atomNum['atom_id'] in leavingAtomIds:
                                    delete_atom_nums.append(atom_num)

            while True:

                orphanPolySeqPrmTop = []

                for ps in self.__polySeqPrmTop:
                    test_chain_id = ps['chain_id']
                    if test_chain_id in proc_test_chain_ids:
                        continue
                    try:
                        ca = next(ca for ca in self.__chainAssign if ca['test_chain_id'] == test_chain_id)

                        ref_chain_id = ca['ref_chain_id']
                        sa = next((sa for sa in self.__seqAlign
                                   if sa['ref_chain_id'] == ref_chain_id and sa['test_chain_id'] == test_chain_id), None)

                        if sa is not None:  # and sa['conflict'] == 0:
                            update_atom_num(sa, False)

                    except StopIteration:
                        orphanPolySeqPrmTop.append(ps)

                resolved = False

                if len(orphanPolySeqPrmTop) > 0:
                    max_length = max(len(ps['seq_id']) for ps in orphanPolySeqPrmTop)
                    __polySeqModel__ = [ps for ps in self.__polySeqModel
                                        if ps['auth_chain_id'] not in assi_ref_chain_ids
                                        or assi_ref_chain_ids[ps['auth_chain_id']] >= max_length]
                    __seqAlign__, _ = alignPolymerSequence(self.__pA, __polySeqModel__, orphanPolySeqPrmTop)
                    if len(__seqAlign__) > 0:
                        for sa in __seqAlign__:
                            if sa['conflict'] == 0:
                                update_atom_num(sa, True)

                                resolved = True

                    if not resolved:
                        for c in range(1, 5):
                            __seqAlign__, _ = alignPolymerSequenceWithConflicts(self.__pA, __polySeqModel__, orphanPolySeqPrmTop, c)
                            if len(__seqAlign__) > 0:
                                for sa in __seqAlign__:
                                    if sa['conflict'] <= c:
                                        update_atom_num(sa, True)

                                        resolved = True
                            if resolved:
                                break

                if not resolved:
                    break

            for ps in self.__polySeqPrmTop:
                test_chain_id = ps['chain_id']

                if test_chain_id in proc_test_chain_ids:
                    continue

                for cif_ps in self.__polySeqModel:
                    ref_chain_id = cif_ps['auth_chain_id']

                    if ref_chain_id in assi_ref_chain_ids:
                        continue

                    len_gap = abs(len(ps['seq_id']) - len(cif_ps['auth_seq_id']))

                    if len_gap > 20:
                        continue

                    if len_gap == 0:
                        offset = cif_ps['auth_seq_id'][0] - ps['seq_id'][0]

                    for atomNum in self.__atomNumberDict.values():
                        if atomNum['chain_id'] == test_chain_id:
                            atomNum['chain_id'] = ref_chain_id
                            if len_gap == 0:
                                atomNum['seq_id'] += offset

                    proc_test_chain_ids.append(test_chain_id)
                    assi_ref_chain_ids[ref_chain_id] = len_gap

            if len(delete_atom_nums) > 0:
                for atom_num in sorted(delete_atom_nums, reverse=True):
                    del self.__atomNumberDict[atom_num]

            for atomNum in self.__atomNumberDict.values():
                if 'atom_id' in atomNum and atomNum['atom_id'] in aminoProtonCode:
                    _seqKey = (atomNum['chain_id'], atomNum['seq_id'] - 1)
                    seqKey = (atomNum['chain_id'], atomNum['seq_id'])
                    if _seqKey in self.__coordUnobsRes and seqKey in self.__coordAtomSite:
                        coordAtomSite = self.__coordAtomSite[seqKey]
                        if atomNum['atom_id'] not in coordAtomSite['atom_id']:
                            for atomId in aminoProtonCode:
                                if atomId in coordAtomSite['atom_id']:
                                    atomNum['atom_id'] = atomId
                                    break

            if self.__chainAssign is not None:
                trimSequenceAlignment(self.__seqAlign, self.__chainAssign)

                if self.__hasNonPolyModel:

                    # metal ion
                    if any(ps for ps in self.__polySeqPrmTop
                           if len(ps['seq_id']) == 1 and ps['comp_id'][0].title() in NAMES_ELEMENT):
                        self.assignMetalIon()

                    # other non-polymer
                    nonPolyIndices = [idx for idx, ps in enumerate(self.__polySeqPrmTop)
                                      if not any(ca for ca in self.__chainAssign
                                                 if ca['test_chain_id'] == ps['chain_id'])
                                      and len(set(ps['comp_id'])) > 0 and ps['comp_id'][0] == '.']

                    if len(nonPolyIndices) > 0:
                        self.assignNonPolymer(nonPolyIndices)

                        for idx in sorted(nonPolyIndices, reverse=True):
                            del self.__polySeqPrmTop[idx]

            if self.__hasNonPolyModel:
                compIdMapping = {}
                mappedSeqVal = []
                mappedAtomNum = []

                for np in self.__nonPolyModel:
                    authChainId = np['auth_chain_id']
                    authSeqId = np['auth_seq_id'][0]
                    compId = np['comp_id'][0]

                    for k, v in self.__atomNumberDict.items():
                        if k in mappedAtomNum:
                            continue
                        if 'comp_id' in v and v['comp_id'] == compId:
                            seqKey = (v['comp_id'], v['chain_id'], v['seq_id'])
                            seqVal = (authChainId, authSeqId)
                            if seqKey not in compIdMapping:
                                if seqVal not in mappedSeqVal:
                                    compIdMapping[seqKey] = seqVal
                            if seqKey in compIdMapping:
                                v['chain_id'], v['seq_id'] = compIdMapping[seqKey]
                                mappedSeqVal.append(seqVal)
                                mappedAtomNum.append(k)

            if any(f for f in message if '[Concatenated sequence]' in f):  # DAOTHER-9511: resolve concatenated sequence
                test_chain_id_map = {}
                for ca in self.__chainAssign:
                    ref_chain_id = ca['ref_chain_id']
                    test_chain_id = ca['test_chain_id']
                    if test_chain_id not in test_chain_id_map:
                        test_chain_id_map[test_chain_id] = []
                    test_chain_id_map[test_chain_id].append(ref_chain_id)

                _test_chain_id_map = copy.copy(test_chain_id_map)
                for test_chain_id, cmap in _test_chain_id_map.items():
                    if len(cmap) < 2:
                        del test_chain_id_map[test_chain_id]

                if len(test_chain_id_map) > 0:
                    cmap = {}
                    for test_chain_id, ref_chain_ids in test_chain_id_map.items():
                        ref_chain_id0 = ref_chain_ids[0]
                        for ref_chain_id in ref_chain_ids[1:]:
                            sa = next((sa for sa in self.__seqAlign if sa['ref_chain_id'] == ref_chain_id and sa['test_chain_id'] == test_chain_id), None)
                            if sa is None:
                                continue
                            ps = next((ps for ps in self.__polySeqModel if ps['auth_chain_id'] == ref_chain_id), None)
                            if ps is None:
                                continue
                            for auth_seq_id, comp_id in zip(ps['auth_seq_id'], ps['comp_id']):
                                seq_key = (ref_chain_id0, auth_seq_id)
                                cmap[seq_key] = (ref_chain_id, comp_id)
                    if len(cmap) > 0:
                        for atomNum in self.__atomNumberDict.values():
                            seq_key = (atomNum['chain_id'], atomNum['seq_id'])
                            if seq_key in cmap:
                                atomNum['chain_id'], atomNum['comp_id'] = cmap[seq_key]

        finally:
            self.warningMessage = sorted(list(set(self.__f)), key=self.__f.index)

    def assignMetalIon(self):
        if not self.__hasNonPolyModel:
            return

        metals = collections.Counter(s2['comp_id'][0] for s2 in self.__polySeqPrmTop
                                     if len(s2['seq_id']) == 1 and s2['comp_id'][0].title() in NAMES_ELEMENT).most_common()

        for metal in metals:
            compId = metal[0]

            atomNums = [atomNum for atomNum in self.__atomNumberDict.values()
                        if atomNum['auth_comp_id'] == compId and atomNum['auth_atom_id'] == compId]

            nonPolys = [nonPoly for nonPoly in self.__nonPolyModel
                        if nonPoly['comp_id'][0] == compId]

            for atomNum, nonPoly in zip(atomNums, nonPolys):
                atomNum['chain_id'] = nonPoly['auth_chain_id']
                atomNum['seq_id'] = nonPoly['auth_seq_id'][0]

    def assignNonPolymer(self, nonPolyIndices):
        if not self.__hasNonPolyModel:
            return

        authCompIds = []

        for idx, ps in enumerate(self.__polySeqPrmTop):
            if idx not in nonPolyIndices:
                continue
            for authCompId, compId in zip(ps['auth_comp_id'], ps['comp_id']):
                if compId != '.':
                    continue
                authCompIds.append(authCompId)

        nonPolyCompIds = collections.Counter(authCompIds).most_common()

        compIds = []
        for nonPoly in self.__nonPolyModel:
            compId = nonPoly['comp_id'][0]
            if compId.title() in NAMES_ELEMENT:
                continue
            compIds.append(compId)

        refCompIds = collections.Counter(compIds).most_common()

        comp_id_mapping = {}

        for authCompId in nonPolyCompIds:
            refCompId = next((compId[0] for compId in refCompIds if compId[1] == authCompId[1] and compId[1] not in comp_id_mapping.values()), None)
            if refCompId is None:
                self.__f.append(f"[Unknown residue name] "
                                f"{authCompId[0]!r} is unknown residue name.")
                continue
            comp_id_mapping[authCompId[0]] = refCompId

        for authCompId, compId in comp_id_mapping.items():
            chemCompAtomIds = None
            if self.__ccU.updateChemCompDict(compId):
                chemCompAtomIds = [cca[self.__ccU.ccaAtomId] for cca in self.__ccU.lastAtomList]

            authSeqKeys = []

            for idx, ps in enumerate(self.__polySeqPrmTop):
                if idx not in nonPolyIndices:
                    continue
                _chainId = ps['chain_id']
                for _authCompId, _compId, _seqId in zip(ps['auth_comp_id'], ps['comp_id'], ps['seq_id']):
                    if _authCompId != authCompId or _compId != '.':
                        continue
                    authSeqKeys.append((_chainId, _seqId))

            nonPolys = [nonPoly for nonPoly in self.__nonPolyModel
                        if nonPoly['comp_id'][0] == compId]

            reported_auth_atom_id = []

            for authSeqKey, nonPoly in zip(authSeqKeys, nonPolys):
                atomNums = [atomNum for atomNum in self.__atomNumberDict.values()
                            if atomNum['chain_id'] == authSeqKey[0] and atomNum['seq_id'] == authSeqKey[1]]
                authAtomNames = [atomNum['auth_atom_id'] for atomNum in self.__atomNumberDict.values()
                                 if atomNum['chain_id'] == authSeqKey[0] and atomNum['seq_id'] == authSeqKey[1]]

                for atomNum in atomNums:
                    atomNum['chain_id'] = nonPoly['auth_chain_id']
                    atomNum['seq_id'] = nonPoly['auth_seq_id'][0]
                    atomNum['comp_id'] = compId
                    authAtomId = atomNum['auth_atom_id']
                    if chemCompAtomIds is not None and authAtomId in chemCompAtomIds:
                        atomNum['atom_id'] = authAtomId
                    else:
                        dmpcNameSystemId = -1
                        if compId == 'PX4':
                            if 'OE' in authAtomNames:
                                dmpcNameSystemId = 1
                            elif 'OS31' in authAtomNames:
                                dmpcNameSystemId = 2
                            elif 'O21' in authAtomNames:
                                if 'C314' in authAtomNames:
                                    dmpcNameSystemId = 3
                                elif 'C114' in authAtomNames:
                                    dmpcNameSystemId = 4

                        if dmpcNameSystemId != -1:
                            atomId = translateToStdAtomNameOfDmpc(authAtomId, dmpcNameSystemId)
                        else:
                            atomId = translateToStdAtomName(authAtomId, compId, chemCompAtomIds, ccU=self.__ccU)

                        if atomId in chemCompAtomIds:
                            atomNum['atom_id'] = atomId
                        else:
                            _, _, atomId = retrieveAtomIdentFromMRMap(self.__ccU, self.__mrAtomNameMapping, None, compId, authAtomId, None, None, True)

                            if atomId in chemCompAtomIds:
                                atomNum['atom_id'] = atomId
                                continue
                            if authAtomId not in reported_auth_atom_id:
                                atomNum['atom_id'] = atomNum['auth_atom_id']
                                if authAtomId == "HO5'" and atomNum['seq_id'] == 1 and self.__csStat.getTypeOfCompId(compId)[1]:
                                    continue
                                self.__f.append(f"[Unknown atom name] "
                                                f"{authAtomId!r} is not recognized as the atom name of {compId!r} residue "
                                                f"(the original residue label is {authCompId!r}).")
                                reported_auth_atom_id.append(authAtomId)

    # Enter a parse tree produced by CharmmCRDParser#comment.
    def enterComment(self, ctx: CharmmCRDParser.CommentContext):  # pylint: disable=unused-argument
        pass

    # Exit a parse tree produced by CharmmCRDParser#comment.
    def exitComment(self, ctx: CharmmCRDParser.CommentContext):  # pylint: disable=unused-argument
        pass

    # Enter a parse tree produced by CharmmCRDParser#coordinates.
    def enterCoordinates(self, ctx: CharmmCRDParser.CoordinatesContext):  # pylint: disable=unused-argument
        self.coordinatesStatements += 1

    # Exit a parse tree produced by CharmmCRDParser#coordinates.
    def exitCoordinates(self, ctx: CharmmCRDParser.CoordinatesContext):
        if ctx.Integer():
            return
        self.coordinatesStatements -= -1

    # Enter a parse tree produced by CharmmCRDParser#atom_coordinate.
    def enterAtom_coordinate(self, ctx: CharmmCRDParser.Atom_coordinateContext):  # pylint: disable=unused-argument
        pass

    # Exit a parse tree produced by CharmmCRDParser#atom_coordinate.
    def exitAtom_coordinate(self, ctx: CharmmCRDParser.Atom_coordinateContext):

        try:
            nr = int(str(ctx.Integer(0)))
            seqId = int(str(ctx.Integer(1)))

            compId = str(ctx.Simple_name(0))
            atomId = str(ctx.Simple_name(1))
            chainId = str(ctx.Simple_name(2))
            authSeqId = int(str(ctx.Integer(2)))

            atom = {'atom_number': nr,
                    'seq_id': seqId,
                    'auth_chain_id': chainId,
                    'auth_seq_id': authSeqId,
                    'auth_comp_id': compId,
                    'auth_atom_id': atomId}

            if atom not in self.__atoms:
                self.__atoms.append(atom)

        except ValueError:
            pass

    def getContentSubtype(self):
        """ Return content subtype of CHARMM CRD file.
        """

        contentSubtype = {'coordinates': self.coordinatesStatements}

        return {k: 1 for k, v in contentSubtype.items() if v > 0}

    def getAtomNumberDict(self):
        """ Return CHARMM atomic number dictionary.
        """
        return self.__atomNumberDict

    def getPolymerSequence(self):
        """ Return polymer sequence of CHARMM CRD file.
        """
        return None if self.__polySeqPrmTop is None or len(self.__polySeqPrmTop) == 0 else self.__polySeqPrmTop

    def getSequenceAlignment(self):
        """ Return sequence alignment between coordinates and CHARMM CRD.
        """
        return None if self.__seqAlign is None or len(self.__seqAlign) == 0 else self.__seqAlign

    def getChainAssignment(self):
        """ Return chain assignment between coordinates and CHARMM CRD.
        """
        return None if self.__chainAssign is None or len(self.__chainAssign) == 0 else self.__chainAssign


# del CharmmCRDParser
