# Generated from CnsMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,226,1519,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,155,8,0,10,0,12,0,158,9,0,1,0,1,0,
        1,1,1,1,5,1,164,8,1,10,1,12,1,167,9,1,1,1,1,1,1,2,3,2,172,8,2,1,
        2,1,2,5,2,176,8,2,10,2,12,2,179,9,2,1,2,1,2,1,3,3,3,184,8,3,1,3,
        1,3,5,3,188,8,3,10,3,12,3,191,9,3,1,3,1,3,1,4,3,4,196,8,4,1,4,1,
        4,5,4,200,8,4,10,4,12,4,203,9,4,1,4,1,4,1,5,1,5,5,5,209,8,5,10,5,
        12,5,212,9,5,1,5,1,5,1,6,1,6,5,6,218,8,6,10,6,12,6,221,9,6,1,6,1,
        6,1,7,1,7,5,7,227,8,7,10,7,12,7,230,9,7,1,7,1,7,1,8,1,8,5,8,236,
        8,8,10,8,12,8,239,9,8,1,8,1,8,1,9,1,9,5,9,245,8,9,10,9,12,9,248,
        9,9,1,9,1,9,1,10,1,10,5,10,254,8,10,10,10,12,10,257,9,10,1,10,1,
        10,1,11,1,11,5,11,263,8,11,10,11,12,11,266,9,11,1,11,1,11,1,12,1,
        12,5,12,272,8,12,10,12,12,12,275,9,12,1,12,1,12,1,13,1,13,3,13,281,
        8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,3,13,296,8,13,1,13,1,13,1,13,3,13,301,8,13,1,13,1,13,1,13,1,
        13,1,13,3,13,308,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,317,
        8,13,1,13,1,13,1,13,3,13,322,8,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,5,13,331,8,13,10,13,12,13,334,9,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,3,13,345,8,13,1,13,1,13,1,13,1,13,3,13,351,8,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,364,
        8,13,1,13,1,13,1,13,5,13,369,8,13,10,13,12,13,372,9,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,396,8,13,10,13,12,13,399,
        9,13,1,13,1,13,1,13,3,13,404,8,13,1,13,3,13,407,8,13,1,14,1,14,1,
        14,1,14,1,14,3,14,414,8,14,1,14,3,14,417,8,14,1,14,5,14,420,8,14,
        10,14,12,14,423,9,14,1,14,1,14,3,14,427,8,14,1,14,1,14,1,14,5,14,
        432,8,14,10,14,12,14,435,9,14,1,15,1,15,3,15,439,8,15,1,15,1,15,
        1,15,3,15,444,8,15,1,15,1,15,1,15,1,15,1,15,3,15,451,8,15,1,16,1,
        16,3,16,455,8,16,1,16,1,16,1,16,3,16,460,8,16,1,16,1,16,1,16,3,16,
        465,8,16,1,16,1,16,1,16,3,16,470,8,16,1,16,1,16,1,16,3,16,475,8,
        16,1,16,1,16,1,16,3,16,480,8,16,1,16,1,16,1,16,3,16,485,8,16,1,16,
        3,16,488,8,16,1,17,1,17,1,17,3,17,493,8,17,1,17,1,17,1,17,3,17,498,
        8,17,1,17,1,17,1,17,3,17,503,8,17,1,17,1,17,1,17,1,17,3,17,509,8,
        17,1,17,1,17,3,17,513,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,19,1,19,5,19,527,8,19,10,19,12,19,530,9,19,1,19,1,
        19,1,19,3,19,535,8,19,1,20,1,20,3,20,539,8,20,1,20,1,20,1,20,3,20,
        544,8,20,1,20,3,20,547,8,20,1,21,1,21,3,21,551,8,21,1,21,1,21,1,
        21,3,21,556,8,21,1,21,1,21,1,21,3,21,561,8,21,1,21,1,21,3,21,565,
        8,21,1,21,1,21,1,21,1,21,3,21,571,8,21,1,21,1,21,3,21,575,8,21,1,
        21,1,21,3,21,579,8,21,1,21,3,21,582,8,21,3,21,584,8,21,1,21,1,21,
        3,21,588,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,3,23,
        599,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,609,8,23,1,
        23,1,23,1,23,3,23,614,8,23,1,23,1,23,1,23,3,23,619,8,23,1,23,1,23,
        1,23,1,23,1,23,3,23,626,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,3,24,637,8,24,1,24,3,24,640,8,24,1,25,1,25,1,25,3,25,645,
        8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,656,8,25,
        1,25,1,25,1,25,1,25,3,25,662,8,25,1,25,1,25,3,25,666,8,25,1,25,1,
        25,1,25,3,25,671,8,25,1,25,1,25,1,25,3,25,676,8,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,3,25,685,8,25,1,25,3,25,688,8,25,1,25,3,25,691,
        8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,703,
        8,26,1,26,1,26,1,26,1,26,1,26,3,26,710,8,26,1,27,1,27,1,27,3,27,
        715,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,
        727,8,27,1,27,1,27,1,27,3,27,732,8,27,1,27,1,27,1,27,3,27,737,8,
        27,1,27,1,27,1,27,3,27,742,8,27,1,27,1,27,1,27,3,27,747,8,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,3,27,756,8,27,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,783,8,30,1,30,1,30,
        1,30,3,30,788,8,30,1,30,1,30,1,30,1,30,3,30,794,8,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,3,30,804,8,30,1,30,3,30,807,8,30,1,30,
        1,30,1,30,3,30,812,8,30,1,31,1,31,1,31,3,31,817,8,31,1,31,1,31,3,
        31,821,8,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,3,
        33,833,8,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,
        36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,857,
        8,38,1,39,1,39,1,39,1,40,1,40,1,40,3,40,865,8,40,1,40,1,40,1,40,
        1,40,1,40,3,40,872,8,40,1,40,3,40,875,8,40,1,40,3,40,878,8,40,1,
        40,1,40,1,40,3,40,883,8,40,1,40,1,40,1,40,3,40,888,8,40,1,40,1,40,
        1,40,3,40,893,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,
        903,8,40,1,40,1,40,1,40,3,40,908,8,40,1,40,1,40,1,40,3,40,913,8,
        40,1,40,1,40,3,40,917,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,
        40,926,8,40,1,40,3,40,929,8,40,1,40,1,40,1,40,1,40,1,40,3,40,936,
        8,40,1,40,3,40,939,8,40,1,40,3,40,942,8,40,1,40,3,40,945,8,40,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,957,8,41,1,
        41,1,41,1,41,1,41,1,41,3,41,964,8,41,1,41,1,41,1,41,1,41,1,41,3,
        41,971,8,41,1,42,1,42,1,42,3,42,976,8,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,3,42,988,8,42,1,42,1,42,1,42,3,42,993,8,
        42,1,42,1,42,1,42,3,42,998,8,42,1,42,1,42,1,42,1,42,1,42,3,42,1005,
        8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,
        1,44,3,44,1020,8,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,3,44,1034,8,44,1,44,1,44,1,44,3,44,1039,8,44,1,44,
        1,44,1,44,3,44,1044,8,44,1,44,1,44,1,44,1,44,1,44,3,44,1051,8,44,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,
        1,46,1,46,3,46,1068,8,46,1,46,1,46,1,46,3,46,1073,8,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,3,46,1082,8,46,1,46,1,46,1,46,3,46,1087,
        8,46,1,46,1,46,1,46,3,46,1092,8,46,1,46,1,46,1,46,3,46,1097,8,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1106,8,46,1,46,3,46,1109,
        8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1117,8,46,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1132,8,47,
        1,48,1,48,1,48,1,48,1,49,1,49,1,49,5,49,1141,8,49,10,49,12,49,1144,
        9,49,1,50,1,50,1,50,5,50,1149,8,50,10,50,12,50,1152,9,50,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1166,8,
        51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,
        51,1,51,3,51,1182,8,51,3,51,1184,8,51,1,51,1,51,1,51,1,51,1,51,1,
        51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1203,
        8,51,1,51,1,51,1,51,3,51,1208,8,51,3,51,1210,8,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,3,51,1219,8,51,1,51,1,51,3,51,1223,8,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1234,8,51,1,51,1,51,
        3,51,1238,8,51,1,51,1,51,3,51,1242,8,51,1,51,3,51,1245,8,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1258,8,51,
        3,51,1260,8,51,1,51,1,51,1,51,1,51,1,51,3,51,1267,8,51,3,51,1269,
        8,51,1,51,1,51,1,51,1,51,1,51,3,51,1276,8,51,1,51,1,51,1,51,3,51,
        1281,8,51,3,51,1283,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1303,8,51,
        1,51,1,51,1,51,1,51,1,51,1,51,5,51,1311,8,51,10,51,12,51,1314,9,
        51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,5,56,1327,
        8,56,10,56,12,56,1330,9,56,1,56,3,56,1333,8,56,3,56,1335,8,56,1,
        56,1,56,5,56,1339,8,56,10,56,12,56,1342,9,56,1,56,1,56,1,57,1,57,
        1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1356,8,58,1,59,1,59,
        1,59,3,59,1361,8,59,1,60,1,60,1,60,5,60,1366,8,60,10,60,12,60,1369,
        9,60,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1377,8,61,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,5,62,1439,8,62,10,62,12,62,1442,9,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,1456,
        8,62,10,62,12,62,1459,9,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,3,62,1498,8,62,1,63,1,63,1,63,1,63,1,63,1,64,1,
        64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,5,65,1514,8,65,10,65,12,65,
        1517,9,65,1,65,3,332,370,397,1,102,66,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,0,7,1,0,141,142,
        2,0,134,134,143,143,3,0,134,134,136,136,153,153,2,0,134,134,136,
        136,1,0,123,124,1,0,179,183,1,0,218,224,1818,0,156,1,0,0,0,2,161,
        1,0,0,0,4,171,1,0,0,0,6,183,1,0,0,0,8,195,1,0,0,0,10,206,1,0,0,0,
        12,215,1,0,0,0,14,224,1,0,0,0,16,233,1,0,0,0,18,242,1,0,0,0,20,251,
        1,0,0,0,22,260,1,0,0,0,24,269,1,0,0,0,26,406,1,0,0,0,28,408,1,0,
        0,0,30,450,1,0,0,0,32,487,1,0,0,0,34,512,1,0,0,0,36,514,1,0,0,0,
        38,534,1,0,0,0,40,546,1,0,0,0,42,587,1,0,0,0,44,589,1,0,0,0,46,625,
        1,0,0,0,48,627,1,0,0,0,50,690,1,0,0,0,52,692,1,0,0,0,54,755,1,0,
        0,0,56,757,1,0,0,0,58,766,1,0,0,0,60,811,1,0,0,0,62,813,1,0,0,0,
        64,822,1,0,0,0,66,826,1,0,0,0,68,836,1,0,0,0,70,839,1,0,0,0,72,842,
        1,0,0,0,74,845,1,0,0,0,76,848,1,0,0,0,78,858,1,0,0,0,80,944,1,0,
        0,0,82,946,1,0,0,0,84,1004,1,0,0,0,86,1006,1,0,0,0,88,1050,1,0,0,
        0,90,1052,1,0,0,0,92,1116,1,0,0,0,94,1118,1,0,0,0,96,1133,1,0,0,
        0,98,1137,1,0,0,0,100,1145,1,0,0,0,102,1302,1,0,0,0,104,1315,1,0,
        0,0,106,1317,1,0,0,0,108,1319,1,0,0,0,110,1321,1,0,0,0,112,1323,
        1,0,0,0,114,1345,1,0,0,0,116,1355,1,0,0,0,118,1357,1,0,0,0,120,1362,
        1,0,0,0,122,1376,1,0,0,0,124,1497,1,0,0,0,126,1499,1,0,0,0,128,1504,
        1,0,0,0,130,1510,1,0,0,0,132,155,3,2,1,0,133,155,3,4,2,0,134,155,
        3,6,3,0,135,155,3,8,4,0,136,155,3,10,5,0,137,155,3,12,6,0,138,155,
        3,14,7,0,139,155,3,16,8,0,140,155,3,18,9,0,141,155,3,20,10,0,142,
        155,3,22,11,0,143,155,3,24,12,0,144,155,3,112,56,0,145,155,3,114,
        57,0,146,155,3,128,64,0,147,155,3,28,14,0,148,155,3,36,18,0,149,
        155,3,48,24,0,150,155,3,38,19,0,151,155,3,44,22,0,152,155,3,52,26,
        0,153,155,3,56,28,0,154,132,1,0,0,0,154,133,1,0,0,0,154,134,1,0,
        0,0,154,135,1,0,0,0,154,136,1,0,0,0,154,137,1,0,0,0,154,138,1,0,
        0,0,154,139,1,0,0,0,154,140,1,0,0,0,154,141,1,0,0,0,154,142,1,0,
        0,0,154,143,1,0,0,0,154,144,1,0,0,0,154,145,1,0,0,0,154,146,1,0,
        0,0,154,147,1,0,0,0,154,148,1,0,0,0,154,149,1,0,0,0,154,150,1,0,
        0,0,154,151,1,0,0,0,154,152,1,0,0,0,154,153,1,0,0,0,155,158,1,0,
        0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,159,1,0,0,0,158,156,1,0,
        0,0,159,160,5,0,0,1,160,1,1,0,0,0,161,165,5,3,0,0,162,164,3,26,13,
        0,163,162,1,0,0,0,164,167,1,0,0,0,165,163,1,0,0,0,165,166,1,0,0,
        0,166,168,1,0,0,0,167,165,1,0,0,0,168,169,5,2,0,0,169,3,1,0,0,0,
        170,172,5,48,0,0,171,170,1,0,0,0,171,172,1,0,0,0,172,173,1,0,0,0,
        173,177,5,49,0,0,174,176,3,34,17,0,175,174,1,0,0,0,176,179,1,0,0,
        0,177,175,1,0,0,0,177,178,1,0,0,0,178,180,1,0,0,0,179,177,1,0,0,
        0,180,181,5,2,0,0,181,5,1,0,0,0,182,184,5,48,0,0,183,182,1,0,0,0,
        183,184,1,0,0,0,184,185,1,0,0,0,185,189,5,52,0,0,186,188,3,38,19,
        0,187,186,1,0,0,0,188,191,1,0,0,0,189,187,1,0,0,0,189,190,1,0,0,
        0,190,192,1,0,0,0,191,189,1,0,0,0,192,193,5,2,0,0,193,7,1,0,0,0,
        194,196,5,48,0,0,195,194,1,0,0,0,195,196,1,0,0,0,196,197,1,0,0,0,
        197,201,5,56,0,0,198,200,3,42,21,0,199,198,1,0,0,0,200,203,1,0,0,
        0,201,199,1,0,0,0,201,202,1,0,0,0,202,204,1,0,0,0,203,201,1,0,0,
        0,204,205,5,2,0,0,205,9,1,0,0,0,206,210,5,59,0,0,207,209,3,46,23,
        0,208,207,1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,
        0,211,213,1,0,0,0,212,210,1,0,0,0,213,214,5,2,0,0,214,11,1,0,0,0,
        215,219,5,62,0,0,216,218,3,50,25,0,217,216,1,0,0,0,218,221,1,0,0,
        0,219,217,1,0,0,0,219,220,1,0,0,0,220,222,1,0,0,0,221,219,1,0,0,
        0,222,223,5,2,0,0,223,13,1,0,0,0,224,228,5,63,0,0,225,227,3,54,27,
        0,226,225,1,0,0,0,227,230,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,
        0,229,231,1,0,0,0,230,228,1,0,0,0,231,232,5,2,0,0,232,15,1,0,0,0,
        233,237,5,69,0,0,234,236,3,60,30,0,235,234,1,0,0,0,236,239,1,0,0,
        0,237,235,1,0,0,0,237,238,1,0,0,0,238,240,1,0,0,0,239,237,1,0,0,
        0,240,241,5,2,0,0,241,17,1,0,0,0,242,246,5,78,0,0,243,245,3,80,40,
        0,244,243,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,247,1,0,0,
        0,247,249,1,0,0,0,248,246,1,0,0,0,249,250,5,2,0,0,250,19,1,0,0,0,
        251,255,5,83,0,0,252,254,3,84,42,0,253,252,1,0,0,0,254,257,1,0,0,
        0,255,253,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,255,1,0,0,
        0,258,259,5,2,0,0,259,21,1,0,0,0,260,264,5,84,0,0,261,263,3,88,44,
        0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,
        0,265,267,1,0,0,0,266,264,1,0,0,0,267,268,5,2,0,0,268,23,1,0,0,0,
        269,273,5,85,0,0,270,272,3,92,46,0,271,270,1,0,0,0,272,275,1,0,0,
        0,273,271,1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,273,1,0,0,
        0,276,277,5,2,0,0,277,25,1,0,0,0,278,280,5,4,0,0,279,281,5,147,0,
        0,280,279,1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,407,5,169,
        0,0,283,407,3,28,14,0,284,285,5,6,0,0,285,286,5,141,0,0,286,407,
        3,108,54,0,287,288,5,7,0,0,288,289,5,164,0,0,289,407,5,163,0,0,290,
        291,5,8,0,0,291,292,5,141,0,0,292,407,3,108,54,0,293,295,5,9,0,0,
        294,296,5,147,0,0,295,294,1,0,0,0,295,296,1,0,0,0,296,297,1,0,0,
        0,297,407,3,108,54,0,298,300,5,10,0,0,299,301,5,147,0,0,300,299,
        1,0,0,0,300,301,1,0,0,0,301,302,1,0,0,0,302,407,5,141,0,0,303,304,
        5,11,0,0,304,407,5,141,0,0,305,307,5,12,0,0,306,308,5,147,0,0,307,
        306,1,0,0,0,307,308,1,0,0,0,308,309,1,0,0,0,309,407,5,134,0,0,310,
        311,5,13,0,0,311,407,5,35,0,0,312,313,5,13,0,0,313,314,5,36,0,0,
        314,316,5,37,0,0,315,317,5,147,0,0,316,315,1,0,0,0,316,317,1,0,0,
        0,317,318,1,0,0,0,318,319,3,108,54,0,319,321,5,38,0,0,320,322,5,
        147,0,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,324,
        3,108,54,0,324,407,1,0,0,0,325,326,5,14,0,0,326,327,5,141,0,0,327,
        328,5,141,0,0,328,407,3,108,54,0,329,331,5,15,0,0,330,329,1,0,0,
        0,331,334,1,0,0,0,332,333,1,0,0,0,332,330,1,0,0,0,333,335,1,0,0,
        0,334,332,1,0,0,0,335,407,5,2,0,0,336,337,5,16,0,0,337,338,5,141,
        0,0,338,407,5,134,0,0,339,340,5,17,0,0,340,341,5,141,0,0,341,407,
        5,134,0,0,342,344,5,18,0,0,343,345,5,147,0,0,344,343,1,0,0,0,344,
        345,1,0,0,0,345,346,1,0,0,0,346,407,5,134,0,0,347,407,5,19,0,0,348,
        350,5,20,0,0,349,351,5,147,0,0,350,349,1,0,0,0,350,351,1,0,0,0,351,
        352,1,0,0,0,352,407,5,134,0,0,353,354,5,21,0,0,354,355,5,167,0,0,
        355,407,5,166,0,0,356,357,5,22,0,0,357,358,3,30,15,0,358,359,5,2,
        0,0,359,407,1,0,0,0,360,361,5,23,0,0,361,363,5,25,0,0,362,364,5,
        147,0,0,363,362,1,0,0,0,363,364,1,0,0,0,364,365,1,0,0,0,365,407,
        3,108,54,0,366,370,5,24,0,0,367,369,5,141,0,0,368,367,1,0,0,0,369,
        372,1,0,0,0,370,371,1,0,0,0,370,368,1,0,0,0,371,373,1,0,0,0,372,
        370,1,0,0,0,373,407,5,2,0,0,374,407,5,26,0,0,375,376,5,27,0,0,376,
        377,5,141,0,0,377,407,3,108,54,0,378,379,5,28,0,0,379,380,5,141,
        0,0,380,407,3,108,54,0,381,382,5,29,0,0,382,383,5,141,0,0,383,407,
        3,108,54,0,384,385,5,30,0,0,385,386,5,141,0,0,386,407,3,108,54,0,
        387,388,5,31,0,0,388,389,5,141,0,0,389,407,3,108,54,0,390,391,5,
        32,0,0,391,392,5,141,0,0,392,407,3,108,54,0,393,397,5,33,0,0,394,
        396,5,141,0,0,395,394,1,0,0,0,396,399,1,0,0,0,397,398,1,0,0,0,397,
        395,1,0,0,0,398,400,1,0,0,0,399,397,1,0,0,0,400,407,5,2,0,0,401,
        403,5,34,0,0,402,404,5,147,0,0,403,402,1,0,0,0,403,404,1,0,0,0,404,
        405,1,0,0,0,405,407,3,108,54,0,406,278,1,0,0,0,406,283,1,0,0,0,406,
        284,1,0,0,0,406,287,1,0,0,0,406,290,1,0,0,0,406,293,1,0,0,0,406,
        298,1,0,0,0,406,303,1,0,0,0,406,305,1,0,0,0,406,310,1,0,0,0,406,
        312,1,0,0,0,406,325,1,0,0,0,406,332,1,0,0,0,406,336,1,0,0,0,406,
        339,1,0,0,0,406,342,1,0,0,0,406,347,1,0,0,0,406,348,1,0,0,0,406,
        353,1,0,0,0,406,356,1,0,0,0,406,360,1,0,0,0,406,366,1,0,0,0,406,
        374,1,0,0,0,406,375,1,0,0,0,406,378,1,0,0,0,406,381,1,0,0,0,406,
        384,1,0,0,0,406,387,1,0,0,0,406,390,1,0,0,0,406,393,1,0,0,0,406,
        401,1,0,0,0,407,27,1,0,0,0,408,409,5,5,0,0,409,410,3,96,48,0,410,
        411,3,96,48,0,411,413,3,104,52,0,412,414,3,104,52,0,413,412,1,0,
        0,0,413,414,1,0,0,0,414,416,1,0,0,0,415,417,3,104,52,0,416,415,1,
        0,0,0,416,417,1,0,0,0,417,421,1,0,0,0,418,420,3,32,16,0,419,418,
        1,0,0,0,420,423,1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,433,
        1,0,0,0,423,421,1,0,0,0,424,426,5,129,0,0,425,427,5,5,0,0,426,425,
        1,0,0,0,426,427,1,0,0,0,427,428,1,0,0,0,428,429,3,96,48,0,429,430,
        3,96,48,0,430,432,1,0,0,0,431,424,1,0,0,0,432,435,1,0,0,0,433,431,
        1,0,0,0,433,434,1,0,0,0,434,29,1,0,0,0,435,433,1,0,0,0,436,438,5,
        39,0,0,437,439,5,147,0,0,438,437,1,0,0,0,438,439,1,0,0,0,439,440,
        1,0,0,0,440,451,3,108,54,0,441,443,5,40,0,0,442,444,5,147,0,0,443,
        442,1,0,0,0,443,444,1,0,0,0,444,445,1,0,0,0,445,451,3,108,54,0,446,
        447,5,41,0,0,447,451,3,96,48,0,448,449,5,42,0,0,449,451,3,96,48,
        0,450,436,1,0,0,0,450,441,1,0,0,0,450,446,1,0,0,0,450,448,1,0,0,
        0,451,31,1,0,0,0,452,454,5,43,0,0,453,455,5,147,0,0,454,453,1,0,
        0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,488,3,110,55,0,457,459,5,
        44,0,0,458,460,5,147,0,0,459,458,1,0,0,0,459,460,1,0,0,0,460,461,
        1,0,0,0,461,488,3,110,55,0,462,464,5,55,0,0,463,465,5,147,0,0,464,
        463,1,0,0,0,464,465,1,0,0,0,465,466,1,0,0,0,466,488,3,110,55,0,467,
        469,5,45,0,0,468,470,5,147,0,0,469,468,1,0,0,0,469,470,1,0,0,0,470,
        471,1,0,0,0,471,488,3,110,55,0,472,474,5,46,0,0,473,475,5,147,0,
        0,474,473,1,0,0,0,474,475,1,0,0,0,475,476,1,0,0,0,476,488,3,110,
        55,0,477,479,5,47,0,0,478,480,5,147,0,0,479,478,1,0,0,0,479,480,
        1,0,0,0,480,481,1,0,0,0,481,488,3,110,55,0,482,484,5,12,0,0,483,
        485,5,147,0,0,484,483,1,0,0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,
        488,3,110,55,0,487,452,1,0,0,0,487,457,1,0,0,0,487,462,1,0,0,0,487,
        467,1,0,0,0,487,472,1,0,0,0,487,477,1,0,0,0,487,482,1,0,0,0,488,
        33,1,0,0,0,489,513,3,36,18,0,490,492,5,12,0,0,491,493,5,147,0,0,
        492,491,1,0,0,0,492,493,1,0,0,0,493,494,1,0,0,0,494,513,5,134,0,
        0,495,497,5,50,0,0,496,498,5,147,0,0,497,496,1,0,0,0,497,498,1,0,
        0,0,498,499,1,0,0,0,499,513,5,134,0,0,500,502,5,20,0,0,501,503,5,
        147,0,0,502,501,1,0,0,0,502,503,1,0,0,0,503,504,1,0,0,0,504,513,
        5,134,0,0,505,513,5,26,0,0,506,508,5,28,0,0,507,509,5,147,0,0,508,
        507,1,0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,513,3,108,54,0,511,
        513,5,51,0,0,512,489,1,0,0,0,512,490,1,0,0,0,512,495,1,0,0,0,512,
        500,1,0,0,0,512,505,1,0,0,0,512,506,1,0,0,0,512,511,1,0,0,0,513,
        35,1,0,0,0,514,515,5,5,0,0,515,516,3,96,48,0,516,517,3,96,48,0,517,
        518,3,96,48,0,518,519,3,96,48,0,519,520,3,104,52,0,520,521,3,104,
        52,0,521,522,3,104,52,0,522,523,5,134,0,0,523,37,1,0,0,0,524,528,
        5,53,0,0,525,527,3,40,20,0,526,525,1,0,0,0,527,530,1,0,0,0,528,526,
        1,0,0,0,528,529,1,0,0,0,529,531,1,0,0,0,530,528,1,0,0,0,531,535,
        5,2,0,0,532,535,5,35,0,0,533,535,5,51,0,0,534,524,1,0,0,0,534,532,
        1,0,0,0,534,533,1,0,0,0,535,39,1,0,0,0,536,538,5,54,0,0,537,539,
        5,147,0,0,538,537,1,0,0,0,538,539,1,0,0,0,539,540,1,0,0,0,540,547,
        3,96,48,0,541,543,5,55,0,0,542,544,5,147,0,0,543,542,1,0,0,0,543,
        544,1,0,0,0,544,545,1,0,0,0,545,547,3,108,54,0,546,536,1,0,0,0,546,
        541,1,0,0,0,547,41,1,0,0,0,548,550,5,57,0,0,549,551,5,147,0,0,550,
        549,1,0,0,0,550,551,1,0,0,0,551,552,1,0,0,0,552,588,5,134,0,0,553,
        555,5,58,0,0,554,556,5,147,0,0,555,554,1,0,0,0,555,556,1,0,0,0,556,
        557,1,0,0,0,557,583,5,144,0,0,558,560,3,108,54,0,559,561,5,132,0,
        0,560,559,1,0,0,0,560,561,1,0,0,0,561,562,1,0,0,0,562,564,3,108,
        54,0,563,565,5,132,0,0,564,563,1,0,0,0,564,565,1,0,0,0,565,566,1,
        0,0,0,566,567,3,108,54,0,567,584,1,0,0,0,568,570,5,127,0,0,569,571,
        5,147,0,0,570,569,1,0,0,0,570,571,1,0,0,0,571,572,1,0,0,0,572,574,
        3,96,48,0,573,575,5,132,0,0,574,573,1,0,0,0,574,575,1,0,0,0,575,
        581,1,0,0,0,576,578,5,128,0,0,577,579,5,147,0,0,578,577,1,0,0,0,
        578,579,1,0,0,0,579,580,1,0,0,0,580,582,3,96,48,0,581,576,1,0,0,
        0,581,582,1,0,0,0,582,584,1,0,0,0,583,558,1,0,0,0,583,568,1,0,0,
        0,584,585,1,0,0,0,585,586,5,145,0,0,586,588,1,0,0,0,587,548,1,0,
        0,0,587,553,1,0,0,0,588,43,1,0,0,0,589,590,5,5,0,0,590,591,3,96,
        48,0,591,592,3,104,52,0,592,593,3,104,52,0,593,594,3,104,52,0,594,
        45,1,0,0,0,595,626,3,48,24,0,596,598,5,10,0,0,597,599,5,147,0,0,
        598,597,1,0,0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,626,5,141,0,
        0,601,602,5,60,0,0,602,603,3,108,54,0,603,604,3,108,54,0,604,605,
        3,108,54,0,605,626,1,0,0,0,606,608,5,61,0,0,607,609,5,147,0,0,608,
        607,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,626,3,108,54,0,611,
        613,5,18,0,0,612,614,5,147,0,0,613,612,1,0,0,0,613,614,1,0,0,0,614,
        615,1,0,0,0,615,626,5,134,0,0,616,618,5,21,0,0,617,619,5,165,0,0,
        618,617,1,0,0,0,618,619,1,0,0,0,619,620,1,0,0,0,620,626,5,166,0,
        0,621,622,5,23,0,0,622,623,5,25,0,0,623,626,3,108,54,0,624,626,5,
        26,0,0,625,595,1,0,0,0,625,596,1,0,0,0,625,601,1,0,0,0,625,606,1,
        0,0,0,625,611,1,0,0,0,625,616,1,0,0,0,625,621,1,0,0,0,625,624,1,
        0,0,0,626,47,1,0,0,0,627,628,5,5,0,0,628,629,3,96,48,0,629,630,3,
        96,48,0,630,631,3,96,48,0,631,632,3,96,48,0,632,633,3,96,48,0,633,
        634,3,96,48,0,634,636,3,104,52,0,635,637,3,104,52,0,636,635,1,0,
        0,0,636,637,1,0,0,0,637,639,1,0,0,0,638,640,3,104,52,0,639,638,1,
        0,0,0,639,640,1,0,0,0,640,49,1,0,0,0,641,691,3,52,26,0,642,644,5,
        10,0,0,643,645,5,147,0,0,644,643,1,0,0,0,644,645,1,0,0,0,645,646,
        1,0,0,0,646,691,5,141,0,0,647,648,5,60,0,0,648,649,3,108,54,0,649,
        650,3,108,54,0,650,651,3,108,54,0,651,652,3,108,54,0,652,691,1,0,
        0,0,653,655,5,12,0,0,654,656,5,147,0,0,655,654,1,0,0,0,655,656,1,
        0,0,0,656,657,1,0,0,0,657,691,5,134,0,0,658,659,5,61,0,0,659,661,
        3,108,54,0,660,662,3,108,54,0,661,660,1,0,0,0,661,662,1,0,0,0,662,
        691,1,0,0,0,663,665,5,18,0,0,664,666,5,147,0,0,665,664,1,0,0,0,665,
        666,1,0,0,0,666,667,1,0,0,0,667,691,5,134,0,0,668,670,5,20,0,0,669,
        671,5,147,0,0,670,669,1,0,0,0,670,671,1,0,0,0,671,672,1,0,0,0,672,
        691,5,134,0,0,673,675,5,21,0,0,674,676,5,165,0,0,675,674,1,0,0,0,
        675,676,1,0,0,0,676,677,1,0,0,0,677,691,5,166,0,0,678,679,5,23,0,
        0,679,680,5,25,0,0,680,687,3,108,54,0,681,688,5,89,0,0,682,684,5,
        10,0,0,683,685,5,147,0,0,684,683,1,0,0,0,684,685,1,0,0,0,685,686,
        1,0,0,0,686,688,5,141,0,0,687,681,1,0,0,0,687,682,1,0,0,0,688,691,
        1,0,0,0,689,691,5,26,0,0,690,641,1,0,0,0,690,642,1,0,0,0,690,647,
        1,0,0,0,690,653,1,0,0,0,690,658,1,0,0,0,690,663,1,0,0,0,690,668,
        1,0,0,0,690,673,1,0,0,0,690,678,1,0,0,0,690,689,1,0,0,0,691,51,1,
        0,0,0,692,693,5,5,0,0,693,694,3,96,48,0,694,695,3,96,48,0,695,696,
        3,96,48,0,696,702,3,96,48,0,697,698,3,96,48,0,698,699,3,96,48,0,
        699,700,3,96,48,0,700,701,3,96,48,0,701,703,1,0,0,0,702,697,1,0,
        0,0,702,703,1,0,0,0,703,704,1,0,0,0,704,705,3,104,52,0,705,709,3,
        104,52,0,706,707,3,104,52,0,707,708,3,104,52,0,708,710,1,0,0,0,709,
        706,1,0,0,0,709,710,1,0,0,0,710,53,1,0,0,0,711,756,3,56,28,0,712,
        714,5,10,0,0,713,715,5,147,0,0,714,713,1,0,0,0,714,715,1,0,0,0,715,
        716,1,0,0,0,716,756,5,141,0,0,717,718,5,64,0,0,718,719,5,134,0,0,
        719,720,5,134,0,0,720,721,3,108,54,0,721,722,3,108,54,0,722,723,
        3,108,54,0,723,756,1,0,0,0,724,726,5,61,0,0,725,727,5,147,0,0,726,
        725,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,728,756,3,108,54,0,729,
        731,5,18,0,0,730,732,5,147,0,0,731,730,1,0,0,0,731,732,1,0,0,0,732,
        733,1,0,0,0,733,756,5,134,0,0,734,736,5,65,0,0,735,737,5,147,0,0,
        736,735,1,0,0,0,736,737,1,0,0,0,737,738,1,0,0,0,738,756,3,108,54,
        0,739,741,5,66,0,0,740,742,5,147,0,0,741,740,1,0,0,0,741,742,1,0,
        0,0,742,743,1,0,0,0,743,756,3,108,54,0,744,746,5,21,0,0,745,747,
        5,165,0,0,746,745,1,0,0,0,746,747,1,0,0,0,747,748,1,0,0,0,748,756,
        5,166,0,0,749,750,5,23,0,0,750,751,5,25,0,0,751,756,3,108,54,0,752,
        756,3,58,29,0,753,756,5,26,0,0,754,756,5,68,0,0,755,711,1,0,0,0,
        755,712,1,0,0,0,755,717,1,0,0,0,755,724,1,0,0,0,755,729,1,0,0,0,
        755,734,1,0,0,0,755,739,1,0,0,0,755,744,1,0,0,0,755,749,1,0,0,0,
        755,752,1,0,0,0,755,753,1,0,0,0,755,754,1,0,0,0,756,55,1,0,0,0,757,
        758,5,5,0,0,758,759,3,96,48,0,759,760,3,96,48,0,760,761,3,96,48,
        0,761,762,3,96,48,0,762,763,3,96,48,0,763,764,3,104,52,0,764,765,
        3,104,52,0,765,57,1,0,0,0,766,767,5,67,0,0,767,768,3,96,48,0,768,
        769,3,108,54,0,769,770,3,108,54,0,770,59,1,0,0,0,771,812,3,62,31,
        0,772,812,3,64,32,0,773,812,3,66,33,0,774,812,3,68,34,0,775,812,
        3,70,35,0,776,812,3,72,36,0,777,812,3,74,37,0,778,812,3,76,38,0,
        779,812,3,78,39,0,780,782,5,10,0,0,781,783,5,147,0,0,782,781,1,0,
        0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,812,5,141,0,0,785,787,5,
        77,0,0,786,788,5,147,0,0,787,786,1,0,0,0,787,788,1,0,0,0,788,789,
        1,0,0,0,789,812,3,108,54,0,790,791,5,61,0,0,791,793,3,108,54,0,792,
        794,3,108,54,0,793,792,1,0,0,0,793,794,1,0,0,0,794,812,1,0,0,0,795,
        796,5,21,0,0,796,812,5,166,0,0,797,798,5,23,0,0,798,799,5,25,0,0,
        799,806,3,108,54,0,800,807,5,89,0,0,801,803,5,10,0,0,802,804,5,147,
        0,0,803,802,1,0,0,0,803,804,1,0,0,0,804,805,1,0,0,0,805,807,5,141,
        0,0,806,800,1,0,0,0,806,801,1,0,0,0,807,808,1,0,0,0,808,809,5,141,
        0,0,809,812,1,0,0,0,810,812,5,26,0,0,811,771,1,0,0,0,811,772,1,0,
        0,0,811,773,1,0,0,0,811,774,1,0,0,0,811,775,1,0,0,0,811,776,1,0,
        0,0,811,777,1,0,0,0,811,778,1,0,0,0,811,779,1,0,0,0,811,780,1,0,
        0,0,811,785,1,0,0,0,811,790,1,0,0,0,811,795,1,0,0,0,811,797,1,0,
        0,0,811,810,1,0,0,0,812,61,1,0,0,0,813,814,5,70,0,0,814,816,3,96,
        48,0,815,817,3,96,48,0,816,815,1,0,0,0,816,817,1,0,0,0,817,818,1,
        0,0,0,818,820,3,108,54,0,819,821,3,108,54,0,820,819,1,0,0,0,820,
        821,1,0,0,0,821,63,1,0,0,0,822,823,5,67,0,0,823,824,3,96,48,0,824,
        825,3,108,54,0,825,65,1,0,0,0,826,827,5,71,0,0,827,828,3,96,48,0,
        828,829,3,96,48,0,829,830,3,96,48,0,830,832,5,141,0,0,831,833,5,
        135,0,0,832,831,1,0,0,0,832,833,1,0,0,0,833,834,1,0,0,0,834,835,
        5,141,0,0,835,67,1,0,0,0,836,837,5,72,0,0,837,838,3,96,48,0,838,
        69,1,0,0,0,839,840,5,63,0,0,840,841,3,96,48,0,841,71,1,0,0,0,842,
        843,5,73,0,0,843,844,3,96,48,0,844,73,1,0,0,0,845,846,5,74,0,0,846,
        847,3,96,48,0,847,75,1,0,0,0,848,849,5,75,0,0,849,850,5,141,0,0,
        850,851,3,96,48,0,851,852,3,96,48,0,852,853,3,96,48,0,853,854,3,
        96,48,0,854,856,3,96,48,0,855,857,3,96,48,0,856,855,1,0,0,0,856,
        857,1,0,0,0,857,77,1,0,0,0,858,859,5,76,0,0,859,860,3,96,48,0,860,
        79,1,0,0,0,861,945,3,82,41,0,862,864,5,10,0,0,863,865,5,147,0,0,
        864,863,1,0,0,0,864,865,1,0,0,0,865,866,1,0,0,0,866,945,5,141,0,
        0,867,945,5,79,0,0,868,869,5,64,0,0,869,871,5,134,0,0,870,872,5,
        134,0,0,871,870,1,0,0,0,871,872,1,0,0,0,872,874,1,0,0,0,873,875,
        5,134,0,0,874,873,1,0,0,0,874,875,1,0,0,0,875,877,1,0,0,0,876,878,
        5,134,0,0,877,876,1,0,0,0,877,878,1,0,0,0,878,879,1,0,0,0,879,945,
        3,108,54,0,880,882,5,77,0,0,881,883,5,147,0,0,882,881,1,0,0,0,882,
        883,1,0,0,0,883,884,1,0,0,0,884,945,3,108,54,0,885,887,5,61,0,0,
        886,888,5,147,0,0,887,886,1,0,0,0,887,888,1,0,0,0,888,889,1,0,0,
        0,889,945,3,108,54,0,890,892,5,18,0,0,891,893,5,147,0,0,892,891,
        1,0,0,0,892,893,1,0,0,0,893,894,1,0,0,0,894,945,5,134,0,0,895,896,
        5,80,0,0,896,897,5,134,0,0,897,898,5,134,0,0,898,902,5,134,0,0,899,
        900,5,134,0,0,900,901,5,134,0,0,901,903,5,134,0,0,902,899,1,0,0,
        0,902,903,1,0,0,0,903,907,1,0,0,0,904,905,5,134,0,0,905,906,5,134,
        0,0,906,908,5,134,0,0,907,904,1,0,0,0,907,908,1,0,0,0,908,912,1,
        0,0,0,909,910,5,134,0,0,910,911,5,134,0,0,911,913,5,134,0,0,912,
        909,1,0,0,0,912,913,1,0,0,0,913,945,1,0,0,0,914,916,5,21,0,0,915,
        917,5,165,0,0,916,915,1,0,0,0,916,917,1,0,0,0,917,918,1,0,0,0,918,
        945,5,166,0,0,919,920,5,23,0,0,920,921,5,25,0,0,921,928,3,108,54,
        0,922,929,5,89,0,0,923,925,5,10,0,0,924,926,5,147,0,0,925,924,1,
        0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,929,5,141,0,0,928,922,
        1,0,0,0,928,923,1,0,0,0,929,945,1,0,0,0,930,945,5,26,0,0,931,932,
        5,81,0,0,932,933,5,82,0,0,933,935,5,134,0,0,934,936,5,134,0,0,935,
        934,1,0,0,0,935,936,1,0,0,0,936,938,1,0,0,0,937,939,5,134,0,0,938,
        937,1,0,0,0,938,939,1,0,0,0,939,941,1,0,0,0,940,942,5,134,0,0,941,
        940,1,0,0,0,941,942,1,0,0,0,942,945,1,0,0,0,943,945,5,68,0,0,944,
        861,1,0,0,0,944,862,1,0,0,0,944,867,1,0,0,0,944,868,1,0,0,0,944,
        880,1,0,0,0,944,885,1,0,0,0,944,890,1,0,0,0,944,895,1,0,0,0,944,
        914,1,0,0,0,944,919,1,0,0,0,944,930,1,0,0,0,944,931,1,0,0,0,944,
        943,1,0,0,0,945,81,1,0,0,0,946,947,5,5,0,0,947,948,3,96,48,0,948,
        949,3,96,48,0,949,950,3,96,48,0,950,956,3,96,48,0,951,952,3,96,48,
        0,952,953,3,96,48,0,953,954,3,96,48,0,954,955,3,96,48,0,955,957,
        1,0,0,0,956,951,1,0,0,0,956,957,1,0,0,0,957,963,1,0,0,0,958,959,
        3,96,48,0,959,960,3,96,48,0,960,961,3,96,48,0,961,962,3,96,48,0,
        962,964,1,0,0,0,963,958,1,0,0,0,963,964,1,0,0,0,964,970,1,0,0,0,
        965,966,3,96,48,0,966,967,3,96,48,0,967,968,3,96,48,0,968,969,3,
        96,48,0,969,971,1,0,0,0,970,965,1,0,0,0,970,971,1,0,0,0,971,83,1,
        0,0,0,972,1005,3,86,43,0,973,975,5,10,0,0,974,976,5,147,0,0,975,
        974,1,0,0,0,975,976,1,0,0,0,976,977,1,0,0,0,977,1005,5,141,0,0,978,
        979,5,60,0,0,979,980,3,108,54,0,980,981,3,108,54,0,981,982,3,108,
        54,0,982,983,3,108,54,0,983,984,3,108,54,0,984,1005,1,0,0,0,985,
        987,5,61,0,0,986,988,5,147,0,0,987,986,1,0,0,0,987,988,1,0,0,0,988,
        989,1,0,0,0,989,1005,3,108,54,0,990,992,5,18,0,0,991,993,5,147,0,
        0,992,991,1,0,0,0,992,993,1,0,0,0,993,994,1,0,0,0,994,1005,5,134,
        0,0,995,997,5,21,0,0,996,998,5,165,0,0,997,996,1,0,0,0,997,998,1,
        0,0,0,998,999,1,0,0,0,999,1005,5,166,0,0,1000,1001,5,23,0,0,1001,
        1002,5,25,0,0,1002,1005,3,108,54,0,1003,1005,5,26,0,0,1004,972,1,
        0,0,0,1004,973,1,0,0,0,1004,978,1,0,0,0,1004,985,1,0,0,0,1004,990,
        1,0,0,0,1004,995,1,0,0,0,1004,1000,1,0,0,0,1004,1003,1,0,0,0,1005,
        85,1,0,0,0,1006,1007,5,5,0,0,1007,1008,3,96,48,0,1008,1009,3,96,
        48,0,1009,1010,3,96,48,0,1010,1011,3,96,48,0,1011,1012,3,96,48,0,
        1012,1013,3,96,48,0,1013,1014,3,104,52,0,1014,1015,3,104,52,0,1015,
        87,1,0,0,0,1016,1051,3,90,45,0,1017,1019,5,10,0,0,1018,1020,5,147,
        0,0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,1020,1021,1,0,0,0,1021,1051,
        5,141,0,0,1022,1023,5,60,0,0,1023,1024,3,108,54,0,1024,1025,3,108,
        54,0,1025,1026,3,108,54,0,1026,1027,3,108,54,0,1027,1028,3,108,54,
        0,1028,1029,3,108,54,0,1029,1030,3,108,54,0,1030,1051,1,0,0,0,1031,
        1033,5,61,0,0,1032,1034,5,147,0,0,1033,1032,1,0,0,0,1033,1034,1,
        0,0,0,1034,1035,1,0,0,0,1035,1051,3,108,54,0,1036,1038,5,18,0,0,
        1037,1039,5,147,0,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1040,
        1,0,0,0,1040,1051,5,134,0,0,1041,1043,5,21,0,0,1042,1044,5,165,0,
        0,1043,1042,1,0,0,0,1043,1044,1,0,0,0,1044,1045,1,0,0,0,1045,1051,
        5,166,0,0,1046,1047,5,23,0,0,1047,1048,5,25,0,0,1048,1051,3,108,
        54,0,1049,1051,5,26,0,0,1050,1016,1,0,0,0,1050,1017,1,0,0,0,1050,
        1022,1,0,0,0,1050,1031,1,0,0,0,1050,1036,1,0,0,0,1050,1041,1,0,0,
        0,1050,1046,1,0,0,0,1050,1049,1,0,0,0,1051,89,1,0,0,0,1052,1053,
        5,5,0,0,1053,1054,3,96,48,0,1054,1055,3,96,48,0,1055,1056,3,96,48,
        0,1056,1057,3,96,48,0,1057,1058,3,96,48,0,1058,1059,3,96,48,0,1059,
        1060,3,96,48,0,1060,1061,3,96,48,0,1061,1062,3,104,52,0,1062,1063,
        3,104,52,0,1063,91,1,0,0,0,1064,1117,3,94,47,0,1065,1067,5,10,0,
        0,1066,1068,5,147,0,0,1067,1066,1,0,0,0,1067,1068,1,0,0,0,1068,1069,
        1,0,0,0,1069,1117,5,141,0,0,1070,1072,5,86,0,0,1071,1073,5,147,0,
        0,1072,1071,1,0,0,0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,1117,
        5,141,0,0,1075,1076,5,64,0,0,1076,1077,5,134,0,0,1077,1078,5,134,
        0,0,1078,1117,3,108,54,0,1079,1081,5,77,0,0,1080,1082,5,147,0,0,
        1081,1080,1,0,0,0,1081,1082,1,0,0,0,1082,1083,1,0,0,0,1083,1117,
        3,108,54,0,1084,1086,5,61,0,0,1085,1087,5,147,0,0,1086,1085,1,0,
        0,0,1086,1087,1,0,0,0,1087,1088,1,0,0,0,1088,1117,3,108,54,0,1089,
        1091,5,18,0,0,1090,1092,5,147,0,0,1091,1090,1,0,0,0,1091,1092,1,
        0,0,0,1092,1093,1,0,0,0,1093,1117,5,134,0,0,1094,1096,5,21,0,0,1095,
        1097,5,165,0,0,1096,1095,1,0,0,0,1096,1097,1,0,0,0,1097,1098,1,0,
        0,0,1098,1117,5,166,0,0,1099,1100,5,23,0,0,1100,1101,5,25,0,0,1101,
        1108,3,108,54,0,1102,1109,5,89,0,0,1103,1105,5,10,0,0,1104,1106,
        5,147,0,0,1105,1104,1,0,0,0,1105,1106,1,0,0,0,1106,1107,1,0,0,0,
        1107,1109,5,141,0,0,1108,1102,1,0,0,0,1108,1103,1,0,0,0,1109,1117,
        1,0,0,0,1110,1117,5,26,0,0,1111,1112,5,81,0,0,1112,1113,5,87,0,0,
        1113,1114,5,134,0,0,1114,1117,5,134,0,0,1115,1117,5,68,0,0,1116,
        1064,1,0,0,0,1116,1065,1,0,0,0,1116,1070,1,0,0,0,1116,1075,1,0,0,
        0,1116,1079,1,0,0,0,1116,1084,1,0,0,0,1116,1089,1,0,0,0,1116,1094,
        1,0,0,0,1116,1099,1,0,0,0,1116,1110,1,0,0,0,1116,1111,1,0,0,0,1116,
        1115,1,0,0,0,1117,93,1,0,0,0,1118,1119,5,5,0,0,1119,1120,3,96,48,
        0,1120,1121,3,96,48,0,1121,1122,3,96,48,0,1122,1123,3,96,48,0,1123,
        1124,3,96,48,0,1124,1125,3,96,48,0,1125,1126,3,96,48,0,1126,1127,
        3,96,48,0,1127,1128,3,96,48,0,1128,1129,3,96,48,0,1129,1131,3,96,
        48,0,1130,1132,3,96,48,0,1131,1130,1,0,0,0,1131,1132,1,0,0,0,1132,
        95,1,0,0,0,1133,1134,5,144,0,0,1134,1135,3,98,49,0,1135,1136,5,145,
        0,0,1136,97,1,0,0,0,1137,1142,3,100,50,0,1138,1139,5,129,0,0,1139,
        1141,3,100,50,0,1140,1138,1,0,0,0,1141,1144,1,0,0,0,1142,1140,1,
        0,0,0,1142,1143,1,0,0,0,1143,99,1,0,0,0,1144,1142,1,0,0,0,1145,1150,
        3,102,51,0,1146,1147,5,130,0,0,1147,1149,3,102,51,0,1148,1146,1,
        0,0,0,1149,1152,1,0,0,0,1150,1148,1,0,0,0,1150,1151,1,0,0,0,1151,
        101,1,0,0,0,1152,1150,1,0,0,0,1153,1154,6,51,-1,0,1154,1155,5,144,
        0,0,1155,1156,3,98,49,0,1156,1157,5,145,0,0,1157,1303,1,0,0,0,1158,
        1303,5,89,0,0,1159,1160,5,91,0,0,1160,1161,7,0,0,0,1161,1162,7,1,
        0,0,1162,1303,7,0,0,0,1163,1165,5,92,0,0,1164,1166,5,159,0,0,1165,
        1164,1,0,0,0,1165,1166,1,0,0,0,1166,1167,1,0,0,0,1167,1168,5,160,
        0,0,1168,1169,5,161,0,0,1169,1303,3,106,53,0,1170,1171,5,93,0,0,
        1171,1303,3,102,51,30,1172,1173,5,94,0,0,1173,1303,3,102,51,29,1174,
        1175,5,95,0,0,1175,1303,3,102,51,28,1176,1183,5,96,0,0,1177,1184,
        5,142,0,0,1178,1181,5,141,0,0,1179,1180,5,146,0,0,1180,1182,5,141,
        0,0,1181,1179,1,0,0,0,1181,1182,1,0,0,0,1182,1184,1,0,0,0,1183,1177,
        1,0,0,0,1183,1178,1,0,0,0,1184,1303,1,0,0,0,1185,1186,5,97,0,0,1186,
        1187,3,106,53,0,1187,1188,3,106,53,0,1188,1189,3,106,53,0,1189,1190,
        3,106,53,0,1190,1191,3,106,53,0,1191,1192,3,106,53,0,1192,1303,1,
        0,0,0,1193,1303,5,98,0,0,1194,1195,5,99,0,0,1195,1303,5,134,0,0,
        1196,1303,5,100,0,0,1197,1209,5,101,0,0,1198,1210,5,142,0,0,1199,
        1202,5,141,0,0,1200,1201,5,146,0,0,1201,1203,5,141,0,0,1202,1200,
        1,0,0,0,1202,1203,1,0,0,0,1203,1210,1,0,0,0,1204,1207,5,137,0,0,
        1205,1206,5,146,0,0,1206,1208,5,137,0,0,1207,1205,1,0,0,0,1207,1208,
        1,0,0,0,1208,1210,1,0,0,0,1209,1198,1,0,0,0,1209,1199,1,0,0,0,1209,
        1204,1,0,0,0,1210,1303,1,0,0,0,1211,1303,5,102,0,0,1212,1213,5,131,
        0,0,1213,1303,3,102,51,20,1214,1215,5,103,0,0,1215,1216,5,144,0,
        0,1216,1218,3,106,53,0,1217,1219,5,132,0,0,1218,1217,1,0,0,0,1218,
        1219,1,0,0,0,1219,1220,1,0,0,0,1220,1222,3,106,53,0,1221,1223,5,
        132,0,0,1222,1221,1,0,0,0,1222,1223,1,0,0,0,1223,1224,1,0,0,0,1224,
        1225,3,106,53,0,1225,1226,5,145,0,0,1226,1227,5,104,0,0,1227,1228,
        3,106,53,0,1228,1303,1,0,0,0,1229,1230,5,103,0,0,1230,1231,5,144,
        0,0,1231,1233,5,127,0,0,1232,1234,5,147,0,0,1233,1232,1,0,0,0,1233,
        1234,1,0,0,0,1234,1235,1,0,0,0,1235,1237,3,96,48,0,1236,1238,5,132,
        0,0,1237,1236,1,0,0,0,1237,1238,1,0,0,0,1238,1244,1,0,0,0,1239,1241,
        5,128,0,0,1240,1242,5,147,0,0,1241,1240,1,0,0,0,1241,1242,1,0,0,
        0,1242,1243,1,0,0,0,1243,1245,3,96,48,0,1244,1239,1,0,0,0,1244,1245,
        1,0,0,0,1245,1246,1,0,0,0,1246,1247,5,145,0,0,1247,1248,5,104,0,
        0,1248,1249,3,106,53,0,1249,1303,1,0,0,0,1250,1303,5,105,0,0,1251,
        1303,5,106,0,0,1252,1259,5,107,0,0,1253,1260,5,143,0,0,1254,1257,
        5,134,0,0,1255,1256,5,146,0,0,1256,1258,5,134,0,0,1257,1255,1,0,
        0,0,1257,1258,1,0,0,0,1258,1260,1,0,0,0,1259,1253,1,0,0,0,1259,1254,
        1,0,0,0,1260,1303,1,0,0,0,1261,1268,5,108,0,0,1262,1269,5,142,0,
        0,1263,1266,5,141,0,0,1264,1265,5,146,0,0,1265,1267,5,141,0,0,1266,
        1264,1,0,0,0,1266,1267,1,0,0,0,1267,1269,1,0,0,0,1268,1262,1,0,0,
        0,1268,1263,1,0,0,0,1269,1303,1,0,0,0,1270,1282,5,110,0,0,1271,1283,
        5,142,0,0,1272,1275,5,141,0,0,1273,1274,5,146,0,0,1274,1276,5,141,
        0,0,1275,1273,1,0,0,0,1275,1276,1,0,0,0,1276,1283,1,0,0,0,1277,1280,
        5,137,0,0,1278,1279,5,146,0,0,1279,1281,5,137,0,0,1280,1278,1,0,
        0,0,1280,1281,1,0,0,0,1281,1283,1,0,0,0,1282,1271,1,0,0,0,1282,1272,
        1,0,0,0,1282,1277,1,0,0,0,1283,1303,1,0,0,0,1284,1285,5,111,0,0,
        1285,1286,3,106,53,0,1286,1287,3,106,53,0,1287,1288,3,106,53,0,1288,
        1289,3,106,53,0,1289,1290,3,106,53,0,1290,1291,3,106,53,0,1291,1303,
        1,0,0,0,1292,1303,5,112,0,0,1293,1303,5,113,0,0,1294,1303,5,114,
        0,0,1295,1303,5,115,0,0,1296,1303,5,116,0,0,1297,1303,5,117,0,0,
        1298,1303,5,118,0,0,1299,1303,5,119,0,0,1300,1303,5,120,0,0,1301,
        1303,5,121,0,0,1302,1153,1,0,0,0,1302,1158,1,0,0,0,1302,1159,1,0,
        0,0,1302,1163,1,0,0,0,1302,1170,1,0,0,0,1302,1172,1,0,0,0,1302,1174,
        1,0,0,0,1302,1176,1,0,0,0,1302,1185,1,0,0,0,1302,1193,1,0,0,0,1302,
        1194,1,0,0,0,1302,1196,1,0,0,0,1302,1197,1,0,0,0,1302,1211,1,0,0,
        0,1302,1212,1,0,0,0,1302,1214,1,0,0,0,1302,1229,1,0,0,0,1302,1250,
        1,0,0,0,1302,1251,1,0,0,0,1302,1252,1,0,0,0,1302,1261,1,0,0,0,1302,
        1270,1,0,0,0,1302,1284,1,0,0,0,1302,1292,1,0,0,0,1302,1293,1,0,0,
        0,1302,1294,1,0,0,0,1302,1295,1,0,0,0,1302,1296,1,0,0,0,1302,1297,
        1,0,0,0,1302,1298,1,0,0,0,1302,1299,1,0,0,0,1302,1300,1,0,0,0,1302,
        1301,1,0,0,0,1303,1312,1,0,0,0,1304,1305,10,33,0,0,1305,1306,5,90,
        0,0,1306,1311,3,106,53,0,1307,1308,10,13,0,0,1308,1309,5,109,0,0,
        1309,1311,3,106,53,0,1310,1304,1,0,0,0,1310,1307,1,0,0,0,1311,1314,
        1,0,0,0,1312,1310,1,0,0,0,1312,1313,1,0,0,0,1313,103,1,0,0,0,1314,
        1312,1,0,0,0,1315,1316,7,2,0,0,1316,105,1,0,0,0,1317,1318,7,3,0,
        0,1318,107,1,0,0,0,1319,1320,7,2,0,0,1320,109,1,0,0,0,1321,1322,
        7,3,0,0,1322,111,1,0,0,0,1323,1334,5,88,0,0,1324,1332,5,171,0,0,
        1325,1327,5,174,0,0,1326,1325,1,0,0,0,1327,1330,1,0,0,0,1328,1326,
        1,0,0,0,1328,1329,1,0,0,0,1329,1333,1,0,0,0,1330,1328,1,0,0,0,1331,
        1333,5,175,0,0,1332,1328,1,0,0,0,1332,1331,1,0,0,0,1333,1335,1,0,
        0,0,1334,1324,1,0,0,0,1334,1335,1,0,0,0,1335,1336,1,0,0,0,1336,1340,
        5,172,0,0,1337,1339,5,174,0,0,1338,1337,1,0,0,0,1339,1342,1,0,0,
        0,1340,1338,1,0,0,0,1340,1341,1,0,0,0,1341,1343,1,0,0,0,1342,1340,
        1,0,0,0,1343,1344,5,173,0,0,1344,113,1,0,0,0,1345,1346,5,122,0,0,
        1346,1347,3,116,58,0,1347,1348,3,96,48,0,1348,115,1,0,0,0,1349,1350,
        7,4,0,0,1350,1351,3,118,59,0,1351,1352,5,177,0,0,1352,1356,1,0,0,
        0,1353,1354,5,125,0,0,1354,1356,3,126,63,0,1355,1349,1,0,0,0,1355,
        1353,1,0,0,0,1356,117,1,0,0,0,1357,1360,5,187,0,0,1358,1359,5,178,
        0,0,1359,1361,3,120,60,0,1360,1358,1,0,0,0,1360,1361,1,0,0,0,1361,
        119,1,0,0,0,1362,1367,3,122,61,0,1363,1364,7,5,0,0,1364,1366,3,120,
        60,0,1365,1363,1,0,0,0,1366,1369,1,0,0,0,1367,1365,1,0,0,0,1367,
        1368,1,0,0,0,1368,121,1,0,0,0,1369,1367,1,0,0,0,1370,1377,5,187,
        0,0,1371,1377,3,124,62,0,1372,1377,5,185,0,0,1373,1377,5,186,0,0,
        1374,1377,5,210,0,0,1375,1377,5,212,0,0,1376,1370,1,0,0,0,1376,1371,
        1,0,0,0,1376,1372,1,0,0,0,1376,1373,1,0,0,0,1376,1374,1,0,0,0,1376,
        1375,1,0,0,0,1377,123,1,0,0,0,1378,1379,5,188,0,0,1379,1380,5,214,
        0,0,1380,1381,3,122,61,0,1381,1382,5,177,0,0,1382,1498,1,0,0,0,1383,
        1384,5,189,0,0,1384,1385,5,214,0,0,1385,1386,3,122,61,0,1386,1387,
        5,177,0,0,1387,1498,1,0,0,0,1388,1389,5,191,0,0,1389,1390,5,214,
        0,0,1390,1391,3,122,61,0,1391,1392,5,177,0,0,1392,1498,1,0,0,0,1393,
        1394,5,192,0,0,1394,1395,5,214,0,0,1395,1396,3,122,61,0,1396,1397,
        5,177,0,0,1397,1498,1,0,0,0,1398,1399,5,193,0,0,1399,1400,5,214,
        0,0,1400,1401,3,122,61,0,1401,1402,5,177,0,0,1402,1498,1,0,0,0,1403,
        1404,5,194,0,0,1404,1405,5,214,0,0,1405,1406,3,122,61,0,1406,1407,
        5,177,0,0,1407,1498,1,0,0,0,1408,1409,5,195,0,0,1409,1410,5,214,
        0,0,1410,1411,3,122,61,0,1411,1412,5,177,0,0,1412,1498,1,0,0,0,1413,
        1414,5,196,0,0,1414,1415,5,214,0,0,1415,1416,3,122,61,0,1416,1417,
        5,177,0,0,1417,1498,1,0,0,0,1418,1419,5,197,0,0,1419,1420,5,214,
        0,0,1420,1421,3,122,61,0,1421,1422,5,177,0,0,1422,1498,1,0,0,0,1423,
        1424,5,198,0,0,1424,1425,5,214,0,0,1425,1426,3,122,61,0,1426,1427,
        5,177,0,0,1427,1498,1,0,0,0,1428,1429,5,199,0,0,1429,1430,5,214,
        0,0,1430,1431,3,122,61,0,1431,1432,5,177,0,0,1432,1498,1,0,0,0,1433,
        1434,5,200,0,0,1434,1435,5,214,0,0,1435,1440,3,122,61,0,1436,1437,
        5,184,0,0,1437,1439,3,122,61,0,1438,1436,1,0,0,0,1439,1442,1,0,0,
        0,1440,1438,1,0,0,0,1440,1441,1,0,0,0,1441,1443,1,0,0,0,1442,1440,
        1,0,0,0,1443,1444,5,177,0,0,1444,1498,1,0,0,0,1445,1446,5,201,0,
        0,1446,1447,5,214,0,0,1447,1448,3,122,61,0,1448,1449,5,177,0,0,1449,
        1498,1,0,0,0,1450,1451,5,202,0,0,1451,1452,5,214,0,0,1452,1457,3,
        122,61,0,1453,1454,5,184,0,0,1454,1456,3,122,61,0,1455,1453,1,0,
        0,0,1456,1459,1,0,0,0,1457,1455,1,0,0,0,1457,1458,1,0,0,0,1458,1460,
        1,0,0,0,1459,1457,1,0,0,0,1460,1461,5,177,0,0,1461,1498,1,0,0,0,
        1462,1463,5,203,0,0,1463,1464,5,214,0,0,1464,1465,3,122,61,0,1465,
        1466,5,184,0,0,1466,1467,3,122,61,0,1467,1468,5,177,0,0,1468,1498,
        1,0,0,0,1469,1470,5,204,0,0,1470,1471,5,214,0,0,1471,1472,3,122,
        61,0,1472,1473,5,177,0,0,1473,1498,1,0,0,0,1474,1475,5,205,0,0,1475,
        1476,5,214,0,0,1476,1498,5,177,0,0,1477,1478,5,206,0,0,1478,1479,
        5,214,0,0,1479,1480,3,122,61,0,1480,1481,5,177,0,0,1481,1498,1,0,
        0,0,1482,1483,5,207,0,0,1483,1484,5,214,0,0,1484,1485,3,122,61,0,
        1485,1486,5,177,0,0,1486,1498,1,0,0,0,1487,1488,5,208,0,0,1488,1489,
        5,214,0,0,1489,1490,3,122,61,0,1490,1491,5,177,0,0,1491,1498,1,0,
        0,0,1492,1493,5,209,0,0,1493,1494,5,214,0,0,1494,1495,3,122,61,0,
        1495,1496,5,177,0,0,1496,1498,1,0,0,0,1497,1378,1,0,0,0,1497,1383,
        1,0,0,0,1497,1388,1,0,0,0,1497,1393,1,0,0,0,1497,1398,1,0,0,0,1497,
        1403,1,0,0,0,1497,1408,1,0,0,0,1497,1413,1,0,0,0,1497,1418,1,0,0,
        0,1497,1423,1,0,0,0,1497,1428,1,0,0,0,1497,1433,1,0,0,0,1497,1445,
        1,0,0,0,1497,1450,1,0,0,0,1497,1462,1,0,0,0,1497,1469,1,0,0,0,1497,
        1474,1,0,0,0,1497,1477,1,0,0,0,1497,1482,1,0,0,0,1497,1487,1,0,0,
        0,1497,1492,1,0,0,0,1498,125,1,0,0,0,1499,1500,7,6,0,0,1500,1501,
        5,216,0,0,1501,1502,5,225,0,0,1502,1503,5,217,0,0,1503,127,1,0,0,
        0,1504,1505,5,126,0,0,1505,1506,5,211,0,0,1506,1507,5,178,0,0,1507,
        1508,3,130,65,0,1508,1509,5,177,0,0,1509,129,1,0,0,0,1510,1515,3,
        122,61,0,1511,1512,7,5,0,0,1512,1514,3,130,65,0,1513,1511,1,0,0,
        0,1514,1517,1,0,0,0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,131,
        1,0,0,0,1517,1515,1,0,0,0,178,154,156,165,171,177,183,189,195,201,
        210,219,228,237,246,255,264,273,280,295,300,307,316,321,332,344,
        350,363,370,397,403,406,413,416,421,426,433,438,443,450,454,459,
        464,469,474,479,484,487,492,497,502,508,512,528,534,538,543,546,
        550,555,560,564,570,574,578,581,583,587,598,608,613,618,625,636,
        639,644,655,661,665,670,675,684,687,690,702,709,714,726,731,736,
        741,746,755,782,787,793,803,806,811,816,820,832,856,864,871,874,
        877,882,887,892,902,907,912,916,925,928,935,938,941,944,956,963,
        970,975,987,992,997,1004,1019,1033,1038,1043,1050,1067,1072,1081,
        1086,1091,1096,1105,1108,1116,1131,1142,1150,1165,1181,1183,1202,
        1207,1209,1218,1222,1233,1237,1241,1244,1257,1259,1266,1268,1275,
        1280,1282,1302,1310,1312,1328,1332,1334,1340,1355,1360,1367,1376,
        1440,1457,1497,1515
    ]

class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'CV'", "'DEN'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'OUTD'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'CUTOFF'", 
                     "'CUTON'", "'FROM'", "'TO'", "'PEAK'", "'SPECTRUM'", 
                     "'VOLUME'", "'PPM1'", "'PPM2'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SIZE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'FBOX'", "<INVALID>", 
                     "'ID'", "<INVALID>", "'NAME'", "'NONE'", "<INVALID>", 
                     "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SFBOX'", "'STORE1'", "'STORE2'", 
                     "'STORE3'", "'STORE4'", "'STORE5'", "'STORE6'", "'STORE7'", 
                     "'STORE8'", "'STORE9'", "'TAG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SHOW'", "<INVALID>", "'TAIL'", "'HEAD'", 
                     "'OR'", "'AND'", "'NOT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "':'", "<INVALID>", "'<'", "'>'", "'<='", "'>='", "'#'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'+'", "'-'", "<INVALID>", 
                     "'/'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'ACOS'", "'ASIN'", "'COS'", 
                     "'DECODE'", "'ENCODE'", "'EXP'", "'GAUSS'", "'HEAVY'", 
                     "'INT'", "'LOG10'", "'LOG'", "<INVALID>", "'MAXW'", 
                     "<INVALID>", "'MOD'", "<INVALID>", "<INVALID>", "'SIGN'", 
                     "'SIN'", "'SQRT'", "'TAN'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'RMS'", "'SUM'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Averaging", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Initialize", "Update", "Gamma", "Kappa", "Cutoff", 
                      "Cuton", "From", "To", "Peak", "Spectrum", "Volume", 
                      "Ppm1", "Ppm2", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Coupling", "Carbon", "Expectation", 
                      "PhiStep", "PsiStep", "Rcoil", "Zero", "Proton", "Observed", 
                      "Anisotropy", "Amides", "Nitrogens", "Oxygens", "RingAtoms", 
                      "AlphasAndAmides", "Error", "Conformation", "Compressed", 
                      "Phase", "Size", "Dimensions", "Danisotropy", "OneBond", 
                      "AngleDb", "DerivFlag", "Angle_or_Dihedral", "Flags", 
                      "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Fbox", "Hydrogen", 
                      "Id", "Known", "Name", "NONE", "Point", "Cut", "Previous", 
                      "Pseudo", "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Sfbox", "Store_1", "Store_2", "Store_3", "Store_4", 
                      "Store_5", "Store_6", "Store_7", "Store_8", "Store_9", 
                      "Tag", "Vector", "Do_Lp", "Identify_Lp", "Show", "Evaluate_Lp", 
                      "Tail", "Head", "Or_op", "And_op", "Not_op", "Comma", 
                      "Complex", "Integer", "Logical", "Real", "Double_quote_string", 
                      "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", 
                      "Simple_name", "Simple_names", "Integers", "L_paren", 
                      "R_paren", "Colon", "Equ_op", "Lt_op", "Gt_op", "Leq_op", 
                      "Geq_op", "Neq_op", "Symbol_name", "SPACE", "COMMENT", 
                      "SECTION_COMMENT", "LINE_COMMENT", "SET_VARIABLE", 
                      "Abs", "Attr_properties", "Comparison_ops", "SPACE_ATTR", 
                      "Averaging_methods", "Simple_name_A", "Equ_op_P", 
                      "Potential_types", "Simple_name_P", "SPACE_POTE", 
                      "Noe_analysis", "SPACE_ANAL", "Exclude", "Include", 
                      "End_F", "Class_name", "Any_class", "SPACE_FLAG", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Simple_name_VE", "Symbol_name_VE", "Double_quote_string_VE", 
                      "SPACE_VE", "L_paren_VF", "SPACE_VF", "L_paren_VS", 
                      "R_paren_VS", "Average_VS", "Element_VS", "Max_VS", 
                      "Min_VS", "Norm_VS", "Rms_VS", "Sum_VS", "Atom_properties_VS", 
                      "SPACE_VS" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_noe_annotation = 16
    RULE_dihedral_statement = 17
    RULE_dihedral_assign = 18
    RULE_plane_statement = 19
    RULE_group_statement = 20
    RULE_harmonic_statement = 21
    RULE_harmonic_assign = 22
    RULE_sani_statement = 23
    RULE_sani_assign = 24
    RULE_coupling_statement = 25
    RULE_coup_assign = 26
    RULE_carbon_shift_statement = 27
    RULE_carbon_shift_assign = 28
    RULE_carbon_shift_rcoil = 29
    RULE_proton_shift_statement = 30
    RULE_observed = 31
    RULE_proton_shift_rcoil = 32
    RULE_proton_shift_anisotropy = 33
    RULE_proton_shift_amides = 34
    RULE_proton_shift_carbons = 35
    RULE_proton_shift_nitrogens = 36
    RULE_proton_shift_oxygens = 37
    RULE_proton_shift_ring_atoms = 38
    RULE_proton_shift_alphas_and_amides = 39
    RULE_conformation_statement = 40
    RULE_conf_assign = 41
    RULE_diffusion_statement = 42
    RULE_dani_assign = 43
    RULE_one_bond_coupling_statement = 44
    RULE_one_bond_assign = 45
    RULE_angle_db_statement = 46
    RULE_angle_db_assign = 47
    RULE_selection = 48
    RULE_selection_expression = 49
    RULE_term = 50
    RULE_factor = 51
    RULE_number = 52
    RULE_number_f = 53
    RULE_number_s = 54
    RULE_number_a = 55
    RULE_flag_statement = 56
    RULE_vector_statement = 57
    RULE_vector_mode = 58
    RULE_vector_expression = 59
    RULE_vector_operation = 60
    RULE_vflc = 61
    RULE_vector_func_call = 62
    RULE_vector_show_property = 63
    RULE_evaluate_statement = 64
    RULE_evaluate_operation = 65

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "plane_statement", 
                   "group_statement", "harmonic_statement", "harmonic_assign", 
                   "sani_statement", "sani_assign", "coupling_statement", 
                   "coup_assign", "carbon_shift_statement", "carbon_shift_assign", 
                   "carbon_shift_rcoil", "proton_shift_statement", "observed", 
                   "proton_shift_rcoil", "proton_shift_anisotropy", "proton_shift_amides", 
                   "proton_shift_carbons", "proton_shift_nitrogens", "proton_shift_oxygens", 
                   "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s", "number_a", "flag_statement", "vector_statement", 
                   "vector_mode", "vector_expression", "vector_operation", 
                   "vflc", "vector_func_call", "vector_show_property", "evaluate_statement", 
                   "evaluate_operation" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Averaging=7
    Bhig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Cutoff=39
    Cuton=40
    From=41
    To=42
    Peak=43
    Spectrum=44
    Volume=45
    Ppm1=46
    Ppm2=47
    Restraints=48
    Dihedral=49
    Nassign=50
    Print_any=51
    Plane=52
    Group=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Sanisotropy=59
    Coefficients=60
    ForceConstant=61
    Coupling=62
    Carbon=63
    Expectation=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Zero=68
    Proton=69
    Observed=70
    Anisotropy=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Conformation=78
    Compressed=79
    Phase=80
    Size=81
    Dimensions=82
    Danisotropy=83
    OneBond=84
    AngleDb=85
    DerivFlag=86
    Angle_or_Dihedral=87
    Flags=88
    All=89
    Around=90
    Atom=91
    Attribute=92
    BondedTo=93
    ByGroup=94
    ByRes=95
    Chemical=96
    Fbox=97
    Hydrogen=98
    Id=99
    Known=100
    Name=101
    NONE=102
    Point=103
    Cut=104
    Previous=105
    Pseudo=106
    Residue=107
    Resname=108
    Saround=109
    SegIdentifier=110
    Sfbox=111
    Store_1=112
    Store_2=113
    Store_3=114
    Store_4=115
    Store_5=116
    Store_6=117
    Store_7=118
    Store_8=119
    Store_9=120
    Tag=121
    Vector=122
    Do_Lp=123
    Identify_Lp=124
    Show=125
    Evaluate_Lp=126
    Tail=127
    Head=128
    Or_op=129
    And_op=130
    Not_op=131
    Comma=132
    Complex=133
    Integer=134
    Logical=135
    Real=136
    Double_quote_string=137
    SHARP_COMMENT=138
    EXCLM_COMMENT=139
    SMCLN_COMMENT=140
    Simple_name=141
    Simple_names=142
    Integers=143
    L_paren=144
    R_paren=145
    Colon=146
    Equ_op=147
    Lt_op=148
    Gt_op=149
    Leq_op=150
    Geq_op=151
    Neq_op=152
    Symbol_name=153
    SPACE=154
    COMMENT=155
    SECTION_COMMENT=156
    LINE_COMMENT=157
    SET_VARIABLE=158
    Abs=159
    Attr_properties=160
    Comparison_ops=161
    SPACE_ATTR=162
    Averaging_methods=163
    Simple_name_A=164
    Equ_op_P=165
    Potential_types=166
    Simple_name_P=167
    SPACE_POTE=168
    Noe_analysis=169
    SPACE_ANAL=170
    Exclude=171
    Include=172
    End_F=173
    Class_name=174
    Any_class=175
    SPACE_FLAG=176
    R_paren_VE=177
    Equ_op_VE=178
    Add_op_VE=179
    Sub_op_VE=180
    Mul_op_VE=181
    Div_op_VE=182
    Exp_op_VE=183
    Comma_VE=184
    Integer_VE=185
    Real_VE=186
    Atom_properties_VE=187
    Abs_VE=188
    Acos_VE=189
    Asin_VE=190
    Cos_VE=191
    Decode_VE=192
    Encode_VE=193
    Exp_VE=194
    Gauss_VE=195
    Heavy_VE=196
    Int_VE=197
    Log10_VE=198
    Log_VE=199
    Max_VE=200
    Maxw_VE=201
    Min_VE=202
    Mod_VE=203
    Norm_VE=204
    Random_VE=205
    Sign_VE=206
    Sin_VE=207
    Sqrt_VE=208
    Tan_VE=209
    Simple_name_VE=210
    Symbol_name_VE=211
    Double_quote_string_VE=212
    SPACE_VE=213
    L_paren_VF=214
    SPACE_VF=215
    L_paren_VS=216
    R_paren_VS=217
    Average_VS=218
    Element_VS=219
    Max_VS=220
    Min_VS=221
    Norm_VS=222
    Rms_VS=223
    Sum_VS=224
    Atom_properties_VS=225
    SPACE_VS=226

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 156
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Assign) | (1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Dihedral) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Plane) | (1 << CnsMRParser.Group) | (1 << CnsMRParser.Harmonic) | (1 << CnsMRParser.Sanisotropy) | (1 << CnsMRParser.Coupling) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CnsMRParser.Proton - 69)) | (1 << (CnsMRParser.Conformation - 69)) | (1 << (CnsMRParser.Danisotropy - 69)) | (1 << (CnsMRParser.OneBond - 69)) | (1 << (CnsMRParser.AngleDb - 69)) | (1 << (CnsMRParser.Flags - 69)) | (1 << (CnsMRParser.Vector - 69)) | (1 << (CnsMRParser.Evaluate_Lp - 69)))) != 0):
                self.state = 154
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 132
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 133
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 134
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 135
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 136
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 137
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 138
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 139
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 140
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 141
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 142
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 143
                    self.angle_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 144
                    self.flag_statement()
                    pass

                elif la_ == 14:
                    self.state = 145
                    self.vector_statement()
                    pass

                elif la_ == 15:
                    self.state = 146
                    self.evaluate_statement()
                    pass

                elif la_ == 16:
                    self.state = 147
                    self.noe_assign()
                    pass

                elif la_ == 17:
                    self.state = 148
                    self.dihedral_assign()
                    pass

                elif la_ == 18:
                    self.state = 149
                    self.sani_assign()
                    pass

                elif la_ == 19:
                    self.state = 150
                    self.plane_statement()
                    pass

                elif la_ == 20:
                    self.state = 151
                    self.harmonic_assign()
                    pass

                elif la_ == 21:
                    self.state = 152
                    self.coup_assign()
                    pass

                elif la_ == 22:
                    self.state = 153
                    self.carbon_shift_assign()
                    pass


                self.state = 158
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 159
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 161
            self.match(CnsMRParser.Noe)
            self.state = 165
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 162
                    self.noe_statement() 
                self.state = 167
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 168
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 171
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 170
                self.match(CnsMRParser.Restraints)


            self.state = 173
            self.match(CnsMRParser.Dihedral)
            self.state = 177
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Scale) | (1 << CnsMRParser.Nassign) | (1 << CnsMRParser.Print_any))) != 0):
                self.state = 174
                self.dihedral_statement()
                self.state = 179
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 180
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 182
                self.match(CnsMRParser.Restraints)


            self.state = 185
            self.match(CnsMRParser.Plane)
            self.state = 189
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0):
                self.state = 186
                self.plane_statement()
                self.state = 191
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 192
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 194
                self.match(CnsMRParser.Restraints)


            self.state = 197
            self.match(CnsMRParser.Harmonic)
            self.state = 201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Exponent or _la==CnsMRParser.Normal:
                self.state = 198
                self.harmonic_statement()
                self.state = 203
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 204
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self.match(CnsMRParser.Sanisotropy)
            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 207
                self.sani_statement()
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 213
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.match(CnsMRParser.Coupling)
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 216
                self.coupling_statement()
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 222
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(CnsMRParser.Carbon)
            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.ForceConstant - 5)) | (1 << (CnsMRParser.Expectation - 5)) | (1 << (CnsMRParser.PhiStep - 5)) | (1 << (CnsMRParser.PsiStep - 5)) | (1 << (CnsMRParser.Rcoil - 5)) | (1 << (CnsMRParser.Zero - 5)))) != 0):
                self.state = 225
                self.carbon_shift_statement()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 231
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(CnsMRParser.Proton)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Classification) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CnsMRParser.Rcoil - 67)) | (1 << (CnsMRParser.Observed - 67)) | (1 << (CnsMRParser.Anisotropy - 67)) | (1 << (CnsMRParser.Amides - 67)) | (1 << (CnsMRParser.Nitrogens - 67)) | (1 << (CnsMRParser.Oxygens - 67)) | (1 << (CnsMRParser.RingAtoms - 67)) | (1 << (CnsMRParser.AlphasAndAmides - 67)) | (1 << (CnsMRParser.Error - 67)))) != 0):
                self.state = 234
                self.proton_shift_statement()
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 240
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def conformation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(CnsMRParser.Conformation)
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Compressed - 64)) | (1 << (CnsMRParser.Phase - 64)) | (1 << (CnsMRParser.Size - 64)))) != 0):
                self.state = 243
                self.conformation_statement()
                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 249
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(CnsMRParser.Danisotropy)
            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 252
                self.diffusion_statement()
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 258
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.match(CnsMRParser.OneBond)
            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 261
                self.one_bond_coupling_statement()
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 267
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.match(CnsMRParser.AngleDb)
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Size - 64)) | (1 << (CnsMRParser.DerivFlag - 64)))) != 0):
                self.state = 270
                self.angle_db_statement()
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 276
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def noe_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Averaging(self):
            return self.getToken(CnsMRParser.Averaging, 0)

        def Simple_name_A(self):
            return self.getToken(CnsMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(CnsMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(CnsMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(CnsMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 406
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 278
                self.match(CnsMRParser.Analysis)
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 279
                    self.match(CnsMRParser.Equ_op)


                self.state = 282
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 283
                self.noe_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 284
                self.match(CnsMRParser.Asymptote)
                self.state = 285
                self.match(CnsMRParser.Simple_name)
                self.state = 286
                self.number_s()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 287
                self.match(CnsMRParser.Averaging)
                self.state = 288
                self.match(CnsMRParser.Simple_name_A)
                self.state = 289
                self.match(CnsMRParser.Averaging_methods)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 290
                self.match(CnsMRParser.Bhig)
                self.state = 291
                self.match(CnsMRParser.Simple_name)
                self.state = 292
                self.number_s()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 293
                self.match(CnsMRParser.Ceiling)
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 294
                    self.match(CnsMRParser.Equ_op)


                self.state = 297
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 298
                self.match(CnsMRParser.Classification)
                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 299
                    self.match(CnsMRParser.Equ_op)


                self.state = 302
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 303
                self.match(CnsMRParser.CountViol)
                self.state = 304
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 305
                self.match(CnsMRParser.Cv)
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 306
                    self.match(CnsMRParser.Equ_op)


                self.state = 309
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 310
                self.match(CnsMRParser.Den)
                self.state = 311
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 312
                self.match(CnsMRParser.Den)
                self.state = 313
                self.match(CnsMRParser.Update)
                self.state = 314
                self.match(CnsMRParser.Gamma)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 315
                    self.match(CnsMRParser.Equ_op)


                self.state = 318
                self.number_s()
                self.state = 319
                self.match(CnsMRParser.Kappa)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 320
                    self.match(CnsMRParser.Equ_op)


                self.state = 323
                self.number_s()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 325
                self.match(CnsMRParser.Distribute)
                self.state = 326
                self.match(CnsMRParser.Simple_name)
                self.state = 327
                self.match(CnsMRParser.Simple_name)
                self.state = 328
                self.number_s()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 329
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 334
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 335
                self.match(CnsMRParser.End)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 336
                self.match(CnsMRParser.Monomers)
                self.state = 337
                self.match(CnsMRParser.Simple_name)
                self.state = 338
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 339
                self.match(CnsMRParser.Ncount)
                self.state = 340
                self.match(CnsMRParser.Simple_name)
                self.state = 341
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 342
                self.match(CnsMRParser.Nrestraints)
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 343
                    self.match(CnsMRParser.Equ_op)


                self.state = 346
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 347
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 348
                self.match(CnsMRParser.Partition)
                self.state = 350
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 349
                    self.match(CnsMRParser.Equ_op)


                self.state = 352
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 353
                self.match(CnsMRParser.Potential)
                self.state = 354
                self.match(CnsMRParser.Simple_name_P)
                self.state = 355
                self.match(CnsMRParser.Potential_types)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 356
                self.match(CnsMRParser.Predict)
                self.state = 357
                self.predict_statement()
                self.state = 358
                self.match(CnsMRParser.End)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 360
                self.match(CnsMRParser.Print)
                self.state = 361
                self.match(CnsMRParser.Threshold)
                self.state = 363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 362
                    self.match(CnsMRParser.Equ_op)


                self.state = 365
                self.number_s()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 366
                self.match(CnsMRParser.Raverage)
                self.state = 370
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 367
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 372
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 373
                self.match(CnsMRParser.End)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 374
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 375
                self.match(CnsMRParser.Rswitch)
                self.state = 376
                self.match(CnsMRParser.Simple_name)
                self.state = 377
                self.number_s()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 378
                self.match(CnsMRParser.Scale)
                self.state = 379
                self.match(CnsMRParser.Simple_name)
                self.state = 380
                self.number_s()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 381
                self.match(CnsMRParser.SoExponent)
                self.state = 382
                self.match(CnsMRParser.Simple_name)
                self.state = 383
                self.number_s()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 384
                self.match(CnsMRParser.SqConstant)
                self.state = 385
                self.match(CnsMRParser.Simple_name)
                self.state = 386
                self.number_s()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 387
                self.match(CnsMRParser.SqExponent)
                self.state = 388
                self.match(CnsMRParser.Simple_name)
                self.state = 389
                self.number_s()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 390
                self.match(CnsMRParser.SqOffset)
                self.state = 391
                self.match(CnsMRParser.Simple_name)
                self.state = 392
                self.number_s()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 393
                self.match(CnsMRParser.Taverage)
                self.state = 397
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 394
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 399
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                self.state = 400
                self.match(CnsMRParser.End)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 401
                self.match(CnsMRParser.Temperature)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 402
                    self.match(CnsMRParser.Equ_op)


                self.state = 405
                self.number_s()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Assign)
            else:
                return self.getToken(CnsMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(CnsMRParser.Assign)
            self.state = 409
            self.selection()
            self.state = 410
            self.selection()
            self.state = 411
            self.number()
            self.state = 413
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 412
                self.number()


            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (CnsMRParser.Integer - 134)) | (1 << (CnsMRParser.Real - 134)) | (1 << (CnsMRParser.Symbol_name - 134)))) != 0):
                self.state = 415
                self.number()


            self.state = 421
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 418
                    self.noe_annotation() 
                self.state = 423
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 424
                self.match(CnsMRParser.Or_op)
                self.state = 426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Assign:
                    self.state = 425
                    self.match(CnsMRParser.Assign)


                self.state = 428
                self.selection()
                self.state = 429
                self.selection()
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 450
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.match(CnsMRParser.Cutoff)
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 437
                    self.match(CnsMRParser.Equ_op)


                self.state = 440
                self.number_s()
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.match(CnsMRParser.Cuton)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 442
                    self.match(CnsMRParser.Equ_op)


                self.state = 445
                self.number_s()
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 446
                self.match(CnsMRParser.From)
                self.state = 447
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 448
                self.match(CnsMRParser.To)
                self.state = 449
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(CnsMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(CnsMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(CnsMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(CnsMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(CnsMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(CnsMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = CnsMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 487
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 452
                self.match(CnsMRParser.Peak)
                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 453
                    self.match(CnsMRParser.Equ_op)


                self.state = 456
                self.number_a()
                pass
            elif token in [CnsMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 457
                self.match(CnsMRParser.Spectrum)
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 458
                    self.match(CnsMRParser.Equ_op)


                self.state = 461
                self.number_a()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 462
                self.match(CnsMRParser.Weight)
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 463
                    self.match(CnsMRParser.Equ_op)


                self.state = 466
                self.number_a()
                pass
            elif token in [CnsMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 467
                self.match(CnsMRParser.Volume)
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 468
                    self.match(CnsMRParser.Equ_op)


                self.state = 471
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 472
                self.match(CnsMRParser.Ppm1)
                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 473
                    self.match(CnsMRParser.Equ_op)


                self.state = 476
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 477
                self.match(CnsMRParser.Ppm2)
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 478
                    self.match(CnsMRParser.Equ_op)


                self.state = 481
                self.number_a()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 482
                self.match(CnsMRParser.Cv)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 483
                    self.match(CnsMRParser.Equ_op)


                self.state = 486
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,0)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 489
                self.dihedral_assign()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 490
                self.match(CnsMRParser.Cv)
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 491
                    self.match(CnsMRParser.Equ_op)


                self.state = 494
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 495
                self.match(CnsMRParser.Nassign)
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 496
                    self.match(CnsMRParser.Equ_op)


                self.state = 499
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 4)
                self.state = 500
                self.match(CnsMRParser.Partition)
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 501
                    self.match(CnsMRParser.Equ_op)


                self.state = 504
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 505
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 506
                self.match(CnsMRParser.Scale)
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 507
                    self.match(CnsMRParser.Equ_op)


                self.state = 510
                self.number_s()
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 7)
                self.state = 511
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(CnsMRParser.Assign)
            self.state = 515
            self.selection()
            self.state = 516
            self.selection()
            self.state = 517
            self.selection()
            self.state = 518
            self.selection()
            self.state = 519
            self.number()
            self.state = 520
            self.number()
            self.state = 521
            self.number()
            self.state = 522
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_plane_statement)
        self._la = 0 # Token type
        try:
            self.state = 534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 524
                self.match(CnsMRParser.Group)
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Selection or _la==CnsMRParser.Weight:
                    self.state = 525
                    self.group_statement()
                    self.state = 530
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 531
                self.match(CnsMRParser.End)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 532
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 533
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 536
                self.match(CnsMRParser.Selection)
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 537
                    self.match(CnsMRParser.Equ_op)


                self.state = 540
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 541
                self.match(CnsMRParser.Weight)
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 542
                    self.match(CnsMRParser.Equ_op)


                self.state = 545
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 587
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 548
                self.match(CnsMRParser.Exponent)
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 549
                    self.match(CnsMRParser.Equ_op)


                self.state = 552
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 553
                self.match(CnsMRParser.Normal)
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 554
                    self.match(CnsMRParser.Equ_op)


                self.state = 557
                self.match(CnsMRParser.L_paren)
                self.state = 583
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integer, CnsMRParser.Real, CnsMRParser.Symbol_name]:
                    self.state = 558
                    self.number_s()
                    self.state = 560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 559
                        self.match(CnsMRParser.Comma)


                    self.state = 562
                    self.number_s()
                    self.state = 564
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 563
                        self.match(CnsMRParser.Comma)


                    self.state = 566
                    self.number_s()
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 568
                    self.match(CnsMRParser.Tail)
                    self.state = 570
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 569
                        self.match(CnsMRParser.Equ_op)


                    self.state = 572
                    self.selection()
                    self.state = 574
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 573
                        self.match(CnsMRParser.Comma)


                    self.state = 581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 576
                        self.match(CnsMRParser.Head)
                        self.state = 578
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CnsMRParser.Equ_op:
                            self.state = 577
                            self.match(CnsMRParser.Equ_op)


                        self.state = 580
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 585
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = CnsMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 589
            self.match(CnsMRParser.Assign)
            self.state = 590
            self.selection()
            self.state = 591
            self.number()
            self.state = 592
            self.number()
            self.state = 593
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 625
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 595
                self.sani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 596
                self.match(CnsMRParser.Classification)
                self.state = 598
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 597
                    self.match(CnsMRParser.Equ_op)


                self.state = 600
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 601
                self.match(CnsMRParser.Coefficients)
                self.state = 602
                self.number_s()
                self.state = 603
                self.number_s()
                self.state = 604
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 606
                self.match(CnsMRParser.ForceConstant)
                self.state = 608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 607
                    self.match(CnsMRParser.Equ_op)


                self.state = 610
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 611
                self.match(CnsMRParser.Nrestraints)
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 612
                    self.match(CnsMRParser.Equ_op)


                self.state = 615
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 616
                self.match(CnsMRParser.Potential)
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 617
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 620
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 621
                self.match(CnsMRParser.Print)
                self.state = 622
                self.match(CnsMRParser.Threshold)
                self.state = 623
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 624
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.match(CnsMRParser.Assign)
            self.state = 628
            self.selection()
            self.state = 629
            self.selection()
            self.state = 630
            self.selection()
            self.state = 631
            self.selection()
            self.state = 632
            self.selection()
            self.state = 633
            self.selection()
            self.state = 634
            self.number()
            self.state = 636
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 635
                self.number()


            self.state = 639
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (CnsMRParser.Integer - 134)) | (1 << (CnsMRParser.Real - 134)) | (1 << (CnsMRParser.Symbol_name - 134)))) != 0):
                self.state = 638
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 690
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 641
                self.coup_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 642
                self.match(CnsMRParser.Classification)
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 643
                    self.match(CnsMRParser.Equ_op)


                self.state = 646
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 647
                self.match(CnsMRParser.Coefficients)
                self.state = 648
                self.number_s()
                self.state = 649
                self.number_s()
                self.state = 650
                self.number_s()
                self.state = 651
                self.number_s()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 653
                self.match(CnsMRParser.Cv)
                self.state = 655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 654
                    self.match(CnsMRParser.Equ_op)


                self.state = 657
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 658
                self.match(CnsMRParser.ForceConstant)
                self.state = 659
                self.number_s()
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (CnsMRParser.Integer - 134)) | (1 << (CnsMRParser.Real - 134)) | (1 << (CnsMRParser.Symbol_name - 134)))) != 0):
                    self.state = 660
                    self.number_s()


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 663
                self.match(CnsMRParser.Nrestraints)
                self.state = 665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 664
                    self.match(CnsMRParser.Equ_op)


                self.state = 667
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 668
                self.match(CnsMRParser.Partition)
                self.state = 670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 669
                    self.match(CnsMRParser.Equ_op)


                self.state = 672
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 673
                self.match(CnsMRParser.Potential)
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 674
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 677
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 678
                self.match(CnsMRParser.Print)
                self.state = 679
                self.match(CnsMRParser.Threshold)
                self.state = 680
                self.number_s()
                self.state = 687
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 681
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 682
                    self.match(CnsMRParser.Classification)
                    self.state = 684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 683
                        self.match(CnsMRParser.Equ_op)


                    self.state = 686
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 689
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 692
            self.match(CnsMRParser.Assign)
            self.state = 693
            self.selection()
            self.state = 694
            self.selection()
            self.state = 695
            self.selection()
            self.state = 696
            self.selection()
            self.state = 702
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 697
                self.selection()
                self.state = 698
                self.selection()
                self.state = 699
                self.selection()
                self.state = 700
                self.selection()


            self.state = 704
            self.number()
            self.state = 705
            self.number()
            self.state = 709
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (CnsMRParser.Integer - 134)) | (1 << (CnsMRParser.Real - 134)) | (1 << (CnsMRParser.Symbol_name - 134)))) != 0):
                self.state = 706
                self.number()
                self.state = 707
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 755
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 711
                self.carbon_shift_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 712
                self.match(CnsMRParser.Classification)
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 713
                    self.match(CnsMRParser.Equ_op)


                self.state = 716
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 717
                self.match(CnsMRParser.Expectation)
                self.state = 718
                self.match(CnsMRParser.Integer)
                self.state = 719
                self.match(CnsMRParser.Integer)
                self.state = 720
                self.number_s()
                self.state = 721
                self.number_s()
                self.state = 722
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 724
                self.match(CnsMRParser.ForceConstant)
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 725
                    self.match(CnsMRParser.Equ_op)


                self.state = 728
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 729
                self.match(CnsMRParser.Nrestraints)
                self.state = 731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 730
                    self.match(CnsMRParser.Equ_op)


                self.state = 733
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 734
                self.match(CnsMRParser.PhiStep)
                self.state = 736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 735
                    self.match(CnsMRParser.Equ_op)


                self.state = 738
                self.number_s()
                pass
            elif token in [CnsMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 739
                self.match(CnsMRParser.PsiStep)
                self.state = 741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 740
                    self.match(CnsMRParser.Equ_op)


                self.state = 743
                self.number_s()
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 744
                self.match(CnsMRParser.Potential)
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 745
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 748
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 749
                self.match(CnsMRParser.Print)
                self.state = 750
                self.match(CnsMRParser.Threshold)
                self.state = 751
                self.number_s()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 752
                self.carbon_shift_rcoil()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 753
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 754
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 757
            self.match(CnsMRParser.Assign)
            self.state = 758
            self.selection()
            self.state = 759
            self.selection()
            self.state = 760
            self.selection()
            self.state = 761
            self.selection()
            self.state = 762
            self.selection()
            self.state = 763
            self.number()
            self.state = 764
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(CnsMRParser.Rcoil)
            self.state = 767
            self.selection()
            self.state = 768
            self.number_s()
            self.state = 769
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(CnsMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 811
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 771
                self.observed()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 772
                self.proton_shift_rcoil()
                pass
            elif token in [CnsMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 773
                self.proton_shift_anisotropy()
                pass
            elif token in [CnsMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 774
                self.proton_shift_amides()
                pass
            elif token in [CnsMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 775
                self.proton_shift_carbons()
                pass
            elif token in [CnsMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 776
                self.proton_shift_nitrogens()
                pass
            elif token in [CnsMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 777
                self.proton_shift_oxygens()
                pass
            elif token in [CnsMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 778
                self.proton_shift_ring_atoms()
                pass
            elif token in [CnsMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 779
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 780
                self.match(CnsMRParser.Classification)
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 781
                    self.match(CnsMRParser.Equ_op)


                self.state = 784
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 785
                self.match(CnsMRParser.Error)
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 786
                    self.match(CnsMRParser.Equ_op)


                self.state = 789
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 12)
                self.state = 790
                self.match(CnsMRParser.ForceConstant)
                self.state = 791
                self.number_s()
                self.state = 793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (CnsMRParser.Integer - 134)) | (1 << (CnsMRParser.Real - 134)) | (1 << (CnsMRParser.Symbol_name - 134)))) != 0):
                    self.state = 792
                    self.number_s()


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 795
                self.match(CnsMRParser.Potential)
                self.state = 796
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 797
                self.match(CnsMRParser.Print)
                self.state = 798
                self.match(CnsMRParser.Threshold)
                self.state = 799
                self.number_s()
                self.state = 806
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 800
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 801
                    self.match(CnsMRParser.Classification)
                    self.state = 803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 802
                        self.match(CnsMRParser.Equ_op)


                    self.state = 805
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 808
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 810
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(CnsMRParser.Observed)
            self.state = 814
            self.selection()
            self.state = 816
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 815
                self.selection()


            self.state = 818
            self.number_s()
            self.state = 820
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (CnsMRParser.Integer - 134)) | (1 << (CnsMRParser.Real - 134)) | (1 << (CnsMRParser.Symbol_name - 134)))) != 0):
                self.state = 819
                self.number_s()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(CnsMRParser.Rcoil)
            self.state = 823
            self.selection()
            self.state = 824
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 826
            self.match(CnsMRParser.Anisotropy)
            self.state = 827
            self.selection()
            self.state = 828
            self.selection()
            self.state = 829
            self.selection()
            self.state = 830
            self.match(CnsMRParser.Simple_name)
            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 831
                self.match(CnsMRParser.Logical)


            self.state = 834
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 836
            self.match(CnsMRParser.Amides)
            self.state = 837
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(CnsMRParser.Carbon)
            self.state = 840
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.match(CnsMRParser.Nitrogens)
            self.state = 843
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(CnsMRParser.Oxygens)
            self.state = 846
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(CnsMRParser.RingAtoms)
            self.state = 849
            self.match(CnsMRParser.Simple_name)
            self.state = 850
            self.selection()
            self.state = 851
            self.selection()
            self.state = 852
            self.selection()
            self.state = 853
            self.selection()
            self.state = 854
            self.selection()
            self.state = 856
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 855
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 859
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 944
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 861
                self.conf_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 862
                self.match(CnsMRParser.Classification)
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 863
                    self.match(CnsMRParser.Equ_op)


                self.state = 866
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 867
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 868
                self.match(CnsMRParser.Expectation)
                self.state = 869
                self.match(CnsMRParser.Integer)
                self.state = 871
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 870
                    self.match(CnsMRParser.Integer)


                self.state = 874
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 873
                    self.match(CnsMRParser.Integer)


                self.state = 877
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 876
                    self.match(CnsMRParser.Integer)


                self.state = 879
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 880
                self.match(CnsMRParser.Error)
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 881
                    self.match(CnsMRParser.Equ_op)


                self.state = 884
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 885
                self.match(CnsMRParser.ForceConstant)
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 886
                    self.match(CnsMRParser.Equ_op)


                self.state = 889
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 890
                self.match(CnsMRParser.Nrestraints)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 891
                    self.match(CnsMRParser.Equ_op)


                self.state = 894
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 895
                self.match(CnsMRParser.Phase)
                self.state = 896
                self.match(CnsMRParser.Integer)
                self.state = 897
                self.match(CnsMRParser.Integer)
                self.state = 898
                self.match(CnsMRParser.Integer)
                self.state = 902
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 899
                    self.match(CnsMRParser.Integer)
                    self.state = 900
                    self.match(CnsMRParser.Integer)
                    self.state = 901
                    self.match(CnsMRParser.Integer)


                self.state = 907
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 904
                    self.match(CnsMRParser.Integer)
                    self.state = 905
                    self.match(CnsMRParser.Integer)
                    self.state = 906
                    self.match(CnsMRParser.Integer)


                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 909
                    self.match(CnsMRParser.Integer)
                    self.state = 910
                    self.match(CnsMRParser.Integer)
                    self.state = 911
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 914
                self.match(CnsMRParser.Potential)
                self.state = 916
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 915
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 918
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 919
                self.match(CnsMRParser.Print)
                self.state = 920
                self.match(CnsMRParser.Threshold)
                self.state = 921
                self.number_s()
                self.state = 928
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 922
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 923
                    self.match(CnsMRParser.Classification)
                    self.state = 925
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 924
                        self.match(CnsMRParser.Equ_op)


                    self.state = 927
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 930
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 931
                self.match(CnsMRParser.Size)
                self.state = 932
                self.match(CnsMRParser.Dimensions)
                self.state = 933
                self.match(CnsMRParser.Integer)
                self.state = 935
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 934
                    self.match(CnsMRParser.Integer)


                self.state = 938
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 937
                    self.match(CnsMRParser.Integer)


                self.state = 941
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 940
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 943
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 946
            self.match(CnsMRParser.Assign)
            self.state = 947
            self.selection()
            self.state = 948
            self.selection()
            self.state = 949
            self.selection()
            self.state = 950
            self.selection()
            self.state = 956
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 951
                self.selection()
                self.state = 952
                self.selection()
                self.state = 953
                self.selection()
                self.state = 954
                self.selection()


            self.state = 963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 958
                self.selection()
                self.state = 959
                self.selection()
                self.state = 960
                self.selection()
                self.state = 961
                self.selection()


            self.state = 970
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 965
                self.selection()
                self.state = 966
                self.selection()
                self.state = 967
                self.selection()
                self.state = 968
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1004
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 972
                self.dani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 973
                self.match(CnsMRParser.Classification)
                self.state = 975
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 974
                    self.match(CnsMRParser.Equ_op)


                self.state = 977
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 978
                self.match(CnsMRParser.Coefficients)
                self.state = 979
                self.number_s()
                self.state = 980
                self.number_s()
                self.state = 981
                self.number_s()
                self.state = 982
                self.number_s()
                self.state = 983
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 985
                self.match(CnsMRParser.ForceConstant)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 986
                    self.match(CnsMRParser.Equ_op)


                self.state = 989
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 990
                self.match(CnsMRParser.Nrestraints)
                self.state = 992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 991
                    self.match(CnsMRParser.Equ_op)


                self.state = 994
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 995
                self.match(CnsMRParser.Potential)
                self.state = 997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 996
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 999
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1000
                self.match(CnsMRParser.Print)
                self.state = 1001
                self.match(CnsMRParser.Threshold)
                self.state = 1002
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1003
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self.match(CnsMRParser.Assign)
            self.state = 1007
            self.selection()
            self.state = 1008
            self.selection()
            self.state = 1009
            self.selection()
            self.state = 1010
            self.selection()
            self.state = 1011
            self.selection()
            self.state = 1012
            self.selection()
            self.state = 1013
            self.number()
            self.state = 1014
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1016
                self.one_bond_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1017
                self.match(CnsMRParser.Classification)
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1018
                    self.match(CnsMRParser.Equ_op)


                self.state = 1021
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1022
                self.match(CnsMRParser.Coefficients)
                self.state = 1023
                self.number_s()
                self.state = 1024
                self.number_s()
                self.state = 1025
                self.number_s()
                self.state = 1026
                self.number_s()
                self.state = 1027
                self.number_s()
                self.state = 1028
                self.number_s()
                self.state = 1029
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1031
                self.match(CnsMRParser.ForceConstant)
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1032
                    self.match(CnsMRParser.Equ_op)


                self.state = 1035
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1036
                self.match(CnsMRParser.Nrestraints)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1037
                    self.match(CnsMRParser.Equ_op)


                self.state = 1040
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1041
                self.match(CnsMRParser.Potential)
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1042
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1045
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1046
                self.match(CnsMRParser.Print)
                self.state = 1047
                self.match(CnsMRParser.Threshold)
                self.state = 1048
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1049
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(CnsMRParser.Assign)
            self.state = 1053
            self.selection()
            self.state = 1054
            self.selection()
            self.state = 1055
            self.selection()
            self.state = 1056
            self.selection()
            self.state = 1057
            self.selection()
            self.state = 1058
            self.selection()
            self.state = 1059
            self.selection()
            self.state = 1060
            self.selection()
            self.state = 1061
            self.number()
            self.state = 1062
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(CnsMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1116
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1064
                self.angle_db_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1065
                self.match(CnsMRParser.Classification)
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1066
                    self.match(CnsMRParser.Equ_op)


                self.state = 1069
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1070
                self.match(CnsMRParser.DerivFlag)
                self.state = 1072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1071
                    self.match(CnsMRParser.Equ_op)


                self.state = 1074
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1075
                self.match(CnsMRParser.Expectation)
                self.state = 1076
                self.match(CnsMRParser.Integer)
                self.state = 1077
                self.match(CnsMRParser.Integer)
                self.state = 1078
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1079
                self.match(CnsMRParser.Error)
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1080
                    self.match(CnsMRParser.Equ_op)


                self.state = 1083
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1084
                self.match(CnsMRParser.ForceConstant)
                self.state = 1086
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1085
                    self.match(CnsMRParser.Equ_op)


                self.state = 1088
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1089
                self.match(CnsMRParser.Nrestraints)
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1090
                    self.match(CnsMRParser.Equ_op)


                self.state = 1093
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1094
                self.match(CnsMRParser.Potential)
                self.state = 1096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1095
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1098
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1099
                self.match(CnsMRParser.Print)
                self.state = 1100
                self.match(CnsMRParser.Threshold)
                self.state = 1101
                self.number_s()
                self.state = 1108
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 1102
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 1103
                    self.match(CnsMRParser.Classification)
                    self.state = 1105
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1104
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1107
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1110
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1111
                self.match(CnsMRParser.Size)
                self.state = 1112
                self.match(CnsMRParser.Angle_or_Dihedral)
                self.state = 1113
                self.match(CnsMRParser.Integer)
                self.state = 1114
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1115
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1118
            self.match(CnsMRParser.Assign)
            self.state = 1119
            self.selection()
            self.state = 1120
            self.selection()
            self.state = 1121
            self.selection()
            self.state = 1122
            self.selection()
            self.state = 1123
            self.selection()
            self.state = 1124
            self.selection()
            self.state = 1125
            self.selection()
            self.state = 1126
            self.selection()
            self.state = 1127
            self.selection()
            self.state = 1128
            self.selection()
            self.state = 1129
            self.selection()
            self.state = 1131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1130
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1133
            self.match(CnsMRParser.L_paren)
            self.state = 1134
            self.selection_expression()
            self.state = 1135
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.term()
            self.state = 1142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 1138
                self.match(CnsMRParser.Or_op)
                self.state = 1139
                self.term()
                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self.factor(0)
            self.state = 1150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1146
                self.match(CnsMRParser.And_op)
                self.state = 1147
                self.factor(0)
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store_1(self):
            return self.getToken(CnsMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(CnsMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(CnsMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(CnsMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(CnsMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(CnsMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(CnsMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(CnsMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(CnsMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,163,self._ctx)
            if la_ == 1:
                self.state = 1154
                self.match(CnsMRParser.L_paren)
                self.state = 1155
                self.selection_expression()
                self.state = 1156
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1158
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1159
                self.match(CnsMRParser.Atom)
                self.state = 1160
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1161
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1162
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1163
                self.match(CnsMRParser.Attribute)
                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1164
                    self.match(CnsMRParser.Abs)


                self.state = 1167
                self.match(CnsMRParser.Attr_properties)
                self.state = 1168
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1169
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1170
                self.match(CnsMRParser.BondedTo)
                self.state = 1171
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1172
                self.match(CnsMRParser.ByGroup)
                self.state = 1173
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1174
                self.match(CnsMRParser.ByRes)
                self.state = 1175
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1176
                self.match(CnsMRParser.Chemical)
                self.state = 1183
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1177
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1178
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1181
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                    if la_ == 1:
                        self.state = 1179
                        self.match(CnsMRParser.Colon)
                        self.state = 1180
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1185
                self.match(CnsMRParser.Fbox)
                self.state = 1186
                self.number_f()
                self.state = 1187
                self.number_f()
                self.state = 1188
                self.number_f()
                self.state = 1189
                self.number_f()
                self.state = 1190
                self.number_f()
                self.state = 1191
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1193
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1194
                self.match(CnsMRParser.Id)
                self.state = 1195
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1196
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1197
                self.match(CnsMRParser.Name)
                self.state = 1209
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1198
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1199
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1202
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                    if la_ == 1:
                        self.state = 1200
                        self.match(CnsMRParser.Colon)
                        self.state = 1201
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1204
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1207
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                    if la_ == 1:
                        self.state = 1205
                        self.match(CnsMRParser.Colon)
                        self.state = 1206
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1211
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1212
                self.match(CnsMRParser.Not_op)
                self.state = 1213
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1214
                self.match(CnsMRParser.Point)
                self.state = 1215
                self.match(CnsMRParser.L_paren)
                self.state = 1216
                self.number_f()
                self.state = 1218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1217
                    self.match(CnsMRParser.Comma)


                self.state = 1220
                self.number_f()
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1221
                    self.match(CnsMRParser.Comma)


                self.state = 1224
                self.number_f()
                self.state = 1225
                self.match(CnsMRParser.R_paren)
                self.state = 1226
                self.match(CnsMRParser.Cut)
                self.state = 1227
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1229
                self.match(CnsMRParser.Point)
                self.state = 1230
                self.match(CnsMRParser.L_paren)
                self.state = 1231
                self.match(CnsMRParser.Tail)
                self.state = 1233
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1232
                    self.match(CnsMRParser.Equ_op)


                self.state = 1235
                self.selection()
                self.state = 1237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1236
                    self.match(CnsMRParser.Comma)


                self.state = 1244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1239
                    self.match(CnsMRParser.Head)
                    self.state = 1241
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1240
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1243
                    self.selection()


                self.state = 1246
                self.match(CnsMRParser.R_paren)
                self.state = 1247
                self.match(CnsMRParser.Cut)
                self.state = 1248
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1250
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1251
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1252
                self.match(CnsMRParser.Residue)
                self.state = 1259
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1253
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1254
                    self.match(CnsMRParser.Integer)
                    self.state = 1257
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1255
                        self.match(CnsMRParser.Colon)
                        self.state = 1256
                        self.match(CnsMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1261
                self.match(CnsMRParser.Resname)
                self.state = 1268
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1262
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1263
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1266
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        self.state = 1264
                        self.match(CnsMRParser.Colon)
                        self.state = 1265
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1270
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1282
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1271
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1272
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1275
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                    if la_ == 1:
                        self.state = 1273
                        self.match(CnsMRParser.Colon)
                        self.state = 1274
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1277
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1280
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                    if la_ == 1:
                        self.state = 1278
                        self.match(CnsMRParser.Colon)
                        self.state = 1279
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1284
                self.match(CnsMRParser.Sfbox)
                self.state = 1285
                self.number_f()
                self.state = 1286
                self.number_f()
                self.state = 1287
                self.number_f()
                self.state = 1288
                self.number_f()
                self.state = 1289
                self.number_f()
                self.state = 1290
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1292
                self.match(CnsMRParser.Store_1)
                pass

            elif la_ == 25:
                self.state = 1293
                self.match(CnsMRParser.Store_2)
                pass

            elif la_ == 26:
                self.state = 1294
                self.match(CnsMRParser.Store_3)
                pass

            elif la_ == 27:
                self.state = 1295
                self.match(CnsMRParser.Store_4)
                pass

            elif la_ == 28:
                self.state = 1296
                self.match(CnsMRParser.Store_5)
                pass

            elif la_ == 29:
                self.state = 1297
                self.match(CnsMRParser.Store_6)
                pass

            elif la_ == 30:
                self.state = 1298
                self.match(CnsMRParser.Store_7)
                pass

            elif la_ == 31:
                self.state = 1299
                self.match(CnsMRParser.Store_8)
                pass

            elif la_ == 32:
                self.state = 1300
                self.match(CnsMRParser.Store_9)
                pass

            elif la_ == 33:
                self.state = 1301
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1312
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,165,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1310
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1304
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1305
                        self.match(CnsMRParser.Around)
                        self.state = 1306
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1307
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1308
                        self.match(CnsMRParser.Saround)
                        self.state = 1309
                        self.number_f()
                        pass

             
                self.state = 1314
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,165,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1315
            _la = self._input.LA(1)
            if not(((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (CnsMRParser.Integer - 134)) | (1 << (CnsMRParser.Real - 134)) | (1 << (CnsMRParser.Symbol_name - 134)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1317
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1319
            _la = self._input.LA(1)
            if not(((((_la - 134)) & ~0x3f) == 0 and ((1 << (_la - 134)) & ((1 << (CnsMRParser.Integer - 134)) | (1 << (CnsMRParser.Real - 134)) | (1 << (CnsMRParser.Symbol_name - 134)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = CnsMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1321
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CnsMRParser.Flags, 0)

        def Include(self):
            return self.getToken(CnsMRParser.Include, 0)

        def End_F(self):
            return self.getToken(CnsMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(CnsMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Class_name)
            else:
                return self.getToken(CnsMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(CnsMRParser.Any_class, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = CnsMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1323
            self.match(CnsMRParser.Flags)
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Exclude:
                self.state = 1324
                self.match(CnsMRParser.Exclude)
                self.state = 1332
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Include, CnsMRParser.Class_name]:
                    self.state = 1328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CnsMRParser.Class_name:
                        self.state = 1325
                        self.match(CnsMRParser.Class_name)
                        self.state = 1330
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CnsMRParser.Any_class]:
                    self.state = 1331
                    self.match(CnsMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1336
            self.match(CnsMRParser.Include)
            self.state = 1340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Class_name:
                self.state = 1337
                self.match(CnsMRParser.Class_name)
                self.state = 1342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1343
            self.match(CnsMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(CnsMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = CnsMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1345
            self.match(CnsMRParser.Vector)
            self.state = 1346
            self.vector_mode()
            self.state = 1347
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(CnsMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(CnsMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(CnsMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = CnsMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 1355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Do_Lp, CnsMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1349
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Do_Lp or _la==CnsMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1350
                self.vector_expression()
                self.state = 1351
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1353
                self.match(CnsMRParser.Show)
                self.state = 1354
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = CnsMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            self.match(CnsMRParser.Atom_properties_VE)
            self.state = 1360
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Equ_op_VE:
                self.state = 1358
                self.match(CnsMRParser.Equ_op_VE)
                self.state = 1359
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def vector_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_operationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,i)


        def Add_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Add_op_VE)
            else:
                return self.getToken(CnsMRParser.Add_op_VE, i)

        def Sub_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Sub_op_VE)
            else:
                return self.getToken(CnsMRParser.Sub_op_VE, i)

        def Mul_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Mul_op_VE)
            else:
                return self.getToken(CnsMRParser.Mul_op_VE, i)

        def Div_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Div_op_VE)
            else:
                return self.getToken(CnsMRParser.Div_op_VE, i)

        def Exp_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Exp_op_VE)
            else:
                return self.getToken(CnsMRParser.Exp_op_VE, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = CnsMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            self.vflc()
            self.state = 1367
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,172,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1363
                    _la = self._input.LA(1)
                    if not(((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (CnsMRParser.Add_op_VE - 179)) | (1 << (CnsMRParser.Sub_op_VE - 179)) | (1 << (CnsMRParser.Mul_op_VE - 179)) | (1 << (CnsMRParser.Div_op_VE - 179)) | (1 << (CnsMRParser.Exp_op_VE - 179)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1364
                    self.vector_operation() 
                self.state = 1369
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,172,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(CnsMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(CnsMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(CnsMRParser.Simple_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(CnsMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = CnsMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vflc)
        try:
            self.state = 1376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1370
                self.match(CnsMRParser.Atom_properties_VE)
                pass
            elif token in [CnsMRParser.Abs_VE, CnsMRParser.Acos_VE, CnsMRParser.Cos_VE, CnsMRParser.Decode_VE, CnsMRParser.Encode_VE, CnsMRParser.Exp_VE, CnsMRParser.Gauss_VE, CnsMRParser.Heavy_VE, CnsMRParser.Int_VE, CnsMRParser.Log10_VE, CnsMRParser.Log_VE, CnsMRParser.Max_VE, CnsMRParser.Maxw_VE, CnsMRParser.Min_VE, CnsMRParser.Mod_VE, CnsMRParser.Norm_VE, CnsMRParser.Random_VE, CnsMRParser.Sign_VE, CnsMRParser.Sin_VE, CnsMRParser.Sqrt_VE, CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1371
                self.vector_func_call()
                pass
            elif token in [CnsMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1372
                self.match(CnsMRParser.Integer_VE)
                pass
            elif token in [CnsMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1373
                self.match(CnsMRParser.Real_VE)
                pass
            elif token in [CnsMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1374
                self.match(CnsMRParser.Simple_name_VE)
                pass
            elif token in [CnsMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1375
                self.match(CnsMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(CnsMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(CnsMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(CnsMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(CnsMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(CnsMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(CnsMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(CnsMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(CnsMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(CnsMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(CnsMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(CnsMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(CnsMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(CnsMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma_VE)
            else:
                return self.getToken(CnsMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(CnsMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(CnsMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(CnsMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(CnsMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(CnsMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(CnsMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(CnsMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(CnsMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(CnsMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = CnsMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1378
                self.match(CnsMRParser.Abs_VE)
                self.state = 1379
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1380
                self.vflc()
                self.state = 1381
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1383
                self.match(CnsMRParser.Acos_VE)
                self.state = 1384
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1385
                self.vflc()
                self.state = 1386
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1388
                self.match(CnsMRParser.Cos_VE)
                self.state = 1389
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1390
                self.vflc()
                self.state = 1391
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1393
                self.match(CnsMRParser.Decode_VE)
                self.state = 1394
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1395
                self.vflc()
                self.state = 1396
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1398
                self.match(CnsMRParser.Encode_VE)
                self.state = 1399
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1400
                self.vflc()
                self.state = 1401
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1403
                self.match(CnsMRParser.Exp_VE)
                self.state = 1404
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1405
                self.vflc()
                self.state = 1406
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1408
                self.match(CnsMRParser.Gauss_VE)
                self.state = 1409
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1410
                self.vflc()
                self.state = 1411
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1413
                self.match(CnsMRParser.Heavy_VE)
                self.state = 1414
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1415
                self.vflc()
                self.state = 1416
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1418
                self.match(CnsMRParser.Int_VE)
                self.state = 1419
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1420
                self.vflc()
                self.state = 1421
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1423
                self.match(CnsMRParser.Log10_VE)
                self.state = 1424
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1425
                self.vflc()
                self.state = 1426
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1428
                self.match(CnsMRParser.Log_VE)
                self.state = 1429
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1430
                self.vflc()
                self.state = 1431
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1433
                self.match(CnsMRParser.Max_VE)
                self.state = 1434
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1435
                self.vflc()
                self.state = 1440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1436
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1437
                    self.vflc()
                    self.state = 1442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1443
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1445
                self.match(CnsMRParser.Maxw_VE)
                self.state = 1446
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1447
                self.vflc()
                self.state = 1448
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1450
                self.match(CnsMRParser.Min_VE)
                self.state = 1451
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1452
                self.vflc()
                self.state = 1457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1453
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1454
                    self.vflc()
                    self.state = 1459
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1460
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1462
                self.match(CnsMRParser.Mod_VE)
                self.state = 1463
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1464
                self.vflc()
                self.state = 1465
                self.match(CnsMRParser.Comma_VE)
                self.state = 1466
                self.vflc()
                self.state = 1467
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1469
                self.match(CnsMRParser.Norm_VE)
                self.state = 1470
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1471
                self.vflc()
                self.state = 1472
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1474
                self.match(CnsMRParser.Random_VE)
                self.state = 1475
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1476
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1477
                self.match(CnsMRParser.Sign_VE)
                self.state = 1478
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1479
                self.vflc()
                self.state = 1480
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1482
                self.match(CnsMRParser.Sin_VE)
                self.state = 1483
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1484
                self.vflc()
                self.state = 1485
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1487
                self.match(CnsMRParser.Sqrt_VE)
                self.state = 1488
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1489
                self.vflc()
                self.state = 1490
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1492
                self.match(CnsMRParser.Tan_VE)
                self.state = 1493
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1494
                self.vflc()
                self.state = 1495
                self.match(CnsMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(CnsMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(CnsMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(CnsMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(CnsMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(CnsMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(CnsMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(CnsMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(CnsMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(CnsMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(CnsMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = CnsMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1499
            _la = self._input.LA(1)
            if not(((((_la - 218)) & ~0x3f) == 0 and ((1 << (_la - 218)) & ((1 << (CnsMRParser.Average_VS - 218)) | (1 << (CnsMRParser.Element_VS - 218)) | (1 << (CnsMRParser.Max_VS - 218)) | (1 << (CnsMRParser.Min_VS - 218)) | (1 << (CnsMRParser.Norm_VS - 218)) | (1 << (CnsMRParser.Rms_VS - 218)) | (1 << (CnsMRParser.Sum_VS - 218)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1500
            self.match(CnsMRParser.L_paren_VS)
            self.state = 1501
            self.match(CnsMRParser.Atom_properties_VS)
            self.state = 1502
            self.match(CnsMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(CnsMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = CnsMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1504
            self.match(CnsMRParser.Evaluate_Lp)
            self.state = 1505
            self.match(CnsMRParser.Symbol_name_VE)
            self.state = 1506
            self.match(CnsMRParser.Equ_op_VE)
            self.state = 1507
            self.evaluate_operation()
            self.state = 1508
            self.match(CnsMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def evaluate_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_operationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,i)


        def Add_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Add_op_VE)
            else:
                return self.getToken(CnsMRParser.Add_op_VE, i)

        def Sub_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Sub_op_VE)
            else:
                return self.getToken(CnsMRParser.Sub_op_VE, i)

        def Mul_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Mul_op_VE)
            else:
                return self.getToken(CnsMRParser.Mul_op_VE, i)

        def Div_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Div_op_VE)
            else:
                return self.getToken(CnsMRParser.Div_op_VE, i)

        def Exp_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Exp_op_VE)
            else:
                return self.getToken(CnsMRParser.Exp_op_VE, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = CnsMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self.vflc()
            self.state = 1515
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,177,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1511
                    _la = self._input.LA(1)
                    if not(((((_la - 179)) & ~0x3f) == 0 and ((1 << (_la - 179)) & ((1 << (CnsMRParser.Add_op_VE - 179)) | (1 << (CnsMRParser.Sub_op_VE - 179)) | (1 << (CnsMRParser.Mul_op_VE - 179)) | (1 << (CnsMRParser.Div_op_VE - 179)) | (1 << (CnsMRParser.Exp_op_VE - 179)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1512
                    self.evaluate_operation() 
                self.state = 1517
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,177,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[51] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




