# Generated from CnsMRParser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00a6")
        buf.write("\u0512\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\7\2\u0081")
        buf.write("\n\2\f\2\16\2\u0084\13\2\3\2\3\2\3\3\3\3\7\3\u008a\n\3")
        buf.write("\f\3\16\3\u008d\13\3\3\3\3\3\3\4\3\4\3\4\7\4\u0094\n\4")
        buf.write("\f\4\16\4\u0097\13\4\3\4\3\4\3\5\3\5\3\5\7\5\u009e\n\5")
        buf.write("\f\5\16\5\u00a1\13\5\3\5\3\5\3\6\3\6\3\6\7\6\u00a8\n\6")
        buf.write("\f\6\16\6\u00ab\13\6\3\6\3\6\3\7\3\7\7\7\u00b1\n\7\f\7")
        buf.write("\16\7\u00b4\13\7\3\7\3\7\3\b\3\b\7\b\u00ba\n\b\f\b\16")
        buf.write("\b\u00bd\13\b\3\b\3\b\3\t\3\t\7\t\u00c3\n\t\f\t\16\t\u00c6")
        buf.write("\13\t\3\t\3\t\3\n\3\n\7\n\u00cc\n\n\f\n\16\n\u00cf\13")
        buf.write("\n\3\n\3\n\3\13\3\13\7\13\u00d5\n\13\f\13\16\13\u00d8")
        buf.write("\13\13\3\13\3\13\3\f\3\f\7\f\u00de\n\f\f\f\16\f\u00e1")
        buf.write("\13\f\3\f\3\f\3\r\3\r\7\r\u00e7\n\r\f\r\16\r\u00ea\13")
        buf.write("\r\3\r\3\r\3\16\3\16\7\16\u00f0\n\16\f\16\16\16\u00f3")
        buf.write("\13\16\3\16\3\16\3\17\3\17\5\17\u00f9\n\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\5\17\u0108\n\17\3\17\3\17\3\17\5\17\u010d\n\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\5\17\u0114\n\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\5\17\u011d\n\17\3\17\3\17\3\17\5\17\u0122")
        buf.write("\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u012b\n")
        buf.write("\17\f\17\16\17\u012e\13\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\5\17\u0139\n\17\3\17\3\17\3\17\3\17")
        buf.write("\5\17\u013f\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\5\17\u014c\n\17\3\17\3\17\3\17\7\17")
        buf.write("\u0151\n\17\f\17\16\17\u0154\13\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u016c\n\17\f")
        buf.write("\17\16\17\u016f\13\17\3\17\3\17\3\17\5\17\u0174\n\17\3")
        buf.write("\17\5\17\u0177\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\3\20\5\20\u0181\n\20\3\20\5\20\u0184\n\20\3\20\3\20\5")
        buf.write("\20\u0188\n\20\3\20\5\20\u018b\n\20\3\20\3\20\5\20\u018f")
        buf.write("\n\20\3\20\5\20\u0192\n\20\3\20\3\20\5\20\u0196\n\20\3")
        buf.write("\20\5\20\u0199\n\20\3\20\3\20\5\20\u019d\n\20\3\20\5\20")
        buf.write("\u01a0\n\20\3\20\3\20\5\20\u01a4\n\20\3\20\5\20\u01a7")
        buf.write("\n\20\3\20\3\20\5\20\u01ab\n\20\3\20\5\20\u01ae\n\20\3")
        buf.write("\20\3\20\3\20\3\20\7\20\u01b4\n\20\f\20\16\20\u01b7\13")
        buf.write("\20\3\21\3\21\5\21\u01bb\n\21\3\21\3\21\3\21\5\21\u01c0")
        buf.write("\n\21\3\21\3\21\3\21\3\21\3\21\5\21\u01c7\n\21\3\22\3")
        buf.write("\22\3\22\5\22\u01cc\n\22\3\22\3\22\3\22\5\22\u01d1\n\22")
        buf.write("\3\22\3\22\3\22\5\22\u01d6\n\22\3\22\3\22\3\22\3\22\5")
        buf.write("\22\u01dc\n\22\3\22\3\22\5\22\u01e0\n\22\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\7\24\u01ee")
        buf.write("\n\24\f\24\16\24\u01f1\13\24\3\24\3\24\3\24\5\24\u01f6")
        buf.write("\n\24\3\25\3\25\5\25\u01fa\n\25\3\25\3\25\3\25\5\25\u01ff")
        buf.write("\n\25\3\25\5\25\u0202\n\25\3\26\3\26\5\26\u0206\n\26\3")
        buf.write("\26\3\26\3\26\5\26\u020b\n\26\3\26\3\26\3\26\5\26\u0210")
        buf.write("\n\26\3\26\3\26\5\26\u0214\n\26\3\26\3\26\3\26\3\26\5")
        buf.write("\26\u021a\n\26\3\26\3\26\5\26\u021e\n\26\3\26\3\26\5\26")
        buf.write("\u0222\n\26\3\26\5\26\u0225\n\26\5\26\u0227\n\26\3\26")
        buf.write("\3\26\5\26\u022b\n\26\3\27\3\27\3\27\5\27\u0230\n\27\3")
        buf.write("\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u023a\n\27")
        buf.write("\3\27\3\27\3\27\5\27\u023f\n\27\3\27\3\27\3\27\5\27\u0244")
        buf.write("\n\27\3\27\3\27\3\27\3\27\3\27\5\27\u024b\n\27\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u0257")
        buf.write("\n\30\3\31\3\31\3\31\5\31\u025c\n\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\5\31\u0267\n\31\3\31\3\31")
        buf.write("\3\31\3\31\5\31\u026d\n\31\3\31\3\31\5\31\u0271\n\31\3")
        buf.write("\31\3\31\3\31\5\31\u0276\n\31\3\31\3\31\3\31\5\31\u027b")
        buf.write("\n\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0284\n")
        buf.write("\31\3\31\5\31\u0287\n\31\3\31\5\31\u028a\n\31\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0296\n")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\5\32\u029d\n\32\3\33\3\33")
        buf.write("\3\33\5\33\u02a2\n\33\3\33\3\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\5\33\u02ae\n\33\3\33\3\33\3\33\5\33")
        buf.write("\u02b3\n\33\3\33\3\33\3\33\5\33\u02b8\n\33\3\33\3\33\3")
        buf.write("\33\5\33\u02bd\n\33\3\33\3\33\3\33\5\33\u02c2\n\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u02cb\n\33\3\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35")
        buf.write("\3\35\3\35\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\5\36\u02e6\n\36\3\36\3\36\3\36\5\36\u02eb\n")
        buf.write("\36\3\36\3\36\3\36\3\36\5\36\u02f1\n\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\5\36\u02fb\n\36\3\36\5\36\u02fe")
        buf.write("\n\36\3\36\3\36\3\36\5\36\u0303\n\36\3\37\3\37\3\37\5")
        buf.write("\37\u0308\n\37\3\37\3\37\5\37\u030c\n\37\3 \3 \3 \3 \3")
        buf.write("!\3!\3!\3!\3!\3!\5!\u0318\n!\3!\3!\3\"\3\"\3\"\3#\3#\3")
        buf.write("#\3$\3$\3$\3%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0330\n")
        buf.write("&\3\'\3\'\3\'\3(\3(\3(\5(\u0338\n(\3(\3(\3(\3(\3(\5(\u033f")
        buf.write("\n(\3(\5(\u0342\n(\3(\5(\u0345\n(\3(\3(\3(\5(\u034a\n")
        buf.write("(\3(\3(\3(\5(\u034f\n(\3(\3(\3(\5(\u0354\n(\3(\3(\3(\3")
        buf.write("(\3(\3(\3(\3(\5(\u035e\n(\3(\3(\3(\5(\u0363\n(\3(\3(\3")
        buf.write("(\5(\u0368\n(\3(\3(\5(\u036c\n(\3(\3(\3(\3(\3(\3(\3(\5")
        buf.write("(\u0375\n(\3(\5(\u0378\n(\3(\3(\3(\3(\3(\5(\u037f\n(\3")
        buf.write("(\5(\u0382\n(\3(\5(\u0385\n(\3(\5(\u0388\n(\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\5)\u0394\n)\3)\3)\3)\3)\3)\5)\u039b")
        buf.write("\n)\3)\3)\3)\3)\3)\5)\u03a2\n)\3*\3*\3*\5*\u03a7\n*\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u03b3\n*\3*\3*\3*\5*\u03b8")
        buf.write("\n*\3*\3*\3*\5*\u03bd\n*\3*\3*\3*\3*\3*\5*\u03c4\n*\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3,\3,\3,\5,\u03d3\n,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u03e1\n,\3,\3,\3,\5")
        buf.write(",\u03e6\n,\3,\3,\3,\5,\u03eb\n,\3,\3,\3,\3,\3,\5,\u03f2")
        buf.write("\n,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3.\3.\3.\5.\u0403")
        buf.write("\n.\3.\3.\3.\5.\u0408\n.\3.\3.\3.\3.\3.\3.\3.\5.\u0411")
        buf.write("\n.\3.\3.\3.\5.\u0416\n.\3.\3.\3.\5.\u041b\n.\3.\3.\3")
        buf.write(".\5.\u0420\n.\3.\3.\3.\3.\3.\3.\3.\5.\u0429\n.\3.\5.\u042c")
        buf.write("\n.\3.\3.\3.\3.\3.\3.\5.\u0434\n.\3/\3/\3/\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\5/\u0443\n/\3\60\3\60\3\60\3\60\3")
        buf.write("\61\3\61\3\61\7\61\u044c\n\61\f\61\16\61\u044f\13\61\3")
        buf.write("\62\3\62\3\62\7\62\u0454\n\62\f\62\16\62\u0457\13\62\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\5\63\u0465\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0475\n\63")
        buf.write("\5\63\u0477\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63")
        buf.write("\u048a\n\63\5\63\u048c\n\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\5\63\u0495\n\63\3\63\3\63\5\63\u0499\n\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u04a4\n")
        buf.write("\63\3\63\3\63\5\63\u04a8\n\63\3\63\3\63\5\63\u04ac\n\63")
        buf.write("\3\63\5\63\u04af\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\5\63\u04bc\n\63\5\63\u04be\n\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\5\63\u04c5\n\63\5\63\u04c7\n")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\5\63\u04ce\n\63\3\63\3\63")
        buf.write("\3\63\5\63\u04d3\n\63\5\63\u04d5\n\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\5\63\u04e9\n\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\7\63\u04f1\n\63\f\63\16\63\u04f4\13\63\3")
        buf.write("\64\3\64\3\65\3\65\3\66\3\66\3\67\3\67\3\67\7\67\u04ff")
        buf.write("\n\67\f\67\16\67\u0502\13\67\3\67\5\67\u0505\n\67\5\67")
        buf.write("\u0507\n\67\3\67\3\67\7\67\u050b\n\67\f\67\16\67\u050e")
        buf.write("\13\67\3\67\3\67\3\67\5\u012c\u0152\u016d\3d8\2\4\6\b")
        buf.write("\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668")
        buf.write(":<>@BDFHJLNPRTVXZ\\^`bdfhjl\2\5\3\2\u008d\u008e\4\2\u0089")
        buf.write("\u0089\u008f\u008f\4\2\u0089\u0089\u008b\u008b\2\u061d")
        buf.write("\2\u0082\3\2\2\2\4\u0087\3\2\2\2\6\u0090\3\2\2\2\b\u009a")
        buf.write("\3\2\2\2\n\u00a4\3\2\2\2\f\u00ae\3\2\2\2\16\u00b7\3\2")
        buf.write("\2\2\20\u00c0\3\2\2\2\22\u00c9\3\2\2\2\24\u00d2\3\2\2")
        buf.write("\2\26\u00db\3\2\2\2\30\u00e4\3\2\2\2\32\u00ed\3\2\2\2")
        buf.write("\34\u0176\3\2\2\2\36\u0178\3\2\2\2 \u01c6\3\2\2\2\"\u01df")
        buf.write("\3\2\2\2$\u01e1\3\2\2\2&\u01f5\3\2\2\2(\u0201\3\2\2\2")
        buf.write("*\u022a\3\2\2\2,\u024a\3\2\2\2.\u024c\3\2\2\2\60\u0289")
        buf.write("\3\2\2\2\62\u028b\3\2\2\2\64\u02ca\3\2\2\2\66\u02cc\3")
        buf.write("\2\2\28\u02d5\3\2\2\2:\u0302\3\2\2\2<\u0304\3\2\2\2>\u030d")
        buf.write("\3\2\2\2@\u0311\3\2\2\2B\u031b\3\2\2\2D\u031e\3\2\2\2")
        buf.write("F\u0321\3\2\2\2H\u0324\3\2\2\2J\u0327\3\2\2\2L\u0331\3")
        buf.write("\2\2\2N\u0387\3\2\2\2P\u0389\3\2\2\2R\u03c3\3\2\2\2T\u03c5")
        buf.write("\3\2\2\2V\u03f1\3\2\2\2X\u03f3\3\2\2\2Z\u0433\3\2\2\2")
        buf.write("\\\u0435\3\2\2\2^\u0444\3\2\2\2`\u0448\3\2\2\2b\u0450")
        buf.write("\3\2\2\2d\u04e8\3\2\2\2f\u04f5\3\2\2\2h\u04f7\3\2\2\2")
        buf.write("j\u04f9\3\2\2\2l\u04fb\3\2\2\2n\u0081\5\4\3\2o\u0081\5")
        buf.write("\6\4\2p\u0081\5\b\5\2q\u0081\5\n\6\2r\u0081\5\f\7\2s\u0081")
        buf.write("\5\16\b\2t\u0081\5\20\t\2u\u0081\5\22\n\2v\u0081\5\24")
        buf.write("\13\2w\u0081\5\26\f\2x\u0081\5\30\r\2y\u0081\5\32\16\2")
        buf.write("z\u0081\5l\67\2{\u0081\5\36\20\2|\u0081\5$\23\2}\u0081")
        buf.write("\5.\30\2~\u0081\5&\24\2\177\u0081\5\62\32\2\u0080n\3\2")
        buf.write("\2\2\u0080o\3\2\2\2\u0080p\3\2\2\2\u0080q\3\2\2\2\u0080")
        buf.write("r\3\2\2\2\u0080s\3\2\2\2\u0080t\3\2\2\2\u0080u\3\2\2\2")
        buf.write("\u0080v\3\2\2\2\u0080w\3\2\2\2\u0080x\3\2\2\2\u0080y\3")
        buf.write("\2\2\2\u0080z\3\2\2\2\u0080{\3\2\2\2\u0080|\3\2\2\2\u0080")
        buf.write("}\3\2\2\2\u0080~\3\2\2\2\u0080\177\3\2\2\2\u0081\u0084")
        buf.write("\3\2\2\2\u0082\u0080\3\2\2\2\u0082\u0083\3\2\2\2\u0083")
        buf.write("\u0085\3\2\2\2\u0084\u0082\3\2\2\2\u0085\u0086\7\2\2\3")
        buf.write("\u0086\3\3\2\2\2\u0087\u008b\7\5\2\2\u0088\u008a\5\34")
        buf.write("\17\2\u0089\u0088\3\2\2\2\u008a\u008d\3\2\2\2\u008b\u0089")
        buf.write("\3\2\2\2\u008b\u008c\3\2\2\2\u008c\u008e\3\2\2\2\u008d")
        buf.write("\u008b\3\2\2\2\u008e\u008f\7\4\2\2\u008f\5\3\2\2\2\u0090")
        buf.write("\u0091\7\65\2\2\u0091\u0095\7\66\2\2\u0092\u0094\5\"\22")
        buf.write("\2\u0093\u0092\3\2\2\2\u0094\u0097\3\2\2\2\u0095\u0093")
        buf.write("\3\2\2\2\u0095\u0096\3\2\2\2\u0096\u0098\3\2\2\2\u0097")
        buf.write("\u0095\3\2\2\2\u0098\u0099\7\4\2\2\u0099\7\3\2\2\2\u009a")
        buf.write("\u009b\7\65\2\2\u009b\u009f\79\2\2\u009c\u009e\5&\24\2")
        buf.write("\u009d\u009c\3\2\2\2\u009e\u00a1\3\2\2\2\u009f\u009d\3")
        buf.write("\2\2\2\u009f\u00a0\3\2\2\2\u00a0\u00a2\3\2\2\2\u00a1\u009f")
        buf.write("\3\2\2\2\u00a2\u00a3\7\4\2\2\u00a3\t\3\2\2\2\u00a4\u00a5")
        buf.write("\7\65\2\2\u00a5\u00a9\7=\2\2\u00a6\u00a8\5*\26\2\u00a7")
        buf.write("\u00a6\3\2\2\2\u00a8\u00ab\3\2\2\2\u00a9\u00a7\3\2\2\2")
        buf.write("\u00a9\u00aa\3\2\2\2\u00aa\u00ac\3\2\2\2\u00ab\u00a9\3")
        buf.write("\2\2\2\u00ac\u00ad\7\4\2\2\u00ad\13\3\2\2\2\u00ae\u00b2")
        buf.write("\7@\2\2\u00af\u00b1\5,\27\2\u00b0\u00af\3\2\2\2\u00b1")
        buf.write("\u00b4\3\2\2\2\u00b2\u00b0\3\2\2\2\u00b2\u00b3\3\2\2\2")
        buf.write("\u00b3\u00b5\3\2\2\2\u00b4\u00b2\3\2\2\2\u00b5\u00b6\7")
        buf.write("\4\2\2\u00b6\r\3\2\2\2\u00b7\u00bb\7D\2\2\u00b8\u00ba")
        buf.write("\5\60\31\2\u00b9\u00b8\3\2\2\2\u00ba\u00bd\3\2\2\2\u00bb")
        buf.write("\u00b9\3\2\2\2\u00bb\u00bc\3\2\2\2\u00bc\u00be\3\2\2\2")
        buf.write("\u00bd\u00bb\3\2\2\2\u00be\u00bf\7\4\2\2\u00bf\17\3\2")
        buf.write("\2\2\u00c0\u00c4\7F\2\2\u00c1\u00c3\5\64\33\2\u00c2\u00c1")
        buf.write("\3\2\2\2\u00c3\u00c6\3\2\2\2\u00c4\u00c2\3\2\2\2\u00c4")
        buf.write("\u00c5\3\2\2\2\u00c5\u00c7\3\2\2\2\u00c6\u00c4\3\2\2\2")
        buf.write("\u00c7\u00c8\7\4\2\2\u00c8\21\3\2\2\2\u00c9\u00cd\7L\2")
        buf.write("\2\u00ca\u00cc\5:\36\2\u00cb\u00ca\3\2\2\2\u00cc\u00cf")
        buf.write("\3\2\2\2\u00cd\u00cb\3\2\2\2\u00cd\u00ce\3\2\2\2\u00ce")
        buf.write("\u00d0\3\2\2\2\u00cf\u00cd\3\2\2\2\u00d0\u00d1\7\4\2\2")
        buf.write("\u00d1\23\3\2\2\2\u00d2\u00d6\7V\2\2\u00d3\u00d5\5N(\2")
        buf.write("\u00d4\u00d3\3\2\2\2\u00d5\u00d8\3\2\2\2\u00d6\u00d4\3")
        buf.write("\2\2\2\u00d6\u00d7\3\2\2\2\u00d7\u00d9\3\2\2\2\u00d8\u00d6")
        buf.write("\3\2\2\2\u00d9\u00da\7\4\2\2\u00da\25\3\2\2\2\u00db\u00df")
        buf.write("\7[\2\2\u00dc\u00de\5R*\2\u00dd\u00dc\3\2\2\2\u00de\u00e1")
        buf.write("\3\2\2\2\u00df\u00dd\3\2\2\2\u00df\u00e0\3\2\2\2\u00e0")
        buf.write("\u00e2\3\2\2\2\u00e1\u00df\3\2\2\2\u00e2\u00e3\7\4\2\2")
        buf.write("\u00e3\27\3\2\2\2\u00e4\u00e8\7\\\2\2\u00e5\u00e7\5V,")
        buf.write("\2\u00e6\u00e5\3\2\2\2\u00e7\u00ea\3\2\2\2\u00e8\u00e6")
        buf.write("\3\2\2\2\u00e8\u00e9\3\2\2\2\u00e9\u00eb\3\2\2\2\u00ea")
        buf.write("\u00e8\3\2\2\2\u00eb\u00ec\7\4\2\2\u00ec\31\3\2\2\2\u00ed")
        buf.write("\u00f1\7]\2\2\u00ee\u00f0\5Z.\2\u00ef\u00ee\3\2\2\2\u00f0")
        buf.write("\u00f3\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f1\u00f2\3\2\2\2")
        buf.write("\u00f2\u00f4\3\2\2\2\u00f3\u00f1\3\2\2\2\u00f4\u00f5\7")
        buf.write("\4\2\2\u00f5\33\3\2\2\2\u00f6\u00f8\7\6\2\2\u00f7\u00f9")
        buf.write("\7\u0093\2\2\u00f8\u00f7\3\2\2\2\u00f8\u00f9\3\2\2\2\u00f9")
        buf.write("\u00fa\3\2\2\2\u00fa\u0177\7%\2\2\u00fb\u0177\5\36\20")
        buf.write("\2\u00fc\u00fd\7\b\2\2\u00fd\u00fe\7\u008d\2\2\u00fe\u0177")
        buf.write("\5j\66\2\u00ff\u0100\7\t\2\2\u0100\u0101\7\u008d\2\2\u0101")
        buf.write("\u0177\7*\2\2\u0102\u0103\7\n\2\2\u0103\u0104\7\u008d")
        buf.write("\2\2\u0104\u0177\5j\66\2\u0105\u0107\7\13\2\2\u0106\u0108")
        buf.write("\7\u0093\2\2\u0107\u0106\3\2\2\2\u0107\u0108\3\2\2\2\u0108")
        buf.write("\u0109\3\2\2\2\u0109\u0177\5j\66\2\u010a\u010c\7\f\2\2")
        buf.write("\u010b\u010d\7\u0093\2\2\u010c\u010b\3\2\2\2\u010c\u010d")
        buf.write("\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u0177\7\u008d\2\2\u010f")
        buf.write("\u0110\7\r\2\2\u0110\u0177\7\u008d\2\2\u0111\u0113\7\16")
        buf.write("\2\2\u0112\u0114\7\u0093\2\2\u0113\u0112\3\2\2\2\u0113")
        buf.write("\u0114\3\2\2\2\u0114\u0115\3\2\2\2\u0115\u0177\7\u0089")
        buf.write("\2\2\u0116\u0117\7\17\2\2\u0117\u0177\7&\2\2\u0118\u0119")
        buf.write("\7\17\2\2\u0119\u011a\7\'\2\2\u011a\u011c\7(\2\2\u011b")
        buf.write("\u011d\7\u0093\2\2\u011c\u011b\3\2\2\2\u011c\u011d\3\2")
        buf.write("\2\2\u011d\u011e\3\2\2\2\u011e\u011f\5j\66\2\u011f\u0121")
        buf.write("\7)\2\2\u0120\u0122\7\u0093\2\2\u0121\u0120\3\2\2\2\u0121")
        buf.write("\u0122\3\2\2\2\u0122\u0123\3\2\2\2\u0123\u0124\5j\66\2")
        buf.write("\u0124\u0177\3\2\2\2\u0125\u0126\7\20\2\2\u0126\u0127")
        buf.write("\7\u008d\2\2\u0127\u0128\7\u008d\2\2\u0128\u0177\5j\66")
        buf.write("\2\u0129\u012b\7\21\2\2\u012a\u0129\3\2\2\2\u012b\u012e")
        buf.write("\3\2\2\2\u012c\u012d\3\2\2\2\u012c\u012a\3\2\2\2\u012d")
        buf.write("\u012f\3\2\2\2\u012e\u012c\3\2\2\2\u012f\u0177\7\4\2\2")
        buf.write("\u0130\u0131\7\22\2\2\u0131\u0132\7\u008d\2\2\u0132\u0177")
        buf.write("\7\u0089\2\2\u0133\u0134\7\23\2\2\u0134\u0135\7\u008d")
        buf.write("\2\2\u0135\u0177\7\u0089\2\2\u0136\u0138\7\24\2\2\u0137")
        buf.write("\u0139\7\u0093\2\2\u0138\u0137\3\2\2\2\u0138\u0139\3\2")
        buf.write("\2\2\u0139\u013a\3\2\2\2\u013a\u0177\7\u0089\2\2\u013b")
        buf.write("\u0177\7\25\2\2\u013c\u013e\7\26\2\2\u013d\u013f\7\u0093")
        buf.write("\2\2\u013e\u013d\3\2\2\2\u013e\u013f\3\2\2\2\u013f\u0140")
        buf.write("\3\2\2\2\u0140\u0177\7\u0089\2\2\u0141\u0142\7\27\2\2")
        buf.write("\u0142\u0143\7\u008d\2\2\u0143\u0177\7+\2\2\u0144\u0145")
        buf.write("\7\30\2\2\u0145\u0146\5 \21\2\u0146\u0147\7\4\2\2\u0147")
        buf.write("\u0177\3\2\2\2\u0148\u0149\7\31\2\2\u0149\u014b\7\33\2")
        buf.write("\2\u014a\u014c\7\u0093\2\2\u014b\u014a\3\2\2\2\u014b\u014c")
        buf.write("\3\2\2\2\u014c\u014d\3\2\2\2\u014d\u0177\5j\66\2\u014e")
        buf.write("\u0152\7\32\2\2\u014f\u0151\7\u008d\2\2\u0150\u014f\3")
        buf.write("\2\2\2\u0151\u0154\3\2\2\2\u0152\u0153\3\2\2\2\u0152\u0150")
        buf.write("\3\2\2\2\u0153\u0155\3\2\2\2\u0154\u0152\3\2\2\2\u0155")
        buf.write("\u0177\7\4\2\2\u0156\u0177\7\34\2\2\u0157\u0158\7\35\2")
        buf.write("\2\u0158\u0159\7\u008d\2\2\u0159\u0177\5j\66\2\u015a\u015b")
        buf.write("\7\36\2\2\u015b\u015c\7\u008d\2\2\u015c\u0177\5j\66\2")
        buf.write("\u015d\u015e\7\37\2\2\u015e\u015f\7\u008d\2\2\u015f\u0177")
        buf.write("\5j\66\2\u0160\u0161\7 \2\2\u0161\u0162\7\u008d\2\2\u0162")
        buf.write("\u0177\5j\66\2\u0163\u0164\7!\2\2\u0164\u0165\7\u008d")
        buf.write("\2\2\u0165\u0177\5j\66\2\u0166\u0167\7\"\2\2\u0167\u0168")
        buf.write("\7\u008d\2\2\u0168\u0177\5j\66\2\u0169\u016d\7#\2\2\u016a")
        buf.write("\u016c\7\u008d\2\2\u016b\u016a\3\2\2\2\u016c\u016f\3\2")
        buf.write("\2\2\u016d\u016e\3\2\2\2\u016d\u016b\3\2\2\2\u016e\u0170")
        buf.write("\3\2\2\2\u016f\u016d\3\2\2\2\u0170\u0177\7\4\2\2\u0171")
        buf.write("\u0173\7$\2\2\u0172\u0174\7\u0093\2\2\u0173\u0172\3\2")
        buf.write("\2\2\u0173\u0174\3\2\2\2\u0174\u0175\3\2\2\2\u0175\u0177")
        buf.write("\5j\66\2\u0176\u00f6\3\2\2\2\u0176\u00fb\3\2\2\2\u0176")
        buf.write("\u00fc\3\2\2\2\u0176\u00ff\3\2\2\2\u0176\u0102\3\2\2\2")
        buf.write("\u0176\u0105\3\2\2\2\u0176\u010a\3\2\2\2\u0176\u010f\3")
        buf.write("\2\2\2\u0176\u0111\3\2\2\2\u0176\u0116\3\2\2\2\u0176\u0118")
        buf.write("\3\2\2\2\u0176\u0125\3\2\2\2\u0176\u012c\3\2\2\2\u0176")
        buf.write("\u0130\3\2\2\2\u0176\u0133\3\2\2\2\u0176\u0136\3\2\2\2")
        buf.write("\u0176\u013b\3\2\2\2\u0176\u013c\3\2\2\2\u0176\u0141\3")
        buf.write("\2\2\2\u0176\u0144\3\2\2\2\u0176\u0148\3\2\2\2\u0176\u014e")
        buf.write("\3\2\2\2\u0176\u0156\3\2\2\2\u0176\u0157\3\2\2\2\u0176")
        buf.write("\u015a\3\2\2\2\u0176\u015d\3\2\2\2\u0176\u0160\3\2\2\2")
        buf.write("\u0176\u0163\3\2\2\2\u0176\u0166\3\2\2\2\u0176\u0169\3")
        buf.write("\2\2\2\u0176\u0171\3\2\2\2\u0177\35\3\2\2\2\u0178\u0179")
        buf.write("\7\7\2\2\u0179\u017a\5^\60\2\u017a\u017b\5^\60\2\u017b")
        buf.write("\u017c\5f\64\2\u017c\u017d\5f\64\2\u017d\u0183\5f\64\2")
        buf.write("\u017e\u0180\7\60\2\2\u017f\u0181\7\u0093\2\2\u0180\u017f")
        buf.write("\3\2\2\2\u0180\u0181\3\2\2\2\u0181\u0182\3\2\2\2\u0182")
        buf.write("\u0184\5f\64\2\u0183\u017e\3\2\2\2\u0183\u0184\3\2\2\2")
        buf.write("\u0184\u018a\3\2\2\2\u0185\u0187\7\61\2\2\u0186\u0188")
        buf.write("\7\u0093\2\2\u0187\u0186\3\2\2\2\u0187\u0188\3\2\2\2\u0188")
        buf.write("\u0189\3\2\2\2\u0189\u018b\5f\64\2\u018a\u0185\3\2\2\2")
        buf.write("\u018a\u018b\3\2\2\2\u018b\u0191\3\2\2\2\u018c\u018e\7")
        buf.write("<\2\2\u018d\u018f\7\u0093\2\2\u018e\u018d\3\2\2\2\u018e")
        buf.write("\u018f\3\2\2\2\u018f\u0190\3\2\2\2\u0190\u0192\5f\64\2")
        buf.write("\u0191\u018c\3\2\2\2\u0191\u0192\3\2\2\2\u0192\u0198\3")
        buf.write("\2\2\2\u0193\u0195\7\62\2\2\u0194\u0196\7\u0093\2\2\u0195")
        buf.write("\u0194\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0197\3\2\2\2")
        buf.write("\u0197\u0199\5f\64\2\u0198\u0193\3\2\2\2\u0198\u0199\3")
        buf.write("\2\2\2\u0199\u019f\3\2\2\2\u019a\u019c\7\63\2\2\u019b")
        buf.write("\u019d\7\u0093\2\2\u019c\u019b\3\2\2\2\u019c\u019d\3\2")
        buf.write("\2\2\u019d\u019e\3\2\2\2\u019e\u01a0\5f\64\2\u019f\u019a")
        buf.write("\3\2\2\2\u019f\u01a0\3\2\2\2\u01a0\u01a6\3\2\2\2\u01a1")
        buf.write("\u01a3\7\64\2\2\u01a2\u01a4\7\u0093\2\2\u01a3\u01a2\3")
        buf.write("\2\2\2\u01a3\u01a4\3\2\2\2\u01a4\u01a5\3\2\2\2\u01a5\u01a7")
        buf.write("\5f\64\2\u01a6\u01a1\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7")
        buf.write("\u01ad\3\2\2\2\u01a8\u01aa\7\16\2\2\u01a9\u01ab\7\u0093")
        buf.write("\2\2\u01aa\u01a9\3\2\2\2\u01aa\u01ab\3\2\2\2\u01ab\u01ac")
        buf.write("\3\2\2\2\u01ac\u01ae\5f\64\2\u01ad\u01a8\3\2\2\2\u01ad")
        buf.write("\u01ae\3\2\2\2\u01ae\u01b5\3\2\2\2\u01af\u01b0\7\u0084")
        buf.write("\2\2\u01b0\u01b1\5^\60\2\u01b1\u01b2\5^\60\2\u01b2\u01b4")
        buf.write("\3\2\2\2\u01b3\u01af\3\2\2\2\u01b4\u01b7\3\2\2\2\u01b5")
        buf.write("\u01b3\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\37\3\2\2\2\u01b7")
        buf.write("\u01b5\3\2\2\2\u01b8\u01ba\7,\2\2\u01b9\u01bb\7\u0093")
        buf.write("\2\2\u01ba\u01b9\3\2\2\2\u01ba\u01bb\3\2\2\2\u01bb\u01bc")
        buf.write("\3\2\2\2\u01bc\u01c7\5j\66\2\u01bd\u01bf\7-\2\2\u01be")
        buf.write("\u01c0\7\u0093\2\2\u01bf\u01be\3\2\2\2\u01bf\u01c0\3\2")
        buf.write("\2\2\u01c0\u01c1\3\2\2\2\u01c1\u01c7\5j\66\2\u01c2\u01c3")
        buf.write("\7.\2\2\u01c3\u01c7\5^\60\2\u01c4\u01c5\7/\2\2\u01c5\u01c7")
        buf.write("\5^\60\2\u01c6\u01b8\3\2\2\2\u01c6\u01bd\3\2\2\2\u01c6")
        buf.write("\u01c2\3\2\2\2\u01c6\u01c4\3\2\2\2\u01c7!\3\2\2\2\u01c8")
        buf.write("\u01e0\5$\23\2\u01c9\u01cb\7\16\2\2\u01ca\u01cc\7\u0093")
        buf.write("\2\2\u01cb\u01ca\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01cd")
        buf.write("\3\2\2\2\u01cd\u01e0\7\u0089\2\2\u01ce\u01d0\7\67\2\2")
        buf.write("\u01cf\u01d1\7\u0093\2\2\u01d0\u01cf\3\2\2\2\u01d0\u01d1")
        buf.write("\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2\u01e0\7\u0089\2\2\u01d3")
        buf.write("\u01d5\7\26\2\2\u01d4\u01d6\7\u0093\2\2\u01d5\u01d4\3")
        buf.write("\2\2\2\u01d5\u01d6\3\2\2\2\u01d6\u01d7\3\2\2\2\u01d7\u01e0")
        buf.write("\7\u0089\2\2\u01d8\u01e0\7\34\2\2\u01d9\u01db\7\36\2\2")
        buf.write("\u01da\u01dc\7\u0093\2\2\u01db\u01da\3\2\2\2\u01db\u01dc")
        buf.write("\3\2\2\2\u01dc\u01dd\3\2\2\2\u01dd\u01e0\5j\66\2\u01de")
        buf.write("\u01e0\78\2\2\u01df\u01c8\3\2\2\2\u01df\u01c9\3\2\2\2")
        buf.write("\u01df\u01ce\3\2\2\2\u01df\u01d3\3\2\2\2\u01df\u01d8\3")
        buf.write("\2\2\2\u01df\u01d9\3\2\2\2\u01df\u01de\3\2\2\2\u01e0#")
        buf.write("\3\2\2\2\u01e1\u01e2\7\7\2\2\u01e2\u01e3\5^\60\2\u01e3")
        buf.write("\u01e4\5^\60\2\u01e4\u01e5\5^\60\2\u01e5\u01e6\5^\60\2")
        buf.write("\u01e6\u01e7\5f\64\2\u01e7\u01e8\5f\64\2\u01e8\u01e9\5")
        buf.write("f\64\2\u01e9\u01ea\7\u0089\2\2\u01ea%\3\2\2\2\u01eb\u01ef")
        buf.write("\7:\2\2\u01ec\u01ee\5(\25\2\u01ed\u01ec\3\2\2\2\u01ee")
        buf.write("\u01f1\3\2\2\2\u01ef\u01ed\3\2\2\2\u01ef\u01f0\3\2\2\2")
        buf.write("\u01f0\u01f2\3\2\2\2\u01f1\u01ef\3\2\2\2\u01f2\u01f6\7")
        buf.write("\4\2\2\u01f3\u01f6\7&\2\2\u01f4\u01f6\78\2\2\u01f5\u01eb")
        buf.write("\3\2\2\2\u01f5\u01f3\3\2\2\2\u01f5\u01f4\3\2\2\2\u01f6")
        buf.write("\'\3\2\2\2\u01f7\u01f9\7;\2\2\u01f8\u01fa\7\u0093\2\2")
        buf.write("\u01f9\u01f8\3\2\2\2\u01f9\u01fa\3\2\2\2\u01fa\u01fb\3")
        buf.write("\2\2\2\u01fb\u0202\5^\60\2\u01fc\u01fe\7<\2\2\u01fd\u01ff")
        buf.write("\7\u0093\2\2\u01fe\u01fd\3\2\2\2\u01fe\u01ff\3\2\2\2\u01ff")
        buf.write("\u0200\3\2\2\2\u0200\u0202\5j\66\2\u0201\u01f7\3\2\2\2")
        buf.write("\u0201\u01fc\3\2\2\2\u0202)\3\2\2\2\u0203\u0205\7>\2\2")
        buf.write("\u0204\u0206\7\u0093\2\2\u0205\u0204\3\2\2\2\u0205\u0206")
        buf.write("\3\2\2\2\u0206\u0207\3\2\2\2\u0207\u022b\7\u0089\2\2\u0208")
        buf.write("\u020a\7?\2\2\u0209\u020b\7\u0093\2\2\u020a\u0209\3\2")
        buf.write("\2\2\u020a\u020b\3\2\2\2\u020b\u020c\3\2\2\2\u020c\u0226")
        buf.write("\7\u0090\2\2\u020d\u020f\5j\66\2\u020e\u0210\7\u0087\2")
        buf.write("\2\u020f\u020e\3\2\2\2\u020f\u0210\3\2\2\2\u0210\u0211")
        buf.write("\3\2\2\2\u0211\u0213\5j\66\2\u0212\u0214\7\u0087\2\2\u0213")
        buf.write("\u0212\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215\3\2\2\2")
        buf.write("\u0215\u0216\5j\66\2\u0216\u0227\3\2\2\2\u0217\u0219\7")
        buf.write("\u0082\2\2\u0218\u021a\7\u0093\2\2\u0219\u0218\3\2\2\2")
        buf.write("\u0219\u021a\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u021d\5")
        buf.write("^\60\2\u021c\u021e\7\u0087\2\2\u021d\u021c\3\2\2\2\u021d")
        buf.write("\u021e\3\2\2\2\u021e\u0224\3\2\2\2\u021f\u0221\7\u0083")
        buf.write("\2\2\u0220\u0222\7\u0093\2\2\u0221\u0220\3\2\2\2\u0221")
        buf.write("\u0222\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0225\5^\60\2")
        buf.write("\u0224\u021f\3\2\2\2\u0224\u0225\3\2\2\2\u0225\u0227\3")
        buf.write("\2\2\2\u0226\u020d\3\2\2\2\u0226\u0217\3\2\2\2\u0227\u0228")
        buf.write("\3\2\2\2\u0228\u0229\7\u0091\2\2\u0229\u022b\3\2\2\2\u022a")
        buf.write("\u0203\3\2\2\2\u022a\u0208\3\2\2\2\u022b+\3\2\2\2\u022c")
        buf.write("\u024b\5.\30\2\u022d\u022f\7\f\2\2\u022e\u0230\7\u0093")
        buf.write("\2\2\u022f\u022e\3\2\2\2\u022f\u0230\3\2\2\2\u0230\u0231")
        buf.write("\3\2\2\2\u0231\u024b\7\u008d\2\2\u0232\u0233\7A\2\2\u0233")
        buf.write("\u0234\5j\66\2\u0234\u0235\5j\66\2\u0235\u0236\5j\66\2")
        buf.write("\u0236\u024b\3\2\2\2\u0237\u0239\7B\2\2\u0238\u023a\7")
        buf.write("\u0093\2\2\u0239\u0238\3\2\2\2\u0239\u023a\3\2\2\2\u023a")
        buf.write("\u023b\3\2\2\2\u023b\u024b\5j\66\2\u023c\u023e\7\24\2")
        buf.write("\2\u023d\u023f\7\u0093\2\2\u023e\u023d\3\2\2\2\u023e\u023f")
        buf.write("\3\2\2\2\u023f\u0240\3\2\2\2\u0240\u024b\7\u0089\2\2\u0241")
        buf.write("\u0243\7\27\2\2\u0242\u0244\7\u0093\2\2\u0243\u0242\3")
        buf.write("\2\2\2\u0243\u0244\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u024b")
        buf.write("\7C\2\2\u0246\u0247\7\31\2\2\u0247\u0248\7\33\2\2\u0248")
        buf.write("\u024b\5j\66\2\u0249\u024b\7\34\2\2\u024a\u022c\3\2\2")
        buf.write("\2\u024a\u022d\3\2\2\2\u024a\u0232\3\2\2\2\u024a\u0237")
        buf.write("\3\2\2\2\u024a\u023c\3\2\2\2\u024a\u0241\3\2\2\2\u024a")
        buf.write("\u0246\3\2\2\2\u024a\u0249\3\2\2\2\u024b-\3\2\2\2\u024c")
        buf.write("\u024d\7\7\2\2\u024d\u024e\5^\60\2\u024e\u024f\5^\60\2")
        buf.write("\u024f\u0250\5^\60\2\u0250\u0251\5^\60\2\u0251\u0252\5")
        buf.write("^\60\2\u0252\u0253\5^\60\2\u0253\u0254\5f\64\2\u0254\u0256")
        buf.write("\5f\64\2\u0255\u0257\5f\64\2\u0256\u0255\3\2\2\2\u0256")
        buf.write("\u0257\3\2\2\2\u0257/\3\2\2\2\u0258\u028a\5\62\32\2\u0259")
        buf.write("\u025b\7\f\2\2\u025a\u025c\7\u0093\2\2\u025b\u025a\3\2")
        buf.write("\2\2\u025b\u025c\3\2\2\2\u025c\u025d\3\2\2\2\u025d\u028a")
        buf.write("\7\u008d\2\2\u025e\u025f\7A\2\2\u025f\u0260\5j\66\2\u0260")
        buf.write("\u0261\5j\66\2\u0261\u0262\5j\66\2\u0262\u0263\5j\66\2")
        buf.write("\u0263\u028a\3\2\2\2\u0264\u0266\7\16\2\2\u0265\u0267")
        buf.write("\7\u0093\2\2\u0266\u0265\3\2\2\2\u0266\u0267\3\2\2\2\u0267")
        buf.write("\u0268\3\2\2\2\u0268\u028a\7\u0089\2\2\u0269\u026a\7B")
        buf.write("\2\2\u026a\u026c\5j\66\2\u026b\u026d\5j\66\2\u026c\u026b")
        buf.write("\3\2\2\2\u026c\u026d\3\2\2\2\u026d\u028a\3\2\2\2\u026e")
        buf.write("\u0270\7\24\2\2\u026f\u0271\7\u0093\2\2\u0270\u026f\3")
        buf.write("\2\2\2\u0270\u0271\3\2\2\2\u0271\u0272\3\2\2\2\u0272\u028a")
        buf.write("\7\u0089\2\2\u0273\u0275\7\26\2\2\u0274\u0276\7\u0093")
        buf.write("\2\2\u0275\u0274\3\2\2\2\u0275\u0276\3\2\2\2\u0276\u0277")
        buf.write("\3\2\2\2\u0277\u028a\7\u0089\2\2\u0278\u027a\7\27\2\2")
        buf.write("\u0279\u027b\7\u0093\2\2\u027a\u0279\3\2\2\2\u027a\u027b")
        buf.write("\3\2\2\2\u027b\u027c\3\2\2\2\u027c\u028a\7E\2\2\u027d")
        buf.write("\u027e\7\31\2\2\u027e\u027f\7\33\2\2\u027f\u0286\5j\66")
        buf.write("\2\u0280\u0287\7a\2\2\u0281\u0283\7\f\2\2\u0282\u0284")
        buf.write("\7\u0093\2\2\u0283\u0282\3\2\2\2\u0283\u0284\3\2\2\2\u0284")
        buf.write("\u0285\3\2\2\2\u0285\u0287\7\u008d\2\2\u0286\u0280\3\2")
        buf.write("\2\2\u0286\u0281\3\2\2\2\u0287\u028a\3\2\2\2\u0288\u028a")
        buf.write("\7\34\2\2\u0289\u0258\3\2\2\2\u0289\u0259\3\2\2\2\u0289")
        buf.write("\u025e\3\2\2\2\u0289\u0264\3\2\2\2\u0289\u0269\3\2\2\2")
        buf.write("\u0289\u026e\3\2\2\2\u0289\u0273\3\2\2\2\u0289\u0278\3")
        buf.write("\2\2\2\u0289\u027d\3\2\2\2\u0289\u0288\3\2\2\2\u028a\61")
        buf.write("\3\2\2\2\u028b\u028c\7\7\2\2\u028c\u028d\5^\60\2\u028d")
        buf.write("\u028e\5^\60\2\u028e\u028f\5^\60\2\u028f\u0295\5^\60\2")
        buf.write("\u0290\u0291\5^\60\2\u0291\u0292\5^\60\2\u0292\u0293\5")
        buf.write("^\60\2\u0293\u0294\5^\60\2\u0294\u0296\3\2\2\2\u0295\u0290")
        buf.write("\3\2\2\2\u0295\u0296\3\2\2\2\u0296\u0297\3\2\2\2\u0297")
        buf.write("\u0298\5f\64\2\u0298\u029c\5f\64\2\u0299\u029a\5f\64\2")
        buf.write("\u029a\u029b\5f\64\2\u029b\u029d\3\2\2\2\u029c\u0299\3")
        buf.write("\2\2\2\u029c\u029d\3\2\2\2\u029d\63\3\2\2\2\u029e\u02cb")
        buf.write("\5\66\34\2\u029f\u02a1\7\f\2\2\u02a0\u02a2\7\u0093\2\2")
        buf.write("\u02a1\u02a0\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a3\3")
        buf.write("\2\2\2\u02a3\u02cb\7\u008d\2\2\u02a4\u02a5\7G\2\2\u02a5")
        buf.write("\u02a6\7\u0089\2\2\u02a6\u02a7\7\u0089\2\2\u02a7\u02a8")
        buf.write("\5j\66\2\u02a8\u02a9\5j\66\2\u02a9\u02aa\5j\66\2\u02aa")
        buf.write("\u02cb\3\2\2\2\u02ab\u02ad\7B\2\2\u02ac\u02ae\7\u0093")
        buf.write("\2\2\u02ad\u02ac\3\2\2\2\u02ad\u02ae\3\2\2\2\u02ae\u02af")
        buf.write("\3\2\2\2\u02af\u02cb\5j\66\2\u02b0\u02b2\7\24\2\2\u02b1")
        buf.write("\u02b3\7\u0093\2\2\u02b2\u02b1\3\2\2\2\u02b2\u02b3\3\2")
        buf.write("\2\2\u02b3\u02b4\3\2\2\2\u02b4\u02cb\7\u0089\2\2\u02b5")
        buf.write("\u02b7\7H\2\2\u02b6\u02b8\7\u0093\2\2\u02b7\u02b6\3\2")
        buf.write("\2\2\u02b7\u02b8\3\2\2\2\u02b8\u02b9\3\2\2\2\u02b9\u02cb")
        buf.write("\5j\66\2\u02ba\u02bc\7I\2\2\u02bb\u02bd\7\u0093\2\2\u02bc")
        buf.write("\u02bb\3\2\2\2\u02bc\u02bd\3\2\2\2\u02bd\u02be\3\2\2\2")
        buf.write("\u02be\u02cb\5j\66\2\u02bf\u02c1\7\27\2\2\u02c0\u02c2")
        buf.write("\7\u0093\2\2\u02c1\u02c0\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2")
        buf.write("\u02c3\3\2\2\2\u02c3\u02cb\7C\2\2\u02c4\u02c5\7\31\2\2")
        buf.write("\u02c5\u02c6\7\33\2\2\u02c6\u02cb\5j\66\2\u02c7\u02cb")
        buf.write("\58\35\2\u02c8\u02cb\7\34\2\2\u02c9\u02cb\7K\2\2\u02ca")
        buf.write("\u029e\3\2\2\2\u02ca\u029f\3\2\2\2\u02ca\u02a4\3\2\2\2")
        buf.write("\u02ca\u02ab\3\2\2\2\u02ca\u02b0\3\2\2\2\u02ca\u02b5\3")
        buf.write("\2\2\2\u02ca\u02ba\3\2\2\2\u02ca\u02bf\3\2\2\2\u02ca\u02c4")
        buf.write("\3\2\2\2\u02ca\u02c7\3\2\2\2\u02ca\u02c8\3\2\2\2\u02ca")
        buf.write("\u02c9\3\2\2\2\u02cb\65\3\2\2\2\u02cc\u02cd\7\7\2\2\u02cd")
        buf.write("\u02ce\5^\60\2\u02ce\u02cf\5^\60\2\u02cf\u02d0\5^\60\2")
        buf.write("\u02d0\u02d1\5^\60\2\u02d1\u02d2\5^\60\2\u02d2\u02d3\5")
        buf.write("f\64\2\u02d3\u02d4\5f\64\2\u02d4\67\3\2\2\2\u02d5\u02d6")
        buf.write("\7J\2\2\u02d6\u02d7\5^\60\2\u02d7\u02d8\5j\66\2\u02d8")
        buf.write("\u02d9\5j\66\2\u02d99\3\2\2\2\u02da\u0303\5<\37\2\u02db")
        buf.write("\u0303\5> \2\u02dc\u0303\5@!\2\u02dd\u0303\5B\"\2\u02de")
        buf.write("\u0303\5D#\2\u02df\u0303\5F$\2\u02e0\u0303\5H%\2\u02e1")
        buf.write("\u0303\5J&\2\u02e2\u0303\5L\'\2\u02e3\u02e5\7\f\2\2\u02e4")
        buf.write("\u02e6\7\u0093\2\2\u02e5\u02e4\3\2\2\2\u02e5\u02e6\3\2")
        buf.write("\2\2\u02e6\u02e7\3\2\2\2\u02e7\u0303\7\u008d\2\2\u02e8")
        buf.write("\u02ea\7U\2\2\u02e9\u02eb\7\u0093\2\2\u02ea\u02e9\3\2")
        buf.write("\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02ec\3\2\2\2\u02ec\u0303")
        buf.write("\5j\66\2\u02ed\u02ee\7B\2\2\u02ee\u02f0\5j\66\2\u02ef")
        buf.write("\u02f1\5j\66\2\u02f0\u02ef\3\2\2\2\u02f0\u02f1\3\2\2\2")
        buf.write("\u02f1\u0303\3\2\2\2\u02f2\u02f3\7\27\2\2\u02f3\u0303")
        buf.write("\7E\2\2\u02f4\u02f5\7\31\2\2\u02f5\u02f6\7\33\2\2\u02f6")
        buf.write("\u02fd\5j\66\2\u02f7\u02fe\7a\2\2\u02f8\u02fa\7\f\2\2")
        buf.write("\u02f9\u02fb\7\u0093\2\2\u02fa\u02f9\3\2\2\2\u02fa\u02fb")
        buf.write("\3\2\2\2\u02fb\u02fc\3\2\2\2\u02fc\u02fe\7\u008d\2\2\u02fd")
        buf.write("\u02f7\3\2\2\2\u02fd\u02f8\3\2\2\2\u02fe\u02ff\3\2\2\2")
        buf.write("\u02ff\u0300\7\u008d\2\2\u0300\u0303\3\2\2\2\u0301\u0303")
        buf.write("\7\34\2\2\u0302\u02da\3\2\2\2\u0302\u02db\3\2\2\2\u0302")
        buf.write("\u02dc\3\2\2\2\u0302\u02dd\3\2\2\2\u0302\u02de\3\2\2\2")
        buf.write("\u0302\u02df\3\2\2\2\u0302\u02e0\3\2\2\2\u0302\u02e1\3")
        buf.write("\2\2\2\u0302\u02e2\3\2\2\2\u0302\u02e3\3\2\2\2\u0302\u02e8")
        buf.write("\3\2\2\2\u0302\u02ed\3\2\2\2\u0302\u02f2\3\2\2\2\u0302")
        buf.write("\u02f4\3\2\2\2\u0302\u0301\3\2\2\2\u0303;\3\2\2\2\u0304")
        buf.write("\u0305\7M\2\2\u0305\u0307\5^\60\2\u0306\u0308\5^\60\2")
        buf.write("\u0307\u0306\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u0309\3")
        buf.write("\2\2\2\u0309\u030b\5j\66\2\u030a\u030c\5j\66\2\u030b\u030a")
        buf.write("\3\2\2\2\u030b\u030c\3\2\2\2\u030c=\3\2\2\2\u030d\u030e")
        buf.write("\7J\2\2\u030e\u030f\5^\60\2\u030f\u0310\5j\66\2\u0310")
        buf.write("?\3\2\2\2\u0311\u0312\7N\2\2\u0312\u0313\5^\60\2\u0313")
        buf.write("\u0314\5^\60\2\u0314\u0315\5^\60\2\u0315\u0317\7\u008d")
        buf.write("\2\2\u0316\u0318\7\u008a\2\2\u0317\u0316\3\2\2\2\u0317")
        buf.write("\u0318\3\2\2\2\u0318\u0319\3\2\2\2\u0319\u031a\7\u008d")
        buf.write("\2\2\u031aA\3\2\2\2\u031b\u031c\7O\2\2\u031c\u031d\5^")
        buf.write("\60\2\u031dC\3\2\2\2\u031e\u031f\7P\2\2\u031f\u0320\5")
        buf.write("^\60\2\u0320E\3\2\2\2\u0321\u0322\7Q\2\2\u0322\u0323\5")
        buf.write("^\60\2\u0323G\3\2\2\2\u0324\u0325\7R\2\2\u0325\u0326\5")
        buf.write("^\60\2\u0326I\3\2\2\2\u0327\u0328\7S\2\2\u0328\u0329\7")
        buf.write("\u008d\2\2\u0329\u032a\5^\60\2\u032a\u032b\5^\60\2\u032b")
        buf.write("\u032c\5^\60\2\u032c\u032d\5^\60\2\u032d\u032f\5^\60\2")
        buf.write("\u032e\u0330\5^\60\2\u032f\u032e\3\2\2\2\u032f\u0330\3")
        buf.write("\2\2\2\u0330K\3\2\2\2\u0331\u0332\7T\2\2\u0332\u0333\5")
        buf.write("^\60\2\u0333M\3\2\2\2\u0334\u0388\5P)\2\u0335\u0337\7")
        buf.write("\f\2\2\u0336\u0338\7\u0093\2\2\u0337\u0336\3\2\2\2\u0337")
        buf.write("\u0338\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u0388\7\u008d")
        buf.write("\2\2\u033a\u0388\7W\2\2\u033b\u033c\7G\2\2\u033c\u033e")
        buf.write("\7\u0089\2\2\u033d\u033f\7\u0089\2\2\u033e\u033d\3\2\2")
        buf.write("\2\u033e\u033f\3\2\2\2\u033f\u0341\3\2\2\2\u0340\u0342")
        buf.write("\7\u0089\2\2\u0341\u0340\3\2\2\2\u0341\u0342\3\2\2\2\u0342")
        buf.write("\u0344\3\2\2\2\u0343\u0345\7\u0089\2\2\u0344\u0343\3\2")
        buf.write("\2\2\u0344\u0345\3\2\2\2\u0345\u0346\3\2\2\2\u0346\u0388")
        buf.write("\5j\66\2\u0347\u0349\7U\2\2\u0348\u034a\7\u0093\2\2\u0349")
        buf.write("\u0348\3\2\2\2\u0349\u034a\3\2\2\2\u034a\u034b\3\2\2\2")
        buf.write("\u034b\u0388\5j\66\2\u034c\u034e\7B\2\2\u034d\u034f\7")
        buf.write("\u0093\2\2\u034e\u034d\3\2\2\2\u034e\u034f\3\2\2\2\u034f")
        buf.write("\u0350\3\2\2\2\u0350\u0388\5j\66\2\u0351\u0353\7\24\2")
        buf.write("\2\u0352\u0354\7\u0093\2\2\u0353\u0352\3\2\2\2\u0353\u0354")
        buf.write("\3\2\2\2\u0354\u0355\3\2\2\2\u0355\u0388\7\u0089\2\2\u0356")
        buf.write("\u0357\7X\2\2\u0357\u0358\7\u0089\2\2\u0358\u0359\7\u0089")
        buf.write("\2\2\u0359\u035d\7\u0089\2\2\u035a\u035b\7\u0089\2\2\u035b")
        buf.write("\u035c\7\u0089\2\2\u035c\u035e\7\u0089\2\2\u035d\u035a")
        buf.write("\3\2\2\2\u035d\u035e\3\2\2\2\u035e\u0362\3\2\2\2\u035f")
        buf.write("\u0360\7\u0089\2\2\u0360\u0361\7\u0089\2\2\u0361\u0363")
        buf.write("\7\u0089\2\2\u0362\u035f\3\2\2\2\u0362\u0363\3\2\2\2\u0363")
        buf.write("\u0367\3\2\2\2\u0364\u0365\7\u0089\2\2\u0365\u0366\7\u0089")
        buf.write("\2\2\u0366\u0368\7\u0089\2\2\u0367\u0364\3\2\2\2\u0367")
        buf.write("\u0368\3\2\2\2\u0368\u0388\3\2\2\2\u0369\u036b\7\27\2")
        buf.write("\2\u036a\u036c\7\u0093\2\2\u036b\u036a\3\2\2\2\u036b\u036c")
        buf.write("\3\2\2\2\u036c\u036d\3\2\2\2\u036d\u0388\7C\2\2\u036e")
        buf.write("\u036f\7\31\2\2\u036f\u0370\7\33\2\2\u0370\u0377\5j\66")
        buf.write("\2\u0371\u0378\7a\2\2\u0372\u0374\7\f\2\2\u0373\u0375")
        buf.write("\7\u0093\2\2\u0374\u0373\3\2\2\2\u0374\u0375\3\2\2\2\u0375")
        buf.write("\u0376\3\2\2\2\u0376\u0378\7\u008d\2\2\u0377\u0371\3\2")
        buf.write("\2\2\u0377\u0372\3\2\2\2\u0378\u0388\3\2\2\2\u0379\u0388")
        buf.write("\7\34\2\2\u037a\u037b\7Y\2\2\u037b\u037c\7Z\2\2\u037c")
        buf.write("\u037e\7\u0089\2\2\u037d\u037f\7\u0089\2\2\u037e\u037d")
        buf.write("\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0381\3\2\2\2\u0380")
        buf.write("\u0382\7\u0089\2\2\u0381\u0380\3\2\2\2\u0381\u0382\3\2")
        buf.write("\2\2\u0382\u0384\3\2\2\2\u0383\u0385\7\u0089\2\2\u0384")
        buf.write("\u0383\3\2\2\2\u0384\u0385\3\2\2\2\u0385\u0388\3\2\2\2")
        buf.write("\u0386\u0388\7K\2\2\u0387\u0334\3\2\2\2\u0387\u0335\3")
        buf.write("\2\2\2\u0387\u033a\3\2\2\2\u0387\u033b\3\2\2\2\u0387\u0347")
        buf.write("\3\2\2\2\u0387\u034c\3\2\2\2\u0387\u0351\3\2\2\2\u0387")
        buf.write("\u0356\3\2\2\2\u0387\u0369\3\2\2\2\u0387\u036e\3\2\2\2")
        buf.write("\u0387\u0379\3\2\2\2\u0387\u037a\3\2\2\2\u0387\u0386\3")
        buf.write("\2\2\2\u0388O\3\2\2\2\u0389\u038a\7\7\2\2\u038a\u038b")
        buf.write("\5^\60\2\u038b\u038c\5^\60\2\u038c\u038d\5^\60\2\u038d")
        buf.write("\u0393\5^\60\2\u038e\u038f\5^\60\2\u038f\u0390\5^\60\2")
        buf.write("\u0390\u0391\5^\60\2\u0391\u0392\5^\60\2\u0392\u0394\3")
        buf.write("\2\2\2\u0393\u038e\3\2\2\2\u0393\u0394\3\2\2\2\u0394\u039a")
        buf.write("\3\2\2\2\u0395\u0396\5^\60\2\u0396\u0397\5^\60\2\u0397")
        buf.write("\u0398\5^\60\2\u0398\u0399\5^\60\2\u0399\u039b\3\2\2\2")
        buf.write("\u039a\u0395\3\2\2\2\u039a\u039b\3\2\2\2\u039b\u03a1\3")
        buf.write("\2\2\2\u039c\u039d\5^\60\2\u039d\u039e\5^\60\2\u039e\u039f")
        buf.write("\5^\60\2\u039f\u03a0\5^\60\2\u03a0\u03a2\3\2\2\2\u03a1")
        buf.write("\u039c\3\2\2\2\u03a1\u03a2\3\2\2\2\u03a2Q\3\2\2\2\u03a3")
        buf.write("\u03c4\5T+\2\u03a4\u03a6\7\f\2\2\u03a5\u03a7\7\u0093\2")
        buf.write("\2\u03a6\u03a5\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7\u03a8")
        buf.write("\3\2\2\2\u03a8\u03c4\7\u008d\2\2\u03a9\u03aa\7A\2\2\u03aa")
        buf.write("\u03ab\5j\66\2\u03ab\u03ac\5j\66\2\u03ac\u03ad\5j\66\2")
        buf.write("\u03ad\u03ae\5j\66\2\u03ae\u03af\5j\66\2\u03af\u03c4\3")
        buf.write("\2\2\2\u03b0\u03b2\7B\2\2\u03b1\u03b3\7\u0093\2\2\u03b2")
        buf.write("\u03b1\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b4\3\2\2\2")
        buf.write("\u03b4\u03c4\5j\66\2\u03b5\u03b7\7\24\2\2\u03b6\u03b8")
        buf.write("\7\u0093\2\2\u03b7\u03b6\3\2\2\2\u03b7\u03b8\3\2\2\2\u03b8")
        buf.write("\u03b9\3\2\2\2\u03b9\u03c4\7\u0089\2\2\u03ba\u03bc\7\27")
        buf.write("\2\2\u03bb\u03bd\7\u0093\2\2\u03bc\u03bb\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03be\3\2\2\2\u03be\u03c4\7C\2\2")
        buf.write("\u03bf\u03c0\7\31\2\2\u03c0\u03c1\7\33\2\2\u03c1\u03c4")
        buf.write("\5j\66\2\u03c2\u03c4\7\34\2\2\u03c3\u03a3\3\2\2\2\u03c3")
        buf.write("\u03a4\3\2\2\2\u03c3\u03a9\3\2\2\2\u03c3\u03b0\3\2\2\2")
        buf.write("\u03c3\u03b5\3\2\2\2\u03c3\u03ba\3\2\2\2\u03c3\u03bf\3")
        buf.write("\2\2\2\u03c3\u03c2\3\2\2\2\u03c4S\3\2\2\2\u03c5\u03c6")
        buf.write("\7\7\2\2\u03c6\u03c7\5^\60\2\u03c7\u03c8\5^\60\2\u03c8")
        buf.write("\u03c9\5^\60\2\u03c9\u03ca\5^\60\2\u03ca\u03cb\5^\60\2")
        buf.write("\u03cb\u03cc\5^\60\2\u03cc\u03cd\5f\64\2\u03cd\u03ce\5")
        buf.write("f\64\2\u03ceU\3\2\2\2\u03cf\u03f2\5X-\2\u03d0\u03d2\7")
        buf.write("\f\2\2\u03d1\u03d3\7\u0093\2\2\u03d2\u03d1\3\2\2\2\u03d2")
        buf.write("\u03d3\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4\u03f2\7\u008d")
        buf.write("\2\2\u03d5\u03d6\7A\2\2\u03d6\u03d7\5j\66\2\u03d7\u03d8")
        buf.write("\5j\66\2\u03d8\u03d9\5j\66\2\u03d9\u03da\5j\66\2\u03da")
        buf.write("\u03db\5j\66\2\u03db\u03dc\5j\66\2\u03dc\u03dd\5j\66\2")
        buf.write("\u03dd\u03f2\3\2\2\2\u03de\u03e0\7B\2\2\u03df\u03e1\7")
        buf.write("\u0093\2\2\u03e0\u03df\3\2\2\2\u03e0\u03e1\3\2\2\2\u03e1")
        buf.write("\u03e2\3\2\2\2\u03e2\u03f2\5j\66\2\u03e3\u03e5\7\24\2")
        buf.write("\2\u03e4\u03e6\7\u0093\2\2\u03e5\u03e4\3\2\2\2\u03e5\u03e6")
        buf.write("\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03f2\7\u0089\2\2\u03e8")
        buf.write("\u03ea\7\27\2\2\u03e9\u03eb\7\u0093\2\2\u03ea\u03e9\3")
        buf.write("\2\2\2\u03ea\u03eb\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u03f2")
        buf.write("\7C\2\2\u03ed\u03ee\7\31\2\2\u03ee\u03ef\7\33\2\2\u03ef")
        buf.write("\u03f2\5j\66\2\u03f0\u03f2\7\34\2\2\u03f1\u03cf\3\2\2")
        buf.write("\2\u03f1\u03d0\3\2\2\2\u03f1\u03d5\3\2\2\2\u03f1\u03de")
        buf.write("\3\2\2\2\u03f1\u03e3\3\2\2\2\u03f1\u03e8\3\2\2\2\u03f1")
        buf.write("\u03ed\3\2\2\2\u03f1\u03f0\3\2\2\2\u03f2W\3\2\2\2\u03f3")
        buf.write("\u03f4\7\7\2\2\u03f4\u03f5\5^\60\2\u03f5\u03f6\5^\60\2")
        buf.write("\u03f6\u03f7\5^\60\2\u03f7\u03f8\5^\60\2\u03f8\u03f9\5")
        buf.write("^\60\2\u03f9\u03fa\5^\60\2\u03fa\u03fb\5^\60\2\u03fb\u03fc")
        buf.write("\5^\60\2\u03fc\u03fd\5f\64\2\u03fd\u03fe\5f\64\2\u03fe")
        buf.write("Y\3\2\2\2\u03ff\u0434\5\\/\2\u0400\u0402\7\f\2\2\u0401")
        buf.write("\u0403\7\u0093\2\2\u0402\u0401\3\2\2\2\u0402\u0403\3\2")
        buf.write("\2\2\u0403\u0404\3\2\2\2\u0404\u0434\7\u008d\2\2\u0405")
        buf.write("\u0407\7^\2\2\u0406\u0408\7\u0093\2\2\u0407\u0406\3\2")
        buf.write("\2\2\u0407\u0408\3\2\2\2\u0408\u0409\3\2\2\2\u0409\u0434")
        buf.write("\7\u008d\2\2\u040a\u040b\7G\2\2\u040b\u040c\7\u0089\2")
        buf.write("\2\u040c\u040d\7\u0089\2\2\u040d\u0434\5j\66\2\u040e\u0410")
        buf.write("\7U\2\2\u040f\u0411\7\u0093\2\2\u0410\u040f\3\2\2\2\u0410")
        buf.write("\u0411\3\2\2\2\u0411\u0412\3\2\2\2\u0412\u0434\5j\66\2")
        buf.write("\u0413\u0415\7B\2\2\u0414\u0416\7\u0093\2\2\u0415\u0414")
        buf.write("\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0417\3\2\2\2\u0417")
        buf.write("\u0434\5j\66\2\u0418\u041a\7\24\2\2\u0419\u041b\7\u0093")
        buf.write("\2\2\u041a\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c")
        buf.write("\3\2\2\2\u041c\u0434\7\u0089\2\2\u041d\u041f\7\27\2\2")
        buf.write("\u041e\u0420\7\u0093\2\2\u041f\u041e\3\2\2\2\u041f\u0420")
        buf.write("\3\2\2\2\u0420\u0421\3\2\2\2\u0421\u0434\7C\2\2\u0422")
        buf.write("\u0423\7\31\2\2\u0423\u0424\7\33\2\2\u0424\u042b\5j\66")
        buf.write("\2\u0425\u042c\7a\2\2\u0426\u0428\7\f\2\2\u0427\u0429")
        buf.write("\7\u0093\2\2\u0428\u0427\3\2\2\2\u0428\u0429\3\2\2\2\u0429")
        buf.write("\u042a\3\2\2\2\u042a\u042c\7\u008d\2\2\u042b\u0425\3\2")
        buf.write("\2\2\u042b\u0426\3\2\2\2\u042c\u0434\3\2\2\2\u042d\u0434")
        buf.write("\7\34\2\2\u042e\u042f\7Y\2\2\u042f\u0430\7_\2\2\u0430")
        buf.write("\u0431\7\u0089\2\2\u0431\u0434\7\u0089\2\2\u0432\u0434")
        buf.write("\7K\2\2\u0433\u03ff\3\2\2\2\u0433\u0400\3\2\2\2\u0433")
        buf.write("\u0405\3\2\2\2\u0433\u040a\3\2\2\2\u0433\u040e\3\2\2\2")
        buf.write("\u0433\u0413\3\2\2\2\u0433\u0418\3\2\2\2\u0433\u041d\3")
        buf.write("\2\2\2\u0433\u0422\3\2\2\2\u0433\u042d\3\2\2\2\u0433\u042e")
        buf.write("\3\2\2\2\u0433\u0432\3\2\2\2\u0434[\3\2\2\2\u0435\u0436")
        buf.write("\7\7\2\2\u0436\u0437\5^\60\2\u0437\u0438\5^\60\2\u0438")
        buf.write("\u0439\5^\60\2\u0439\u043a\5^\60\2\u043a\u043b\5^\60\2")
        buf.write("\u043b\u043c\5^\60\2\u043c\u043d\5^\60\2\u043d\u043e\5")
        buf.write("^\60\2\u043e\u043f\5^\60\2\u043f\u0440\5^\60\2\u0440\u0442")
        buf.write("\5^\60\2\u0441\u0443\5^\60\2\u0442\u0441\3\2\2\2\u0442")
        buf.write("\u0443\3\2\2\2\u0443]\3\2\2\2\u0444\u0445\7\u0090\2\2")
        buf.write("\u0445\u0446\5`\61\2\u0446\u0447\7\u0091\2\2\u0447_\3")
        buf.write("\2\2\2\u0448\u044d\5b\62\2\u0449\u044a\7\u0084\2\2\u044a")
        buf.write("\u044c\5b\62\2\u044b\u0449\3\2\2\2\u044c\u044f\3\2\2\2")
        buf.write("\u044d\u044b\3\2\2\2\u044d\u044e\3\2\2\2\u044ea\3\2\2")
        buf.write("\2\u044f\u044d\3\2\2\2\u0450\u0455\5d\63\2\u0451\u0452")
        buf.write("\7\u0085\2\2\u0452\u0454\5d\63\2\u0453\u0451\3\2\2\2\u0454")
        buf.write("\u0457\3\2\2\2\u0455\u0453\3\2\2\2\u0455\u0456\3\2\2\2")
        buf.write("\u0456c\3\2\2\2\u0457\u0455\3\2\2\2\u0458\u0459\b\63\1")
        buf.write("\2\u0459\u045a\7\u0090\2\2\u045a\u045b\5`\61\2\u045b\u045c")
        buf.write("\7\u0091\2\2\u045c\u04e9\3\2\2\2\u045d\u04e9\7a\2\2\u045e")
        buf.write("\u045f\7c\2\2\u045f\u0460\t\2\2\2\u0460\u0461\t\3\2\2")
        buf.write("\u0461\u04e9\t\2\2\2\u0462\u0464\7d\2\2\u0463\u0465\7")
        buf.write("\u009d\2\2\u0464\u0463\3\2\2\2\u0464\u0465\3\2\2\2\u0465")
        buf.write("\u0466\3\2\2\2\u0466\u0467\7\u009e\2\2\u0467\u0468\7\u009f")
        buf.write("\2\2\u0468\u04e9\5h\65\2\u0469\u046a\7e\2\2\u046a\u04e9")
        buf.write("\5d\63 \u046b\u046c\7f\2\2\u046c\u04e9\5d\63\37\u046d")
        buf.write("\u046e\7g\2\2\u046e\u04e9\5d\63\36\u046f\u0476\7h\2\2")
        buf.write("\u0470\u0477\7\u008e\2\2\u0471\u0474\7\u008d\2\2\u0472")
        buf.write("\u0473\7\u0092\2\2\u0473\u0475\7\u008d\2\2\u0474\u0472")
        buf.write("\3\2\2\2\u0474\u0475\3\2\2\2\u0475\u0477\3\2\2\2\u0476")
        buf.write("\u0470\3\2\2\2\u0476\u0471\3\2\2\2\u0477\u04e9\3\2\2\2")
        buf.write("\u0478\u0479\7i\2\2\u0479\u047a\5h\65\2\u047a\u047b\5")
        buf.write("h\65\2\u047b\u047c\5h\65\2\u047c\u047d\5h\65\2\u047d\u047e")
        buf.write("\5h\65\2\u047e\u047f\5h\65\2\u047f\u04e9\3\2\2\2\u0480")
        buf.write("\u04e9\7j\2\2\u0481\u0482\7k\2\2\u0482\u04e9\7\u0089\2")
        buf.write("\2\u0483\u04e9\7l\2\2\u0484\u048b\7m\2\2\u0485\u048c\7")
        buf.write("\u008e\2\2\u0486\u0489\7\u008d\2\2\u0487\u0488\7\u0092")
        buf.write("\2\2\u0488\u048a\7\u008d\2\2\u0489\u0487\3\2\2\2\u0489")
        buf.write("\u048a\3\2\2\2\u048a\u048c\3\2\2\2\u048b\u0485\3\2\2\2")
        buf.write("\u048b\u0486\3\2\2\2\u048c\u04e9\3\2\2\2\u048d\u04e9\7")
        buf.write("n\2\2\u048e\u048f\7\u0086\2\2\u048f\u04e9\5d\63\26\u0490")
        buf.write("\u0491\7o\2\2\u0491\u0492\7\u0090\2\2\u0492\u0494\5h\65")
        buf.write("\2\u0493\u0495\7\u0087\2\2\u0494\u0493\3\2\2\2\u0494\u0495")
        buf.write("\3\2\2\2\u0495\u0496\3\2\2\2\u0496\u0498\5h\65\2\u0497")
        buf.write("\u0499\7\u0087\2\2\u0498\u0497\3\2\2\2\u0498\u0499\3\2")
        buf.write("\2\2\u0499\u049a\3\2\2\2\u049a\u049b\5h\65\2\u049b\u049c")
        buf.write("\7\u0091\2\2\u049c\u049d\7p\2\2\u049d\u049e\5h\65\2\u049e")
        buf.write("\u04e9\3\2\2\2\u049f\u04a0\7o\2\2\u04a0\u04a1\7\u0090")
        buf.write("\2\2\u04a1\u04a3\7\u0082\2\2\u04a2\u04a4\7\u0093\2\2\u04a3")
        buf.write("\u04a2\3\2\2\2\u04a3\u04a4\3\2\2\2\u04a4\u04a5\3\2\2\2")
        buf.write("\u04a5\u04a7\5^\60\2\u04a6\u04a8\7\u0087\2\2\u04a7\u04a6")
        buf.write("\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04ae\3\2\2\2\u04a9")
        buf.write("\u04ab\7\u0083\2\2\u04aa\u04ac\7\u0093\2\2\u04ab\u04aa")
        buf.write("\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad")
        buf.write("\u04af\5^\60\2\u04ae\u04a9\3\2\2\2\u04ae\u04af\3\2\2\2")
        buf.write("\u04af\u04b0\3\2\2\2\u04b0\u04b1\7\u0091\2\2\u04b1\u04b2")
        buf.write("\7p\2\2\u04b2\u04b3\5h\65\2\u04b3\u04e9\3\2\2\2\u04b4")
        buf.write("\u04e9\7q\2\2\u04b5\u04e9\7r\2\2\u04b6\u04bd\7s\2\2\u04b7")
        buf.write("\u04be\7\u008f\2\2\u04b8\u04bb\7\u0089\2\2\u04b9\u04ba")
        buf.write("\7\u0092\2\2\u04ba\u04bc\7\u0089\2\2\u04bb\u04b9\3\2\2")
        buf.write("\2\u04bb\u04bc\3\2\2\2\u04bc\u04be\3\2\2\2\u04bd\u04b7")
        buf.write("\3\2\2\2\u04bd\u04b8\3\2\2\2\u04be\u04e9\3\2\2\2\u04bf")
        buf.write("\u04c6\7t\2\2\u04c0\u04c7\7\u008e\2\2\u04c1\u04c4\7\u008d")
        buf.write("\2\2\u04c2\u04c3\7\u0092\2\2\u04c3\u04c5\7\u008d\2\2\u04c4")
        buf.write("\u04c2\3\2\2\2\u04c4\u04c5\3\2\2\2\u04c5\u04c7\3\2\2\2")
        buf.write("\u04c6\u04c0\3\2\2\2\u04c6\u04c1\3\2\2\2\u04c7\u04e9\3")
        buf.write("\2\2\2\u04c8\u04d4\7v\2\2\u04c9\u04d5\7\u008e\2\2\u04ca")
        buf.write("\u04cd\7\u008d\2\2\u04cb\u04cc\7\u0092\2\2\u04cc\u04ce")
        buf.write("\7\u008d\2\2\u04cd\u04cb\3\2\2\2\u04cd\u04ce\3\2\2\2\u04ce")
        buf.write("\u04d5\3\2\2\2\u04cf\u04d2\7\u008c\2\2\u04d0\u04d1\7\u0092")
        buf.write("\2\2\u04d1\u04d3\7\u008c\2\2\u04d2\u04d0\3\2\2\2\u04d2")
        buf.write("\u04d3\3\2\2\2\u04d3\u04d5\3\2\2\2\u04d4\u04c9\3\2\2\2")
        buf.write("\u04d4\u04ca\3\2\2\2\u04d4\u04cf\3\2\2\2\u04d5\u04e9\3")
        buf.write("\2\2\2\u04d6\u04d7\7w\2\2\u04d7\u04d8\5h\65\2\u04d8\u04d9")
        buf.write("\5h\65\2\u04d9\u04da\5h\65\2\u04da\u04db\5h\65\2\u04db")
        buf.write("\u04dc\5h\65\2\u04dc\u04dd\5h\65\2\u04dd\u04e9\3\2\2\2")
        buf.write("\u04de\u04e9\7x\2\2\u04df\u04e9\7y\2\2\u04e0\u04e9\7z")
        buf.write("\2\2\u04e1\u04e9\7{\2\2\u04e2\u04e9\7|\2\2\u04e3\u04e9")
        buf.write("\7}\2\2\u04e4\u04e9\7~\2\2\u04e5\u04e9\7\177\2\2\u04e6")
        buf.write("\u04e9\7\u0080\2\2\u04e7\u04e9\7\u0081\2\2\u04e8\u0458")
        buf.write("\3\2\2\2\u04e8\u045d\3\2\2\2\u04e8\u045e\3\2\2\2\u04e8")
        buf.write("\u0462\3\2\2\2\u04e8\u0469\3\2\2\2\u04e8\u046b\3\2\2\2")
        buf.write("\u04e8\u046d\3\2\2\2\u04e8\u046f\3\2\2\2\u04e8\u0478\3")
        buf.write("\2\2\2\u04e8\u0480\3\2\2\2\u04e8\u0481\3\2\2\2\u04e8\u0483")
        buf.write("\3\2\2\2\u04e8\u0484\3\2\2\2\u04e8\u048d\3\2\2\2\u04e8")
        buf.write("\u048e\3\2\2\2\u04e8\u0490\3\2\2\2\u04e8\u049f\3\2\2\2")
        buf.write("\u04e8\u04b4\3\2\2\2\u04e8\u04b5\3\2\2\2\u04e8\u04b6\3")
        buf.write("\2\2\2\u04e8\u04bf\3\2\2\2\u04e8\u04c8\3\2\2\2\u04e8\u04d6")
        buf.write("\3\2\2\2\u04e8\u04de\3\2\2\2\u04e8\u04df\3\2\2\2\u04e8")
        buf.write("\u04e0\3\2\2\2\u04e8\u04e1\3\2\2\2\u04e8\u04e2\3\2\2\2")
        buf.write("\u04e8\u04e3\3\2\2\2\u04e8\u04e4\3\2\2\2\u04e8\u04e5\3")
        buf.write("\2\2\2\u04e8\u04e6\3\2\2\2\u04e8\u04e7\3\2\2\2\u04e9\u04f2")
        buf.write("\3\2\2\2\u04ea\u04eb\f#\2\2\u04eb\u04ec\7b\2\2\u04ec\u04f1")
        buf.write("\5h\65\2\u04ed\u04ee\f\17\2\2\u04ee\u04ef\7u\2\2\u04ef")
        buf.write("\u04f1\5h\65\2\u04f0\u04ea\3\2\2\2\u04f0\u04ed\3\2\2\2")
        buf.write("\u04f1\u04f4\3\2\2\2\u04f2\u04f0\3\2\2\2\u04f2\u04f3\3")
        buf.write("\2\2\2\u04f3e\3\2\2\2\u04f4\u04f2\3\2\2\2\u04f5\u04f6")
        buf.write("\t\4\2\2\u04f6g\3\2\2\2\u04f7\u04f8\t\4\2\2\u04f8i\3\2")
        buf.write("\2\2\u04f9\u04fa\t\4\2\2\u04fak\3\2\2\2\u04fb\u0506\7")
        buf.write("`\2\2\u04fc\u0504\7\u00a1\2\2\u04fd\u04ff\7\u00a4\2\2")
        buf.write("\u04fe\u04fd\3\2\2\2\u04ff\u0502\3\2\2\2\u0500\u04fe\3")
        buf.write("\2\2\2\u0500\u0501\3\2\2\2\u0501\u0505\3\2\2\2\u0502\u0500")
        buf.write("\3\2\2\2\u0503\u0505\7\u00a5\2\2\u0504\u0500\3\2\2\2\u0504")
        buf.write("\u0503\3\2\2\2\u0505\u0507\3\2\2\2\u0506\u04fc\3\2\2\2")
        buf.write("\u0506\u0507\3\2\2\2\u0507\u0508\3\2\2\2\u0508\u050c\7")
        buf.write("\u00a2\2\2\u0509\u050b\7\u00a4\2\2\u050a\u0509\3\2\2\2")
        buf.write("\u050b\u050e\3\2\2\2\u050c\u050a\3\2\2\2\u050c\u050d\3")
        buf.write("\2\2\2\u050d\u050f\3\2\2\2\u050e\u050c\3\2\2\2\u050f\u0510")
        buf.write("\7\u00a3\2\2\u0510m\3\2\2\2\u00a9\u0080\u0082\u008b\u0095")
        buf.write("\u009f\u00a9\u00b2\u00bb\u00c4\u00cd\u00d6\u00df\u00e8")
        buf.write("\u00f1\u00f8\u0107\u010c\u0113\u011c\u0121\u012c\u0138")
        buf.write("\u013e\u014b\u0152\u016d\u0173\u0176\u0180\u0183\u0187")
        buf.write("\u018a\u018e\u0191\u0195\u0198\u019c\u019f\u01a3\u01a6")
        buf.write("\u01aa\u01ad\u01b5\u01ba\u01bf\u01c6\u01cb\u01d0\u01d5")
        buf.write("\u01db\u01df\u01ef\u01f5\u01f9\u01fe\u0201\u0205\u020a")
        buf.write("\u020f\u0213\u0219\u021d\u0221\u0224\u0226\u022a\u022f")
        buf.write("\u0239\u023e\u0243\u024a\u0256\u025b\u0266\u026c\u0270")
        buf.write("\u0275\u027a\u0283\u0286\u0289\u0295\u029c\u02a1\u02ad")
        buf.write("\u02b2\u02b7\u02bc\u02c1\u02ca\u02e5\u02ea\u02f0\u02fa")
        buf.write("\u02fd\u0302\u0307\u030b\u0317\u032f\u0337\u033e\u0341")
        buf.write("\u0344\u0349\u034e\u0353\u035d\u0362\u0367\u036b\u0374")
        buf.write("\u0377\u037e\u0381\u0384\u0387\u0393\u039a\u03a1\u03a6")
        buf.write("\u03b2\u03b7\u03bc\u03c3\u03d2\u03e0\u03e5\u03ea\u03f1")
        buf.write("\u0402\u0407\u0410\u0415\u041a\u041f\u0428\u042b\u0433")
        buf.write("\u0442\u044d\u0455\u0464\u0474\u0476\u0489\u048b\u0494")
        buf.write("\u0498\u04a3\u04a7\u04ab\u04ae\u04bb\u04bd\u04c4\u04c6")
        buf.write("\u04cd\u04d2\u04d4\u04e8\u04f0\u04f2\u0500\u0504\u0506")
        buf.write("\u050c")
        return buf.getvalue()


class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'?'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "','", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'('", "')'", "':'", "'='", "'<'", "'>'", "'<='", "'>='", 
                     "'#'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'*'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Averaging", "Bgig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Noe_analysis", "Initialize", "Update", "Gamma", "Kappa", 
                      "Noe_avr_methods", "Noe_potential", "Cutoff", "Cuton", 
                      "From", "To", "Peak", "Spectrum", "Volume", "Ppm1", 
                      "Ppm2", "Restraints", "Dihedral", "Nassign", "Print_any", 
                      "Plane", "Group", "Selection", "Weight", "Harmonic", 
                      "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Rdc_potential", "Coupling", "Coupling_potential", 
                      "Carbon", "Expectation", "PhiStep", "PsiStep", "Rcoil", 
                      "Zero", "Proton", "Observed", "Anisotropy", "Amides", 
                      "Carbons", "Nitrogens", "Oxygens", "RingAtoms", "AlphasAndAmides", 
                      "Error", "Conformation", "Compressed", "Phase", "Size", 
                      "Dimensions", "Danisotropy", "OneBond", "AngleDb", 
                      "DerivFlag", "Angle_dihedral", "Flags", "All", "Around", 
                      "Atom", "Attribute", "BondedTo", "ByGroup", "ByRes", 
                      "Chemical", "Fbox", "Hydrogen", "Id", "Known", "Name", 
                      "NONE", "Point", "Cut", "Previous", "Pseudo", "Residue", 
                      "Resname", "Saround", "SegIdentifier", "Sfbox", "Store_1", 
                      "Store_2", "Store_3", "Store_4", "Store_5", "Store_6", 
                      "Store_7", "Store_8", "Store_9", "Tag", "Tail", "Head", 
                      "Or_op", "And_op", "Not_op", "Comma", "Complex", "Integer", 
                      "Logical", "Real", "Double_quote_string", "Simple_name", 
                      "Simple_names", "Integers", "L_paren", "R_paren", 
                      "Colon", "Equ_op", "Lt_op", "Gt_op", "Leq_op", "Geq_op", 
                      "Neq_op", "SPACE", "COMMENT", "LINE_COMMENT", "SET_VARIABLE", 
                      "Abs", "Attr_properties", "Comparison_ops", "SPACE_ATTR", 
                      "Exclude", "Include", "End_flag", "Class_name", "Any_class", 
                      "SPACE_FLAG" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_dihedral_statement = 16
    RULE_dihedral_assign = 17
    RULE_plane_statement = 18
    RULE_group_statement = 19
    RULE_harmonic_statement = 20
    RULE_sani_statement = 21
    RULE_sani_assign = 22
    RULE_coupling_statement = 23
    RULE_coup_assign = 24
    RULE_carbon_shift_statement = 25
    RULE_carbon_shift_assign = 26
    RULE_carbon_shift_rcoil = 27
    RULE_proton_shift_statement = 28
    RULE_observed = 29
    RULE_proton_shift_rcoil = 30
    RULE_proton_shift_anisotropy = 31
    RULE_proton_shift_amides = 32
    RULE_proton_shift_carbons = 33
    RULE_proton_shift_nitrogens = 34
    RULE_proton_shift_oxygens = 35
    RULE_proton_shift_ring_atoms = 36
    RULE_proton_shift_alphas_and_amides = 37
    RULE_conformation_statement = 38
    RULE_conf_assign = 39
    RULE_diffusion_statement = 40
    RULE_dani_assign = 41
    RULE_one_bond_coupling_statement = 42
    RULE_one_bond_assign = 43
    RULE_angle_db_statement = 44
    RULE_angle_db_assign = 45
    RULE_selection = 46
    RULE_selection_expression = 47
    RULE_term = 48
    RULE_factor = 49
    RULE_number = 50
    RULE_number_f = 51
    RULE_number_s = 52
    RULE_flag_statement = 53

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "dihedral_statement", 
                   "dihedral_assign", "plane_statement", "group_statement", 
                   "harmonic_statement", "sani_statement", "sani_assign", 
                   "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s", "flag_statement" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Averaging=7
    Bgig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Noe_analysis=35
    Initialize=36
    Update=37
    Gamma=38
    Kappa=39
    Noe_avr_methods=40
    Noe_potential=41
    Cutoff=42
    Cuton=43
    From=44
    To=45
    Peak=46
    Spectrum=47
    Volume=48
    Ppm1=49
    Ppm2=50
    Restraints=51
    Dihedral=52
    Nassign=53
    Print_any=54
    Plane=55
    Group=56
    Selection=57
    Weight=58
    Harmonic=59
    Exponent=60
    Normal=61
    Sanisotropy=62
    Coefficients=63
    ForceConstant=64
    Rdc_potential=65
    Coupling=66
    Coupling_potential=67
    Carbon=68
    Expectation=69
    PhiStep=70
    PsiStep=71
    Rcoil=72
    Zero=73
    Proton=74
    Observed=75
    Anisotropy=76
    Amides=77
    Carbons=78
    Nitrogens=79
    Oxygens=80
    RingAtoms=81
    AlphasAndAmides=82
    Error=83
    Conformation=84
    Compressed=85
    Phase=86
    Size=87
    Dimensions=88
    Danisotropy=89
    OneBond=90
    AngleDb=91
    DerivFlag=92
    Angle_dihedral=93
    Flags=94
    All=95
    Around=96
    Atom=97
    Attribute=98
    BondedTo=99
    ByGroup=100
    ByRes=101
    Chemical=102
    Fbox=103
    Hydrogen=104
    Id=105
    Known=106
    Name=107
    NONE=108
    Point=109
    Cut=110
    Previous=111
    Pseudo=112
    Residue=113
    Resname=114
    Saround=115
    SegIdentifier=116
    Sfbox=117
    Store_1=118
    Store_2=119
    Store_3=120
    Store_4=121
    Store_5=122
    Store_6=123
    Store_7=124
    Store_8=125
    Store_9=126
    Tag=127
    Tail=128
    Head=129
    Or_op=130
    And_op=131
    Not_op=132
    Comma=133
    Complex=134
    Integer=135
    Logical=136
    Real=137
    Double_quote_string=138
    Simple_name=139
    Simple_names=140
    Integers=141
    L_paren=142
    R_paren=143
    Colon=144
    Equ_op=145
    Lt_op=146
    Gt_op=147
    Leq_op=148
    Geq_op=149
    Neq_op=150
    SPACE=151
    COMMENT=152
    LINE_COMMENT=153
    SET_VARIABLE=154
    Abs=155
    Attr_properties=156
    Comparison_ops=157
    SPACE_ATTR=158
    Exclude=159
    Include=160
    End_flag=161
    Class_name=162
    Any_class=163
    SPACE_FLAG=164

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Flag_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Assign) | (1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group) | (1 << CnsMRParser.Sanisotropy))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (CnsMRParser.Coupling - 66)) | (1 << (CnsMRParser.Carbon - 66)) | (1 << (CnsMRParser.Proton - 66)) | (1 << (CnsMRParser.Conformation - 66)) | (1 << (CnsMRParser.Danisotropy - 66)) | (1 << (CnsMRParser.OneBond - 66)) | (1 << (CnsMRParser.AngleDb - 66)) | (1 << (CnsMRParser.Flags - 66)))) != 0):
                self.state = 126
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 108
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 109
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 110
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 111
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 112
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 113
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 114
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 115
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 116
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 117
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 118
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 119
                    self.angle_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 120
                    self.flag_statement()
                    pass

                elif la_ == 14:
                    self.state = 121
                    self.noe_assign()
                    pass

                elif la_ == 15:
                    self.state = 122
                    self.dihedral_assign()
                    pass

                elif la_ == 16:
                    self.state = 123
                    self.sani_assign()
                    pass

                elif la_ == 17:
                    self.state = 124
                    self.plane_statement()
                    pass

                elif la_ == 18:
                    self.state = 125
                    self.coup_assign()
                    pass


                self.state = 130
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 131
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 133
            self.match(CnsMRParser.Noe)
            self.state = 137
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 134
                    self.noe_statement() 
                self.state = 139
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 140
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 142
            self.match(CnsMRParser.Restraints)
            self.state = 143
            self.match(CnsMRParser.Dihedral)
            self.state = 147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Scale) | (1 << CnsMRParser.Nassign) | (1 << CnsMRParser.Print_any))) != 0):
                self.state = 144
                self.dihedral_statement()
                self.state = 149
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 150
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 152
            self.match(CnsMRParser.Restraints)
            self.state = 153
            self.match(CnsMRParser.Plane)
            self.state = 157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0):
                self.state = 154
                self.plane_statement()
                self.state = 159
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 160
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 162
            self.match(CnsMRParser.Restraints)
            self.state = 163
            self.match(CnsMRParser.Harmonic)
            self.state = 167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Exponent or _la==CnsMRParser.Normal:
                self.state = 164
                self.harmonic_statement()
                self.state = 169
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 170
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self.match(CnsMRParser.Sanisotropy)
            self.state = 176
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.Coefficients - 5)) | (1 << (CnsMRParser.ForceConstant - 5)))) != 0):
                self.state = 173
                self.sani_statement()
                self.state = 178
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 179
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self.match(CnsMRParser.Coupling)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Cv - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Partition - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.Coefficients - 5)) | (1 << (CnsMRParser.ForceConstant - 5)))) != 0):
                self.state = 182
                self.coupling_statement()
                self.state = 187
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 188
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self.match(CnsMRParser.Carbon)
            self.state = 194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.ForceConstant - 64)) | (1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.PhiStep - 64)) | (1 << (CnsMRParser.PsiStep - 64)) | (1 << (CnsMRParser.Rcoil - 64)) | (1 << (CnsMRParser.Zero - 64)))) != 0):
                self.state = 191
                self.carbon_shift_statement()
                self.state = 196
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 197
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self.match(CnsMRParser.Proton)
            self.state = 203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Classification) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.ForceConstant - 64)) | (1 << (CnsMRParser.Rcoil - 64)) | (1 << (CnsMRParser.Observed - 64)) | (1 << (CnsMRParser.Anisotropy - 64)) | (1 << (CnsMRParser.Amides - 64)) | (1 << (CnsMRParser.Carbons - 64)) | (1 << (CnsMRParser.Nitrogens - 64)) | (1 << (CnsMRParser.Oxygens - 64)) | (1 << (CnsMRParser.RingAtoms - 64)) | (1 << (CnsMRParser.AlphasAndAmides - 64)) | (1 << (CnsMRParser.Error - 64)))) != 0):
                self.state = 200
                self.proton_shift_statement()
                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 206
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def conformation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.match(CnsMRParser.Conformation)
            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.ForceConstant - 64)) | (1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Compressed - 64)) | (1 << (CnsMRParser.Phase - 64)) | (1 << (CnsMRParser.Size - 64)))) != 0):
                self.state = 209
                self.conformation_statement()
                self.state = 214
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 215
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.match(CnsMRParser.Danisotropy)
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.Coefficients - 5)) | (1 << (CnsMRParser.ForceConstant - 5)))) != 0):
                self.state = 218
                self.diffusion_statement()
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 224
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(CnsMRParser.OneBond)
            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.Coefficients - 5)) | (1 << (CnsMRParser.ForceConstant - 5)))) != 0):
                self.state = 227
                self.one_bond_coupling_statement()
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 233
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(CnsMRParser.AngleDb)
            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.ForceConstant - 64)) | (1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Size - 64)) | (1 << (CnsMRParser.DerivFlag - 64)))) != 0):
                self.state = 236
                self.angle_db_statement()
                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 242
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def noe_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Averaging(self):
            return self.getToken(CnsMRParser.Averaging, 0)

        def Noe_avr_methods(self):
            return self.getToken(CnsMRParser.Noe_avr_methods, 0)

        def Bgig(self):
            return self.getToken(CnsMRParser.Bgig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Noe_potential(self):
            return self.getToken(CnsMRParser.Noe_potential, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,27,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 244
                self.match(CnsMRParser.Analysis)
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 245
                    self.match(CnsMRParser.Equ_op)


                self.state = 248
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 249
                self.noe_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 250
                self.match(CnsMRParser.Asymptote)
                self.state = 251
                self.match(CnsMRParser.Simple_name)
                self.state = 252
                self.number_s()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 253
                self.match(CnsMRParser.Averaging)
                self.state = 254
                self.match(CnsMRParser.Simple_name)
                self.state = 255
                self.match(CnsMRParser.Noe_avr_methods)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 256
                self.match(CnsMRParser.Bgig)
                self.state = 257
                self.match(CnsMRParser.Simple_name)
                self.state = 258
                self.number_s()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 259
                self.match(CnsMRParser.Ceiling)
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 260
                    self.match(CnsMRParser.Equ_op)


                self.state = 263
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 264
                self.match(CnsMRParser.Classification)
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 265
                    self.match(CnsMRParser.Equ_op)


                self.state = 268
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 269
                self.match(CnsMRParser.CountViol)
                self.state = 270
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 271
                self.match(CnsMRParser.Cv)
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 272
                    self.match(CnsMRParser.Equ_op)


                self.state = 275
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 276
                self.match(CnsMRParser.Den)
                self.state = 277
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 278
                self.match(CnsMRParser.Den)
                self.state = 279
                self.match(CnsMRParser.Update)
                self.state = 280
                self.match(CnsMRParser.Gamma)
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 281
                    self.match(CnsMRParser.Equ_op)


                self.state = 284
                self.number_s()
                self.state = 285
                self.match(CnsMRParser.Kappa)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 286
                    self.match(CnsMRParser.Equ_op)


                self.state = 289
                self.number_s()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 291
                self.match(CnsMRParser.Distribute)
                self.state = 292
                self.match(CnsMRParser.Simple_name)
                self.state = 293
                self.match(CnsMRParser.Simple_name)
                self.state = 294
                self.number_s()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 298
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 295
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 300
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

                self.state = 301
                self.match(CnsMRParser.End)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 302
                self.match(CnsMRParser.Monomers)
                self.state = 303
                self.match(CnsMRParser.Simple_name)
                self.state = 304
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 305
                self.match(CnsMRParser.Ncount)
                self.state = 306
                self.match(CnsMRParser.Simple_name)
                self.state = 307
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 308
                self.match(CnsMRParser.Nrestraints)
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 309
                    self.match(CnsMRParser.Equ_op)


                self.state = 312
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 313
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 314
                self.match(CnsMRParser.Partition)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 315
                    self.match(CnsMRParser.Equ_op)


                self.state = 318
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 319
                self.match(CnsMRParser.Potential)
                self.state = 320
                self.match(CnsMRParser.Simple_name)
                self.state = 321
                self.match(CnsMRParser.Noe_potential)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 322
                self.match(CnsMRParser.Predict)
                self.state = 323
                self.predict_statement()
                self.state = 324
                self.match(CnsMRParser.End)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 326
                self.match(CnsMRParser.Print)
                self.state = 327
                self.match(CnsMRParser.Threshold)
                self.state = 329
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 328
                    self.match(CnsMRParser.Equ_op)


                self.state = 331
                self.number_s()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 332
                self.match(CnsMRParser.Raverage)
                self.state = 336
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 333
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 338
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

                self.state = 339
                self.match(CnsMRParser.End)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 340
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 341
                self.match(CnsMRParser.Rswitch)
                self.state = 342
                self.match(CnsMRParser.Simple_name)
                self.state = 343
                self.number_s()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 344
                self.match(CnsMRParser.Scale)
                self.state = 345
                self.match(CnsMRParser.Simple_name)
                self.state = 346
                self.number_s()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 347
                self.match(CnsMRParser.SoExponent)
                self.state = 348
                self.match(CnsMRParser.Simple_name)
                self.state = 349
                self.number_s()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 350
                self.match(CnsMRParser.SqConstant)
                self.state = 351
                self.match(CnsMRParser.Simple_name)
                self.state = 352
                self.number_s()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 353
                self.match(CnsMRParser.SqExponent)
                self.state = 354
                self.match(CnsMRParser.Simple_name)
                self.state = 355
                self.number_s()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 356
                self.match(CnsMRParser.SqOffset)
                self.state = 357
                self.match(CnsMRParser.Simple_name)
                self.state = 358
                self.number_s()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 359
                self.match(CnsMRParser.Taverage)
                self.state = 363
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 360
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 365
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

                self.state = 366
                self.match(CnsMRParser.End)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 367
                self.match(CnsMRParser.Temperature)
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 368
                    self.match(CnsMRParser.Equ_op)


                self.state = 371
                self.number_s()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Peak(self):
            return self.getToken(CnsMRParser.Peak, 0)

        def Spectrum(self):
            return self.getToken(CnsMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(CnsMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(CnsMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(CnsMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 374
            self.match(CnsMRParser.Assign)
            self.state = 375
            self.selection()
            self.state = 376
            self.selection()
            self.state = 377
            self.number()
            self.state = 378
            self.number()
            self.state = 379
            self.number()
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Peak:
                self.state = 380
                self.match(CnsMRParser.Peak)
                self.state = 382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 381
                    self.match(CnsMRParser.Equ_op)


                self.state = 384
                self.number()


            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Spectrum:
                self.state = 387
                self.match(CnsMRParser.Spectrum)
                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 388
                    self.match(CnsMRParser.Equ_op)


                self.state = 391
                self.number()


            self.state = 399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Weight:
                self.state = 394
                self.match(CnsMRParser.Weight)
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 395
                    self.match(CnsMRParser.Equ_op)


                self.state = 398
                self.number()


            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Volume:
                self.state = 401
                self.match(CnsMRParser.Volume)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 402
                    self.match(CnsMRParser.Equ_op)


                self.state = 405
                self.number()


            self.state = 413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Ppm1:
                self.state = 408
                self.match(CnsMRParser.Ppm1)
                self.state = 410
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 409
                    self.match(CnsMRParser.Equ_op)


                self.state = 412
                self.number()


            self.state = 420
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Ppm2:
                self.state = 415
                self.match(CnsMRParser.Ppm2)
                self.state = 417
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 416
                    self.match(CnsMRParser.Equ_op)


                self.state = 419
                self.number()


            self.state = 427
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.state = 422
                self.match(CnsMRParser.Cv)
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 423
                    self.match(CnsMRParser.Equ_op)


                self.state = 426
                self.number()


            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 429
                self.match(CnsMRParser.Or_op)
                self.state = 430
                self.selection()
                self.state = 431
                self.selection()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 438
                self.match(CnsMRParser.Cutoff)
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 439
                    self.match(CnsMRParser.Equ_op)


                self.state = 442
                self.number_s()
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self.match(CnsMRParser.Cuton)
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 444
                    self.match(CnsMRParser.Equ_op)


                self.state = 447
                self.number_s()
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 448
                self.match(CnsMRParser.From)
                self.state = 449
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 450
                self.match(CnsMRParser.To)
                self.state = 451
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,0)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 477
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.dihedral_assign()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 455
                self.match(CnsMRParser.Cv)
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 456
                    self.match(CnsMRParser.Equ_op)


                self.state = 459
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 460
                self.match(CnsMRParser.Nassign)
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 461
                    self.match(CnsMRParser.Equ_op)


                self.state = 464
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 4)
                self.state = 465
                self.match(CnsMRParser.Partition)
                self.state = 467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 466
                    self.match(CnsMRParser.Equ_op)


                self.state = 469
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 470
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 471
                self.match(CnsMRParser.Scale)
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 472
                    self.match(CnsMRParser.Equ_op)


                self.state = 475
                self.number_s()
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 7)
                self.state = 476
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(CnsMRParser.Assign)
            self.state = 480
            self.selection()
            self.state = 481
            self.selection()
            self.state = 482
            self.selection()
            self.state = 483
            self.selection()
            self.state = 484
            self.number()
            self.state = 485
            self.number()
            self.state = 486
            self.number()
            self.state = 487
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_plane_statement)
        self._la = 0 # Token type
        try:
            self.state = 499
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 489
                self.match(CnsMRParser.Group)
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Selection or _la==CnsMRParser.Weight:
                    self.state = 490
                    self.group_statement()
                    self.state = 495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 496
                self.match(CnsMRParser.End)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 497
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 498
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 511
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 501
                self.match(CnsMRParser.Selection)
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 502
                    self.match(CnsMRParser.Equ_op)


                self.state = 505
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 506
                self.match(CnsMRParser.Weight)
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 507
                    self.match(CnsMRParser.Equ_op)


                self.state = 510
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 552
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 513
                self.match(CnsMRParser.Exponent)
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 514
                    self.match(CnsMRParser.Equ_op)


                self.state = 517
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.match(CnsMRParser.Normal)
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 519
                    self.match(CnsMRParser.Equ_op)


                self.state = 522
                self.match(CnsMRParser.L_paren)
                self.state = 548
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integer, CnsMRParser.Real]:
                    self.state = 523
                    self.number_s()
                    self.state = 525
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 524
                        self.match(CnsMRParser.Comma)


                    self.state = 527
                    self.number_s()
                    self.state = 529
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 528
                        self.match(CnsMRParser.Comma)


                    self.state = 531
                    self.number_s()
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 533
                    self.match(CnsMRParser.Tail)
                    self.state = 535
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 534
                        self.match(CnsMRParser.Equ_op)


                    self.state = 537
                    self.selection()
                    self.state = 539
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 538
                        self.match(CnsMRParser.Comma)


                    self.state = 546
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 541
                        self.match(CnsMRParser.Head)
                        self.state = 543
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CnsMRParser.Equ_op:
                            self.state = 542
                            self.match(CnsMRParser.Equ_op)


                        self.state = 545
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 550
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 584
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 554
                self.sani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.match(CnsMRParser.Classification)
                self.state = 557
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 556
                    self.match(CnsMRParser.Equ_op)


                self.state = 559
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 560
                self.match(CnsMRParser.Coefficients)
                self.state = 561
                self.number_s()
                self.state = 562
                self.number_s()
                self.state = 563
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 565
                self.match(CnsMRParser.ForceConstant)
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 566
                    self.match(CnsMRParser.Equ_op)


                self.state = 569
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 570
                self.match(CnsMRParser.Nrestraints)
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 571
                    self.match(CnsMRParser.Equ_op)


                self.state = 574
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 575
                self.match(CnsMRParser.Potential)
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 576
                    self.match(CnsMRParser.Equ_op)


                self.state = 579
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 580
                self.match(CnsMRParser.Print)
                self.state = 581
                self.match(CnsMRParser.Threshold)
                self.state = 582
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 583
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 586
            self.match(CnsMRParser.Assign)
            self.state = 587
            self.selection()
            self.state = 588
            self.selection()
            self.state = 589
            self.selection()
            self.state = 590
            self.selection()
            self.state = 591
            self.selection()
            self.state = 592
            self.selection()
            self.state = 593
            self.number()
            self.state = 594
            self.number()
            self.state = 596
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 595
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(CnsMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 647
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 598
                self.coup_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 599
                self.match(CnsMRParser.Classification)
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 600
                    self.match(CnsMRParser.Equ_op)


                self.state = 603
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 604
                self.match(CnsMRParser.Coefficients)
                self.state = 605
                self.number_s()
                self.state = 606
                self.number_s()
                self.state = 607
                self.number_s()
                self.state = 608
                self.number_s()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 610
                self.match(CnsMRParser.Cv)
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 611
                    self.match(CnsMRParser.Equ_op)


                self.state = 614
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 615
                self.match(CnsMRParser.ForceConstant)
                self.state = 616
                self.number_s()
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                    self.state = 617
                    self.number_s()


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 620
                self.match(CnsMRParser.Nrestraints)
                self.state = 622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 621
                    self.match(CnsMRParser.Equ_op)


                self.state = 624
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 625
                self.match(CnsMRParser.Partition)
                self.state = 627
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 626
                    self.match(CnsMRParser.Equ_op)


                self.state = 629
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 630
                self.match(CnsMRParser.Potential)
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 631
                    self.match(CnsMRParser.Equ_op)


                self.state = 634
                self.match(CnsMRParser.Coupling_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 635
                self.match(CnsMRParser.Print)
                self.state = 636
                self.match(CnsMRParser.Threshold)
                self.state = 637
                self.number_s()
                self.state = 644
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 638
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 639
                    self.match(CnsMRParser.Classification)
                    self.state = 641
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 640
                        self.match(CnsMRParser.Equ_op)


                    self.state = 643
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 646
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(CnsMRParser.Assign)
            self.state = 650
            self.selection()
            self.state = 651
            self.selection()
            self.state = 652
            self.selection()
            self.state = 653
            self.selection()
            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 654
                self.selection()
                self.state = 655
                self.selection()
                self.state = 656
                self.selection()
                self.state = 657
                self.selection()


            self.state = 661
            self.number()
            self.state = 662
            self.number()
            self.state = 666
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 663
                self.number()
                self.state = 664
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 712
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 668
                self.carbon_shift_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 669
                self.match(CnsMRParser.Classification)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 670
                    self.match(CnsMRParser.Equ_op)


                self.state = 673
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 674
                self.match(CnsMRParser.Expectation)
                self.state = 675
                self.match(CnsMRParser.Integer)
                self.state = 676
                self.match(CnsMRParser.Integer)
                self.state = 677
                self.number_s()
                self.state = 678
                self.number_s()
                self.state = 679
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 681
                self.match(CnsMRParser.ForceConstant)
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 682
                    self.match(CnsMRParser.Equ_op)


                self.state = 685
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 686
                self.match(CnsMRParser.Nrestraints)
                self.state = 688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 687
                    self.match(CnsMRParser.Equ_op)


                self.state = 690
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 691
                self.match(CnsMRParser.PhiStep)
                self.state = 693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 692
                    self.match(CnsMRParser.Equ_op)


                self.state = 695
                self.number_s()
                pass
            elif token in [CnsMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 696
                self.match(CnsMRParser.PsiStep)
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 697
                    self.match(CnsMRParser.Equ_op)


                self.state = 700
                self.number_s()
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 701
                self.match(CnsMRParser.Potential)
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 702
                    self.match(CnsMRParser.Equ_op)


                self.state = 705
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 706
                self.match(CnsMRParser.Print)
                self.state = 707
                self.match(CnsMRParser.Threshold)
                self.state = 708
                self.number_s()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 709
                self.carbon_shift_rcoil()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 710
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 711
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 714
            self.match(CnsMRParser.Assign)
            self.state = 715
            self.selection()
            self.state = 716
            self.selection()
            self.state = 717
            self.selection()
            self.state = 718
            self.selection()
            self.state = 719
            self.selection()
            self.state = 720
            self.number()
            self.state = 721
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(CnsMRParser.Rcoil)
            self.state = 724
            self.selection()
            self.state = 725
            self.number_s()
            self.state = 726
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(CnsMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(CnsMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 768
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 728
                self.observed()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 729
                self.proton_shift_rcoil()
                pass
            elif token in [CnsMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 730
                self.proton_shift_anisotropy()
                pass
            elif token in [CnsMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 731
                self.proton_shift_amides()
                pass
            elif token in [CnsMRParser.Carbons]:
                self.enterOuterAlt(localctx, 5)
                self.state = 732
                self.proton_shift_carbons()
                pass
            elif token in [CnsMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 733
                self.proton_shift_nitrogens()
                pass
            elif token in [CnsMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 734
                self.proton_shift_oxygens()
                pass
            elif token in [CnsMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 735
                self.proton_shift_ring_atoms()
                pass
            elif token in [CnsMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 736
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 737
                self.match(CnsMRParser.Classification)
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 738
                    self.match(CnsMRParser.Equ_op)


                self.state = 741
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 742
                self.match(CnsMRParser.Error)
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 743
                    self.match(CnsMRParser.Equ_op)


                self.state = 746
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 12)
                self.state = 747
                self.match(CnsMRParser.ForceConstant)
                self.state = 748
                self.number_s()
                self.state = 750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                    self.state = 749
                    self.number_s()


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 752
                self.match(CnsMRParser.Potential)
                self.state = 753
                self.match(CnsMRParser.Coupling_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 754
                self.match(CnsMRParser.Print)
                self.state = 755
                self.match(CnsMRParser.Threshold)
                self.state = 756
                self.number_s()
                self.state = 763
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 757
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 758
                    self.match(CnsMRParser.Classification)
                    self.state = 760
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 759
                        self.match(CnsMRParser.Equ_op)


                    self.state = 762
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 765
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 767
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 770
            self.match(CnsMRParser.Observed)
            self.state = 771
            self.selection()
            self.state = 773
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 772
                self.selection()


            self.state = 775
            self.number_s()
            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 776
                self.number_s()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 779
            self.match(CnsMRParser.Rcoil)
            self.state = 780
            self.selection()
            self.state = 781
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 783
            self.match(CnsMRParser.Anisotropy)
            self.state = 784
            self.selection()
            self.state = 785
            self.selection()
            self.state = 786
            self.selection()
            self.state = 787
            self.match(CnsMRParser.Simple_name)
            self.state = 789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 788
                self.match(CnsMRParser.Logical)


            self.state = 791
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(CnsMRParser.Amides)
            self.state = 794
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbons(self):
            return self.getToken(CnsMRParser.Carbons, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 796
            self.match(CnsMRParser.Carbons)
            self.state = 797
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(CnsMRParser.Nitrogens)
            self.state = 800
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(CnsMRParser.Oxygens)
            self.state = 803
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(CnsMRParser.RingAtoms)
            self.state = 806
            self.match(CnsMRParser.Simple_name)
            self.state = 807
            self.selection()
            self.state = 808
            self.selection()
            self.state = 809
            self.selection()
            self.state = 810
            self.selection()
            self.state = 811
            self.selection()
            self.state = 813
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 812
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 816
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 901
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 818
                self.conf_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 819
                self.match(CnsMRParser.Classification)
                self.state = 821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 820
                    self.match(CnsMRParser.Equ_op)


                self.state = 823
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 824
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 825
                self.match(CnsMRParser.Expectation)
                self.state = 826
                self.match(CnsMRParser.Integer)
                self.state = 828
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 827
                    self.match(CnsMRParser.Integer)


                self.state = 831
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 830
                    self.match(CnsMRParser.Integer)


                self.state = 834
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 833
                    self.match(CnsMRParser.Integer)


                self.state = 836
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 837
                self.match(CnsMRParser.Error)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 838
                    self.match(CnsMRParser.Equ_op)


                self.state = 841
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 842
                self.match(CnsMRParser.ForceConstant)
                self.state = 844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 843
                    self.match(CnsMRParser.Equ_op)


                self.state = 846
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 847
                self.match(CnsMRParser.Nrestraints)
                self.state = 849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 848
                    self.match(CnsMRParser.Equ_op)


                self.state = 851
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 852
                self.match(CnsMRParser.Phase)
                self.state = 853
                self.match(CnsMRParser.Integer)
                self.state = 854
                self.match(CnsMRParser.Integer)
                self.state = 855
                self.match(CnsMRParser.Integer)
                self.state = 859
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 856
                    self.match(CnsMRParser.Integer)
                    self.state = 857
                    self.match(CnsMRParser.Integer)
                    self.state = 858
                    self.match(CnsMRParser.Integer)


                self.state = 864
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 861
                    self.match(CnsMRParser.Integer)
                    self.state = 862
                    self.match(CnsMRParser.Integer)
                    self.state = 863
                    self.match(CnsMRParser.Integer)


                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 866
                    self.match(CnsMRParser.Integer)
                    self.state = 867
                    self.match(CnsMRParser.Integer)
                    self.state = 868
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 871
                self.match(CnsMRParser.Potential)
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 872
                    self.match(CnsMRParser.Equ_op)


                self.state = 875
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 876
                self.match(CnsMRParser.Print)
                self.state = 877
                self.match(CnsMRParser.Threshold)
                self.state = 878
                self.number_s()
                self.state = 885
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 879
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 880
                    self.match(CnsMRParser.Classification)
                    self.state = 882
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 881
                        self.match(CnsMRParser.Equ_op)


                    self.state = 884
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 887
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 888
                self.match(CnsMRParser.Size)
                self.state = 889
                self.match(CnsMRParser.Dimensions)
                self.state = 890
                self.match(CnsMRParser.Integer)
                self.state = 892
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 891
                    self.match(CnsMRParser.Integer)


                self.state = 895
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 894
                    self.match(CnsMRParser.Integer)


                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 897
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 900
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(CnsMRParser.Assign)
            self.state = 904
            self.selection()
            self.state = 905
            self.selection()
            self.state = 906
            self.selection()
            self.state = 907
            self.selection()
            self.state = 913
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 908
                self.selection()
                self.state = 909
                self.selection()
                self.state = 910
                self.selection()
                self.state = 911
                self.selection()


            self.state = 920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 915
                self.selection()
                self.state = 916
                self.selection()
                self.state = 917
                self.selection()
                self.state = 918
                self.selection()


            self.state = 927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 922
                self.selection()
                self.state = 923
                self.selection()
                self.state = 924
                self.selection()
                self.state = 925
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 961
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 929
                self.dani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 930
                self.match(CnsMRParser.Classification)
                self.state = 932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 931
                    self.match(CnsMRParser.Equ_op)


                self.state = 934
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 935
                self.match(CnsMRParser.Coefficients)
                self.state = 936
                self.number_s()
                self.state = 937
                self.number_s()
                self.state = 938
                self.number_s()
                self.state = 939
                self.number_s()
                self.state = 940
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 942
                self.match(CnsMRParser.ForceConstant)
                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 943
                    self.match(CnsMRParser.Equ_op)


                self.state = 946
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 947
                self.match(CnsMRParser.Nrestraints)
                self.state = 949
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 948
                    self.match(CnsMRParser.Equ_op)


                self.state = 951
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 952
                self.match(CnsMRParser.Potential)
                self.state = 954
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 953
                    self.match(CnsMRParser.Equ_op)


                self.state = 956
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 957
                self.match(CnsMRParser.Print)
                self.state = 958
                self.match(CnsMRParser.Threshold)
                self.state = 959
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 960
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(CnsMRParser.Assign)
            self.state = 964
            self.selection()
            self.state = 965
            self.selection()
            self.state = 966
            self.selection()
            self.state = 967
            self.selection()
            self.state = 968
            self.selection()
            self.state = 969
            self.selection()
            self.state = 970
            self.number()
            self.state = 971
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 973
                self.one_bond_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 974
                self.match(CnsMRParser.Classification)
                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 975
                    self.match(CnsMRParser.Equ_op)


                self.state = 978
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 979
                self.match(CnsMRParser.Coefficients)
                self.state = 980
                self.number_s()
                self.state = 981
                self.number_s()
                self.state = 982
                self.number_s()
                self.state = 983
                self.number_s()
                self.state = 984
                self.number_s()
                self.state = 985
                self.number_s()
                self.state = 986
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 988
                self.match(CnsMRParser.ForceConstant)
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 989
                    self.match(CnsMRParser.Equ_op)


                self.state = 992
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 993
                self.match(CnsMRParser.Nrestraints)
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 994
                    self.match(CnsMRParser.Equ_op)


                self.state = 997
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 998
                self.match(CnsMRParser.Potential)
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 999
                    self.match(CnsMRParser.Equ_op)


                self.state = 1002
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1003
                self.match(CnsMRParser.Print)
                self.state = 1004
                self.match(CnsMRParser.Threshold)
                self.state = 1005
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1006
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(CnsMRParser.Assign)
            self.state = 1010
            self.selection()
            self.state = 1011
            self.selection()
            self.state = 1012
            self.selection()
            self.state = 1013
            self.selection()
            self.state = 1014
            self.selection()
            self.state = 1015
            self.selection()
            self.state = 1016
            self.selection()
            self.state = 1017
            self.selection()
            self.state = 1018
            self.number()
            self.state = 1019
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Angle_dihedral(self):
            return self.getToken(CnsMRParser.Angle_dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1073
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self.angle_db_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1022
                self.match(CnsMRParser.Classification)
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1023
                    self.match(CnsMRParser.Equ_op)


                self.state = 1026
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1027
                self.match(CnsMRParser.DerivFlag)
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1028
                    self.match(CnsMRParser.Equ_op)


                self.state = 1031
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1032
                self.match(CnsMRParser.Expectation)
                self.state = 1033
                self.match(CnsMRParser.Integer)
                self.state = 1034
                self.match(CnsMRParser.Integer)
                self.state = 1035
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1036
                self.match(CnsMRParser.Error)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1037
                    self.match(CnsMRParser.Equ_op)


                self.state = 1040
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1041
                self.match(CnsMRParser.ForceConstant)
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1042
                    self.match(CnsMRParser.Equ_op)


                self.state = 1045
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1046
                self.match(CnsMRParser.Nrestraints)
                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1047
                    self.match(CnsMRParser.Equ_op)


                self.state = 1050
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1051
                self.match(CnsMRParser.Potential)
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1052
                    self.match(CnsMRParser.Equ_op)


                self.state = 1055
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1056
                self.match(CnsMRParser.Print)
                self.state = 1057
                self.match(CnsMRParser.Threshold)
                self.state = 1058
                self.number_s()
                self.state = 1065
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 1059
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 1060
                    self.match(CnsMRParser.Classification)
                    self.state = 1062
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1061
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1064
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1067
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1068
                self.match(CnsMRParser.Size)
                self.state = 1069
                self.match(CnsMRParser.Angle_dihedral)
                self.state = 1070
                self.match(CnsMRParser.Integer)
                self.state = 1071
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1072
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1075
            self.match(CnsMRParser.Assign)
            self.state = 1076
            self.selection()
            self.state = 1077
            self.selection()
            self.state = 1078
            self.selection()
            self.state = 1079
            self.selection()
            self.state = 1080
            self.selection()
            self.state = 1081
            self.selection()
            self.state = 1082
            self.selection()
            self.state = 1083
            self.selection()
            self.state = 1084
            self.selection()
            self.state = 1085
            self.selection()
            self.state = 1086
            self.selection()
            self.state = 1088
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1087
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090
            self.match(CnsMRParser.L_paren)
            self.state = 1091
            self.selection_expression()
            self.state = 1092
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.term()
            self.state = 1099
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 1095
                self.match(CnsMRParser.Or_op)
                self.state = 1096
                self.term()
                self.state = 1101
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1102
            self.factor(0)
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1103
                self.match(CnsMRParser.And_op)
                self.state = 1104
                self.factor(0)
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store_1(self):
            return self.getToken(CnsMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(CnsMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(CnsMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(CnsMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(CnsMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(CnsMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(CnsMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(CnsMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(CnsMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1111
                self.match(CnsMRParser.L_paren)
                self.state = 1112
                self.selection_expression()
                self.state = 1113
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1115
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1116
                self.match(CnsMRParser.Atom)
                self.state = 1117
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1118
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1119
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1120
                self.match(CnsMRParser.Attribute)
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1121
                    self.match(CnsMRParser.Abs)


                self.state = 1124
                self.match(CnsMRParser.Attr_properties)
                self.state = 1125
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1126
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1127
                self.match(CnsMRParser.BondedTo)
                self.state = 1128
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1129
                self.match(CnsMRParser.ByGroup)
                self.state = 1130
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1131
                self.match(CnsMRParser.ByRes)
                self.state = 1132
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1133
                self.match(CnsMRParser.Chemical)
                self.state = 1140
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1134
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1135
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1138
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                    if la_ == 1:
                        self.state = 1136
                        self.match(CnsMRParser.Colon)
                        self.state = 1137
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1142
                self.match(CnsMRParser.Fbox)
                self.state = 1143
                self.number_f()
                self.state = 1144
                self.number_f()
                self.state = 1145
                self.number_f()
                self.state = 1146
                self.number_f()
                self.state = 1147
                self.number_f()
                self.state = 1148
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1150
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1151
                self.match(CnsMRParser.Id)
                self.state = 1152
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1153
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1154
                self.match(CnsMRParser.Name)
                self.state = 1161
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1155
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1156
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1159
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                    if la_ == 1:
                        self.state = 1157
                        self.match(CnsMRParser.Colon)
                        self.state = 1158
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1163
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1164
                self.match(CnsMRParser.Not_op)
                self.state = 1165
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1166
                self.match(CnsMRParser.Point)
                self.state = 1167
                self.match(CnsMRParser.L_paren)
                self.state = 1168
                self.number_f()
                self.state = 1170
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1169
                    self.match(CnsMRParser.Comma)


                self.state = 1172
                self.number_f()
                self.state = 1174
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1173
                    self.match(CnsMRParser.Comma)


                self.state = 1176
                self.number_f()
                self.state = 1177
                self.match(CnsMRParser.R_paren)
                self.state = 1178
                self.match(CnsMRParser.Cut)
                self.state = 1179
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1181
                self.match(CnsMRParser.Point)
                self.state = 1182
                self.match(CnsMRParser.L_paren)
                self.state = 1183
                self.match(CnsMRParser.Tail)
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1184
                    self.match(CnsMRParser.Equ_op)


                self.state = 1187
                self.selection()
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1188
                    self.match(CnsMRParser.Comma)


                self.state = 1196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1191
                    self.match(CnsMRParser.Head)
                    self.state = 1193
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1192
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1195
                    self.selection()


                self.state = 1198
                self.match(CnsMRParser.R_paren)
                self.state = 1199
                self.match(CnsMRParser.Cut)
                self.state = 1200
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1202
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1203
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1204
                self.match(CnsMRParser.Residue)
                self.state = 1211
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1205
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1206
                    self.match(CnsMRParser.Integer)
                    self.state = 1209
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                    if la_ == 1:
                        self.state = 1207
                        self.match(CnsMRParser.Colon)
                        self.state = 1208
                        self.match(CnsMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1213
                self.match(CnsMRParser.Resname)
                self.state = 1220
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1214
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1215
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1218
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 1216
                        self.match(CnsMRParser.Colon)
                        self.state = 1217
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1222
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1234
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1223
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1224
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1227
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                    if la_ == 1:
                        self.state = 1225
                        self.match(CnsMRParser.Colon)
                        self.state = 1226
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1229
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1232
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        self.state = 1230
                        self.match(CnsMRParser.Colon)
                        self.state = 1231
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1236
                self.match(CnsMRParser.Sfbox)
                self.state = 1237
                self.number_f()
                self.state = 1238
                self.number_f()
                self.state = 1239
                self.number_f()
                self.state = 1240
                self.number_f()
                self.state = 1241
                self.number_f()
                self.state = 1242
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1244
                self.match(CnsMRParser.Store_1)
                pass

            elif la_ == 25:
                self.state = 1245
                self.match(CnsMRParser.Store_2)
                pass

            elif la_ == 26:
                self.state = 1246
                self.match(CnsMRParser.Store_3)
                pass

            elif la_ == 27:
                self.state = 1247
                self.match(CnsMRParser.Store_4)
                pass

            elif la_ == 28:
                self.state = 1248
                self.match(CnsMRParser.Store_5)
                pass

            elif la_ == 29:
                self.state = 1249
                self.match(CnsMRParser.Store_6)
                pass

            elif la_ == 30:
                self.state = 1250
                self.match(CnsMRParser.Store_7)
                pass

            elif la_ == 31:
                self.state = 1251
                self.match(CnsMRParser.Store_8)
                pass

            elif la_ == 32:
                self.state = 1252
                self.match(CnsMRParser.Store_9)
                pass

            elif la_ == 33:
                self.state = 1253
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1264
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,162,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1262
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1256
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1257
                        self.match(CnsMRParser.Around)
                        self.state = 1258
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1259
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1260
                        self.match(CnsMRParser.Saround)
                        self.state = 1261
                        self.number_f()
                        pass

             
                self.state = 1266
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,162,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1269
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1271
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CnsMRParser.Flags, 0)

        def Include(self):
            return self.getToken(CnsMRParser.Include, 0)

        def End_flag(self):
            return self.getToken(CnsMRParser.End_flag, 0)

        def Exclude(self):
            return self.getToken(CnsMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Class_name)
            else:
                return self.getToken(CnsMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(CnsMRParser.Any_class, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = CnsMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self.match(CnsMRParser.Flags)
            self.state = 1284
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Exclude:
                self.state = 1274
                self.match(CnsMRParser.Exclude)
                self.state = 1282
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Include, CnsMRParser.Class_name]:
                    self.state = 1278
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CnsMRParser.Class_name:
                        self.state = 1275
                        self.match(CnsMRParser.Class_name)
                        self.state = 1280
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CnsMRParser.Any_class]:
                    self.state = 1281
                    self.match(CnsMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1286
            self.match(CnsMRParser.Include)
            self.state = 1290
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Class_name:
                self.state = 1287
                self.match(CnsMRParser.Class_name)
                self.state = 1292
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1293
            self.match(CnsMRParser.End_flag)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[49] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




