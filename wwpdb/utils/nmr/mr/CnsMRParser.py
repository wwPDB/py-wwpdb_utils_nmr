# Generated from CnsMRParser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0098")
        buf.write("\u04b8\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\3\2\7\2h")
        buf.write("\n\2\f\2\16\2k\13\2\3\2\7\2n\n\2\f\2\16\2q\13\2\3\2\7")
        buf.write("\2t\n\2\f\2\16\2w\13\2\3\2\7\2z\n\2\f\2\16\2}\13\2\3\2")
        buf.write("\7\2\u0080\n\2\f\2\16\2\u0083\13\2\3\2\7\2\u0086\n\2\f")
        buf.write("\2\16\2\u0089\13\2\3\2\7\2\u008c\n\2\f\2\16\2\u008f\13")
        buf.write("\2\3\2\7\2\u0092\n\2\f\2\16\2\u0095\13\2\3\2\7\2\u0098")
        buf.write("\n\2\f\2\16\2\u009b\13\2\3\2\7\2\u009e\n\2\f\2\16\2\u00a1")
        buf.write("\13\2\3\2\7\2\u00a4\n\2\f\2\16\2\u00a7\13\2\3\2\7\2\u00aa")
        buf.write("\n\2\f\2\16\2\u00ad\13\2\3\2\7\2\u00b0\n\2\f\2\16\2\u00b3")
        buf.write("\13\2\3\2\7\2\u00b6\n\2\f\2\16\2\u00b9\13\2\3\2\7\2\u00bc")
        buf.write("\n\2\f\2\16\2\u00bf\13\2\3\2\7\2\u00c2\n\2\f\2\16\2\u00c5")
        buf.write("\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4")
        buf.write("\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3")
        buf.write("\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b")
        buf.write("\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3")
        buf.write("\n\3\13\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3")
        buf.write("\16\3\17\3\17\3\17\3\17\7\17\u0118\n\17\f\17\16\17\u011b")
        buf.write("\13\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\7\17\u0141\n\17\f\17\16\17\u0144")
        buf.write("\13\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\7\17\u0165\n\17\f\17\16\17\u0168\13\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17")
        buf.write("\u0182\n\17\f\17\16\17\u0185\13\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\5\17\u018c\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\7\20\u0198\n\20\f\20\16\20\u019b\13")
        buf.write("\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\5\21\u01a7\n\21\3\22\7\22\u01aa\n\22\f\22\16\22\u01ad")
        buf.write("\13\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\3\22\5\22\u01bd\n\22\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24")
        buf.write("\3\24\3\24\3\24\5\24\u01d0\n\24\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\5\25\u01d8\n\25\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\5\26\u01e2\n\26\3\26\3\26\5\26\u01e6\n\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\5\26\u01ed\n\26\3\26\3\26\3\26")
        buf.write("\5\26\u01f2\n\26\5\26\u01f4\n\26\3\26\5\26\u01f7\n\26")
        buf.write("\3\27\7\27\u01fa\n\27\f\27\16\27\u01fd\13\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\5\27\u0213\n\27\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\31")
        buf.write("\7\31\u0220\n\31\f\31\16\31\u0223\13\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\5\31\u0233\n\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u0245")
        buf.write("\n\31\3\31\5\31\u0248\n\31\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\5\32\u0254\n\32\3\32\3\32\3\32")
        buf.write("\3\32\5\32\u025a\n\32\3\33\7\33\u025d\n\33\f\33\16\33")
        buf.write("\u0260\13\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\7\33\u027e")
        buf.write("\n\33\f\33\16\33\u0281\13\33\3\33\3\33\5\33\u0285\n\33")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\36\7\36\u0296\n\36\f\36\16\36\u0299")
        buf.write("\13\36\3\36\7\36\u029c\n\36\f\36\16\36\u029f\13\36\3\36")
        buf.write("\7\36\u02a2\n\36\f\36\16\36\u02a5\13\36\3\36\7\36\u02a8")
        buf.write("\n\36\f\36\16\36\u02ab\13\36\3\36\7\36\u02ae\n\36\f\36")
        buf.write("\16\36\u02b1\13\36\3\36\7\36\u02b4\n\36\f\36\16\36\u02b7")
        buf.write("\13\36\3\36\7\36\u02ba\n\36\f\36\16\36\u02bd\13\36\3\36")
        buf.write("\7\36\u02c0\n\36\f\36\16\36\u02c3\13\36\3\36\7\36\u02c6")
        buf.write("\n\36\f\36\16\36\u02c9\13\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\5\36\u02d0\n\36\3\36\3\36\3\36\3\36\5\36\u02d6\n\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u02e1")
        buf.write("\n\36\3\36\3\36\5\36\u02e5\n\36\3\37\3\37\3\37\5\37\u02ea")
        buf.write("\n\37\3\37\3\37\5\37\u02ee\n\37\3 \3 \3 \3 \3!\3!\3!\3")
        buf.write("!\3!\3!\5!\u02fa\n!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3")
        buf.write("$\3%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3&\5&\u0312\n&\3\'\3\'")
        buf.write("\3\'\3(\7(\u0318\n(\f(\16(\u031b\13(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\5(\u0324\n(\3(\5(\u0327\n(\3(\5(\u032a\n(\3(\3(\3")
        buf.write("(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u033d\n")
        buf.write("(\3(\3(\3(\5(\u0342\n(\3(\3(\3(\5(\u0347\n(\3(\3(\3(\3")
        buf.write("(\3(\3(\3(\3(\3(\3(\5(\u0353\n(\3(\3(\3(\3(\3(\5(\u035a")
        buf.write("\n(\3(\5(\u035d\n(\3(\5(\u0360\n(\3(\5(\u0363\n(\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\3)\5)\u036f\n)\3)\3)\3)\3)\3)\5")
        buf.write(")\u0376\n)\3)\3)\3)\3)\3)\5)\u037d\n)\3*\7*\u0380\n*\f")
        buf.write("*\16*\u0383\13*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u039b\n*\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3,\7,\u03a8\n,\f,\16,\u03ab\13,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\5,\u03c5\n,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3.\7.\u03d4\n.\f.\16.\u03d7\13.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\5.\u03f6\n.\3.\3.\3.\3.\3.\3.\5.\u03fe")
        buf.write("\n.\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u040d\n")
        buf.write("/\3\60\3\60\3\60\3\60\3\61\3\61\3\61\7\61\u0416\n\61\f")
        buf.write("\61\16\61\u0419\13\61\3\62\3\62\3\62\7\62\u041e\n\62\f")
        buf.write("\62\16\62\u0421\13\62\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\5\63\u042f\n\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\5\63\u043f\n\63\5\63\u0441\n\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\5\63\u0453\n\63\5\63\u0455\n\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\5\63\u045d\n\63\3\63\3\63\5\63\u0461")
        buf.write("\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\5\63\u046d\n\63\3\63\3\63\3\63\5\63\u0472\n\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63")
        buf.write("\u047f\n\63\5\63\u0481\n\63\3\63\3\63\3\63\3\63\3\63\5")
        buf.write("\63\u0488\n\63\5\63\u048a\n\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\5\63\u0491\n\63\3\63\3\63\3\63\5\63\u0496\n\63\5\63\u0498")
        buf.write("\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u04ab\n\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\7\63\u04b3\n\63\f\63\16\63")
        buf.write("\u04b6\13\63\3\63\5\u0142\u0166\u0183\3d\64\2\4\6\b\n")
        buf.write("\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<")
        buf.write(">@BDFHJLNPRTVXZ\\^`bd\2\4\3\2\u0085\u0086\4\2\u0081\u0081")
        buf.write("\u0087\u0087\2\u0578\2i\3\2\2\2\4\u00c8\3\2\2\2\6\u00ce")
        buf.write("\3\2\2\2\b\u00d5\3\2\2\2\n\u00dc\3\2\2\2\f\u00e3\3\2\2")
        buf.write("\2\16\u00e9\3\2\2\2\20\u00ef\3\2\2\2\22\u00f5\3\2\2\2")
        buf.write("\24\u00fb\3\2\2\2\26\u0101\3\2\2\2\30\u0107\3\2\2\2\32")
        buf.write("\u010d\3\2\2\2\34\u018b\3\2\2\2\36\u018d\3\2\2\2 \u01a6")
        buf.write("\3\2\2\2\"\u01bc\3\2\2\2$\u01be\3\2\2\2&\u01cf\3\2\2\2")
        buf.write("(\u01d7\3\2\2\2*\u01f6\3\2\2\2,\u0212\3\2\2\2.\u0214\3")
        buf.write("\2\2\2\60\u0247\3\2\2\2\62\u0249\3\2\2\2\64\u0284\3\2")
        buf.write("\2\2\66\u0286\3\2\2\28\u028f\3\2\2\2:\u02e4\3\2\2\2<\u02e6")
        buf.write("\3\2\2\2>\u02ef\3\2\2\2@\u02f3\3\2\2\2B\u02fd\3\2\2\2")
        buf.write("D\u0300\3\2\2\2F\u0303\3\2\2\2H\u0306\3\2\2\2J\u0309\3")
        buf.write("\2\2\2L\u0313\3\2\2\2N\u0362\3\2\2\2P\u0364\3\2\2\2R\u039a")
        buf.write("\3\2\2\2T\u039c\3\2\2\2V\u03c4\3\2\2\2X\u03c6\3\2\2\2")
        buf.write("Z\u03fd\3\2\2\2\\\u03ff\3\2\2\2^\u040e\3\2\2\2`\u0412")
        buf.write("\3\2\2\2b\u041a\3\2\2\2d\u04aa\3\2\2\2fh\5\4\3\2gf\3\2")
        buf.write("\2\2hk\3\2\2\2ig\3\2\2\2ij\3\2\2\2jo\3\2\2\2ki\3\2\2\2")
        buf.write("ln\5\6\4\2ml\3\2\2\2nq\3\2\2\2om\3\2\2\2op\3\2\2\2pu\3")
        buf.write("\2\2\2qo\3\2\2\2rt\5\b\5\2sr\3\2\2\2tw\3\2\2\2us\3\2\2")
        buf.write("\2uv\3\2\2\2v{\3\2\2\2wu\3\2\2\2xz\5\n\6\2yx\3\2\2\2z")
        buf.write("}\3\2\2\2{y\3\2\2\2{|\3\2\2\2|\u0081\3\2\2\2}{\3\2\2\2")
        buf.write("~\u0080\5\f\7\2\177~\3\2\2\2\u0080\u0083\3\2\2\2\u0081")
        buf.write("\177\3\2\2\2\u0081\u0082\3\2\2\2\u0082\u0087\3\2\2\2\u0083")
        buf.write("\u0081\3\2\2\2\u0084\u0086\5\16\b\2\u0085\u0084\3\2\2")
        buf.write("\2\u0086\u0089\3\2\2\2\u0087\u0085\3\2\2\2\u0087\u0088")
        buf.write("\3\2\2\2\u0088\u008d\3\2\2\2\u0089\u0087\3\2\2\2\u008a")
        buf.write("\u008c\5\20\t\2\u008b\u008a\3\2\2\2\u008c\u008f\3\2\2")
        buf.write("\2\u008d\u008b\3\2\2\2\u008d\u008e\3\2\2\2\u008e\u0093")
        buf.write("\3\2\2\2\u008f\u008d\3\2\2\2\u0090\u0092\5\22\n\2\u0091")
        buf.write("\u0090\3\2\2\2\u0092\u0095\3\2\2\2\u0093\u0091\3\2\2\2")
        buf.write("\u0093\u0094\3\2\2\2\u0094\u0099\3\2\2\2\u0095\u0093\3")
        buf.write("\2\2\2\u0096\u0098\5\24\13\2\u0097\u0096\3\2\2\2\u0098")
        buf.write("\u009b\3\2\2\2\u0099\u0097\3\2\2\2\u0099\u009a\3\2\2\2")
        buf.write("\u009a\u009f\3\2\2\2\u009b\u0099\3\2\2\2\u009c\u009e\5")
        buf.write("\26\f\2\u009d\u009c\3\2\2\2\u009e\u00a1\3\2\2\2\u009f")
        buf.write("\u009d\3\2\2\2\u009f\u00a0\3\2\2\2\u00a0\u00a5\3\2\2\2")
        buf.write("\u00a1\u009f\3\2\2\2\u00a2\u00a4\5\30\r\2\u00a3\u00a2")
        buf.write("\3\2\2\2\u00a4\u00a7\3\2\2\2\u00a5\u00a3\3\2\2\2\u00a5")
        buf.write("\u00a6\3\2\2\2\u00a6\u00ab\3\2\2\2\u00a7\u00a5\3\2\2\2")
        buf.write("\u00a8\u00aa\5\32\16\2\u00a9\u00a8\3\2\2\2\u00aa\u00ad")
        buf.write("\3\2\2\2\u00ab\u00a9\3\2\2\2\u00ab\u00ac\3\2\2\2\u00ac")
        buf.write("\u00b1\3\2\2\2\u00ad\u00ab\3\2\2\2\u00ae\u00b0\5\36\20")
        buf.write("\2\u00af\u00ae\3\2\2\2\u00b0\u00b3\3\2\2\2\u00b1\u00af")
        buf.write("\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00b7\3\2\2\2\u00b3")
        buf.write("\u00b1\3\2\2\2\u00b4\u00b6\5$\23\2\u00b5\u00b4\3\2\2\2")
        buf.write("\u00b6\u00b9\3\2\2\2\u00b7\u00b5\3\2\2\2\u00b7\u00b8\3")
        buf.write("\2\2\2\u00b8\u00bd\3\2\2\2\u00b9\u00b7\3\2\2\2\u00ba\u00bc")
        buf.write("\5.\30\2\u00bb\u00ba\3\2\2\2\u00bc\u00bf\3\2\2\2\u00bd")
        buf.write("\u00bb\3\2\2\2\u00bd\u00be\3\2\2\2\u00be\u00c3\3\2\2\2")
        buf.write("\u00bf\u00bd\3\2\2\2\u00c0\u00c2\5&\24\2\u00c1\u00c0\3")
        buf.write("\2\2\2\u00c2\u00c5\3\2\2\2\u00c3\u00c1\3\2\2\2\u00c3\u00c4")
        buf.write("\3\2\2\2\u00c4\u00c6\3\2\2\2\u00c5\u00c3\3\2\2\2\u00c6")
        buf.write("\u00c7\7\2\2\3\u00c7\3\3\2\2\2\u00c8\u00c9\7\4\2\2\u00c9")
        buf.write("\u00ca\7\u008a\2\2\u00ca\u00cb\5\34\17\2\u00cb\u00cc\7")
        buf.write("\u008b\2\2\u00cc\u00cd\7\3\2\2\u00cd\5\3\2\2\2\u00ce\u00cf")
        buf.write("\7/\2\2\u00cf\u00d0\7\60\2\2\u00d0\u00d1\7\u008a\2\2\u00d1")
        buf.write("\u00d2\5\"\22\2\u00d2\u00d3\7\u008b\2\2\u00d3\u00d4\7")
        buf.write("\3\2\2\u00d4\7\3\2\2\2\u00d5\u00d6\7/\2\2\u00d6\u00d7")
        buf.write("\7\63\2\2\u00d7\u00d8\7\u008a\2\2\u00d8\u00d9\5&\24\2")
        buf.write("\u00d9\u00da\7\u008b\2\2\u00da\u00db\7\3\2\2\u00db\t\3")
        buf.write("\2\2\2\u00dc\u00dd\7/\2\2\u00dd\u00de\7\67\2\2\u00de\u00df")
        buf.write("\7\u008a\2\2\u00df\u00e0\5*\26\2\u00e0\u00e1\7\u008b\2")
        buf.write("\2\u00e1\u00e2\7\3\2\2\u00e2\13\3\2\2\2\u00e3\u00e4\7")
        buf.write(":\2\2\u00e4\u00e5\7\u008a\2\2\u00e5\u00e6\5,\27\2\u00e6")
        buf.write("\u00e7\7\u008b\2\2\u00e7\u00e8\7\3\2\2\u00e8\r\3\2\2\2")
        buf.write("\u00e9\u00ea\7>\2\2\u00ea\u00eb\7\u008a\2\2\u00eb\u00ec")
        buf.write("\5\60\31\2\u00ec\u00ed\7\u008b\2\2\u00ed\u00ee\7\3\2\2")
        buf.write("\u00ee\17\3\2\2\2\u00ef\u00f0\7@\2\2\u00f0\u00f1\7\u008a")
        buf.write("\2\2\u00f1\u00f2\5\64\33\2\u00f2\u00f3\7\u008b\2\2\u00f3")
        buf.write("\u00f4\7\3\2\2\u00f4\21\3\2\2\2\u00f5\u00f6\7F\2\2\u00f6")
        buf.write("\u00f7\7\u008a\2\2\u00f7\u00f8\5:\36\2\u00f8\u00f9\7\u008b")
        buf.write("\2\2\u00f9\u00fa\7\3\2\2\u00fa\23\3\2\2\2\u00fb\u00fc")
        buf.write("\7P\2\2\u00fc\u00fd\7\u008a\2\2\u00fd\u00fe\5N(\2\u00fe")
        buf.write("\u00ff\7\u008b\2\2\u00ff\u0100\7\3\2\2\u0100\25\3\2\2")
        buf.write("\2\u0101\u0102\7U\2\2\u0102\u0103\7\u008a\2\2\u0103\u0104")
        buf.write("\5R*\2\u0104\u0105\7\u008b\2\2\u0105\u0106\7\3\2\2\u0106")
        buf.write("\27\3\2\2\2\u0107\u0108\7V\2\2\u0108\u0109\7\u008a\2\2")
        buf.write("\u0109\u010a\5V,\2\u010a\u010b\7\u008b\2\2\u010b\u010c")
        buf.write("\7\3\2\2\u010c\31\3\2\2\2\u010d\u010e\7W\2\2\u010e\u010f")
        buf.write("\7\u008a\2\2\u010f\u0110\5Z.\2\u0110\u0111\7\u008b\2\2")
        buf.write("\u0111\u0112\7\3\2\2\u0112\33\3\2\2\2\u0113\u0114\7\5")
        buf.write("\2\2\u0114\u0115\7\u008d\2\2\u0115\u018c\7$\2\2\u0116")
        buf.write("\u0118\5\36\20\2\u0117\u0116\3\2\2\2\u0118\u011b\3\2\2")
        buf.write("\2\u0119\u0117\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u018c")
        buf.write("\3\2\2\2\u011b\u0119\3\2\2\2\u011c\u011d\7\7\2\2\u011d")
        buf.write("\u011e\7\u0086\2\2\u011e\u018c\7\u0083\2\2\u011f\u0120")
        buf.write("\7\b\2\2\u0120\u0121\7\u0086\2\2\u0121\u018c\7)\2\2\u0122")
        buf.write("\u0123\7\t\2\2\u0123\u0124\7\u0086\2\2\u0124\u018c\7\u0083")
        buf.write("\2\2\u0125\u0126\7\n\2\2\u0126\u0127\7\u008d\2\2\u0127")
        buf.write("\u018c\7\u0083\2\2\u0128\u0129\7\13\2\2\u0129\u012a\7")
        buf.write("\u008d\2\2\u012a\u018c\7\u0085\2\2\u012b\u012c\7\f\2\2")
        buf.write("\u012c\u018c\7\u0085\2\2\u012d\u012e\7\r\2\2\u012e\u012f")
        buf.write("\7\u008d\2\2\u012f\u018c\7\u0081\2\2\u0130\u0131\7\16")
        buf.write("\2\2\u0131\u018c\7%\2\2\u0132\u0133\7\16\2\2\u0133\u0134")
        buf.write("\7&\2\2\u0134\u0135\7\'\2\2\u0135\u0136\7\u008d\2\2\u0136")
        buf.write("\u0137\7\u0083\2\2\u0137\u0138\7(\2\2\u0138\u0139\7\u008d")
        buf.write("\2\2\u0139\u018c\7\u0083\2\2\u013a\u013b\7\17\2\2\u013b")
        buf.write("\u013c\7\u0085\2\2\u013c\u013d\7\u0085\2\2\u013d\u018c")
        buf.write("\7\u0083\2\2\u013e\u0142\7\20\2\2\u013f\u0141\7\u008a")
        buf.write("\2\2\u0140\u013f\3\2\2\2\u0141\u0144\3\2\2\2\u0142\u0143")
        buf.write("\3\2\2\2\u0142\u0140\3\2\2\2\u0143\u0145\3\2\2\2\u0144")
        buf.write("\u0142\3\2\2\2\u0145\u0146\7\u008b\2\2\u0146\u018c\7\3")
        buf.write("\2\2\u0147\u0148\7\21\2\2\u0148\u0149\7\u0086\2\2\u0149")
        buf.write("\u018c\7\u0081\2\2\u014a\u014b\7\22\2\2\u014b\u014c\7")
        buf.write("\u0086\2\2\u014c\u018c\7\u0081\2\2\u014d\u014e\7\23\2")
        buf.write("\2\u014e\u014f\7\u008d\2\2\u014f\u018c\7\u0081\2\2\u0150")
        buf.write("\u018c\7\24\2\2\u0151\u0152\7\25\2\2\u0152\u0153\7\u008d")
        buf.write("\2\2\u0153\u018c\7\u0081\2\2\u0154\u0155\7\26\2\2\u0155")
        buf.write("\u0156\7\u0086\2\2\u0156\u018c\7*\2\2\u0157\u0158\7\27")
        buf.write("\2\2\u0158\u0159\7\u008a\2\2\u0159\u015a\5 \21\2\u015a")
        buf.write("\u015b\7\u008b\2\2\u015b\u015c\7\3\2\2\u015c\u018c\3\2")
        buf.write("\2\2\u015d\u015e\7\30\2\2\u015e\u015f\7\32\2\2\u015f\u0160")
        buf.write("\7\u008d\2\2\u0160\u018c\7\u0083\2\2\u0161\u0162\7\31")
        buf.write("\2\2\u0162\u0166\7\u0085\2\2\u0163\u0165\7\u008a\2\2\u0164")
        buf.write("\u0163\3\2\2\2\u0165\u0168\3\2\2\2\u0166\u0167\3\2\2\2")
        buf.write("\u0166\u0164\3\2\2\2\u0167\u0169\3\2\2\2\u0168\u0166\3")
        buf.write("\2\2\2\u0169\u016a\7\u008b\2\2\u016a\u018c\7\3\2\2\u016b")
        buf.write("\u018c\7\33\2\2\u016c\u016d\7\34\2\2\u016d\u016e\7\u0086")
        buf.write("\2\2\u016e\u018c\7\u0083\2\2\u016f\u0170\7\35\2\2\u0170")
        buf.write("\u0171\7\u0086\2\2\u0171\u018c\7\u0083\2\2\u0172\u0173")
        buf.write("\7\36\2\2\u0173\u0174\7\u0086\2\2\u0174\u018c\7\u0083")
        buf.write("\2\2\u0175\u0176\7\37\2\2\u0176\u0177\7\u0086\2\2\u0177")
        buf.write("\u018c\7\u0083\2\2\u0178\u0179\7 \2\2\u0179\u017a\7\u0086")
        buf.write("\2\2\u017a\u018c\7\u0083\2\2\u017b\u017c\7!\2\2\u017c")
        buf.write("\u017d\7\u0086\2\2\u017d\u018c\7\u0083\2\2\u017e\u017f")
        buf.write("\7\"\2\2\u017f\u0183\7\u0085\2\2\u0180\u0182\7\u008a\2")
        buf.write("\2\u0181\u0180\3\2\2\2\u0182\u0185\3\2\2\2\u0183\u0184")
        buf.write("\3\2\2\2\u0183\u0181\3\2\2\2\u0184\u0186\3\2\2\2\u0185")
        buf.write("\u0183\3\2\2\2\u0186\u0187\7\u008b\2\2\u0187\u018c\7\3")
        buf.write("\2\2\u0188\u0189\7#\2\2\u0189\u018a\7\u008d\2\2\u018a")
        buf.write("\u018c\7\u0083\2\2\u018b\u0113\3\2\2\2\u018b\u0119\3\2")
        buf.write("\2\2\u018b\u011c\3\2\2\2\u018b\u011f\3\2\2\2\u018b\u0122")
        buf.write("\3\2\2\2\u018b\u0125\3\2\2\2\u018b\u0128\3\2\2\2\u018b")
        buf.write("\u012b\3\2\2\2\u018b\u012d\3\2\2\2\u018b\u0130\3\2\2\2")
        buf.write("\u018b\u0132\3\2\2\2\u018b\u013a\3\2\2\2\u018b\u013e\3")
        buf.write("\2\2\2\u018b\u0147\3\2\2\2\u018b\u014a\3\2\2\2\u018b\u014d")
        buf.write("\3\2\2\2\u018b\u0150\3\2\2\2\u018b\u0151\3\2\2\2\u018b")
        buf.write("\u0154\3\2\2\2\u018b\u0157\3\2\2\2\u018b\u015d\3\2\2\2")
        buf.write("\u018b\u0161\3\2\2\2\u018b\u016b\3\2\2\2\u018b\u016c\3")
        buf.write("\2\2\2\u018b\u016f\3\2\2\2\u018b\u0172\3\2\2\2\u018b\u0175")
        buf.write("\3\2\2\2\u018b\u0178\3\2\2\2\u018b\u017b\3\2\2\2\u018b")
        buf.write("\u017e\3\2\2\2\u018b\u0188\3\2\2\2\u018c\35\3\2\2\2\u018d")
        buf.write("\u018e\7\6\2\2\u018e\u018f\5^\60\2\u018f\u0190\5^\60\2")
        buf.write("\u0190\u0191\7\u0083\2\2\u0191\u0192\7\u0083\2\2\u0192")
        buf.write("\u0199\7\u0083\2\2\u0193\u0194\7|\2\2\u0194\u0195\5^\60")
        buf.write("\2\u0195\u0196\5^\60\2\u0196\u0198\3\2\2\2\u0197\u0193")
        buf.write("\3\2\2\2\u0198\u019b\3\2\2\2\u0199\u0197\3\2\2\2\u0199")
        buf.write("\u019a\3\2\2\2\u019a\37\3\2\2\2\u019b\u0199\3\2\2\2\u019c")
        buf.write("\u019d\7+\2\2\u019d\u019e\7\u008d\2\2\u019e\u01a7\7\u0083")
        buf.write("\2\2\u019f\u01a0\7,\2\2\u01a0\u01a1\7\u008d\2\2\u01a1")
        buf.write("\u01a7\7\u0083\2\2\u01a2\u01a3\7-\2\2\u01a3\u01a7\5^\60")
        buf.write("\2\u01a4\u01a5\7.\2\2\u01a5\u01a7\5^\60\2\u01a6\u019c")
        buf.write("\3\2\2\2\u01a6\u019f\3\2\2\2\u01a6\u01a2\3\2\2\2\u01a6")
        buf.write("\u01a4\3\2\2\2\u01a7!\3\2\2\2\u01a8\u01aa\5$\23\2\u01a9")
        buf.write("\u01a8\3\2\2\2\u01aa\u01ad\3\2\2\2\u01ab\u01a9\3\2\2\2")
        buf.write("\u01ab\u01ac\3\2\2\2\u01ac\u01bd\3\2\2\2\u01ad\u01ab\3")
        buf.write("\2\2\2\u01ae\u01af\7\r\2\2\u01af\u01b0\7\u008d\2\2\u01b0")
        buf.write("\u01bd\7\u0081\2\2\u01b1\u01b2\7\61\2\2\u01b2\u01b3\7")
        buf.write("\u008d\2\2\u01b3\u01bd\7\u0081\2\2\u01b4\u01b5\7\25\2")
        buf.write("\2\u01b5\u01b6\7\u008d\2\2\u01b6\u01bd\7\u0081\2\2\u01b7")
        buf.write("\u01bd\7\33\2\2\u01b8\u01b9\7\35\2\2\u01b9\u01ba\7\u008d")
        buf.write("\2\2\u01ba\u01bd\7\u0083\2\2\u01bb\u01bd\7\62\2\2\u01bc")
        buf.write("\u01ab\3\2\2\2\u01bc\u01ae\3\2\2\2\u01bc\u01b1\3\2\2\2")
        buf.write("\u01bc\u01b4\3\2\2\2\u01bc\u01b7\3\2\2\2\u01bc\u01b8\3")
        buf.write("\2\2\2\u01bc\u01bb\3\2\2\2\u01bd#\3\2\2\2\u01be\u01bf")
        buf.write("\7\6\2\2\u01bf\u01c0\5^\60\2\u01c0\u01c1\5^\60\2\u01c1")
        buf.write("\u01c2\5^\60\2\u01c2\u01c3\5^\60\2\u01c3\u01c4\7\u0083")
        buf.write("\2\2\u01c4\u01c5\7\u0083\2\2\u01c5\u01c6\7\u0083\2\2\u01c6")
        buf.write("\u01c7\7\u0081\2\2\u01c7%\3\2\2\2\u01c8\u01c9\7\64\2\2")
        buf.write("\u01c9\u01ca\7\u008a\2\2\u01ca\u01cb\5(\25\2\u01cb\u01cc")
        buf.write("\7\u008b\2\2\u01cc\u01d0\3\2\2\2\u01cd\u01d0\7%\2\2\u01ce")
        buf.write("\u01d0\7\62\2\2\u01cf\u01c8\3\2\2\2\u01cf\u01cd\3\2\2")
        buf.write("\2\u01cf\u01ce\3\2\2\2\u01d0\'\3\2\2\2\u01d1\u01d2\7\65")
        buf.write("\2\2\u01d2\u01d3\7\u008d\2\2\u01d3\u01d8\5^\60\2\u01d4")
        buf.write("\u01d5\7\66\2\2\u01d5\u01d6\7\u008d\2\2\u01d6\u01d8\7")
        buf.write("\u0083\2\2\u01d7\u01d1\3\2\2\2\u01d7\u01d4\3\2\2\2\u01d8")
        buf.write(")\3\2\2\2\u01d9\u01da\78\2\2\u01da\u01db\7\u008d\2\2\u01db")
        buf.write("\u01f7\7\u0081\2\2\u01dc\u01dd\79\2\2\u01dd\u01de\7\u008d")
        buf.write("\2\2\u01de\u01f3\7\u0088\2\2\u01df\u01e1\7\u0083\2\2\u01e0")
        buf.write("\u01e2\7\177\2\2\u01e1\u01e0\3\2\2\2\u01e1\u01e2\3\2\2")
        buf.write("\2\u01e2\u01e3\3\2\2\2\u01e3\u01e5\7\u0083\2\2\u01e4\u01e6")
        buf.write("\7\177\2\2\u01e5\u01e4\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6")
        buf.write("\u01e7\3\2\2\2\u01e7\u01f4\7\u0083\2\2\u01e8\u01e9\7z")
        buf.write("\2\2\u01e9\u01ea\7\u008d\2\2\u01ea\u01ec\5^\60\2\u01eb")
        buf.write("\u01ed\7\177\2\2\u01ec\u01eb\3\2\2\2\u01ec\u01ed\3\2\2")
        buf.write("\2\u01ed\u01f1\3\2\2\2\u01ee\u01ef\7{\2\2\u01ef\u01f0")
        buf.write("\7\u008d\2\2\u01f0\u01f2\5^\60\2\u01f1\u01ee\3\2\2\2\u01f1")
        buf.write("\u01f2\3\2\2\2\u01f2\u01f4\3\2\2\2\u01f3\u01df\3\2\2\2")
        buf.write("\u01f3\u01e8\3\2\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f7\7")
        buf.write("\u0089\2\2\u01f6\u01d9\3\2\2\2\u01f6\u01dc\3\2\2\2\u01f7")
        buf.write("+\3\2\2\2\u01f8\u01fa\5.\30\2\u01f9\u01f8\3\2\2\2\u01fa")
        buf.write("\u01fd\3\2\2\2\u01fb\u01f9\3\2\2\2\u01fb\u01fc\3\2\2\2")
        buf.write("\u01fc\u0213\3\2\2\2\u01fd\u01fb\3\2\2\2\u01fe\u01ff\7")
        buf.write("\13\2\2\u01ff\u0200\7\u008d\2\2\u0200\u0213\7\u0085\2")
        buf.write("\2\u0201\u0202\7;\2\2\u0202\u0203\7\u0083\2\2\u0203\u0204")
        buf.write("\7\u0083\2\2\u0204\u0213\7\u0083\2\2\u0205\u0206\7<\2")
        buf.write("\2\u0206\u0207\7\u008d\2\2\u0207\u0213\7\u0083\2\2\u0208")
        buf.write("\u0209\7\23\2\2\u0209\u020a\7\u008d\2\2\u020a\u0213\7")
        buf.write("\u0081\2\2\u020b\u020c\7\26\2\2\u020c\u020d\7\u008d\2")
        buf.write("\2\u020d\u0213\7=\2\2\u020e\u020f\7\30\2\2\u020f\u0210")
        buf.write("\7\32\2\2\u0210\u0213\7\u0083\2\2\u0211\u0213\7\33\2\2")
        buf.write("\u0212\u01fb\3\2\2\2\u0212\u01fe\3\2\2\2\u0212\u0201\3")
        buf.write("\2\2\2\u0212\u0205\3\2\2\2\u0212\u0208\3\2\2\2\u0212\u020b")
        buf.write("\3\2\2\2\u0212\u020e\3\2\2\2\u0212\u0211\3\2\2\2\u0213")
        buf.write("-\3\2\2\2\u0214\u0215\7\6\2\2\u0215\u0216\5^\60\2\u0216")
        buf.write("\u0217\5^\60\2\u0217\u0218\5^\60\2\u0218\u0219\5^\60\2")
        buf.write("\u0219\u021a\5^\60\2\u021a\u021b\5^\60\2\u021b\u021c\7")
        buf.write("\u0083\2\2\u021c\u021d\7\u0083\2\2\u021d/\3\2\2\2\u021e")
        buf.write("\u0220\5\62\32\2\u021f\u021e\3\2\2\2\u0220\u0223\3\2\2")
        buf.write("\2\u0221\u021f\3\2\2\2\u0221\u0222\3\2\2\2\u0222\u0248")
        buf.write("\3\2\2\2\u0223\u0221\3\2\2\2\u0224\u0225\7\13\2\2\u0225")
        buf.write("\u0226\7\u008d\2\2\u0226\u0248\7\u0085\2\2\u0227\u0228")
        buf.write("\7;\2\2\u0228\u0229\7\u0083\2\2\u0229\u022a\7\u0083\2")
        buf.write("\2\u022a\u022b\7\u0083\2\2\u022b\u0248\7\u0083\2\2\u022c")
        buf.write("\u022d\7\r\2\2\u022d\u022e\7\u008d\2\2\u022e\u0248\7\u0081")
        buf.write("\2\2\u022f\u0230\7<\2\2\u0230\u0232\7\u0083\2\2\u0231")
        buf.write("\u0233\7\u0083\2\2\u0232\u0231\3\2\2\2\u0232\u0233\3\2")
        buf.write("\2\2\u0233\u0248\3\2\2\2\u0234\u0235\7\23\2\2\u0235\u0236")
        buf.write("\7\u008d\2\2\u0236\u0248\7\u0081\2\2\u0237\u0238\7\25")
        buf.write("\2\2\u0238\u0239\7\u008d\2\2\u0239\u0248\7\u0081\2\2\u023a")
        buf.write("\u023b\7\26\2\2\u023b\u023c\7\u008d\2\2\u023c\u0248\7")
        buf.write("?\2\2\u023d\u023e\7\30\2\2\u023e\u023f\7\32\2\2\u023f")
        buf.write("\u0244\7\u0083\2\2\u0240\u0245\7Z\2\2\u0241\u0242\7\13")
        buf.write("\2\2\u0242\u0243\7\u008d\2\2\u0243\u0245\7\u0085\2\2\u0244")
        buf.write("\u0240\3\2\2\2\u0244\u0241\3\2\2\2\u0245\u0248\3\2\2\2")
        buf.write("\u0246\u0248\7\33\2\2\u0247\u0221\3\2\2\2\u0247\u0224")
        buf.write("\3\2\2\2\u0247\u0227\3\2\2\2\u0247\u022c\3\2\2\2\u0247")
        buf.write("\u022f\3\2\2\2\u0247\u0234\3\2\2\2\u0247\u0237\3\2\2\2")
        buf.write("\u0247\u023a\3\2\2\2\u0247\u023d\3\2\2\2\u0247\u0246\3")
        buf.write("\2\2\2\u0248\61\3\2\2\2\u0249\u024a\7\6\2\2\u024a\u024b")
        buf.write("\5^\60\2\u024b\u024c\5^\60\2\u024c\u024d\5^\60\2\u024d")
        buf.write("\u0253\5^\60\2\u024e\u024f\5^\60\2\u024f\u0250\5^\60\2")
        buf.write("\u0250\u0251\5^\60\2\u0251\u0252\5^\60\2\u0252\u0254\3")
        buf.write("\2\2\2\u0253\u024e\3\2\2\2\u0253\u0254\3\2\2\2\u0254\u0255")
        buf.write("\3\2\2\2\u0255\u0256\7\u0083\2\2\u0256\u0259\7\u0083\2")
        buf.write("\2\u0257\u0258\7\u0083\2\2\u0258\u025a\7\u0083\2\2\u0259")
        buf.write("\u0257\3\2\2\2\u0259\u025a\3\2\2\2\u025a\63\3\2\2\2\u025b")
        buf.write("\u025d\5\66\34\2\u025c\u025b\3\2\2\2\u025d\u0260\3\2\2")
        buf.write("\2\u025e\u025c\3\2\2\2\u025e\u025f\3\2\2\2\u025f\u0285")
        buf.write("\3\2\2\2\u0260\u025e\3\2\2\2\u0261\u0262\7\13\2\2\u0262")
        buf.write("\u0263\7\u008d\2\2\u0263\u0285\7\u0085\2\2\u0264\u0265")
        buf.write("\7A\2\2\u0265\u0266\7\u0081\2\2\u0266\u0267\7\u0081\2")
        buf.write("\2\u0267\u0268\7\u0083\2\2\u0268\u0269\7\u0083\2\2\u0269")
        buf.write("\u0285\7\u0083\2\2\u026a\u026b\7<\2\2\u026b\u026c\7\u008d")
        buf.write("\2\2\u026c\u0285\7\u0083\2\2\u026d\u026e\7\23\2\2\u026e")
        buf.write("\u026f\7\u008d\2\2\u026f\u0285\7\u0081\2\2\u0270\u0271")
        buf.write("\7B\2\2\u0271\u0272\7\u008d\2\2\u0272\u0285\7\u0083\2")
        buf.write("\2\u0273\u0274\7C\2\2\u0274\u0275\7\u008d\2\2\u0275\u0285")
        buf.write("\7\u0083\2\2\u0276\u0277\7\26\2\2\u0277\u0278\7\u008d")
        buf.write("\2\2\u0278\u0285\7=\2\2\u0279\u027a\7\30\2\2\u027a\u027b")
        buf.write("\7\32\2\2\u027b\u0285\7\u0083\2\2\u027c\u027e\58\35\2")
        buf.write("\u027d\u027c\3\2\2\2\u027e\u0281\3\2\2\2\u027f\u027d\3")
        buf.write("\2\2\2\u027f\u0280\3\2\2\2\u0280\u0285\3\2\2\2\u0281\u027f")
        buf.write("\3\2\2\2\u0282\u0285\7\33\2\2\u0283\u0285\7E\2\2\u0284")
        buf.write("\u025e\3\2\2\2\u0284\u0261\3\2\2\2\u0284\u0264\3\2\2\2")
        buf.write("\u0284\u026a\3\2\2\2\u0284\u026d\3\2\2\2\u0284\u0270\3")
        buf.write("\2\2\2\u0284\u0273\3\2\2\2\u0284\u0276\3\2\2\2\u0284\u0279")
        buf.write("\3\2\2\2\u0284\u027f\3\2\2\2\u0284\u0282\3\2\2\2\u0284")
        buf.write("\u0283\3\2\2\2\u0285\65\3\2\2\2\u0286\u0287\7\6\2\2\u0287")
        buf.write("\u0288\5^\60\2\u0288\u0289\5^\60\2\u0289\u028a\5^\60\2")
        buf.write("\u028a\u028b\5^\60\2\u028b\u028c\5^\60\2\u028c\u028d\7")
        buf.write("\u0083\2\2\u028d\u028e\7\u0083\2\2\u028e\67\3\2\2\2\u028f")
        buf.write("\u0290\7D\2\2\u0290\u0291\5^\60\2\u0291\u0292\7\u0083")
        buf.write("\2\2\u0292\u0293\7\u0083\2\2\u02939\3\2\2\2\u0294\u0296")
        buf.write("\5<\37\2\u0295\u0294\3\2\2\2\u0296\u0299\3\2\2\2\u0297")
        buf.write("\u0295\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u02e5\3\2\2\2")
        buf.write("\u0299\u0297\3\2\2\2\u029a\u029c\5> \2\u029b\u029a\3\2")
        buf.write("\2\2\u029c\u029f\3\2\2\2\u029d\u029b\3\2\2\2\u029d\u029e")
        buf.write("\3\2\2\2\u029e\u02e5\3\2\2\2\u029f\u029d\3\2\2\2\u02a0")
        buf.write("\u02a2\5@!\2\u02a1\u02a0\3\2\2\2\u02a2\u02a5\3\2\2\2\u02a3")
        buf.write("\u02a1\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4\u02e5\3\2\2\2")
        buf.write("\u02a5\u02a3\3\2\2\2\u02a6\u02a8\5B\"\2\u02a7\u02a6\3")
        buf.write("\2\2\2\u02a8\u02ab\3\2\2\2\u02a9\u02a7\3\2\2\2\u02a9\u02aa")
        buf.write("\3\2\2\2\u02aa\u02e5\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ac")
        buf.write("\u02ae\5D#\2\u02ad\u02ac\3\2\2\2\u02ae\u02b1\3\2\2\2\u02af")
        buf.write("\u02ad\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\u02e5\3\2\2\2")
        buf.write("\u02b1\u02af\3\2\2\2\u02b2\u02b4\5F$\2\u02b3\u02b2\3\2")
        buf.write("\2\2\u02b4\u02b7\3\2\2\2\u02b5\u02b3\3\2\2\2\u02b5\u02b6")
        buf.write("\3\2\2\2\u02b6\u02e5\3\2\2\2\u02b7\u02b5\3\2\2\2\u02b8")
        buf.write("\u02ba\5H%\2\u02b9\u02b8\3\2\2\2\u02ba\u02bd\3\2\2\2\u02bb")
        buf.write("\u02b9\3\2\2\2\u02bb\u02bc\3\2\2\2\u02bc\u02e5\3\2\2\2")
        buf.write("\u02bd\u02bb\3\2\2\2\u02be\u02c0\5J&\2\u02bf\u02be\3\2")
        buf.write("\2\2\u02c0\u02c3\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c1\u02c2")
        buf.write("\3\2\2\2\u02c2\u02e5\3\2\2\2\u02c3\u02c1\3\2\2\2\u02c4")
        buf.write("\u02c6\5L\'\2\u02c5\u02c4\3\2\2\2\u02c6\u02c9\3\2\2\2")
        buf.write("\u02c7\u02c5\3\2\2\2\u02c7\u02c8\3\2\2\2\u02c8\u02e5\3")
        buf.write("\2\2\2\u02c9\u02c7\3\2\2\2\u02ca\u02cb\7\13\2\2\u02cb")
        buf.write("\u02cc\7\u008d\2\2\u02cc\u02e5\7\u0085\2\2\u02cd\u02cf")
        buf.write("\7O\2\2\u02ce\u02d0\7\u008d\2\2\u02cf\u02ce\3\2\2\2\u02cf")
        buf.write("\u02d0\3\2\2\2\u02d0\u02d1\3\2\2\2\u02d1\u02e5\7\u0083")
        buf.write("\2\2\u02d2\u02d3\7<\2\2\u02d3\u02d5\7\u0083\2\2\u02d4")
        buf.write("\u02d6\7\u0083\2\2\u02d5\u02d4\3\2\2\2\u02d5\u02d6\3\2")
        buf.write("\2\2\u02d6\u02e5\3\2\2\2\u02d7\u02d8\7\26\2\2\u02d8\u02e5")
        buf.write("\7?\2\2\u02d9\u02da\7\30\2\2\u02da\u02db\7\32\2\2\u02db")
        buf.write("\u02e0\7\u0083\2\2\u02dc\u02e1\7Z\2\2\u02dd\u02de\7\13")
        buf.write("\2\2\u02de\u02df\7\u008d\2\2\u02df\u02e1\7\u0085\2\2\u02e0")
        buf.write("\u02dc\3\2\2\2\u02e0\u02dd\3\2\2\2\u02e1\u02e2\3\2\2\2")
        buf.write("\u02e2\u02e5\7\u0085\2\2\u02e3\u02e5\7\33\2\2\u02e4\u0297")
        buf.write("\3\2\2\2\u02e4\u029d\3\2\2\2\u02e4\u02a3\3\2\2\2\u02e4")
        buf.write("\u02a9\3\2\2\2\u02e4\u02af\3\2\2\2\u02e4\u02b5\3\2\2\2")
        buf.write("\u02e4\u02bb\3\2\2\2\u02e4\u02c1\3\2\2\2\u02e4\u02c7\3")
        buf.write("\2\2\2\u02e4\u02ca\3\2\2\2\u02e4\u02cd\3\2\2\2\u02e4\u02d2")
        buf.write("\3\2\2\2\u02e4\u02d7\3\2\2\2\u02e4\u02d9\3\2\2\2\u02e4")
        buf.write("\u02e3\3\2\2\2\u02e5;\3\2\2\2\u02e6\u02e7\7G\2\2\u02e7")
        buf.write("\u02e9\5^\60\2\u02e8\u02ea\5^\60\2\u02e9\u02e8\3\2\2\2")
        buf.write("\u02e9\u02ea\3\2\2\2\u02ea\u02eb\3\2\2\2\u02eb\u02ed\7")
        buf.write("\u0083\2\2\u02ec\u02ee\7\u0083\2\2\u02ed\u02ec\3\2\2\2")
        buf.write("\u02ed\u02ee\3\2\2\2\u02ee=\3\2\2\2\u02ef\u02f0\7D\2\2")
        buf.write("\u02f0\u02f1\5^\60\2\u02f1\u02f2\7\u0083\2\2\u02f2?\3")
        buf.write("\2\2\2\u02f3\u02f4\7H\2\2\u02f4\u02f5\5^\60\2\u02f5\u02f6")
        buf.write("\5^\60\2\u02f6\u02f7\5^\60\2\u02f7\u02f9\7\u0085\2\2\u02f8")
        buf.write("\u02fa\7\u0082\2\2\u02f9\u02f8\3\2\2\2\u02f9\u02fa\3\2")
        buf.write("\2\2\u02fa\u02fb\3\2\2\2\u02fb\u02fc\7\u0085\2\2\u02fc")
        buf.write("A\3\2\2\2\u02fd\u02fe\7I\2\2\u02fe\u02ff\5^\60\2\u02ff")
        buf.write("C\3\2\2\2\u0300\u0301\7J\2\2\u0301\u0302\5^\60\2\u0302")
        buf.write("E\3\2\2\2\u0303\u0304\7K\2\2\u0304\u0305\5^\60\2\u0305")
        buf.write("G\3\2\2\2\u0306\u0307\7L\2\2\u0307\u0308\5^\60\2\u0308")
        buf.write("I\3\2\2\2\u0309\u030a\7M\2\2\u030a\u030b\7\u0085\2\2\u030b")
        buf.write("\u030c\5^\60\2\u030c\u030d\5^\60\2\u030d\u030e\5^\60\2")
        buf.write("\u030e\u030f\5^\60\2\u030f\u0311\5^\60\2\u0310\u0312\5")
        buf.write("^\60\2\u0311\u0310\3\2\2\2\u0311\u0312\3\2\2\2\u0312K")
        buf.write("\3\2\2\2\u0313\u0314\7N\2\2\u0314\u0315\5^\60\2\u0315")
        buf.write("M\3\2\2\2\u0316\u0318\5P)\2\u0317\u0316\3\2\2\2\u0318")
        buf.write("\u031b\3\2\2\2\u0319\u0317\3\2\2\2\u0319\u031a\3\2\2\2")
        buf.write("\u031a\u0363\3\2\2\2\u031b\u0319\3\2\2\2\u031c\u031d\7")
        buf.write("\13\2\2\u031d\u031e\7\u008d\2\2\u031e\u0363\7\u0085\2")
        buf.write("\2\u031f\u0363\7Q\2\2\u0320\u0321\7A\2\2\u0321\u0323\7")
        buf.write("\u0081\2\2\u0322\u0324\7\u0081\2\2\u0323\u0322\3\2\2\2")
        buf.write("\u0323\u0324\3\2\2\2\u0324\u0326\3\2\2\2\u0325\u0327\7")
        buf.write("\u0081\2\2\u0326\u0325\3\2\2\2\u0326\u0327\3\2\2\2\u0327")
        buf.write("\u0329\3\2\2\2\u0328\u032a\7\u0081\2\2\u0329\u0328\3\2")
        buf.write("\2\2\u0329\u032a\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u0363")
        buf.write("\7\u0083\2\2\u032c\u032d\7O\2\2\u032d\u032e\7\u008d\2")
        buf.write("\2\u032e\u0363\7\u0083\2\2\u032f\u0330\7<\2\2\u0330\u0331")
        buf.write("\7\u008d\2\2\u0331\u0363\7\u0083\2\2\u0332\u0333\7\23")
        buf.write("\2\2\u0333\u0334\7\u008d\2\2\u0334\u0363\7\u0081\2\2\u0335")
        buf.write("\u0336\7R\2\2\u0336\u0337\7\u0081\2\2\u0337\u0338\7\u0081")
        buf.write("\2\2\u0338\u033c\7\u0081\2\2\u0339\u033a\7\u0081\2\2\u033a")
        buf.write("\u033b\7\u0081\2\2\u033b\u033d\7\u0081\2\2\u033c\u0339")
        buf.write("\3\2\2\2\u033c\u033d\3\2\2\2\u033d\u0341\3\2\2\2\u033e")
        buf.write("\u033f\7\u0081\2\2\u033f\u0340\7\u0081\2\2\u0340\u0342")
        buf.write("\7\u0081\2\2\u0341\u033e\3\2\2\2\u0341\u0342\3\2\2\2\u0342")
        buf.write("\u0346\3\2\2\2\u0343\u0344\7\u0081\2\2\u0344\u0345\7\u0081")
        buf.write("\2\2\u0345\u0347\7\u0081\2\2\u0346\u0343\3\2\2\2\u0346")
        buf.write("\u0347\3\2\2\2\u0347\u0363\3\2\2\2\u0348\u0349\7\26\2")
        buf.write("\2\u0349\u034a\7\u008d\2\2\u034a\u0363\7=\2\2\u034b\u034c")
        buf.write("\7\30\2\2\u034c\u034d\7\32\2\2\u034d\u0352\7\u0083\2\2")
        buf.write("\u034e\u0353\7Z\2\2\u034f\u0350\7\13\2\2\u0350\u0351\7")
        buf.write("\u008d\2\2\u0351\u0353\7\u0085\2\2\u0352\u034e\3\2\2\2")
        buf.write("\u0352\u034f\3\2\2\2\u0353\u0363\3\2\2\2\u0354\u0363\7")
        buf.write("\33\2\2\u0355\u0356\7S\2\2\u0356\u0357\7T\2\2\u0357\u0359")
        buf.write("\7\u0081\2\2\u0358\u035a\7\u0081\2\2\u0359\u0358\3\2\2")
        buf.write("\2\u0359\u035a\3\2\2\2\u035a\u035c\3\2\2\2\u035b\u035d")
        buf.write("\7\u0081\2\2\u035c\u035b\3\2\2\2\u035c\u035d\3\2\2\2\u035d")
        buf.write("\u035f\3\2\2\2\u035e\u0360\7\u0081\2\2\u035f\u035e\3\2")
        buf.write("\2\2\u035f\u0360\3\2\2\2\u0360\u0363\3\2\2\2\u0361\u0363")
        buf.write("\7E\2\2\u0362\u0319\3\2\2\2\u0362\u031c\3\2\2\2\u0362")
        buf.write("\u031f\3\2\2\2\u0362\u0320\3\2\2\2\u0362\u032c\3\2\2\2")
        buf.write("\u0362\u032f\3\2\2\2\u0362\u0332\3\2\2\2\u0362\u0335\3")
        buf.write("\2\2\2\u0362\u0348\3\2\2\2\u0362\u034b\3\2\2\2\u0362\u0354")
        buf.write("\3\2\2\2\u0362\u0355\3\2\2\2\u0362\u0361\3\2\2\2\u0363")
        buf.write("O\3\2\2\2\u0364\u0365\7\6\2\2\u0365\u0366\5^\60\2\u0366")
        buf.write("\u0367\5^\60\2\u0367\u0368\5^\60\2\u0368\u036e\5^\60\2")
        buf.write("\u0369\u036a\5^\60\2\u036a\u036b\5^\60\2\u036b\u036c\5")
        buf.write("^\60\2\u036c\u036d\5^\60\2\u036d\u036f\3\2\2\2\u036e\u0369")
        buf.write("\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0375\3\2\2\2\u0370")
        buf.write("\u0371\5^\60\2\u0371\u0372\5^\60\2\u0372\u0373\5^\60\2")
        buf.write("\u0373\u0374\5^\60\2\u0374\u0376\3\2\2\2\u0375\u0370\3")
        buf.write("\2\2\2\u0375\u0376\3\2\2\2\u0376\u037c\3\2\2\2\u0377\u0378")
        buf.write("\5^\60\2\u0378\u0379\5^\60\2\u0379\u037a\5^\60\2\u037a")
        buf.write("\u037b\5^\60\2\u037b\u037d\3\2\2\2\u037c\u0377\3\2\2\2")
        buf.write("\u037c\u037d\3\2\2\2\u037dQ\3\2\2\2\u037e\u0380\5T+\2")
        buf.write("\u037f\u037e\3\2\2\2\u0380\u0383\3\2\2\2\u0381\u037f\3")
        buf.write("\2\2\2\u0381\u0382\3\2\2\2\u0382\u039b\3\2\2\2\u0383\u0381")
        buf.write("\3\2\2\2\u0384\u0385\7\13\2\2\u0385\u0386\7\u008d\2\2")
        buf.write("\u0386\u039b\7\u0085\2\2\u0387\u0388\7;\2\2\u0388\u0389")
        buf.write("\7\u0083\2\2\u0389\u038a\7\u0083\2\2\u038a\u038b\7\u0083")
        buf.write("\2\2\u038b\u038c\7\u0083\2\2\u038c\u039b\7\u0083\2\2\u038d")
        buf.write("\u038e\7<\2\2\u038e\u038f\7\u008d\2\2\u038f\u039b\7\u0083")
        buf.write("\2\2\u0390\u0391\7\23\2\2\u0391\u0392\7\u008d\2\2\u0392")
        buf.write("\u039b\7\u0081\2\2\u0393\u0394\7\26\2\2\u0394\u0395\7")
        buf.write("\u008d\2\2\u0395\u039b\7=\2\2\u0396\u0397\7\30\2\2\u0397")
        buf.write("\u0398\7\32\2\2\u0398\u039b\7\u0083\2\2\u0399\u039b\7")
        buf.write("\33\2\2\u039a\u0381\3\2\2\2\u039a\u0384\3\2\2\2\u039a")
        buf.write("\u0387\3\2\2\2\u039a\u038d\3\2\2\2\u039a\u0390\3\2\2\2")
        buf.write("\u039a\u0393\3\2\2\2\u039a\u0396\3\2\2\2\u039a\u0399\3")
        buf.write("\2\2\2\u039bS\3\2\2\2\u039c\u039d\7\6\2\2\u039d\u039e")
        buf.write("\5^\60\2\u039e\u039f\5^\60\2\u039f\u03a0\5^\60\2\u03a0")
        buf.write("\u03a1\5^\60\2\u03a1\u03a2\5^\60\2\u03a2\u03a3\5^\60\2")
        buf.write("\u03a3\u03a4\7\u0083\2\2\u03a4\u03a5\7\u0083\2\2\u03a5")
        buf.write("U\3\2\2\2\u03a6\u03a8\5X-\2\u03a7\u03a6\3\2\2\2\u03a8")
        buf.write("\u03ab\3\2\2\2\u03a9\u03a7\3\2\2\2\u03a9\u03aa\3\2\2\2")
        buf.write("\u03aa\u03c5\3\2\2\2\u03ab\u03a9\3\2\2\2\u03ac\u03ad\7")
        buf.write("\13\2\2\u03ad\u03ae\7\u008d\2\2\u03ae\u03c5\7\u0085\2")
        buf.write("\2\u03af\u03b0\7;\2\2\u03b0\u03b1\7\u0083\2\2\u03b1\u03b2")
        buf.write("\7\u0083\2\2\u03b2\u03b3\7\u0083\2\2\u03b3\u03b4\7\u0083")
        buf.write("\2\2\u03b4\u03b5\7\u0083\2\2\u03b5\u03b6\7\u0083\2\2\u03b6")
        buf.write("\u03c5\7\u0083\2\2\u03b7\u03b8\7<\2\2\u03b8\u03b9\7\u008d")
        buf.write("\2\2\u03b9\u03c5\7\u0083\2\2\u03ba\u03bb\7\23\2\2\u03bb")
        buf.write("\u03bc\7\u008d\2\2\u03bc\u03c5\7\u0081\2\2\u03bd\u03be")
        buf.write("\7\26\2\2\u03be\u03bf\7\u008d\2\2\u03bf\u03c5\7=\2\2\u03c0")
        buf.write("\u03c1\7\30\2\2\u03c1\u03c2\7\32\2\2\u03c2\u03c5\7\u0083")
        buf.write("\2\2\u03c3\u03c5\7\33\2\2\u03c4\u03a9\3\2\2\2\u03c4\u03ac")
        buf.write("\3\2\2\2\u03c4\u03af\3\2\2\2\u03c4\u03b7\3\2\2\2\u03c4")
        buf.write("\u03ba\3\2\2\2\u03c4\u03bd\3\2\2\2\u03c4\u03c0\3\2\2\2")
        buf.write("\u03c4\u03c3\3\2\2\2\u03c5W\3\2\2\2\u03c6\u03c7\7\6\2")
        buf.write("\2\u03c7\u03c8\5^\60\2\u03c8\u03c9\5^\60\2\u03c9\u03ca")
        buf.write("\5^\60\2\u03ca\u03cb\5^\60\2\u03cb\u03cc\5^\60\2\u03cc")
        buf.write("\u03cd\5^\60\2\u03cd\u03ce\5^\60\2\u03ce\u03cf\5^\60\2")
        buf.write("\u03cf\u03d0\7\u0083\2\2\u03d0\u03d1\7\u0083\2\2\u03d1")
        buf.write("Y\3\2\2\2\u03d2\u03d4\5\\/\2\u03d3\u03d2\3\2\2\2\u03d4")
        buf.write("\u03d7\3\2\2\2\u03d5\u03d3\3\2\2\2\u03d5\u03d6\3\2\2\2")
        buf.write("\u03d6\u03fe\3\2\2\2\u03d7\u03d5\3\2\2\2\u03d8\u03d9\7")
        buf.write("\13\2\2\u03d9\u03da\7\u008d\2\2\u03da\u03fe\7\u0085\2")
        buf.write("\2\u03db\u03dc\7X\2\2\u03dc\u03dd\7\u008d\2\2\u03dd\u03fe")
        buf.write("\7\u0085\2\2\u03de\u03df\7A\2\2\u03df\u03e0\7\u0081\2")
        buf.write("\2\u03e0\u03e1\7\u0081\2\2\u03e1\u03fe\7\u0083\2\2\u03e2")
        buf.write("\u03e3\7O\2\2\u03e3\u03e4\7\u008d\2\2\u03e4\u03fe\7\u0083")
        buf.write("\2\2\u03e5\u03e6\7<\2\2\u03e6\u03e7\7\u008d\2\2\u03e7")
        buf.write("\u03fe\7\u0083\2\2\u03e8\u03e9\7\23\2\2\u03e9\u03ea\7")
        buf.write("\u008d\2\2\u03ea\u03fe\7\u0081\2\2\u03eb\u03ec\7\26\2")
        buf.write("\2\u03ec\u03ed\7\u008d\2\2\u03ed\u03fe\7=\2\2\u03ee\u03ef")
        buf.write("\7\30\2\2\u03ef\u03f0\7\32\2\2\u03f0\u03f5\7\u0083\2\2")
        buf.write("\u03f1\u03f6\7Z\2\2\u03f2\u03f3\7\13\2\2\u03f3\u03f4\7")
        buf.write("\u008d\2\2\u03f4\u03f6\7\u0085\2\2\u03f5\u03f1\3\2\2\2")
        buf.write("\u03f5\u03f2\3\2\2\2\u03f6\u03fe\3\2\2\2\u03f7\u03fe\7")
        buf.write("\33\2\2\u03f8\u03f9\7S\2\2\u03f9\u03fa\7Y\2\2\u03fa\u03fb")
        buf.write("\7\u0081\2\2\u03fb\u03fe\7\u0081\2\2\u03fc\u03fe\7E\2")
        buf.write("\2\u03fd\u03d5\3\2\2\2\u03fd\u03d8\3\2\2\2\u03fd\u03db")
        buf.write("\3\2\2\2\u03fd\u03de\3\2\2\2\u03fd\u03e2\3\2\2\2\u03fd")
        buf.write("\u03e5\3\2\2\2\u03fd\u03e8\3\2\2\2\u03fd\u03eb\3\2\2\2")
        buf.write("\u03fd\u03ee\3\2\2\2\u03fd\u03f7\3\2\2\2\u03fd\u03f8\3")
        buf.write("\2\2\2\u03fd\u03fc\3\2\2\2\u03fe[\3\2\2\2\u03ff\u0400")
        buf.write("\7\6\2\2\u0400\u0401\5^\60\2\u0401\u0402\5^\60\2\u0402")
        buf.write("\u0403\5^\60\2\u0403\u0404\5^\60\2\u0404\u0405\5^\60\2")
        buf.write("\u0405\u0406\5^\60\2\u0406\u0407\5^\60\2\u0407\u0408\5")
        buf.write("^\60\2\u0408\u0409\5^\60\2\u0409\u040a\5^\60\2\u040a\u040c")
        buf.write("\5^\60\2\u040b\u040d\5^\60\2\u040c\u040b\3\2\2\2\u040c")
        buf.write("\u040d\3\2\2\2\u040d]\3\2\2\2\u040e\u040f\7\u0088\2\2")
        buf.write("\u040f\u0410\5`\61\2\u0410\u0411\7\u0089\2\2\u0411_\3")
        buf.write("\2\2\2\u0412\u0417\5b\62\2\u0413\u0414\7|\2\2\u0414\u0416")
        buf.write("\5b\62\2\u0415\u0413\3\2\2\2\u0416\u0419\3\2\2\2\u0417")
        buf.write("\u0415\3\2\2\2\u0417\u0418\3\2\2\2\u0418a\3\2\2\2\u0419")
        buf.write("\u0417\3\2\2\2\u041a\u041f\5d\63\2\u041b\u041c\7}\2\2")
        buf.write("\u041c\u041e\5d\63\2\u041d\u041b\3\2\2\2\u041e\u0421\3")
        buf.write("\2\2\2\u041f\u041d\3\2\2\2\u041f\u0420\3\2\2\2\u0420c")
        buf.write("\3\2\2\2\u0421\u041f\3\2\2\2\u0422\u0423\b\63\1\2\u0423")
        buf.write("\u0424\7\u0088\2\2\u0424\u0425\5`\61\2\u0425\u0426\7\u0089")
        buf.write("\2\2\u0426\u04ab\3\2\2\2\u0427\u04ab\7Z\2\2\u0428\u0429")
        buf.write("\7\\\2\2\u0429\u042a\t\2\2\2\u042a\u042b\t\3\2\2\u042b")
        buf.write("\u04ab\t\2\2\2\u042c\u042e\7]\2\2\u042d\u042f\7\u0096")
        buf.write("\2\2\u042e\u042d\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0430")
        buf.write("\3\2\2\2\u0430\u0431\7\u0097\2\2\u0431\u0432\7\u0098\2")
        buf.write("\2\u0432\u04ab\7\u0083\2\2\u0433\u0434\7^\2\2\u0434\u04ab")
        buf.write("\5d\63\37\u0435\u0436\7_\2\2\u0436\u04ab\5d\63\36\u0437")
        buf.write("\u0438\7`\2\2\u0438\u04ab\5d\63\35\u0439\u0440\7a\2\2")
        buf.write("\u043a\u0441\7\u0086\2\2\u043b\u043e\7\u0085\2\2\u043c")
        buf.write("\u043d\7\u008c\2\2\u043d\u043f\7\u0085\2\2\u043e\u043c")
        buf.write("\3\2\2\2\u043e\u043f\3\2\2\2\u043f\u0441\3\2\2\2\u0440")
        buf.write("\u043a\3\2\2\2\u0440\u043b\3\2\2\2\u0441\u04ab\3\2\2\2")
        buf.write("\u0442\u0443\7b\2\2\u0443\u0444\7\u0083\2\2\u0444\u0445")
        buf.write("\7\u0083\2\2\u0445\u0446\7\u0083\2\2\u0446\u0447\7\u0083")
        buf.write("\2\2\u0447\u0448\7\u0083\2\2\u0448\u04ab\7\u0083\2\2\u0449")
        buf.write("\u04ab\7c\2\2\u044a\u044b\7d\2\2\u044b\u04ab\7\u0081\2")
        buf.write("\2\u044c\u04ab\7e\2\2\u044d\u0454\7f\2\2\u044e\u0455\7")
        buf.write("\u0086\2\2\u044f\u0452\7\u0085\2\2\u0450\u0451\7\u008c")
        buf.write("\2\2\u0451\u0453\7\u0085\2\2\u0452\u0450\3\2\2\2\u0452")
        buf.write("\u0453\3\2\2\2\u0453\u0455\3\2\2\2\u0454\u044e\3\2\2\2")
        buf.write("\u0454\u044f\3\2\2\2\u0455\u04ab\3\2\2\2\u0456\u0457\7")
        buf.write("~\2\2\u0457\u04ab\5d\63\26\u0458\u0459\7g\2\2\u0459\u045a")
        buf.write("\7\u0088\2\2\u045a\u045c\7\u0083\2\2\u045b\u045d\7\177")
        buf.write("\2\2\u045c\u045b\3\2\2\2\u045c\u045d\3\2\2\2\u045d\u045e")
        buf.write("\3\2\2\2\u045e\u0460\7\u0083\2\2\u045f\u0461\7\177\2\2")
        buf.write("\u0460\u045f\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0462\3")
        buf.write("\2\2\2\u0462\u0463\7\u0083\2\2\u0463\u0464\7\u0089\2\2")
        buf.write("\u0464\u0465\7h\2\2\u0465\u04ab\7\u0083\2\2\u0466\u0467")
        buf.write("\7g\2\2\u0467\u0468\7\u0088\2\2\u0468\u0469\7z\2\2\u0469")
        buf.write("\u046a\7\u008d\2\2\u046a\u046c\5^\60\2\u046b\u046d\7\177")
        buf.write("\2\2\u046c\u046b\3\2\2\2\u046c\u046d\3\2\2\2\u046d\u0471")
        buf.write("\3\2\2\2\u046e\u046f\7{\2\2\u046f\u0470\7\u008d\2\2\u0470")
        buf.write("\u0472\5^\60\2\u0471\u046e\3\2\2\2\u0471\u0472\3\2\2\2")
        buf.write("\u0472\u0473\3\2\2\2\u0473\u0474\7\u0089\2\2\u0474\u0475")
        buf.write("\7h\2\2\u0475\u0476\7\u0083\2\2\u0476\u04ab\3\2\2\2\u0477")
        buf.write("\u04ab\7i\2\2\u0478\u04ab\7j\2\2\u0479\u0480\7k\2\2\u047a")
        buf.write("\u0481\7\u0087\2\2\u047b\u047e\7\u0081\2\2\u047c\u047d")
        buf.write("\7\u008c\2\2\u047d\u047f\7\u0081\2\2\u047e\u047c\3\2\2")
        buf.write("\2\u047e\u047f\3\2\2\2\u047f\u0481\3\2\2\2\u0480\u047a")
        buf.write("\3\2\2\2\u0480\u047b\3\2\2\2\u0481\u04ab\3\2\2\2\u0482")
        buf.write("\u0489\7l\2\2\u0483\u048a\7\u0086\2\2\u0484\u0487\7\u0085")
        buf.write("\2\2\u0485\u0486\7\u008c\2\2\u0486\u0488\7\u0085\2\2\u0487")
        buf.write("\u0485\3\2\2\2\u0487\u0488\3\2\2\2\u0488\u048a\3\2\2\2")
        buf.write("\u0489\u0483\3\2\2\2\u0489\u0484\3\2\2\2\u048a\u04ab\3")
        buf.write("\2\2\2\u048b\u0497\7n\2\2\u048c\u0498\7\u0086\2\2\u048d")
        buf.write("\u0490\7\u0085\2\2\u048e\u048f\7\u008c\2\2\u048f\u0491")
        buf.write("\7\u0085\2\2\u0490\u048e\3\2\2\2\u0490\u0491\3\2\2\2\u0491")
        buf.write("\u0498\3\2\2\2\u0492\u0495\7\u0084\2\2\u0493\u0494\7\u008c")
        buf.write("\2\2\u0494\u0496\7\u0084\2\2\u0495\u0493\3\2\2\2\u0495")
        buf.write("\u0496\3\2\2\2\u0496\u0498\3\2\2\2\u0497\u048c\3\2\2\2")
        buf.write("\u0497\u048d\3\2\2\2\u0497\u0492\3\2\2\2\u0498\u04ab\3")
        buf.write("\2\2\2\u0499\u049a\7o\2\2\u049a\u049b\7\u0083\2\2\u049b")
        buf.write("\u049c\7\u0083\2\2\u049c\u049d\7\u0083\2\2\u049d\u049e")
        buf.write("\7\u0083\2\2\u049e\u049f\7\u0083\2\2\u049f\u04ab\7\u0083")
        buf.write("\2\2\u04a0\u04ab\7p\2\2\u04a1\u04ab\7q\2\2\u04a2\u04ab")
        buf.write("\7r\2\2\u04a3\u04ab\7s\2\2\u04a4\u04ab\7t\2\2\u04a5\u04ab")
        buf.write("\7u\2\2\u04a6\u04ab\7v\2\2\u04a7\u04ab\7w\2\2\u04a8\u04ab")
        buf.write("\7x\2\2\u04a9\u04ab\7y\2\2\u04aa\u0422\3\2\2\2\u04aa\u0427")
        buf.write("\3\2\2\2\u04aa\u0428\3\2\2\2\u04aa\u042c\3\2\2\2\u04aa")
        buf.write("\u0433\3\2\2\2\u04aa\u0435\3\2\2\2\u04aa\u0437\3\2\2\2")
        buf.write("\u04aa\u0439\3\2\2\2\u04aa\u0442\3\2\2\2\u04aa\u0449\3")
        buf.write("\2\2\2\u04aa\u044a\3\2\2\2\u04aa\u044c\3\2\2\2\u04aa\u044d")
        buf.write("\3\2\2\2\u04aa\u0456\3\2\2\2\u04aa\u0458\3\2\2\2\u04aa")
        buf.write("\u0466\3\2\2\2\u04aa\u0477\3\2\2\2\u04aa\u0478\3\2\2\2")
        buf.write("\u04aa\u0479\3\2\2\2\u04aa\u0482\3\2\2\2\u04aa\u048b\3")
        buf.write("\2\2\2\u04aa\u0499\3\2\2\2\u04aa\u04a0\3\2\2\2\u04aa\u04a1")
        buf.write("\3\2\2\2\u04aa\u04a2\3\2\2\2\u04aa\u04a3\3\2\2\2\u04aa")
        buf.write("\u04a4\3\2\2\2\u04aa\u04a5\3\2\2\2\u04aa\u04a6\3\2\2\2")
        buf.write("\u04aa\u04a7\3\2\2\2\u04aa\u04a8\3\2\2\2\u04aa\u04a9\3")
        buf.write("\2\2\2\u04ab\u04b4\3\2\2\2\u04ac\u04ad\f\"\2\2\u04ad\u04ae")
        buf.write("\7[\2\2\u04ae\u04b3\7\u0083\2\2\u04af\u04b0\f\17\2\2\u04b0")
        buf.write("\u04b1\7m\2\2\u04b1\u04b3\7\u0083\2\2\u04b2\u04ac\3\2")
        buf.write("\2\2\u04b2\u04af\3\2\2\2\u04b3\u04b6\3\2\2\2\u04b4\u04b2")
        buf.write("\3\2\2\2\u04b4\u04b5\3\2\2\2\u04b5e\3\2\2\2\u04b6\u04b4")
        buf.write("\3\2\2\2kiou{\u0081\u0087\u008d\u0093\u0099\u009f\u00a5")
        buf.write("\u00ab\u00b1\u00b7\u00bd\u00c3\u0119\u0142\u0166\u0183")
        buf.write("\u018b\u0199\u01a6\u01ab\u01bc\u01cf\u01d7\u01e1\u01e5")
        buf.write("\u01ec\u01f1\u01f3\u01f6\u01fb\u0212\u0221\u0232\u0244")
        buf.write("\u0247\u0253\u0259\u025e\u027f\u0284\u0297\u029d\u02a3")
        buf.write("\u02a9\u02af\u02b5\u02bb\u02c1\u02c7\u02cf\u02d5\u02e0")
        buf.write("\u02e4\u02e9\u02ed\u02f9\u0311\u0319\u0323\u0326\u0329")
        buf.write("\u033c\u0341\u0346\u0352\u0359\u035c\u035f\u0362\u036e")
        buf.write("\u0375\u037c\u0381\u039a\u03a9\u03c4\u03d5\u03f5\u03fd")
        buf.write("\u040c\u0417\u041f\u042e\u043e\u0440\u0452\u0454\u045c")
        buf.write("\u0460\u046c\u0471\u047e\u0480\u0487\u0489\u0490\u0495")
        buf.write("\u0497\u04aa\u04b2\u04b4")
        return buf.getvalue()


class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'?'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "','", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'('", "')'", "'{'", "'}'", "':'", "'='", "'<'", "'>'", 
                     "'<='", "'>='", "'#'" ]

    symbolicNames = [ "<INVALID>", "End", "Noe", "Analysis", "Assign", "Asymptote", 
                      "Averaging", "Bgig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Noe_analysis", "Initialize", "Update", "Gamma", "Kappa", 
                      "Noe_avr_methods", "Noe_potential", "Cutoff", "Cuton", 
                      "From", "To", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Rdc_potential", "Coupling", "Coupling_potential", 
                      "Carbon", "Expectation", "PhiStep", "PsiStep", "Rcoil", 
                      "Zero", "Proton", "Observed", "Anisotropy", "Amides", 
                      "Carbons", "Nitrogens", "Oxygens", "RingAtoms", "AlphasAndAmides", 
                      "Error", "Conformation", "Compressed", "Phase", "Size", 
                      "Dimensions", "Danisotropy", "OneBond", "AngleDb", 
                      "DerivFlag", "Angle_dihedral", "All", "Around", "Atom", 
                      "Attribute", "BondedTo", "ByGroup", "ByRes", "Chemical", 
                      "Fbox", "Hydrogen", "Id", "Known", "Name", "Point", 
                      "Cut", "Previous", "Pseudo", "Residue", "Resname", 
                      "Saround", "SegIdentifier", "Sfbox", "Store_1", "Store_2", 
                      "Store_3", "Store_4", "Store_5", "Store_6", "Store_7", 
                      "Store_8", "Store_9", "Tag", "Tail", "Head", "Or_op", 
                      "And_op", "Not_op", "Comma", "Complex", "Integer", 
                      "Logical", "Real", "Double_quote_string", "Simple_name", 
                      "Simple_names", "Integers", "L_paren", "R_paren", 
                      "L_brace", "R_brace", "Colon", "Equ_op", "Lt_op", 
                      "Gt_op", "Leq_op", "Geq_op", "Neq_op", "SPACE", "COMMENT", 
                      "LINE_COMMENT", "Abs", "Attr_properties", "Comparison_ops" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_dihedral_statement = 16
    RULE_dihedral_assign = 17
    RULE_plane_statement = 18
    RULE_group_statement = 19
    RULE_harmonic_statement = 20
    RULE_sani_statement = 21
    RULE_sani_assign = 22
    RULE_coupling_statement = 23
    RULE_coup_assign = 24
    RULE_carbon_shift_statement = 25
    RULE_carbon_shift_assign = 26
    RULE_carbon_shift_rcoil = 27
    RULE_proton_shift_statement = 28
    RULE_observed = 29
    RULE_proton_shift_rcoil = 30
    RULE_proton_shift_anisotropy = 31
    RULE_proton_shift_amides = 32
    RULE_proton_shift_carbons = 33
    RULE_proton_shift_nitrogens = 34
    RULE_proton_shift_oxygens = 35
    RULE_proton_shift_ring_atoms = 36
    RULE_proton_shift_alphas_and_amides = 37
    RULE_conformation_statement = 38
    RULE_conf_assign = 39
    RULE_diffusion_statement = 40
    RULE_dani_assign = 41
    RULE_one_bond_coupling_statement = 42
    RULE_one_bond_assign = 43
    RULE_angle_db_statement = 44
    RULE_angle_db_assign = 45
    RULE_selection = 46
    RULE_selection_expression = 47
    RULE_term = 48
    RULE_factor = 49

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "dihedral_statement", 
                   "dihedral_assign", "plane_statement", "group_statement", 
                   "harmonic_statement", "sani_statement", "sani_assign", 
                   "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor" ]

    EOF = Token.EOF
    End=1
    Noe=2
    Analysis=3
    Assign=4
    Asymptote=5
    Averaging=6
    Bgig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Cv=11
    Den=12
    Distribute=13
    Ensemble=14
    Monomers=15
    Ncount=16
    Nrestraints=17
    Outd=18
    Partition=19
    Potential=20
    Predict=21
    Print=22
    Raverage=23
    Threshold=24
    Reset=25
    Rswitch=26
    Scale=27
    SoExponent=28
    SqConstant=29
    SqExponent=30
    SqOffset=31
    Taverage=32
    Temperature=33
    Noe_analysis=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Noe_avr_methods=39
    Noe_potential=40
    Cutoff=41
    Cuton=42
    From=43
    To=44
    Restraints=45
    Dihedral=46
    Nassign=47
    Print_any=48
    Plane=49
    Group=50
    Selection=51
    Weight=52
    Harmonic=53
    Exponent=54
    Normal=55
    Sanisotropy=56
    Coefficients=57
    ForceConstant=58
    Rdc_potential=59
    Coupling=60
    Coupling_potential=61
    Carbon=62
    Expectation=63
    PhiStep=64
    PsiStep=65
    Rcoil=66
    Zero=67
    Proton=68
    Observed=69
    Anisotropy=70
    Amides=71
    Carbons=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Conformation=78
    Compressed=79
    Phase=80
    Size=81
    Dimensions=82
    Danisotropy=83
    OneBond=84
    AngleDb=85
    DerivFlag=86
    Angle_dihedral=87
    All=88
    Around=89
    Atom=90
    Attribute=91
    BondedTo=92
    ByGroup=93
    ByRes=94
    Chemical=95
    Fbox=96
    Hydrogen=97
    Id=98
    Known=99
    Name=100
    Point=101
    Cut=102
    Previous=103
    Pseudo=104
    Residue=105
    Resname=106
    Saround=107
    SegIdentifier=108
    Sfbox=109
    Store_1=110
    Store_2=111
    Store_3=112
    Store_4=113
    Store_5=114
    Store_6=115
    Store_7=116
    Store_8=117
    Store_9=118
    Tag=119
    Tail=120
    Head=121
    Or_op=122
    And_op=123
    Not_op=124
    Comma=125
    Complex=126
    Integer=127
    Logical=128
    Real=129
    Double_quote_string=130
    Simple_name=131
    Simple_names=132
    Integers=133
    L_paren=134
    R_paren=135
    L_brace=136
    R_brace=137
    Colon=138
    Equ_op=139
    Lt_op=140
    Gt_op=141
    Leq_op=142
    Geq_op=143
    Neq_op=144
    SPACE=145
    COMMENT=146
    LINE_COMMENT=147
    Abs=148
    Attr_properties=149
    Comparison_ops=150

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 103
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Noe:
                self.state = 100
                self.distance_restraint()
                self.state = 105
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 109
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 106
                    self.dihedral_angle_restraint() 
                self.state = 111
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

            self.state = 115
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 112
                    self.plane_restraint() 
                self.state = 117
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 121
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Restraints:
                self.state = 118
                self.harmonic_restraint()
                self.state = 123
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Sanisotropy:
                self.state = 124
                self.rdc_restraint()
                self.state = 129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Coupling:
                self.state = 130
                self.coupling_restraint()
                self.state = 135
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 139
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Carbon:
                self.state = 136
                self.carbon_shift_restraint()
                self.state = 141
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Proton:
                self.state = 142
                self.proton_shift_restraint()
                self.state = 147
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Conformation:
                self.state = 148
                self.conformation_db_restraint()
                self.state = 153
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Danisotropy:
                self.state = 154
                self.diffusion_anisotropy_restraint()
                self.state = 159
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.OneBond:
                self.state = 160
                self.one_bond_coupling_restraint()
                self.state = 165
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.AngleDb:
                self.state = 166
                self.angle_db_restraint()
                self.state = 171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 175
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 172
                    self.noe_assign() 
                self.state = 177
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

            self.state = 181
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,13,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 178
                    self.dihedral_assign() 
                self.state = 183
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,13,self._ctx)

            self.state = 187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign:
                self.state = 184
                self.sani_assign()
                self.state = 189
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0):
                self.state = 190
                self.plane_statement()
                self.state = 195
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 196
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def L_brace(self):
            return self.getToken(CnsMRParser.L_brace, 0)

        def noe_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,0)


        def R_brace(self):
            return self.getToken(CnsMRParser.R_brace, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.match(CnsMRParser.Noe)
            self.state = 199
            self.match(CnsMRParser.L_brace)
            self.state = 200
            self.noe_statement()
            self.state = 201
            self.match(CnsMRParser.R_brace)
            self.state = 202
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def L_brace(self):
            return self.getToken(CnsMRParser.L_brace, 0)

        def dihedral_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,0)


        def R_brace(self):
            return self.getToken(CnsMRParser.R_brace, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(CnsMRParser.Restraints)
            self.state = 205
            self.match(CnsMRParser.Dihedral)
            self.state = 206
            self.match(CnsMRParser.L_brace)
            self.state = 207
            self.dihedral_statement()
            self.state = 208
            self.match(CnsMRParser.R_brace)
            self.state = 209
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def L_brace(self):
            return self.getToken(CnsMRParser.L_brace, 0)

        def plane_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,0)


        def R_brace(self):
            return self.getToken(CnsMRParser.R_brace, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self.match(CnsMRParser.Restraints)
            self.state = 212
            self.match(CnsMRParser.Plane)
            self.state = 213
            self.match(CnsMRParser.L_brace)
            self.state = 214
            self.plane_statement()
            self.state = 215
            self.match(CnsMRParser.R_brace)
            self.state = 216
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def L_brace(self):
            return self.getToken(CnsMRParser.L_brace, 0)

        def harmonic_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,0)


        def R_brace(self):
            return self.getToken(CnsMRParser.R_brace, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(CnsMRParser.Restraints)
            self.state = 219
            self.match(CnsMRParser.Harmonic)
            self.state = 220
            self.match(CnsMRParser.L_brace)
            self.state = 221
            self.harmonic_statement()
            self.state = 222
            self.match(CnsMRParser.R_brace)
            self.state = 223
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def L_brace(self):
            return self.getToken(CnsMRParser.L_brace, 0)

        def sani_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,0)


        def R_brace(self):
            return self.getToken(CnsMRParser.R_brace, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(CnsMRParser.Sanisotropy)
            self.state = 226
            self.match(CnsMRParser.L_brace)
            self.state = 227
            self.sani_statement()
            self.state = 228
            self.match(CnsMRParser.R_brace)
            self.state = 229
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def L_brace(self):
            return self.getToken(CnsMRParser.L_brace, 0)

        def coupling_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,0)


        def R_brace(self):
            return self.getToken(CnsMRParser.R_brace, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.match(CnsMRParser.Coupling)
            self.state = 232
            self.match(CnsMRParser.L_brace)
            self.state = 233
            self.coupling_statement()
            self.state = 234
            self.match(CnsMRParser.R_brace)
            self.state = 235
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def L_brace(self):
            return self.getToken(CnsMRParser.L_brace, 0)

        def carbon_shift_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,0)


        def R_brace(self):
            return self.getToken(CnsMRParser.R_brace, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(CnsMRParser.Carbon)
            self.state = 238
            self.match(CnsMRParser.L_brace)
            self.state = 239
            self.carbon_shift_statement()
            self.state = 240
            self.match(CnsMRParser.R_brace)
            self.state = 241
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def L_brace(self):
            return self.getToken(CnsMRParser.L_brace, 0)

        def proton_shift_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,0)


        def R_brace(self):
            return self.getToken(CnsMRParser.R_brace, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.match(CnsMRParser.Proton)
            self.state = 244
            self.match(CnsMRParser.L_brace)
            self.state = 245
            self.proton_shift_statement()
            self.state = 246
            self.match(CnsMRParser.R_brace)
            self.state = 247
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def L_brace(self):
            return self.getToken(CnsMRParser.L_brace, 0)

        def conformation_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,0)


        def R_brace(self):
            return self.getToken(CnsMRParser.R_brace, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.match(CnsMRParser.Conformation)
            self.state = 250
            self.match(CnsMRParser.L_brace)
            self.state = 251
            self.conformation_statement()
            self.state = 252
            self.match(CnsMRParser.R_brace)
            self.state = 253
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def L_brace(self):
            return self.getToken(CnsMRParser.L_brace, 0)

        def diffusion_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,0)


        def R_brace(self):
            return self.getToken(CnsMRParser.R_brace, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.match(CnsMRParser.Danisotropy)
            self.state = 256
            self.match(CnsMRParser.L_brace)
            self.state = 257
            self.diffusion_statement()
            self.state = 258
            self.match(CnsMRParser.R_brace)
            self.state = 259
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def L_brace(self):
            return self.getToken(CnsMRParser.L_brace, 0)

        def one_bond_coupling_statement(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,0)


        def R_brace(self):
            return self.getToken(CnsMRParser.R_brace, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(CnsMRParser.OneBond)
            self.state = 262
            self.match(CnsMRParser.L_brace)
            self.state = 263
            self.one_bond_coupling_statement()
            self.state = 264
            self.match(CnsMRParser.R_brace)
            self.state = 265
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def L_brace(self):
            return self.getToken(CnsMRParser.L_brace, 0)

        def angle_db_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,0)


        def R_brace(self):
            return self.getToken(CnsMRParser.R_brace, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(CnsMRParser.AngleDb)
            self.state = 268
            self.match(CnsMRParser.L_brace)
            self.state = 269
            self.angle_db_statement()
            self.state = 270
            self.match(CnsMRParser.R_brace)
            self.state = 271
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_names(self):
            return self.getToken(CnsMRParser.Simple_names, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def Averaging(self):
            return self.getToken(CnsMRParser.Averaging, 0)

        def Noe_avr_methods(self):
            return self.getToken(CnsMRParser.Noe_avr_methods, 0)

        def Bgig(self):
            return self.getToken(CnsMRParser.Bgig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def Ensemble(self):
            return self.getToken(CnsMRParser.Ensemble, 0)

        def R_brace(self):
            return self.getToken(CnsMRParser.R_brace, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def L_brace(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.L_brace)
            else:
                return self.getToken(CnsMRParser.L_brace, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Noe_potential(self):
            return self.getToken(CnsMRParser.Noe_potential, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 393
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,20,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 273
                self.match(CnsMRParser.Analysis)
                self.state = 274
                self.match(CnsMRParser.Equ_op)
                self.state = 275
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 276
                    self.noe_assign()
                    self.state = 281
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 282
                self.match(CnsMRParser.Asymptote)
                self.state = 283
                self.match(CnsMRParser.Simple_names)
                self.state = 284
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 285
                self.match(CnsMRParser.Averaging)
                self.state = 286
                self.match(CnsMRParser.Simple_names)
                self.state = 287
                self.match(CnsMRParser.Noe_avr_methods)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 288
                self.match(CnsMRParser.Bgig)
                self.state = 289
                self.match(CnsMRParser.Simple_names)
                self.state = 290
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 291
                self.match(CnsMRParser.Ceiling)
                self.state = 292
                self.match(CnsMRParser.Equ_op)
                self.state = 293
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 294
                self.match(CnsMRParser.Classification)
                self.state = 295
                self.match(CnsMRParser.Equ_op)
                self.state = 296
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 297
                self.match(CnsMRParser.CountViol)
                self.state = 298
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 299
                self.match(CnsMRParser.Cv)
                self.state = 300
                self.match(CnsMRParser.Equ_op)
                self.state = 301
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 302
                self.match(CnsMRParser.Den)
                self.state = 303
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 304
                self.match(CnsMRParser.Den)
                self.state = 305
                self.match(CnsMRParser.Update)
                self.state = 306
                self.match(CnsMRParser.Gamma)
                self.state = 307
                self.match(CnsMRParser.Equ_op)
                self.state = 308
                self.match(CnsMRParser.Real)
                self.state = 309
                self.match(CnsMRParser.Kappa)
                self.state = 310
                self.match(CnsMRParser.Equ_op)
                self.state = 311
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 312
                self.match(CnsMRParser.Distribute)
                self.state = 313
                self.match(CnsMRParser.Simple_name)
                self.state = 314
                self.match(CnsMRParser.Simple_name)
                self.state = 315
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 316
                self.match(CnsMRParser.Ensemble)
                self.state = 320
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,17,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 317
                        self.match(CnsMRParser.L_brace) 
                    self.state = 322
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,17,self._ctx)

                self.state = 323
                self.match(CnsMRParser.R_brace)
                self.state = 324
                self.match(CnsMRParser.End)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 325
                self.match(CnsMRParser.Monomers)
                self.state = 326
                self.match(CnsMRParser.Simple_names)
                self.state = 327
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 328
                self.match(CnsMRParser.Ncount)
                self.state = 329
                self.match(CnsMRParser.Simple_names)
                self.state = 330
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 331
                self.match(CnsMRParser.Nrestraints)
                self.state = 332
                self.match(CnsMRParser.Equ_op)
                self.state = 333
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 334
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 335
                self.match(CnsMRParser.Partition)
                self.state = 336
                self.match(CnsMRParser.Equ_op)
                self.state = 337
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 338
                self.match(CnsMRParser.Potential)
                self.state = 339
                self.match(CnsMRParser.Simple_names)
                self.state = 340
                self.match(CnsMRParser.Noe_potential)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 341
                self.match(CnsMRParser.Predict)
                self.state = 342
                self.match(CnsMRParser.L_brace)
                self.state = 343
                self.predict_statement()
                self.state = 344
                self.match(CnsMRParser.R_brace)
                self.state = 345
                self.match(CnsMRParser.End)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 347
                self.match(CnsMRParser.Print)
                self.state = 348
                self.match(CnsMRParser.Threshold)
                self.state = 349
                self.match(CnsMRParser.Equ_op)
                self.state = 350
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 351
                self.match(CnsMRParser.Raverage)
                self.state = 352
                self.match(CnsMRParser.Simple_name)
                self.state = 356
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 353
                        self.match(CnsMRParser.L_brace) 
                    self.state = 358
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

                self.state = 359
                self.match(CnsMRParser.R_brace)
                self.state = 360
                self.match(CnsMRParser.End)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 361
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 362
                self.match(CnsMRParser.Rswitch)
                self.state = 363
                self.match(CnsMRParser.Simple_names)
                self.state = 364
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 365
                self.match(CnsMRParser.Scale)
                self.state = 366
                self.match(CnsMRParser.Simple_names)
                self.state = 367
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 368
                self.match(CnsMRParser.SoExponent)
                self.state = 369
                self.match(CnsMRParser.Simple_names)
                self.state = 370
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 371
                self.match(CnsMRParser.SqConstant)
                self.state = 372
                self.match(CnsMRParser.Simple_names)
                self.state = 373
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 374
                self.match(CnsMRParser.SqExponent)
                self.state = 375
                self.match(CnsMRParser.Simple_names)
                self.state = 376
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 377
                self.match(CnsMRParser.SqOffset)
                self.state = 378
                self.match(CnsMRParser.Simple_names)
                self.state = 379
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 380
                self.match(CnsMRParser.Taverage)
                self.state = 381
                self.match(CnsMRParser.Simple_name)
                self.state = 385
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 382
                        self.match(CnsMRParser.L_brace) 
                    self.state = 387
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

                self.state = 388
                self.match(CnsMRParser.R_brace)
                self.state = 389
                self.match(CnsMRParser.End)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 390
                self.match(CnsMRParser.Temperature)
                self.state = 391
                self.match(CnsMRParser.Equ_op)
                self.state = 392
                self.match(CnsMRParser.Real)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self.match(CnsMRParser.Assign)
            self.state = 396
            self.selection()
            self.state = 397
            self.selection()
            self.state = 398
            self.match(CnsMRParser.Real)
            self.state = 399
            self.match(CnsMRParser.Real)
            self.state = 400
            self.match(CnsMRParser.Real)
            self.state = 407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 401
                self.match(CnsMRParser.Or_op)
                self.state = 402
                self.selection()
                self.state = 403
                self.selection()
                self.state = 409
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        try:
            self.state = 420
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 410
                self.match(CnsMRParser.Cutoff)
                self.state = 411
                self.match(CnsMRParser.Equ_op)
                self.state = 412
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 413
                self.match(CnsMRParser.Cuton)
                self.state = 414
                self.match(CnsMRParser.Equ_op)
                self.state = 415
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 416
                self.match(CnsMRParser.From)
                self.state = 417
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 418
                self.match(CnsMRParser.To)
                self.state = 419
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign, CnsMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 422
                    self.dihedral_assign()
                    self.state = 427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 428
                self.match(CnsMRParser.Cv)
                self.state = 429
                self.match(CnsMRParser.Equ_op)
                self.state = 430
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 431
                self.match(CnsMRParser.Nassign)
                self.state = 432
                self.match(CnsMRParser.Equ_op)
                self.state = 433
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 4)
                self.state = 434
                self.match(CnsMRParser.Partition)
                self.state = 435
                self.match(CnsMRParser.Equ_op)
                self.state = 436
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 437
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 438
                self.match(CnsMRParser.Scale)
                self.state = 439
                self.match(CnsMRParser.Equ_op)
                self.state = 440
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 7)
                self.state = 441
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(CnsMRParser.Assign)
            self.state = 445
            self.selection()
            self.state = 446
            self.selection()
            self.state = 447
            self.selection()
            self.state = 448
            self.selection()
            self.state = 449
            self.match(CnsMRParser.Real)
            self.state = 450
            self.match(CnsMRParser.Real)
            self.state = 451
            self.match(CnsMRParser.Real)
            self.state = 452
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def L_brace(self):
            return self.getToken(CnsMRParser.L_brace, 0)

        def group_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Group_statementContext,0)


        def R_brace(self):
            return self.getToken(CnsMRParser.R_brace, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_plane_statement)
        try:
            self.state = 461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.match(CnsMRParser.Group)
                self.state = 455
                self.match(CnsMRParser.L_brace)
                self.state = 456
                self.group_statement()
                self.state = 457
                self.match(CnsMRParser.R_brace)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 459
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 460
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_group_statement)
        try:
            self.state = 469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 463
                self.match(CnsMRParser.Selection)
                self.state = 464
                self.match(CnsMRParser.Equ_op)
                self.state = 465
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 466
                self.match(CnsMRParser.Weight)
                self.state = 467
                self.match(CnsMRParser.Equ_op)
                self.state = 468
                self.match(CnsMRParser.Real)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 471
                self.match(CnsMRParser.Exponent)
                self.state = 472
                self.match(CnsMRParser.Equ_op)
                self.state = 473
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 474
                self.match(CnsMRParser.Normal)
                self.state = 475
                self.match(CnsMRParser.Equ_op)
                self.state = 476
                self.match(CnsMRParser.L_paren)
                self.state = 497
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Real]:
                    self.state = 477
                    self.match(CnsMRParser.Real)
                    self.state = 479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 478
                        self.match(CnsMRParser.Comma)


                    self.state = 481
                    self.match(CnsMRParser.Real)
                    self.state = 483
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 482
                        self.match(CnsMRParser.Comma)


                    self.state = 485
                    self.match(CnsMRParser.Real)
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 486
                    self.match(CnsMRParser.Tail)
                    self.state = 487
                    self.match(CnsMRParser.Equ_op)
                    self.state = 488
                    self.selection()
                    self.state = 490
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 489
                        self.match(CnsMRParser.Comma)


                    self.state = 495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 492
                        self.match(CnsMRParser.Head)
                        self.state = 493
                        self.match(CnsMRParser.Equ_op)
                        self.state = 494
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 499
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign, CnsMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 502
                    self.sani_assign()
                    self.state = 507
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 508
                self.match(CnsMRParser.Classification)
                self.state = 509
                self.match(CnsMRParser.Equ_op)
                self.state = 510
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 511
                self.match(CnsMRParser.Coefficients)
                self.state = 512
                self.match(CnsMRParser.Real)
                self.state = 513
                self.match(CnsMRParser.Real)
                self.state = 514
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 515
                self.match(CnsMRParser.ForceConstant)
                self.state = 516
                self.match(CnsMRParser.Equ_op)
                self.state = 517
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 518
                self.match(CnsMRParser.Nrestraints)
                self.state = 519
                self.match(CnsMRParser.Equ_op)
                self.state = 520
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 521
                self.match(CnsMRParser.Potential)
                self.state = 522
                self.match(CnsMRParser.Equ_op)
                self.state = 523
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 524
                self.match(CnsMRParser.Print)
                self.state = 525
                self.match(CnsMRParser.Threshold)
                self.state = 526
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 527
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 530
            self.match(CnsMRParser.Assign)
            self.state = 531
            self.selection()
            self.state = 532
            self.selection()
            self.state = 533
            self.selection()
            self.state = 534
            self.selection()
            self.state = 535
            self.selection()
            self.state = 536
            self.selection()
            self.state = 537
            self.match(CnsMRParser.Real)
            self.state = 538
            self.match(CnsMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(CnsMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign, CnsMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 540
                    self.coup_assign()
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 546
                self.match(CnsMRParser.Classification)
                self.state = 547
                self.match(CnsMRParser.Equ_op)
                self.state = 548
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 549
                self.match(CnsMRParser.Coefficients)
                self.state = 550
                self.match(CnsMRParser.Real)
                self.state = 551
                self.match(CnsMRParser.Real)
                self.state = 552
                self.match(CnsMRParser.Real)
                self.state = 553
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 554
                self.match(CnsMRParser.Cv)
                self.state = 555
                self.match(CnsMRParser.Equ_op)
                self.state = 556
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 557
                self.match(CnsMRParser.ForceConstant)
                self.state = 558
                self.match(CnsMRParser.Real)
                self.state = 560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Real:
                    self.state = 559
                    self.match(CnsMRParser.Real)


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 562
                self.match(CnsMRParser.Nrestraints)
                self.state = 563
                self.match(CnsMRParser.Equ_op)
                self.state = 564
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 565
                self.match(CnsMRParser.Partition)
                self.state = 566
                self.match(CnsMRParser.Equ_op)
                self.state = 567
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 568
                self.match(CnsMRParser.Potential)
                self.state = 569
                self.match(CnsMRParser.Equ_op)
                self.state = 570
                self.match(CnsMRParser.Coupling_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 571
                self.match(CnsMRParser.Print)
                self.state = 572
                self.match(CnsMRParser.Threshold)
                self.state = 573
                self.match(CnsMRParser.Real)
                self.state = 578
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 574
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 575
                    self.match(CnsMRParser.Classification)
                    self.state = 576
                    self.match(CnsMRParser.Equ_op)
                    self.state = 577
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 580
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(CnsMRParser.Assign)
            self.state = 584
            self.selection()
            self.state = 585
            self.selection()
            self.state = 586
            self.selection()
            self.state = 587
            self.selection()
            self.state = 593
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 588
                self.selection()
                self.state = 589
                self.selection()
                self.state = 590
                self.selection()
                self.state = 591
                self.selection()


            self.state = 595
            self.match(CnsMRParser.Real)
            self.state = 596
            self.match(CnsMRParser.Real)
            self.state = 599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Real:
                self.state = 597
                self.match(CnsMRParser.Real)
                self.state = 598
                self.match(CnsMRParser.Real)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_rcoilContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,i)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 642
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 601
                    self.carbon_shift_assign()
                    self.state = 606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 607
                self.match(CnsMRParser.Classification)
                self.state = 608
                self.match(CnsMRParser.Equ_op)
                self.state = 609
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 610
                self.match(CnsMRParser.Expectation)
                self.state = 611
                self.match(CnsMRParser.Integer)
                self.state = 612
                self.match(CnsMRParser.Integer)
                self.state = 613
                self.match(CnsMRParser.Real)
                self.state = 614
                self.match(CnsMRParser.Real)
                self.state = 615
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 616
                self.match(CnsMRParser.ForceConstant)
                self.state = 617
                self.match(CnsMRParser.Equ_op)
                self.state = 618
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 619
                self.match(CnsMRParser.Nrestraints)
                self.state = 620
                self.match(CnsMRParser.Equ_op)
                self.state = 621
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 622
                self.match(CnsMRParser.PhiStep)
                self.state = 623
                self.match(CnsMRParser.Equ_op)
                self.state = 624
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 625
                self.match(CnsMRParser.PsiStep)
                self.state = 626
                self.match(CnsMRParser.Equ_op)
                self.state = 627
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 628
                self.match(CnsMRParser.Potential)
                self.state = 629
                self.match(CnsMRParser.Equ_op)
                self.state = 630
                self.match(CnsMRParser.Rdc_potential)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 631
                self.match(CnsMRParser.Print)
                self.state = 632
                self.match(CnsMRParser.Threshold)
                self.state = 633
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Rcoil:
                    self.state = 634
                    self.carbon_shift_rcoil()
                    self.state = 639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 640
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 641
                self.match(CnsMRParser.Zero)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 644
            self.match(CnsMRParser.Assign)
            self.state = 645
            self.selection()
            self.state = 646
            self.selection()
            self.state = 647
            self.selection()
            self.state = 648
            self.selection()
            self.state = 649
            self.selection()
            self.state = 650
            self.match(CnsMRParser.Real)
            self.state = 651
            self.match(CnsMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(CnsMRParser.Rcoil)
            self.state = 654
            self.selection()
            self.state = 655
            self.match(CnsMRParser.Real)
            self.state = 656
            self.match(CnsMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.ObservedContext,i)


        def proton_shift_rcoil(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_rcoilContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,i)


        def proton_shift_anisotropy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_anisotropyContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,i)


        def proton_shift_amides(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_amidesContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,i)


        def proton_shift_carbons(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_carbonsContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,i)


        def proton_shift_nitrogens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_nitrogensContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,i)


        def proton_shift_oxygens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_oxygensContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,i)


        def proton_shift_ring_atoms(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_ring_atomsContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,i)


        def proton_shift_alphas_and_amides(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_alphas_and_amidesContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(CnsMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Observed:
                    self.state = 658
                    self.observed()
                    self.state = 663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Rcoil:
                    self.state = 664
                    self.proton_shift_rcoil()
                    self.state = 669
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Anisotropy:
                    self.state = 670
                    self.proton_shift_anisotropy()
                    self.state = 675
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Amides:
                    self.state = 676
                    self.proton_shift_amides()
                    self.state = 681
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Carbons:
                    self.state = 682
                    self.proton_shift_carbons()
                    self.state = 687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Nitrogens:
                    self.state = 688
                    self.proton_shift_nitrogens()
                    self.state = 693
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Oxygens:
                    self.state = 694
                    self.proton_shift_oxygens()
                    self.state = 699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.RingAtoms:
                    self.state = 700
                    self.proton_shift_ring_atoms()
                    self.state = 705
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.AlphasAndAmides:
                    self.state = 706
                    self.proton_shift_alphas_and_amides()
                    self.state = 711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 712
                self.match(CnsMRParser.Classification)
                self.state = 713
                self.match(CnsMRParser.Equ_op)
                self.state = 714
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 715
                self.match(CnsMRParser.Error)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 716
                    self.match(CnsMRParser.Equ_op)


                self.state = 719
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 720
                self.match(CnsMRParser.ForceConstant)
                self.state = 721
                self.match(CnsMRParser.Real)
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Real:
                    self.state = 722
                    self.match(CnsMRParser.Real)


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 725
                self.match(CnsMRParser.Potential)
                self.state = 726
                self.match(CnsMRParser.Coupling_potential)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 727
                self.match(CnsMRParser.Print)
                self.state = 728
                self.match(CnsMRParser.Threshold)
                self.state = 729
                self.match(CnsMRParser.Real)
                self.state = 734
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 730
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 731
                    self.match(CnsMRParser.Classification)
                    self.state = 732
                    self.match(CnsMRParser.Equ_op)
                    self.state = 733
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 736
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 737
                self.match(CnsMRParser.Reset)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 740
            self.match(CnsMRParser.Observed)
            self.state = 741
            self.selection()
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 742
                self.selection()


            self.state = 745
            self.match(CnsMRParser.Real)
            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Real:
                self.state = 746
                self.match(CnsMRParser.Real)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 749
            self.match(CnsMRParser.Rcoil)
            self.state = 750
            self.selection()
            self.state = 751
            self.match(CnsMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(CnsMRParser.Anisotropy)
            self.state = 754
            self.selection()
            self.state = 755
            self.selection()
            self.state = 756
            self.selection()
            self.state = 757
            self.match(CnsMRParser.Simple_name)
            self.state = 759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 758
                self.match(CnsMRParser.Logical)


            self.state = 761
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 763
            self.match(CnsMRParser.Amides)
            self.state = 764
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbons(self):
            return self.getToken(CnsMRParser.Carbons, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(CnsMRParser.Carbons)
            self.state = 767
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.match(CnsMRParser.Nitrogens)
            self.state = 770
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 772
            self.match(CnsMRParser.Oxygens)
            self.state = 773
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 775
            self.match(CnsMRParser.RingAtoms)
            self.state = 776
            self.match(CnsMRParser.Simple_name)
            self.state = 777
            self.selection()
            self.state = 778
            self.selection()
            self.state = 779
            self.selection()
            self.state = 780
            self.selection()
            self.state = 781
            self.selection()
            self.state = 783
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 782
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 785
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 786
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conf_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign, CnsMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 788
                    self.conf_assign()
                    self.state = 793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 794
                self.match(CnsMRParser.Classification)
                self.state = 795
                self.match(CnsMRParser.Equ_op)
                self.state = 796
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 797
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 798
                self.match(CnsMRParser.Expectation)
                self.state = 799
                self.match(CnsMRParser.Integer)
                self.state = 801
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 800
                    self.match(CnsMRParser.Integer)


                self.state = 804
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 803
                    self.match(CnsMRParser.Integer)


                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 806
                    self.match(CnsMRParser.Integer)


                self.state = 809
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 810
                self.match(CnsMRParser.Error)
                self.state = 811
                self.match(CnsMRParser.Equ_op)
                self.state = 812
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 813
                self.match(CnsMRParser.ForceConstant)
                self.state = 814
                self.match(CnsMRParser.Equ_op)
                self.state = 815
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 816
                self.match(CnsMRParser.Nrestraints)
                self.state = 817
                self.match(CnsMRParser.Equ_op)
                self.state = 818
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 819
                self.match(CnsMRParser.Phase)
                self.state = 820
                self.match(CnsMRParser.Integer)
                self.state = 821
                self.match(CnsMRParser.Integer)
                self.state = 822
                self.match(CnsMRParser.Integer)
                self.state = 826
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 823
                    self.match(CnsMRParser.Integer)
                    self.state = 824
                    self.match(CnsMRParser.Integer)
                    self.state = 825
                    self.match(CnsMRParser.Integer)


                self.state = 831
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 828
                    self.match(CnsMRParser.Integer)
                    self.state = 829
                    self.match(CnsMRParser.Integer)
                    self.state = 830
                    self.match(CnsMRParser.Integer)


                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 833
                    self.match(CnsMRParser.Integer)
                    self.state = 834
                    self.match(CnsMRParser.Integer)
                    self.state = 835
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 838
                self.match(CnsMRParser.Potential)
                self.state = 839
                self.match(CnsMRParser.Equ_op)
                self.state = 840
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 841
                self.match(CnsMRParser.Print)
                self.state = 842
                self.match(CnsMRParser.Threshold)
                self.state = 843
                self.match(CnsMRParser.Real)
                self.state = 848
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 844
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 845
                    self.match(CnsMRParser.Classification)
                    self.state = 846
                    self.match(CnsMRParser.Equ_op)
                    self.state = 847
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 850
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 851
                self.match(CnsMRParser.Size)
                self.state = 852
                self.match(CnsMRParser.Dimensions)
                self.state = 853
                self.match(CnsMRParser.Integer)
                self.state = 855
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,69,self._ctx)
                if la_ == 1:
                    self.state = 854
                    self.match(CnsMRParser.Integer)


                self.state = 858
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 857
                    self.match(CnsMRParser.Integer)


                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 860
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 863
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(CnsMRParser.Assign)
            self.state = 867
            self.selection()
            self.state = 868
            self.selection()
            self.state = 869
            self.selection()
            self.state = 870
            self.selection()
            self.state = 876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 871
                self.selection()
                self.state = 872
                self.selection()
                self.state = 873
                self.selection()
                self.state = 874
                self.selection()


            self.state = 883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 878
                self.selection()
                self.state = 879
                self.selection()
                self.state = 880
                self.selection()
                self.state = 881
                self.selection()


            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 885
                self.selection()
                self.state = 886
                self.selection()
                self.state = 887
                self.selection()
                self.state = 888
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign, CnsMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 892
                    self.dani_assign()
                    self.state = 897
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 898
                self.match(CnsMRParser.Classification)
                self.state = 899
                self.match(CnsMRParser.Equ_op)
                self.state = 900
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 901
                self.match(CnsMRParser.Coefficients)
                self.state = 902
                self.match(CnsMRParser.Real)
                self.state = 903
                self.match(CnsMRParser.Real)
                self.state = 904
                self.match(CnsMRParser.Real)
                self.state = 905
                self.match(CnsMRParser.Real)
                self.state = 906
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 907
                self.match(CnsMRParser.ForceConstant)
                self.state = 908
                self.match(CnsMRParser.Equ_op)
                self.state = 909
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 910
                self.match(CnsMRParser.Nrestraints)
                self.state = 911
                self.match(CnsMRParser.Equ_op)
                self.state = 912
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 913
                self.match(CnsMRParser.Potential)
                self.state = 914
                self.match(CnsMRParser.Equ_op)
                self.state = 915
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 916
                self.match(CnsMRParser.Print)
                self.state = 917
                self.match(CnsMRParser.Threshold)
                self.state = 918
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 919
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.match(CnsMRParser.Assign)
            self.state = 923
            self.selection()
            self.state = 924
            self.selection()
            self.state = 925
            self.selection()
            self.state = 926
            self.selection()
            self.state = 927
            self.selection()
            self.state = 928
            self.selection()
            self.state = 929
            self.match(CnsMRParser.Real)
            self.state = 930
            self.match(CnsMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 962
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign, CnsMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 932
                    self.one_bond_assign()
                    self.state = 937
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 938
                self.match(CnsMRParser.Classification)
                self.state = 939
                self.match(CnsMRParser.Equ_op)
                self.state = 940
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 941
                self.match(CnsMRParser.Coefficients)
                self.state = 942
                self.match(CnsMRParser.Real)
                self.state = 943
                self.match(CnsMRParser.Real)
                self.state = 944
                self.match(CnsMRParser.Real)
                self.state = 945
                self.match(CnsMRParser.Real)
                self.state = 946
                self.match(CnsMRParser.Real)
                self.state = 947
                self.match(CnsMRParser.Real)
                self.state = 948
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 949
                self.match(CnsMRParser.ForceConstant)
                self.state = 950
                self.match(CnsMRParser.Equ_op)
                self.state = 951
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 952
                self.match(CnsMRParser.Nrestraints)
                self.state = 953
                self.match(CnsMRParser.Equ_op)
                self.state = 954
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 955
                self.match(CnsMRParser.Potential)
                self.state = 956
                self.match(CnsMRParser.Equ_op)
                self.state = 957
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 958
                self.match(CnsMRParser.Print)
                self.state = 959
                self.match(CnsMRParser.Threshold)
                self.state = 960
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 961
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 964
            self.match(CnsMRParser.Assign)
            self.state = 965
            self.selection()
            self.state = 966
            self.selection()
            self.state = 967
            self.selection()
            self.state = 968
            self.selection()
            self.state = 969
            self.selection()
            self.state = 970
            self.selection()
            self.state = 971
            self.selection()
            self.state = 972
            self.selection()
            self.state = 973
            self.match(CnsMRParser.Real)
            self.state = 974
            self.match(CnsMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Angle_dihedral(self):
            return self.getToken(CnsMRParser.Angle_dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1019
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign, CnsMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 976
                    self.angle_db_assign()
                    self.state = 981
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 982
                self.match(CnsMRParser.Classification)
                self.state = 983
                self.match(CnsMRParser.Equ_op)
                self.state = 984
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 985
                self.match(CnsMRParser.DerivFlag)
                self.state = 986
                self.match(CnsMRParser.Equ_op)
                self.state = 987
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 988
                self.match(CnsMRParser.Expectation)
                self.state = 989
                self.match(CnsMRParser.Integer)
                self.state = 990
                self.match(CnsMRParser.Integer)
                self.state = 991
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 992
                self.match(CnsMRParser.Error)
                self.state = 993
                self.match(CnsMRParser.Equ_op)
                self.state = 994
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 995
                self.match(CnsMRParser.ForceConstant)
                self.state = 996
                self.match(CnsMRParser.Equ_op)
                self.state = 997
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 998
                self.match(CnsMRParser.Nrestraints)
                self.state = 999
                self.match(CnsMRParser.Equ_op)
                self.state = 1000
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1001
                self.match(CnsMRParser.Potential)
                self.state = 1002
                self.match(CnsMRParser.Equ_op)
                self.state = 1003
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1004
                self.match(CnsMRParser.Print)
                self.state = 1005
                self.match(CnsMRParser.Threshold)
                self.state = 1006
                self.match(CnsMRParser.Real)
                self.state = 1011
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 1007
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 1008
                    self.match(CnsMRParser.Classification)
                    self.state = 1009
                    self.match(CnsMRParser.Equ_op)
                    self.state = 1010
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1013
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1014
                self.match(CnsMRParser.Size)
                self.state = 1015
                self.match(CnsMRParser.Angle_dihedral)
                self.state = 1016
                self.match(CnsMRParser.Integer)
                self.state = 1017
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1018
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1021
            self.match(CnsMRParser.Assign)
            self.state = 1022
            self.selection()
            self.state = 1023
            self.selection()
            self.state = 1024
            self.selection()
            self.state = 1025
            self.selection()
            self.state = 1026
            self.selection()
            self.state = 1027
            self.selection()
            self.state = 1028
            self.selection()
            self.state = 1029
            self.selection()
            self.state = 1030
            self.selection()
            self.state = 1031
            self.selection()
            self.state = 1032
            self.selection()
            self.state = 1034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1033
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1036
            self.match(CnsMRParser.L_paren)
            self.state = 1037
            self.selection_expression()
            self.state = 1038
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1040
            self.term()
            self.state = 1045
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 1041
                self.match(CnsMRParser.Or_op)
                self.state = 1042
                self.term()
                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1048
            self.factor(0)
            self.state = 1053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1049
                self.match(CnsMRParser.And_op)
                self.state = 1050
                self.factor(0)
                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store_1(self):
            return self.getToken(CnsMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(CnsMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(CnsMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(CnsMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(CnsMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(CnsMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(CnsMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(CnsMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(CnsMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.state = 1057
                self.match(CnsMRParser.L_paren)
                self.state = 1058
                self.selection_expression()
                self.state = 1059
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1061
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1062
                self.match(CnsMRParser.Atom)
                self.state = 1063
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1064
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1065
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1066
                self.match(CnsMRParser.Attribute)
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1067
                    self.match(CnsMRParser.Abs)


                self.state = 1070
                self.match(CnsMRParser.Attr_properties)
                self.state = 1071
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1072
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 5:
                self.state = 1073
                self.match(CnsMRParser.BondedTo)
                self.state = 1074
                self.factor(29)
                pass

            elif la_ == 6:
                self.state = 1075
                self.match(CnsMRParser.ByGroup)
                self.state = 1076
                self.factor(28)
                pass

            elif la_ == 7:
                self.state = 1077
                self.match(CnsMRParser.ByRes)
                self.state = 1078
                self.factor(27)
                pass

            elif la_ == 8:
                self.state = 1079
                self.match(CnsMRParser.Chemical)
                self.state = 1086
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1080
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1081
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1084
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                    if la_ == 1:
                        self.state = 1082
                        self.match(CnsMRParser.Colon)
                        self.state = 1083
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1088
                self.match(CnsMRParser.Fbox)
                self.state = 1089
                self.match(CnsMRParser.Real)
                self.state = 1090
                self.match(CnsMRParser.Real)
                self.state = 1091
                self.match(CnsMRParser.Real)
                self.state = 1092
                self.match(CnsMRParser.Real)
                self.state = 1093
                self.match(CnsMRParser.Real)
                self.state = 1094
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 10:
                self.state = 1095
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1096
                self.match(CnsMRParser.Id)
                self.state = 1097
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1098
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1099
                self.match(CnsMRParser.Name)
                self.state = 1106
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1100
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1101
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1104
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
                    if la_ == 1:
                        self.state = 1102
                        self.match(CnsMRParser.Colon)
                        self.state = 1103
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1108
                self.match(CnsMRParser.Not_op)
                self.state = 1109
                self.factor(20)
                pass

            elif la_ == 15:
                self.state = 1110
                self.match(CnsMRParser.Point)
                self.state = 1111
                self.match(CnsMRParser.L_paren)
                self.state = 1112
                self.match(CnsMRParser.Real)
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1113
                    self.match(CnsMRParser.Comma)


                self.state = 1116
                self.match(CnsMRParser.Real)
                self.state = 1118
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1117
                    self.match(CnsMRParser.Comma)


                self.state = 1120
                self.match(CnsMRParser.Real)
                self.state = 1121
                self.match(CnsMRParser.R_paren)
                self.state = 1122
                self.match(CnsMRParser.Cut)
                self.state = 1123
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 16:
                self.state = 1124
                self.match(CnsMRParser.Point)
                self.state = 1125
                self.match(CnsMRParser.L_paren)
                self.state = 1126
                self.match(CnsMRParser.Tail)
                self.state = 1127
                self.match(CnsMRParser.Equ_op)
                self.state = 1128
                self.selection()
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1129
                    self.match(CnsMRParser.Comma)


                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1132
                    self.match(CnsMRParser.Head)
                    self.state = 1133
                    self.match(CnsMRParser.Equ_op)
                    self.state = 1134
                    self.selection()


                self.state = 1137
                self.match(CnsMRParser.R_paren)
                self.state = 1138
                self.match(CnsMRParser.Cut)
                self.state = 1139
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 17:
                self.state = 1141
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 18:
                self.state = 1142
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 19:
                self.state = 1143
                self.match(CnsMRParser.Residue)
                self.state = 1150
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1144
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1145
                    self.match(CnsMRParser.Integer)
                    self.state = 1148
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
                    if la_ == 1:
                        self.state = 1146
                        self.match(CnsMRParser.Colon)
                        self.state = 1147
                        self.match(CnsMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 1152
                self.match(CnsMRParser.Resname)
                self.state = 1159
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1153
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1154
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1157
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                    if la_ == 1:
                        self.state = 1155
                        self.match(CnsMRParser.Colon)
                        self.state = 1156
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1161
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1173
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1162
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1163
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1166
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                    if la_ == 1:
                        self.state = 1164
                        self.match(CnsMRParser.Colon)
                        self.state = 1165
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1168
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1171
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                    if la_ == 1:
                        self.state = 1169
                        self.match(CnsMRParser.Colon)
                        self.state = 1170
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1175
                self.match(CnsMRParser.Sfbox)
                self.state = 1176
                self.match(CnsMRParser.Real)
                self.state = 1177
                self.match(CnsMRParser.Real)
                self.state = 1178
                self.match(CnsMRParser.Real)
                self.state = 1179
                self.match(CnsMRParser.Real)
                self.state = 1180
                self.match(CnsMRParser.Real)
                self.state = 1181
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 23:
                self.state = 1182
                self.match(CnsMRParser.Store_1)
                pass

            elif la_ == 24:
                self.state = 1183
                self.match(CnsMRParser.Store_2)
                pass

            elif la_ == 25:
                self.state = 1184
                self.match(CnsMRParser.Store_3)
                pass

            elif la_ == 26:
                self.state = 1185
                self.match(CnsMRParser.Store_4)
                pass

            elif la_ == 27:
                self.state = 1186
                self.match(CnsMRParser.Store_5)
                pass

            elif la_ == 28:
                self.state = 1187
                self.match(CnsMRParser.Store_6)
                pass

            elif la_ == 29:
                self.state = 1188
                self.match(CnsMRParser.Store_7)
                pass

            elif la_ == 30:
                self.state = 1189
                self.match(CnsMRParser.Store_8)
                pass

            elif la_ == 31:
                self.state = 1190
                self.match(CnsMRParser.Store_9)
                pass

            elif la_ == 32:
                self.state = 1191
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1202
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1200
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1194
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 1195
                        self.match(CnsMRParser.Around)
                        self.state = 1196
                        self.match(CnsMRParser.Real)
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1197
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1198
                        self.match(CnsMRParser.Saround)
                        self.state = 1199
                        self.match(CnsMRParser.Real)
                        pass

             
                self.state = 1204
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[49] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




