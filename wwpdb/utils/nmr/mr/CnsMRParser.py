# Generated from CnsMRParser.g4 by ANTLR 4.12.0
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,254,1904,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,196,8,0,10,0,12,0,199,9,0,1,0,1,0,
        1,1,1,1,5,1,205,8,1,10,1,12,1,208,9,1,1,1,1,1,1,2,3,2,213,8,2,1,
        2,1,2,5,2,217,8,2,10,2,12,2,220,9,2,1,2,1,2,1,3,3,3,225,8,3,1,3,
        1,3,5,3,229,8,3,10,3,12,3,232,9,3,1,3,1,3,1,4,3,4,237,8,4,1,4,1,
        4,5,4,241,8,4,10,4,12,4,244,9,4,1,4,1,4,1,5,1,5,5,5,250,8,5,10,5,
        12,5,253,9,5,1,5,1,5,1,6,1,6,5,6,259,8,6,10,6,12,6,262,9,6,1,6,1,
        6,1,7,1,7,5,7,268,8,7,10,7,12,7,271,9,7,1,7,1,7,1,8,1,8,5,8,277,
        8,8,10,8,12,8,280,9,8,1,8,1,8,1,9,1,9,5,9,286,8,9,10,9,12,9,289,
        9,9,1,9,1,9,1,10,1,10,5,10,295,8,10,10,10,12,10,298,9,10,1,10,1,
        10,1,11,1,11,5,11,304,8,11,10,11,12,11,307,9,11,1,11,1,11,1,12,1,
        12,5,12,313,8,12,10,12,12,12,316,9,12,1,12,1,12,1,13,1,13,3,13,322,
        8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,3,13,340,8,13,1,13,1,13,1,13,1,13,1,13,1,13,
        3,13,348,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,357,8,13,1,
        13,1,13,1,13,3,13,362,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,5,13,372,8,13,10,13,12,13,375,9,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,3,13,388,8,13,1,13,1,13,1,13,1,13,3,
        13,394,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,3,13,407,8,13,1,13,1,13,1,13,5,13,412,8,13,10,13,12,13,415,9,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,5,13,445,8,13,10,13,12,13,448,9,13,1,13,1,13,1,13,3,
        13,453,8,13,1,13,3,13,456,8,13,1,14,1,14,1,14,1,14,1,14,3,14,463,
        8,14,1,14,3,14,466,8,14,1,14,5,14,469,8,14,10,14,12,14,472,9,14,
        1,14,1,14,3,14,476,8,14,1,14,1,14,1,14,3,14,481,8,14,1,14,3,14,484,
        8,14,1,14,3,14,487,8,14,5,14,489,8,14,10,14,12,14,492,9,14,1,15,
        1,15,3,15,496,8,15,1,15,1,15,1,15,3,15,501,8,15,1,15,1,15,1,15,1,
        15,1,15,3,15,508,8,15,1,16,1,16,3,16,512,8,16,1,16,1,16,1,16,3,16,
        517,8,16,1,16,1,16,1,16,3,16,522,8,16,1,16,1,16,1,16,3,16,527,8,
        16,1,16,1,16,1,16,3,16,532,8,16,1,16,1,16,1,16,3,16,537,8,16,1,16,
        1,16,1,16,3,16,542,8,16,1,16,3,16,545,8,16,1,17,1,17,1,17,1,17,1,
        17,3,17,552,8,17,1,17,1,17,1,17,3,17,557,8,17,1,17,1,17,1,17,3,17,
        562,8,17,1,17,1,17,1,17,1,17,3,17,568,8,17,1,17,1,17,3,17,572,8,
        17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,
        19,1,19,1,19,3,19,589,8,19,1,20,1,20,5,20,593,8,20,10,20,12,20,596,
        9,20,1,20,1,20,1,21,1,21,3,21,602,8,21,1,21,1,21,1,21,3,21,607,8,
        21,1,21,3,21,610,8,21,1,22,1,22,1,22,3,22,615,8,22,1,22,1,22,1,22,
        3,22,620,8,22,1,22,1,22,1,22,3,22,625,8,22,1,22,1,22,3,22,629,8,
        22,1,22,1,22,1,22,1,22,3,22,635,8,22,1,22,1,22,3,22,639,8,22,1,22,
        1,22,3,22,643,8,22,1,22,3,22,646,8,22,3,22,648,8,22,1,22,1,22,3,
        22,652,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,1,24,1,24,3,24,670,8,24,1,24,1,24,1,24,3,24,675,
        8,24,1,24,1,24,1,24,3,24,680,8,24,1,24,1,24,1,24,1,24,1,24,3,24,
        687,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,698,8,
        25,1,25,3,25,701,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,3,26,714,8,26,1,26,1,26,1,26,1,26,3,26,720,8,26,1,26,
        1,26,3,26,724,8,26,1,26,1,26,1,26,3,26,729,8,26,1,26,1,26,1,26,3,
        26,734,8,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,742,8,26,1,26,3,26,
        745,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,
        757,8,27,1,27,1,27,1,27,1,27,1,27,3,27,764,8,27,1,28,1,28,1,28,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,778,8,28,1,28,1,
        28,1,28,3,28,783,8,28,1,28,1,28,1,28,3,28,788,8,28,1,28,1,28,1,28,
        3,28,793,8,28,1,28,1,28,1,28,3,28,798,8,28,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,3,28,807,8,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,1,29,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,3,31,835,8,31,1,31,1,31,1,31,1,31,3,
        31,841,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,850,8,31,1,31,
        1,31,1,31,3,31,855,8,31,1,32,1,32,1,32,3,32,860,8,32,1,32,1,32,3,
        32,864,8,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,34,1,34,1,34,3,
        34,876,8,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,
        37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,900,
        8,39,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,41,3,41,911,8,41,
        1,41,3,41,914,8,41,1,41,3,41,917,8,41,1,41,1,41,1,41,3,41,922,8,
        41,1,41,1,41,1,41,3,41,927,8,41,1,41,1,41,1,41,3,41,932,8,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,942,8,41,1,41,1,41,1,41,
        3,41,947,8,41,1,41,1,41,1,41,3,41,952,8,41,1,41,1,41,3,41,956,8,
        41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,964,8,41,1,41,1,41,1,41,1,
        41,1,41,3,41,971,8,41,1,41,3,41,974,8,41,1,41,3,41,977,8,41,1,41,
        3,41,980,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        3,42,992,8,42,1,42,1,42,1,42,1,42,1,42,3,42,999,8,42,1,42,1,42,1,
        42,1,42,1,42,3,42,1006,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,
        43,1,43,1,43,1,43,3,43,1019,8,43,1,43,1,43,1,43,3,43,1024,8,43,1,
        43,1,43,1,43,3,43,1029,8,43,1,43,1,43,1,43,1,43,1,43,3,43,1036,8,
        43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1047,8,44,1,
        45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,
        45,1062,8,45,1,45,1,45,1,45,3,45,1067,8,45,1,45,1,45,1,45,3,45,1072,
        8,45,1,45,1,45,1,45,1,45,1,45,3,45,1079,8,45,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,3,47,
        1097,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1106,8,47,1,47,
        1,47,1,47,3,47,1111,8,47,1,47,1,47,1,47,3,47,1116,8,47,1,47,1,47,
        1,47,3,47,1121,8,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1129,8,47,
        1,47,1,47,1,47,1,47,1,47,1,47,3,47,1137,8,47,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1152,8,48,1,49,
        1,49,1,49,5,49,1157,8,49,10,49,12,49,1160,9,49,1,49,1,49,1,50,1,
        50,5,50,1166,8,50,10,50,12,50,1169,9,50,1,50,1,50,1,50,3,50,1174,
        8,50,1,51,1,51,3,51,1178,8,51,1,51,1,51,1,51,3,51,1183,8,51,1,51,
        1,51,1,51,3,51,1188,8,51,1,51,3,51,1191,8,51,1,52,1,52,1,52,1,52,
        1,53,1,53,1,53,5,53,1200,8,53,10,53,12,53,1203,9,53,1,54,1,54,1,
        54,5,54,1208,8,54,10,54,12,54,1211,9,54,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1225,8,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1241,
        8,55,1,55,3,55,1244,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1263,8,55,1,55,
        1,55,1,55,3,55,1268,8,55,1,55,3,55,1271,8,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,3,55,1280,8,55,1,55,1,55,3,55,1284,8,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1295,8,55,1,55,1,55,3,55,
        1299,8,55,1,55,1,55,3,55,1303,8,55,1,55,3,55,1306,8,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1319,8,55,1,55,
        3,55,1322,8,55,1,55,1,55,1,55,1,55,1,55,3,55,1329,8,55,1,55,3,55,
        1332,8,55,1,55,1,55,1,55,1,55,1,55,3,55,1339,8,55,1,55,1,55,1,55,
        3,55,1344,8,55,1,55,3,55,1347,8,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,
        1367,8,55,1,55,1,55,1,55,1,55,1,55,1,55,5,55,1375,8,55,10,55,12,
        55,1378,9,55,1,56,1,56,1,57,1,57,1,58,1,58,1,59,1,59,1,60,1,60,3,
        60,1390,8,60,1,60,1,60,1,61,1,61,1,62,1,62,1,62,5,62,1399,8,62,10,
        62,12,62,1402,9,62,1,62,3,62,1405,8,62,3,62,1407,8,62,1,62,1,62,
        5,62,1411,8,62,10,62,12,62,1414,9,62,1,62,1,62,1,63,1,63,1,63,1,
        63,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1428,8,64,1,65,1,65,1,65,3,
        65,1433,8,65,1,66,1,66,1,66,3,66,1438,8,66,1,67,1,67,1,67,1,67,1,
        67,1,67,1,67,3,67,1447,8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,
        68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,
        68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,
        68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,
        68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,
        68,5,68,1509,8,68,10,68,12,68,1512,9,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,5,68,1526,8,68,10,68,12,68,1529,
        9,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,
        1568,8,68,1,69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,1,70,
        1,71,1,71,1,71,3,71,1584,8,71,1,72,1,72,3,72,1588,8,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1600,8,72,1,72,1,72,
        1,73,1,73,5,73,1606,8,73,10,73,12,73,1609,9,73,1,73,1,73,1,74,1,
        74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,1623,8,74,1,74,1,
        74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,74,1638,
        8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,3,74,1668,8,74,1,75,1,75,1,75,1,75,1,75,5,75,1675,
        8,75,10,75,12,75,1678,9,75,1,75,5,75,1681,8,75,10,75,12,75,1684,
        9,75,1,75,5,75,1687,8,75,10,75,12,75,1690,9,75,3,75,1692,8,75,1,
        75,1,75,1,75,1,75,1,75,1,75,5,75,1700,8,75,10,75,12,75,1703,9,75,
        1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,5,76,1714,8,76,10,76,
        12,76,1717,9,76,1,76,5,76,1720,8,76,10,76,12,76,1723,9,76,1,76,5,
        76,1726,8,76,10,76,12,76,1729,9,76,3,76,1731,8,76,1,76,1,76,1,76,
        1,76,1,76,1,76,5,76,1739,8,76,10,76,12,76,1742,9,76,1,76,1,76,1,
        76,1,76,1,77,1,77,1,77,1,77,1,77,5,77,1753,8,77,10,77,12,77,1756,
        9,77,1,77,5,77,1759,8,77,10,77,12,77,1762,9,77,1,77,5,77,1765,8,
        77,10,77,12,77,1768,9,77,3,77,1770,8,77,1,77,1,77,1,77,1,77,1,77,
        1,77,5,77,1778,8,77,10,77,12,77,1781,9,77,1,77,1,77,1,77,1,77,1,
        78,1,78,1,78,1,78,1,78,5,78,1792,8,78,10,78,12,78,1795,9,78,1,78,
        5,78,1798,8,78,10,78,12,78,1801,9,78,1,78,5,78,1804,8,78,10,78,12,
        78,1807,9,78,3,78,1809,8,78,1,78,1,78,1,78,1,78,1,78,1,78,5,78,1817,
        8,78,10,78,12,78,1820,9,78,1,78,1,78,1,78,1,78,1,79,1,79,1,79,1,
        79,1,79,5,79,1831,8,79,10,79,12,79,1834,9,79,1,79,5,79,1837,8,79,
        10,79,12,79,1840,9,79,1,79,5,79,1843,8,79,10,79,12,79,1846,9,79,
        3,79,1848,8,79,1,79,1,79,1,79,1,79,1,79,1,79,5,79,1856,8,79,10,79,
        12,79,1859,9,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,1,80,5,80,
        1870,8,80,10,80,12,80,1873,9,80,1,80,5,80,1876,8,80,10,80,12,80,
        1879,9,80,1,80,5,80,1882,8,80,10,80,12,80,1885,9,80,3,80,1887,8,
        80,1,80,1,80,1,80,1,80,1,80,1,80,5,80,1895,8,80,10,80,12,80,1898,
        9,80,1,80,1,80,1,80,1,80,1,80,3,373,413,446,1,110,81,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,
        132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,0,12,
        2,0,49,49,85,85,1,0,157,158,2,0,150,150,159,159,3,0,150,150,152,
        152,169,169,2,0,150,150,152,152,5,0,3,3,48,49,85,85,135,136,157,
        157,1,0,125,126,1,0,196,200,1,0,235,241,2,0,131,131,150,150,2,0,
        49,49,136,136,2,0,26,26,139,139,2275,0,197,1,0,0,0,2,202,1,0,0,0,
        4,212,1,0,0,0,6,224,1,0,0,0,8,236,1,0,0,0,10,247,1,0,0,0,12,256,
        1,0,0,0,14,265,1,0,0,0,16,274,1,0,0,0,18,283,1,0,0,0,20,292,1,0,
        0,0,22,301,1,0,0,0,24,310,1,0,0,0,26,455,1,0,0,0,28,457,1,0,0,0,
        30,507,1,0,0,0,32,544,1,0,0,0,34,571,1,0,0,0,36,573,1,0,0,0,38,588,
        1,0,0,0,40,590,1,0,0,0,42,609,1,0,0,0,44,651,1,0,0,0,46,653,1,0,
        0,0,48,686,1,0,0,0,50,688,1,0,0,0,52,744,1,0,0,0,54,746,1,0,0,0,
        56,806,1,0,0,0,58,808,1,0,0,0,60,817,1,0,0,0,62,854,1,0,0,0,64,856,
        1,0,0,0,66,865,1,0,0,0,68,869,1,0,0,0,70,879,1,0,0,0,72,882,1,0,
        0,0,74,885,1,0,0,0,76,888,1,0,0,0,78,891,1,0,0,0,80,901,1,0,0,0,
        82,979,1,0,0,0,84,981,1,0,0,0,86,1035,1,0,0,0,88,1037,1,0,0,0,90,
        1078,1,0,0,0,92,1080,1,0,0,0,94,1136,1,0,0,0,96,1138,1,0,0,0,98,
        1153,1,0,0,0,100,1173,1,0,0,0,102,1190,1,0,0,0,104,1192,1,0,0,0,
        106,1196,1,0,0,0,108,1204,1,0,0,0,110,1366,1,0,0,0,112,1379,1,0,
        0,0,114,1381,1,0,0,0,116,1383,1,0,0,0,118,1385,1,0,0,0,120,1387,
        1,0,0,0,122,1393,1,0,0,0,124,1395,1,0,0,0,126,1417,1,0,0,0,128,1427,
        1,0,0,0,130,1429,1,0,0,0,132,1434,1,0,0,0,134,1446,1,0,0,0,136,1567,
        1,0,0,0,138,1569,1,0,0,0,140,1574,1,0,0,0,142,1580,1,0,0,0,144,1585,
        1,0,0,0,146,1603,1,0,0,0,148,1667,1,0,0,0,150,1669,1,0,0,0,152,1708,
        1,0,0,0,154,1747,1,0,0,0,156,1786,1,0,0,0,158,1825,1,0,0,0,160,1864,
        1,0,0,0,162,196,3,2,1,0,163,196,3,4,2,0,164,196,3,6,3,0,165,196,
        3,8,4,0,166,196,3,10,5,0,167,196,3,12,6,0,168,196,3,14,7,0,169,196,
        3,16,8,0,170,196,3,18,9,0,171,196,3,20,10,0,172,196,3,22,11,0,173,
        196,3,24,12,0,174,196,3,98,49,0,175,196,3,120,60,0,176,196,3,124,
        62,0,177,196,3,126,63,0,178,196,3,140,70,0,179,196,3,144,72,0,180,
        196,3,146,73,0,181,196,3,150,75,0,182,196,3,152,76,0,183,196,3,154,
        77,0,184,196,3,156,78,0,185,196,3,158,79,0,186,196,3,28,14,0,187,
        196,3,36,18,0,188,196,3,50,25,0,189,196,3,38,19,0,190,196,3,46,23,
        0,191,196,3,54,27,0,192,196,3,58,29,0,193,196,3,64,32,0,194,196,
        3,148,74,0,195,162,1,0,0,0,195,163,1,0,0,0,195,164,1,0,0,0,195,165,
        1,0,0,0,195,166,1,0,0,0,195,167,1,0,0,0,195,168,1,0,0,0,195,169,
        1,0,0,0,195,170,1,0,0,0,195,171,1,0,0,0,195,172,1,0,0,0,195,173,
        1,0,0,0,195,174,1,0,0,0,195,175,1,0,0,0,195,176,1,0,0,0,195,177,
        1,0,0,0,195,178,1,0,0,0,195,179,1,0,0,0,195,180,1,0,0,0,195,181,
        1,0,0,0,195,182,1,0,0,0,195,183,1,0,0,0,195,184,1,0,0,0,195,185,
        1,0,0,0,195,186,1,0,0,0,195,187,1,0,0,0,195,188,1,0,0,0,195,189,
        1,0,0,0,195,190,1,0,0,0,195,191,1,0,0,0,195,192,1,0,0,0,195,193,
        1,0,0,0,195,194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,
        1,0,0,0,198,200,1,0,0,0,199,197,1,0,0,0,200,201,5,0,0,1,201,1,1,
        0,0,0,202,206,5,3,0,0,203,205,3,26,13,0,204,203,1,0,0,0,205,208,
        1,0,0,0,206,204,1,0,0,0,206,207,1,0,0,0,207,209,1,0,0,0,208,206,
        1,0,0,0,209,210,5,2,0,0,210,3,1,0,0,0,211,213,5,48,0,0,212,211,1,
        0,0,0,212,213,1,0,0,0,213,214,1,0,0,0,214,218,5,49,0,0,215,217,3,
        34,17,0,216,215,1,0,0,0,217,220,1,0,0,0,218,216,1,0,0,0,218,219,
        1,0,0,0,219,221,1,0,0,0,220,218,1,0,0,0,221,222,5,2,0,0,222,5,1,
        0,0,0,223,225,5,48,0,0,224,223,1,0,0,0,224,225,1,0,0,0,225,226,1,
        0,0,0,226,230,5,52,0,0,227,229,3,38,19,0,228,227,1,0,0,0,229,232,
        1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,0,231,233,1,0,0,0,232,230,
        1,0,0,0,233,234,5,2,0,0,234,7,1,0,0,0,235,237,5,48,0,0,236,235,1,
        0,0,0,236,237,1,0,0,0,237,238,1,0,0,0,238,242,5,56,0,0,239,241,3,
        44,22,0,240,239,1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,
        1,0,0,0,243,245,1,0,0,0,244,242,1,0,0,0,245,246,5,2,0,0,246,9,1,
        0,0,0,247,251,5,59,0,0,248,250,3,48,24,0,249,248,1,0,0,0,250,253,
        1,0,0,0,251,249,1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,251,
        1,0,0,0,254,255,5,2,0,0,255,11,1,0,0,0,256,260,5,62,0,0,257,259,
        3,52,26,0,258,257,1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,
        1,0,0,0,261,263,1,0,0,0,262,260,1,0,0,0,263,264,5,2,0,0,264,13,1,
        0,0,0,265,269,5,63,0,0,266,268,3,56,28,0,267,266,1,0,0,0,268,271,
        1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,269,
        1,0,0,0,272,273,5,2,0,0,273,15,1,0,0,0,274,278,5,69,0,0,275,277,
        3,62,31,0,276,275,1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,
        1,0,0,0,279,281,1,0,0,0,280,278,1,0,0,0,281,282,5,2,0,0,282,17,1,
        0,0,0,283,287,5,78,0,0,284,286,3,82,41,0,285,284,1,0,0,0,286,289,
        1,0,0,0,287,285,1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,287,
        1,0,0,0,290,291,5,2,0,0,291,19,1,0,0,0,292,296,5,83,0,0,293,295,
        3,86,43,0,294,293,1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,297,
        1,0,0,0,297,299,1,0,0,0,298,296,1,0,0,0,299,300,5,2,0,0,300,21,1,
        0,0,0,301,305,5,84,0,0,302,304,3,90,45,0,303,302,1,0,0,0,304,307,
        1,0,0,0,305,303,1,0,0,0,305,306,1,0,0,0,306,308,1,0,0,0,307,305,
        1,0,0,0,308,309,5,2,0,0,309,23,1,0,0,0,310,314,5,85,0,0,311,313,
        3,94,47,0,312,311,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,
        1,0,0,0,315,317,1,0,0,0,316,314,1,0,0,0,317,318,5,2,0,0,318,25,1,
        0,0,0,319,321,5,4,0,0,320,322,5,163,0,0,321,320,1,0,0,0,321,322,
        1,0,0,0,322,323,1,0,0,0,323,456,5,186,0,0,324,456,3,28,14,0,325,
        456,3,150,75,0,326,327,5,6,0,0,327,328,3,122,61,0,328,329,3,116,
        58,0,329,456,1,0,0,0,330,331,5,7,0,0,331,332,5,180,0,0,332,456,5,
        179,0,0,333,334,5,8,0,0,334,335,3,122,61,0,335,336,3,116,58,0,336,
        456,1,0,0,0,337,339,5,9,0,0,338,340,5,163,0,0,339,338,1,0,0,0,339,
        340,1,0,0,0,340,341,1,0,0,0,341,456,3,116,58,0,342,456,3,120,60,
        0,343,344,5,11,0,0,344,456,3,122,61,0,345,347,5,12,0,0,346,348,5,
        163,0,0,347,346,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,456,
        5,150,0,0,350,351,5,13,0,0,351,456,5,35,0,0,352,353,5,13,0,0,353,
        354,5,36,0,0,354,356,5,37,0,0,355,357,5,163,0,0,356,355,1,0,0,0,
        356,357,1,0,0,0,357,358,1,0,0,0,358,359,3,116,58,0,359,361,5,38,
        0,0,360,362,5,163,0,0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,
        0,0,0,363,364,3,116,58,0,364,456,1,0,0,0,365,366,5,14,0,0,366,367,
        3,122,61,0,367,368,3,122,61,0,368,369,3,116,58,0,369,456,1,0,0,0,
        370,372,5,15,0,0,371,370,1,0,0,0,372,375,1,0,0,0,373,374,1,0,0,0,
        373,371,1,0,0,0,374,376,1,0,0,0,375,373,1,0,0,0,376,456,5,2,0,0,
        377,378,5,16,0,0,378,379,3,122,61,0,379,380,5,150,0,0,380,456,1,
        0,0,0,381,382,5,17,0,0,382,383,3,122,61,0,383,384,5,150,0,0,384,
        456,1,0,0,0,385,387,5,18,0,0,386,388,5,163,0,0,387,386,1,0,0,0,387,
        388,1,0,0,0,388,389,1,0,0,0,389,456,5,150,0,0,390,456,5,19,0,0,391,
        393,5,20,0,0,392,394,5,163,0,0,393,392,1,0,0,0,393,394,1,0,0,0,394,
        395,1,0,0,0,395,456,5,150,0,0,396,397,5,21,0,0,397,398,5,184,0,0,
        398,456,5,183,0,0,399,400,5,22,0,0,400,401,3,30,15,0,401,402,5,2,
        0,0,402,456,1,0,0,0,403,404,5,23,0,0,404,406,5,25,0,0,405,407,5,
        163,0,0,406,405,1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,456,
        3,116,58,0,409,413,5,24,0,0,410,412,3,122,61,0,411,410,1,0,0,0,412,
        415,1,0,0,0,413,414,1,0,0,0,413,411,1,0,0,0,414,416,1,0,0,0,415,
        413,1,0,0,0,416,456,5,2,0,0,417,456,5,26,0,0,418,419,5,27,0,0,419,
        420,3,122,61,0,420,421,3,116,58,0,421,456,1,0,0,0,422,423,5,28,0,
        0,423,424,3,122,61,0,424,425,3,116,58,0,425,456,1,0,0,0,426,427,
        5,29,0,0,427,428,3,122,61,0,428,429,3,116,58,0,429,456,1,0,0,0,430,
        431,5,30,0,0,431,432,3,122,61,0,432,433,3,116,58,0,433,456,1,0,0,
        0,434,435,5,31,0,0,435,436,3,122,61,0,436,437,3,116,58,0,437,456,
        1,0,0,0,438,439,5,32,0,0,439,440,3,122,61,0,440,441,3,116,58,0,441,
        456,1,0,0,0,442,446,5,33,0,0,443,445,3,122,61,0,444,443,1,0,0,0,
        445,448,1,0,0,0,446,447,1,0,0,0,446,444,1,0,0,0,447,449,1,0,0,0,
        448,446,1,0,0,0,449,456,5,2,0,0,450,452,5,34,0,0,451,453,5,163,0,
        0,452,451,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,456,3,116,
        58,0,455,319,1,0,0,0,455,324,1,0,0,0,455,325,1,0,0,0,455,326,1,0,
        0,0,455,330,1,0,0,0,455,333,1,0,0,0,455,337,1,0,0,0,455,342,1,0,
        0,0,455,343,1,0,0,0,455,345,1,0,0,0,455,350,1,0,0,0,455,352,1,0,
        0,0,455,365,1,0,0,0,455,373,1,0,0,0,455,377,1,0,0,0,455,381,1,0,
        0,0,455,385,1,0,0,0,455,390,1,0,0,0,455,391,1,0,0,0,455,396,1,0,
        0,0,455,399,1,0,0,0,455,403,1,0,0,0,455,409,1,0,0,0,455,417,1,0,
        0,0,455,418,1,0,0,0,455,422,1,0,0,0,455,426,1,0,0,0,455,430,1,0,
        0,0,455,434,1,0,0,0,455,438,1,0,0,0,455,442,1,0,0,0,455,450,1,0,
        0,0,456,27,1,0,0,0,457,458,5,5,0,0,458,459,3,104,52,0,459,460,3,
        104,52,0,460,462,3,112,56,0,461,463,3,112,56,0,462,461,1,0,0,0,462,
        463,1,0,0,0,463,465,1,0,0,0,464,466,3,112,56,0,465,464,1,0,0,0,465,
        466,1,0,0,0,466,470,1,0,0,0,467,469,3,32,16,0,468,467,1,0,0,0,469,
        472,1,0,0,0,470,468,1,0,0,0,470,471,1,0,0,0,471,490,1,0,0,0,472,
        470,1,0,0,0,473,475,5,145,0,0,474,476,5,5,0,0,475,474,1,0,0,0,475,
        476,1,0,0,0,476,477,1,0,0,0,477,478,3,104,52,0,478,480,3,104,52,
        0,479,481,3,112,56,0,480,479,1,0,0,0,480,481,1,0,0,0,481,483,1,0,
        0,0,482,484,3,112,56,0,483,482,1,0,0,0,483,484,1,0,0,0,484,486,1,
        0,0,0,485,487,3,112,56,0,486,485,1,0,0,0,486,487,1,0,0,0,487,489,
        1,0,0,0,488,473,1,0,0,0,489,492,1,0,0,0,490,488,1,0,0,0,490,491,
        1,0,0,0,491,29,1,0,0,0,492,490,1,0,0,0,493,495,5,39,0,0,494,496,
        5,163,0,0,495,494,1,0,0,0,495,496,1,0,0,0,496,497,1,0,0,0,497,508,
        3,116,58,0,498,500,5,40,0,0,499,501,5,163,0,0,500,499,1,0,0,0,500,
        501,1,0,0,0,501,502,1,0,0,0,502,508,3,116,58,0,503,504,5,41,0,0,
        504,508,3,104,52,0,505,506,5,42,0,0,506,508,3,104,52,0,507,493,1,
        0,0,0,507,498,1,0,0,0,507,503,1,0,0,0,507,505,1,0,0,0,508,31,1,0,
        0,0,509,511,5,43,0,0,510,512,5,163,0,0,511,510,1,0,0,0,511,512,1,
        0,0,0,512,513,1,0,0,0,513,545,3,118,59,0,514,516,5,44,0,0,515,517,
        5,163,0,0,516,515,1,0,0,0,516,517,1,0,0,0,517,518,1,0,0,0,518,545,
        3,118,59,0,519,521,5,55,0,0,520,522,5,163,0,0,521,520,1,0,0,0,521,
        522,1,0,0,0,522,523,1,0,0,0,523,545,3,118,59,0,524,526,5,45,0,0,
        525,527,5,163,0,0,526,525,1,0,0,0,526,527,1,0,0,0,527,528,1,0,0,
        0,528,545,3,118,59,0,529,531,5,46,0,0,530,532,5,163,0,0,531,530,
        1,0,0,0,531,532,1,0,0,0,532,533,1,0,0,0,533,545,3,118,59,0,534,536,
        5,47,0,0,535,537,5,163,0,0,536,535,1,0,0,0,536,537,1,0,0,0,537,538,
        1,0,0,0,538,545,3,118,59,0,539,541,5,12,0,0,540,542,5,163,0,0,541,
        540,1,0,0,0,541,542,1,0,0,0,542,543,1,0,0,0,543,545,3,118,59,0,544,
        509,1,0,0,0,544,514,1,0,0,0,544,519,1,0,0,0,544,524,1,0,0,0,544,
        529,1,0,0,0,544,534,1,0,0,0,544,539,1,0,0,0,545,33,1,0,0,0,546,572,
        3,126,63,0,547,572,3,36,18,0,548,572,3,152,76,0,549,551,5,12,0,0,
        550,552,5,163,0,0,551,550,1,0,0,0,551,552,1,0,0,0,552,553,1,0,0,
        0,553,572,5,150,0,0,554,556,5,50,0,0,555,557,5,163,0,0,556,555,1,
        0,0,0,556,557,1,0,0,0,557,558,1,0,0,0,558,572,5,150,0,0,559,561,
        5,20,0,0,560,562,5,163,0,0,561,560,1,0,0,0,561,562,1,0,0,0,562,563,
        1,0,0,0,563,572,5,150,0,0,564,572,5,26,0,0,565,567,5,28,0,0,566,
        568,5,163,0,0,567,566,1,0,0,0,567,568,1,0,0,0,568,569,1,0,0,0,569,
        572,3,116,58,0,570,572,5,51,0,0,571,546,1,0,0,0,571,547,1,0,0,0,
        571,548,1,0,0,0,571,549,1,0,0,0,571,554,1,0,0,0,571,559,1,0,0,0,
        571,564,1,0,0,0,571,565,1,0,0,0,571,570,1,0,0,0,572,35,1,0,0,0,573,
        574,5,5,0,0,574,575,3,104,52,0,575,576,3,104,52,0,576,577,3,104,
        52,0,577,578,3,104,52,0,578,579,3,112,56,0,579,580,3,112,56,0,580,
        581,3,112,56,0,581,582,5,150,0,0,582,37,1,0,0,0,583,589,3,126,63,
        0,584,589,3,40,20,0,585,589,3,160,80,0,586,589,5,35,0,0,587,589,
        5,51,0,0,588,583,1,0,0,0,588,584,1,0,0,0,588,585,1,0,0,0,588,586,
        1,0,0,0,588,587,1,0,0,0,589,39,1,0,0,0,590,594,5,53,0,0,591,593,
        3,42,21,0,592,591,1,0,0,0,593,596,1,0,0,0,594,592,1,0,0,0,594,595,
        1,0,0,0,595,597,1,0,0,0,596,594,1,0,0,0,597,598,5,2,0,0,598,41,1,
        0,0,0,599,601,5,54,0,0,600,602,5,163,0,0,601,600,1,0,0,0,601,602,
        1,0,0,0,602,603,1,0,0,0,603,610,3,104,52,0,604,606,5,55,0,0,605,
        607,5,163,0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,608,1,0,0,0,608,
        610,3,116,58,0,609,599,1,0,0,0,609,604,1,0,0,0,610,43,1,0,0,0,611,
        652,3,126,63,0,612,614,5,57,0,0,613,615,5,163,0,0,614,613,1,0,0,
        0,614,615,1,0,0,0,615,616,1,0,0,0,616,652,5,150,0,0,617,619,5,58,
        0,0,618,620,5,163,0,0,619,618,1,0,0,0,619,620,1,0,0,0,620,621,1,
        0,0,0,621,647,5,160,0,0,622,624,3,116,58,0,623,625,5,148,0,0,624,
        623,1,0,0,0,624,625,1,0,0,0,625,626,1,0,0,0,626,628,3,116,58,0,627,
        629,5,148,0,0,628,627,1,0,0,0,628,629,1,0,0,0,629,630,1,0,0,0,630,
        631,3,116,58,0,631,648,1,0,0,0,632,634,5,143,0,0,633,635,5,163,0,
        0,634,633,1,0,0,0,634,635,1,0,0,0,635,636,1,0,0,0,636,638,3,104,
        52,0,637,639,5,148,0,0,638,637,1,0,0,0,638,639,1,0,0,0,639,645,1,
        0,0,0,640,642,5,144,0,0,641,643,5,163,0,0,642,641,1,0,0,0,642,643,
        1,0,0,0,643,644,1,0,0,0,644,646,3,104,52,0,645,640,1,0,0,0,645,646,
        1,0,0,0,646,648,1,0,0,0,647,622,1,0,0,0,647,632,1,0,0,0,648,649,
        1,0,0,0,649,650,5,161,0,0,650,652,1,0,0,0,651,611,1,0,0,0,651,612,
        1,0,0,0,651,617,1,0,0,0,652,45,1,0,0,0,653,654,5,5,0,0,654,655,3,
        104,52,0,655,656,3,112,56,0,656,657,3,112,56,0,657,658,3,112,56,
        0,658,47,1,0,0,0,659,687,3,50,25,0,660,687,3,154,77,0,661,687,3,
        120,60,0,662,663,5,60,0,0,663,664,3,116,58,0,664,665,3,116,58,0,
        665,666,3,116,58,0,666,687,1,0,0,0,667,669,5,61,0,0,668,670,5,163,
        0,0,669,668,1,0,0,0,669,670,1,0,0,0,670,671,1,0,0,0,671,687,3,116,
        58,0,672,674,5,18,0,0,673,675,5,163,0,0,674,673,1,0,0,0,674,675,
        1,0,0,0,675,676,1,0,0,0,676,687,5,150,0,0,677,679,5,21,0,0,678,680,
        5,182,0,0,679,678,1,0,0,0,679,680,1,0,0,0,680,681,1,0,0,0,681,687,
        5,183,0,0,682,683,5,23,0,0,683,684,5,25,0,0,684,687,3,116,58,0,685,
        687,5,26,0,0,686,659,1,0,0,0,686,660,1,0,0,0,686,661,1,0,0,0,686,
        662,1,0,0,0,686,667,1,0,0,0,686,672,1,0,0,0,686,677,1,0,0,0,686,
        682,1,0,0,0,686,685,1,0,0,0,687,49,1,0,0,0,688,689,5,5,0,0,689,690,
        3,104,52,0,690,691,3,104,52,0,691,692,3,104,52,0,692,693,3,104,52,
        0,693,694,3,104,52,0,694,695,3,104,52,0,695,697,3,112,56,0,696,698,
        3,112,56,0,697,696,1,0,0,0,697,698,1,0,0,0,698,700,1,0,0,0,699,701,
        3,112,56,0,700,699,1,0,0,0,700,701,1,0,0,0,701,51,1,0,0,0,702,745,
        3,54,27,0,703,745,3,156,78,0,704,745,3,120,60,0,705,706,5,60,0,0,
        706,707,3,116,58,0,707,708,3,116,58,0,708,709,3,116,58,0,709,710,
        3,116,58,0,710,745,1,0,0,0,711,713,5,12,0,0,712,714,5,163,0,0,713,
        712,1,0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,745,5,150,0,0,716,
        717,5,61,0,0,717,719,3,116,58,0,718,720,3,116,58,0,719,718,1,0,0,
        0,719,720,1,0,0,0,720,745,1,0,0,0,721,723,5,18,0,0,722,724,5,163,
        0,0,723,722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,745,5,150,
        0,0,726,728,5,20,0,0,727,729,5,163,0,0,728,727,1,0,0,0,728,729,1,
        0,0,0,729,730,1,0,0,0,730,745,5,150,0,0,731,733,5,21,0,0,732,734,
        5,182,0,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,0,735,745,
        5,183,0,0,736,737,5,23,0,0,737,738,5,25,0,0,738,741,3,116,58,0,739,
        742,5,91,0,0,740,742,3,120,60,0,741,739,1,0,0,0,741,740,1,0,0,0,
        742,745,1,0,0,0,743,745,5,26,0,0,744,702,1,0,0,0,744,703,1,0,0,0,
        744,704,1,0,0,0,744,705,1,0,0,0,744,711,1,0,0,0,744,716,1,0,0,0,
        744,721,1,0,0,0,744,726,1,0,0,0,744,731,1,0,0,0,744,736,1,0,0,0,
        744,743,1,0,0,0,745,53,1,0,0,0,746,747,5,5,0,0,747,748,3,104,52,
        0,748,749,3,104,52,0,749,750,3,104,52,0,750,756,3,104,52,0,751,752,
        3,104,52,0,752,753,3,104,52,0,753,754,3,104,52,0,754,755,3,104,52,
        0,755,757,1,0,0,0,756,751,1,0,0,0,756,757,1,0,0,0,757,758,1,0,0,
        0,758,759,3,112,56,0,759,763,3,112,56,0,760,761,3,112,56,0,761,762,
        3,112,56,0,762,764,1,0,0,0,763,760,1,0,0,0,763,764,1,0,0,0,764,55,
        1,0,0,0,765,807,3,58,29,0,766,807,3,158,79,0,767,807,3,120,60,0,
        768,769,5,64,0,0,769,770,5,150,0,0,770,771,5,150,0,0,771,772,3,116,
        58,0,772,773,3,116,58,0,773,774,3,116,58,0,774,807,1,0,0,0,775,777,
        5,61,0,0,776,778,5,163,0,0,777,776,1,0,0,0,777,778,1,0,0,0,778,779,
        1,0,0,0,779,807,3,116,58,0,780,782,5,18,0,0,781,783,5,163,0,0,782,
        781,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,0,784,807,5,150,0,0,785,
        787,5,65,0,0,786,788,5,163,0,0,787,786,1,0,0,0,787,788,1,0,0,0,788,
        789,1,0,0,0,789,807,3,116,58,0,790,792,5,66,0,0,791,793,5,163,0,
        0,792,791,1,0,0,0,792,793,1,0,0,0,793,794,1,0,0,0,794,807,3,116,
        58,0,795,797,5,21,0,0,796,798,5,182,0,0,797,796,1,0,0,0,797,798,
        1,0,0,0,798,799,1,0,0,0,799,807,5,183,0,0,800,801,5,23,0,0,801,802,
        5,25,0,0,802,807,3,116,58,0,803,807,3,60,30,0,804,807,5,26,0,0,805,
        807,5,68,0,0,806,765,1,0,0,0,806,766,1,0,0,0,806,767,1,0,0,0,806,
        768,1,0,0,0,806,775,1,0,0,0,806,780,1,0,0,0,806,785,1,0,0,0,806,
        790,1,0,0,0,806,795,1,0,0,0,806,800,1,0,0,0,806,803,1,0,0,0,806,
        804,1,0,0,0,806,805,1,0,0,0,807,57,1,0,0,0,808,809,5,5,0,0,809,810,
        3,104,52,0,810,811,3,104,52,0,811,812,3,104,52,0,812,813,3,104,52,
        0,813,814,3,104,52,0,814,815,3,112,56,0,815,816,3,112,56,0,816,59,
        1,0,0,0,817,818,5,67,0,0,818,819,3,104,52,0,819,820,3,112,56,0,820,
        821,3,112,56,0,821,61,1,0,0,0,822,855,3,64,32,0,823,855,3,66,33,
        0,824,855,3,68,34,0,825,855,3,70,35,0,826,855,3,72,36,0,827,855,
        3,74,37,0,828,855,3,76,38,0,829,855,3,78,39,0,830,855,3,80,40,0,
        831,855,3,120,60,0,832,834,5,77,0,0,833,835,5,163,0,0,834,833,1,
        0,0,0,834,835,1,0,0,0,835,836,1,0,0,0,836,855,3,116,58,0,837,838,
        5,61,0,0,838,840,3,116,58,0,839,841,3,116,58,0,840,839,1,0,0,0,840,
        841,1,0,0,0,841,855,1,0,0,0,842,843,5,21,0,0,843,855,5,183,0,0,844,
        845,5,23,0,0,845,846,5,25,0,0,846,849,3,116,58,0,847,850,5,91,0,
        0,848,850,3,120,60,0,849,847,1,0,0,0,849,848,1,0,0,0,850,851,1,0,
        0,0,851,852,5,157,0,0,852,855,1,0,0,0,853,855,5,26,0,0,854,822,1,
        0,0,0,854,823,1,0,0,0,854,824,1,0,0,0,854,825,1,0,0,0,854,826,1,
        0,0,0,854,827,1,0,0,0,854,828,1,0,0,0,854,829,1,0,0,0,854,830,1,
        0,0,0,854,831,1,0,0,0,854,832,1,0,0,0,854,837,1,0,0,0,854,842,1,
        0,0,0,854,844,1,0,0,0,854,853,1,0,0,0,855,63,1,0,0,0,856,857,5,70,
        0,0,857,859,3,104,52,0,858,860,3,104,52,0,859,858,1,0,0,0,859,860,
        1,0,0,0,860,861,1,0,0,0,861,863,3,112,56,0,862,864,3,112,56,0,863,
        862,1,0,0,0,863,864,1,0,0,0,864,65,1,0,0,0,865,866,5,67,0,0,866,
        867,3,104,52,0,867,868,3,112,56,0,868,67,1,0,0,0,869,870,5,71,0,
        0,870,871,3,104,52,0,871,872,3,104,52,0,872,873,3,104,52,0,873,875,
        5,157,0,0,874,876,5,151,0,0,875,874,1,0,0,0,875,876,1,0,0,0,876,
        877,1,0,0,0,877,878,5,157,0,0,878,69,1,0,0,0,879,880,5,72,0,0,880,
        881,3,104,52,0,881,71,1,0,0,0,882,883,5,63,0,0,883,884,3,104,52,
        0,884,73,1,0,0,0,885,886,5,73,0,0,886,887,3,104,52,0,887,75,1,0,
        0,0,888,889,5,74,0,0,889,890,3,104,52,0,890,77,1,0,0,0,891,892,5,
        75,0,0,892,893,5,157,0,0,893,894,3,104,52,0,894,895,3,104,52,0,895,
        896,3,104,52,0,896,897,3,104,52,0,897,899,3,104,52,0,898,900,3,104,
        52,0,899,898,1,0,0,0,899,900,1,0,0,0,900,79,1,0,0,0,901,902,5,76,
        0,0,902,903,3,104,52,0,903,81,1,0,0,0,904,980,3,84,42,0,905,980,
        3,120,60,0,906,980,5,79,0,0,907,908,5,64,0,0,908,910,5,150,0,0,909,
        911,5,150,0,0,910,909,1,0,0,0,910,911,1,0,0,0,911,913,1,0,0,0,912,
        914,5,150,0,0,913,912,1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,915,
        917,5,150,0,0,916,915,1,0,0,0,916,917,1,0,0,0,917,918,1,0,0,0,918,
        980,3,116,58,0,919,921,5,77,0,0,920,922,5,163,0,0,921,920,1,0,0,
        0,921,922,1,0,0,0,922,923,1,0,0,0,923,980,3,116,58,0,924,926,5,61,
        0,0,925,927,5,163,0,0,926,925,1,0,0,0,926,927,1,0,0,0,927,928,1,
        0,0,0,928,980,3,116,58,0,929,931,5,18,0,0,930,932,5,163,0,0,931,
        930,1,0,0,0,931,932,1,0,0,0,932,933,1,0,0,0,933,980,5,150,0,0,934,
        935,5,80,0,0,935,936,5,150,0,0,936,937,5,150,0,0,937,941,5,150,0,
        0,938,939,5,150,0,0,939,940,5,150,0,0,940,942,5,150,0,0,941,938,
        1,0,0,0,941,942,1,0,0,0,942,946,1,0,0,0,943,944,5,150,0,0,944,945,
        5,150,0,0,945,947,5,150,0,0,946,943,1,0,0,0,946,947,1,0,0,0,947,
        951,1,0,0,0,948,949,5,150,0,0,949,950,5,150,0,0,950,952,5,150,0,
        0,951,948,1,0,0,0,951,952,1,0,0,0,952,980,1,0,0,0,953,955,5,21,0,
        0,954,956,5,182,0,0,955,954,1,0,0,0,955,956,1,0,0,0,956,957,1,0,
        0,0,957,980,5,183,0,0,958,959,5,23,0,0,959,960,5,25,0,0,960,963,
        3,116,58,0,961,964,5,91,0,0,962,964,3,120,60,0,963,961,1,0,0,0,963,
        962,1,0,0,0,964,980,1,0,0,0,965,980,5,26,0,0,966,967,5,81,0,0,967,
        968,5,82,0,0,968,970,5,150,0,0,969,971,5,150,0,0,970,969,1,0,0,0,
        970,971,1,0,0,0,971,973,1,0,0,0,972,974,5,150,0,0,973,972,1,0,0,
        0,973,974,1,0,0,0,974,976,1,0,0,0,975,977,5,150,0,0,976,975,1,0,
        0,0,976,977,1,0,0,0,977,980,1,0,0,0,978,980,5,68,0,0,979,904,1,0,
        0,0,979,905,1,0,0,0,979,906,1,0,0,0,979,907,1,0,0,0,979,919,1,0,
        0,0,979,924,1,0,0,0,979,929,1,0,0,0,979,934,1,0,0,0,979,953,1,0,
        0,0,979,958,1,0,0,0,979,965,1,0,0,0,979,966,1,0,0,0,979,978,1,0,
        0,0,980,83,1,0,0,0,981,982,5,5,0,0,982,983,3,104,52,0,983,984,3,
        104,52,0,984,985,3,104,52,0,985,991,3,104,52,0,986,987,3,104,52,
        0,987,988,3,104,52,0,988,989,3,104,52,0,989,990,3,104,52,0,990,992,
        1,0,0,0,991,986,1,0,0,0,991,992,1,0,0,0,992,998,1,0,0,0,993,994,
        3,104,52,0,994,995,3,104,52,0,995,996,3,104,52,0,996,997,3,104,52,
        0,997,999,1,0,0,0,998,993,1,0,0,0,998,999,1,0,0,0,999,1005,1,0,0,
        0,1000,1001,3,104,52,0,1001,1002,3,104,52,0,1002,1003,3,104,52,0,
        1003,1004,3,104,52,0,1004,1006,1,0,0,0,1005,1000,1,0,0,0,1005,1006,
        1,0,0,0,1006,85,1,0,0,0,1007,1036,3,88,44,0,1008,1036,3,120,60,0,
        1009,1010,5,60,0,0,1010,1011,3,116,58,0,1011,1012,3,116,58,0,1012,
        1013,3,116,58,0,1013,1014,3,116,58,0,1014,1015,3,116,58,0,1015,1036,
        1,0,0,0,1016,1018,5,61,0,0,1017,1019,5,163,0,0,1018,1017,1,0,0,0,
        1018,1019,1,0,0,0,1019,1020,1,0,0,0,1020,1036,3,116,58,0,1021,1023,
        5,18,0,0,1022,1024,5,163,0,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,
        1024,1025,1,0,0,0,1025,1036,5,150,0,0,1026,1028,5,21,0,0,1027,1029,
        5,182,0,0,1028,1027,1,0,0,0,1028,1029,1,0,0,0,1029,1030,1,0,0,0,
        1030,1036,5,183,0,0,1031,1032,5,23,0,0,1032,1033,5,25,0,0,1033,1036,
        3,116,58,0,1034,1036,5,26,0,0,1035,1007,1,0,0,0,1035,1008,1,0,0,
        0,1035,1009,1,0,0,0,1035,1016,1,0,0,0,1035,1021,1,0,0,0,1035,1026,
        1,0,0,0,1035,1031,1,0,0,0,1035,1034,1,0,0,0,1036,87,1,0,0,0,1037,
        1038,5,5,0,0,1038,1039,3,104,52,0,1039,1040,3,104,52,0,1040,1041,
        3,104,52,0,1041,1042,3,104,52,0,1042,1043,3,104,52,0,1043,1044,3,
        104,52,0,1044,1046,3,112,56,0,1045,1047,3,112,56,0,1046,1045,1,0,
        0,0,1046,1047,1,0,0,0,1047,89,1,0,0,0,1048,1079,3,92,46,0,1049,1079,
        3,120,60,0,1050,1051,5,60,0,0,1051,1052,3,116,58,0,1052,1053,3,116,
        58,0,1053,1054,3,116,58,0,1054,1055,3,116,58,0,1055,1056,3,116,58,
        0,1056,1057,3,116,58,0,1057,1058,3,116,58,0,1058,1079,1,0,0,0,1059,
        1061,5,61,0,0,1060,1062,5,163,0,0,1061,1060,1,0,0,0,1061,1062,1,
        0,0,0,1062,1063,1,0,0,0,1063,1079,3,116,58,0,1064,1066,5,18,0,0,
        1065,1067,5,163,0,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,1068,
        1,0,0,0,1068,1079,5,150,0,0,1069,1071,5,21,0,0,1070,1072,5,182,0,
        0,1071,1070,1,0,0,0,1071,1072,1,0,0,0,1072,1073,1,0,0,0,1073,1079,
        5,183,0,0,1074,1075,5,23,0,0,1075,1076,5,25,0,0,1076,1079,3,116,
        58,0,1077,1079,5,26,0,0,1078,1048,1,0,0,0,1078,1049,1,0,0,0,1078,
        1050,1,0,0,0,1078,1059,1,0,0,0,1078,1064,1,0,0,0,1078,1069,1,0,0,
        0,1078,1074,1,0,0,0,1078,1077,1,0,0,0,1079,91,1,0,0,0,1080,1081,
        5,5,0,0,1081,1082,3,104,52,0,1082,1083,3,104,52,0,1083,1084,3,104,
        52,0,1084,1085,3,104,52,0,1085,1086,3,104,52,0,1086,1087,3,104,52,
        0,1087,1088,3,104,52,0,1088,1089,3,104,52,0,1089,1090,3,112,56,0,
        1090,1091,3,112,56,0,1091,93,1,0,0,0,1092,1137,3,96,48,0,1093,1137,
        3,120,60,0,1094,1096,5,86,0,0,1095,1097,5,163,0,0,1096,1095,1,0,
        0,0,1096,1097,1,0,0,0,1097,1098,1,0,0,0,1098,1137,5,157,0,0,1099,
        1100,5,64,0,0,1100,1101,5,150,0,0,1101,1102,5,150,0,0,1102,1137,
        3,116,58,0,1103,1105,5,77,0,0,1104,1106,5,163,0,0,1105,1104,1,0,
        0,0,1105,1106,1,0,0,0,1106,1107,1,0,0,0,1107,1137,3,116,58,0,1108,
        1110,5,61,0,0,1109,1111,5,163,0,0,1110,1109,1,0,0,0,1110,1111,1,
        0,0,0,1111,1112,1,0,0,0,1112,1137,3,116,58,0,1113,1115,5,18,0,0,
        1114,1116,5,163,0,0,1115,1114,1,0,0,0,1115,1116,1,0,0,0,1116,1117,
        1,0,0,0,1117,1137,5,150,0,0,1118,1120,5,21,0,0,1119,1121,5,182,0,
        0,1120,1119,1,0,0,0,1120,1121,1,0,0,0,1121,1122,1,0,0,0,1122,1137,
        5,183,0,0,1123,1124,5,23,0,0,1124,1125,5,25,0,0,1125,1128,3,116,
        58,0,1126,1129,5,91,0,0,1127,1129,3,120,60,0,1128,1126,1,0,0,0,1128,
        1127,1,0,0,0,1129,1137,1,0,0,0,1130,1137,5,26,0,0,1131,1132,5,81,
        0,0,1132,1133,7,0,0,0,1133,1134,5,150,0,0,1134,1137,5,150,0,0,1135,
        1137,5,68,0,0,1136,1092,1,0,0,0,1136,1093,1,0,0,0,1136,1094,1,0,
        0,0,1136,1099,1,0,0,0,1136,1103,1,0,0,0,1136,1108,1,0,0,0,1136,1113,
        1,0,0,0,1136,1118,1,0,0,0,1136,1123,1,0,0,0,1136,1130,1,0,0,0,1136,
        1131,1,0,0,0,1136,1135,1,0,0,0,1137,95,1,0,0,0,1138,1139,5,5,0,0,
        1139,1140,3,104,52,0,1140,1141,3,104,52,0,1141,1142,3,104,52,0,1142,
        1143,3,104,52,0,1143,1144,3,104,52,0,1144,1145,3,104,52,0,1145,1146,
        3,104,52,0,1146,1147,3,104,52,0,1147,1148,3,104,52,0,1148,1149,3,
        104,52,0,1149,1151,3,104,52,0,1150,1152,3,104,52,0,1151,1150,1,0,
        0,0,1151,1152,1,0,0,0,1152,97,1,0,0,0,1153,1154,5,87,0,0,1154,1158,
        5,48,0,0,1155,1157,3,100,50,0,1156,1155,1,0,0,0,1157,1160,1,0,0,
        0,1158,1156,1,0,0,0,1158,1159,1,0,0,0,1159,1161,1,0,0,0,1160,1158,
        1,0,0,0,1161,1162,5,2,0,0,1162,99,1,0,0,0,1163,1167,5,53,0,0,1164,
        1166,3,102,51,0,1165,1164,1,0,0,0,1166,1169,1,0,0,0,1167,1165,1,
        0,0,0,1167,1168,1,0,0,0,1168,1170,1,0,0,0,1169,1167,1,0,0,0,1170,
        1174,5,2,0,0,1171,1174,5,35,0,0,1172,1174,5,51,0,0,1173,1163,1,0,
        0,0,1173,1171,1,0,0,0,1173,1172,1,0,0,0,1174,101,1,0,0,0,1175,1177,
        5,88,0,0,1176,1178,5,163,0,0,1177,1176,1,0,0,0,1177,1178,1,0,0,0,
        1178,1179,1,0,0,0,1179,1191,3,104,52,0,1180,1182,5,89,0,0,1181,1183,
        5,163,0,0,1182,1181,1,0,0,0,1182,1183,1,0,0,0,1183,1184,1,0,0,0,
        1184,1191,3,116,58,0,1185,1187,5,55,0,0,1186,1188,5,163,0,0,1187,
        1186,1,0,0,0,1187,1188,1,0,0,0,1188,1189,1,0,0,0,1189,1191,3,116,
        58,0,1190,1175,1,0,0,0,1190,1180,1,0,0,0,1190,1185,1,0,0,0,1191,
        103,1,0,0,0,1192,1193,5,160,0,0,1193,1194,3,106,53,0,1194,1195,5,
        161,0,0,1195,105,1,0,0,0,1196,1201,3,108,54,0,1197,1198,5,145,0,
        0,1198,1200,3,108,54,0,1199,1197,1,0,0,0,1200,1203,1,0,0,0,1201,
        1199,1,0,0,0,1201,1202,1,0,0,0,1202,107,1,0,0,0,1203,1201,1,0,0,
        0,1204,1209,3,110,55,0,1205,1206,5,146,0,0,1206,1208,3,110,55,0,
        1207,1205,1,0,0,0,1208,1211,1,0,0,0,1209,1207,1,0,0,0,1209,1210,
        1,0,0,0,1210,109,1,0,0,0,1211,1209,1,0,0,0,1212,1213,6,55,-1,0,1213,
        1214,5,160,0,0,1214,1215,3,106,53,0,1215,1216,5,161,0,0,1216,1367,
        1,0,0,0,1217,1367,5,91,0,0,1218,1219,5,93,0,0,1219,1220,7,1,0,0,
        1220,1221,7,2,0,0,1221,1367,7,1,0,0,1222,1224,5,94,0,0,1223,1225,
        5,175,0,0,1224,1223,1,0,0,0,1224,1225,1,0,0,0,1225,1226,1,0,0,0,
        1226,1227,5,176,0,0,1227,1228,5,177,0,0,1228,1367,3,114,57,0,1229,
        1230,5,95,0,0,1230,1367,3,110,55,30,1231,1232,5,96,0,0,1232,1367,
        3,110,55,29,1233,1234,5,97,0,0,1234,1367,3,110,55,28,1235,1243,5,
        98,0,0,1236,1244,5,158,0,0,1237,1240,5,157,0,0,1238,1239,5,162,0,
        0,1239,1241,5,157,0,0,1240,1238,1,0,0,0,1240,1241,1,0,0,0,1241,1244,
        1,0,0,0,1242,1244,5,169,0,0,1243,1236,1,0,0,0,1243,1237,1,0,0,0,
        1243,1242,1,0,0,0,1244,1367,1,0,0,0,1245,1246,5,99,0,0,1246,1247,
        3,114,57,0,1247,1248,3,114,57,0,1248,1249,3,114,57,0,1249,1250,3,
        114,57,0,1250,1251,3,114,57,0,1251,1252,3,114,57,0,1252,1367,1,0,
        0,0,1253,1367,5,100,0,0,1254,1255,5,101,0,0,1255,1367,5,150,0,0,
        1256,1367,5,102,0,0,1257,1270,5,103,0,0,1258,1271,5,158,0,0,1259,
        1262,5,157,0,0,1260,1261,5,162,0,0,1261,1263,5,157,0,0,1262,1260,
        1,0,0,0,1262,1263,1,0,0,0,1263,1271,1,0,0,0,1264,1267,5,153,0,0,
        1265,1266,5,162,0,0,1266,1268,5,153,0,0,1267,1265,1,0,0,0,1267,1268,
        1,0,0,0,1268,1271,1,0,0,0,1269,1271,5,169,0,0,1270,1258,1,0,0,0,
        1270,1259,1,0,0,0,1270,1264,1,0,0,0,1270,1269,1,0,0,0,1271,1367,
        1,0,0,0,1272,1367,5,104,0,0,1273,1274,5,147,0,0,1274,1367,3,110,
        55,20,1275,1276,5,105,0,0,1276,1277,5,160,0,0,1277,1279,3,114,57,
        0,1278,1280,5,148,0,0,1279,1278,1,0,0,0,1279,1280,1,0,0,0,1280,1281,
        1,0,0,0,1281,1283,3,114,57,0,1282,1284,5,148,0,0,1283,1282,1,0,0,
        0,1283,1284,1,0,0,0,1284,1285,1,0,0,0,1285,1286,3,114,57,0,1286,
        1287,5,161,0,0,1287,1288,5,106,0,0,1288,1289,3,114,57,0,1289,1367,
        1,0,0,0,1290,1291,5,105,0,0,1291,1292,5,160,0,0,1292,1294,5,143,
        0,0,1293,1295,5,163,0,0,1294,1293,1,0,0,0,1294,1295,1,0,0,0,1295,
        1296,1,0,0,0,1296,1298,3,104,52,0,1297,1299,5,148,0,0,1298,1297,
        1,0,0,0,1298,1299,1,0,0,0,1299,1305,1,0,0,0,1300,1302,5,144,0,0,
        1301,1303,5,163,0,0,1302,1301,1,0,0,0,1302,1303,1,0,0,0,1303,1304,
        1,0,0,0,1304,1306,3,104,52,0,1305,1300,1,0,0,0,1305,1306,1,0,0,0,
        1306,1307,1,0,0,0,1307,1308,5,161,0,0,1308,1309,5,106,0,0,1309,1310,
        3,114,57,0,1310,1367,1,0,0,0,1311,1367,5,107,0,0,1312,1367,5,108,
        0,0,1313,1321,5,109,0,0,1314,1322,5,159,0,0,1315,1318,5,150,0,0,
        1316,1317,5,162,0,0,1317,1319,5,150,0,0,1318,1316,1,0,0,0,1318,1319,
        1,0,0,0,1319,1322,1,0,0,0,1320,1322,5,169,0,0,1321,1314,1,0,0,0,
        1321,1315,1,0,0,0,1321,1320,1,0,0,0,1322,1367,1,0,0,0,1323,1331,
        5,110,0,0,1324,1332,5,158,0,0,1325,1328,5,157,0,0,1326,1327,5,162,
        0,0,1327,1329,5,157,0,0,1328,1326,1,0,0,0,1328,1329,1,0,0,0,1329,
        1332,1,0,0,0,1330,1332,5,169,0,0,1331,1324,1,0,0,0,1331,1325,1,0,
        0,0,1331,1330,1,0,0,0,1332,1367,1,0,0,0,1333,1346,5,112,0,0,1334,
        1347,5,158,0,0,1335,1338,5,157,0,0,1336,1337,5,162,0,0,1337,1339,
        5,157,0,0,1338,1336,1,0,0,0,1338,1339,1,0,0,0,1339,1347,1,0,0,0,
        1340,1343,5,153,0,0,1341,1342,5,162,0,0,1342,1344,5,153,0,0,1343,
        1341,1,0,0,0,1343,1344,1,0,0,0,1344,1347,1,0,0,0,1345,1347,5,169,
        0,0,1346,1334,1,0,0,0,1346,1335,1,0,0,0,1346,1340,1,0,0,0,1346,1345,
        1,0,0,0,1347,1367,1,0,0,0,1348,1349,5,113,0,0,1349,1350,3,114,57,
        0,1350,1351,3,114,57,0,1351,1352,3,114,57,0,1352,1353,3,114,57,0,
        1353,1354,3,114,57,0,1354,1355,3,114,57,0,1355,1367,1,0,0,0,1356,
        1367,5,114,0,0,1357,1367,5,115,0,0,1358,1367,5,116,0,0,1359,1367,
        5,117,0,0,1360,1367,5,118,0,0,1361,1367,5,119,0,0,1362,1367,5,120,
        0,0,1363,1367,5,121,0,0,1364,1367,5,122,0,0,1365,1367,5,123,0,0,
        1366,1212,1,0,0,0,1366,1217,1,0,0,0,1366,1218,1,0,0,0,1366,1222,
        1,0,0,0,1366,1229,1,0,0,0,1366,1231,1,0,0,0,1366,1233,1,0,0,0,1366,
        1235,1,0,0,0,1366,1245,1,0,0,0,1366,1253,1,0,0,0,1366,1254,1,0,0,
        0,1366,1256,1,0,0,0,1366,1257,1,0,0,0,1366,1272,1,0,0,0,1366,1273,
        1,0,0,0,1366,1275,1,0,0,0,1366,1290,1,0,0,0,1366,1311,1,0,0,0,1366,
        1312,1,0,0,0,1366,1313,1,0,0,0,1366,1323,1,0,0,0,1366,1333,1,0,0,
        0,1366,1348,1,0,0,0,1366,1356,1,0,0,0,1366,1357,1,0,0,0,1366,1358,
        1,0,0,0,1366,1359,1,0,0,0,1366,1360,1,0,0,0,1366,1361,1,0,0,0,1366,
        1362,1,0,0,0,1366,1363,1,0,0,0,1366,1364,1,0,0,0,1366,1365,1,0,0,
        0,1367,1376,1,0,0,0,1368,1369,10,33,0,0,1369,1370,5,92,0,0,1370,
        1375,3,114,57,0,1371,1372,10,13,0,0,1372,1373,5,111,0,0,1373,1375,
        3,114,57,0,1374,1368,1,0,0,0,1374,1371,1,0,0,0,1375,1378,1,0,0,0,
        1376,1374,1,0,0,0,1376,1377,1,0,0,0,1377,111,1,0,0,0,1378,1376,1,
        0,0,0,1379,1380,7,3,0,0,1380,113,1,0,0,0,1381,1382,7,4,0,0,1382,
        115,1,0,0,0,1383,1384,7,3,0,0,1384,117,1,0,0,0,1385,1386,7,4,0,0,
        1386,119,1,0,0,0,1387,1389,5,10,0,0,1388,1390,5,163,0,0,1389,1388,
        1,0,0,0,1389,1390,1,0,0,0,1390,1391,1,0,0,0,1391,1392,3,122,61,0,
        1392,121,1,0,0,0,1393,1394,7,5,0,0,1394,123,1,0,0,0,1395,1406,5,
        90,0,0,1396,1404,5,188,0,0,1397,1399,5,191,0,0,1398,1397,1,0,0,0,
        1399,1402,1,0,0,0,1400,1398,1,0,0,0,1400,1401,1,0,0,0,1401,1405,
        1,0,0,0,1402,1400,1,0,0,0,1403,1405,5,192,0,0,1404,1400,1,0,0,0,
        1404,1403,1,0,0,0,1405,1407,1,0,0,0,1406,1396,1,0,0,0,1406,1407,
        1,0,0,0,1407,1408,1,0,0,0,1408,1412,5,189,0,0,1409,1411,5,191,0,
        0,1410,1409,1,0,0,0,1411,1414,1,0,0,0,1412,1410,1,0,0,0,1412,1413,
        1,0,0,0,1413,1415,1,0,0,0,1414,1412,1,0,0,0,1415,1416,5,190,0,0,
        1416,125,1,0,0,0,1417,1418,5,124,0,0,1418,1419,3,128,64,0,1419,1420,
        3,104,52,0,1420,127,1,0,0,0,1421,1422,7,6,0,0,1422,1423,3,130,65,
        0,1423,1424,5,194,0,0,1424,1428,1,0,0,0,1425,1426,5,127,0,0,1426,
        1428,3,138,69,0,1427,1421,1,0,0,0,1427,1425,1,0,0,0,1428,129,1,0,
        0,0,1429,1432,5,204,0,0,1430,1431,5,195,0,0,1431,1433,3,132,66,0,
        1432,1430,1,0,0,0,1432,1433,1,0,0,0,1433,131,1,0,0,0,1434,1437,3,
        134,67,0,1435,1436,7,7,0,0,1436,1438,3,132,66,0,1437,1435,1,0,0,
        0,1437,1438,1,0,0,0,1438,133,1,0,0,0,1439,1447,5,204,0,0,1440,1447,
        3,136,68,0,1441,1447,5,202,0,0,1442,1447,5,203,0,0,1443,1447,5,228,
        0,0,1444,1447,5,227,0,0,1445,1447,5,229,0,0,1446,1439,1,0,0,0,1446,
        1440,1,0,0,0,1446,1441,1,0,0,0,1446,1442,1,0,0,0,1446,1443,1,0,0,
        0,1446,1444,1,0,0,0,1446,1445,1,0,0,0,1447,135,1,0,0,0,1448,1449,
        5,205,0,0,1449,1450,5,231,0,0,1450,1451,3,134,67,0,1451,1452,5,194,
        0,0,1452,1568,1,0,0,0,1453,1454,5,206,0,0,1454,1455,5,231,0,0,1455,
        1456,3,134,67,0,1456,1457,5,194,0,0,1457,1568,1,0,0,0,1458,1459,
        5,208,0,0,1459,1460,5,231,0,0,1460,1461,3,134,67,0,1461,1462,5,194,
        0,0,1462,1568,1,0,0,0,1463,1464,5,209,0,0,1464,1465,5,231,0,0,1465,
        1466,3,134,67,0,1466,1467,5,194,0,0,1467,1568,1,0,0,0,1468,1469,
        5,210,0,0,1469,1470,5,231,0,0,1470,1471,3,134,67,0,1471,1472,5,194,
        0,0,1472,1568,1,0,0,0,1473,1474,5,211,0,0,1474,1475,5,231,0,0,1475,
        1476,3,134,67,0,1476,1477,5,194,0,0,1477,1568,1,0,0,0,1478,1479,
        5,212,0,0,1479,1480,5,231,0,0,1480,1481,3,134,67,0,1481,1482,5,194,
        0,0,1482,1568,1,0,0,0,1483,1484,5,213,0,0,1484,1485,5,231,0,0,1485,
        1486,3,134,67,0,1486,1487,5,194,0,0,1487,1568,1,0,0,0,1488,1489,
        5,214,0,0,1489,1490,5,231,0,0,1490,1491,3,134,67,0,1491,1492,5,194,
        0,0,1492,1568,1,0,0,0,1493,1494,5,215,0,0,1494,1495,5,231,0,0,1495,
        1496,3,134,67,0,1496,1497,5,194,0,0,1497,1568,1,0,0,0,1498,1499,
        5,216,0,0,1499,1500,5,231,0,0,1500,1501,3,134,67,0,1501,1502,5,194,
        0,0,1502,1568,1,0,0,0,1503,1504,5,217,0,0,1504,1505,5,231,0,0,1505,
        1510,3,134,67,0,1506,1507,5,201,0,0,1507,1509,3,134,67,0,1508,1506,
        1,0,0,0,1509,1512,1,0,0,0,1510,1508,1,0,0,0,1510,1511,1,0,0,0,1511,
        1513,1,0,0,0,1512,1510,1,0,0,0,1513,1514,5,194,0,0,1514,1568,1,0,
        0,0,1515,1516,5,218,0,0,1516,1517,5,231,0,0,1517,1518,3,134,67,0,
        1518,1519,5,194,0,0,1519,1568,1,0,0,0,1520,1521,5,219,0,0,1521,1522,
        5,231,0,0,1522,1527,3,134,67,0,1523,1524,5,201,0,0,1524,1526,3,134,
        67,0,1525,1523,1,0,0,0,1526,1529,1,0,0,0,1527,1525,1,0,0,0,1527,
        1528,1,0,0,0,1528,1530,1,0,0,0,1529,1527,1,0,0,0,1530,1531,5,194,
        0,0,1531,1568,1,0,0,0,1532,1533,5,220,0,0,1533,1534,5,231,0,0,1534,
        1535,3,134,67,0,1535,1536,5,201,0,0,1536,1537,3,134,67,0,1537,1538,
        5,194,0,0,1538,1568,1,0,0,0,1539,1540,5,221,0,0,1540,1541,5,231,
        0,0,1541,1542,3,134,67,0,1542,1543,5,194,0,0,1543,1568,1,0,0,0,1544,
        1545,5,222,0,0,1545,1546,5,231,0,0,1546,1568,5,194,0,0,1547,1548,
        5,223,0,0,1548,1549,5,231,0,0,1549,1550,3,134,67,0,1550,1551,5,194,
        0,0,1551,1568,1,0,0,0,1552,1553,5,224,0,0,1553,1554,5,231,0,0,1554,
        1555,3,134,67,0,1555,1556,5,194,0,0,1556,1568,1,0,0,0,1557,1558,
        5,225,0,0,1558,1559,5,231,0,0,1559,1560,3,134,67,0,1560,1561,5,194,
        0,0,1561,1568,1,0,0,0,1562,1563,5,226,0,0,1563,1564,5,231,0,0,1564,
        1565,3,134,67,0,1565,1566,5,194,0,0,1566,1568,1,0,0,0,1567,1448,
        1,0,0,0,1567,1453,1,0,0,0,1567,1458,1,0,0,0,1567,1463,1,0,0,0,1567,
        1468,1,0,0,0,1567,1473,1,0,0,0,1567,1478,1,0,0,0,1567,1483,1,0,0,
        0,1567,1488,1,0,0,0,1567,1493,1,0,0,0,1567,1498,1,0,0,0,1567,1503,
        1,0,0,0,1567,1515,1,0,0,0,1567,1520,1,0,0,0,1567,1532,1,0,0,0,1567,
        1539,1,0,0,0,1567,1544,1,0,0,0,1567,1547,1,0,0,0,1567,1552,1,0,0,
        0,1567,1557,1,0,0,0,1567,1562,1,0,0,0,1568,137,1,0,0,0,1569,1570,
        7,8,0,0,1570,1571,5,233,0,0,1571,1572,5,242,0,0,1572,1573,5,234,
        0,0,1573,139,1,0,0,0,1574,1575,5,128,0,0,1575,1576,5,227,0,0,1576,
        1577,5,195,0,0,1577,1578,3,142,71,0,1578,1579,5,194,0,0,1579,141,
        1,0,0,0,1580,1583,3,134,67,0,1581,1582,7,7,0,0,1582,1584,3,142,71,
        0,1583,1581,1,0,0,0,1583,1584,1,0,0,0,1584,143,1,0,0,0,1585,1587,
        5,129,0,0,1586,1588,3,122,61,0,1587,1586,1,0,0,0,1587,1588,1,0,0,
        0,1588,1589,1,0,0,0,1589,1590,5,130,0,0,1590,1591,5,163,0,0,1591,
        1592,7,9,0,0,1592,1593,5,163,0,0,1593,1599,3,104,52,0,1594,1595,
        5,130,0,0,1595,1596,5,163,0,0,1596,1597,7,9,0,0,1597,1598,5,163,
        0,0,1598,1600,3,104,52,0,1599,1594,1,0,0,0,1599,1600,1,0,0,0,1600,
        1601,1,0,0,0,1601,1602,5,2,0,0,1602,145,1,0,0,0,1603,1607,5,132,
        0,0,1604,1606,3,148,74,0,1605,1604,1,0,0,0,1606,1609,1,0,0,0,1607,
        1605,1,0,0,0,1607,1608,1,0,0,0,1608,1610,1,0,0,0,1609,1607,1,0,0,
        0,1610,1611,5,2,0,0,1611,147,1,0,0,0,1612,1613,5,85,0,0,1613,1614,
        5,157,0,0,1614,1615,5,157,0,0,1615,1616,5,157,0,0,1616,1617,3,116,
        58,0,1617,1622,3,116,58,0,1618,1619,5,133,0,0,1619,1620,3,116,58,
        0,1620,1621,3,116,58,0,1621,1623,1,0,0,0,1622,1618,1,0,0,0,1622,
        1623,1,0,0,0,1623,1668,1,0,0,0,1624,1625,5,95,0,0,1625,1626,5,157,
        0,0,1626,1627,5,157,0,0,1627,1628,3,116,58,0,1628,1629,3,116,58,
        0,1629,1668,1,0,0,0,1630,1631,7,10,0,0,1631,1632,5,157,0,0,1632,
        1633,5,157,0,0,1633,1634,5,157,0,0,1634,1637,5,157,0,0,1635,1636,
        5,134,0,0,1636,1638,5,150,0,0,1637,1635,1,0,0,0,1637,1638,1,0,0,
        0,1638,1639,1,0,0,0,1639,1640,3,116,58,0,1640,1641,5,150,0,0,1641,
        1642,3,116,58,0,1642,1668,1,0,0,0,1643,1644,5,135,0,0,1644,1645,
        5,158,0,0,1645,1646,5,158,0,0,1646,1647,3,116,58,0,1647,1648,3,116,
        58,0,1648,1668,1,0,0,0,1649,1650,5,137,0,0,1650,1651,5,157,0,0,1651,
        1652,5,157,0,0,1652,1653,3,116,58,0,1653,1654,3,116,58,0,1654,1655,
        3,116,58,0,1655,1656,3,116,58,0,1656,1668,1,0,0,0,1657,1658,5,138,
        0,0,1658,1659,5,157,0,0,1659,1660,3,116,58,0,1660,1661,3,116,58,
        0,1661,1662,3,116,58,0,1662,1663,3,116,58,0,1663,1668,1,0,0,0,1664,
        1665,7,11,0,0,1665,1668,5,157,0,0,1666,1668,5,140,0,0,1667,1612,
        1,0,0,0,1667,1624,1,0,0,0,1667,1630,1,0,0,0,1667,1643,1,0,0,0,1667,
        1649,1,0,0,0,1667,1657,1,0,0,0,1667,1664,1,0,0,0,1667,1666,1,0,0,
        0,1668,149,1,0,0,0,1669,1670,5,141,0,0,1670,1671,5,249,0,0,1671,
        1672,5,246,0,0,1672,1691,5,244,0,0,1673,1675,5,247,0,0,1674,1673,
        1,0,0,0,1675,1678,1,0,0,0,1676,1674,1,0,0,0,1676,1677,1,0,0,0,1677,
        1692,1,0,0,0,1678,1676,1,0,0,0,1679,1681,5,248,0,0,1680,1679,1,0,
        0,0,1681,1684,1,0,0,0,1682,1680,1,0,0,0,1682,1683,1,0,0,0,1683,1692,
        1,0,0,0,1684,1682,1,0,0,0,1685,1687,5,250,0,0,1686,1685,1,0,0,0,
        1687,1690,1,0,0,0,1688,1686,1,0,0,0,1688,1689,1,0,0,0,1689,1692,
        1,0,0,0,1690,1688,1,0,0,0,1691,1676,1,0,0,0,1691,1682,1,0,0,0,1691,
        1688,1,0,0,0,1692,1693,1,0,0,0,1693,1694,5,245,0,0,1694,1695,5,142,
        0,0,1695,1701,5,253,0,0,1696,1700,3,140,70,0,1697,1700,3,28,14,0,
        1698,1700,3,2,1,0,1699,1696,1,0,0,0,1699,1697,1,0,0,0,1699,1698,
        1,0,0,0,1700,1703,1,0,0,0,1701,1699,1,0,0,0,1701,1702,1,0,0,0,1702,
        1704,1,0,0,0,1703,1701,1,0,0,0,1704,1705,5,2,0,0,1705,1706,5,142,
        0,0,1706,1707,5,253,0,0,1707,151,1,0,0,0,1708,1709,5,141,0,0,1709,
        1710,5,249,0,0,1710,1711,5,246,0,0,1711,1730,5,244,0,0,1712,1714,
        5,247,0,0,1713,1712,1,0,0,0,1714,1717,1,0,0,0,1715,1713,1,0,0,0,
        1715,1716,1,0,0,0,1716,1731,1,0,0,0,1717,1715,1,0,0,0,1718,1720,
        5,248,0,0,1719,1718,1,0,0,0,1720,1723,1,0,0,0,1721,1719,1,0,0,0,
        1721,1722,1,0,0,0,1722,1731,1,0,0,0,1723,1721,1,0,0,0,1724,1726,
        5,250,0,0,1725,1724,1,0,0,0,1726,1729,1,0,0,0,1727,1725,1,0,0,0,
        1727,1728,1,0,0,0,1728,1731,1,0,0,0,1729,1727,1,0,0,0,1730,1715,
        1,0,0,0,1730,1721,1,0,0,0,1730,1727,1,0,0,0,1731,1732,1,0,0,0,1732,
        1733,5,245,0,0,1733,1734,5,142,0,0,1734,1740,5,253,0,0,1735,1739,
        3,140,70,0,1736,1739,3,36,18,0,1737,1739,3,4,2,0,1738,1735,1,0,0,
        0,1738,1736,1,0,0,0,1738,1737,1,0,0,0,1739,1742,1,0,0,0,1740,1738,
        1,0,0,0,1740,1741,1,0,0,0,1741,1743,1,0,0,0,1742,1740,1,0,0,0,1743,
        1744,5,2,0,0,1744,1745,5,142,0,0,1745,1746,5,253,0,0,1746,153,1,
        0,0,0,1747,1748,5,141,0,0,1748,1749,5,249,0,0,1749,1750,5,246,0,
        0,1750,1769,5,244,0,0,1751,1753,5,247,0,0,1752,1751,1,0,0,0,1753,
        1756,1,0,0,0,1754,1752,1,0,0,0,1754,1755,1,0,0,0,1755,1770,1,0,0,
        0,1756,1754,1,0,0,0,1757,1759,5,248,0,0,1758,1757,1,0,0,0,1759,1762,
        1,0,0,0,1760,1758,1,0,0,0,1760,1761,1,0,0,0,1761,1770,1,0,0,0,1762,
        1760,1,0,0,0,1763,1765,5,250,0,0,1764,1763,1,0,0,0,1765,1768,1,0,
        0,0,1766,1764,1,0,0,0,1766,1767,1,0,0,0,1767,1770,1,0,0,0,1768,1766,
        1,0,0,0,1769,1754,1,0,0,0,1769,1760,1,0,0,0,1769,1766,1,0,0,0,1770,
        1771,1,0,0,0,1771,1772,5,245,0,0,1772,1773,5,142,0,0,1773,1779,5,
        253,0,0,1774,1778,3,140,70,0,1775,1778,3,50,25,0,1776,1778,3,10,
        5,0,1777,1774,1,0,0,0,1777,1775,1,0,0,0,1777,1776,1,0,0,0,1778,1781,
        1,0,0,0,1779,1777,1,0,0,0,1779,1780,1,0,0,0,1780,1782,1,0,0,0,1781,
        1779,1,0,0,0,1782,1783,5,2,0,0,1783,1784,5,142,0,0,1784,1785,5,253,
        0,0,1785,155,1,0,0,0,1786,1787,5,141,0,0,1787,1788,5,249,0,0,1788,
        1789,5,246,0,0,1789,1808,5,244,0,0,1790,1792,5,247,0,0,1791,1790,
        1,0,0,0,1792,1795,1,0,0,0,1793,1791,1,0,0,0,1793,1794,1,0,0,0,1794,
        1809,1,0,0,0,1795,1793,1,0,0,0,1796,1798,5,248,0,0,1797,1796,1,0,
        0,0,1798,1801,1,0,0,0,1799,1797,1,0,0,0,1799,1800,1,0,0,0,1800,1809,
        1,0,0,0,1801,1799,1,0,0,0,1802,1804,5,250,0,0,1803,1802,1,0,0,0,
        1804,1807,1,0,0,0,1805,1803,1,0,0,0,1805,1806,1,0,0,0,1806,1809,
        1,0,0,0,1807,1805,1,0,0,0,1808,1793,1,0,0,0,1808,1799,1,0,0,0,1808,
        1805,1,0,0,0,1809,1810,1,0,0,0,1810,1811,5,245,0,0,1811,1812,5,142,
        0,0,1812,1818,5,253,0,0,1813,1817,3,140,70,0,1814,1817,3,54,27,0,
        1815,1817,3,12,6,0,1816,1813,1,0,0,0,1816,1814,1,0,0,0,1816,1815,
        1,0,0,0,1817,1820,1,0,0,0,1818,1816,1,0,0,0,1818,1819,1,0,0,0,1819,
        1821,1,0,0,0,1820,1818,1,0,0,0,1821,1822,5,2,0,0,1822,1823,5,142,
        0,0,1823,1824,5,253,0,0,1824,157,1,0,0,0,1825,1826,5,141,0,0,1826,
        1827,5,249,0,0,1827,1828,5,246,0,0,1828,1847,5,244,0,0,1829,1831,
        5,247,0,0,1830,1829,1,0,0,0,1831,1834,1,0,0,0,1832,1830,1,0,0,0,
        1832,1833,1,0,0,0,1833,1848,1,0,0,0,1834,1832,1,0,0,0,1835,1837,
        5,248,0,0,1836,1835,1,0,0,0,1837,1840,1,0,0,0,1838,1836,1,0,0,0,
        1838,1839,1,0,0,0,1839,1848,1,0,0,0,1840,1838,1,0,0,0,1841,1843,
        5,250,0,0,1842,1841,1,0,0,0,1843,1846,1,0,0,0,1844,1842,1,0,0,0,
        1844,1845,1,0,0,0,1845,1848,1,0,0,0,1846,1844,1,0,0,0,1847,1832,
        1,0,0,0,1847,1838,1,0,0,0,1847,1844,1,0,0,0,1848,1849,1,0,0,0,1849,
        1850,5,245,0,0,1850,1851,5,142,0,0,1851,1857,5,253,0,0,1852,1856,
        3,140,70,0,1853,1856,3,58,29,0,1854,1856,3,14,7,0,1855,1852,1,0,
        0,0,1855,1853,1,0,0,0,1855,1854,1,0,0,0,1856,1859,1,0,0,0,1857,1855,
        1,0,0,0,1857,1858,1,0,0,0,1858,1860,1,0,0,0,1859,1857,1,0,0,0,1860,
        1861,5,2,0,0,1861,1862,5,142,0,0,1862,1863,5,253,0,0,1863,159,1,
        0,0,0,1864,1865,5,141,0,0,1865,1866,5,249,0,0,1866,1867,5,246,0,
        0,1867,1886,5,244,0,0,1868,1870,5,247,0,0,1869,1868,1,0,0,0,1870,
        1873,1,0,0,0,1871,1869,1,0,0,0,1871,1872,1,0,0,0,1872,1887,1,0,0,
        0,1873,1871,1,0,0,0,1874,1876,5,248,0,0,1875,1874,1,0,0,0,1876,1879,
        1,0,0,0,1877,1875,1,0,0,0,1877,1878,1,0,0,0,1878,1887,1,0,0,0,1879,
        1877,1,0,0,0,1880,1882,5,250,0,0,1881,1880,1,0,0,0,1882,1885,1,0,
        0,0,1883,1881,1,0,0,0,1883,1884,1,0,0,0,1884,1887,1,0,0,0,1885,1883,
        1,0,0,0,1886,1871,1,0,0,0,1886,1877,1,0,0,0,1886,1883,1,0,0,0,1887,
        1888,1,0,0,0,1888,1889,5,245,0,0,1889,1890,5,142,0,0,1890,1896,5,
        253,0,0,1891,1895,3,140,70,0,1892,1895,3,40,20,0,1893,1895,3,6,3,
        0,1894,1891,1,0,0,0,1894,1892,1,0,0,0,1894,1893,1,0,0,0,1895,1898,
        1,0,0,0,1896,1894,1,0,0,0,1896,1897,1,0,0,0,1897,1899,1,0,0,0,1898,
        1896,1,0,0,0,1899,1900,5,2,0,0,1900,1901,5,142,0,0,1901,1902,5,253,
        0,0,1902,161,1,0,0,0,219,195,197,206,212,218,224,230,236,242,251,
        260,269,278,287,296,305,314,321,339,347,356,361,373,387,393,406,
        413,446,452,455,462,465,470,475,480,483,486,490,495,500,507,511,
        516,521,526,531,536,541,544,551,556,561,567,571,588,594,601,606,
        609,614,619,624,628,634,638,642,645,647,651,669,674,679,686,697,
        700,713,719,723,728,733,741,744,756,763,777,782,787,792,797,806,
        834,840,849,854,859,863,875,899,910,913,916,921,926,931,941,946,
        951,955,963,970,973,976,979,991,998,1005,1018,1023,1028,1035,1046,
        1061,1066,1071,1078,1096,1105,1110,1115,1120,1128,1136,1151,1158,
        1167,1173,1177,1182,1187,1190,1201,1209,1224,1240,1243,1262,1267,
        1270,1279,1283,1294,1298,1302,1305,1318,1321,1328,1331,1338,1343,
        1346,1366,1374,1376,1389,1400,1404,1406,1412,1427,1432,1437,1446,
        1510,1527,1567,1583,1587,1599,1607,1622,1637,1667,1676,1682,1688,
        1691,1699,1701,1715,1721,1727,1730,1738,1740,1754,1760,1766,1769,
        1777,1779,1793,1799,1805,1808,1816,1818,1832,1838,1844,1847,1855,
        1857,1871,1877,1883,1886,1894,1896
    ]

class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'CV'", "'DEN'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'OUTD'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'CUTOFF'", 
                     "'CUTON'", "'FROM'", "'TO'", "'PEAK'", "'SPECTRUM'", 
                     "'VOLUME'", "'PPM1'", "'PPM2'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SIZE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'NCS'", "<INVALID>", "'SIGB'", 
                     "<INVALID>", "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'FBOX'", "<INVALID>", "'ID'", "<INVALID>", "'NAME'", 
                     "'NONE'", "<INVALID>", "'CUT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'SFBOX'", "'STORE1'", "'STORE2'", "'STORE3'", "'STORE4'", 
                     "'STORE5'", "'STORE6'", "'STORE7'", "'STORE8'", "'STORE9'", 
                     "'TAG'", "<INVALID>", "<INVALID>", "<INVALID>", "'SHOW'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'NIL'", "<INVALID>", 
                     "'UB'", "'MULT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'NONB'", "<INVALID>", "<INVALID>", "'FOR'", "'LOOP'", 
                     "'TAIL'", "'HEAD'", "'OR'", "'AND'", "'NOT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "':'", "<INVALID>", "'<'", "'>'", "'<='", 
                     "'>='", "'#'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", "'ENCODE'", 
                     "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", "'LOG10'", 
                     "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", "'MOD'", 
                     "<INVALID>", "<INVALID>", "'SIGN'", "'SIN'", "'SQRT'", 
                     "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'RMS'", "'SUM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Average", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Initialize", "Update", "Gamma", "Kappa", "Cutoff", 
                      "Cuton", "From", "To", "Peak", "Spectrum", "Volume", 
                      "Ppm1", "Ppm2", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Coupling", "Carbon", "Expectation", 
                      "PhiStep", "PsiStep", "Rcoil", "Zero", "Proton", "Observed", 
                      "Anisotropy", "Amides", "Nitrogens", "Oxygens", "RingAtoms", 
                      "AlphasAndAmides", "Error", "Conformation", "Compressed", 
                      "Phase", "Size", "Dimensions", "Danisotropy", "OneBond", 
                      "AngleDb", "DerivFlag", "Ncs", "Equivalence", "Sigb", 
                      "Flags", "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Fbox", "Hydrogen", 
                      "Id", "Known", "Name", "NONE", "Point", "Cut", "Previous", 
                      "Pseudo", "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Sfbox", "Store1", "Store2", "Store3", "Store4", "Store5", 
                      "Store6", "Store7", "Store8", "Store9", "Tag", "Vector", 
                      "Do_Lp", "Identity_Lp", "Show", "Evaluate_Lp", "Patch", 
                      "Reference", "Nil", "Parameter", "UB", "Mult", "HBonded", 
                      "Improper", "NBFix", "NonB", "VDWOff", "Verbose", 
                      "For", "Loop", "Tail", "Head", "Or_op", "And_op", 
                      "Not_op", "Comma", "Complex", "Integer", "Logical", 
                      "Real", "Double_quote_string", "SHARP_COMMENT", "EXCLM_COMMENT", 
                      "SMCLN_COMMENT", "Simple_name", "Simple_names", "Integers", 
                      "L_paren", "R_paren", "Colon", "Equ_op", "Lt_op", 
                      "Gt_op", "Leq_op", "Geq_op", "Neq_op", "Symbol_name", 
                      "SPACE", "ENCLOSE_COMMENT", "SECTION_COMMENT", "LINE_COMMENT", 
                      "SET_VARIABLE", "Abs", "Attr_properties", "Comparison_ops", 
                      "SPACE_AP", "Averaging_methods", "Class_name_AM", 
                      "SPACE_AM", "Equ_op_PT", "Potential_types", "Class_name_PT", 
                      "SPACE_PT", "Noe_analysis", "SPACE_NA", "Exclude", 
                      "Include", "End_FL", "Class_name", "Any_class", "SPACE_FL", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Symbol_name_VE", "Simple_name_VE", "Double_quote_string_VE", 
                      "SPACE_VE", "L_paren_VF", "SPACE_VF", "L_paren_VS", 
                      "R_paren_VS", "Average_VS", "Element_VS", "Max_VS", 
                      "Min_VS", "Norm_VS", "Rms_VS", "Sum_VS", "Atom_properties_VS", 
                      "SPACE_VS", "L_paren_CF", "R_paren_CF", "In_CF", "Integer_CF", 
                      "Real_CF", "Symbol_name_CF", "Simple_name_CF", "SPACE_CF", 
                      "COMMENT_CF", "Simple_name_LL", "SPACE_LL" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_noe_annotation = 16
    RULE_dihedral_statement = 17
    RULE_dihedral_assign = 18
    RULE_plane_statement = 19
    RULE_plane_group = 20
    RULE_group_statement = 21
    RULE_harmonic_statement = 22
    RULE_harmonic_assign = 23
    RULE_sani_statement = 24
    RULE_sani_assign = 25
    RULE_coupling_statement = 26
    RULE_coup_assign = 27
    RULE_carbon_shift_statement = 28
    RULE_carbon_shift_assign = 29
    RULE_carbon_shift_rcoil = 30
    RULE_proton_shift_statement = 31
    RULE_observed = 32
    RULE_proton_shift_rcoil = 33
    RULE_proton_shift_anisotropy = 34
    RULE_proton_shift_amides = 35
    RULE_proton_shift_carbons = 36
    RULE_proton_shift_nitrogens = 37
    RULE_proton_shift_oxygens = 38
    RULE_proton_shift_ring_atoms = 39
    RULE_proton_shift_alphas_and_amides = 40
    RULE_conformation_statement = 41
    RULE_conf_assign = 42
    RULE_diffusion_statement = 43
    RULE_dani_assign = 44
    RULE_one_bond_coupling_statement = 45
    RULE_one_bond_assign = 46
    RULE_angle_db_statement = 47
    RULE_angle_db_assign = 48
    RULE_ncs_restraint = 49
    RULE_ncs_statement = 50
    RULE_ncs_group_statement = 51
    RULE_selection = 52
    RULE_selection_expression = 53
    RULE_term = 54
    RULE_factor = 55
    RULE_number = 56
    RULE_number_f = 57
    RULE_number_s = 58
    RULE_number_a = 59
    RULE_classification = 60
    RULE_class_name = 61
    RULE_flag_statement = 62
    RULE_vector_statement = 63
    RULE_vector_mode = 64
    RULE_vector_expression = 65
    RULE_vector_operation = 66
    RULE_vflc = 67
    RULE_vector_func_call = 68
    RULE_vector_show_property = 69
    RULE_evaluate_statement = 70
    RULE_evaluate_operation = 71
    RULE_patch_statement = 72
    RULE_parameter_setting = 73
    RULE_parameter_statement = 74
    RULE_noe_assign_loop = 75
    RULE_dihedral_assign_loop = 76
    RULE_sani_assign_loop = 77
    RULE_coup_assign_loop = 78
    RULE_carbon_shift_assign_loop = 79
    RULE_plane_group_loop = 80

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "plane_statement", 
                   "plane_group", "group_statement", "harmonic_statement", 
                   "harmonic_assign", "sani_statement", "sani_assign", "coupling_statement", 
                   "coup_assign", "carbon_shift_statement", "carbon_shift_assign", 
                   "carbon_shift_rcoil", "proton_shift_statement", "observed", 
                   "proton_shift_rcoil", "proton_shift_anisotropy", "proton_shift_amides", 
                   "proton_shift_carbons", "proton_shift_nitrogens", "proton_shift_oxygens", 
                   "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "ncs_restraint", 
                   "ncs_statement", "ncs_group_statement", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s", "number_a", "classification", "class_name", 
                   "flag_statement", "vector_statement", "vector_mode", 
                   "vector_expression", "vector_operation", "vflc", "vector_func_call", 
                   "vector_show_property", "evaluate_statement", "evaluate_operation", 
                   "patch_statement", "parameter_setting", "parameter_statement", 
                   "noe_assign_loop", "dihedral_assign_loop", "sani_assign_loop", 
                   "coup_assign_loop", "carbon_shift_assign_loop", "plane_group_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Average=7
    Bhig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Cutoff=39
    Cuton=40
    From=41
    To=42
    Peak=43
    Spectrum=44
    Volume=45
    Ppm1=46
    Ppm2=47
    Restraints=48
    Dihedral=49
    Nassign=50
    Print_any=51
    Plane=52
    Group=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Sanisotropy=59
    Coefficients=60
    ForceConstant=61
    Coupling=62
    Carbon=63
    Expectation=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Zero=68
    Proton=69
    Observed=70
    Anisotropy=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Conformation=78
    Compressed=79
    Phase=80
    Size=81
    Dimensions=82
    Danisotropy=83
    OneBond=84
    AngleDb=85
    DerivFlag=86
    Ncs=87
    Equivalence=88
    Sigb=89
    Flags=90
    All=91
    Around=92
    Atom=93
    Attribute=94
    BondedTo=95
    ByGroup=96
    ByRes=97
    Chemical=98
    Fbox=99
    Hydrogen=100
    Id=101
    Known=102
    Name=103
    NONE=104
    Point=105
    Cut=106
    Previous=107
    Pseudo=108
    Residue=109
    Resname=110
    Saround=111
    SegIdentifier=112
    Sfbox=113
    Store1=114
    Store2=115
    Store3=116
    Store4=117
    Store5=118
    Store6=119
    Store7=120
    Store8=121
    Store9=122
    Tag=123
    Vector=124
    Do_Lp=125
    Identity_Lp=126
    Show=127
    Evaluate_Lp=128
    Patch=129
    Reference=130
    Nil=131
    Parameter=132
    UB=133
    Mult=134
    HBonded=135
    Improper=136
    NBFix=137
    NonB=138
    VDWOff=139
    Verbose=140
    For=141
    Loop=142
    Tail=143
    Head=144
    Or_op=145
    And_op=146
    Not_op=147
    Comma=148
    Complex=149
    Integer=150
    Logical=151
    Real=152
    Double_quote_string=153
    SHARP_COMMENT=154
    EXCLM_COMMENT=155
    SMCLN_COMMENT=156
    Simple_name=157
    Simple_names=158
    Integers=159
    L_paren=160
    R_paren=161
    Colon=162
    Equ_op=163
    Lt_op=164
    Gt_op=165
    Leq_op=166
    Geq_op=167
    Neq_op=168
    Symbol_name=169
    SPACE=170
    ENCLOSE_COMMENT=171
    SECTION_COMMENT=172
    LINE_COMMENT=173
    SET_VARIABLE=174
    Abs=175
    Attr_properties=176
    Comparison_ops=177
    SPACE_AP=178
    Averaging_methods=179
    Class_name_AM=180
    SPACE_AM=181
    Equ_op_PT=182
    Potential_types=183
    Class_name_PT=184
    SPACE_PT=185
    Noe_analysis=186
    SPACE_NA=187
    Exclude=188
    Include=189
    End_FL=190
    Class_name=191
    Any_class=192
    SPACE_FL=193
    R_paren_VE=194
    Equ_op_VE=195
    Add_op_VE=196
    Sub_op_VE=197
    Mul_op_VE=198
    Div_op_VE=199
    Exp_op_VE=200
    Comma_VE=201
    Integer_VE=202
    Real_VE=203
    Atom_properties_VE=204
    Abs_VE=205
    Acos_VE=206
    Asin_VE=207
    Cos_VE=208
    Decode_VE=209
    Encode_VE=210
    Exp_VE=211
    Gauss_VE=212
    Heavy_VE=213
    Int_VE=214
    Log10_VE=215
    Log_VE=216
    Max_VE=217
    Maxw_VE=218
    Min_VE=219
    Mod_VE=220
    Norm_VE=221
    Random_VE=222
    Sign_VE=223
    Sin_VE=224
    Sqrt_VE=225
    Tan_VE=226
    Symbol_name_VE=227
    Simple_name_VE=228
    Double_quote_string_VE=229
    SPACE_VE=230
    L_paren_VF=231
    SPACE_VF=232
    L_paren_VS=233
    R_paren_VS=234
    Average_VS=235
    Element_VS=236
    Max_VS=237
    Min_VS=238
    Norm_VS=239
    Rms_VS=240
    Sum_VS=241
    Atom_properties_VS=242
    SPACE_VS=243
    L_paren_CF=244
    R_paren_CF=245
    In_CF=246
    Integer_CF=247
    Real_CF=248
    Symbol_name_CF=249
    Simple_name_CF=250
    SPACE_CF=251
    COMMENT_CF=252
    Simple_name_LL=253
    SPACE_LL=254

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def ncs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Ncs_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Ncs_restraintContext,i)


        def classification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.ClassificationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.ClassificationContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def patch_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Patch_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Patch_statementContext,i)


        def parameter_setting(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Parameter_settingContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Parameter_settingContext,i)


        def noe_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assign_loopContext,i)


        def dihedral_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assign_loopContext,i)


        def sani_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assign_loopContext,i)


        def coup_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assign_loopContext,i)


        def carbon_shift_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assign_loopContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.ObservedContext,i)


        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -3946560614033259480) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & -7457960982855958013) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & 127) != 0):
                self.state = 195
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 162
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 163
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 164
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 165
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 166
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 167
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 168
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 169
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 170
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 171
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 172
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 173
                    self.angle_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 174
                    self.ncs_restraint()
                    pass

                elif la_ == 14:
                    self.state = 175
                    self.classification()
                    pass

                elif la_ == 15:
                    self.state = 176
                    self.flag_statement()
                    pass

                elif la_ == 16:
                    self.state = 177
                    self.vector_statement()
                    pass

                elif la_ == 17:
                    self.state = 178
                    self.evaluate_statement()
                    pass

                elif la_ == 18:
                    self.state = 179
                    self.patch_statement()
                    pass

                elif la_ == 19:
                    self.state = 180
                    self.parameter_setting()
                    pass

                elif la_ == 20:
                    self.state = 181
                    self.noe_assign_loop()
                    pass

                elif la_ == 21:
                    self.state = 182
                    self.dihedral_assign_loop()
                    pass

                elif la_ == 22:
                    self.state = 183
                    self.sani_assign_loop()
                    pass

                elif la_ == 23:
                    self.state = 184
                    self.coup_assign_loop()
                    pass

                elif la_ == 24:
                    self.state = 185
                    self.carbon_shift_assign_loop()
                    pass

                elif la_ == 25:
                    self.state = 186
                    self.noe_assign()
                    pass

                elif la_ == 26:
                    self.state = 187
                    self.dihedral_assign()
                    pass

                elif la_ == 27:
                    self.state = 188
                    self.sani_assign()
                    pass

                elif la_ == 28:
                    self.state = 189
                    self.plane_statement()
                    pass

                elif la_ == 29:
                    self.state = 190
                    self.harmonic_assign()
                    pass

                elif la_ == 30:
                    self.state = 191
                    self.coup_assign()
                    pass

                elif la_ == 31:
                    self.state = 192
                    self.carbon_shift_assign()
                    pass

                elif la_ == 32:
                    self.state = 193
                    self.observed()
                    pass

                elif la_ == 33:
                    self.state = 194
                    self.parameter_statement()
                    pass


                self.state = 199
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 200
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self.match(CnsMRParser.Noe)
            self.state = 206
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 203
                    self.noe_statement() 
                self.state = 208
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 209
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 211
                self.match(CnsMRParser.Restraints)


            self.state = 214
            self.match(CnsMRParser.Dihedral)
            self.state = 218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 3377700057124896) != 0) or _la==124 or _la==141:
                self.state = 215
                self.dihedral_statement()
                self.state = 220
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 221
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 223
                self.match(CnsMRParser.Restraints)


            self.state = 226
            self.match(CnsMRParser.Plane)
            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 11259033428164608) != 0) or _la==124 or _la==141:
                self.state = 227
                self.plane_statement()
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 233
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==48:
                self.state = 235
                self.match(CnsMRParser.Restraints)


            self.state = 238
            self.match(CnsMRParser.Harmonic)
            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==57 or _la==58 or _la==124:
                self.state = 239
                self.harmonic_statement()
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 245
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.match(CnsMRParser.Sanisotropy)
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 3458764513898398752) != 0) or _la==141:
                self.state = 248
                self.sani_statement()
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 254
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.match(CnsMRParser.Coupling)
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 3458764513899451424) != 0) or _la==141:
                self.state = 257
                self.coupling_statement()
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 263
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(CnsMRParser.Carbon)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & -504403158263062495) != 0) or _la==141:
                self.state = 266
                self.carbon_shift_statement()
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 272
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.match(CnsMRParser.Proton)
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & -6917529027563486208) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & 2041) != 0):
                self.state = 275
                self.proton_shift_statement()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 281
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def conformation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(CnsMRParser.Conformation)
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305843009291551776) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 237585) != 0):
                self.state = 284
                self.conformation_statement()
                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 290
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(CnsMRParser.Danisotropy)
            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 3458764513898398752) != 0):
                self.state = 293
                self.diffusion_statement()
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 299
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.match(CnsMRParser.OneBond)
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 3458764513898398752) != 0):
                self.state = 302
                self.one_bond_coupling_statement()
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 308
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 310
            self.match(CnsMRParser.AngleDb)
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 2305843009291551776) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & 4333585) != 0):
                self.state = 311
                self.angle_db_statement()
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 317
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def noe_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,0)


        def noe_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assign_loopContext,0)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def class_name(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Class_nameContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Class_nameContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Average(self):
            return self.getToken(CnsMRParser.Average, 0)

        def Class_name_AM(self):
            return self.getToken(CnsMRParser.Class_name_AM, 0)

        def Averaging_methods(self):
            return self.getToken(CnsMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(CnsMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def classification(self):
            return self.getTypedRuleContext(CnsMRParser.ClassificationContext,0)


        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Class_name_PT(self):
            return self.getToken(CnsMRParser.Class_name_PT, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 455
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 319
                self.match(CnsMRParser.Analysis)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 320
                    self.match(CnsMRParser.Equ_op)


                self.state = 323
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 324
                self.noe_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 325
                self.noe_assign_loop()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 326
                self.match(CnsMRParser.Asymptote)
                self.state = 327
                self.class_name()
                self.state = 328
                self.number_s()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 330
                self.match(CnsMRParser.Average)
                self.state = 331
                self.match(CnsMRParser.Class_name_AM)
                self.state = 332
                self.match(CnsMRParser.Averaging_methods)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 333
                self.match(CnsMRParser.Bhig)
                self.state = 334
                self.class_name()
                self.state = 335
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 337
                self.match(CnsMRParser.Ceiling)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 338
                    self.match(CnsMRParser.Equ_op)


                self.state = 341
                self.number_s()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 342
                self.classification()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 343
                self.match(CnsMRParser.CountViol)
                self.state = 344
                self.class_name()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 345
                self.match(CnsMRParser.Cv)
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 346
                    self.match(CnsMRParser.Equ_op)


                self.state = 349
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 350
                self.match(CnsMRParser.Den)
                self.state = 351
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 352
                self.match(CnsMRParser.Den)
                self.state = 353
                self.match(CnsMRParser.Update)
                self.state = 354
                self.match(CnsMRParser.Gamma)
                self.state = 356
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 355
                    self.match(CnsMRParser.Equ_op)


                self.state = 358
                self.number_s()
                self.state = 359
                self.match(CnsMRParser.Kappa)
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 360
                    self.match(CnsMRParser.Equ_op)


                self.state = 363
                self.number_s()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 365
                self.match(CnsMRParser.Distribute)
                self.state = 366
                self.class_name()
                self.state = 367
                self.class_name()
                self.state = 368
                self.number_s()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 373
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 370
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 375
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                self.state = 376
                self.match(CnsMRParser.End)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 377
                self.match(CnsMRParser.Monomers)
                self.state = 378
                self.class_name()
                self.state = 379
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 381
                self.match(CnsMRParser.Ncount)
                self.state = 382
                self.class_name()
                self.state = 383
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 385
                self.match(CnsMRParser.Nrestraints)
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 386
                    self.match(CnsMRParser.Equ_op)


                self.state = 389
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 390
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 391
                self.match(CnsMRParser.Partition)
                self.state = 393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 392
                    self.match(CnsMRParser.Equ_op)


                self.state = 395
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 396
                self.match(CnsMRParser.Potential)
                self.state = 397
                self.match(CnsMRParser.Class_name_PT)
                self.state = 398
                self.match(CnsMRParser.Potential_types)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 399
                self.match(CnsMRParser.Predict)
                self.state = 400
                self.predict_statement()
                self.state = 401
                self.match(CnsMRParser.End)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 403
                self.match(CnsMRParser.Print)
                self.state = 404
                self.match(CnsMRParser.Threshold)
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 405
                    self.match(CnsMRParser.Equ_op)


                self.state = 408
                self.number_s()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 409
                self.match(CnsMRParser.Raverage)
                self.state = 413
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 410
                        self.class_name() 
                    self.state = 415
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

                self.state = 416
                self.match(CnsMRParser.End)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 417
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 418
                self.match(CnsMRParser.Rswitch)
                self.state = 419
                self.class_name()
                self.state = 420
                self.number_s()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 422
                self.match(CnsMRParser.Scale)
                self.state = 423
                self.class_name()
                self.state = 424
                self.number_s()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 426
                self.match(CnsMRParser.SoExponent)
                self.state = 427
                self.class_name()
                self.state = 428
                self.number_s()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 430
                self.match(CnsMRParser.SqConstant)
                self.state = 431
                self.class_name()
                self.state = 432
                self.number_s()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 434
                self.match(CnsMRParser.SqExponent)
                self.state = 435
                self.class_name()
                self.state = 436
                self.number_s()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 438
                self.match(CnsMRParser.SqOffset)
                self.state = 439
                self.class_name()
                self.state = 440
                self.number_s()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 442
                self.match(CnsMRParser.Taverage)
                self.state = 446
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 443
                        self.class_name() 
                    self.state = 448
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 449
                self.match(CnsMRParser.End)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 450
                self.match(CnsMRParser.Temperature)
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 451
                    self.match(CnsMRParser.Equ_op)


                self.state = 454
                self.number_s()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Assign)
            else:
                return self.getToken(CnsMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.match(CnsMRParser.Assign)
            self.state = 458
            self.selection()
            self.state = 459
            self.selection()
            self.state = 460
            self.number()
            self.state = 462
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.state = 461
                self.number()


            self.state = 465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 524293) != 0):
                self.state = 464
                self.number()


            self.state = 470
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,32,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 467
                    self.noe_annotation() 
                self.state = 472
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,32,self._ctx)

            self.state = 490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 473
                self.match(CnsMRParser.Or_op)
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==5:
                    self.state = 474
                    self.match(CnsMRParser.Assign)


                self.state = 477
                self.selection()
                self.state = 478
                self.selection()
                self.state = 480
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
                if la_ == 1:
                    self.state = 479
                    self.number()


                self.state = 483
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 482
                    self.number()


                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 524293) != 0):
                    self.state = 485
                    self.number()


                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 507
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39]:
                self.enterOuterAlt(localctx, 1)
                self.state = 493
                self.match(CnsMRParser.Cutoff)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 494
                    self.match(CnsMRParser.Equ_op)


                self.state = 497
                self.number_s()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 498
                self.match(CnsMRParser.Cuton)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 499
                    self.match(CnsMRParser.Equ_op)


                self.state = 502
                self.number_s()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 3)
                self.state = 503
                self.match(CnsMRParser.From)
                self.state = 504
                self.selection()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 4)
                self.state = 505
                self.match(CnsMRParser.To)
                self.state = 506
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(CnsMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(CnsMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(CnsMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(CnsMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(CnsMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(CnsMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = CnsMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 544
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [43]:
                self.enterOuterAlt(localctx, 1)
                self.state = 509
                self.match(CnsMRParser.Peak)
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 510
                    self.match(CnsMRParser.Equ_op)


                self.state = 513
                self.number_a()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 2)
                self.state = 514
                self.match(CnsMRParser.Spectrum)
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 515
                    self.match(CnsMRParser.Equ_op)


                self.state = 518
                self.number_a()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 519
                self.match(CnsMRParser.Weight)
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 520
                    self.match(CnsMRParser.Equ_op)


                self.state = 523
                self.number_a()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 4)
                self.state = 524
                self.match(CnsMRParser.Volume)
                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 525
                    self.match(CnsMRParser.Equ_op)


                self.state = 528
                self.number_a()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 5)
                self.state = 529
                self.match(CnsMRParser.Ppm1)
                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 530
                    self.match(CnsMRParser.Equ_op)


                self.state = 533
                self.number_a()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 6)
                self.state = 534
                self.match(CnsMRParser.Ppm2)
                self.state = 536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 535
                    self.match(CnsMRParser.Equ_op)


                self.state = 538
                self.number_a()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 7)
                self.state = 539
                self.match(CnsMRParser.Cv)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 540
                    self.match(CnsMRParser.Equ_op)


                self.state = 543
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def dihedral_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assign_loopContext,0)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 571
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 546
                self.vector_statement()
                pass
            elif token in [5]:
                self.enterOuterAlt(localctx, 2)
                self.state = 547
                self.dihedral_assign()
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 3)
                self.state = 548
                self.dihedral_assign_loop()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 4)
                self.state = 549
                self.match(CnsMRParser.Cv)
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 550
                    self.match(CnsMRParser.Equ_op)


                self.state = 553
                self.match(CnsMRParser.Integer)
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 5)
                self.state = 554
                self.match(CnsMRParser.Nassign)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 555
                    self.match(CnsMRParser.Equ_op)


                self.state = 558
                self.match(CnsMRParser.Integer)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 6)
                self.state = 559
                self.match(CnsMRParser.Partition)
                self.state = 561
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 560
                    self.match(CnsMRParser.Equ_op)


                self.state = 563
                self.match(CnsMRParser.Integer)
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 7)
                self.state = 564
                self.match(CnsMRParser.Reset)
                pass
            elif token in [28]:
                self.enterOuterAlt(localctx, 8)
                self.state = 565
                self.match(CnsMRParser.Scale)
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 566
                    self.match(CnsMRParser.Equ_op)


                self.state = 569
                self.number_s()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 9)
                self.state = 570
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 573
            self.match(CnsMRParser.Assign)
            self.state = 574
            self.selection()
            self.state = 575
            self.selection()
            self.state = 576
            self.selection()
            self.state = 577
            self.selection()
            self.state = 578
            self.number()
            self.state = 579
            self.number()
            self.state = 580
            self.number()
            self.state = 581
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def plane_group(self):
            return self.getTypedRuleContext(CnsMRParser.Plane_groupContext,0)


        def plane_group_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Plane_group_loopContext,0)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_plane_statement)
        try:
            self.state = 588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 583
                self.vector_statement()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.plane_group()
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 3)
                self.state = 585
                self.plane_group_loop()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 4)
                self.state = 586
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 5)
                self.state = 587
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Group_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_group" ):
                listener.enterPlane_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_group" ):
                listener.exitPlane_group(self)




    def plane_group(self):

        localctx = CnsMRParser.Plane_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_plane_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 590
            self.match(CnsMRParser.Group)
            self.state = 594
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==54 or _la==55:
                self.state = 591
                self.group_statement()
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 597
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 609
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 599
                self.match(CnsMRParser.Selection)
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 600
                    self.match(CnsMRParser.Equ_op)


                self.state = 603
                self.selection()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 2)
                self.state = 604
                self.match(CnsMRParser.Weight)
                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 605
                    self.match(CnsMRParser.Equ_op)


                self.state = 608
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 651
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [124]:
                self.enterOuterAlt(localctx, 1)
                self.state = 611
                self.vector_statement()
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 2)
                self.state = 612
                self.match(CnsMRParser.Exponent)
                self.state = 614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 613
                    self.match(CnsMRParser.Equ_op)


                self.state = 616
                self.match(CnsMRParser.Integer)
                pass
            elif token in [58]:
                self.enterOuterAlt(localctx, 3)
                self.state = 617
                self.match(CnsMRParser.Normal)
                self.state = 619
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 618
                    self.match(CnsMRParser.Equ_op)


                self.state = 621
                self.match(CnsMRParser.L_paren)
                self.state = 647
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [150, 152, 169]:
                    self.state = 622
                    self.number_s()
                    self.state = 624
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==148:
                        self.state = 623
                        self.match(CnsMRParser.Comma)


                    self.state = 626
                    self.number_s()
                    self.state = 628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==148:
                        self.state = 627
                        self.match(CnsMRParser.Comma)


                    self.state = 630
                    self.number_s()
                    pass
                elif token in [143]:
                    self.state = 632
                    self.match(CnsMRParser.Tail)
                    self.state = 634
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==163:
                        self.state = 633
                        self.match(CnsMRParser.Equ_op)


                    self.state = 636
                    self.selection()
                    self.state = 638
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==148:
                        self.state = 637
                        self.match(CnsMRParser.Comma)


                    self.state = 645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==144:
                        self.state = 640
                        self.match(CnsMRParser.Head)
                        self.state = 642
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==163:
                            self.state = 641
                            self.match(CnsMRParser.Equ_op)


                        self.state = 644
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 649
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = CnsMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.match(CnsMRParser.Assign)
            self.state = 654
            self.selection()
            self.state = 655
            self.number()
            self.state = 656
            self.number()
            self.state = 657
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,0)


        def sani_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assign_loopContext,0)


        def classification(self):
            return self.getTypedRuleContext(CnsMRParser.ClassificationContext,0)


        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 686
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 659
                self.sani_assign()
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 2)
                self.state = 660
                self.sani_assign_loop()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 3)
                self.state = 661
                self.classification()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 4)
                self.state = 662
                self.match(CnsMRParser.Coefficients)
                self.state = 663
                self.number_s()
                self.state = 664
                self.number_s()
                self.state = 665
                self.number_s()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 5)
                self.state = 667
                self.match(CnsMRParser.ForceConstant)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 668
                    self.match(CnsMRParser.Equ_op)


                self.state = 671
                self.number_s()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 6)
                self.state = 672
                self.match(CnsMRParser.Nrestraints)
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 673
                    self.match(CnsMRParser.Equ_op)


                self.state = 676
                self.match(CnsMRParser.Integer)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 7)
                self.state = 677
                self.match(CnsMRParser.Potential)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 678
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 681
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 8)
                self.state = 682
                self.match(CnsMRParser.Print)
                self.state = 683
                self.match(CnsMRParser.Threshold)
                self.state = 684
                self.number_s()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 9)
                self.state = 685
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 688
            self.match(CnsMRParser.Assign)
            self.state = 689
            self.selection()
            self.state = 690
            self.selection()
            self.state = 691
            self.selection()
            self.state = 692
            self.selection()
            self.state = 693
            self.selection()
            self.state = 694
            self.selection()
            self.state = 695
            self.number()
            self.state = 697
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 696
                self.number()


            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 524293) != 0):
                self.state = 699
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,0)


        def coup_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assign_loopContext,0)


        def classification(self):
            return self.getTypedRuleContext(CnsMRParser.ClassificationContext,0)


        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 702
                self.coup_assign()
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 2)
                self.state = 703
                self.coup_assign_loop()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 3)
                self.state = 704
                self.classification()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 4)
                self.state = 705
                self.match(CnsMRParser.Coefficients)
                self.state = 706
                self.number_s()
                self.state = 707
                self.number_s()
                self.state = 708
                self.number_s()
                self.state = 709
                self.number_s()
                pass
            elif token in [12]:
                self.enterOuterAlt(localctx, 5)
                self.state = 711
                self.match(CnsMRParser.Cv)
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 712
                    self.match(CnsMRParser.Equ_op)


                self.state = 715
                self.match(CnsMRParser.Integer)
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 6)
                self.state = 716
                self.match(CnsMRParser.ForceConstant)
                self.state = 717
                self.number_s()
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 524293) != 0):
                    self.state = 718
                    self.number_s()


                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 7)
                self.state = 721
                self.match(CnsMRParser.Nrestraints)
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 722
                    self.match(CnsMRParser.Equ_op)


                self.state = 725
                self.match(CnsMRParser.Integer)
                pass
            elif token in [20]:
                self.enterOuterAlt(localctx, 8)
                self.state = 726
                self.match(CnsMRParser.Partition)
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 727
                    self.match(CnsMRParser.Equ_op)


                self.state = 730
                self.match(CnsMRParser.Integer)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 9)
                self.state = 731
                self.match(CnsMRParser.Potential)
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 732
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 735
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 10)
                self.state = 736
                self.match(CnsMRParser.Print)
                self.state = 737
                self.match(CnsMRParser.Threshold)
                self.state = 738
                self.number_s()
                self.state = 741
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [91]:
                    self.state = 739
                    self.match(CnsMRParser.All)
                    pass
                elif token in [10]:
                    self.state = 740
                    self.classification()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 11)
                self.state = 743
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(CnsMRParser.Assign)
            self.state = 747
            self.selection()
            self.state = 748
            self.selection()
            self.state = 749
            self.selection()
            self.state = 750
            self.selection()
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==160:
                self.state = 751
                self.selection()
                self.state = 752
                self.selection()
                self.state = 753
                self.selection()
                self.state = 754
                self.selection()


            self.state = 758
            self.number()
            self.state = 759
            self.number()
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 524293) != 0):
                self.state = 760
                self.number()
                self.state = 761
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,0)


        def carbon_shift_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assign_loopContext,0)


        def classification(self):
            return self.getTypedRuleContext(CnsMRParser.ClassificationContext,0)


        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 806
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 765
                self.carbon_shift_assign()
                pass
            elif token in [141]:
                self.enterOuterAlt(localctx, 2)
                self.state = 766
                self.carbon_shift_assign_loop()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 3)
                self.state = 767
                self.classification()
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 4)
                self.state = 768
                self.match(CnsMRParser.Expectation)
                self.state = 769
                self.match(CnsMRParser.Integer)
                self.state = 770
                self.match(CnsMRParser.Integer)
                self.state = 771
                self.number_s()
                self.state = 772
                self.number_s()
                self.state = 773
                self.number_s()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 5)
                self.state = 775
                self.match(CnsMRParser.ForceConstant)
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 776
                    self.match(CnsMRParser.Equ_op)


                self.state = 779
                self.number_s()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 6)
                self.state = 780
                self.match(CnsMRParser.Nrestraints)
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 781
                    self.match(CnsMRParser.Equ_op)


                self.state = 784
                self.match(CnsMRParser.Integer)
                pass
            elif token in [65]:
                self.enterOuterAlt(localctx, 7)
                self.state = 785
                self.match(CnsMRParser.PhiStep)
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 786
                    self.match(CnsMRParser.Equ_op)


                self.state = 789
                self.number_s()
                pass
            elif token in [66]:
                self.enterOuterAlt(localctx, 8)
                self.state = 790
                self.match(CnsMRParser.PsiStep)
                self.state = 792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 791
                    self.match(CnsMRParser.Equ_op)


                self.state = 794
                self.number_s()
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 9)
                self.state = 795
                self.match(CnsMRParser.Potential)
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 796
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 799
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 10)
                self.state = 800
                self.match(CnsMRParser.Print)
                self.state = 801
                self.match(CnsMRParser.Threshold)
                self.state = 802
                self.number_s()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 11)
                self.state = 803
                self.carbon_shift_rcoil()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 12)
                self.state = 804
                self.match(CnsMRParser.Reset)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 13)
                self.state = 805
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(CnsMRParser.Assign)
            self.state = 809
            self.selection()
            self.state = 810
            self.selection()
            self.state = 811
            self.selection()
            self.state = 812
            self.selection()
            self.state = 813
            self.selection()
            self.state = 814
            self.number()
            self.state = 815
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 817
            self.match(CnsMRParser.Rcoil)
            self.state = 818
            self.selection()
            self.state = 819
            self.number()
            self.state = 820
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(CnsMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,0)


        def classification(self):
            return self.getTypedRuleContext(CnsMRParser.ClassificationContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 854
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [70]:
                self.enterOuterAlt(localctx, 1)
                self.state = 822
                self.observed()
                pass
            elif token in [67]:
                self.enterOuterAlt(localctx, 2)
                self.state = 823
                self.proton_shift_rcoil()
                pass
            elif token in [71]:
                self.enterOuterAlt(localctx, 3)
                self.state = 824
                self.proton_shift_anisotropy()
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 4)
                self.state = 825
                self.proton_shift_amides()
                pass
            elif token in [63]:
                self.enterOuterAlt(localctx, 5)
                self.state = 826
                self.proton_shift_carbons()
                pass
            elif token in [73]:
                self.enterOuterAlt(localctx, 6)
                self.state = 827
                self.proton_shift_nitrogens()
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 7)
                self.state = 828
                self.proton_shift_oxygens()
                pass
            elif token in [75]:
                self.enterOuterAlt(localctx, 8)
                self.state = 829
                self.proton_shift_ring_atoms()
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 9)
                self.state = 830
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 10)
                self.state = 831
                self.classification()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 11)
                self.state = 832
                self.match(CnsMRParser.Error)
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 833
                    self.match(CnsMRParser.Equ_op)


                self.state = 836
                self.number_s()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 12)
                self.state = 837
                self.match(CnsMRParser.ForceConstant)
                self.state = 838
                self.number_s()
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 524293) != 0):
                    self.state = 839
                    self.number_s()


                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 13)
                self.state = 842
                self.match(CnsMRParser.Potential)
                self.state = 843
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 14)
                self.state = 844
                self.match(CnsMRParser.Print)
                self.state = 845
                self.match(CnsMRParser.Threshold)
                self.state = 846
                self.number_s()
                self.state = 849
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [91]:
                    self.state = 847
                    self.match(CnsMRParser.All)
                    pass
                elif token in [10]:
                    self.state = 848
                    self.classification()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 851
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 15)
                self.state = 853
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 856
            self.match(CnsMRParser.Observed)
            self.state = 857
            self.selection()
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==160:
                self.state = 858
                self.selection()


            self.state = 861
            self.number()
            self.state = 863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 524293) != 0):
                self.state = 862
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self):
            return self.getTypedRuleContext(CnsMRParser.NumberContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(CnsMRParser.Rcoil)
            self.state = 866
            self.selection()
            self.state = 867
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 869
            self.match(CnsMRParser.Anisotropy)
            self.state = 870
            self.selection()
            self.state = 871
            self.selection()
            self.state = 872
            self.selection()
            self.state = 873
            self.match(CnsMRParser.Simple_name)
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 874
                self.match(CnsMRParser.Logical)


            self.state = 877
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(CnsMRParser.Amides)
            self.state = 880
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 882
            self.match(CnsMRParser.Carbon)
            self.state = 883
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 885
            self.match(CnsMRParser.Nitrogens)
            self.state = 886
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 888
            self.match(CnsMRParser.Oxygens)
            self.state = 889
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(CnsMRParser.RingAtoms)
            self.state = 892
            self.match(CnsMRParser.Simple_name)
            self.state = 893
            self.selection()
            self.state = 894
            self.selection()
            self.state = 895
            self.selection()
            self.state = 896
            self.selection()
            self.state = 897
            self.selection()
            self.state = 899
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==160:
                self.state = 898
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 901
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 902
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(CnsMRParser.ClassificationContext,0)


        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 904
                self.conf_assign()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 905
                self.classification()
                pass
            elif token in [79]:
                self.enterOuterAlt(localctx, 3)
                self.state = 906
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 4)
                self.state = 907
                self.match(CnsMRParser.Expectation)
                self.state = 908
                self.match(CnsMRParser.Integer)
                self.state = 910
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 909
                    self.match(CnsMRParser.Integer)


                self.state = 913
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 912
                    self.match(CnsMRParser.Integer)


                self.state = 916
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 915
                    self.match(CnsMRParser.Integer)


                self.state = 918
                self.number_s()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 5)
                self.state = 919
                self.match(CnsMRParser.Error)
                self.state = 921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 920
                    self.match(CnsMRParser.Equ_op)


                self.state = 923
                self.number_s()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 6)
                self.state = 924
                self.match(CnsMRParser.ForceConstant)
                self.state = 926
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 925
                    self.match(CnsMRParser.Equ_op)


                self.state = 928
                self.number_s()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 7)
                self.state = 929
                self.match(CnsMRParser.Nrestraints)
                self.state = 931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 930
                    self.match(CnsMRParser.Equ_op)


                self.state = 933
                self.match(CnsMRParser.Integer)
                pass
            elif token in [80]:
                self.enterOuterAlt(localctx, 8)
                self.state = 934
                self.match(CnsMRParser.Phase)
                self.state = 935
                self.match(CnsMRParser.Integer)
                self.state = 936
                self.match(CnsMRParser.Integer)
                self.state = 937
                self.match(CnsMRParser.Integer)
                self.state = 941
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 938
                    self.match(CnsMRParser.Integer)
                    self.state = 939
                    self.match(CnsMRParser.Integer)
                    self.state = 940
                    self.match(CnsMRParser.Integer)


                self.state = 946
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 943
                    self.match(CnsMRParser.Integer)
                    self.state = 944
                    self.match(CnsMRParser.Integer)
                    self.state = 945
                    self.match(CnsMRParser.Integer)


                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==150:
                    self.state = 948
                    self.match(CnsMRParser.Integer)
                    self.state = 949
                    self.match(CnsMRParser.Integer)
                    self.state = 950
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 9)
                self.state = 953
                self.match(CnsMRParser.Potential)
                self.state = 955
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 954
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 957
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 10)
                self.state = 958
                self.match(CnsMRParser.Print)
                self.state = 959
                self.match(CnsMRParser.Threshold)
                self.state = 960
                self.number_s()
                self.state = 963
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [91]:
                    self.state = 961
                    self.match(CnsMRParser.All)
                    pass
                elif token in [10]:
                    self.state = 962
                    self.classification()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 11)
                self.state = 965
                self.match(CnsMRParser.Reset)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 12)
                self.state = 966
                self.match(CnsMRParser.Size)
                self.state = 967
                self.match(CnsMRParser.Dimensions)
                self.state = 968
                self.match(CnsMRParser.Integer)
                self.state = 970
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 969
                    self.match(CnsMRParser.Integer)


                self.state = 973
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 972
                    self.match(CnsMRParser.Integer)


                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==150:
                    self.state = 975
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 13)
                self.state = 978
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(CnsMRParser.Assign)
            self.state = 982
            self.selection()
            self.state = 983
            self.selection()
            self.state = 984
            self.selection()
            self.state = 985
            self.selection()
            self.state = 991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
            if la_ == 1:
                self.state = 986
                self.selection()
                self.state = 987
                self.selection()
                self.state = 988
                self.selection()
                self.state = 989
                self.selection()


            self.state = 998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
            if la_ == 1:
                self.state = 993
                self.selection()
                self.state = 994
                self.selection()
                self.state = 995
                self.selection()
                self.state = 996
                self.selection()


            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==160:
                self.state = 1000
                self.selection()
                self.state = 1001
                self.selection()
                self.state = 1002
                self.selection()
                self.state = 1003
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(CnsMRParser.ClassificationContext,0)


        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1035
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1007
                self.dani_assign()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1008
                self.classification()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1009
                self.match(CnsMRParser.Coefficients)
                self.state = 1010
                self.number_s()
                self.state = 1011
                self.number_s()
                self.state = 1012
                self.number_s()
                self.state = 1013
                self.number_s()
                self.state = 1014
                self.number_s()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1016
                self.match(CnsMRParser.ForceConstant)
                self.state = 1018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1017
                    self.match(CnsMRParser.Equ_op)


                self.state = 1020
                self.number_s()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1021
                self.match(CnsMRParser.Nrestraints)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1022
                    self.match(CnsMRParser.Equ_op)


                self.state = 1025
                self.match(CnsMRParser.Integer)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1026
                self.match(CnsMRParser.Potential)
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 1027
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 1030
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1031
                self.match(CnsMRParser.Print)
                self.state = 1032
                self.match(CnsMRParser.Threshold)
                self.state = 1033
                self.number_s()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1034
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1037
            self.match(CnsMRParser.Assign)
            self.state = 1038
            self.selection()
            self.state = 1039
            self.selection()
            self.state = 1040
            self.selection()
            self.state = 1041
            self.selection()
            self.state = 1042
            self.selection()
            self.state = 1043
            self.selection()
            self.state = 1044
            self.number()
            self.state = 1046
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 524293) != 0):
                self.state = 1045
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(CnsMRParser.ClassificationContext,0)


        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1078
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1048
                self.one_bond_assign()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1049
                self.classification()
                pass
            elif token in [60]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1050
                self.match(CnsMRParser.Coefficients)
                self.state = 1051
                self.number_s()
                self.state = 1052
                self.number_s()
                self.state = 1053
                self.number_s()
                self.state = 1054
                self.number_s()
                self.state = 1055
                self.number_s()
                self.state = 1056
                self.number_s()
                self.state = 1057
                self.number_s()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1059
                self.match(CnsMRParser.ForceConstant)
                self.state = 1061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1060
                    self.match(CnsMRParser.Equ_op)


                self.state = 1063
                self.number_s()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1064
                self.match(CnsMRParser.Nrestraints)
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1065
                    self.match(CnsMRParser.Equ_op)


                self.state = 1068
                self.match(CnsMRParser.Integer)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1069
                self.match(CnsMRParser.Potential)
                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 1070
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 1073
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1074
                self.match(CnsMRParser.Print)
                self.state = 1075
                self.match(CnsMRParser.Threshold)
                self.state = 1076
                self.number_s()
                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1077
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1080
            self.match(CnsMRParser.Assign)
            self.state = 1081
            self.selection()
            self.state = 1082
            self.selection()
            self.state = 1083
            self.selection()
            self.state = 1084
            self.selection()
            self.state = 1085
            self.selection()
            self.state = 1086
            self.selection()
            self.state = 1087
            self.selection()
            self.state = 1088
            self.selection()
            self.state = 1089
            self.number()
            self.state = 1090
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,0)


        def classification(self):
            return self.getTypedRuleContext(CnsMRParser.ClassificationContext,0)


        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1136
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1092
                self.angle_db_assign()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1093
                self.classification()
                pass
            elif token in [86]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1094
                self.match(CnsMRParser.DerivFlag)
                self.state = 1096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1095
                    self.match(CnsMRParser.Equ_op)


                self.state = 1098
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1099
                self.match(CnsMRParser.Expectation)
                self.state = 1100
                self.match(CnsMRParser.Integer)
                self.state = 1101
                self.match(CnsMRParser.Integer)
                self.state = 1102
                self.number_s()
                pass
            elif token in [77]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1103
                self.match(CnsMRParser.Error)
                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1104
                    self.match(CnsMRParser.Equ_op)


                self.state = 1107
                self.number_s()
                pass
            elif token in [61]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1108
                self.match(CnsMRParser.ForceConstant)
                self.state = 1110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1109
                    self.match(CnsMRParser.Equ_op)


                self.state = 1112
                self.number_s()
                pass
            elif token in [18]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1113
                self.match(CnsMRParser.Nrestraints)
                self.state = 1115
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1114
                    self.match(CnsMRParser.Equ_op)


                self.state = 1117
                self.match(CnsMRParser.Integer)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1118
                self.match(CnsMRParser.Potential)
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==182:
                    self.state = 1119
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 1122
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [23]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1123
                self.match(CnsMRParser.Print)
                self.state = 1124
                self.match(CnsMRParser.Threshold)
                self.state = 1125
                self.number_s()
                self.state = 1128
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [91]:
                    self.state = 1126
                    self.match(CnsMRParser.All)
                    pass
                elif token in [10]:
                    self.state = 1127
                    self.classification()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [26]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1130
                self.match(CnsMRParser.Reset)
                pass
            elif token in [81]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1131
                self.match(CnsMRParser.Size)
                self.state = 1132
                _la = self._input.LA(1)
                if not(_la==49 or _la==85):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1133
                self.match(CnsMRParser.Integer)
                self.state = 1134
                self.match(CnsMRParser.Integer)
                pass
            elif token in [68]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1135
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1138
            self.match(CnsMRParser.Assign)
            self.state = 1139
            self.selection()
            self.state = 1140
            self.selection()
            self.state = 1141
            self.selection()
            self.state = 1142
            self.selection()
            self.state = 1143
            self.selection()
            self.state = 1144
            self.selection()
            self.state = 1145
            self.selection()
            self.state = 1146
            self.selection()
            self.state = 1147
            self.selection()
            self.state = 1148
            self.selection()
            self.state = 1149
            self.selection()
            self.state = 1151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==160:
                self.state = 1150
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ncs(self):
            return self.getToken(CnsMRParser.Ncs, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def ncs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Ncs_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Ncs_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_ncs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_restraint" ):
                listener.enterNcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_restraint" ):
                listener.exitNcs_restraint(self)




    def ncs_restraint(self):

        localctx = CnsMRParser.Ncs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_ncs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1153
            self.match(CnsMRParser.Ncs)
            self.state = 1154
            self.match(CnsMRParser.Restraints)
            self.state = 1158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 11259033428164608) != 0):
                self.state = 1155
                self.ncs_statement()
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1161
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def ncs_group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Ncs_group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Ncs_group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_ncs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_statement" ):
                listener.enterNcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_statement" ):
                listener.exitNcs_statement(self)




    def ncs_statement(self):

        localctx = CnsMRParser.Ncs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ncs_statement)
        self._la = 0 # Token type
        try:
            self.state = 1173
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1163
                self.match(CnsMRParser.Group)
                self.state = 1167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & 25769803777) != 0):
                    self.state = 1164
                    self.ncs_group_statement()
                    self.state = 1169
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1170
                self.match(CnsMRParser.End)
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1171
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1172
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equivalence(self):
            return self.getToken(CnsMRParser.Equivalence, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Sigb(self):
            return self.getToken(CnsMRParser.Sigb, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_ncs_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_group_statement" ):
                listener.enterNcs_group_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_group_statement" ):
                listener.exitNcs_group_statement(self)




    def ncs_group_statement(self):

        localctx = CnsMRParser.Ncs_group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_ncs_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 1190
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [88]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1175
                self.match(CnsMRParser.Equivalence)
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1176
                    self.match(CnsMRParser.Equ_op)


                self.state = 1179
                self.selection()
                pass
            elif token in [89]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1180
                self.match(CnsMRParser.Sigb)
                self.state = 1182
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1181
                    self.match(CnsMRParser.Equ_op)


                self.state = 1184
                self.number_s()
                pass
            elif token in [55]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1185
                self.match(CnsMRParser.Weight)
                self.state = 1187
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1186
                    self.match(CnsMRParser.Equ_op)


                self.state = 1189
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1192
            self.match(CnsMRParser.L_paren)
            self.state = 1193
            self.selection_expression()
            self.state = 1194
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1196
            self.term()
            self.state = 1201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==145:
                self.state = 1197
                self.match(CnsMRParser.Or_op)
                self.state = 1198
                self.term()
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1204
            self.factor(0)
            self.state = 1209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==146:
                self.state = 1205
                self.match(CnsMRParser.And_op)
                self.state = 1206
                self.factor(0)
                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store1(self):
            return self.getToken(CnsMRParser.Store1, 0)

        def Store2(self):
            return self.getToken(CnsMRParser.Store2, 0)

        def Store3(self):
            return self.getToken(CnsMRParser.Store3, 0)

        def Store4(self):
            return self.getToken(CnsMRParser.Store4, 0)

        def Store5(self):
            return self.getToken(CnsMRParser.Store5, 0)

        def Store6(self):
            return self.getToken(CnsMRParser.Store6, 0)

        def Store7(self):
            return self.getToken(CnsMRParser.Store7, 0)

        def Store8(self):
            return self.getToken(CnsMRParser.Store8, 0)

        def Store9(self):
            return self.getToken(CnsMRParser.Store9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 110
        self.enterRecursionRule(localctx, 110, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
            if la_ == 1:
                self.state = 1213
                self.match(CnsMRParser.L_paren)
                self.state = 1214
                self.selection_expression()
                self.state = 1215
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1217
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1218
                self.match(CnsMRParser.Atom)
                self.state = 1219
                _la = self._input.LA(1)
                if not(_la==157 or _la==158):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1220
                _la = self._input.LA(1)
                if not(_la==150 or _la==159):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1221
                _la = self._input.LA(1)
                if not(_la==157 or _la==158):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1222
                self.match(CnsMRParser.Attribute)
                self.state = 1224
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==175:
                    self.state = 1223
                    self.match(CnsMRParser.Abs)


                self.state = 1226
                self.match(CnsMRParser.Attr_properties)
                self.state = 1227
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1228
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1229
                self.match(CnsMRParser.BondedTo)
                self.state = 1230
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1231
                self.match(CnsMRParser.ByGroup)
                self.state = 1232
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1233
                self.match(CnsMRParser.ByRes)
                self.state = 1234
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1235
                self.match(CnsMRParser.Chemical)
                self.state = 1243
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [158]:
                    self.state = 1236
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [157]:
                    self.state = 1237
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1240
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                    if la_ == 1:
                        self.state = 1238
                        self.match(CnsMRParser.Colon)
                        self.state = 1239
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [169]:
                    self.state = 1242
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1245
                self.match(CnsMRParser.Fbox)
                self.state = 1246
                self.number_f()
                self.state = 1247
                self.number_f()
                self.state = 1248
                self.number_f()
                self.state = 1249
                self.number_f()
                self.state = 1250
                self.number_f()
                self.state = 1251
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1253
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1254
                self.match(CnsMRParser.Id)
                self.state = 1255
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1256
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1257
                self.match(CnsMRParser.Name)
                self.state = 1270
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [158]:
                    self.state = 1258
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [157]:
                    self.state = 1259
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1262
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                    if la_ == 1:
                        self.state = 1260
                        self.match(CnsMRParser.Colon)
                        self.state = 1261
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [153]:
                    self.state = 1264
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1267
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                    if la_ == 1:
                        self.state = 1265
                        self.match(CnsMRParser.Colon)
                        self.state = 1266
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                elif token in [169]:
                    self.state = 1269
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1272
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1273
                self.match(CnsMRParser.Not_op)
                self.state = 1274
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1275
                self.match(CnsMRParser.Point)
                self.state = 1276
                self.match(CnsMRParser.L_paren)
                self.state = 1277
                self.number_f()
                self.state = 1279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148:
                    self.state = 1278
                    self.match(CnsMRParser.Comma)


                self.state = 1281
                self.number_f()
                self.state = 1283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148:
                    self.state = 1282
                    self.match(CnsMRParser.Comma)


                self.state = 1285
                self.number_f()
                self.state = 1286
                self.match(CnsMRParser.R_paren)
                self.state = 1287
                self.match(CnsMRParser.Cut)
                self.state = 1288
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1290
                self.match(CnsMRParser.Point)
                self.state = 1291
                self.match(CnsMRParser.L_paren)
                self.state = 1292
                self.match(CnsMRParser.Tail)
                self.state = 1294
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==163:
                    self.state = 1293
                    self.match(CnsMRParser.Equ_op)


                self.state = 1296
                self.selection()
                self.state = 1298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==148:
                    self.state = 1297
                    self.match(CnsMRParser.Comma)


                self.state = 1305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==144:
                    self.state = 1300
                    self.match(CnsMRParser.Head)
                    self.state = 1302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==163:
                        self.state = 1301
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1304
                    self.selection()


                self.state = 1307
                self.match(CnsMRParser.R_paren)
                self.state = 1308
                self.match(CnsMRParser.Cut)
                self.state = 1309
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1311
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1312
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1313
                self.match(CnsMRParser.Residue)
                self.state = 1321
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [159]:
                    self.state = 1314
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [150]:
                    self.state = 1315
                    self.match(CnsMRParser.Integer)
                    self.state = 1318
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                    if la_ == 1:
                        self.state = 1316
                        self.match(CnsMRParser.Colon)
                        self.state = 1317
                        self.match(CnsMRParser.Integer)


                    pass
                elif token in [169]:
                    self.state = 1320
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1323
                self.match(CnsMRParser.Resname)
                self.state = 1331
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [158]:
                    self.state = 1324
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [157]:
                    self.state = 1325
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1328
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1326
                        self.match(CnsMRParser.Colon)
                        self.state = 1327
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [169]:
                    self.state = 1330
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1333
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1346
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [158]:
                    self.state = 1334
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [157]:
                    self.state = 1335
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1338
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        self.state = 1336
                        self.match(CnsMRParser.Colon)
                        self.state = 1337
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [153]:
                    self.state = 1340
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1343
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                    if la_ == 1:
                        self.state = 1341
                        self.match(CnsMRParser.Colon)
                        self.state = 1342
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                elif token in [169]:
                    self.state = 1345
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1348
                self.match(CnsMRParser.Sfbox)
                self.state = 1349
                self.number_f()
                self.state = 1350
                self.number_f()
                self.state = 1351
                self.number_f()
                self.state = 1352
                self.number_f()
                self.state = 1353
                self.number_f()
                self.state = 1354
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1356
                self.match(CnsMRParser.Store1)
                pass

            elif la_ == 25:
                self.state = 1357
                self.match(CnsMRParser.Store2)
                pass

            elif la_ == 26:
                self.state = 1358
                self.match(CnsMRParser.Store3)
                pass

            elif la_ == 27:
                self.state = 1359
                self.match(CnsMRParser.Store4)
                pass

            elif la_ == 28:
                self.state = 1360
                self.match(CnsMRParser.Store5)
                pass

            elif la_ == 29:
                self.state = 1361
                self.match(CnsMRParser.Store6)
                pass

            elif la_ == 30:
                self.state = 1362
                self.match(CnsMRParser.Store7)
                pass

            elif la_ == 31:
                self.state = 1363
                self.match(CnsMRParser.Store8)
                pass

            elif la_ == 32:
                self.state = 1364
                self.match(CnsMRParser.Store9)
                pass

            elif la_ == 33:
                self.state = 1365
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1376
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1374
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1368
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1369
                        self.match(CnsMRParser.Around)
                        self.state = 1370
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1371
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1372
                        self.match(CnsMRParser.Saround)
                        self.state = 1373
                        self.number_f()
                        pass

             
                self.state = 1378
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1379
            _la = self._input.LA(1)
            if not(((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 524293) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1381
            _la = self._input.LA(1)
            if not(_la==150 or _la==152):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            _la = self._input.LA(1)
            if not(((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & 524293) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = CnsMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1385
            _la = self._input.LA(1)
            if not(_la==150 or _la==152):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def class_name(self):
            return self.getTypedRuleContext(CnsMRParser.Class_nameContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_classification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassification" ):
                listener.enterClassification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassification" ):
                listener.exitClassification(self)




    def classification(self):

        localctx = CnsMRParser.ClassificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_classification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1387
            self.match(CnsMRParser.Classification)
            self.state = 1389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==163:
                self.state = 1388
                self.match(CnsMRParser.Equ_op)


            self.state = 1391
            self.class_name()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Class_nameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def HBonded(self):
            return self.getToken(CnsMRParser.HBonded, 0)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(CnsMRParser.Improper, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_class_name

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClass_name" ):
                listener.enterClass_name(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClass_name" ):
                listener.exitClass_name(self)




    def class_name(self):

        localctx = CnsMRParser.Class_nameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_class_name)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1393
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & 844424930131976) != 0) or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 3377699720527873) != 0) or _la==157):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CnsMRParser.Flags, 0)

        def Include(self):
            return self.getToken(CnsMRParser.Include, 0)

        def End_FL(self):
            return self.getToken(CnsMRParser.End_FL, 0)

        def Exclude(self):
            return self.getToken(CnsMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Class_name)
            else:
                return self.getToken(CnsMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(CnsMRParser.Any_class, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = CnsMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self.match(CnsMRParser.Flags)
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 1396
                self.match(CnsMRParser.Exclude)
                self.state = 1404
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [189, 191]:
                    self.state = 1400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==191:
                        self.state = 1397
                        self.match(CnsMRParser.Class_name)
                        self.state = 1402
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [192]:
                    self.state = 1403
                    self.match(CnsMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1408
            self.match(CnsMRParser.Include)
            self.state = 1412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==191:
                self.state = 1409
                self.match(CnsMRParser.Class_name)
                self.state = 1414
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1415
            self.match(CnsMRParser.End_FL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(CnsMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = CnsMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1417
            self.match(CnsMRParser.Vector)
            self.state = 1418
            self.vector_mode()
            self.state = 1419
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(CnsMRParser.Do_Lp, 0)

        def Identity_Lp(self):
            return self.getToken(CnsMRParser.Identity_Lp, 0)

        def Show(self):
            return self.getToken(CnsMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = CnsMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 1427
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [125, 126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1421
                _la = self._input.LA(1)
                if not(_la==125 or _la==126):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1422
                self.vector_expression()
                self.state = 1423
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [127]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1425
                self.match(CnsMRParser.Show)
                self.state = 1426
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = CnsMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1429
            self.match(CnsMRParser.Atom_properties_VE)
            self.state = 1432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==195:
                self.state = 1430
                self.match(CnsMRParser.Equ_op_VE)
                self.state = 1431
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = CnsMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.vflc()
            self.state = 1437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 31) != 0):
                self.state = 1435
                _la = self._input.LA(1)
                if not(((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 31) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1436
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(CnsMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(CnsMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(CnsMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(CnsMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = CnsMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_vflc)
        try:
            self.state = 1446
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [204]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1439
                self.match(CnsMRParser.Atom_properties_VE)
                pass
            elif token in [205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1440
                self.vector_func_call()
                pass
            elif token in [202]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1441
                self.match(CnsMRParser.Integer_VE)
                pass
            elif token in [203]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1442
                self.match(CnsMRParser.Real_VE)
                pass
            elif token in [228]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1443
                self.match(CnsMRParser.Simple_name_VE)
                pass
            elif token in [227]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1444
                self.match(CnsMRParser.Symbol_name_VE)
                pass
            elif token in [229]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1445
                self.match(CnsMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(CnsMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(CnsMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(CnsMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(CnsMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(CnsMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(CnsMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(CnsMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(CnsMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(CnsMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(CnsMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(CnsMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(CnsMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(CnsMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma_VE)
            else:
                return self.getToken(CnsMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(CnsMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(CnsMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(CnsMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(CnsMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(CnsMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(CnsMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(CnsMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(CnsMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(CnsMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = CnsMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1567
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [205]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1448
                self.match(CnsMRParser.Abs_VE)
                self.state = 1449
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1450
                self.vflc()
                self.state = 1451
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [206]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1453
                self.match(CnsMRParser.Acos_VE)
                self.state = 1454
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1455
                self.vflc()
                self.state = 1456
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [208]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1458
                self.match(CnsMRParser.Cos_VE)
                self.state = 1459
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1460
                self.vflc()
                self.state = 1461
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [209]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1463
                self.match(CnsMRParser.Decode_VE)
                self.state = 1464
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1465
                self.vflc()
                self.state = 1466
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [210]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1468
                self.match(CnsMRParser.Encode_VE)
                self.state = 1469
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1470
                self.vflc()
                self.state = 1471
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [211]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1473
                self.match(CnsMRParser.Exp_VE)
                self.state = 1474
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1475
                self.vflc()
                self.state = 1476
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [212]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1478
                self.match(CnsMRParser.Gauss_VE)
                self.state = 1479
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1480
                self.vflc()
                self.state = 1481
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [213]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1483
                self.match(CnsMRParser.Heavy_VE)
                self.state = 1484
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1485
                self.vflc()
                self.state = 1486
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [214]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1488
                self.match(CnsMRParser.Int_VE)
                self.state = 1489
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1490
                self.vflc()
                self.state = 1491
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [215]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1493
                self.match(CnsMRParser.Log10_VE)
                self.state = 1494
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1495
                self.vflc()
                self.state = 1496
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [216]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1498
                self.match(CnsMRParser.Log_VE)
                self.state = 1499
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1500
                self.vflc()
                self.state = 1501
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [217]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1503
                self.match(CnsMRParser.Max_VE)
                self.state = 1504
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1505
                self.vflc()
                self.state = 1510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==201:
                    self.state = 1506
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1507
                    self.vflc()
                    self.state = 1512
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1513
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [218]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1515
                self.match(CnsMRParser.Maxw_VE)
                self.state = 1516
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1517
                self.vflc()
                self.state = 1518
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [219]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1520
                self.match(CnsMRParser.Min_VE)
                self.state = 1521
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1522
                self.vflc()
                self.state = 1527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==201:
                    self.state = 1523
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1524
                    self.vflc()
                    self.state = 1529
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1530
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [220]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1532
                self.match(CnsMRParser.Mod_VE)
                self.state = 1533
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1534
                self.vflc()
                self.state = 1535
                self.match(CnsMRParser.Comma_VE)
                self.state = 1536
                self.vflc()
                self.state = 1537
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [221]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1539
                self.match(CnsMRParser.Norm_VE)
                self.state = 1540
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1541
                self.vflc()
                self.state = 1542
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [222]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1544
                self.match(CnsMRParser.Random_VE)
                self.state = 1545
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1546
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [223]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1547
                self.match(CnsMRParser.Sign_VE)
                self.state = 1548
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1549
                self.vflc()
                self.state = 1550
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [224]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1552
                self.match(CnsMRParser.Sin_VE)
                self.state = 1553
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1554
                self.vflc()
                self.state = 1555
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [225]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1557
                self.match(CnsMRParser.Sqrt_VE)
                self.state = 1558
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1559
                self.vflc()
                self.state = 1560
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [226]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1562
                self.match(CnsMRParser.Tan_VE)
                self.state = 1563
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1564
                self.vflc()
                self.state = 1565
                self.match(CnsMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(CnsMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(CnsMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(CnsMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(CnsMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(CnsMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(CnsMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(CnsMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(CnsMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(CnsMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(CnsMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = CnsMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1569
            _la = self._input.LA(1)
            if not(((((_la - 235)) & ~0x3f) == 0 and ((1 << (_la - 235)) & 127) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1570
            self.match(CnsMRParser.L_paren_VS)
            self.state = 1571
            self.match(CnsMRParser.Atom_properties_VS)
            self.state = 1572
            self.match(CnsMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(CnsMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = CnsMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1574
            self.match(CnsMRParser.Evaluate_Lp)
            self.state = 1575
            self.match(CnsMRParser.Symbol_name_VE)
            self.state = 1576
            self.match(CnsMRParser.Equ_op_VE)
            self.state = 1577
            self.evaluate_operation()
            self.state = 1578
            self.match(CnsMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = CnsMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1580
            self.vflc()
            self.state = 1583
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 31) != 0):
                self.state = 1581
                _la = self._input.LA(1)
                if not(((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & 31) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1582
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Patch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Patch(self):
            return self.getToken(CnsMRParser.Patch, 0)

        def Reference(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Reference)
            else:
                return self.getToken(CnsMRParser.Reference, i)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Nil(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Nil)
            else:
                return self.getToken(CnsMRParser.Nil, i)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def class_name(self):
            return self.getTypedRuleContext(CnsMRParser.Class_nameContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_patch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatch_statement" ):
                listener.enterPatch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatch_statement" ):
                listener.exitPatch_statement(self)




    def patch_statement(self):

        localctx = CnsMRParser.Patch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_patch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self.match(CnsMRParser.Patch)
            self.state = 1587
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & 844424930131976) != 0) or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 3377699720527873) != 0) or _la==157:
                self.state = 1586
                self.class_name()


            self.state = 1589
            self.match(CnsMRParser.Reference)
            self.state = 1590
            self.match(CnsMRParser.Equ_op)
            self.state = 1591
            _la = self._input.LA(1)
            if not(_la==131 or _la==150):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1592
            self.match(CnsMRParser.Equ_op)
            self.state = 1593
            self.selection()
            self.state = 1599
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==130:
                self.state = 1594
                self.match(CnsMRParser.Reference)
                self.state = 1595
                self.match(CnsMRParser.Equ_op)
                self.state = 1596
                _la = self._input.LA(1)
                if not(_la==131 or _la==150):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1597
                self.match(CnsMRParser.Equ_op)
                self.state = 1598
                self.selection()


            self.state = 1601
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_settingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Parameter(self):
            return self.getToken(CnsMRParser.Parameter, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_parameter_setting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_setting" ):
                listener.enterParameter_setting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_setting" ):
                listener.exitParameter_setting(self)




    def parameter_setting(self):

        localctx = CnsMRParser.Parameter_settingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_parameter_setting)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1603
            self.match(CnsMRParser.Parameter)
            self.state = 1607
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==26 or _la==49 or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & 70931694131086337) != 0):
                self.state = 1604
                self.parameter_statement()
                self.state = 1609
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1610
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def UB(self):
            return self.getToken(CnsMRParser.UB, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(CnsMRParser.Improper, 0)

        def Mult(self):
            return self.getToken(CnsMRParser.Mult, 0)

        def HBonded(self):
            return self.getToken(CnsMRParser.HBonded, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def NBFix(self):
            return self.getToken(CnsMRParser.NBFix, 0)

        def NonB(self):
            return self.getToken(CnsMRParser.NonB, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def VDWOff(self):
            return self.getToken(CnsMRParser.VDWOff, 0)

        def Verbose(self):
            return self.getToken(CnsMRParser.Verbose, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_parameter_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_statement" ):
                listener.enterParameter_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_statement" ):
                listener.exitParameter_statement(self)




    def parameter_statement(self):

        localctx = CnsMRParser.Parameter_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_parameter_statement)
        self._la = 0 # Token type
        try:
            self.state = 1667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [85]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1612
                self.match(CnsMRParser.AngleDb)
                self.state = 1613
                self.match(CnsMRParser.Simple_name)
                self.state = 1614
                self.match(CnsMRParser.Simple_name)
                self.state = 1615
                self.match(CnsMRParser.Simple_name)
                self.state = 1616
                self.number_s()
                self.state = 1617
                self.number_s()
                self.state = 1622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==133:
                    self.state = 1618
                    self.match(CnsMRParser.UB)
                    self.state = 1619
                    self.number_s()
                    self.state = 1620
                    self.number_s()


                pass
            elif token in [95]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1624
                self.match(CnsMRParser.BondedTo)
                self.state = 1625
                self.match(CnsMRParser.Simple_name)
                self.state = 1626
                self.match(CnsMRParser.Simple_name)
                self.state = 1627
                self.number_s()
                self.state = 1628
                self.number_s()
                pass
            elif token in [49, 136]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1630
                _la = self._input.LA(1)
                if not(_la==49 or _la==136):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1631
                self.match(CnsMRParser.Simple_name)
                self.state = 1632
                self.match(CnsMRParser.Simple_name)
                self.state = 1633
                self.match(CnsMRParser.Simple_name)
                self.state = 1634
                self.match(CnsMRParser.Simple_name)
                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 1635
                    self.match(CnsMRParser.Mult)
                    self.state = 1636
                    self.match(CnsMRParser.Integer)


                self.state = 1639
                self.number_s()
                self.state = 1640
                self.match(CnsMRParser.Integer)
                self.state = 1641
                self.number_s()
                pass
            elif token in [135]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1643
                self.match(CnsMRParser.HBonded)
                self.state = 1644
                self.match(CnsMRParser.Simple_names)
                self.state = 1645
                self.match(CnsMRParser.Simple_names)
                self.state = 1646
                self.number_s()
                self.state = 1647
                self.number_s()
                pass
            elif token in [137]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1649
                self.match(CnsMRParser.NBFix)
                self.state = 1650
                self.match(CnsMRParser.Simple_name)
                self.state = 1651
                self.match(CnsMRParser.Simple_name)
                self.state = 1652
                self.number_s()
                self.state = 1653
                self.number_s()
                self.state = 1654
                self.number_s()
                self.state = 1655
                self.number_s()
                pass
            elif token in [138]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1657
                self.match(CnsMRParser.NonB)
                self.state = 1658
                self.match(CnsMRParser.Simple_name)
                self.state = 1659
                self.number_s()
                self.state = 1660
                self.number_s()
                self.state = 1661
                self.number_s()
                self.state = 1662
                self.number_s()
                pass
            elif token in [26, 139]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1664
                _la = self._input.LA(1)
                if not(_la==26 or _la==139):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1665
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1666
                self.match(CnsMRParser.Verbose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign_loop" ):
                listener.enterNoe_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign_loop" ):
                listener.exitNoe_assign_loop(self)




    def noe_assign_loop(self):

        localctx = CnsMRParser.Noe_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_noe_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1669
            self.match(CnsMRParser.For)
            self.state = 1670
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1671
            self.match(CnsMRParser.In_CF)
            self.state = 1672
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1691
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
            if la_ == 1:
                self.state = 1676
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==247:
                    self.state = 1673
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1678
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==248:
                    self.state = 1679
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1684
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==250:
                    self.state = 1685
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1690
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1693
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1694
            self.match(CnsMRParser.Loop)
            self.state = 1695
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==3 or _la==5 or _la==128:
                self.state = 1699
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [128]:
                    self.state = 1696
                    self.evaluate_statement()
                    pass
                elif token in [5]:
                    self.state = 1697
                    self.noe_assign()
                    pass
                elif token in [3]:
                    self.state = 1698
                    self.distance_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1704
            self.match(CnsMRParser.End)
            self.state = 1705
            self.match(CnsMRParser.Loop)
            self.state = 1706
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = CnsMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self.match(CnsMRParser.For)
            self.state = 1709
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1710
            self.match(CnsMRParser.In_CF)
            self.state = 1711
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1730
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,192,self._ctx)
            if la_ == 1:
                self.state = 1715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==247:
                    self.state = 1712
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1717
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1721
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==248:
                    self.state = 1718
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==250:
                    self.state = 1724
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1732
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1733
            self.match(CnsMRParser.Loop)
            self.state = 1734
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 844424930132000) != 0) or _la==128:
                self.state = 1738
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [128]:
                    self.state = 1735
                    self.evaluate_statement()
                    pass
                elif token in [5]:
                    self.state = 1736
                    self.dihedral_assign()
                    pass
                elif token in [48, 49]:
                    self.state = 1737
                    self.dihedral_angle_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1742
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1743
            self.match(CnsMRParser.End)
            self.state = 1744
            self.match(CnsMRParser.Loop)
            self.state = 1745
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign_loop" ):
                listener.enterSani_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign_loop" ):
                listener.exitSani_assign_loop(self)




    def sani_assign_loop(self):

        localctx = CnsMRParser.Sani_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_sani_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1747
            self.match(CnsMRParser.For)
            self.state = 1748
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1749
            self.match(CnsMRParser.In_CF)
            self.state = 1750
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1769
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==247:
                    self.state = 1751
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1756
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==248:
                    self.state = 1757
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1762
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==250:
                    self.state = 1763
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1768
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1771
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1772
            self.match(CnsMRParser.Loop)
            self.state = 1773
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1779
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5 or _la==59 or _la==128:
                self.state = 1777
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [128]:
                    self.state = 1774
                    self.evaluate_statement()
                    pass
                elif token in [5]:
                    self.state = 1775
                    self.sani_assign()
                    pass
                elif token in [59]:
                    self.state = 1776
                    self.rdc_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1781
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1782
            self.match(CnsMRParser.End)
            self.state = 1783
            self.match(CnsMRParser.Loop)
            self.state = 1784
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign_loop" ):
                listener.enterCoup_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign_loop" ):
                listener.exitCoup_assign_loop(self)




    def coup_assign_loop(self):

        localctx = CnsMRParser.Coup_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_coup_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1786
            self.match(CnsMRParser.For)
            self.state = 1787
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1788
            self.match(CnsMRParser.In_CF)
            self.state = 1789
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1793
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==247:
                    self.state = 1790
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1795
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==248:
                    self.state = 1796
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1801
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==250:
                    self.state = 1802
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1807
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1810
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1811
            self.match(CnsMRParser.Loop)
            self.state = 1812
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5 or _la==62 or _la==128:
                self.state = 1816
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [128]:
                    self.state = 1813
                    self.evaluate_statement()
                    pass
                elif token in [5]:
                    self.state = 1814
                    self.coup_assign()
                    pass
                elif token in [62]:
                    self.state = 1815
                    self.coupling_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1820
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1821
            self.match(CnsMRParser.End)
            self.state = 1822
            self.match(CnsMRParser.Loop)
            self.state = 1823
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign_loop" ):
                listener.enterCarbon_shift_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign_loop" ):
                listener.exitCarbon_shift_assign_loop(self)




    def carbon_shift_assign_loop(self):

        localctx = CnsMRParser.Carbon_shift_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_carbon_shift_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1825
            self.match(CnsMRParser.For)
            self.state = 1826
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1827
            self.match(CnsMRParser.In_CF)
            self.state = 1828
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1847
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 1832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==247:
                    self.state = 1829
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1834
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==248:
                    self.state = 1835
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1840
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1844
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==250:
                    self.state = 1841
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1846
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1849
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1850
            self.match(CnsMRParser.Loop)
            self.state = 1851
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==5 or _la==63 or _la==128:
                self.state = 1855
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [128]:
                    self.state = 1852
                    self.evaluate_statement()
                    pass
                elif token in [5]:
                    self.state = 1853
                    self.carbon_shift_assign()
                    pass
                elif token in [63]:
                    self.state = 1854
                    self.carbon_shift_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1859
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1860
            self.match(CnsMRParser.End)
            self.state = 1861
            self.match(CnsMRParser.Loop)
            self.state = 1862
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_group_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def plane_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_groupContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_groupContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_group_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_group_loop" ):
                listener.enterPlane_group_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_group_loop" ):
                listener.exitPlane_group_loop(self)




    def plane_group_loop(self):

        localctx = CnsMRParser.Plane_group_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_plane_group_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1864
            self.match(CnsMRParser.For)
            self.state = 1865
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1866
            self.match(CnsMRParser.In_CF)
            self.state = 1867
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 1871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==247:
                    self.state = 1868
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1873
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==248:
                    self.state = 1874
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==250:
                    self.state = 1880
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1885
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1888
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1889
            self.match(CnsMRParser.Loop)
            self.state = 1890
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1896
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & 13792273858822144) != 0) or _la==128:
                self.state = 1894
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [128]:
                    self.state = 1891
                    self.evaluate_statement()
                    pass
                elif token in [53]:
                    self.state = 1892
                    self.plane_group()
                    pass
                elif token in [48, 52]:
                    self.state = 1893
                    self.plane_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1898
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1899
            self.match(CnsMRParser.End)
            self.state = 1900
            self.match(CnsMRParser.Loop)
            self.state = 1901
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[55] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




