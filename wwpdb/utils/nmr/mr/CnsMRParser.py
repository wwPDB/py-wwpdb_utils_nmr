# Generated from CnsMRParser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00dc")
        buf.write("\u05c6\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\7\2\u0094\n\2\f\2\16\2\u0097\13\2\3\2\3\2\3\3\3\3\7\3")
        buf.write("\u009d\n\3\f\3\16\3\u00a0\13\3\3\3\3\3\3\4\5\4\u00a5\n")
        buf.write("\4\3\4\3\4\7\4\u00a9\n\4\f\4\16\4\u00ac\13\4\3\4\3\4\3")
        buf.write("\5\5\5\u00b1\n\5\3\5\3\5\7\5\u00b5\n\5\f\5\16\5\u00b8")
        buf.write("\13\5\3\5\3\5\3\6\5\6\u00bd\n\6\3\6\3\6\7\6\u00c1\n\6")
        buf.write("\f\6\16\6\u00c4\13\6\3\6\3\6\3\7\3\7\7\7\u00ca\n\7\f\7")
        buf.write("\16\7\u00cd\13\7\3\7\3\7\3\b\3\b\7\b\u00d3\n\b\f\b\16")
        buf.write("\b\u00d6\13\b\3\b\3\b\3\t\3\t\7\t\u00dc\n\t\f\t\16\t\u00df")
        buf.write("\13\t\3\t\3\t\3\n\3\n\7\n\u00e5\n\n\f\n\16\n\u00e8\13")
        buf.write("\n\3\n\3\n\3\13\3\13\7\13\u00ee\n\13\f\13\16\13\u00f1")
        buf.write("\13\13\3\13\3\13\3\f\3\f\7\f\u00f7\n\f\f\f\16\f\u00fa")
        buf.write("\13\f\3\f\3\f\3\r\3\r\7\r\u0100\n\r\f\r\16\r\u0103\13")
        buf.write("\r\3\r\3\r\3\16\3\16\7\16\u0109\n\16\f\16\16\16\u010c")
        buf.write("\13\16\3\16\3\16\3\17\3\17\5\17\u0112\n\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\5\17\u0121\n\17\3\17\3\17\3\17\5\17\u0126\n\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\5\17\u012d\n\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\5\17\u0136\n\17\3\17\3\17\3\17\5\17\u013b")
        buf.write("\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u0144\n")
        buf.write("\17\f\17\16\17\u0147\13\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\5\17\u0152\n\17\3\17\3\17\3\17\3\17")
        buf.write("\5\17\u0158\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\5\17\u0165\n\17\3\17\3\17\3\17\7\17")
        buf.write("\u016a\n\17\f\17\16\17\u016d\13\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\7\17\u0185\n\17\f")
        buf.write("\17\16\17\u0188\13\17\3\17\3\17\3\17\5\17\u018d\n\17\3")
        buf.write("\17\5\17\u0190\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20")
        buf.write("\7\20\u0199\n\20\f\20\16\20\u019c\13\20\3\20\3\20\3\20")
        buf.write("\3\20\7\20\u01a2\n\20\f\20\16\20\u01a5\13\20\3\21\3\21")
        buf.write("\5\21\u01a9\n\21\3\21\3\21\3\21\5\21\u01ae\n\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\5\21\u01b5\n\21\3\22\3\22\5\22\u01b9")
        buf.write("\n\22\3\22\3\22\3\22\5\22\u01be\n\22\3\22\3\22\3\22\5")
        buf.write("\22\u01c3\n\22\3\22\3\22\3\22\5\22\u01c8\n\22\3\22\3\22")
        buf.write("\3\22\5\22\u01cd\n\22\3\22\3\22\3\22\5\22\u01d2\n\22\3")
        buf.write("\22\3\22\3\22\5\22\u01d7\n\22\3\22\5\22\u01da\n\22\3\23")
        buf.write("\3\23\3\23\5\23\u01df\n\23\3\23\3\23\3\23\5\23\u01e4\n")
        buf.write("\23\3\23\3\23\3\23\5\23\u01e9\n\23\3\23\3\23\3\23\3\23")
        buf.write("\5\23\u01ef\n\23\3\23\3\23\5\23\u01f3\n\23\3\24\3\24\3")
        buf.write("\24\3\24\3\24\3\24\3\24\3\24\3\24\3\24\3\25\3\25\7\25")
        buf.write("\u0201\n\25\f\25\16\25\u0204\13\25\3\25\3\25\3\25\5\25")
        buf.write("\u0209\n\25\3\26\3\26\5\26\u020d\n\26\3\26\3\26\3\26\5")
        buf.write("\26\u0212\n\26\3\26\5\26\u0215\n\26\3\27\3\27\5\27\u0219")
        buf.write("\n\27\3\27\3\27\3\27\5\27\u021e\n\27\3\27\3\27\3\27\5")
        buf.write("\27\u0223\n\27\3\27\3\27\5\27\u0227\n\27\3\27\3\27\3\27")
        buf.write("\3\27\5\27\u022d\n\27\3\27\3\27\5\27\u0231\n\27\3\27\3")
        buf.write("\27\5\27\u0235\n\27\3\27\5\27\u0238\n\27\5\27\u023a\n")
        buf.write("\27\3\27\3\27\5\27\u023e\n\27\3\30\3\30\3\30\5\30\u0243")
        buf.write("\n\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30\5\30\u024d")
        buf.write("\n\30\3\30\3\30\3\30\5\30\u0252\n\30\3\30\3\30\3\30\5")
        buf.write("\30\u0257\n\30\3\30\3\30\3\30\3\30\3\30\5\30\u025e\n\30")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31")
        buf.write("\u026a\n\31\3\32\3\32\3\32\5\32\u026f\n\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u027a\n\32\3\32")
        buf.write("\3\32\3\32\3\32\5\32\u0280\n\32\3\32\3\32\5\32\u0284\n")
        buf.write("\32\3\32\3\32\3\32\5\32\u0289\n\32\3\32\3\32\3\32\5\32")
        buf.write("\u028e\n\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0297")
        buf.write("\n\32\3\32\5\32\u029a\n\32\3\32\5\32\u029d\n\32\3\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u02a9")
        buf.write("\n\33\3\33\3\33\3\33\3\33\3\33\5\33\u02b0\n\33\3\34\3")
        buf.write("\34\3\34\5\34\u02b5\n\34\3\34\3\34\3\34\3\34\3\34\3\34")
        buf.write("\3\34\3\34\3\34\3\34\5\34\u02c1\n\34\3\34\3\34\3\34\5")
        buf.write("\34\u02c6\n\34\3\34\3\34\3\34\5\34\u02cb\n\34\3\34\3\34")
        buf.write("\3\34\5\34\u02d0\n\34\3\34\3\34\3\34\5\34\u02d5\n\34\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u02de\n\34\3\35")
        buf.write("\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\5\37\u02f9\n\37\3\37\3\37\3\37\5\37\u02fe\n")
        buf.write("\37\3\37\3\37\3\37\3\37\5\37\u0304\n\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3\37\3\37\5\37\u030e\n\37\3\37\5\37\u0311")
        buf.write("\n\37\3\37\3\37\3\37\5\37\u0316\n\37\3 \3 \3 \5 \u031b")
        buf.write("\n \3 \3 \5 \u031f\n \3!\3!\3!\3!\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\5\"\u032b\n\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3%\3%")
        buf.write("\3&\3&\3&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\5\'\u0343\n")
        buf.write("\'\3(\3(\3(\3)\3)\3)\5)\u034b\n)\3)\3)\3)\3)\3)\5)\u0352")
        buf.write("\n)\3)\5)\u0355\n)\3)\5)\u0358\n)\3)\3)\3)\5)\u035d\n")
        buf.write(")\3)\3)\3)\5)\u0362\n)\3)\3)\3)\5)\u0367\n)\3)\3)\3)\3")
        buf.write(")\3)\3)\3)\3)\5)\u0371\n)\3)\3)\3)\5)\u0376\n)\3)\3)\3")
        buf.write(")\5)\u037b\n)\3)\3)\5)\u037f\n)\3)\3)\3)\3)\3)\3)\3)\5")
        buf.write(")\u0388\n)\3)\5)\u038b\n)\3)\3)\3)\3)\3)\5)\u0392\n)\3")
        buf.write(")\5)\u0395\n)\3)\5)\u0398\n)\3)\5)\u039b\n)\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\5*\u03a7\n*\3*\3*\3*\3*\3*\5*\u03ae")
        buf.write("\n*\3*\3*\3*\3*\3*\5*\u03b5\n*\3+\3+\3+\5+\u03ba\n+\3")
        buf.write("+\3+\3+\3+\3+\3+\3+\3+\3+\3+\5+\u03c6\n+\3+\3+\3+\5+\u03cb")
        buf.write("\n+\3+\3+\3+\5+\u03d0\n+\3+\3+\3+\3+\3+\5+\u03d7\n+\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3-\3-\3-\5-\u03e6\n-\3-\3")
        buf.write("-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u03f4\n-\3-\3-\3-\5")
        buf.write("-\u03f9\n-\3-\3-\3-\5-\u03fe\n-\3-\3-\3-\3-\3-\5-\u0405")
        buf.write("\n-\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3/\3/\3/\5/\u0416")
        buf.write("\n/\3/\3/\3/\5/\u041b\n/\3/\3/\3/\3/\3/\3/\3/\5/\u0424")
        buf.write("\n/\3/\3/\3/\5/\u0429\n/\3/\3/\3/\5/\u042e\n/\3/\3/\3")
        buf.write("/\5/\u0433\n/\3/\3/\3/\3/\3/\3/\3/\5/\u043c\n/\3/\5/\u043f")
        buf.write("\n/\3/\3/\3/\3/\3/\3/\5/\u0447\n/\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\5\60\u0456")
        buf.write("\n\60\3\61\3\61\3\61\3\61\3\62\3\62\3\62\7\62\u045f\n")
        buf.write("\62\f\62\16\62\u0462\13\62\3\63\3\63\3\63\7\63\u0467\n")
        buf.write("\63\f\63\16\63\u046a\13\63\3\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0478\n\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\5\64\u0488\n\64\5\64\u048a\n\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\5\64\u049d\n\64\5\64\u049f\n\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u04a8\n\64\3\64")
        buf.write("\3\64\5\64\u04ac\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3")
        buf.write("\64\3\64\3\64\5\64\u04b7\n\64\3\64\3\64\5\64\u04bb\n\64")
        buf.write("\3\64\3\64\5\64\u04bf\n\64\3\64\5\64\u04c2\n\64\3\64\3")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64")
        buf.write("\u04cf\n\64\5\64\u04d1\n\64\3\64\3\64\3\64\3\64\3\64\5")
        buf.write("\64\u04d8\n\64\5\64\u04da\n\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\5\64\u04e1\n\64\3\64\3\64\3\64\5\64\u04e6\n\64\5\64\u04e8")
        buf.write("\n\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\3\64\3\64\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u04fc\n")
        buf.write("\64\3\64\3\64\3\64\3\64\3\64\3\64\7\64\u0504\n\64\f\64")
        buf.write("\16\64\u0507\13\64\3\65\3\65\3\66\3\66\3\67\3\67\38\3")
        buf.write("8\39\39\39\79\u0514\n9\f9\169\u0517\139\39\59\u051a\n")
        buf.write("9\59\u051c\n9\39\39\79\u0520\n9\f9\169\u0523\139\39\3")
        buf.write("9\3:\3:\3:\3:\3;\3;\3;\3;\3;\3;\5;\u0531\n;\3<\3<\3<\5")
        buf.write("<\u0536\n<\3=\3=\3=\7=\u053b\n=\f=\16=\u053e\13=\3>\3")
        buf.write(">\3>\3>\3>\3>\5>\u0546\n>\3?\3?\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\7?\u0584\n")
        buf.write("?\f?\16?\u0587\13?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\7?\u0595\n?\f?\16?\u0598\13?\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3")
        buf.write("?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\5?\u05bf\n?\3@\3@\3")
        buf.write("@\3@\3@\3@\5\u0145\u016b\u0186\3fA\2\4\6\b\n\f\16\20\22")
        buf.write("\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPR")
        buf.write("TVXZ\\^`bdfhjlnprtvxz|~\2\b\3\2\u008b\u008c\4\2\u0087")
        buf.write("\u0087\u008d\u008d\4\2\u0087\u0087\u0089\u0089\3\2}~\3")
        buf.write("\2\u00b0\u00b4\3\2\u00d4\u00da\2\u06ea\2\u0095\3\2\2\2")
        buf.write("\4\u009a\3\2\2\2\6\u00a4\3\2\2\2\b\u00b0\3\2\2\2\n\u00bc")
        buf.write("\3\2\2\2\f\u00c7\3\2\2\2\16\u00d0\3\2\2\2\20\u00d9\3\2")
        buf.write("\2\2\22\u00e2\3\2\2\2\24\u00eb\3\2\2\2\26\u00f4\3\2\2")
        buf.write("\2\30\u00fd\3\2\2\2\32\u0106\3\2\2\2\34\u018f\3\2\2\2")
        buf.write("\36\u0191\3\2\2\2 \u01b4\3\2\2\2\"\u01d9\3\2\2\2$\u01f2")
        buf.write("\3\2\2\2&\u01f4\3\2\2\2(\u0208\3\2\2\2*\u0214\3\2\2\2")
        buf.write(",\u023d\3\2\2\2.\u025d\3\2\2\2\60\u025f\3\2\2\2\62\u029c")
        buf.write("\3\2\2\2\64\u029e\3\2\2\2\66\u02dd\3\2\2\28\u02df\3\2")
        buf.write("\2\2:\u02e8\3\2\2\2<\u0315\3\2\2\2>\u0317\3\2\2\2@\u0320")
        buf.write("\3\2\2\2B\u0324\3\2\2\2D\u032e\3\2\2\2F\u0331\3\2\2\2")
        buf.write("H\u0334\3\2\2\2J\u0337\3\2\2\2L\u033a\3\2\2\2N\u0344\3")
        buf.write("\2\2\2P\u039a\3\2\2\2R\u039c\3\2\2\2T\u03d6\3\2\2\2V\u03d8")
        buf.write("\3\2\2\2X\u0404\3\2\2\2Z\u0406\3\2\2\2\\\u0446\3\2\2\2")
        buf.write("^\u0448\3\2\2\2`\u0457\3\2\2\2b\u045b\3\2\2\2d\u0463\3")
        buf.write("\2\2\2f\u04fb\3\2\2\2h\u0508\3\2\2\2j\u050a\3\2\2\2l\u050c")
        buf.write("\3\2\2\2n\u050e\3\2\2\2p\u0510\3\2\2\2r\u0526\3\2\2\2")
        buf.write("t\u0530\3\2\2\2v\u0532\3\2\2\2x\u0537\3\2\2\2z\u0545\3")
        buf.write("\2\2\2|\u05be\3\2\2\2~\u05c0\3\2\2\2\u0080\u0094\5\4\3")
        buf.write("\2\u0081\u0094\5\6\4\2\u0082\u0094\5\b\5\2\u0083\u0094")
        buf.write("\5\n\6\2\u0084\u0094\5\f\7\2\u0085\u0094\5\16\b\2\u0086")
        buf.write("\u0094\5\20\t\2\u0087\u0094\5\22\n\2\u0088\u0094\5\24")
        buf.write("\13\2\u0089\u0094\5\26\f\2\u008a\u0094\5\30\r\2\u008b")
        buf.write("\u0094\5\32\16\2\u008c\u0094\5p9\2\u008d\u0094\5r:\2\u008e")
        buf.write("\u0094\5\36\20\2\u008f\u0094\5&\24\2\u0090\u0094\5\60")
        buf.write("\31\2\u0091\u0094\5(\25\2\u0092\u0094\5\64\33\2\u0093")
        buf.write("\u0080\3\2\2\2\u0093\u0081\3\2\2\2\u0093\u0082\3\2\2\2")
        buf.write("\u0093\u0083\3\2\2\2\u0093\u0084\3\2\2\2\u0093\u0085\3")
        buf.write("\2\2\2\u0093\u0086\3\2\2\2\u0093\u0087\3\2\2\2\u0093\u0088")
        buf.write("\3\2\2\2\u0093\u0089\3\2\2\2\u0093\u008a\3\2\2\2\u0093")
        buf.write("\u008b\3\2\2\2\u0093\u008c\3\2\2\2\u0093\u008d\3\2\2\2")
        buf.write("\u0093\u008e\3\2\2\2\u0093\u008f\3\2\2\2\u0093\u0090\3")
        buf.write("\2\2\2\u0093\u0091\3\2\2\2\u0093\u0092\3\2\2\2\u0094\u0097")
        buf.write("\3\2\2\2\u0095\u0093\3\2\2\2\u0095\u0096\3\2\2\2\u0096")
        buf.write("\u0098\3\2\2\2\u0097\u0095\3\2\2\2\u0098\u0099\7\2\2\3")
        buf.write("\u0099\3\3\2\2\2\u009a\u009e\7\5\2\2\u009b\u009d\5\34")
        buf.write("\17\2\u009c\u009b\3\2\2\2\u009d\u00a0\3\2\2\2\u009e\u009c")
        buf.write("\3\2\2\2\u009e\u009f\3\2\2\2\u009f\u00a1\3\2\2\2\u00a0")
        buf.write("\u009e\3\2\2\2\u00a1\u00a2\7\4\2\2\u00a2\5\3\2\2\2\u00a3")
        buf.write("\u00a5\7\62\2\2\u00a4\u00a3\3\2\2\2\u00a4\u00a5\3\2\2")
        buf.write("\2\u00a5\u00a6\3\2\2\2\u00a6\u00aa\7\63\2\2\u00a7\u00a9")
        buf.write("\5$\23\2\u00a8\u00a7\3\2\2\2\u00a9\u00ac\3\2\2\2\u00aa")
        buf.write("\u00a8\3\2\2\2\u00aa\u00ab\3\2\2\2\u00ab\u00ad\3\2\2\2")
        buf.write("\u00ac\u00aa\3\2\2\2\u00ad\u00ae\7\4\2\2\u00ae\7\3\2\2")
        buf.write("\2\u00af\u00b1\7\62\2\2\u00b0\u00af\3\2\2\2\u00b0\u00b1")
        buf.write("\3\2\2\2\u00b1\u00b2\3\2\2\2\u00b2\u00b6\7\66\2\2\u00b3")
        buf.write("\u00b5\5(\25\2\u00b4\u00b3\3\2\2\2\u00b5\u00b8\3\2\2\2")
        buf.write("\u00b6\u00b4\3\2\2\2\u00b6\u00b7\3\2\2\2\u00b7\u00b9\3")
        buf.write("\2\2\2\u00b8\u00b6\3\2\2\2\u00b9\u00ba\7\4\2\2\u00ba\t")
        buf.write("\3\2\2\2\u00bb\u00bd\7\62\2\2\u00bc\u00bb\3\2\2\2\u00bc")
        buf.write("\u00bd\3\2\2\2\u00bd\u00be\3\2\2\2\u00be\u00c2\7:\2\2")
        buf.write("\u00bf\u00c1\5,\27\2\u00c0\u00bf\3\2\2\2\u00c1\u00c4\3")
        buf.write("\2\2\2\u00c2\u00c0\3\2\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c5")
        buf.write("\3\2\2\2\u00c4\u00c2\3\2\2\2\u00c5\u00c6\7\4\2\2\u00c6")
        buf.write("\13\3\2\2\2\u00c7\u00cb\7=\2\2\u00c8\u00ca\5.\30\2\u00c9")
        buf.write("\u00c8\3\2\2\2\u00ca\u00cd\3\2\2\2\u00cb\u00c9\3\2\2\2")
        buf.write("\u00cb\u00cc\3\2\2\2\u00cc\u00ce\3\2\2\2\u00cd\u00cb\3")
        buf.write("\2\2\2\u00ce\u00cf\7\4\2\2\u00cf\r\3\2\2\2\u00d0\u00d4")
        buf.write("\7@\2\2\u00d1\u00d3\5\62\32\2\u00d2\u00d1\3\2\2\2\u00d3")
        buf.write("\u00d6\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d4\u00d5\3\2\2\2")
        buf.write("\u00d5\u00d7\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d7\u00d8\7")
        buf.write("\4\2\2\u00d8\17\3\2\2\2\u00d9\u00dd\7A\2\2\u00da\u00dc")
        buf.write("\5\66\34\2\u00db\u00da\3\2\2\2\u00dc\u00df\3\2\2\2\u00dd")
        buf.write("\u00db\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00e0\3\2\2\2")
        buf.write("\u00df\u00dd\3\2\2\2\u00e0\u00e1\7\4\2\2\u00e1\21\3\2")
        buf.write("\2\2\u00e2\u00e6\7G\2\2\u00e3\u00e5\5<\37\2\u00e4\u00e3")
        buf.write("\3\2\2\2\u00e5\u00e8\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6")
        buf.write("\u00e7\3\2\2\2\u00e7\u00e9\3\2\2\2\u00e8\u00e6\3\2\2\2")
        buf.write("\u00e9\u00ea\7\4\2\2\u00ea\23\3\2\2\2\u00eb\u00ef\7P\2")
        buf.write("\2\u00ec\u00ee\5P)\2\u00ed\u00ec\3\2\2\2\u00ee\u00f1\3")
        buf.write("\2\2\2\u00ef\u00ed\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\u00f2")
        buf.write("\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f2\u00f3\7\4\2\2\u00f3")
        buf.write("\25\3\2\2\2\u00f4\u00f8\7U\2\2\u00f5\u00f7\5T+\2\u00f6")
        buf.write("\u00f5\3\2\2\2\u00f7\u00fa\3\2\2\2\u00f8\u00f6\3\2\2\2")
        buf.write("\u00f8\u00f9\3\2\2\2\u00f9\u00fb\3\2\2\2\u00fa\u00f8\3")
        buf.write("\2\2\2\u00fb\u00fc\7\4\2\2\u00fc\27\3\2\2\2\u00fd\u0101")
        buf.write("\7V\2\2\u00fe\u0100\5X-\2\u00ff\u00fe\3\2\2\2\u0100\u0103")
        buf.write("\3\2\2\2\u0101\u00ff\3\2\2\2\u0101\u0102\3\2\2\2\u0102")
        buf.write("\u0104\3\2\2\2\u0103\u0101\3\2\2\2\u0104\u0105\7\4\2\2")
        buf.write("\u0105\31\3\2\2\2\u0106\u010a\7W\2\2\u0107\u0109\5\\/")
        buf.write("\2\u0108\u0107\3\2\2\2\u0109\u010c\3\2\2\2\u010a\u0108")
        buf.write("\3\2\2\2\u010a\u010b\3\2\2\2\u010b\u010d\3\2\2\2\u010c")
        buf.write("\u010a\3\2\2\2\u010d\u010e\7\4\2\2\u010e\33\3\2\2\2\u010f")
        buf.write("\u0111\7\6\2\2\u0110\u0112\7\u0091\2\2\u0111\u0110\3\2")
        buf.write("\2\2\u0111\u0112\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u0190")
        buf.write("\7\u00a6\2\2\u0114\u0190\5\36\20\2\u0115\u0116\7\b\2\2")
        buf.write("\u0116\u0117\7\u008b\2\2\u0117\u0190\5l\67\2\u0118\u0119")
        buf.write("\7\t\2\2\u0119\u011a\7\u00a1\2\2\u011a\u0190\7\u00a0\2")
        buf.write("\2\u011b\u011c\7\n\2\2\u011c\u011d\7\u008b\2\2\u011d\u0190")
        buf.write("\5l\67\2\u011e\u0120\7\13\2\2\u011f\u0121\7\u0091\2\2")
        buf.write("\u0120\u011f\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u0122\3")
        buf.write("\2\2\2\u0122\u0190\5l\67\2\u0123\u0125\7\f\2\2\u0124\u0126")
        buf.write("\7\u0091\2\2\u0125\u0124\3\2\2\2\u0125\u0126\3\2\2\2\u0126")
        buf.write("\u0127\3\2\2\2\u0127\u0190\7\u008b\2\2\u0128\u0129\7\r")
        buf.write("\2\2\u0129\u0190\7\u008b\2\2\u012a\u012c\7\16\2\2\u012b")
        buf.write("\u012d\7\u0091\2\2\u012c\u012b\3\2\2\2\u012c\u012d\3\2")
        buf.write("\2\2\u012d\u012e\3\2\2\2\u012e\u0190\7\u0087\2\2\u012f")
        buf.write("\u0130\7\17\2\2\u0130\u0190\7%\2\2\u0131\u0132\7\17\2")
        buf.write("\2\u0132\u0133\7&\2\2\u0133\u0135\7\'\2\2\u0134\u0136")
        buf.write("\7\u0091\2\2\u0135\u0134\3\2\2\2\u0135\u0136\3\2\2\2\u0136")
        buf.write("\u0137\3\2\2\2\u0137\u0138\5l\67\2\u0138\u013a\7(\2\2")
        buf.write("\u0139\u013b\7\u0091\2\2\u013a\u0139\3\2\2\2\u013a\u013b")
        buf.write("\3\2\2\2\u013b\u013c\3\2\2\2\u013c\u013d\5l\67\2\u013d")
        buf.write("\u0190\3\2\2\2\u013e\u013f\7\20\2\2\u013f\u0140\7\u008b")
        buf.write("\2\2\u0140\u0141\7\u008b\2\2\u0141\u0190\5l\67\2\u0142")
        buf.write("\u0144\7\21\2\2\u0143\u0142\3\2\2\2\u0144\u0147\3\2\2")
        buf.write("\2\u0145\u0146\3\2\2\2\u0145\u0143\3\2\2\2\u0146\u0148")
        buf.write("\3\2\2\2\u0147\u0145\3\2\2\2\u0148\u0190\7\4\2\2\u0149")
        buf.write("\u014a\7\22\2\2\u014a\u014b\7\u008b\2\2\u014b\u0190\7")
        buf.write("\u0087\2\2\u014c\u014d\7\23\2\2\u014d\u014e\7\u008b\2")
        buf.write("\2\u014e\u0190\7\u0087\2\2\u014f\u0151\7\24\2\2\u0150")
        buf.write("\u0152\7\u0091\2\2\u0151\u0150\3\2\2\2\u0151\u0152\3\2")
        buf.write("\2\2\u0152\u0153\3\2\2\2\u0153\u0190\7\u0087\2\2\u0154")
        buf.write("\u0190\7\25\2\2\u0155\u0157\7\26\2\2\u0156\u0158\7\u0091")
        buf.write("\2\2\u0157\u0156\3\2\2\2\u0157\u0158\3\2\2\2\u0158\u0159")
        buf.write("\3\2\2\2\u0159\u0190\7\u0087\2\2\u015a\u015b\7\27\2\2")
        buf.write("\u015b\u015c\7\u00a4\2\2\u015c\u0190\7\u00a3\2\2\u015d")
        buf.write("\u015e\7\30\2\2\u015e\u015f\5 \21\2\u015f\u0160\7\4\2")
        buf.write("\2\u0160\u0190\3\2\2\2\u0161\u0162\7\31\2\2\u0162\u0164")
        buf.write("\7\33\2\2\u0163\u0165\7\u0091\2\2\u0164\u0163\3\2\2\2")
        buf.write("\u0164\u0165\3\2\2\2\u0165\u0166\3\2\2\2\u0166\u0190\5")
        buf.write("l\67\2\u0167\u016b\7\32\2\2\u0168\u016a\7\u008b\2\2\u0169")
        buf.write("\u0168\3\2\2\2\u016a\u016d\3\2\2\2\u016b\u016c\3\2\2\2")
        buf.write("\u016b\u0169\3\2\2\2\u016c\u016e\3\2\2\2\u016d\u016b\3")
        buf.write("\2\2\2\u016e\u0190\7\4\2\2\u016f\u0190\7\34\2\2\u0170")
        buf.write("\u0171\7\35\2\2\u0171\u0172\7\u008b\2\2\u0172\u0190\5")
        buf.write("l\67\2\u0173\u0174\7\36\2\2\u0174\u0175\7\u008b\2\2\u0175")
        buf.write("\u0190\5l\67\2\u0176\u0177\7\37\2\2\u0177\u0178\7\u008b")
        buf.write("\2\2\u0178\u0190\5l\67\2\u0179\u017a\7 \2\2\u017a\u017b")
        buf.write("\7\u008b\2\2\u017b\u0190\5l\67\2\u017c\u017d\7!\2\2\u017d")
        buf.write("\u017e\7\u008b\2\2\u017e\u0190\5l\67\2\u017f\u0180\7\"")
        buf.write("\2\2\u0180\u0181\7\u008b\2\2\u0181\u0190\5l\67\2\u0182")
        buf.write("\u0186\7#\2\2\u0183\u0185\7\u008b\2\2\u0184\u0183\3\2")
        buf.write("\2\2\u0185\u0188\3\2\2\2\u0186\u0187\3\2\2\2\u0186\u0184")
        buf.write("\3\2\2\2\u0187\u0189\3\2\2\2\u0188\u0186\3\2\2\2\u0189")
        buf.write("\u0190\7\4\2\2\u018a\u018c\7$\2\2\u018b\u018d\7\u0091")
        buf.write("\2\2\u018c\u018b\3\2\2\2\u018c\u018d\3\2\2\2\u018d\u018e")
        buf.write("\3\2\2\2\u018e\u0190\5l\67\2\u018f\u010f\3\2\2\2\u018f")
        buf.write("\u0114\3\2\2\2\u018f\u0115\3\2\2\2\u018f\u0118\3\2\2\2")
        buf.write("\u018f\u011b\3\2\2\2\u018f\u011e\3\2\2\2\u018f\u0123\3")
        buf.write("\2\2\2\u018f\u0128\3\2\2\2\u018f\u012a\3\2\2\2\u018f\u012f")
        buf.write("\3\2\2\2\u018f\u0131\3\2\2\2\u018f\u013e\3\2\2\2\u018f")
        buf.write("\u0145\3\2\2\2\u018f\u0149\3\2\2\2\u018f\u014c\3\2\2\2")
        buf.write("\u018f\u014f\3\2\2\2\u018f\u0154\3\2\2\2\u018f\u0155\3")
        buf.write("\2\2\2\u018f\u015a\3\2\2\2\u018f\u015d\3\2\2\2\u018f\u0161")
        buf.write("\3\2\2\2\u018f\u0167\3\2\2\2\u018f\u016f\3\2\2\2\u018f")
        buf.write("\u0170\3\2\2\2\u018f\u0173\3\2\2\2\u018f\u0176\3\2\2\2")
        buf.write("\u018f\u0179\3\2\2\2\u018f\u017c\3\2\2\2\u018f\u017f\3")
        buf.write("\2\2\2\u018f\u0182\3\2\2\2\u018f\u018a\3\2\2\2\u0190\35")
        buf.write("\3\2\2\2\u0191\u0192\7\7\2\2\u0192\u0193\5`\61\2\u0193")
        buf.write("\u0194\5`\61\2\u0194\u0195\5h\65\2\u0195\u0196\5h\65\2")
        buf.write("\u0196\u019a\5h\65\2\u0197\u0199\5\"\22\2\u0198\u0197")
        buf.write("\3\2\2\2\u0199\u019c\3\2\2\2\u019a\u0198\3\2\2\2\u019a")
        buf.write("\u019b\3\2\2\2\u019b\u01a3\3\2\2\2\u019c\u019a\3\2\2\2")
        buf.write("\u019d\u019e\7\u0082\2\2\u019e\u019f\5`\61\2\u019f\u01a0")
        buf.write("\5`\61\2\u01a0\u01a2\3\2\2\2\u01a1\u019d\3\2\2\2\u01a2")
        buf.write("\u01a5\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a3\u01a4\3\2\2\2")
        buf.write("\u01a4\37\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a6\u01a8\7)\2")
        buf.write("\2\u01a7\u01a9\7\u0091\2\2\u01a8\u01a7\3\2\2\2\u01a8\u01a9")
        buf.write("\3\2\2\2\u01a9\u01aa\3\2\2\2\u01aa\u01b5\5l\67\2\u01ab")
        buf.write("\u01ad\7*\2\2\u01ac\u01ae\7\u0091\2\2\u01ad\u01ac\3\2")
        buf.write("\2\2\u01ad\u01ae\3\2\2\2\u01ae\u01af\3\2\2\2\u01af\u01b5")
        buf.write("\5l\67\2\u01b0\u01b1\7+\2\2\u01b1\u01b5\5`\61\2\u01b2")
        buf.write("\u01b3\7,\2\2\u01b3\u01b5\5`\61\2\u01b4\u01a6\3\2\2\2")
        buf.write("\u01b4\u01ab\3\2\2\2\u01b4\u01b0\3\2\2\2\u01b4\u01b2\3")
        buf.write("\2\2\2\u01b5!\3\2\2\2\u01b6\u01b8\7-\2\2\u01b7\u01b9\7")
        buf.write("\u0091\2\2\u01b8\u01b7\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9")
        buf.write("\u01ba\3\2\2\2\u01ba\u01da\5n8\2\u01bb\u01bd\7.\2\2\u01bc")
        buf.write("\u01be\7\u0091\2\2\u01bd\u01bc\3\2\2\2\u01bd\u01be\3\2")
        buf.write("\2\2\u01be\u01bf\3\2\2\2\u01bf\u01da\5n8\2\u01c0\u01c2")
        buf.write("\79\2\2\u01c1\u01c3\7\u0091\2\2\u01c2\u01c1\3\2\2\2\u01c2")
        buf.write("\u01c3\3\2\2\2\u01c3\u01c4\3\2\2\2\u01c4\u01da\5n8\2\u01c5")
        buf.write("\u01c7\7/\2\2\u01c6\u01c8\7\u0091\2\2\u01c7\u01c6\3\2")
        buf.write("\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01da")
        buf.write("\5n8\2\u01ca\u01cc\7\60\2\2\u01cb\u01cd\7\u0091\2\2\u01cc")
        buf.write("\u01cb\3\2\2\2\u01cc\u01cd\3\2\2\2\u01cd\u01ce\3\2\2\2")
        buf.write("\u01ce\u01da\5n8\2\u01cf\u01d1\7\61\2\2\u01d0\u01d2\7")
        buf.write("\u0091\2\2\u01d1\u01d0\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2")
        buf.write("\u01d3\3\2\2\2\u01d3\u01da\5n8\2\u01d4\u01d6\7\16\2\2")
        buf.write("\u01d5\u01d7\7\u0091\2\2\u01d6\u01d5\3\2\2\2\u01d6\u01d7")
        buf.write("\3\2\2\2\u01d7\u01d8\3\2\2\2\u01d8\u01da\5n8\2\u01d9\u01b6")
        buf.write("\3\2\2\2\u01d9\u01bb\3\2\2\2\u01d9\u01c0\3\2\2\2\u01d9")
        buf.write("\u01c5\3\2\2\2\u01d9\u01ca\3\2\2\2\u01d9\u01cf\3\2\2\2")
        buf.write("\u01d9\u01d4\3\2\2\2\u01da#\3\2\2\2\u01db\u01f3\5&\24")
        buf.write("\2\u01dc\u01de\7\16\2\2\u01dd\u01df\7\u0091\2\2\u01de")
        buf.write("\u01dd\3\2\2\2\u01de\u01df\3\2\2\2\u01df\u01e0\3\2\2\2")
        buf.write("\u01e0\u01f3\7\u0087\2\2\u01e1\u01e3\7\64\2\2\u01e2\u01e4")
        buf.write("\7\u0091\2\2\u01e3\u01e2\3\2\2\2\u01e3\u01e4\3\2\2\2\u01e4")
        buf.write("\u01e5\3\2\2\2\u01e5\u01f3\7\u0087\2\2\u01e6\u01e8\7\26")
        buf.write("\2\2\u01e7\u01e9\7\u0091\2\2\u01e8\u01e7\3\2\2\2\u01e8")
        buf.write("\u01e9\3\2\2\2\u01e9\u01ea\3\2\2\2\u01ea\u01f3\7\u0087")
        buf.write("\2\2\u01eb\u01f3\7\34\2\2\u01ec\u01ee\7\36\2\2\u01ed\u01ef")
        buf.write("\7\u0091\2\2\u01ee\u01ed\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef")
        buf.write("\u01f0\3\2\2\2\u01f0\u01f3\5l\67\2\u01f1\u01f3\7\65\2")
        buf.write("\2\u01f2\u01db\3\2\2\2\u01f2\u01dc\3\2\2\2\u01f2\u01e1")
        buf.write("\3\2\2\2\u01f2\u01e6\3\2\2\2\u01f2\u01eb\3\2\2\2\u01f2")
        buf.write("\u01ec\3\2\2\2\u01f2\u01f1\3\2\2\2\u01f3%\3\2\2\2\u01f4")
        buf.write("\u01f5\7\7\2\2\u01f5\u01f6\5`\61\2\u01f6\u01f7\5`\61\2")
        buf.write("\u01f7\u01f8\5`\61\2\u01f8\u01f9\5`\61\2\u01f9\u01fa\5")
        buf.write("h\65\2\u01fa\u01fb\5h\65\2\u01fb\u01fc\5h\65\2\u01fc\u01fd")
        buf.write("\7\u0087\2\2\u01fd\'\3\2\2\2\u01fe\u0202\7\67\2\2\u01ff")
        buf.write("\u0201\5*\26\2\u0200\u01ff\3\2\2\2\u0201\u0204\3\2\2\2")
        buf.write("\u0202\u0200\3\2\2\2\u0202\u0203\3\2\2\2\u0203\u0205\3")
        buf.write("\2\2\2\u0204\u0202\3\2\2\2\u0205\u0209\7\4\2\2\u0206\u0209")
        buf.write("\7%\2\2\u0207\u0209\7\65\2\2\u0208\u01fe\3\2\2\2\u0208")
        buf.write("\u0206\3\2\2\2\u0208\u0207\3\2\2\2\u0209)\3\2\2\2\u020a")
        buf.write("\u020c\78\2\2\u020b\u020d\7\u0091\2\2\u020c\u020b\3\2")
        buf.write("\2\2\u020c\u020d\3\2\2\2\u020d\u020e\3\2\2\2\u020e\u0215")
        buf.write("\5`\61\2\u020f\u0211\79\2\2\u0210\u0212\7\u0091\2\2\u0211")
        buf.write("\u0210\3\2\2\2\u0211\u0212\3\2\2\2\u0212\u0213\3\2\2\2")
        buf.write("\u0213\u0215\5l\67\2\u0214\u020a\3\2\2\2\u0214\u020f\3")
        buf.write("\2\2\2\u0215+\3\2\2\2\u0216\u0218\7;\2\2\u0217\u0219\7")
        buf.write("\u0091\2\2\u0218\u0217\3\2\2\2\u0218\u0219\3\2\2\2\u0219")
        buf.write("\u021a\3\2\2\2\u021a\u023e\7\u0087\2\2\u021b\u021d\7<")
        buf.write("\2\2\u021c\u021e\7\u0091\2\2\u021d\u021c\3\2\2\2\u021d")
        buf.write("\u021e\3\2\2\2\u021e\u021f\3\2\2\2\u021f\u0239\7\u008e")
        buf.write("\2\2\u0220\u0222\5l\67\2\u0221\u0223\7\u0085\2\2\u0222")
        buf.write("\u0221\3\2\2\2\u0222\u0223\3\2\2\2\u0223\u0224\3\2\2\2")
        buf.write("\u0224\u0226\5l\67\2\u0225\u0227\7\u0085\2\2\u0226\u0225")
        buf.write("\3\2\2\2\u0226\u0227\3\2\2\2\u0227\u0228\3\2\2\2\u0228")
        buf.write("\u0229\5l\67\2\u0229\u023a\3\2\2\2\u022a\u022c\7\u0080")
        buf.write("\2\2\u022b\u022d\7\u0091\2\2\u022c\u022b\3\2\2\2\u022c")
        buf.write("\u022d\3\2\2\2\u022d\u022e\3\2\2\2\u022e\u0230\5`\61\2")
        buf.write("\u022f\u0231\7\u0085\2\2\u0230\u022f\3\2\2\2\u0230\u0231")
        buf.write("\3\2\2\2\u0231\u0237\3\2\2\2\u0232\u0234\7\u0081\2\2\u0233")
        buf.write("\u0235\7\u0091\2\2\u0234\u0233\3\2\2\2\u0234\u0235\3\2")
        buf.write("\2\2\u0235\u0236\3\2\2\2\u0236\u0238\5`\61\2\u0237\u0232")
        buf.write("\3\2\2\2\u0237\u0238\3\2\2\2\u0238\u023a\3\2\2\2\u0239")
        buf.write("\u0220\3\2\2\2\u0239\u022a\3\2\2\2\u023a\u023b\3\2\2\2")
        buf.write("\u023b\u023c\7\u008f\2\2\u023c\u023e\3\2\2\2\u023d\u0216")
        buf.write("\3\2\2\2\u023d\u021b\3\2\2\2\u023e-\3\2\2\2\u023f\u025e")
        buf.write("\5\60\31\2\u0240\u0242\7\f\2\2\u0241\u0243\7\u0091\2\2")
        buf.write("\u0242\u0241\3\2\2\2\u0242\u0243\3\2\2\2\u0243\u0244\3")
        buf.write("\2\2\2\u0244\u025e\7\u008b\2\2\u0245\u0246\7>\2\2\u0246")
        buf.write("\u0247\5l\67\2\u0247\u0248\5l\67\2\u0248\u0249\5l\67\2")
        buf.write("\u0249\u025e\3\2\2\2\u024a\u024c\7?\2\2\u024b\u024d\7")
        buf.write("\u0091\2\2\u024c\u024b\3\2\2\2\u024c\u024d\3\2\2\2\u024d")
        buf.write("\u024e\3\2\2\2\u024e\u025e\5l\67\2\u024f\u0251\7\24\2")
        buf.write("\2\u0250\u0252\7\u0091\2\2\u0251\u0250\3\2\2\2\u0251\u0252")
        buf.write("\3\2\2\2\u0252\u0253\3\2\2\2\u0253\u025e\7\u0087\2\2\u0254")
        buf.write("\u0256\7\27\2\2\u0255\u0257\7\u00a2\2\2\u0256\u0255\3")
        buf.write("\2\2\2\u0256\u0257\3\2\2\2\u0257\u0258\3\2\2\2\u0258\u025e")
        buf.write("\7\u00a3\2\2\u0259\u025a\7\31\2\2\u025a\u025b\7\33\2\2")
        buf.write("\u025b\u025e\5l\67\2\u025c\u025e\7\34\2\2\u025d\u023f")
        buf.write("\3\2\2\2\u025d\u0240\3\2\2\2\u025d\u0245\3\2\2\2\u025d")
        buf.write("\u024a\3\2\2\2\u025d\u024f\3\2\2\2\u025d\u0254\3\2\2\2")
        buf.write("\u025d\u0259\3\2\2\2\u025d\u025c\3\2\2\2\u025e/\3\2\2")
        buf.write("\2\u025f\u0260\7\7\2\2\u0260\u0261\5`\61\2\u0261\u0262")
        buf.write("\5`\61\2\u0262\u0263\5`\61\2\u0263\u0264\5`\61\2\u0264")
        buf.write("\u0265\5`\61\2\u0265\u0266\5`\61\2\u0266\u0267\5h\65\2")
        buf.write("\u0267\u0269\5h\65\2\u0268\u026a\5h\65\2\u0269\u0268\3")
        buf.write("\2\2\2\u0269\u026a\3\2\2\2\u026a\61\3\2\2\2\u026b\u029d")
        buf.write("\5\64\33\2\u026c\u026e\7\f\2\2\u026d\u026f\7\u0091\2\2")
        buf.write("\u026e\u026d\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0270\3")
        buf.write("\2\2\2\u0270\u029d\7\u008b\2\2\u0271\u0272\7>\2\2\u0272")
        buf.write("\u0273\5l\67\2\u0273\u0274\5l\67\2\u0274\u0275\5l\67\2")
        buf.write("\u0275\u0276\5l\67\2\u0276\u029d\3\2\2\2\u0277\u0279\7")
        buf.write("\16\2\2\u0278\u027a\7\u0091\2\2\u0279\u0278\3\2\2\2\u0279")
        buf.write("\u027a\3\2\2\2\u027a\u027b\3\2\2\2\u027b\u029d\7\u0087")
        buf.write("\2\2\u027c\u027d\7?\2\2\u027d\u027f\5l\67\2\u027e\u0280")
        buf.write("\5l\67\2\u027f\u027e\3\2\2\2\u027f\u0280\3\2\2\2\u0280")
        buf.write("\u029d\3\2\2\2\u0281\u0283\7\24\2\2\u0282\u0284\7\u0091")
        buf.write("\2\2\u0283\u0282\3\2\2\2\u0283\u0284\3\2\2\2\u0284\u0285")
        buf.write("\3\2\2\2\u0285\u029d\7\u0087\2\2\u0286\u0288\7\26\2\2")
        buf.write("\u0287\u0289\7\u0091\2\2\u0288\u0287\3\2\2\2\u0288\u0289")
        buf.write("\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u029d\7\u0087\2\2\u028b")
        buf.write("\u028d\7\27\2\2\u028c\u028e\7\u00a2\2\2\u028d\u028c\3")
        buf.write("\2\2\2\u028d\u028e\3\2\2\2\u028e\u028f\3\2\2\2\u028f\u029d")
        buf.write("\7\u00a3\2\2\u0290\u0291\7\31\2\2\u0291\u0292\7\33\2\2")
        buf.write("\u0292\u0299\5l\67\2\u0293\u029a\7[\2\2\u0294\u0296\7")
        buf.write("\f\2\2\u0295\u0297\7\u0091\2\2\u0296\u0295\3\2\2\2\u0296")
        buf.write("\u0297\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u029a\7\u008b")
        buf.write("\2\2\u0299\u0293\3\2\2\2\u0299\u0294\3\2\2\2\u029a\u029d")
        buf.write("\3\2\2\2\u029b\u029d\7\34\2\2\u029c\u026b\3\2\2\2\u029c")
        buf.write("\u026c\3\2\2\2\u029c\u0271\3\2\2\2\u029c\u0277\3\2\2\2")
        buf.write("\u029c\u027c\3\2\2\2\u029c\u0281\3\2\2\2\u029c\u0286\3")
        buf.write("\2\2\2\u029c\u028b\3\2\2\2\u029c\u0290\3\2\2\2\u029c\u029b")
        buf.write("\3\2\2\2\u029d\63\3\2\2\2\u029e\u029f\7\7\2\2\u029f\u02a0")
        buf.write("\5`\61\2\u02a0\u02a1\5`\61\2\u02a1\u02a2\5`\61\2\u02a2")
        buf.write("\u02a8\5`\61\2\u02a3\u02a4\5`\61\2\u02a4\u02a5\5`\61\2")
        buf.write("\u02a5\u02a6\5`\61\2\u02a6\u02a7\5`\61\2\u02a7\u02a9\3")
        buf.write("\2\2\2\u02a8\u02a3\3\2\2\2\u02a8\u02a9\3\2\2\2\u02a9\u02aa")
        buf.write("\3\2\2\2\u02aa\u02ab\5h\65\2\u02ab\u02af\5h\65\2\u02ac")
        buf.write("\u02ad\5h\65\2\u02ad\u02ae\5h\65\2\u02ae\u02b0\3\2\2\2")
        buf.write("\u02af\u02ac\3\2\2\2\u02af\u02b0\3\2\2\2\u02b0\65\3\2")
        buf.write("\2\2\u02b1\u02de\58\35\2\u02b2\u02b4\7\f\2\2\u02b3\u02b5")
        buf.write("\7\u0091\2\2\u02b4\u02b3\3\2\2\2\u02b4\u02b5\3\2\2\2\u02b5")
        buf.write("\u02b6\3\2\2\2\u02b6\u02de\7\u008b\2\2\u02b7\u02b8\7B")
        buf.write("\2\2\u02b8\u02b9\7\u0087\2\2\u02b9\u02ba\7\u0087\2\2\u02ba")
        buf.write("\u02bb\5l\67\2\u02bb\u02bc\5l\67\2\u02bc\u02bd\5l\67\2")
        buf.write("\u02bd\u02de\3\2\2\2\u02be\u02c0\7?\2\2\u02bf\u02c1\7")
        buf.write("\u0091\2\2\u02c0\u02bf\3\2\2\2\u02c0\u02c1\3\2\2\2\u02c1")
        buf.write("\u02c2\3\2\2\2\u02c2\u02de\5l\67\2\u02c3\u02c5\7\24\2")
        buf.write("\2\u02c4\u02c6\7\u0091\2\2\u02c5\u02c4\3\2\2\2\u02c5\u02c6")
        buf.write("\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02de\7\u0087\2\2\u02c8")
        buf.write("\u02ca\7C\2\2\u02c9\u02cb\7\u0091\2\2\u02ca\u02c9\3\2")
        buf.write("\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02de")
        buf.write("\5l\67\2\u02cd\u02cf\7D\2\2\u02ce\u02d0\7\u0091\2\2\u02cf")
        buf.write("\u02ce\3\2\2\2\u02cf\u02d0\3\2\2\2\u02d0\u02d1\3\2\2\2")
        buf.write("\u02d1\u02de\5l\67\2\u02d2\u02d4\7\27\2\2\u02d3\u02d5")
        buf.write("\7\u00a2\2\2\u02d4\u02d3\3\2\2\2\u02d4\u02d5\3\2\2\2\u02d5")
        buf.write("\u02d6\3\2\2\2\u02d6\u02de\7\u00a3\2\2\u02d7\u02d8\7\31")
        buf.write("\2\2\u02d8\u02d9\7\33\2\2\u02d9\u02de\5l\67\2\u02da\u02de")
        buf.write("\5:\36\2\u02db\u02de\7\34\2\2\u02dc\u02de\7F\2\2\u02dd")
        buf.write("\u02b1\3\2\2\2\u02dd\u02b2\3\2\2\2\u02dd\u02b7\3\2\2\2")
        buf.write("\u02dd\u02be\3\2\2\2\u02dd\u02c3\3\2\2\2\u02dd\u02c8\3")
        buf.write("\2\2\2\u02dd\u02cd\3\2\2\2\u02dd\u02d2\3\2\2\2\u02dd\u02d7")
        buf.write("\3\2\2\2\u02dd\u02da\3\2\2\2\u02dd\u02db\3\2\2\2\u02dd")
        buf.write("\u02dc\3\2\2\2\u02de\67\3\2\2\2\u02df\u02e0\7\7\2\2\u02e0")
        buf.write("\u02e1\5`\61\2\u02e1\u02e2\5`\61\2\u02e2\u02e3\5`\61\2")
        buf.write("\u02e3\u02e4\5`\61\2\u02e4\u02e5\5`\61\2\u02e5\u02e6\5")
        buf.write("h\65\2\u02e6\u02e7\5h\65\2\u02e79\3\2\2\2\u02e8\u02e9")
        buf.write("\7E\2\2\u02e9\u02ea\5`\61\2\u02ea\u02eb\5l\67\2\u02eb")
        buf.write("\u02ec\5l\67\2\u02ec;\3\2\2\2\u02ed\u0316\5> \2\u02ee")
        buf.write("\u0316\5@!\2\u02ef\u0316\5B\"\2\u02f0\u0316\5D#\2\u02f1")
        buf.write("\u0316\5F$\2\u02f2\u0316\5H%\2\u02f3\u0316\5J&\2\u02f4")
        buf.write("\u0316\5L\'\2\u02f5\u0316\5N(\2\u02f6\u02f8\7\f\2\2\u02f7")
        buf.write("\u02f9\7\u0091\2\2\u02f8\u02f7\3\2\2\2\u02f8\u02f9\3\2")
        buf.write("\2\2\u02f9\u02fa\3\2\2\2\u02fa\u0316\7\u008b\2\2\u02fb")
        buf.write("\u02fd\7O\2\2\u02fc\u02fe\7\u0091\2\2\u02fd\u02fc\3\2")
        buf.write("\2\2\u02fd\u02fe\3\2\2\2\u02fe\u02ff\3\2\2\2\u02ff\u0316")
        buf.write("\5l\67\2\u0300\u0301\7?\2\2\u0301\u0303\5l\67\2\u0302")
        buf.write("\u0304\5l\67\2\u0303\u0302\3\2\2\2\u0303\u0304\3\2\2\2")
        buf.write("\u0304\u0316\3\2\2\2\u0305\u0306\7\27\2\2\u0306\u0316")
        buf.write("\7\u00a3\2\2\u0307\u0308\7\31\2\2\u0308\u0309\7\33\2\2")
        buf.write("\u0309\u0310\5l\67\2\u030a\u0311\7[\2\2\u030b\u030d\7")
        buf.write("\f\2\2\u030c\u030e\7\u0091\2\2\u030d\u030c\3\2\2\2\u030d")
        buf.write("\u030e\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0311\7\u008b")
        buf.write("\2\2\u0310\u030a\3\2\2\2\u0310\u030b\3\2\2\2\u0311\u0312")
        buf.write("\3\2\2\2\u0312\u0313\7\u008b\2\2\u0313\u0316\3\2\2\2\u0314")
        buf.write("\u0316\7\34\2\2\u0315\u02ed\3\2\2\2\u0315\u02ee\3\2\2")
        buf.write("\2\u0315\u02ef\3\2\2\2\u0315\u02f0\3\2\2\2\u0315\u02f1")
        buf.write("\3\2\2\2\u0315\u02f2\3\2\2\2\u0315\u02f3\3\2\2\2\u0315")
        buf.write("\u02f4\3\2\2\2\u0315\u02f5\3\2\2\2\u0315\u02f6\3\2\2\2")
        buf.write("\u0315\u02fb\3\2\2\2\u0315\u0300\3\2\2\2\u0315\u0305\3")
        buf.write("\2\2\2\u0315\u0307\3\2\2\2\u0315\u0314\3\2\2\2\u0316=")
        buf.write("\3\2\2\2\u0317\u0318\7H\2\2\u0318\u031a\5`\61\2\u0319")
        buf.write("\u031b\5`\61\2\u031a\u0319\3\2\2\2\u031a\u031b\3\2\2\2")
        buf.write("\u031b\u031c\3\2\2\2\u031c\u031e\5l\67\2\u031d\u031f\5")
        buf.write("l\67\2\u031e\u031d\3\2\2\2\u031e\u031f\3\2\2\2\u031f?")
        buf.write("\3\2\2\2\u0320\u0321\7E\2\2\u0321\u0322\5`\61\2\u0322")
        buf.write("\u0323\5l\67\2\u0323A\3\2\2\2\u0324\u0325\7I\2\2\u0325")
        buf.write("\u0326\5`\61\2\u0326\u0327\5`\61\2\u0327\u0328\5`\61\2")
        buf.write("\u0328\u032a\7\u008b\2\2\u0329\u032b\7\u0088\2\2\u032a")
        buf.write("\u0329\3\2\2\2\u032a\u032b\3\2\2\2\u032b\u032c\3\2\2\2")
        buf.write("\u032c\u032d\7\u008b\2\2\u032dC\3\2\2\2\u032e\u032f\7")
        buf.write("J\2\2\u032f\u0330\5`\61\2\u0330E\3\2\2\2\u0331\u0332\7")
        buf.write("A\2\2\u0332\u0333\5`\61\2\u0333G\3\2\2\2\u0334\u0335\7")
        buf.write("K\2\2\u0335\u0336\5`\61\2\u0336I\3\2\2\2\u0337\u0338\7")
        buf.write("L\2\2\u0338\u0339\5`\61\2\u0339K\3\2\2\2\u033a\u033b\7")
        buf.write("M\2\2\u033b\u033c\7\u008b\2\2\u033c\u033d\5`\61\2\u033d")
        buf.write("\u033e\5`\61\2\u033e\u033f\5`\61\2\u033f\u0340\5`\61\2")
        buf.write("\u0340\u0342\5`\61\2\u0341\u0343\5`\61\2\u0342\u0341\3")
        buf.write("\2\2\2\u0342\u0343\3\2\2\2\u0343M\3\2\2\2\u0344\u0345")
        buf.write("\7N\2\2\u0345\u0346\5`\61\2\u0346O\3\2\2\2\u0347\u039b")
        buf.write("\5R*\2\u0348\u034a\7\f\2\2\u0349\u034b\7\u0091\2\2\u034a")
        buf.write("\u0349\3\2\2\2\u034a\u034b\3\2\2\2\u034b\u034c\3\2\2\2")
        buf.write("\u034c\u039b\7\u008b\2\2\u034d\u039b\7Q\2\2\u034e\u034f")
        buf.write("\7B\2\2\u034f\u0351\7\u0087\2\2\u0350\u0352\7\u0087\2")
        buf.write("\2\u0351\u0350\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0354")
        buf.write("\3\2\2\2\u0353\u0355\7\u0087\2\2\u0354\u0353\3\2\2\2\u0354")
        buf.write("\u0355\3\2\2\2\u0355\u0357\3\2\2\2\u0356\u0358\7\u0087")
        buf.write("\2\2\u0357\u0356\3\2\2\2\u0357\u0358\3\2\2\2\u0358\u0359")
        buf.write("\3\2\2\2\u0359\u039b\5l\67\2\u035a\u035c\7O\2\2\u035b")
        buf.write("\u035d\7\u0091\2\2\u035c\u035b\3\2\2\2\u035c\u035d\3\2")
        buf.write("\2\2\u035d\u035e\3\2\2\2\u035e\u039b\5l\67\2\u035f\u0361")
        buf.write("\7?\2\2\u0360\u0362\7\u0091\2\2\u0361\u0360\3\2\2\2\u0361")
        buf.write("\u0362\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u039b\5l\67\2")
        buf.write("\u0364\u0366\7\24\2\2\u0365\u0367\7\u0091\2\2\u0366\u0365")
        buf.write("\3\2\2\2\u0366\u0367\3\2\2\2\u0367\u0368\3\2\2\2\u0368")
        buf.write("\u039b\7\u0087\2\2\u0369\u036a\7R\2\2\u036a\u036b\7\u0087")
        buf.write("\2\2\u036b\u036c\7\u0087\2\2\u036c\u0370\7\u0087\2\2\u036d")
        buf.write("\u036e\7\u0087\2\2\u036e\u036f\7\u0087\2\2\u036f\u0371")
        buf.write("\7\u0087\2\2\u0370\u036d\3\2\2\2\u0370\u0371\3\2\2\2\u0371")
        buf.write("\u0375\3\2\2\2\u0372\u0373\7\u0087\2\2\u0373\u0374\7\u0087")
        buf.write("\2\2\u0374\u0376\7\u0087\2\2\u0375\u0372\3\2\2\2\u0375")
        buf.write("\u0376\3\2\2\2\u0376\u037a\3\2\2\2\u0377\u0378\7\u0087")
        buf.write("\2\2\u0378\u0379\7\u0087\2\2\u0379\u037b\7\u0087\2\2\u037a")
        buf.write("\u0377\3\2\2\2\u037a\u037b\3\2\2\2\u037b\u039b\3\2\2\2")
        buf.write("\u037c\u037e\7\27\2\2\u037d\u037f\7\u00a2\2\2\u037e\u037d")
        buf.write("\3\2\2\2\u037e\u037f\3\2\2\2\u037f\u0380\3\2\2\2\u0380")
        buf.write("\u039b\7\u00a3\2\2\u0381\u0382\7\31\2\2\u0382\u0383\7")
        buf.write("\33\2\2\u0383\u038a\5l\67\2\u0384\u038b\7[\2\2\u0385\u0387")
        buf.write("\7\f\2\2\u0386\u0388\7\u0091\2\2\u0387\u0386\3\2\2\2\u0387")
        buf.write("\u0388\3\2\2\2\u0388\u0389\3\2\2\2\u0389\u038b\7\u008b")
        buf.write("\2\2\u038a\u0384\3\2\2\2\u038a\u0385\3\2\2\2\u038b\u039b")
        buf.write("\3\2\2\2\u038c\u039b\7\34\2\2\u038d\u038e\7S\2\2\u038e")
        buf.write("\u038f\7T\2\2\u038f\u0391\7\u0087\2\2\u0390\u0392\7\u0087")
        buf.write("\2\2\u0391\u0390\3\2\2\2\u0391\u0392\3\2\2\2\u0392\u0394")
        buf.write("\3\2\2\2\u0393\u0395\7\u0087\2\2\u0394\u0393\3\2\2\2\u0394")
        buf.write("\u0395\3\2\2\2\u0395\u0397\3\2\2\2\u0396\u0398\7\u0087")
        buf.write("\2\2\u0397\u0396\3\2\2\2\u0397\u0398\3\2\2\2\u0398\u039b")
        buf.write("\3\2\2\2\u0399\u039b\7F\2\2\u039a\u0347\3\2\2\2\u039a")
        buf.write("\u0348\3\2\2\2\u039a\u034d\3\2\2\2\u039a\u034e\3\2\2\2")
        buf.write("\u039a\u035a\3\2\2\2\u039a\u035f\3\2\2\2\u039a\u0364\3")
        buf.write("\2\2\2\u039a\u0369\3\2\2\2\u039a\u037c\3\2\2\2\u039a\u0381")
        buf.write("\3\2\2\2\u039a\u038c\3\2\2\2\u039a\u038d\3\2\2\2\u039a")
        buf.write("\u0399\3\2\2\2\u039bQ\3\2\2\2\u039c\u039d\7\7\2\2\u039d")
        buf.write("\u039e\5`\61\2\u039e\u039f\5`\61\2\u039f\u03a0\5`\61\2")
        buf.write("\u03a0\u03a6\5`\61\2\u03a1\u03a2\5`\61\2\u03a2\u03a3\5")
        buf.write("`\61\2\u03a3\u03a4\5`\61\2\u03a4\u03a5\5`\61\2\u03a5\u03a7")
        buf.write("\3\2\2\2\u03a6\u03a1\3\2\2\2\u03a6\u03a7\3\2\2\2\u03a7")
        buf.write("\u03ad\3\2\2\2\u03a8\u03a9\5`\61\2\u03a9\u03aa\5`\61\2")
        buf.write("\u03aa\u03ab\5`\61\2\u03ab\u03ac\5`\61\2\u03ac\u03ae\3")
        buf.write("\2\2\2\u03ad\u03a8\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03b4")
        buf.write("\3\2\2\2\u03af\u03b0\5`\61\2\u03b0\u03b1\5`\61\2\u03b1")
        buf.write("\u03b2\5`\61\2\u03b2\u03b3\5`\61\2\u03b3\u03b5\3\2\2\2")
        buf.write("\u03b4\u03af\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5S\3\2\2")
        buf.write("\2\u03b6\u03d7\5V,\2\u03b7\u03b9\7\f\2\2\u03b8\u03ba\7")
        buf.write("\u0091\2\2\u03b9\u03b8\3\2\2\2\u03b9\u03ba\3\2\2\2\u03ba")
        buf.write("\u03bb\3\2\2\2\u03bb\u03d7\7\u008b\2\2\u03bc\u03bd\7>")
        buf.write("\2\2\u03bd\u03be\5l\67\2\u03be\u03bf\5l\67\2\u03bf\u03c0")
        buf.write("\5l\67\2\u03c0\u03c1\5l\67\2\u03c1\u03c2\5l\67\2\u03c2")
        buf.write("\u03d7\3\2\2\2\u03c3\u03c5\7?\2\2\u03c4\u03c6\7\u0091")
        buf.write("\2\2\u03c5\u03c4\3\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03c7")
        buf.write("\3\2\2\2\u03c7\u03d7\5l\67\2\u03c8\u03ca\7\24\2\2\u03c9")
        buf.write("\u03cb\7\u0091\2\2\u03ca\u03c9\3\2\2\2\u03ca\u03cb\3\2")
        buf.write("\2\2\u03cb\u03cc\3\2\2\2\u03cc\u03d7\7\u0087\2\2\u03cd")
        buf.write("\u03cf\7\27\2\2\u03ce\u03d0\7\u00a2\2\2\u03cf\u03ce\3")
        buf.write("\2\2\2\u03cf\u03d0\3\2\2\2\u03d0\u03d1\3\2\2\2\u03d1\u03d7")
        buf.write("\7\u00a3\2\2\u03d2\u03d3\7\31\2\2\u03d3\u03d4\7\33\2\2")
        buf.write("\u03d4\u03d7\5l\67\2\u03d5\u03d7\7\34\2\2\u03d6\u03b6")
        buf.write("\3\2\2\2\u03d6\u03b7\3\2\2\2\u03d6\u03bc\3\2\2\2\u03d6")
        buf.write("\u03c3\3\2\2\2\u03d6\u03c8\3\2\2\2\u03d6\u03cd\3\2\2\2")
        buf.write("\u03d6\u03d2\3\2\2\2\u03d6\u03d5\3\2\2\2\u03d7U\3\2\2")
        buf.write("\2\u03d8\u03d9\7\7\2\2\u03d9\u03da\5`\61\2\u03da\u03db")
        buf.write("\5`\61\2\u03db\u03dc\5`\61\2\u03dc\u03dd\5`\61\2\u03dd")
        buf.write("\u03de\5`\61\2\u03de\u03df\5`\61\2\u03df\u03e0\5h\65\2")
        buf.write("\u03e0\u03e1\5h\65\2\u03e1W\3\2\2\2\u03e2\u0405\5Z.\2")
        buf.write("\u03e3\u03e5\7\f\2\2\u03e4\u03e6\7\u0091\2\2\u03e5\u03e4")
        buf.write("\3\2\2\2\u03e5\u03e6\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7")
        buf.write("\u0405\7\u008b\2\2\u03e8\u03e9\7>\2\2\u03e9\u03ea\5l\67")
        buf.write("\2\u03ea\u03eb\5l\67\2\u03eb\u03ec\5l\67\2\u03ec\u03ed")
        buf.write("\5l\67\2\u03ed\u03ee\5l\67\2\u03ee\u03ef\5l\67\2\u03ef")
        buf.write("\u03f0\5l\67\2\u03f0\u0405\3\2\2\2\u03f1\u03f3\7?\2\2")
        buf.write("\u03f2\u03f4\7\u0091\2\2\u03f3\u03f2\3\2\2\2\u03f3\u03f4")
        buf.write("\3\2\2\2\u03f4\u03f5\3\2\2\2\u03f5\u0405\5l\67\2\u03f6")
        buf.write("\u03f8\7\24\2\2\u03f7\u03f9\7\u0091\2\2\u03f8\u03f7\3")
        buf.write("\2\2\2\u03f8\u03f9\3\2\2\2\u03f9\u03fa\3\2\2\2\u03fa\u0405")
        buf.write("\7\u0087\2\2\u03fb\u03fd\7\27\2\2\u03fc\u03fe\7\u00a2")
        buf.write("\2\2\u03fd\u03fc\3\2\2\2\u03fd\u03fe\3\2\2\2\u03fe\u03ff")
        buf.write("\3\2\2\2\u03ff\u0405\7\u00a3\2\2\u0400\u0401\7\31\2\2")
        buf.write("\u0401\u0402\7\33\2\2\u0402\u0405\5l\67\2\u0403\u0405")
        buf.write("\7\34\2\2\u0404\u03e2\3\2\2\2\u0404\u03e3\3\2\2\2\u0404")
        buf.write("\u03e8\3\2\2\2\u0404\u03f1\3\2\2\2\u0404\u03f6\3\2\2\2")
        buf.write("\u0404\u03fb\3\2\2\2\u0404\u0400\3\2\2\2\u0404\u0403\3")
        buf.write("\2\2\2\u0405Y\3\2\2\2\u0406\u0407\7\7\2\2\u0407\u0408")
        buf.write("\5`\61\2\u0408\u0409\5`\61\2\u0409\u040a\5`\61\2\u040a")
        buf.write("\u040b\5`\61\2\u040b\u040c\5`\61\2\u040c\u040d\5`\61\2")
        buf.write("\u040d\u040e\5`\61\2\u040e\u040f\5`\61\2\u040f\u0410\5")
        buf.write("h\65\2\u0410\u0411\5h\65\2\u0411[\3\2\2\2\u0412\u0447")
        buf.write("\5^\60\2\u0413\u0415\7\f\2\2\u0414\u0416\7\u0091\2\2\u0415")
        buf.write("\u0414\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u0417\3\2\2\2")
        buf.write("\u0417\u0447\7\u008b\2\2\u0418\u041a\7X\2\2\u0419\u041b")
        buf.write("\7\u0091\2\2\u041a\u0419\3\2\2\2\u041a\u041b\3\2\2\2\u041b")
        buf.write("\u041c\3\2\2\2\u041c\u0447\7\u008b\2\2\u041d\u041e\7B")
        buf.write("\2\2\u041e\u041f\7\u0087\2\2\u041f\u0420\7\u0087\2\2\u0420")
        buf.write("\u0447\5l\67\2\u0421\u0423\7O\2\2\u0422\u0424\7\u0091")
        buf.write("\2\2\u0423\u0422\3\2\2\2\u0423\u0424\3\2\2\2\u0424\u0425")
        buf.write("\3\2\2\2\u0425\u0447\5l\67\2\u0426\u0428\7?\2\2\u0427")
        buf.write("\u0429\7\u0091\2\2\u0428\u0427\3\2\2\2\u0428\u0429\3\2")
        buf.write("\2\2\u0429\u042a\3\2\2\2\u042a\u0447\5l\67\2\u042b\u042d")
        buf.write("\7\24\2\2\u042c\u042e\7\u0091\2\2\u042d\u042c\3\2\2\2")
        buf.write("\u042d\u042e\3\2\2\2\u042e\u042f\3\2\2\2\u042f\u0447\7")
        buf.write("\u0087\2\2\u0430\u0432\7\27\2\2\u0431\u0433\7\u00a2\2")
        buf.write("\2\u0432\u0431\3\2\2\2\u0432\u0433\3\2\2\2\u0433\u0434")
        buf.write("\3\2\2\2\u0434\u0447\7\u00a3\2\2\u0435\u0436\7\31\2\2")
        buf.write("\u0436\u0437\7\33\2\2\u0437\u043e\5l\67\2\u0438\u043f")
        buf.write("\7[\2\2\u0439\u043b\7\f\2\2\u043a\u043c\7\u0091\2\2\u043b")
        buf.write("\u043a\3\2\2\2\u043b\u043c\3\2\2\2\u043c\u043d\3\2\2\2")
        buf.write("\u043d\u043f\7\u008b\2\2\u043e\u0438\3\2\2\2\u043e\u0439")
        buf.write("\3\2\2\2\u043f\u0447\3\2\2\2\u0440\u0447\7\34\2\2\u0441")
        buf.write("\u0442\7S\2\2\u0442\u0443\7Y\2\2\u0443\u0444\7\u0087\2")
        buf.write("\2\u0444\u0447\7\u0087\2\2\u0445\u0447\7F\2\2\u0446\u0412")
        buf.write("\3\2\2\2\u0446\u0413\3\2\2\2\u0446\u0418\3\2\2\2\u0446")
        buf.write("\u041d\3\2\2\2\u0446\u0421\3\2\2\2\u0446\u0426\3\2\2\2")
        buf.write("\u0446\u042b\3\2\2\2\u0446\u0430\3\2\2\2\u0446\u0435\3")
        buf.write("\2\2\2\u0446\u0440\3\2\2\2\u0446\u0441\3\2\2\2\u0446\u0445")
        buf.write("\3\2\2\2\u0447]\3\2\2\2\u0448\u0449\7\7\2\2\u0449\u044a")
        buf.write("\5`\61\2\u044a\u044b\5`\61\2\u044b\u044c\5`\61\2\u044c")
        buf.write("\u044d\5`\61\2\u044d\u044e\5`\61\2\u044e\u044f\5`\61\2")
        buf.write("\u044f\u0450\5`\61\2\u0450\u0451\5`\61\2\u0451\u0452\5")
        buf.write("`\61\2\u0452\u0453\5`\61\2\u0453\u0455\5`\61\2\u0454\u0456")
        buf.write("\5`\61\2\u0455\u0454\3\2\2\2\u0455\u0456\3\2\2\2\u0456")
        buf.write("_\3\2\2\2\u0457\u0458\7\u008e\2\2\u0458\u0459\5b\62\2")
        buf.write("\u0459\u045a\7\u008f\2\2\u045aa\3\2\2\2\u045b\u0460\5")
        buf.write("d\63\2\u045c\u045d\7\u0082\2\2\u045d\u045f\5d\63\2\u045e")
        buf.write("\u045c\3\2\2\2\u045f\u0462\3\2\2\2\u0460\u045e\3\2\2\2")
        buf.write("\u0460\u0461\3\2\2\2\u0461c\3\2\2\2\u0462\u0460\3\2\2")
        buf.write("\2\u0463\u0468\5f\64\2\u0464\u0465\7\u0083\2\2\u0465\u0467")
        buf.write("\5f\64\2\u0466\u0464\3\2\2\2\u0467\u046a\3\2\2\2\u0468")
        buf.write("\u0466\3\2\2\2\u0468\u0469\3\2\2\2\u0469e\3\2\2\2\u046a")
        buf.write("\u0468\3\2\2\2\u046b\u046c\b\64\1\2\u046c\u046d\7\u008e")
        buf.write("\2\2\u046d\u046e\5b\62\2\u046e\u046f\7\u008f\2\2\u046f")
        buf.write("\u04fc\3\2\2\2\u0470\u04fc\7[\2\2\u0471\u0472\7]\2\2\u0472")
        buf.write("\u0473\t\2\2\2\u0473\u0474\t\3\2\2\u0474\u04fc\t\2\2\2")
        buf.write("\u0475\u0477\7^\2\2\u0476\u0478\7\u009c\2\2\u0477\u0476")
        buf.write("\3\2\2\2\u0477\u0478\3\2\2\2\u0478\u0479\3\2\2\2\u0479")
        buf.write("\u047a\7\u009d\2\2\u047a\u047b\7\u009e\2\2\u047b\u04fc")
        buf.write("\5j\66\2\u047c\u047d\7_\2\2\u047d\u04fc\5f\64 \u047e\u047f")
        buf.write("\7`\2\2\u047f\u04fc\5f\64\37\u0480\u0481\7a\2\2\u0481")
        buf.write("\u04fc\5f\64\36\u0482\u0489\7b\2\2\u0483\u048a\7\u008c")
        buf.write("\2\2\u0484\u0487\7\u008b\2\2\u0485\u0486\7\u0090\2\2\u0486")
        buf.write("\u0488\7\u008b\2\2\u0487\u0485\3\2\2\2\u0487\u0488\3\2")
        buf.write("\2\2\u0488\u048a\3\2\2\2\u0489\u0483\3\2\2\2\u0489\u0484")
        buf.write("\3\2\2\2\u048a\u04fc\3\2\2\2\u048b\u048c\7c\2\2\u048c")
        buf.write("\u048d\5j\66\2\u048d\u048e\5j\66\2\u048e\u048f\5j\66\2")
        buf.write("\u048f\u0490\5j\66\2\u0490\u0491\5j\66\2\u0491\u0492\5")
        buf.write("j\66\2\u0492\u04fc\3\2\2\2\u0493\u04fc\7d\2\2\u0494\u0495")
        buf.write("\7e\2\2\u0495\u04fc\7\u0087\2\2\u0496\u04fc\7f\2\2\u0497")
        buf.write("\u049e\7g\2\2\u0498\u049f\7\u008c\2\2\u0499\u049c\7\u008b")
        buf.write("\2\2\u049a\u049b\7\u0090\2\2\u049b\u049d\7\u008b\2\2\u049c")
        buf.write("\u049a\3\2\2\2\u049c\u049d\3\2\2\2\u049d\u049f\3\2\2\2")
        buf.write("\u049e\u0498\3\2\2\2\u049e\u0499\3\2\2\2\u049f\u04fc\3")
        buf.write("\2\2\2\u04a0\u04fc\7h\2\2\u04a1\u04a2\7\u0084\2\2\u04a2")
        buf.write("\u04fc\5f\64\26\u04a3\u04a4\7i\2\2\u04a4\u04a5\7\u008e")
        buf.write("\2\2\u04a5\u04a7\5j\66\2\u04a6\u04a8\7\u0085\2\2\u04a7")
        buf.write("\u04a6\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04a9\3\2\2\2")
        buf.write("\u04a9\u04ab\5j\66\2\u04aa\u04ac\7\u0085\2\2\u04ab\u04aa")
        buf.write("\3\2\2\2\u04ab\u04ac\3\2\2\2\u04ac\u04ad\3\2\2\2\u04ad")
        buf.write("\u04ae\5j\66\2\u04ae\u04af\7\u008f\2\2\u04af\u04b0\7j")
        buf.write("\2\2\u04b0\u04b1\5j\66\2\u04b1\u04fc\3\2\2\2\u04b2\u04b3")
        buf.write("\7i\2\2\u04b3\u04b4\7\u008e\2\2\u04b4\u04b6\7\u0080\2")
        buf.write("\2\u04b5\u04b7\7\u0091\2\2\u04b6\u04b5\3\2\2\2\u04b6\u04b7")
        buf.write("\3\2\2\2\u04b7\u04b8\3\2\2\2\u04b8\u04ba\5`\61\2\u04b9")
        buf.write("\u04bb\7\u0085\2\2\u04ba\u04b9\3\2\2\2\u04ba\u04bb\3\2")
        buf.write("\2\2\u04bb\u04c1\3\2\2\2\u04bc\u04be\7\u0081\2\2\u04bd")
        buf.write("\u04bf\7\u0091\2\2\u04be\u04bd\3\2\2\2\u04be\u04bf\3\2")
        buf.write("\2\2\u04bf\u04c0\3\2\2\2\u04c0\u04c2\5`\61\2\u04c1\u04bc")
        buf.write("\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c3\3\2\2\2\u04c3")
        buf.write("\u04c4\7\u008f\2\2\u04c4\u04c5\7j\2\2\u04c5\u04c6\5j\66")
        buf.write("\2\u04c6\u04fc\3\2\2\2\u04c7\u04fc\7k\2\2\u04c8\u04fc")
        buf.write("\7l\2\2\u04c9\u04d0\7m\2\2\u04ca\u04d1\7\u008d\2\2\u04cb")
        buf.write("\u04ce\7\u0087\2\2\u04cc\u04cd\7\u0090\2\2\u04cd\u04cf")
        buf.write("\7\u0087\2\2\u04ce\u04cc\3\2\2\2\u04ce\u04cf\3\2\2\2\u04cf")
        buf.write("\u04d1\3\2\2\2\u04d0\u04ca\3\2\2\2\u04d0\u04cb\3\2\2\2")
        buf.write("\u04d1\u04fc\3\2\2\2\u04d2\u04d9\7n\2\2\u04d3\u04da\7")
        buf.write("\u008c\2\2\u04d4\u04d7\7\u008b\2\2\u04d5\u04d6\7\u0090")
        buf.write("\2\2\u04d6\u04d8\7\u008b\2\2\u04d7\u04d5\3\2\2\2\u04d7")
        buf.write("\u04d8\3\2\2\2\u04d8\u04da\3\2\2\2\u04d9\u04d3\3\2\2\2")
        buf.write("\u04d9\u04d4\3\2\2\2\u04da\u04fc\3\2\2\2\u04db\u04e7\7")
        buf.write("p\2\2\u04dc\u04e8\7\u008c\2\2\u04dd\u04e0\7\u008b\2\2")
        buf.write("\u04de\u04df\7\u0090\2\2\u04df\u04e1\7\u008b\2\2\u04e0")
        buf.write("\u04de\3\2\2\2\u04e0\u04e1\3\2\2\2\u04e1\u04e8\3\2\2\2")
        buf.write("\u04e2\u04e5\7\u008a\2\2\u04e3\u04e4\7\u0090\2\2\u04e4")
        buf.write("\u04e6\7\u008a\2\2\u04e5\u04e3\3\2\2\2\u04e5\u04e6\3\2")
        buf.write("\2\2\u04e6\u04e8\3\2\2\2\u04e7\u04dc\3\2\2\2\u04e7\u04dd")
        buf.write("\3\2\2\2\u04e7\u04e2\3\2\2\2\u04e8\u04fc\3\2\2\2\u04e9")
        buf.write("\u04ea\7q\2\2\u04ea\u04eb\5j\66\2\u04eb\u04ec\5j\66\2")
        buf.write("\u04ec\u04ed\5j\66\2\u04ed\u04ee\5j\66\2\u04ee\u04ef\5")
        buf.write("j\66\2\u04ef\u04f0\5j\66\2\u04f0\u04fc\3\2\2\2\u04f1\u04fc")
        buf.write("\7r\2\2\u04f2\u04fc\7s\2\2\u04f3\u04fc\7t\2\2\u04f4\u04fc")
        buf.write("\7u\2\2\u04f5\u04fc\7v\2\2\u04f6\u04fc\7w\2\2\u04f7\u04fc")
        buf.write("\7x\2\2\u04f8\u04fc\7y\2\2\u04f9\u04fc\7z\2\2\u04fa\u04fc")
        buf.write("\7{\2\2\u04fb\u046b\3\2\2\2\u04fb\u0470\3\2\2\2\u04fb")
        buf.write("\u0471\3\2\2\2\u04fb\u0475\3\2\2\2\u04fb\u047c\3\2\2\2")
        buf.write("\u04fb\u047e\3\2\2\2\u04fb\u0480\3\2\2\2\u04fb\u0482\3")
        buf.write("\2\2\2\u04fb\u048b\3\2\2\2\u04fb\u0493\3\2\2\2\u04fb\u0494")
        buf.write("\3\2\2\2\u04fb\u0496\3\2\2\2\u04fb\u0497\3\2\2\2\u04fb")
        buf.write("\u04a0\3\2\2\2\u04fb\u04a1\3\2\2\2\u04fb\u04a3\3\2\2\2")
        buf.write("\u04fb\u04b2\3\2\2\2\u04fb\u04c7\3\2\2\2\u04fb\u04c8\3")
        buf.write("\2\2\2\u04fb\u04c9\3\2\2\2\u04fb\u04d2\3\2\2\2\u04fb\u04db")
        buf.write("\3\2\2\2\u04fb\u04e9\3\2\2\2\u04fb\u04f1\3\2\2\2\u04fb")
        buf.write("\u04f2\3\2\2\2\u04fb\u04f3\3\2\2\2\u04fb\u04f4\3\2\2\2")
        buf.write("\u04fb\u04f5\3\2\2\2\u04fb\u04f6\3\2\2\2\u04fb\u04f7\3")
        buf.write("\2\2\2\u04fb\u04f8\3\2\2\2\u04fb\u04f9\3\2\2\2\u04fb\u04fa")
        buf.write("\3\2\2\2\u04fc\u0505\3\2\2\2\u04fd\u04fe\f#\2\2\u04fe")
        buf.write("\u04ff\7\\\2\2\u04ff\u0504\5j\66\2\u0500\u0501\f\17\2")
        buf.write("\2\u0501\u0502\7o\2\2\u0502\u0504\5j\66\2\u0503\u04fd")
        buf.write("\3\2\2\2\u0503\u0500\3\2\2\2\u0504\u0507\3\2\2\2\u0505")
        buf.write("\u0503\3\2\2\2\u0505\u0506\3\2\2\2\u0506g\3\2\2\2\u0507")
        buf.write("\u0505\3\2\2\2\u0508\u0509\t\4\2\2\u0509i\3\2\2\2\u050a")
        buf.write("\u050b\t\4\2\2\u050bk\3\2\2\2\u050c\u050d\t\4\2\2\u050d")
        buf.write("m\3\2\2\2\u050e\u050f\t\4\2\2\u050fo\3\2\2\2\u0510\u051b")
        buf.write("\7Z\2\2\u0511\u0519\7\u00a8\2\2\u0512\u0514\7\u00ab\2")
        buf.write("\2\u0513\u0512\3\2\2\2\u0514\u0517\3\2\2\2\u0515\u0513")
        buf.write("\3\2\2\2\u0515\u0516\3\2\2\2\u0516\u051a\3\2\2\2\u0517")
        buf.write("\u0515\3\2\2\2\u0518\u051a\7\u00ac\2\2\u0519\u0515\3\2")
        buf.write("\2\2\u0519\u0518\3\2\2\2\u051a\u051c\3\2\2\2\u051b\u0511")
        buf.write("\3\2\2\2\u051b\u051c\3\2\2\2\u051c\u051d\3\2\2\2\u051d")
        buf.write("\u0521\7\u00a9\2\2\u051e\u0520\7\u00ab\2\2\u051f\u051e")
        buf.write("\3\2\2\2\u0520\u0523\3\2\2\2\u0521\u051f\3\2\2\2\u0521")
        buf.write("\u0522\3\2\2\2\u0522\u0524\3\2\2\2\u0523\u0521\3\2\2\2")
        buf.write("\u0524\u0525\7\u00aa\2\2\u0525q\3\2\2\2\u0526\u0527\7")
        buf.write("|\2\2\u0527\u0528\5t;\2\u0528\u0529\5`\61\2\u0529s\3\2")
        buf.write("\2\2\u052a\u052b\t\5\2\2\u052b\u052c\5v<\2\u052c\u052d")
        buf.write("\7\u00ae\2\2\u052d\u0531\3\2\2\2\u052e\u052f\7\177\2\2")
        buf.write("\u052f\u0531\5~@\2\u0530\u052a\3\2\2\2\u0530\u052e\3\2")
        buf.write("\2\2\u0531u\3\2\2\2\u0532\u0535\7\u00b8\2\2\u0533\u0534")
        buf.write("\7\u00af\2\2\u0534\u0536\5x=\2\u0535\u0533\3\2\2\2\u0535")
        buf.write("\u0536\3\2\2\2\u0536w\3\2\2\2\u0537\u053c\5z>\2\u0538")
        buf.write("\u0539\t\6\2\2\u0539\u053b\5x=\2\u053a\u0538\3\2\2\2\u053b")
        buf.write("\u053e\3\2\2\2\u053c\u053a\3\2\2\2\u053c\u053d\3\2\2\2")
        buf.write("\u053dy\3\2\2\2\u053e\u053c\3\2\2\2\u053f\u0546\7\u00b8")
        buf.write("\2\2\u0540\u0546\5|?\2\u0541\u0546\7\u00b6\2\2\u0542\u0546")
        buf.write("\7\u00b7\2\2\u0543\u0546\7\u00cf\2\2\u0544\u0546\7\u00d0")
        buf.write("\2\2\u0545\u053f\3\2\2\2\u0545\u0540\3\2\2\2\u0545\u0541")
        buf.write("\3\2\2\2\u0545\u0542\3\2\2\2\u0545\u0543\3\2\2\2\u0545")
        buf.write("\u0544\3\2\2\2\u0546{\3\2\2\2\u0547\u0548\7\u00b9\2\2")
        buf.write("\u0548\u0549\7\u00d1\2\2\u0549\u054a\5z>\2\u054a\u054b")
        buf.write("\7\u00ae\2\2\u054b\u05bf\3\2\2\2\u054c\u054d\7\u00ba\2")
        buf.write("\2\u054d\u054e\7\u00d1\2\2\u054e\u054f\5z>\2\u054f\u0550")
        buf.write("\7\u00ae\2\2\u0550\u05bf\3\2\2\2\u0551\u0552\7\u00bc\2")
        buf.write("\2\u0552\u0553\7\u00d1\2\2\u0553\u0554\5z>\2\u0554\u0555")
        buf.write("\7\u00ae\2\2\u0555\u05bf\3\2\2\2\u0556\u0557\7\u00bd\2")
        buf.write("\2\u0557\u0558\7\u00d1\2\2\u0558\u0559\5z>\2\u0559\u055a")
        buf.write("\7\u00ae\2\2\u055a\u05bf\3\2\2\2\u055b\u055c\7\u00be\2")
        buf.write("\2\u055c\u055d\7\u00d1\2\2\u055d\u055e\5z>\2\u055e\u055f")
        buf.write("\7\u00ae\2\2\u055f\u05bf\3\2\2\2\u0560\u0561\7\u00bf\2")
        buf.write("\2\u0561\u0562\7\u00d1\2\2\u0562\u0563\5z>\2\u0563\u0564")
        buf.write("\7\u00ae\2\2\u0564\u05bf\3\2\2\2\u0565\u0566\7\u00c0\2")
        buf.write("\2\u0566\u0567\7\u00d1\2\2\u0567\u0568\5z>\2\u0568\u0569")
        buf.write("\7\u00ae\2\2\u0569\u05bf\3\2\2\2\u056a\u056b\7\u00c1\2")
        buf.write("\2\u056b\u056c\7\u00d1\2\2\u056c\u056d\5z>\2\u056d\u056e")
        buf.write("\7\u00ae\2\2\u056e\u05bf\3\2\2\2\u056f\u0570\7\u00c2\2")
        buf.write("\2\u0570\u0571\7\u00d1\2\2\u0571\u0572\5z>\2\u0572\u0573")
        buf.write("\7\u00ae\2\2\u0573\u05bf\3\2\2\2\u0574\u0575\7\u00c3\2")
        buf.write("\2\u0575\u0576\7\u00d1\2\2\u0576\u0577\5z>\2\u0577\u0578")
        buf.write("\7\u00ae\2\2\u0578\u05bf\3\2\2\2\u0579\u057a\7\u00c4\2")
        buf.write("\2\u057a\u057b\7\u00d1\2\2\u057b\u057c\5z>\2\u057c\u057d")
        buf.write("\7\u00ae\2\2\u057d\u05bf\3\2\2\2\u057e\u057f\7\u00c5\2")
        buf.write("\2\u057f\u0580\7\u00d1\2\2\u0580\u0585\5z>\2\u0581\u0582")
        buf.write("\7\u00b5\2\2\u0582\u0584\5z>\2\u0583\u0581\3\2\2\2\u0584")
        buf.write("\u0587\3\2\2\2\u0585\u0583\3\2\2\2\u0585\u0586\3\2\2\2")
        buf.write("\u0586\u0588\3\2\2\2\u0587\u0585\3\2\2\2\u0588\u0589\7")
        buf.write("\u00ae\2\2\u0589\u05bf\3\2\2\2\u058a\u058b\7\u00c6\2\2")
        buf.write("\u058b\u058c\7\u00d1\2\2\u058c\u058d\5z>\2\u058d\u058e")
        buf.write("\7\u00ae\2\2\u058e\u05bf\3\2\2\2\u058f\u0590\7\u00c7\2")
        buf.write("\2\u0590\u0591\7\u00d1\2\2\u0591\u0596\5z>\2\u0592\u0593")
        buf.write("\7\u00b5\2\2\u0593\u0595\5z>\2\u0594\u0592\3\2\2\2\u0595")
        buf.write("\u0598\3\2\2\2\u0596\u0594\3\2\2\2\u0596\u0597\3\2\2\2")
        buf.write("\u0597\u0599\3\2\2\2\u0598\u0596\3\2\2\2\u0599\u059a\7")
        buf.write("\u00ae\2\2\u059a\u05bf\3\2\2\2\u059b\u059c\7\u00c8\2\2")
        buf.write("\u059c\u059d\7\u00d1\2\2\u059d\u059e\5z>\2\u059e\u059f")
        buf.write("\7\u00b5\2\2\u059f\u05a0\5z>\2\u05a0\u05a1\7\u00ae\2\2")
        buf.write("\u05a1\u05bf\3\2\2\2\u05a2\u05a3\7\u00c9\2\2\u05a3\u05a4")
        buf.write("\7\u00d1\2\2\u05a4\u05a5\5z>\2\u05a5\u05a6\7\u00ae\2\2")
        buf.write("\u05a6\u05bf\3\2\2\2\u05a7\u05a8\7\u00ca\2\2\u05a8\u05a9")
        buf.write("\7\u00d1\2\2\u05a9\u05bf\7\u00ae\2\2\u05aa\u05ab\7\u00cb")
        buf.write("\2\2\u05ab\u05ac\7\u00d1\2\2\u05ac\u05ad\5z>\2\u05ad\u05ae")
        buf.write("\7\u00ae\2\2\u05ae\u05bf\3\2\2\2\u05af\u05b0\7\u00cc\2")
        buf.write("\2\u05b0\u05b1\7\u00d1\2\2\u05b1\u05b2\5z>\2\u05b2\u05b3")
        buf.write("\7\u00ae\2\2\u05b3\u05bf\3\2\2\2\u05b4\u05b5\7\u00cd\2")
        buf.write("\2\u05b5\u05b6\7\u00d1\2\2\u05b6\u05b7\5z>\2\u05b7\u05b8")
        buf.write("\7\u00ae\2\2\u05b8\u05bf\3\2\2\2\u05b9\u05ba\7\u00ce\2")
        buf.write("\2\u05ba\u05bb\7\u00d1\2\2\u05bb\u05bc\5z>\2\u05bc\u05bd")
        buf.write("\7\u00ae\2\2\u05bd\u05bf\3\2\2\2\u05be\u0547\3\2\2\2\u05be")
        buf.write("\u054c\3\2\2\2\u05be\u0551\3\2\2\2\u05be\u0556\3\2\2\2")
        buf.write("\u05be\u055b\3\2\2\2\u05be\u0560\3\2\2\2\u05be\u0565\3")
        buf.write("\2\2\2\u05be\u056a\3\2\2\2\u05be\u056f\3\2\2\2\u05be\u0574")
        buf.write("\3\2\2\2\u05be\u0579\3\2\2\2\u05be\u057e\3\2\2\2\u05be")
        buf.write("\u058a\3\2\2\2\u05be\u058f\3\2\2\2\u05be\u059b\3\2\2\2")
        buf.write("\u05be\u05a2\3\2\2\2\u05be\u05a7\3\2\2\2\u05be\u05aa\3")
        buf.write("\2\2\2\u05be\u05af\3\2\2\2\u05be\u05b4\3\2\2\2\u05be\u05b9")
        buf.write("\3\2\2\2\u05bf}\3\2\2\2\u05c0\u05c1\t\7\2\2\u05c1\u05c2")
        buf.write("\7\u00d2\2\2\u05c2\u05c3\7\u00db\2\2\u05c3\u05c4\7\u00d3")
        buf.write("\2\2\u05c4\177\3\2\2\2\u00ae\u0093\u0095\u009e\u00a4\u00aa")
        buf.write("\u00b0\u00b6\u00bc\u00c2\u00cb\u00d4\u00dd\u00e6\u00ef")
        buf.write("\u00f8\u0101\u010a\u0111\u0120\u0125\u012c\u0135\u013a")
        buf.write("\u0145\u0151\u0157\u0164\u016b\u0186\u018c\u018f\u019a")
        buf.write("\u01a3\u01a8\u01ad\u01b4\u01b8\u01bd\u01c2\u01c7\u01cc")
        buf.write("\u01d1\u01d6\u01d9\u01de\u01e3\u01e8\u01ee\u01f2\u0202")
        buf.write("\u0208\u020c\u0211\u0214\u0218\u021d\u0222\u0226\u022c")
        buf.write("\u0230\u0234\u0237\u0239\u023d\u0242\u024c\u0251\u0256")
        buf.write("\u025d\u0269\u026e\u0279\u027f\u0283\u0288\u028d\u0296")
        buf.write("\u0299\u029c\u02a8\u02af\u02b4\u02c0\u02c5\u02ca\u02cf")
        buf.write("\u02d4\u02dd\u02f8\u02fd\u0303\u030d\u0310\u0315\u031a")
        buf.write("\u031e\u032a\u0342\u034a\u0351\u0354\u0357\u035c\u0361")
        buf.write("\u0366\u0370\u0375\u037a\u037e\u0387\u038a\u0391\u0394")
        buf.write("\u0397\u039a\u03a6\u03ad\u03b4\u03b9\u03c5\u03ca\u03cf")
        buf.write("\u03d6\u03e5\u03f3\u03f8\u03fd\u0404\u0415\u041a\u0423")
        buf.write("\u0428\u042d\u0432\u043b\u043e\u0446\u0455\u0460\u0468")
        buf.write("\u0477\u0487\u0489\u049c\u049e\u04a7\u04ab\u04b6\u04ba")
        buf.write("\u04be\u04c1\u04ce\u04d0\u04d7\u04d9\u04e0\u04e5\u04e7")
        buf.write("\u04fb\u0503\u0505\u0515\u0519\u051b\u0521\u0530\u0535")
        buf.write("\u053c\u0545\u0585\u0596\u05be")
        return buf.getvalue()


class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'?'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "':'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'<'", "'>'", 
                     "'<='", "'>='", "'#'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'+'", "'-'", "<INVALID>", "'/'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Averaging", "Bgig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Initialize", "Update", "Gamma", "Kappa", "Cutoff", 
                      "Cuton", "From", "To", "Peak", "Spectrum", "Volume", 
                      "Ppm1", "Ppm2", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Coupling", "Carbon", "Expectation", 
                      "PhiStep", "PsiStep", "Rcoil", "Zero", "Proton", "Observed", 
                      "Anisotropy", "Amides", "Nitrogens", "Oxygens", "RingAtoms", 
                      "AlphasAndAmides", "Error", "Conformation", "Compressed", 
                      "Phase", "Size", "Dimensions", "Danisotropy", "OneBond", 
                      "AngleDb", "DerivFlag", "Angle_or_Dihedral", "Flags", 
                      "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Fbox", "Hydrogen", 
                      "Id", "Known", "Name", "NONE", "Point", "Cut", "Previous", 
                      "Pseudo", "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Sfbox", "Store_1", "Store_2", "Store_3", "Store_4", 
                      "Store_5", "Store_6", "Store_7", "Store_8", "Store_9", 
                      "Tag", "Vector", "Do_Lp", "Identify_Lp", "Show", "Tail", 
                      "Head", "Or_op", "And_op", "Not_op", "Comma", "Complex", 
                      "Integer", "Logical", "Real", "Double_quote_string", 
                      "Simple_name", "Simple_names", "Integers", "L_paren", 
                      "R_paren", "Colon", "Equ_op", "SPACE", "COMMENT", 
                      "SECTION_COMMENT", "LINE_COMMENT", "SET_VARIABLE", 
                      "Lt_op", "Gt_op", "Leq_op", "Geq_op", "Neq_op", "Abs", 
                      "Attr_properties", "Comparison_ops", "SPACE_ATTR", 
                      "Averaging_methods", "Simple_name_A", "Equ_op_P", 
                      "Potential_types", "Simple_name_P", "SPACE_POTE", 
                      "Noe_analysis", "SPACE_ANAL", "Exclude", "Include", 
                      "End_F", "Class_name", "Any_class", "SPACE_FLAG", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Simple_name_VE", "Double_quote_string_VE", 
                      "L_paren_VF", "L_paren_VS", "R_paren_VS", "Average_VS", 
                      "Element_VS", "Max_VS", "Min_VS", "Norm_VS", "Rms_VS", 
                      "Sum_VS", "Atom_properties_VS", "SPACE_VS" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_noe_annotation = 16
    RULE_dihedral_statement = 17
    RULE_dihedral_assign = 18
    RULE_plane_statement = 19
    RULE_group_statement = 20
    RULE_harmonic_statement = 21
    RULE_sani_statement = 22
    RULE_sani_assign = 23
    RULE_coupling_statement = 24
    RULE_coup_assign = 25
    RULE_carbon_shift_statement = 26
    RULE_carbon_shift_assign = 27
    RULE_carbon_shift_rcoil = 28
    RULE_proton_shift_statement = 29
    RULE_observed = 30
    RULE_proton_shift_rcoil = 31
    RULE_proton_shift_anisotropy = 32
    RULE_proton_shift_amides = 33
    RULE_proton_shift_carbons = 34
    RULE_proton_shift_nitrogens = 35
    RULE_proton_shift_oxygens = 36
    RULE_proton_shift_ring_atoms = 37
    RULE_proton_shift_alphas_and_amides = 38
    RULE_conformation_statement = 39
    RULE_conf_assign = 40
    RULE_diffusion_statement = 41
    RULE_dani_assign = 42
    RULE_one_bond_coupling_statement = 43
    RULE_one_bond_assign = 44
    RULE_angle_db_statement = 45
    RULE_angle_db_assign = 46
    RULE_selection = 47
    RULE_selection_expression = 48
    RULE_term = 49
    RULE_factor = 50
    RULE_number = 51
    RULE_number_f = 52
    RULE_number_s = 53
    RULE_number_a = 54
    RULE_flag_statement = 55
    RULE_vector_statement = 56
    RULE_vector_mode = 57
    RULE_vector_expression = 58
    RULE_vector_operation = 59
    RULE_vflc = 60
    RULE_vector_func_call = 61
    RULE_vector_show_property = 62

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "plane_statement", 
                   "group_statement", "harmonic_statement", "sani_statement", 
                   "sani_assign", "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s", "number_a", "flag_statement", "vector_statement", 
                   "vector_mode", "vector_expression", "vector_operation", 
                   "vflc", "vector_func_call", "vector_show_property" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Averaging=7
    Bgig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Cutoff=39
    Cuton=40
    From=41
    To=42
    Peak=43
    Spectrum=44
    Volume=45
    Ppm1=46
    Ppm2=47
    Restraints=48
    Dihedral=49
    Nassign=50
    Print_any=51
    Plane=52
    Group=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Sanisotropy=59
    Coefficients=60
    ForceConstant=61
    Coupling=62
    Carbon=63
    Expectation=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Zero=68
    Proton=69
    Observed=70
    Anisotropy=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Conformation=78
    Compressed=79
    Phase=80
    Size=81
    Dimensions=82
    Danisotropy=83
    OneBond=84
    AngleDb=85
    DerivFlag=86
    Angle_or_Dihedral=87
    Flags=88
    All=89
    Around=90
    Atom=91
    Attribute=92
    BondedTo=93
    ByGroup=94
    ByRes=95
    Chemical=96
    Fbox=97
    Hydrogen=98
    Id=99
    Known=100
    Name=101
    NONE=102
    Point=103
    Cut=104
    Previous=105
    Pseudo=106
    Residue=107
    Resname=108
    Saround=109
    SegIdentifier=110
    Sfbox=111
    Store_1=112
    Store_2=113
    Store_3=114
    Store_4=115
    Store_5=116
    Store_6=117
    Store_7=118
    Store_8=119
    Store_9=120
    Tag=121
    Vector=122
    Do_Lp=123
    Identify_Lp=124
    Show=125
    Tail=126
    Head=127
    Or_op=128
    And_op=129
    Not_op=130
    Comma=131
    Complex=132
    Integer=133
    Logical=134
    Real=135
    Double_quote_string=136
    Simple_name=137
    Simple_names=138
    Integers=139
    L_paren=140
    R_paren=141
    Colon=142
    Equ_op=143
    SPACE=144
    COMMENT=145
    SECTION_COMMENT=146
    LINE_COMMENT=147
    SET_VARIABLE=148
    Lt_op=149
    Gt_op=150
    Leq_op=151
    Geq_op=152
    Neq_op=153
    Abs=154
    Attr_properties=155
    Comparison_ops=156
    SPACE_ATTR=157
    Averaging_methods=158
    Simple_name_A=159
    Equ_op_P=160
    Potential_types=161
    Simple_name_P=162
    SPACE_POTE=163
    Noe_analysis=164
    SPACE_ANAL=165
    Exclude=166
    Include=167
    End_F=168
    Class_name=169
    Any_class=170
    SPACE_FLAG=171
    R_paren_VE=172
    Equ_op_VE=173
    Add_op_VE=174
    Sub_op_VE=175
    Mul_op_VE=176
    Div_op_VE=177
    Exp_op_VE=178
    Comma_VE=179
    Integer_VE=180
    Real_VE=181
    Atom_properties_VE=182
    Abs_VE=183
    Acos_VE=184
    Asin_VE=185
    Cos_VE=186
    Decode_VE=187
    Encode_VE=188
    Exp_VE=189
    Gauss_VE=190
    Heavy_VE=191
    Int_VE=192
    Log10_VE=193
    Log_VE=194
    Max_VE=195
    Maxw_VE=196
    Min_VE=197
    Mod_VE=198
    Norm_VE=199
    Random_VE=200
    Sign_VE=201
    Sin_VE=202
    Sqrt_VE=203
    Tan_VE=204
    Simple_name_VE=205
    Double_quote_string_VE=206
    L_paren_VF=207
    L_paren_VS=208
    R_paren_VS=209
    Average_VS=210
    Element_VS=211
    Max_VS=212
    Min_VS=213
    Norm_VS=214
    Rms_VS=215
    Sum_VS=216
    Atom_properties_VS=217
    SPACE_VS=218

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Assign) | (1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Dihedral) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Plane) | (1 << CnsMRParser.Group) | (1 << CnsMRParser.Harmonic) | (1 << CnsMRParser.Sanisotropy) | (1 << CnsMRParser.Coupling) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CnsMRParser.Proton - 69)) | (1 << (CnsMRParser.Conformation - 69)) | (1 << (CnsMRParser.Danisotropy - 69)) | (1 << (CnsMRParser.OneBond - 69)) | (1 << (CnsMRParser.AngleDb - 69)) | (1 << (CnsMRParser.Flags - 69)) | (1 << (CnsMRParser.Vector - 69)))) != 0):
                self.state = 145
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 126
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 127
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 128
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 129
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 130
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 131
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 132
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 133
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 134
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 135
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 136
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 137
                    self.angle_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 138
                    self.flag_statement()
                    pass

                elif la_ == 14:
                    self.state = 139
                    self.vector_statement()
                    pass

                elif la_ == 15:
                    self.state = 140
                    self.noe_assign()
                    pass

                elif la_ == 16:
                    self.state = 141
                    self.dihedral_assign()
                    pass

                elif la_ == 17:
                    self.state = 142
                    self.sani_assign()
                    pass

                elif la_ == 18:
                    self.state = 143
                    self.plane_statement()
                    pass

                elif la_ == 19:
                    self.state = 144
                    self.coup_assign()
                    pass


                self.state = 149
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 150
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 152
            self.match(CnsMRParser.Noe)
            self.state = 156
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 153
                    self.noe_statement() 
                self.state = 158
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 159
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 161
                self.match(CnsMRParser.Restraints)


            self.state = 164
            self.match(CnsMRParser.Dihedral)
            self.state = 168
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Scale) | (1 << CnsMRParser.Nassign) | (1 << CnsMRParser.Print_any))) != 0):
                self.state = 165
                self.dihedral_statement()
                self.state = 170
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 171
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 173
                self.match(CnsMRParser.Restraints)


            self.state = 176
            self.match(CnsMRParser.Plane)
            self.state = 180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0):
                self.state = 177
                self.plane_statement()
                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 183
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 185
                self.match(CnsMRParser.Restraints)


            self.state = 188
            self.match(CnsMRParser.Harmonic)
            self.state = 192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Exponent or _la==CnsMRParser.Normal:
                self.state = 189
                self.harmonic_statement()
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 195
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self.match(CnsMRParser.Sanisotropy)
            self.state = 201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 198
                self.sani_statement()
                self.state = 203
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 204
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self.match(CnsMRParser.Coupling)
            self.state = 210
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 207
                self.coupling_statement()
                self.state = 212
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 213
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.match(CnsMRParser.Carbon)
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.ForceConstant - 5)) | (1 << (CnsMRParser.Expectation - 5)) | (1 << (CnsMRParser.PhiStep - 5)) | (1 << (CnsMRParser.PsiStep - 5)) | (1 << (CnsMRParser.Rcoil - 5)) | (1 << (CnsMRParser.Zero - 5)))) != 0):
                self.state = 216
                self.carbon_shift_statement()
                self.state = 221
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 222
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 224
            self.match(CnsMRParser.Proton)
            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Classification) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CnsMRParser.Rcoil - 67)) | (1 << (CnsMRParser.Observed - 67)) | (1 << (CnsMRParser.Anisotropy - 67)) | (1 << (CnsMRParser.Amides - 67)) | (1 << (CnsMRParser.Nitrogens - 67)) | (1 << (CnsMRParser.Oxygens - 67)) | (1 << (CnsMRParser.RingAtoms - 67)) | (1 << (CnsMRParser.AlphasAndAmides - 67)) | (1 << (CnsMRParser.Error - 67)))) != 0):
                self.state = 225
                self.proton_shift_statement()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 231
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def conformation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(CnsMRParser.Conformation)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Compressed - 64)) | (1 << (CnsMRParser.Phase - 64)) | (1 << (CnsMRParser.Size - 64)))) != 0):
                self.state = 234
                self.conformation_statement()
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 240
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(CnsMRParser.Danisotropy)
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 243
                self.diffusion_statement()
                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 249
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(CnsMRParser.OneBond)
            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 252
                self.one_bond_coupling_statement()
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 258
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.match(CnsMRParser.AngleDb)
            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Size - 64)) | (1 << (CnsMRParser.DerivFlag - 64)))) != 0):
                self.state = 261
                self.angle_db_statement()
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 267
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def noe_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Averaging(self):
            return self.getToken(CnsMRParser.Averaging, 0)

        def Simple_name_A(self):
            return self.getToken(CnsMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(CnsMRParser.Averaging_methods, 0)

        def Bgig(self):
            return self.getToken(CnsMRParser.Bgig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(CnsMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 397
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 269
                self.match(CnsMRParser.Analysis)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 270
                    self.match(CnsMRParser.Equ_op)


                self.state = 273
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 274
                self.noe_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 275
                self.match(CnsMRParser.Asymptote)
                self.state = 276
                self.match(CnsMRParser.Simple_name)
                self.state = 277
                self.number_s()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 278
                self.match(CnsMRParser.Averaging)
                self.state = 279
                self.match(CnsMRParser.Simple_name_A)
                self.state = 280
                self.match(CnsMRParser.Averaging_methods)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 281
                self.match(CnsMRParser.Bgig)
                self.state = 282
                self.match(CnsMRParser.Simple_name)
                self.state = 283
                self.number_s()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 284
                self.match(CnsMRParser.Ceiling)
                self.state = 286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 285
                    self.match(CnsMRParser.Equ_op)


                self.state = 288
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 289
                self.match(CnsMRParser.Classification)
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 290
                    self.match(CnsMRParser.Equ_op)


                self.state = 293
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 294
                self.match(CnsMRParser.CountViol)
                self.state = 295
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 296
                self.match(CnsMRParser.Cv)
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 297
                    self.match(CnsMRParser.Equ_op)


                self.state = 300
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 301
                self.match(CnsMRParser.Den)
                self.state = 302
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 303
                self.match(CnsMRParser.Den)
                self.state = 304
                self.match(CnsMRParser.Update)
                self.state = 305
                self.match(CnsMRParser.Gamma)
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 306
                    self.match(CnsMRParser.Equ_op)


                self.state = 309
                self.number_s()
                self.state = 310
                self.match(CnsMRParser.Kappa)
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 311
                    self.match(CnsMRParser.Equ_op)


                self.state = 314
                self.number_s()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 316
                self.match(CnsMRParser.Distribute)
                self.state = 317
                self.match(CnsMRParser.Simple_name)
                self.state = 318
                self.match(CnsMRParser.Simple_name)
                self.state = 319
                self.number_s()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 323
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 320
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 325
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 326
                self.match(CnsMRParser.End)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 327
                self.match(CnsMRParser.Monomers)
                self.state = 328
                self.match(CnsMRParser.Simple_name)
                self.state = 329
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 330
                self.match(CnsMRParser.Ncount)
                self.state = 331
                self.match(CnsMRParser.Simple_name)
                self.state = 332
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 333
                self.match(CnsMRParser.Nrestraints)
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 334
                    self.match(CnsMRParser.Equ_op)


                self.state = 337
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 338
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 339
                self.match(CnsMRParser.Partition)
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 340
                    self.match(CnsMRParser.Equ_op)


                self.state = 343
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 344
                self.match(CnsMRParser.Potential)
                self.state = 345
                self.match(CnsMRParser.Simple_name_P)
                self.state = 346
                self.match(CnsMRParser.Potential_types)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 347
                self.match(CnsMRParser.Predict)
                self.state = 348
                self.predict_statement()
                self.state = 349
                self.match(CnsMRParser.End)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 351
                self.match(CnsMRParser.Print)
                self.state = 352
                self.match(CnsMRParser.Threshold)
                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 353
                    self.match(CnsMRParser.Equ_op)


                self.state = 356
                self.number_s()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 357
                self.match(CnsMRParser.Raverage)
                self.state = 361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 358
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 363
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 364
                self.match(CnsMRParser.End)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 365
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 366
                self.match(CnsMRParser.Rswitch)
                self.state = 367
                self.match(CnsMRParser.Simple_name)
                self.state = 368
                self.number_s()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 369
                self.match(CnsMRParser.Scale)
                self.state = 370
                self.match(CnsMRParser.Simple_name)
                self.state = 371
                self.number_s()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 372
                self.match(CnsMRParser.SoExponent)
                self.state = 373
                self.match(CnsMRParser.Simple_name)
                self.state = 374
                self.number_s()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 375
                self.match(CnsMRParser.SqConstant)
                self.state = 376
                self.match(CnsMRParser.Simple_name)
                self.state = 377
                self.number_s()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 378
                self.match(CnsMRParser.SqExponent)
                self.state = 379
                self.match(CnsMRParser.Simple_name)
                self.state = 380
                self.number_s()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 381
                self.match(CnsMRParser.SqOffset)
                self.state = 382
                self.match(CnsMRParser.Simple_name)
                self.state = 383
                self.number_s()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 384
                self.match(CnsMRParser.Taverage)
                self.state = 388
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 385
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 390
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                self.state = 391
                self.match(CnsMRParser.End)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 392
                self.match(CnsMRParser.Temperature)
                self.state = 394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 393
                    self.match(CnsMRParser.Equ_op)


                self.state = 396
                self.number_s()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(CnsMRParser.Assign)
            self.state = 400
            self.selection()
            self.state = 401
            self.selection()
            self.state = 402
            self.number()
            self.state = 403
            self.number()
            self.state = 404
            self.number()
            self.state = 408
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 405
                    self.noe_annotation() 
                self.state = 410
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

            self.state = 417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 411
                self.match(CnsMRParser.Or_op)
                self.state = 412
                self.selection()
                self.state = 413
                self.selection()
                self.state = 419
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 420
                self.match(CnsMRParser.Cutoff)
                self.state = 422
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 421
                    self.match(CnsMRParser.Equ_op)


                self.state = 424
                self.number_s()
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 425
                self.match(CnsMRParser.Cuton)
                self.state = 427
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 426
                    self.match(CnsMRParser.Equ_op)


                self.state = 429
                self.number_s()
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 430
                self.match(CnsMRParser.From)
                self.state = 431
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 432
                self.match(CnsMRParser.To)
                self.state = 433
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(CnsMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(CnsMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(CnsMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(CnsMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(CnsMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(CnsMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = CnsMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 436
                self.match(CnsMRParser.Peak)
                self.state = 438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 437
                    self.match(CnsMRParser.Equ_op)


                self.state = 440
                self.number_a()
                pass
            elif token in [CnsMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 441
                self.match(CnsMRParser.Spectrum)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 442
                    self.match(CnsMRParser.Equ_op)


                self.state = 445
                self.number_a()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 446
                self.match(CnsMRParser.Weight)
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 447
                    self.match(CnsMRParser.Equ_op)


                self.state = 450
                self.number_a()
                pass
            elif token in [CnsMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 451
                self.match(CnsMRParser.Volume)
                self.state = 453
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 452
                    self.match(CnsMRParser.Equ_op)


                self.state = 455
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 456
                self.match(CnsMRParser.Ppm1)
                self.state = 458
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 457
                    self.match(CnsMRParser.Equ_op)


                self.state = 460
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 461
                self.match(CnsMRParser.Ppm2)
                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 462
                    self.match(CnsMRParser.Equ_op)


                self.state = 465
                self.number_a()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 466
                self.match(CnsMRParser.Cv)
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 467
                    self.match(CnsMRParser.Equ_op)


                self.state = 470
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,0)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 496
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 473
                self.dihedral_assign()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 474
                self.match(CnsMRParser.Cv)
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 475
                    self.match(CnsMRParser.Equ_op)


                self.state = 478
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 479
                self.match(CnsMRParser.Nassign)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 480
                    self.match(CnsMRParser.Equ_op)


                self.state = 483
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 4)
                self.state = 484
                self.match(CnsMRParser.Partition)
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 485
                    self.match(CnsMRParser.Equ_op)


                self.state = 488
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 489
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 490
                self.match(CnsMRParser.Scale)
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 491
                    self.match(CnsMRParser.Equ_op)


                self.state = 494
                self.number_s()
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 7)
                self.state = 495
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(CnsMRParser.Assign)
            self.state = 499
            self.selection()
            self.state = 500
            self.selection()
            self.state = 501
            self.selection()
            self.state = 502
            self.selection()
            self.state = 503
            self.number()
            self.state = 504
            self.number()
            self.state = 505
            self.number()
            self.state = 506
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_plane_statement)
        self._la = 0 # Token type
        try:
            self.state = 518
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.match(CnsMRParser.Group)
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Selection or _la==CnsMRParser.Weight:
                    self.state = 509
                    self.group_statement()
                    self.state = 514
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 515
                self.match(CnsMRParser.End)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 516
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 517
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 530
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 520
                self.match(CnsMRParser.Selection)
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 521
                    self.match(CnsMRParser.Equ_op)


                self.state = 524
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 525
                self.match(CnsMRParser.Weight)
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 526
                    self.match(CnsMRParser.Equ_op)


                self.state = 529
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 571
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 532
                self.match(CnsMRParser.Exponent)
                self.state = 534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 533
                    self.match(CnsMRParser.Equ_op)


                self.state = 536
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 537
                self.match(CnsMRParser.Normal)
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 538
                    self.match(CnsMRParser.Equ_op)


                self.state = 541
                self.match(CnsMRParser.L_paren)
                self.state = 567
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integer, CnsMRParser.Real]:
                    self.state = 542
                    self.number_s()
                    self.state = 544
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 543
                        self.match(CnsMRParser.Comma)


                    self.state = 546
                    self.number_s()
                    self.state = 548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 547
                        self.match(CnsMRParser.Comma)


                    self.state = 550
                    self.number_s()
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 552
                    self.match(CnsMRParser.Tail)
                    self.state = 554
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 553
                        self.match(CnsMRParser.Equ_op)


                    self.state = 556
                    self.selection()
                    self.state = 558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 557
                        self.match(CnsMRParser.Comma)


                    self.state = 565
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 560
                        self.match(CnsMRParser.Head)
                        self.state = 562
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CnsMRParser.Equ_op:
                            self.state = 561
                            self.match(CnsMRParser.Equ_op)


                        self.state = 564
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 569
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 603
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 573
                self.sani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 574
                self.match(CnsMRParser.Classification)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 575
                    self.match(CnsMRParser.Equ_op)


                self.state = 578
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 579
                self.match(CnsMRParser.Coefficients)
                self.state = 580
                self.number_s()
                self.state = 581
                self.number_s()
                self.state = 582
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 584
                self.match(CnsMRParser.ForceConstant)
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 585
                    self.match(CnsMRParser.Equ_op)


                self.state = 588
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 589
                self.match(CnsMRParser.Nrestraints)
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 590
                    self.match(CnsMRParser.Equ_op)


                self.state = 593
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 594
                self.match(CnsMRParser.Potential)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 595
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 598
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 599
                self.match(CnsMRParser.Print)
                self.state = 600
                self.match(CnsMRParser.Threshold)
                self.state = 601
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 602
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.match(CnsMRParser.Assign)
            self.state = 606
            self.selection()
            self.state = 607
            self.selection()
            self.state = 608
            self.selection()
            self.state = 609
            self.selection()
            self.state = 610
            self.selection()
            self.state = 611
            self.selection()
            self.state = 612
            self.number()
            self.state = 613
            self.number()
            self.state = 615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 614
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 666
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 617
                self.coup_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 618
                self.match(CnsMRParser.Classification)
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 619
                    self.match(CnsMRParser.Equ_op)


                self.state = 622
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 623
                self.match(CnsMRParser.Coefficients)
                self.state = 624
                self.number_s()
                self.state = 625
                self.number_s()
                self.state = 626
                self.number_s()
                self.state = 627
                self.number_s()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 629
                self.match(CnsMRParser.Cv)
                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 630
                    self.match(CnsMRParser.Equ_op)


                self.state = 633
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 634
                self.match(CnsMRParser.ForceConstant)
                self.state = 635
                self.number_s()
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                    self.state = 636
                    self.number_s()


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 639
                self.match(CnsMRParser.Nrestraints)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 640
                    self.match(CnsMRParser.Equ_op)


                self.state = 643
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 644
                self.match(CnsMRParser.Partition)
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 645
                    self.match(CnsMRParser.Equ_op)


                self.state = 648
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 649
                self.match(CnsMRParser.Potential)
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 650
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 653
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 654
                self.match(CnsMRParser.Print)
                self.state = 655
                self.match(CnsMRParser.Threshold)
                self.state = 656
                self.number_s()
                self.state = 663
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 657
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 658
                    self.match(CnsMRParser.Classification)
                    self.state = 660
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 659
                        self.match(CnsMRParser.Equ_op)


                    self.state = 662
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 665
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 668
            self.match(CnsMRParser.Assign)
            self.state = 669
            self.selection()
            self.state = 670
            self.selection()
            self.state = 671
            self.selection()
            self.state = 672
            self.selection()
            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 673
                self.selection()
                self.state = 674
                self.selection()
                self.state = 675
                self.selection()
                self.state = 676
                self.selection()


            self.state = 680
            self.number()
            self.state = 681
            self.number()
            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 682
                self.number()
                self.state = 683
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 687
                self.carbon_shift_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 688
                self.match(CnsMRParser.Classification)
                self.state = 690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 689
                    self.match(CnsMRParser.Equ_op)


                self.state = 692
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 693
                self.match(CnsMRParser.Expectation)
                self.state = 694
                self.match(CnsMRParser.Integer)
                self.state = 695
                self.match(CnsMRParser.Integer)
                self.state = 696
                self.number_s()
                self.state = 697
                self.number_s()
                self.state = 698
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 700
                self.match(CnsMRParser.ForceConstant)
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 701
                    self.match(CnsMRParser.Equ_op)


                self.state = 704
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 705
                self.match(CnsMRParser.Nrestraints)
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 706
                    self.match(CnsMRParser.Equ_op)


                self.state = 709
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 710
                self.match(CnsMRParser.PhiStep)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 711
                    self.match(CnsMRParser.Equ_op)


                self.state = 714
                self.number_s()
                pass
            elif token in [CnsMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 715
                self.match(CnsMRParser.PsiStep)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 716
                    self.match(CnsMRParser.Equ_op)


                self.state = 719
                self.number_s()
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 720
                self.match(CnsMRParser.Potential)
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 721
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 724
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 725
                self.match(CnsMRParser.Print)
                self.state = 726
                self.match(CnsMRParser.Threshold)
                self.state = 727
                self.number_s()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 728
                self.carbon_shift_rcoil()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 729
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 730
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(CnsMRParser.Assign)
            self.state = 734
            self.selection()
            self.state = 735
            self.selection()
            self.state = 736
            self.selection()
            self.state = 737
            self.selection()
            self.state = 738
            self.selection()
            self.state = 739
            self.number()
            self.state = 740
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(CnsMRParser.Rcoil)
            self.state = 743
            self.selection()
            self.state = 744
            self.number_s()
            self.state = 745
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(CnsMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 747
                self.observed()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 748
                self.proton_shift_rcoil()
                pass
            elif token in [CnsMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 749
                self.proton_shift_anisotropy()
                pass
            elif token in [CnsMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 750
                self.proton_shift_amides()
                pass
            elif token in [CnsMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 751
                self.proton_shift_carbons()
                pass
            elif token in [CnsMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 752
                self.proton_shift_nitrogens()
                pass
            elif token in [CnsMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 753
                self.proton_shift_oxygens()
                pass
            elif token in [CnsMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 754
                self.proton_shift_ring_atoms()
                pass
            elif token in [CnsMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 755
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 756
                self.match(CnsMRParser.Classification)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 757
                    self.match(CnsMRParser.Equ_op)


                self.state = 760
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 761
                self.match(CnsMRParser.Error)
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 762
                    self.match(CnsMRParser.Equ_op)


                self.state = 765
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 12)
                self.state = 766
                self.match(CnsMRParser.ForceConstant)
                self.state = 767
                self.number_s()
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                    self.state = 768
                    self.number_s()


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 771
                self.match(CnsMRParser.Potential)
                self.state = 772
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 773
                self.match(CnsMRParser.Print)
                self.state = 774
                self.match(CnsMRParser.Threshold)
                self.state = 775
                self.number_s()
                self.state = 782
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 776
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 777
                    self.match(CnsMRParser.Classification)
                    self.state = 779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 778
                        self.match(CnsMRParser.Equ_op)


                    self.state = 781
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 784
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 786
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(CnsMRParser.Observed)
            self.state = 790
            self.selection()
            self.state = 792
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 791
                self.selection()


            self.state = 794
            self.number_s()
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 795
                self.number_s()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(CnsMRParser.Rcoil)
            self.state = 799
            self.selection()
            self.state = 800
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 802
            self.match(CnsMRParser.Anisotropy)
            self.state = 803
            self.selection()
            self.state = 804
            self.selection()
            self.state = 805
            self.selection()
            self.state = 806
            self.match(CnsMRParser.Simple_name)
            self.state = 808
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 807
                self.match(CnsMRParser.Logical)


            self.state = 810
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(CnsMRParser.Amides)
            self.state = 813
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 815
            self.match(CnsMRParser.Carbon)
            self.state = 816
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 818
            self.match(CnsMRParser.Nitrogens)
            self.state = 819
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(CnsMRParser.Oxygens)
            self.state = 822
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 824
            self.match(CnsMRParser.RingAtoms)
            self.state = 825
            self.match(CnsMRParser.Simple_name)
            self.state = 826
            self.selection()
            self.state = 827
            self.selection()
            self.state = 828
            self.selection()
            self.state = 829
            self.selection()
            self.state = 830
            self.selection()
            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 831
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 835
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 920
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 837
                self.conf_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 838
                self.match(CnsMRParser.Classification)
                self.state = 840
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 839
                    self.match(CnsMRParser.Equ_op)


                self.state = 842
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 843
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 844
                self.match(CnsMRParser.Expectation)
                self.state = 845
                self.match(CnsMRParser.Integer)
                self.state = 847
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 846
                    self.match(CnsMRParser.Integer)


                self.state = 850
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 849
                    self.match(CnsMRParser.Integer)


                self.state = 853
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 852
                    self.match(CnsMRParser.Integer)


                self.state = 855
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 856
                self.match(CnsMRParser.Error)
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 857
                    self.match(CnsMRParser.Equ_op)


                self.state = 860
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 861
                self.match(CnsMRParser.ForceConstant)
                self.state = 863
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 862
                    self.match(CnsMRParser.Equ_op)


                self.state = 865
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 866
                self.match(CnsMRParser.Nrestraints)
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 867
                    self.match(CnsMRParser.Equ_op)


                self.state = 870
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 871
                self.match(CnsMRParser.Phase)
                self.state = 872
                self.match(CnsMRParser.Integer)
                self.state = 873
                self.match(CnsMRParser.Integer)
                self.state = 874
                self.match(CnsMRParser.Integer)
                self.state = 878
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 875
                    self.match(CnsMRParser.Integer)
                    self.state = 876
                    self.match(CnsMRParser.Integer)
                    self.state = 877
                    self.match(CnsMRParser.Integer)


                self.state = 883
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 880
                    self.match(CnsMRParser.Integer)
                    self.state = 881
                    self.match(CnsMRParser.Integer)
                    self.state = 882
                    self.match(CnsMRParser.Integer)


                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 885
                    self.match(CnsMRParser.Integer)
                    self.state = 886
                    self.match(CnsMRParser.Integer)
                    self.state = 887
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 890
                self.match(CnsMRParser.Potential)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 891
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 894
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 895
                self.match(CnsMRParser.Print)
                self.state = 896
                self.match(CnsMRParser.Threshold)
                self.state = 897
                self.number_s()
                self.state = 904
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 898
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 899
                    self.match(CnsMRParser.Classification)
                    self.state = 901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 900
                        self.match(CnsMRParser.Equ_op)


                    self.state = 903
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 906
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 907
                self.match(CnsMRParser.Size)
                self.state = 908
                self.match(CnsMRParser.Dimensions)
                self.state = 909
                self.match(CnsMRParser.Integer)
                self.state = 911
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 910
                    self.match(CnsMRParser.Integer)


                self.state = 914
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 913
                    self.match(CnsMRParser.Integer)


                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 916
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 919
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.match(CnsMRParser.Assign)
            self.state = 923
            self.selection()
            self.state = 924
            self.selection()
            self.state = 925
            self.selection()
            self.state = 926
            self.selection()
            self.state = 932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 927
                self.selection()
                self.state = 928
                self.selection()
                self.state = 929
                self.selection()
                self.state = 930
                self.selection()


            self.state = 939
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 934
                self.selection()
                self.state = 935
                self.selection()
                self.state = 936
                self.selection()
                self.state = 937
                self.selection()


            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 941
                self.selection()
                self.state = 942
                self.selection()
                self.state = 943
                self.selection()
                self.state = 944
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 980
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 948
                self.dani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 949
                self.match(CnsMRParser.Classification)
                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 950
                    self.match(CnsMRParser.Equ_op)


                self.state = 953
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 954
                self.match(CnsMRParser.Coefficients)
                self.state = 955
                self.number_s()
                self.state = 956
                self.number_s()
                self.state = 957
                self.number_s()
                self.state = 958
                self.number_s()
                self.state = 959
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 961
                self.match(CnsMRParser.ForceConstant)
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 962
                    self.match(CnsMRParser.Equ_op)


                self.state = 965
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 966
                self.match(CnsMRParser.Nrestraints)
                self.state = 968
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 967
                    self.match(CnsMRParser.Equ_op)


                self.state = 970
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 971
                self.match(CnsMRParser.Potential)
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 972
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 975
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 976
                self.match(CnsMRParser.Print)
                self.state = 977
                self.match(CnsMRParser.Threshold)
                self.state = 978
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 979
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 982
            self.match(CnsMRParser.Assign)
            self.state = 983
            self.selection()
            self.state = 984
            self.selection()
            self.state = 985
            self.selection()
            self.state = 986
            self.selection()
            self.state = 987
            self.selection()
            self.state = 988
            self.selection()
            self.state = 989
            self.number()
            self.state = 990
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1026
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 992
                self.one_bond_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 993
                self.match(CnsMRParser.Classification)
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 994
                    self.match(CnsMRParser.Equ_op)


                self.state = 997
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 998
                self.match(CnsMRParser.Coefficients)
                self.state = 999
                self.number_s()
                self.state = 1000
                self.number_s()
                self.state = 1001
                self.number_s()
                self.state = 1002
                self.number_s()
                self.state = 1003
                self.number_s()
                self.state = 1004
                self.number_s()
                self.state = 1005
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1007
                self.match(CnsMRParser.ForceConstant)
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1008
                    self.match(CnsMRParser.Equ_op)


                self.state = 1011
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1012
                self.match(CnsMRParser.Nrestraints)
                self.state = 1014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1013
                    self.match(CnsMRParser.Equ_op)


                self.state = 1016
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1017
                self.match(CnsMRParser.Potential)
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1018
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1021
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1022
                self.match(CnsMRParser.Print)
                self.state = 1023
                self.match(CnsMRParser.Threshold)
                self.state = 1024
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1025
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1028
            self.match(CnsMRParser.Assign)
            self.state = 1029
            self.selection()
            self.state = 1030
            self.selection()
            self.state = 1031
            self.selection()
            self.state = 1032
            self.selection()
            self.state = 1033
            self.selection()
            self.state = 1034
            self.selection()
            self.state = 1035
            self.selection()
            self.state = 1036
            self.selection()
            self.state = 1037
            self.number()
            self.state = 1038
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(CnsMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1040
                self.angle_db_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1041
                self.match(CnsMRParser.Classification)
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1042
                    self.match(CnsMRParser.Equ_op)


                self.state = 1045
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1046
                self.match(CnsMRParser.DerivFlag)
                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1047
                    self.match(CnsMRParser.Equ_op)


                self.state = 1050
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1051
                self.match(CnsMRParser.Expectation)
                self.state = 1052
                self.match(CnsMRParser.Integer)
                self.state = 1053
                self.match(CnsMRParser.Integer)
                self.state = 1054
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1055
                self.match(CnsMRParser.Error)
                self.state = 1057
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1056
                    self.match(CnsMRParser.Equ_op)


                self.state = 1059
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1060
                self.match(CnsMRParser.ForceConstant)
                self.state = 1062
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1061
                    self.match(CnsMRParser.Equ_op)


                self.state = 1064
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1065
                self.match(CnsMRParser.Nrestraints)
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1066
                    self.match(CnsMRParser.Equ_op)


                self.state = 1069
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1070
                self.match(CnsMRParser.Potential)
                self.state = 1072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1071
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1074
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1075
                self.match(CnsMRParser.Print)
                self.state = 1076
                self.match(CnsMRParser.Threshold)
                self.state = 1077
                self.number_s()
                self.state = 1084
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 1078
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 1079
                    self.match(CnsMRParser.Classification)
                    self.state = 1081
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1080
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1083
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1086
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1087
                self.match(CnsMRParser.Size)
                self.state = 1088
                self.match(CnsMRParser.Angle_or_Dihedral)
                self.state = 1089
                self.match(CnsMRParser.Integer)
                self.state = 1090
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1091
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.match(CnsMRParser.Assign)
            self.state = 1095
            self.selection()
            self.state = 1096
            self.selection()
            self.state = 1097
            self.selection()
            self.state = 1098
            self.selection()
            self.state = 1099
            self.selection()
            self.state = 1100
            self.selection()
            self.state = 1101
            self.selection()
            self.state = 1102
            self.selection()
            self.state = 1103
            self.selection()
            self.state = 1104
            self.selection()
            self.state = 1105
            self.selection()
            self.state = 1107
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1106
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1109
            self.match(CnsMRParser.L_paren)
            self.state = 1110
            self.selection_expression()
            self.state = 1111
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1113
            self.term()
            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 1114
                self.match(CnsMRParser.Or_op)
                self.state = 1115
                self.term()
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1121
            self.factor(0)
            self.state = 1126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1122
                self.match(CnsMRParser.And_op)
                self.state = 1123
                self.factor(0)
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store_1(self):
            return self.getToken(CnsMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(CnsMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(CnsMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(CnsMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(CnsMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(CnsMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(CnsMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(CnsMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(CnsMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 100
        self.enterRecursionRule(localctx, 100, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1130
                self.match(CnsMRParser.L_paren)
                self.state = 1131
                self.selection_expression()
                self.state = 1132
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1134
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1135
                self.match(CnsMRParser.Atom)
                self.state = 1136
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1137
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1138
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1139
                self.match(CnsMRParser.Attribute)
                self.state = 1141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1140
                    self.match(CnsMRParser.Abs)


                self.state = 1143
                self.match(CnsMRParser.Attr_properties)
                self.state = 1144
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1145
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1146
                self.match(CnsMRParser.BondedTo)
                self.state = 1147
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1148
                self.match(CnsMRParser.ByGroup)
                self.state = 1149
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1150
                self.match(CnsMRParser.ByRes)
                self.state = 1151
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1152
                self.match(CnsMRParser.Chemical)
                self.state = 1159
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1153
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1154
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1157
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                    if la_ == 1:
                        self.state = 1155
                        self.match(CnsMRParser.Colon)
                        self.state = 1156
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1161
                self.match(CnsMRParser.Fbox)
                self.state = 1162
                self.number_f()
                self.state = 1163
                self.number_f()
                self.state = 1164
                self.number_f()
                self.state = 1165
                self.number_f()
                self.state = 1166
                self.number_f()
                self.state = 1167
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1169
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1170
                self.match(CnsMRParser.Id)
                self.state = 1171
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1172
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1173
                self.match(CnsMRParser.Name)
                self.state = 1180
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1174
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1175
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1178
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                    if la_ == 1:
                        self.state = 1176
                        self.match(CnsMRParser.Colon)
                        self.state = 1177
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1182
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1183
                self.match(CnsMRParser.Not_op)
                self.state = 1184
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1185
                self.match(CnsMRParser.Point)
                self.state = 1186
                self.match(CnsMRParser.L_paren)
                self.state = 1187
                self.number_f()
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1188
                    self.match(CnsMRParser.Comma)


                self.state = 1191
                self.number_f()
                self.state = 1193
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1192
                    self.match(CnsMRParser.Comma)


                self.state = 1195
                self.number_f()
                self.state = 1196
                self.match(CnsMRParser.R_paren)
                self.state = 1197
                self.match(CnsMRParser.Cut)
                self.state = 1198
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1200
                self.match(CnsMRParser.Point)
                self.state = 1201
                self.match(CnsMRParser.L_paren)
                self.state = 1202
                self.match(CnsMRParser.Tail)
                self.state = 1204
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1203
                    self.match(CnsMRParser.Equ_op)


                self.state = 1206
                self.selection()
                self.state = 1208
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1207
                    self.match(CnsMRParser.Comma)


                self.state = 1215
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1210
                    self.match(CnsMRParser.Head)
                    self.state = 1212
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1211
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1214
                    self.selection()


                self.state = 1217
                self.match(CnsMRParser.R_paren)
                self.state = 1218
                self.match(CnsMRParser.Cut)
                self.state = 1219
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1221
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1222
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1223
                self.match(CnsMRParser.Residue)
                self.state = 1230
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1224
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1225
                    self.match(CnsMRParser.Integer)
                    self.state = 1228
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                    if la_ == 1:
                        self.state = 1226
                        self.match(CnsMRParser.Colon)
                        self.state = 1227
                        self.match(CnsMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1232
                self.match(CnsMRParser.Resname)
                self.state = 1239
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1233
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1234
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1237
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                    if la_ == 1:
                        self.state = 1235
                        self.match(CnsMRParser.Colon)
                        self.state = 1236
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1241
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1253
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1242
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1243
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1246
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 1244
                        self.match(CnsMRParser.Colon)
                        self.state = 1245
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1248
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1251
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1249
                        self.match(CnsMRParser.Colon)
                        self.state = 1250
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1255
                self.match(CnsMRParser.Sfbox)
                self.state = 1256
                self.number_f()
                self.state = 1257
                self.number_f()
                self.state = 1258
                self.number_f()
                self.state = 1259
                self.number_f()
                self.state = 1260
                self.number_f()
                self.state = 1261
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1263
                self.match(CnsMRParser.Store_1)
                pass

            elif la_ == 25:
                self.state = 1264
                self.match(CnsMRParser.Store_2)
                pass

            elif la_ == 26:
                self.state = 1265
                self.match(CnsMRParser.Store_3)
                pass

            elif la_ == 27:
                self.state = 1266
                self.match(CnsMRParser.Store_4)
                pass

            elif la_ == 28:
                self.state = 1267
                self.match(CnsMRParser.Store_5)
                pass

            elif la_ == 29:
                self.state = 1268
                self.match(CnsMRParser.Store_6)
                pass

            elif la_ == 30:
                self.state = 1269
                self.match(CnsMRParser.Store_7)
                pass

            elif la_ == 31:
                self.state = 1270
                self.match(CnsMRParser.Store_8)
                pass

            elif la_ == 32:
                self.state = 1271
                self.match(CnsMRParser.Store_9)
                pass

            elif la_ == 33:
                self.state = 1272
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1283
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1281
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1275
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1276
                        self.match(CnsMRParser.Around)
                        self.state = 1277
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1278
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1279
                        self.match(CnsMRParser.Saround)
                        self.state = 1280
                        self.number_f()
                        pass

             
                self.state = 1285
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1286
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1288
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = CnsMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1292
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CnsMRParser.Flags, 0)

        def Include(self):
            return self.getToken(CnsMRParser.Include, 0)

        def End_F(self):
            return self.getToken(CnsMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(CnsMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Class_name)
            else:
                return self.getToken(CnsMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(CnsMRParser.Any_class, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = CnsMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1294
            self.match(CnsMRParser.Flags)
            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Exclude:
                self.state = 1295
                self.match(CnsMRParser.Exclude)
                self.state = 1303
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Include, CnsMRParser.Class_name]:
                    self.state = 1299
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CnsMRParser.Class_name:
                        self.state = 1296
                        self.match(CnsMRParser.Class_name)
                        self.state = 1301
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CnsMRParser.Any_class]:
                    self.state = 1302
                    self.match(CnsMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1307
            self.match(CnsMRParser.Include)
            self.state = 1311
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Class_name:
                self.state = 1308
                self.match(CnsMRParser.Class_name)
                self.state = 1313
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1314
            self.match(CnsMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(CnsMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = CnsMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self.match(CnsMRParser.Vector)
            self.state = 1317
            self.vector_mode()
            self.state = 1318
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(CnsMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(CnsMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(CnsMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = CnsMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 1326
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Do_Lp, CnsMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1320
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Do_Lp or _la==CnsMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1321
                self.vector_expression()
                self.state = 1322
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1324
                self.match(CnsMRParser.Show)
                self.state = 1325
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = CnsMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.match(CnsMRParser.Atom_properties_VE)
            self.state = 1331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Equ_op_VE:
                self.state = 1329
                self.match(CnsMRParser.Equ_op_VE)
                self.state = 1330
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def vector_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_operationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,i)


        def Add_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Add_op_VE)
            else:
                return self.getToken(CnsMRParser.Add_op_VE, i)

        def Sub_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Sub_op_VE)
            else:
                return self.getToken(CnsMRParser.Sub_op_VE, i)

        def Mul_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Mul_op_VE)
            else:
                return self.getToken(CnsMRParser.Mul_op_VE, i)

        def Div_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Div_op_VE)
            else:
                return self.getToken(CnsMRParser.Div_op_VE, i)

        def Exp_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Exp_op_VE)
            else:
                return self.getToken(CnsMRParser.Exp_op_VE, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = CnsMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            self.vflc()
            self.state = 1338
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1334
                    _la = self._input.LA(1)
                    if not(((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & ((1 << (CnsMRParser.Add_op_VE - 174)) | (1 << (CnsMRParser.Sub_op_VE - 174)) | (1 << (CnsMRParser.Mul_op_VE - 174)) | (1 << (CnsMRParser.Div_op_VE - 174)) | (1 << (CnsMRParser.Exp_op_VE - 174)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1335
                    self.vector_operation() 
                self.state = 1340
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(CnsMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(CnsMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(CnsMRParser.Simple_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(CnsMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = CnsMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vflc)
        try:
            self.state = 1347
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1341
                self.match(CnsMRParser.Atom_properties_VE)
                pass
            elif token in [CnsMRParser.Abs_VE, CnsMRParser.Acos_VE, CnsMRParser.Cos_VE, CnsMRParser.Decode_VE, CnsMRParser.Encode_VE, CnsMRParser.Exp_VE, CnsMRParser.Gauss_VE, CnsMRParser.Heavy_VE, CnsMRParser.Int_VE, CnsMRParser.Log10_VE, CnsMRParser.Log_VE, CnsMRParser.Max_VE, CnsMRParser.Maxw_VE, CnsMRParser.Min_VE, CnsMRParser.Mod_VE, CnsMRParser.Norm_VE, CnsMRParser.Random_VE, CnsMRParser.Sign_VE, CnsMRParser.Sin_VE, CnsMRParser.Sqrt_VE, CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1342
                self.vector_func_call()
                pass
            elif token in [CnsMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1343
                self.match(CnsMRParser.Integer_VE)
                pass
            elif token in [CnsMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1344
                self.match(CnsMRParser.Real_VE)
                pass
            elif token in [CnsMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1345
                self.match(CnsMRParser.Simple_name_VE)
                pass
            elif token in [CnsMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1346
                self.match(CnsMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(CnsMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(CnsMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(CnsMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(CnsMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(CnsMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(CnsMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(CnsMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(CnsMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(CnsMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(CnsMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(CnsMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(CnsMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(CnsMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma_VE)
            else:
                return self.getToken(CnsMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(CnsMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(CnsMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(CnsMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(CnsMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(CnsMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(CnsMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(CnsMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(CnsMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(CnsMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = CnsMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1468
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1349
                self.match(CnsMRParser.Abs_VE)
                self.state = 1350
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1351
                self.vflc()
                self.state = 1352
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1354
                self.match(CnsMRParser.Acos_VE)
                self.state = 1355
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1356
                self.vflc()
                self.state = 1357
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1359
                self.match(CnsMRParser.Cos_VE)
                self.state = 1360
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1361
                self.vflc()
                self.state = 1362
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1364
                self.match(CnsMRParser.Decode_VE)
                self.state = 1365
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1366
                self.vflc()
                self.state = 1367
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1369
                self.match(CnsMRParser.Encode_VE)
                self.state = 1370
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1371
                self.vflc()
                self.state = 1372
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1374
                self.match(CnsMRParser.Exp_VE)
                self.state = 1375
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1376
                self.vflc()
                self.state = 1377
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1379
                self.match(CnsMRParser.Gauss_VE)
                self.state = 1380
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1381
                self.vflc()
                self.state = 1382
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1384
                self.match(CnsMRParser.Heavy_VE)
                self.state = 1385
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1386
                self.vflc()
                self.state = 1387
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1389
                self.match(CnsMRParser.Int_VE)
                self.state = 1390
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1391
                self.vflc()
                self.state = 1392
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1394
                self.match(CnsMRParser.Log10_VE)
                self.state = 1395
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1396
                self.vflc()
                self.state = 1397
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1399
                self.match(CnsMRParser.Log_VE)
                self.state = 1400
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1401
                self.vflc()
                self.state = 1402
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1404
                self.match(CnsMRParser.Max_VE)
                self.state = 1405
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1406
                self.vflc()
                self.state = 1411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1407
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1408
                    self.vflc()
                    self.state = 1413
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1414
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1416
                self.match(CnsMRParser.Maxw_VE)
                self.state = 1417
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1418
                self.vflc()
                self.state = 1419
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1421
                self.match(CnsMRParser.Min_VE)
                self.state = 1422
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1423
                self.vflc()
                self.state = 1428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1424
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1425
                    self.vflc()
                    self.state = 1430
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1431
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1433
                self.match(CnsMRParser.Mod_VE)
                self.state = 1434
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1435
                self.vflc()
                self.state = 1436
                self.match(CnsMRParser.Comma_VE)
                self.state = 1437
                self.vflc()
                self.state = 1438
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1440
                self.match(CnsMRParser.Norm_VE)
                self.state = 1441
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1442
                self.vflc()
                self.state = 1443
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1445
                self.match(CnsMRParser.Random_VE)
                self.state = 1446
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1447
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1448
                self.match(CnsMRParser.Sign_VE)
                self.state = 1449
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1450
                self.vflc()
                self.state = 1451
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1453
                self.match(CnsMRParser.Sin_VE)
                self.state = 1454
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1455
                self.vflc()
                self.state = 1456
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1458
                self.match(CnsMRParser.Sqrt_VE)
                self.state = 1459
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1460
                self.vflc()
                self.state = 1461
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1463
                self.match(CnsMRParser.Tan_VE)
                self.state = 1464
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1465
                self.vflc()
                self.state = 1466
                self.match(CnsMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(CnsMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(CnsMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(CnsMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(CnsMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(CnsMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(CnsMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(CnsMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(CnsMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(CnsMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(CnsMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = CnsMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1470
            _la = self._input.LA(1)
            if not(((((_la - 210)) & ~0x3f) == 0 and ((1 << (_la - 210)) & ((1 << (CnsMRParser.Average_VS - 210)) | (1 << (CnsMRParser.Element_VS - 210)) | (1 << (CnsMRParser.Max_VS - 210)) | (1 << (CnsMRParser.Min_VS - 210)) | (1 << (CnsMRParser.Norm_VS - 210)) | (1 << (CnsMRParser.Rms_VS - 210)) | (1 << (CnsMRParser.Sum_VS - 210)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1471
            self.match(CnsMRParser.L_paren_VS)
            self.state = 1472
            self.match(CnsMRParser.Atom_properties_VS)
            self.state = 1473
            self.match(CnsMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[50] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




