# Generated from CnsMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,243,1763,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,174,8,0,10,
        0,12,0,177,9,0,1,0,1,0,1,1,1,1,5,1,183,8,1,10,1,12,1,186,9,1,1,1,
        1,1,1,2,3,2,191,8,2,1,2,1,2,5,2,195,8,2,10,2,12,2,198,9,2,1,2,1,
        2,1,3,3,3,203,8,3,1,3,1,3,5,3,207,8,3,10,3,12,3,210,9,3,1,3,1,3,
        1,4,3,4,215,8,4,1,4,1,4,5,4,219,8,4,10,4,12,4,222,9,4,1,4,1,4,1,
        5,1,5,5,5,228,8,5,10,5,12,5,231,9,5,1,5,1,5,1,6,1,6,5,6,237,8,6,
        10,6,12,6,240,9,6,1,6,1,6,1,7,1,7,5,7,246,8,7,10,7,12,7,249,9,7,
        1,7,1,7,1,8,1,8,5,8,255,8,8,10,8,12,8,258,9,8,1,8,1,8,1,9,1,9,5,
        9,264,8,9,10,9,12,9,267,9,9,1,9,1,9,1,10,1,10,5,10,273,8,10,10,10,
        12,10,276,9,10,1,10,1,10,1,11,1,11,5,11,282,8,11,10,11,12,11,285,
        9,11,1,11,1,11,1,12,1,12,5,12,291,8,12,10,12,12,12,294,9,12,1,12,
        1,12,1,13,1,13,3,13,300,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,316,8,13,1,13,1,13,1,13,
        3,13,321,8,13,1,13,1,13,1,13,1,13,1,13,3,13,328,8,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,3,13,337,8,13,1,13,1,13,1,13,3,13,342,8,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,351,8,13,10,13,12,13,354,
        9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,365,8,13,
        1,13,1,13,1,13,1,13,3,13,371,8,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,3,13,384,8,13,1,13,1,13,1,13,5,13,389,8,
        13,10,13,12,13,392,9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,5,13,416,8,13,10,13,12,13,419,9,13,1,13,1,13,1,13,3,13,424,
        8,13,1,13,3,13,427,8,13,1,14,1,14,1,14,1,14,1,14,3,14,434,8,14,1,
        14,3,14,437,8,14,1,14,5,14,440,8,14,10,14,12,14,443,9,14,1,14,1,
        14,3,14,447,8,14,1,14,1,14,1,14,3,14,452,8,14,1,14,3,14,455,8,14,
        1,14,3,14,458,8,14,5,14,460,8,14,10,14,12,14,463,9,14,1,15,1,15,
        3,15,467,8,15,1,15,1,15,1,15,3,15,472,8,15,1,15,1,15,1,15,1,15,1,
        15,3,15,479,8,15,1,16,1,16,3,16,483,8,16,1,16,1,16,1,16,3,16,488,
        8,16,1,16,1,16,1,16,3,16,493,8,16,1,16,1,16,1,16,3,16,498,8,16,1,
        16,1,16,1,16,3,16,503,8,16,1,16,1,16,1,16,3,16,508,8,16,1,16,1,16,
        1,16,3,16,513,8,16,1,16,3,16,516,8,16,1,17,1,17,1,17,1,17,1,17,3,
        17,523,8,17,1,17,1,17,1,17,3,17,528,8,17,1,17,1,17,1,17,3,17,533,
        8,17,1,17,1,17,1,17,1,17,3,17,539,8,17,1,17,1,17,3,17,543,8,17,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,5,
        19,558,8,19,10,19,12,19,561,9,19,1,19,1,19,1,19,3,19,566,8,19,1,
        20,1,20,3,20,570,8,20,1,20,1,20,1,20,3,20,575,8,20,1,20,3,20,578,
        8,20,1,21,1,21,1,21,3,21,583,8,21,1,21,1,21,1,21,3,21,588,8,21,1,
        21,1,21,1,21,3,21,593,8,21,1,21,1,21,3,21,597,8,21,1,21,1,21,1,21,
        1,21,3,21,603,8,21,1,21,1,21,3,21,607,8,21,1,21,1,21,3,21,611,8,
        21,1,21,3,21,614,8,21,3,21,616,8,21,1,21,1,21,3,21,620,8,21,1,22,
        1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,3,23,632,8,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,642,8,23,1,23,1,23,1,23,
        3,23,647,8,23,1,23,1,23,1,23,3,23,652,8,23,1,23,1,23,1,23,1,23,1,
        23,3,23,659,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,
        24,670,8,24,1,24,3,24,673,8,24,1,25,1,25,1,25,1,25,3,25,679,8,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,690,8,25,1,25,
        1,25,1,25,1,25,3,25,696,8,25,1,25,1,25,3,25,700,8,25,1,25,1,25,1,
        25,3,25,705,8,25,1,25,1,25,1,25,3,25,710,8,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,3,25,719,8,25,1,25,3,25,722,8,25,1,25,3,25,725,8,
        25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,737,8,
        26,1,26,1,26,1,26,1,26,1,26,3,26,744,8,26,1,27,1,27,1,27,1,27,3,
        27,750,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,
        27,762,8,27,1,27,1,27,1,27,3,27,767,8,27,1,27,1,27,1,27,3,27,772,
        8,27,1,27,1,27,1,27,3,27,777,8,27,1,27,1,27,1,27,3,27,782,8,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,791,8,27,1,28,1,28,1,28,1,
        28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,818,8,30,1,30,1,
        30,1,30,3,30,823,8,30,1,30,1,30,1,30,1,30,3,30,829,8,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,3,30,839,8,30,1,30,3,30,842,8,30,1,
        30,1,30,1,30,3,30,847,8,30,1,31,1,31,1,31,3,31,852,8,31,1,31,1,31,
        3,31,856,8,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,
        3,33,868,8,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,
        1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,
        892,8,38,1,39,1,39,1,39,1,40,1,40,1,40,3,40,900,8,40,1,40,1,40,1,
        40,1,40,1,40,3,40,907,8,40,1,40,3,40,910,8,40,1,40,3,40,913,8,40,
        1,40,1,40,1,40,3,40,918,8,40,1,40,1,40,1,40,3,40,923,8,40,1,40,1,
        40,1,40,3,40,928,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,
        40,938,8,40,1,40,1,40,1,40,3,40,943,8,40,1,40,1,40,1,40,3,40,948,
        8,40,1,40,1,40,3,40,952,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
        3,40,961,8,40,1,40,3,40,964,8,40,1,40,1,40,1,40,1,40,1,40,3,40,971,
        8,40,1,40,3,40,974,8,40,1,40,3,40,977,8,40,1,40,3,40,980,8,40,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,992,8,41,1,
        41,1,41,1,41,1,41,1,41,3,41,999,8,41,1,41,1,41,1,41,1,41,1,41,3,
        41,1006,8,41,1,42,1,42,1,42,3,42,1011,8,42,1,42,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,1,42,1,42,3,42,1023,8,42,1,42,1,42,1,42,3,42,1028,
        8,42,1,42,1,42,1,42,3,42,1033,8,42,1,42,1,42,1,42,1,42,1,42,3,42,
        1040,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1051,
        8,43,1,44,1,44,1,44,3,44,1056,8,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,3,44,1070,8,44,1,44,1,44,1,44,3,44,
        1075,8,44,1,44,1,44,1,44,3,44,1080,8,44,1,44,1,44,1,44,1,44,1,44,
        3,44,1087,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,46,1,46,1,46,3,46,1104,8,46,1,46,1,46,1,46,3,46,1109,
        8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1118,8,46,1,46,1,46,
        1,46,3,46,1123,8,46,1,46,1,46,1,46,3,46,1128,8,46,1,46,1,46,1,46,
        3,46,1133,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1142,8,46,
        1,46,3,46,1145,8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1153,8,46,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        3,47,1168,8,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,5,49,1177,8,49,
        10,49,12,49,1180,9,49,1,50,1,50,1,50,5,50,1185,8,50,10,50,12,50,
        1188,9,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,3,51,1202,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,3,51,1218,8,51,1,51,3,51,1221,8,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,3,51,1240,8,51,1,51,1,51,1,51,3,51,1245,8,51,1,51,
        3,51,1248,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1257,8,51,
        1,51,1,51,3,51,1261,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,3,51,1272,8,51,1,51,1,51,3,51,1276,8,51,1,51,1,51,3,51,1280,
        8,51,1,51,3,51,1283,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,3,51,1296,8,51,1,51,3,51,1299,8,51,1,51,1,51,1,51,
        1,51,1,51,3,51,1306,8,51,1,51,3,51,1309,8,51,1,51,1,51,1,51,1,51,
        1,51,3,51,1316,8,51,1,51,1,51,1,51,3,51,1321,8,51,1,51,3,51,1324,
        8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,3,51,1344,8,51,1,51,1,51,1,51,1,51,
        1,51,1,51,5,51,1352,8,51,10,51,12,51,1355,9,51,1,52,1,52,1,53,1,
        53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,5,56,1368,8,56,10,56,12,56,
        1371,9,56,1,56,3,56,1374,8,56,3,56,1376,8,56,1,56,1,56,5,56,1380,
        8,56,10,56,12,56,1383,9,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,
        58,1,58,1,58,1,58,1,58,3,58,1397,8,58,1,59,1,59,1,59,3,59,1402,8,
        59,1,60,1,60,1,60,3,60,1407,8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,
        61,3,61,1416,8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,1478,
        8,62,10,62,12,62,1481,9,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,5,62,1495,8,62,10,62,12,62,1498,9,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1537,8,62,
        1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,
        1,65,3,65,1553,8,65,1,66,1,66,3,66,1557,8,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,3,66,1569,8,66,1,66,1,66,1,67,1,67,
        1,67,1,67,1,67,5,67,1578,8,67,10,67,12,67,1581,9,67,1,67,5,67,1584,
        8,67,10,67,12,67,1587,9,67,1,67,5,67,1590,8,67,10,67,12,67,1593,
        9,67,3,67,1595,8,67,1,67,1,67,1,67,1,67,1,67,5,67,1602,8,67,10,67,
        12,67,1605,9,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,5,68,
        1616,8,68,10,68,12,68,1619,9,68,1,68,5,68,1622,8,68,10,68,12,68,
        1625,9,68,1,68,5,68,1628,8,68,10,68,12,68,1631,9,68,3,68,1633,8,
        68,1,68,1,68,1,68,1,68,1,68,5,68,1640,8,68,10,68,12,68,1643,9,68,
        1,68,1,68,1,68,1,68,1,69,1,69,1,69,1,69,1,69,5,69,1654,8,69,10,69,
        12,69,1657,9,69,1,69,5,69,1660,8,69,10,69,12,69,1663,9,69,1,69,5,
        69,1666,8,69,10,69,12,69,1669,9,69,3,69,1671,8,69,1,69,1,69,1,69,
        1,69,1,69,5,69,1678,8,69,10,69,12,69,1681,9,69,1,69,1,69,1,69,1,
        69,1,70,1,70,1,70,1,70,1,70,5,70,1692,8,70,10,70,12,70,1695,9,70,
        1,70,5,70,1698,8,70,10,70,12,70,1701,9,70,1,70,5,70,1704,8,70,10,
        70,12,70,1707,9,70,3,70,1709,8,70,1,70,1,70,1,70,1,70,1,70,5,70,
        1716,8,70,10,70,12,70,1719,9,70,1,70,1,70,1,70,1,70,1,71,1,71,1,
        71,1,71,1,71,5,71,1730,8,71,10,71,12,71,1733,9,71,1,71,5,71,1736,
        8,71,10,71,12,71,1739,9,71,1,71,5,71,1742,8,71,10,71,12,71,1745,
        9,71,3,71,1747,8,71,1,71,1,71,1,71,1,71,1,71,5,71,1754,8,71,10,71,
        12,71,1757,9,71,1,71,1,71,1,71,1,71,1,71,3,352,390,417,1,102,72,
        0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,
        46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,
        90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
        126,128,130,132,134,136,138,140,142,0,8,1,0,146,147,2,0,139,139,
        148,148,3,0,139,139,141,141,158,158,2,0,139,139,141,141,1,0,123,
        124,1,0,185,189,1,0,224,230,2,0,129,129,139,139,2118,0,175,1,0,0,
        0,2,180,1,0,0,0,4,190,1,0,0,0,6,202,1,0,0,0,8,214,1,0,0,0,10,225,
        1,0,0,0,12,234,1,0,0,0,14,243,1,0,0,0,16,252,1,0,0,0,18,261,1,0,
        0,0,20,270,1,0,0,0,22,279,1,0,0,0,24,288,1,0,0,0,26,426,1,0,0,0,
        28,428,1,0,0,0,30,478,1,0,0,0,32,515,1,0,0,0,34,542,1,0,0,0,36,544,
        1,0,0,0,38,565,1,0,0,0,40,577,1,0,0,0,42,619,1,0,0,0,44,621,1,0,
        0,0,46,658,1,0,0,0,48,660,1,0,0,0,50,724,1,0,0,0,52,726,1,0,0,0,
        54,790,1,0,0,0,56,792,1,0,0,0,58,801,1,0,0,0,60,846,1,0,0,0,62,848,
        1,0,0,0,64,857,1,0,0,0,66,861,1,0,0,0,68,871,1,0,0,0,70,874,1,0,
        0,0,72,877,1,0,0,0,74,880,1,0,0,0,76,883,1,0,0,0,78,893,1,0,0,0,
        80,979,1,0,0,0,82,981,1,0,0,0,84,1039,1,0,0,0,86,1041,1,0,0,0,88,
        1086,1,0,0,0,90,1088,1,0,0,0,92,1152,1,0,0,0,94,1154,1,0,0,0,96,
        1169,1,0,0,0,98,1173,1,0,0,0,100,1181,1,0,0,0,102,1343,1,0,0,0,104,
        1356,1,0,0,0,106,1358,1,0,0,0,108,1360,1,0,0,0,110,1362,1,0,0,0,
        112,1364,1,0,0,0,114,1386,1,0,0,0,116,1396,1,0,0,0,118,1398,1,0,
        0,0,120,1403,1,0,0,0,122,1415,1,0,0,0,124,1536,1,0,0,0,126,1538,
        1,0,0,0,128,1543,1,0,0,0,130,1549,1,0,0,0,132,1554,1,0,0,0,134,1572,
        1,0,0,0,136,1610,1,0,0,0,138,1648,1,0,0,0,140,1686,1,0,0,0,142,1724,
        1,0,0,0,144,174,3,2,1,0,145,174,3,4,2,0,146,174,3,6,3,0,147,174,
        3,8,4,0,148,174,3,10,5,0,149,174,3,12,6,0,150,174,3,14,7,0,151,174,
        3,16,8,0,152,174,3,18,9,0,153,174,3,20,10,0,154,174,3,22,11,0,155,
        174,3,24,12,0,156,174,3,112,56,0,157,174,3,114,57,0,158,174,3,128,
        64,0,159,174,3,132,66,0,160,174,3,134,67,0,161,174,3,136,68,0,162,
        174,3,138,69,0,163,174,3,140,70,0,164,174,3,142,71,0,165,174,3,28,
        14,0,166,174,3,36,18,0,167,174,3,48,24,0,168,174,3,38,19,0,169,174,
        3,44,22,0,170,174,3,52,26,0,171,174,3,56,28,0,172,174,3,62,31,0,
        173,144,1,0,0,0,173,145,1,0,0,0,173,146,1,0,0,0,173,147,1,0,0,0,
        173,148,1,0,0,0,173,149,1,0,0,0,173,150,1,0,0,0,173,151,1,0,0,0,
        173,152,1,0,0,0,173,153,1,0,0,0,173,154,1,0,0,0,173,155,1,0,0,0,
        173,156,1,0,0,0,173,157,1,0,0,0,173,158,1,0,0,0,173,159,1,0,0,0,
        173,160,1,0,0,0,173,161,1,0,0,0,173,162,1,0,0,0,173,163,1,0,0,0,
        173,164,1,0,0,0,173,165,1,0,0,0,173,166,1,0,0,0,173,167,1,0,0,0,
        173,168,1,0,0,0,173,169,1,0,0,0,173,170,1,0,0,0,173,171,1,0,0,0,
        173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,
        176,178,1,0,0,0,177,175,1,0,0,0,178,179,5,0,0,1,179,1,1,0,0,0,180,
        184,5,3,0,0,181,183,3,26,13,0,182,181,1,0,0,0,183,186,1,0,0,0,184,
        182,1,0,0,0,184,185,1,0,0,0,185,187,1,0,0,0,186,184,1,0,0,0,187,
        188,5,2,0,0,188,3,1,0,0,0,189,191,5,48,0,0,190,189,1,0,0,0,190,191,
        1,0,0,0,191,192,1,0,0,0,192,196,5,49,0,0,193,195,3,34,17,0,194,193,
        1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,1,0,0,0,197,199,
        1,0,0,0,198,196,1,0,0,0,199,200,5,2,0,0,200,5,1,0,0,0,201,203,5,
        48,0,0,202,201,1,0,0,0,202,203,1,0,0,0,203,204,1,0,0,0,204,208,5,
        52,0,0,205,207,3,38,19,0,206,205,1,0,0,0,207,210,1,0,0,0,208,206,
        1,0,0,0,208,209,1,0,0,0,209,211,1,0,0,0,210,208,1,0,0,0,211,212,
        5,2,0,0,212,7,1,0,0,0,213,215,5,48,0,0,214,213,1,0,0,0,214,215,1,
        0,0,0,215,216,1,0,0,0,216,220,5,56,0,0,217,219,3,42,21,0,218,217,
        1,0,0,0,219,222,1,0,0,0,220,218,1,0,0,0,220,221,1,0,0,0,221,223,
        1,0,0,0,222,220,1,0,0,0,223,224,5,2,0,0,224,9,1,0,0,0,225,229,5,
        59,0,0,226,228,3,46,23,0,227,226,1,0,0,0,228,231,1,0,0,0,229,227,
        1,0,0,0,229,230,1,0,0,0,230,232,1,0,0,0,231,229,1,0,0,0,232,233,
        5,2,0,0,233,11,1,0,0,0,234,238,5,62,0,0,235,237,3,50,25,0,236,235,
        1,0,0,0,237,240,1,0,0,0,238,236,1,0,0,0,238,239,1,0,0,0,239,241,
        1,0,0,0,240,238,1,0,0,0,241,242,5,2,0,0,242,13,1,0,0,0,243,247,5,
        63,0,0,244,246,3,54,27,0,245,244,1,0,0,0,246,249,1,0,0,0,247,245,
        1,0,0,0,247,248,1,0,0,0,248,250,1,0,0,0,249,247,1,0,0,0,250,251,
        5,2,0,0,251,15,1,0,0,0,252,256,5,69,0,0,253,255,3,60,30,0,254,253,
        1,0,0,0,255,258,1,0,0,0,256,254,1,0,0,0,256,257,1,0,0,0,257,259,
        1,0,0,0,258,256,1,0,0,0,259,260,5,2,0,0,260,17,1,0,0,0,261,265,5,
        78,0,0,262,264,3,80,40,0,263,262,1,0,0,0,264,267,1,0,0,0,265,263,
        1,0,0,0,265,266,1,0,0,0,266,268,1,0,0,0,267,265,1,0,0,0,268,269,
        5,2,0,0,269,19,1,0,0,0,270,274,5,83,0,0,271,273,3,84,42,0,272,271,
        1,0,0,0,273,276,1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,277,
        1,0,0,0,276,274,1,0,0,0,277,278,5,2,0,0,278,21,1,0,0,0,279,283,5,
        84,0,0,280,282,3,88,44,0,281,280,1,0,0,0,282,285,1,0,0,0,283,281,
        1,0,0,0,283,284,1,0,0,0,284,286,1,0,0,0,285,283,1,0,0,0,286,287,
        5,2,0,0,287,23,1,0,0,0,288,292,5,85,0,0,289,291,3,92,46,0,290,289,
        1,0,0,0,291,294,1,0,0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,295,
        1,0,0,0,294,292,1,0,0,0,295,296,5,2,0,0,296,25,1,0,0,0,297,299,5,
        4,0,0,298,300,5,152,0,0,299,298,1,0,0,0,299,300,1,0,0,0,300,301,
        1,0,0,0,301,427,5,175,0,0,302,427,3,28,14,0,303,427,3,134,67,0,304,
        305,5,6,0,0,305,306,5,146,0,0,306,427,3,108,54,0,307,308,5,7,0,0,
        308,309,5,169,0,0,309,427,5,168,0,0,310,311,5,8,0,0,311,312,5,146,
        0,0,312,427,3,108,54,0,313,315,5,9,0,0,314,316,5,152,0,0,315,314,
        1,0,0,0,315,316,1,0,0,0,316,317,1,0,0,0,317,427,3,108,54,0,318,320,
        5,10,0,0,319,321,5,152,0,0,320,319,1,0,0,0,320,321,1,0,0,0,321,322,
        1,0,0,0,322,427,5,146,0,0,323,324,5,11,0,0,324,427,5,146,0,0,325,
        327,5,12,0,0,326,328,5,152,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,
        329,1,0,0,0,329,427,5,139,0,0,330,331,5,13,0,0,331,427,5,35,0,0,
        332,333,5,13,0,0,333,334,5,36,0,0,334,336,5,37,0,0,335,337,5,152,
        0,0,336,335,1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,339,3,108,
        54,0,339,341,5,38,0,0,340,342,5,152,0,0,341,340,1,0,0,0,341,342,
        1,0,0,0,342,343,1,0,0,0,343,344,3,108,54,0,344,427,1,0,0,0,345,346,
        5,14,0,0,346,347,5,146,0,0,347,348,5,146,0,0,348,427,3,108,54,0,
        349,351,5,15,0,0,350,349,1,0,0,0,351,354,1,0,0,0,352,353,1,0,0,0,
        352,350,1,0,0,0,353,355,1,0,0,0,354,352,1,0,0,0,355,427,5,2,0,0,
        356,357,5,16,0,0,357,358,5,146,0,0,358,427,5,139,0,0,359,360,5,17,
        0,0,360,361,5,146,0,0,361,427,5,139,0,0,362,364,5,18,0,0,363,365,
        5,152,0,0,364,363,1,0,0,0,364,365,1,0,0,0,365,366,1,0,0,0,366,427,
        5,139,0,0,367,427,5,19,0,0,368,370,5,20,0,0,369,371,5,152,0,0,370,
        369,1,0,0,0,370,371,1,0,0,0,371,372,1,0,0,0,372,427,5,139,0,0,373,
        374,5,21,0,0,374,375,5,173,0,0,375,427,5,172,0,0,376,377,5,22,0,
        0,377,378,3,30,15,0,378,379,5,2,0,0,379,427,1,0,0,0,380,381,5,23,
        0,0,381,383,5,25,0,0,382,384,5,152,0,0,383,382,1,0,0,0,383,384,1,
        0,0,0,384,385,1,0,0,0,385,427,3,108,54,0,386,390,5,24,0,0,387,389,
        5,146,0,0,388,387,1,0,0,0,389,392,1,0,0,0,390,391,1,0,0,0,390,388,
        1,0,0,0,391,393,1,0,0,0,392,390,1,0,0,0,393,427,5,2,0,0,394,427,
        5,26,0,0,395,396,5,27,0,0,396,397,5,146,0,0,397,427,3,108,54,0,398,
        399,5,28,0,0,399,400,5,146,0,0,400,427,3,108,54,0,401,402,5,29,0,
        0,402,403,5,146,0,0,403,427,3,108,54,0,404,405,5,30,0,0,405,406,
        5,146,0,0,406,427,3,108,54,0,407,408,5,31,0,0,408,409,5,146,0,0,
        409,427,3,108,54,0,410,411,5,32,0,0,411,412,5,146,0,0,412,427,3,
        108,54,0,413,417,5,33,0,0,414,416,5,146,0,0,415,414,1,0,0,0,416,
        419,1,0,0,0,417,418,1,0,0,0,417,415,1,0,0,0,418,420,1,0,0,0,419,
        417,1,0,0,0,420,427,5,2,0,0,421,423,5,34,0,0,422,424,5,152,0,0,423,
        422,1,0,0,0,423,424,1,0,0,0,424,425,1,0,0,0,425,427,3,108,54,0,426,
        297,1,0,0,0,426,302,1,0,0,0,426,303,1,0,0,0,426,304,1,0,0,0,426,
        307,1,0,0,0,426,310,1,0,0,0,426,313,1,0,0,0,426,318,1,0,0,0,426,
        323,1,0,0,0,426,325,1,0,0,0,426,330,1,0,0,0,426,332,1,0,0,0,426,
        345,1,0,0,0,426,352,1,0,0,0,426,356,1,0,0,0,426,359,1,0,0,0,426,
        362,1,0,0,0,426,367,1,0,0,0,426,368,1,0,0,0,426,373,1,0,0,0,426,
        376,1,0,0,0,426,380,1,0,0,0,426,386,1,0,0,0,426,394,1,0,0,0,426,
        395,1,0,0,0,426,398,1,0,0,0,426,401,1,0,0,0,426,404,1,0,0,0,426,
        407,1,0,0,0,426,410,1,0,0,0,426,413,1,0,0,0,426,421,1,0,0,0,427,
        27,1,0,0,0,428,429,5,5,0,0,429,430,3,96,48,0,430,431,3,96,48,0,431,
        433,3,104,52,0,432,434,3,104,52,0,433,432,1,0,0,0,433,434,1,0,0,
        0,434,436,1,0,0,0,435,437,3,104,52,0,436,435,1,0,0,0,436,437,1,0,
        0,0,437,441,1,0,0,0,438,440,3,32,16,0,439,438,1,0,0,0,440,443,1,
        0,0,0,441,439,1,0,0,0,441,442,1,0,0,0,442,461,1,0,0,0,443,441,1,
        0,0,0,444,446,5,134,0,0,445,447,5,5,0,0,446,445,1,0,0,0,446,447,
        1,0,0,0,447,448,1,0,0,0,448,449,3,96,48,0,449,451,3,96,48,0,450,
        452,3,104,52,0,451,450,1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,
        455,3,104,52,0,454,453,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,
        458,3,104,52,0,457,456,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,
        444,1,0,0,0,460,463,1,0,0,0,461,459,1,0,0,0,461,462,1,0,0,0,462,
        29,1,0,0,0,463,461,1,0,0,0,464,466,5,39,0,0,465,467,5,152,0,0,466,
        465,1,0,0,0,466,467,1,0,0,0,467,468,1,0,0,0,468,479,3,108,54,0,469,
        471,5,40,0,0,470,472,5,152,0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,
        473,1,0,0,0,473,479,3,108,54,0,474,475,5,41,0,0,475,479,3,96,48,
        0,476,477,5,42,0,0,477,479,3,96,48,0,478,464,1,0,0,0,478,469,1,0,
        0,0,478,474,1,0,0,0,478,476,1,0,0,0,479,31,1,0,0,0,480,482,5,43,
        0,0,481,483,5,152,0,0,482,481,1,0,0,0,482,483,1,0,0,0,483,484,1,
        0,0,0,484,516,3,110,55,0,485,487,5,44,0,0,486,488,5,152,0,0,487,
        486,1,0,0,0,487,488,1,0,0,0,488,489,1,0,0,0,489,516,3,110,55,0,490,
        492,5,55,0,0,491,493,5,152,0,0,492,491,1,0,0,0,492,493,1,0,0,0,493,
        494,1,0,0,0,494,516,3,110,55,0,495,497,5,45,0,0,496,498,5,152,0,
        0,497,496,1,0,0,0,497,498,1,0,0,0,498,499,1,0,0,0,499,516,3,110,
        55,0,500,502,5,46,0,0,501,503,5,152,0,0,502,501,1,0,0,0,502,503,
        1,0,0,0,503,504,1,0,0,0,504,516,3,110,55,0,505,507,5,47,0,0,506,
        508,5,152,0,0,507,506,1,0,0,0,507,508,1,0,0,0,508,509,1,0,0,0,509,
        516,3,110,55,0,510,512,5,12,0,0,511,513,5,152,0,0,512,511,1,0,0,
        0,512,513,1,0,0,0,513,514,1,0,0,0,514,516,3,110,55,0,515,480,1,0,
        0,0,515,485,1,0,0,0,515,490,1,0,0,0,515,495,1,0,0,0,515,500,1,0,
        0,0,515,505,1,0,0,0,515,510,1,0,0,0,516,33,1,0,0,0,517,543,3,114,
        57,0,518,543,3,36,18,0,519,543,3,136,68,0,520,522,5,12,0,0,521,523,
        5,152,0,0,522,521,1,0,0,0,522,523,1,0,0,0,523,524,1,0,0,0,524,543,
        5,139,0,0,525,527,5,50,0,0,526,528,5,152,0,0,527,526,1,0,0,0,527,
        528,1,0,0,0,528,529,1,0,0,0,529,543,5,139,0,0,530,532,5,20,0,0,531,
        533,5,152,0,0,532,531,1,0,0,0,532,533,1,0,0,0,533,534,1,0,0,0,534,
        543,5,139,0,0,535,543,5,26,0,0,536,538,5,28,0,0,537,539,5,152,0,
        0,538,537,1,0,0,0,538,539,1,0,0,0,539,540,1,0,0,0,540,543,3,108,
        54,0,541,543,5,51,0,0,542,517,1,0,0,0,542,518,1,0,0,0,542,519,1,
        0,0,0,542,520,1,0,0,0,542,525,1,0,0,0,542,530,1,0,0,0,542,535,1,
        0,0,0,542,536,1,0,0,0,542,541,1,0,0,0,543,35,1,0,0,0,544,545,5,5,
        0,0,545,546,3,96,48,0,546,547,3,96,48,0,547,548,3,96,48,0,548,549,
        3,96,48,0,549,550,3,104,52,0,550,551,3,104,52,0,551,552,3,104,52,
        0,552,553,5,139,0,0,553,37,1,0,0,0,554,566,3,114,57,0,555,559,5,
        53,0,0,556,558,3,40,20,0,557,556,1,0,0,0,558,561,1,0,0,0,559,557,
        1,0,0,0,559,560,1,0,0,0,560,562,1,0,0,0,561,559,1,0,0,0,562,566,
        5,2,0,0,563,566,5,35,0,0,564,566,5,51,0,0,565,554,1,0,0,0,565,555,
        1,0,0,0,565,563,1,0,0,0,565,564,1,0,0,0,566,39,1,0,0,0,567,569,5,
        54,0,0,568,570,5,152,0,0,569,568,1,0,0,0,569,570,1,0,0,0,570,571,
        1,0,0,0,571,578,3,96,48,0,572,574,5,55,0,0,573,575,5,152,0,0,574,
        573,1,0,0,0,574,575,1,0,0,0,575,576,1,0,0,0,576,578,3,108,54,0,577,
        567,1,0,0,0,577,572,1,0,0,0,578,41,1,0,0,0,579,620,3,114,57,0,580,
        582,5,57,0,0,581,583,5,152,0,0,582,581,1,0,0,0,582,583,1,0,0,0,583,
        584,1,0,0,0,584,620,5,139,0,0,585,587,5,58,0,0,586,588,5,152,0,0,
        587,586,1,0,0,0,587,588,1,0,0,0,588,589,1,0,0,0,589,615,5,149,0,
        0,590,592,3,108,54,0,591,593,5,137,0,0,592,591,1,0,0,0,592,593,1,
        0,0,0,593,594,1,0,0,0,594,596,3,108,54,0,595,597,5,137,0,0,596,595,
        1,0,0,0,596,597,1,0,0,0,597,598,1,0,0,0,598,599,3,108,54,0,599,616,
        1,0,0,0,600,602,5,132,0,0,601,603,5,152,0,0,602,601,1,0,0,0,602,
        603,1,0,0,0,603,604,1,0,0,0,604,606,3,96,48,0,605,607,5,137,0,0,
        606,605,1,0,0,0,606,607,1,0,0,0,607,613,1,0,0,0,608,610,5,133,0,
        0,609,611,5,152,0,0,610,609,1,0,0,0,610,611,1,0,0,0,611,612,1,0,
        0,0,612,614,3,96,48,0,613,608,1,0,0,0,613,614,1,0,0,0,614,616,1,
        0,0,0,615,590,1,0,0,0,615,600,1,0,0,0,616,617,1,0,0,0,617,618,5,
        150,0,0,618,620,1,0,0,0,619,579,1,0,0,0,619,580,1,0,0,0,619,585,
        1,0,0,0,620,43,1,0,0,0,621,622,5,5,0,0,622,623,3,96,48,0,623,624,
        3,104,52,0,624,625,3,104,52,0,625,626,3,104,52,0,626,45,1,0,0,0,
        627,659,3,48,24,0,628,659,3,138,69,0,629,631,5,10,0,0,630,632,5,
        152,0,0,631,630,1,0,0,0,631,632,1,0,0,0,632,633,1,0,0,0,633,659,
        5,146,0,0,634,635,5,60,0,0,635,636,3,108,54,0,636,637,3,108,54,0,
        637,638,3,108,54,0,638,659,1,0,0,0,639,641,5,61,0,0,640,642,5,152,
        0,0,641,640,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,659,3,108,
        54,0,644,646,5,18,0,0,645,647,5,152,0,0,646,645,1,0,0,0,646,647,
        1,0,0,0,647,648,1,0,0,0,648,659,5,139,0,0,649,651,5,21,0,0,650,652,
        5,171,0,0,651,650,1,0,0,0,651,652,1,0,0,0,652,653,1,0,0,0,653,659,
        5,172,0,0,654,655,5,23,0,0,655,656,5,25,0,0,656,659,3,108,54,0,657,
        659,5,26,0,0,658,627,1,0,0,0,658,628,1,0,0,0,658,629,1,0,0,0,658,
        634,1,0,0,0,658,639,1,0,0,0,658,644,1,0,0,0,658,649,1,0,0,0,658,
        654,1,0,0,0,658,657,1,0,0,0,659,47,1,0,0,0,660,661,5,5,0,0,661,662,
        3,96,48,0,662,663,3,96,48,0,663,664,3,96,48,0,664,665,3,96,48,0,
        665,666,3,96,48,0,666,667,3,96,48,0,667,669,3,104,52,0,668,670,3,
        104,52,0,669,668,1,0,0,0,669,670,1,0,0,0,670,672,1,0,0,0,671,673,
        3,104,52,0,672,671,1,0,0,0,672,673,1,0,0,0,673,49,1,0,0,0,674,725,
        3,52,26,0,675,725,3,140,70,0,676,678,5,10,0,0,677,679,5,152,0,0,
        678,677,1,0,0,0,678,679,1,0,0,0,679,680,1,0,0,0,680,725,5,146,0,
        0,681,682,5,60,0,0,682,683,3,108,54,0,683,684,3,108,54,0,684,685,
        3,108,54,0,685,686,3,108,54,0,686,725,1,0,0,0,687,689,5,12,0,0,688,
        690,5,152,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,691,1,0,0,0,691,
        725,5,139,0,0,692,693,5,61,0,0,693,695,3,108,54,0,694,696,3,108,
        54,0,695,694,1,0,0,0,695,696,1,0,0,0,696,725,1,0,0,0,697,699,5,18,
        0,0,698,700,5,152,0,0,699,698,1,0,0,0,699,700,1,0,0,0,700,701,1,
        0,0,0,701,725,5,139,0,0,702,704,5,20,0,0,703,705,5,152,0,0,704,703,
        1,0,0,0,704,705,1,0,0,0,705,706,1,0,0,0,706,725,5,139,0,0,707,709,
        5,21,0,0,708,710,5,171,0,0,709,708,1,0,0,0,709,710,1,0,0,0,710,711,
        1,0,0,0,711,725,5,172,0,0,712,713,5,23,0,0,713,714,5,25,0,0,714,
        721,3,108,54,0,715,722,5,89,0,0,716,718,5,10,0,0,717,719,5,152,0,
        0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,722,5,146,
        0,0,721,715,1,0,0,0,721,716,1,0,0,0,722,725,1,0,0,0,723,725,5,26,
        0,0,724,674,1,0,0,0,724,675,1,0,0,0,724,676,1,0,0,0,724,681,1,0,
        0,0,724,687,1,0,0,0,724,692,1,0,0,0,724,697,1,0,0,0,724,702,1,0,
        0,0,724,707,1,0,0,0,724,712,1,0,0,0,724,723,1,0,0,0,725,51,1,0,0,
        0,726,727,5,5,0,0,727,728,3,96,48,0,728,729,3,96,48,0,729,730,3,
        96,48,0,730,736,3,96,48,0,731,732,3,96,48,0,732,733,3,96,48,0,733,
        734,3,96,48,0,734,735,3,96,48,0,735,737,1,0,0,0,736,731,1,0,0,0,
        736,737,1,0,0,0,737,738,1,0,0,0,738,739,3,104,52,0,739,743,3,104,
        52,0,740,741,3,104,52,0,741,742,3,104,52,0,742,744,1,0,0,0,743,740,
        1,0,0,0,743,744,1,0,0,0,744,53,1,0,0,0,745,791,3,56,28,0,746,791,
        3,142,71,0,747,749,5,10,0,0,748,750,5,152,0,0,749,748,1,0,0,0,749,
        750,1,0,0,0,750,751,1,0,0,0,751,791,5,146,0,0,752,753,5,64,0,0,753,
        754,5,139,0,0,754,755,5,139,0,0,755,756,3,108,54,0,756,757,3,108,
        54,0,757,758,3,108,54,0,758,791,1,0,0,0,759,761,5,61,0,0,760,762,
        5,152,0,0,761,760,1,0,0,0,761,762,1,0,0,0,762,763,1,0,0,0,763,791,
        3,108,54,0,764,766,5,18,0,0,765,767,5,152,0,0,766,765,1,0,0,0,766,
        767,1,0,0,0,767,768,1,0,0,0,768,791,5,139,0,0,769,771,5,65,0,0,770,
        772,5,152,0,0,771,770,1,0,0,0,771,772,1,0,0,0,772,773,1,0,0,0,773,
        791,3,108,54,0,774,776,5,66,0,0,775,777,5,152,0,0,776,775,1,0,0,
        0,776,777,1,0,0,0,777,778,1,0,0,0,778,791,3,108,54,0,779,781,5,21,
        0,0,780,782,5,171,0,0,781,780,1,0,0,0,781,782,1,0,0,0,782,783,1,
        0,0,0,783,791,5,172,0,0,784,785,5,23,0,0,785,786,5,25,0,0,786,791,
        3,108,54,0,787,791,3,58,29,0,788,791,5,26,0,0,789,791,5,68,0,0,790,
        745,1,0,0,0,790,746,1,0,0,0,790,747,1,0,0,0,790,752,1,0,0,0,790,
        759,1,0,0,0,790,764,1,0,0,0,790,769,1,0,0,0,790,774,1,0,0,0,790,
        779,1,0,0,0,790,784,1,0,0,0,790,787,1,0,0,0,790,788,1,0,0,0,790,
        789,1,0,0,0,791,55,1,0,0,0,792,793,5,5,0,0,793,794,3,96,48,0,794,
        795,3,96,48,0,795,796,3,96,48,0,796,797,3,96,48,0,797,798,3,96,48,
        0,798,799,3,104,52,0,799,800,3,104,52,0,800,57,1,0,0,0,801,802,5,
        67,0,0,802,803,3,96,48,0,803,804,3,104,52,0,804,805,3,104,52,0,805,
        59,1,0,0,0,806,847,3,62,31,0,807,847,3,64,32,0,808,847,3,66,33,0,
        809,847,3,68,34,0,810,847,3,70,35,0,811,847,3,72,36,0,812,847,3,
        74,37,0,813,847,3,76,38,0,814,847,3,78,39,0,815,817,5,10,0,0,816,
        818,5,152,0,0,817,816,1,0,0,0,817,818,1,0,0,0,818,819,1,0,0,0,819,
        847,5,146,0,0,820,822,5,77,0,0,821,823,5,152,0,0,822,821,1,0,0,0,
        822,823,1,0,0,0,823,824,1,0,0,0,824,847,3,108,54,0,825,826,5,61,
        0,0,826,828,3,108,54,0,827,829,3,108,54,0,828,827,1,0,0,0,828,829,
        1,0,0,0,829,847,1,0,0,0,830,831,5,21,0,0,831,847,5,172,0,0,832,833,
        5,23,0,0,833,834,5,25,0,0,834,841,3,108,54,0,835,842,5,89,0,0,836,
        838,5,10,0,0,837,839,5,152,0,0,838,837,1,0,0,0,838,839,1,0,0,0,839,
        840,1,0,0,0,840,842,5,146,0,0,841,835,1,0,0,0,841,836,1,0,0,0,842,
        843,1,0,0,0,843,844,5,146,0,0,844,847,1,0,0,0,845,847,5,26,0,0,846,
        806,1,0,0,0,846,807,1,0,0,0,846,808,1,0,0,0,846,809,1,0,0,0,846,
        810,1,0,0,0,846,811,1,0,0,0,846,812,1,0,0,0,846,813,1,0,0,0,846,
        814,1,0,0,0,846,815,1,0,0,0,846,820,1,0,0,0,846,825,1,0,0,0,846,
        830,1,0,0,0,846,832,1,0,0,0,846,845,1,0,0,0,847,61,1,0,0,0,848,849,
        5,70,0,0,849,851,3,96,48,0,850,852,3,96,48,0,851,850,1,0,0,0,851,
        852,1,0,0,0,852,853,1,0,0,0,853,855,3,104,52,0,854,856,3,104,52,
        0,855,854,1,0,0,0,855,856,1,0,0,0,856,63,1,0,0,0,857,858,5,67,0,
        0,858,859,3,96,48,0,859,860,3,104,52,0,860,65,1,0,0,0,861,862,5,
        71,0,0,862,863,3,96,48,0,863,864,3,96,48,0,864,865,3,96,48,0,865,
        867,5,146,0,0,866,868,5,140,0,0,867,866,1,0,0,0,867,868,1,0,0,0,
        868,869,1,0,0,0,869,870,5,146,0,0,870,67,1,0,0,0,871,872,5,72,0,
        0,872,873,3,96,48,0,873,69,1,0,0,0,874,875,5,63,0,0,875,876,3,96,
        48,0,876,71,1,0,0,0,877,878,5,73,0,0,878,879,3,96,48,0,879,73,1,
        0,0,0,880,881,5,74,0,0,881,882,3,96,48,0,882,75,1,0,0,0,883,884,
        5,75,0,0,884,885,5,146,0,0,885,886,3,96,48,0,886,887,3,96,48,0,887,
        888,3,96,48,0,888,889,3,96,48,0,889,891,3,96,48,0,890,892,3,96,48,
        0,891,890,1,0,0,0,891,892,1,0,0,0,892,77,1,0,0,0,893,894,5,76,0,
        0,894,895,3,96,48,0,895,79,1,0,0,0,896,980,3,82,41,0,897,899,5,10,
        0,0,898,900,5,152,0,0,899,898,1,0,0,0,899,900,1,0,0,0,900,901,1,
        0,0,0,901,980,5,146,0,0,902,980,5,79,0,0,903,904,5,64,0,0,904,906,
        5,139,0,0,905,907,5,139,0,0,906,905,1,0,0,0,906,907,1,0,0,0,907,
        909,1,0,0,0,908,910,5,139,0,0,909,908,1,0,0,0,909,910,1,0,0,0,910,
        912,1,0,0,0,911,913,5,139,0,0,912,911,1,0,0,0,912,913,1,0,0,0,913,
        914,1,0,0,0,914,980,3,108,54,0,915,917,5,77,0,0,916,918,5,152,0,
        0,917,916,1,0,0,0,917,918,1,0,0,0,918,919,1,0,0,0,919,980,3,108,
        54,0,920,922,5,61,0,0,921,923,5,152,0,0,922,921,1,0,0,0,922,923,
        1,0,0,0,923,924,1,0,0,0,924,980,3,108,54,0,925,927,5,18,0,0,926,
        928,5,152,0,0,927,926,1,0,0,0,927,928,1,0,0,0,928,929,1,0,0,0,929,
        980,5,139,0,0,930,931,5,80,0,0,931,932,5,139,0,0,932,933,5,139,0,
        0,933,937,5,139,0,0,934,935,5,139,0,0,935,936,5,139,0,0,936,938,
        5,139,0,0,937,934,1,0,0,0,937,938,1,0,0,0,938,942,1,0,0,0,939,940,
        5,139,0,0,940,941,5,139,0,0,941,943,5,139,0,0,942,939,1,0,0,0,942,
        943,1,0,0,0,943,947,1,0,0,0,944,945,5,139,0,0,945,946,5,139,0,0,
        946,948,5,139,0,0,947,944,1,0,0,0,947,948,1,0,0,0,948,980,1,0,0,
        0,949,951,5,21,0,0,950,952,5,171,0,0,951,950,1,0,0,0,951,952,1,0,
        0,0,952,953,1,0,0,0,953,980,5,172,0,0,954,955,5,23,0,0,955,956,5,
        25,0,0,956,963,3,108,54,0,957,964,5,89,0,0,958,960,5,10,0,0,959,
        961,5,152,0,0,960,959,1,0,0,0,960,961,1,0,0,0,961,962,1,0,0,0,962,
        964,5,146,0,0,963,957,1,0,0,0,963,958,1,0,0,0,964,980,1,0,0,0,965,
        980,5,26,0,0,966,967,5,81,0,0,967,968,5,82,0,0,968,970,5,139,0,0,
        969,971,5,139,0,0,970,969,1,0,0,0,970,971,1,0,0,0,971,973,1,0,0,
        0,972,974,5,139,0,0,973,972,1,0,0,0,973,974,1,0,0,0,974,976,1,0,
        0,0,975,977,5,139,0,0,976,975,1,0,0,0,976,977,1,0,0,0,977,980,1,
        0,0,0,978,980,5,68,0,0,979,896,1,0,0,0,979,897,1,0,0,0,979,902,1,
        0,0,0,979,903,1,0,0,0,979,915,1,0,0,0,979,920,1,0,0,0,979,925,1,
        0,0,0,979,930,1,0,0,0,979,949,1,0,0,0,979,954,1,0,0,0,979,965,1,
        0,0,0,979,966,1,0,0,0,979,978,1,0,0,0,980,81,1,0,0,0,981,982,5,5,
        0,0,982,983,3,96,48,0,983,984,3,96,48,0,984,985,3,96,48,0,985,991,
        3,96,48,0,986,987,3,96,48,0,987,988,3,96,48,0,988,989,3,96,48,0,
        989,990,3,96,48,0,990,992,1,0,0,0,991,986,1,0,0,0,991,992,1,0,0,
        0,992,998,1,0,0,0,993,994,3,96,48,0,994,995,3,96,48,0,995,996,3,
        96,48,0,996,997,3,96,48,0,997,999,1,0,0,0,998,993,1,0,0,0,998,999,
        1,0,0,0,999,1005,1,0,0,0,1000,1001,3,96,48,0,1001,1002,3,96,48,0,
        1002,1003,3,96,48,0,1003,1004,3,96,48,0,1004,1006,1,0,0,0,1005,1000,
        1,0,0,0,1005,1006,1,0,0,0,1006,83,1,0,0,0,1007,1040,3,86,43,0,1008,
        1010,5,10,0,0,1009,1011,5,152,0,0,1010,1009,1,0,0,0,1010,1011,1,
        0,0,0,1011,1012,1,0,0,0,1012,1040,5,146,0,0,1013,1014,5,60,0,0,1014,
        1015,3,108,54,0,1015,1016,3,108,54,0,1016,1017,3,108,54,0,1017,1018,
        3,108,54,0,1018,1019,3,108,54,0,1019,1040,1,0,0,0,1020,1022,5,61,
        0,0,1021,1023,5,152,0,0,1022,1021,1,0,0,0,1022,1023,1,0,0,0,1023,
        1024,1,0,0,0,1024,1040,3,108,54,0,1025,1027,5,18,0,0,1026,1028,5,
        152,0,0,1027,1026,1,0,0,0,1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,
        1040,5,139,0,0,1030,1032,5,21,0,0,1031,1033,5,171,0,0,1032,1031,
        1,0,0,0,1032,1033,1,0,0,0,1033,1034,1,0,0,0,1034,1040,5,172,0,0,
        1035,1036,5,23,0,0,1036,1037,5,25,0,0,1037,1040,3,108,54,0,1038,
        1040,5,26,0,0,1039,1007,1,0,0,0,1039,1008,1,0,0,0,1039,1013,1,0,
        0,0,1039,1020,1,0,0,0,1039,1025,1,0,0,0,1039,1030,1,0,0,0,1039,1035,
        1,0,0,0,1039,1038,1,0,0,0,1040,85,1,0,0,0,1041,1042,5,5,0,0,1042,
        1043,3,96,48,0,1043,1044,3,96,48,0,1044,1045,3,96,48,0,1045,1046,
        3,96,48,0,1046,1047,3,96,48,0,1047,1048,3,96,48,0,1048,1050,3,104,
        52,0,1049,1051,3,104,52,0,1050,1049,1,0,0,0,1050,1051,1,0,0,0,1051,
        87,1,0,0,0,1052,1087,3,90,45,0,1053,1055,5,10,0,0,1054,1056,5,152,
        0,0,1055,1054,1,0,0,0,1055,1056,1,0,0,0,1056,1057,1,0,0,0,1057,1087,
        5,146,0,0,1058,1059,5,60,0,0,1059,1060,3,108,54,0,1060,1061,3,108,
        54,0,1061,1062,3,108,54,0,1062,1063,3,108,54,0,1063,1064,3,108,54,
        0,1064,1065,3,108,54,0,1065,1066,3,108,54,0,1066,1087,1,0,0,0,1067,
        1069,5,61,0,0,1068,1070,5,152,0,0,1069,1068,1,0,0,0,1069,1070,1,
        0,0,0,1070,1071,1,0,0,0,1071,1087,3,108,54,0,1072,1074,5,18,0,0,
        1073,1075,5,152,0,0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,1076,
        1,0,0,0,1076,1087,5,139,0,0,1077,1079,5,21,0,0,1078,1080,5,171,0,
        0,1079,1078,1,0,0,0,1079,1080,1,0,0,0,1080,1081,1,0,0,0,1081,1087,
        5,172,0,0,1082,1083,5,23,0,0,1083,1084,5,25,0,0,1084,1087,3,108,
        54,0,1085,1087,5,26,0,0,1086,1052,1,0,0,0,1086,1053,1,0,0,0,1086,
        1058,1,0,0,0,1086,1067,1,0,0,0,1086,1072,1,0,0,0,1086,1077,1,0,0,
        0,1086,1082,1,0,0,0,1086,1085,1,0,0,0,1087,89,1,0,0,0,1088,1089,
        5,5,0,0,1089,1090,3,96,48,0,1090,1091,3,96,48,0,1091,1092,3,96,48,
        0,1092,1093,3,96,48,0,1093,1094,3,96,48,0,1094,1095,3,96,48,0,1095,
        1096,3,96,48,0,1096,1097,3,96,48,0,1097,1098,3,104,52,0,1098,1099,
        3,104,52,0,1099,91,1,0,0,0,1100,1153,3,94,47,0,1101,1103,5,10,0,
        0,1102,1104,5,152,0,0,1103,1102,1,0,0,0,1103,1104,1,0,0,0,1104,1105,
        1,0,0,0,1105,1153,5,146,0,0,1106,1108,5,86,0,0,1107,1109,5,152,0,
        0,1108,1107,1,0,0,0,1108,1109,1,0,0,0,1109,1110,1,0,0,0,1110,1153,
        5,146,0,0,1111,1112,5,64,0,0,1112,1113,5,139,0,0,1113,1114,5,139,
        0,0,1114,1153,3,108,54,0,1115,1117,5,77,0,0,1116,1118,5,152,0,0,
        1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,1119,1,0,0,0,1119,1153,
        3,108,54,0,1120,1122,5,61,0,0,1121,1123,5,152,0,0,1122,1121,1,0,
        0,0,1122,1123,1,0,0,0,1123,1124,1,0,0,0,1124,1153,3,108,54,0,1125,
        1127,5,18,0,0,1126,1128,5,152,0,0,1127,1126,1,0,0,0,1127,1128,1,
        0,0,0,1128,1129,1,0,0,0,1129,1153,5,139,0,0,1130,1132,5,21,0,0,1131,
        1133,5,171,0,0,1132,1131,1,0,0,0,1132,1133,1,0,0,0,1133,1134,1,0,
        0,0,1134,1153,5,172,0,0,1135,1136,5,23,0,0,1136,1137,5,25,0,0,1137,
        1144,3,108,54,0,1138,1145,5,89,0,0,1139,1141,5,10,0,0,1140,1142,
        5,152,0,0,1141,1140,1,0,0,0,1141,1142,1,0,0,0,1142,1143,1,0,0,0,
        1143,1145,5,146,0,0,1144,1138,1,0,0,0,1144,1139,1,0,0,0,1145,1153,
        1,0,0,0,1146,1153,5,26,0,0,1147,1148,5,81,0,0,1148,1149,5,87,0,0,
        1149,1150,5,139,0,0,1150,1153,5,139,0,0,1151,1153,5,68,0,0,1152,
        1100,1,0,0,0,1152,1101,1,0,0,0,1152,1106,1,0,0,0,1152,1111,1,0,0,
        0,1152,1115,1,0,0,0,1152,1120,1,0,0,0,1152,1125,1,0,0,0,1152,1130,
        1,0,0,0,1152,1135,1,0,0,0,1152,1146,1,0,0,0,1152,1147,1,0,0,0,1152,
        1151,1,0,0,0,1153,93,1,0,0,0,1154,1155,5,5,0,0,1155,1156,3,96,48,
        0,1156,1157,3,96,48,0,1157,1158,3,96,48,0,1158,1159,3,96,48,0,1159,
        1160,3,96,48,0,1160,1161,3,96,48,0,1161,1162,3,96,48,0,1162,1163,
        3,96,48,0,1163,1164,3,96,48,0,1164,1165,3,96,48,0,1165,1167,3,96,
        48,0,1166,1168,3,96,48,0,1167,1166,1,0,0,0,1167,1168,1,0,0,0,1168,
        95,1,0,0,0,1169,1170,5,149,0,0,1170,1171,3,98,49,0,1171,1172,5,150,
        0,0,1172,97,1,0,0,0,1173,1178,3,100,50,0,1174,1175,5,134,0,0,1175,
        1177,3,100,50,0,1176,1174,1,0,0,0,1177,1180,1,0,0,0,1178,1176,1,
        0,0,0,1178,1179,1,0,0,0,1179,99,1,0,0,0,1180,1178,1,0,0,0,1181,1186,
        3,102,51,0,1182,1183,5,135,0,0,1183,1185,3,102,51,0,1184,1182,1,
        0,0,0,1185,1188,1,0,0,0,1186,1184,1,0,0,0,1186,1187,1,0,0,0,1187,
        101,1,0,0,0,1188,1186,1,0,0,0,1189,1190,6,51,-1,0,1190,1191,5,149,
        0,0,1191,1192,3,98,49,0,1192,1193,5,150,0,0,1193,1344,1,0,0,0,1194,
        1344,5,89,0,0,1195,1196,5,91,0,0,1196,1197,7,0,0,0,1197,1198,7,1,
        0,0,1198,1344,7,0,0,0,1199,1201,5,92,0,0,1200,1202,5,164,0,0,1201,
        1200,1,0,0,0,1201,1202,1,0,0,0,1202,1203,1,0,0,0,1203,1204,5,165,
        0,0,1204,1205,5,166,0,0,1205,1344,3,106,53,0,1206,1207,5,93,0,0,
        1207,1344,3,102,51,30,1208,1209,5,94,0,0,1209,1344,3,102,51,29,1210,
        1211,5,95,0,0,1211,1344,3,102,51,28,1212,1220,5,96,0,0,1213,1221,
        5,147,0,0,1214,1217,5,146,0,0,1215,1216,5,151,0,0,1216,1218,5,146,
        0,0,1217,1215,1,0,0,0,1217,1218,1,0,0,0,1218,1221,1,0,0,0,1219,1221,
        5,158,0,0,1220,1213,1,0,0,0,1220,1214,1,0,0,0,1220,1219,1,0,0,0,
        1221,1344,1,0,0,0,1222,1223,5,97,0,0,1223,1224,3,106,53,0,1224,1225,
        3,106,53,0,1225,1226,3,106,53,0,1226,1227,3,106,53,0,1227,1228,3,
        106,53,0,1228,1229,3,106,53,0,1229,1344,1,0,0,0,1230,1344,5,98,0,
        0,1231,1232,5,99,0,0,1232,1344,5,139,0,0,1233,1344,5,100,0,0,1234,
        1247,5,101,0,0,1235,1248,5,147,0,0,1236,1239,5,146,0,0,1237,1238,
        5,151,0,0,1238,1240,5,146,0,0,1239,1237,1,0,0,0,1239,1240,1,0,0,
        0,1240,1248,1,0,0,0,1241,1244,5,142,0,0,1242,1243,5,151,0,0,1243,
        1245,5,142,0,0,1244,1242,1,0,0,0,1244,1245,1,0,0,0,1245,1248,1,0,
        0,0,1246,1248,5,158,0,0,1247,1235,1,0,0,0,1247,1236,1,0,0,0,1247,
        1241,1,0,0,0,1247,1246,1,0,0,0,1248,1344,1,0,0,0,1249,1344,5,102,
        0,0,1250,1251,5,136,0,0,1251,1344,3,102,51,20,1252,1253,5,103,0,
        0,1253,1254,5,149,0,0,1254,1256,3,106,53,0,1255,1257,5,137,0,0,1256,
        1255,1,0,0,0,1256,1257,1,0,0,0,1257,1258,1,0,0,0,1258,1260,3,106,
        53,0,1259,1261,5,137,0,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,
        1262,1,0,0,0,1262,1263,3,106,53,0,1263,1264,5,150,0,0,1264,1265,
        5,104,0,0,1265,1266,3,106,53,0,1266,1344,1,0,0,0,1267,1268,5,103,
        0,0,1268,1269,5,149,0,0,1269,1271,5,132,0,0,1270,1272,5,152,0,0,
        1271,1270,1,0,0,0,1271,1272,1,0,0,0,1272,1273,1,0,0,0,1273,1275,
        3,96,48,0,1274,1276,5,137,0,0,1275,1274,1,0,0,0,1275,1276,1,0,0,
        0,1276,1282,1,0,0,0,1277,1279,5,133,0,0,1278,1280,5,152,0,0,1279,
        1278,1,0,0,0,1279,1280,1,0,0,0,1280,1281,1,0,0,0,1281,1283,3,96,
        48,0,1282,1277,1,0,0,0,1282,1283,1,0,0,0,1283,1284,1,0,0,0,1284,
        1285,5,150,0,0,1285,1286,5,104,0,0,1286,1287,3,106,53,0,1287,1344,
        1,0,0,0,1288,1344,5,105,0,0,1289,1344,5,106,0,0,1290,1298,5,107,
        0,0,1291,1299,5,148,0,0,1292,1295,5,139,0,0,1293,1294,5,151,0,0,
        1294,1296,5,139,0,0,1295,1293,1,0,0,0,1295,1296,1,0,0,0,1296,1299,
        1,0,0,0,1297,1299,5,158,0,0,1298,1291,1,0,0,0,1298,1292,1,0,0,0,
        1298,1297,1,0,0,0,1299,1344,1,0,0,0,1300,1308,5,108,0,0,1301,1309,
        5,147,0,0,1302,1305,5,146,0,0,1303,1304,5,151,0,0,1304,1306,5,146,
        0,0,1305,1303,1,0,0,0,1305,1306,1,0,0,0,1306,1309,1,0,0,0,1307,1309,
        5,158,0,0,1308,1301,1,0,0,0,1308,1302,1,0,0,0,1308,1307,1,0,0,0,
        1309,1344,1,0,0,0,1310,1323,5,110,0,0,1311,1324,5,147,0,0,1312,1315,
        5,146,0,0,1313,1314,5,151,0,0,1314,1316,5,146,0,0,1315,1313,1,0,
        0,0,1315,1316,1,0,0,0,1316,1324,1,0,0,0,1317,1320,5,142,0,0,1318,
        1319,5,151,0,0,1319,1321,5,142,0,0,1320,1318,1,0,0,0,1320,1321,1,
        0,0,0,1321,1324,1,0,0,0,1322,1324,5,158,0,0,1323,1311,1,0,0,0,1323,
        1312,1,0,0,0,1323,1317,1,0,0,0,1323,1322,1,0,0,0,1324,1344,1,0,0,
        0,1325,1326,5,111,0,0,1326,1327,3,106,53,0,1327,1328,3,106,53,0,
        1328,1329,3,106,53,0,1329,1330,3,106,53,0,1330,1331,3,106,53,0,1331,
        1332,3,106,53,0,1332,1344,1,0,0,0,1333,1344,5,112,0,0,1334,1344,
        5,113,0,0,1335,1344,5,114,0,0,1336,1344,5,115,0,0,1337,1344,5,116,
        0,0,1338,1344,5,117,0,0,1339,1344,5,118,0,0,1340,1344,5,119,0,0,
        1341,1344,5,120,0,0,1342,1344,5,121,0,0,1343,1189,1,0,0,0,1343,1194,
        1,0,0,0,1343,1195,1,0,0,0,1343,1199,1,0,0,0,1343,1206,1,0,0,0,1343,
        1208,1,0,0,0,1343,1210,1,0,0,0,1343,1212,1,0,0,0,1343,1222,1,0,0,
        0,1343,1230,1,0,0,0,1343,1231,1,0,0,0,1343,1233,1,0,0,0,1343,1234,
        1,0,0,0,1343,1249,1,0,0,0,1343,1250,1,0,0,0,1343,1252,1,0,0,0,1343,
        1267,1,0,0,0,1343,1288,1,0,0,0,1343,1289,1,0,0,0,1343,1290,1,0,0,
        0,1343,1300,1,0,0,0,1343,1310,1,0,0,0,1343,1325,1,0,0,0,1343,1333,
        1,0,0,0,1343,1334,1,0,0,0,1343,1335,1,0,0,0,1343,1336,1,0,0,0,1343,
        1337,1,0,0,0,1343,1338,1,0,0,0,1343,1339,1,0,0,0,1343,1340,1,0,0,
        0,1343,1341,1,0,0,0,1343,1342,1,0,0,0,1344,1353,1,0,0,0,1345,1346,
        10,33,0,0,1346,1347,5,90,0,0,1347,1352,3,106,53,0,1348,1349,10,13,
        0,0,1349,1350,5,109,0,0,1350,1352,3,106,53,0,1351,1345,1,0,0,0,1351,
        1348,1,0,0,0,1352,1355,1,0,0,0,1353,1351,1,0,0,0,1353,1354,1,0,0,
        0,1354,103,1,0,0,0,1355,1353,1,0,0,0,1356,1357,7,2,0,0,1357,105,
        1,0,0,0,1358,1359,7,3,0,0,1359,107,1,0,0,0,1360,1361,7,2,0,0,1361,
        109,1,0,0,0,1362,1363,7,3,0,0,1363,111,1,0,0,0,1364,1375,5,88,0,
        0,1365,1373,5,177,0,0,1366,1368,5,180,0,0,1367,1366,1,0,0,0,1368,
        1371,1,0,0,0,1369,1367,1,0,0,0,1369,1370,1,0,0,0,1370,1374,1,0,0,
        0,1371,1369,1,0,0,0,1372,1374,5,181,0,0,1373,1369,1,0,0,0,1373,1372,
        1,0,0,0,1374,1376,1,0,0,0,1375,1365,1,0,0,0,1375,1376,1,0,0,0,1376,
        1377,1,0,0,0,1377,1381,5,178,0,0,1378,1380,5,180,0,0,1379,1378,1,
        0,0,0,1380,1383,1,0,0,0,1381,1379,1,0,0,0,1381,1382,1,0,0,0,1382,
        1384,1,0,0,0,1383,1381,1,0,0,0,1384,1385,5,179,0,0,1385,113,1,0,
        0,0,1386,1387,5,122,0,0,1387,1388,3,116,58,0,1388,1389,3,96,48,0,
        1389,115,1,0,0,0,1390,1391,7,4,0,0,1391,1392,3,118,59,0,1392,1393,
        5,183,0,0,1393,1397,1,0,0,0,1394,1395,5,125,0,0,1395,1397,3,126,
        63,0,1396,1390,1,0,0,0,1396,1394,1,0,0,0,1397,117,1,0,0,0,1398,1401,
        5,193,0,0,1399,1400,5,184,0,0,1400,1402,3,120,60,0,1401,1399,1,0,
        0,0,1401,1402,1,0,0,0,1402,119,1,0,0,0,1403,1406,3,122,61,0,1404,
        1405,7,5,0,0,1405,1407,3,120,60,0,1406,1404,1,0,0,0,1406,1407,1,
        0,0,0,1407,121,1,0,0,0,1408,1416,5,193,0,0,1409,1416,3,124,62,0,
        1410,1416,5,191,0,0,1411,1416,5,192,0,0,1412,1416,5,217,0,0,1413,
        1416,5,216,0,0,1414,1416,5,218,0,0,1415,1408,1,0,0,0,1415,1409,1,
        0,0,0,1415,1410,1,0,0,0,1415,1411,1,0,0,0,1415,1412,1,0,0,0,1415,
        1413,1,0,0,0,1415,1414,1,0,0,0,1416,123,1,0,0,0,1417,1418,5,194,
        0,0,1418,1419,5,220,0,0,1419,1420,3,122,61,0,1420,1421,5,183,0,0,
        1421,1537,1,0,0,0,1422,1423,5,195,0,0,1423,1424,5,220,0,0,1424,1425,
        3,122,61,0,1425,1426,5,183,0,0,1426,1537,1,0,0,0,1427,1428,5,197,
        0,0,1428,1429,5,220,0,0,1429,1430,3,122,61,0,1430,1431,5,183,0,0,
        1431,1537,1,0,0,0,1432,1433,5,198,0,0,1433,1434,5,220,0,0,1434,1435,
        3,122,61,0,1435,1436,5,183,0,0,1436,1537,1,0,0,0,1437,1438,5,199,
        0,0,1438,1439,5,220,0,0,1439,1440,3,122,61,0,1440,1441,5,183,0,0,
        1441,1537,1,0,0,0,1442,1443,5,200,0,0,1443,1444,5,220,0,0,1444,1445,
        3,122,61,0,1445,1446,5,183,0,0,1446,1537,1,0,0,0,1447,1448,5,201,
        0,0,1448,1449,5,220,0,0,1449,1450,3,122,61,0,1450,1451,5,183,0,0,
        1451,1537,1,0,0,0,1452,1453,5,202,0,0,1453,1454,5,220,0,0,1454,1455,
        3,122,61,0,1455,1456,5,183,0,0,1456,1537,1,0,0,0,1457,1458,5,203,
        0,0,1458,1459,5,220,0,0,1459,1460,3,122,61,0,1460,1461,5,183,0,0,
        1461,1537,1,0,0,0,1462,1463,5,204,0,0,1463,1464,5,220,0,0,1464,1465,
        3,122,61,0,1465,1466,5,183,0,0,1466,1537,1,0,0,0,1467,1468,5,205,
        0,0,1468,1469,5,220,0,0,1469,1470,3,122,61,0,1470,1471,5,183,0,0,
        1471,1537,1,0,0,0,1472,1473,5,206,0,0,1473,1474,5,220,0,0,1474,1479,
        3,122,61,0,1475,1476,5,190,0,0,1476,1478,3,122,61,0,1477,1475,1,
        0,0,0,1478,1481,1,0,0,0,1479,1477,1,0,0,0,1479,1480,1,0,0,0,1480,
        1482,1,0,0,0,1481,1479,1,0,0,0,1482,1483,5,183,0,0,1483,1537,1,0,
        0,0,1484,1485,5,207,0,0,1485,1486,5,220,0,0,1486,1487,3,122,61,0,
        1487,1488,5,183,0,0,1488,1537,1,0,0,0,1489,1490,5,208,0,0,1490,1491,
        5,220,0,0,1491,1496,3,122,61,0,1492,1493,5,190,0,0,1493,1495,3,122,
        61,0,1494,1492,1,0,0,0,1495,1498,1,0,0,0,1496,1494,1,0,0,0,1496,
        1497,1,0,0,0,1497,1499,1,0,0,0,1498,1496,1,0,0,0,1499,1500,5,183,
        0,0,1500,1537,1,0,0,0,1501,1502,5,209,0,0,1502,1503,5,220,0,0,1503,
        1504,3,122,61,0,1504,1505,5,190,0,0,1505,1506,3,122,61,0,1506,1507,
        5,183,0,0,1507,1537,1,0,0,0,1508,1509,5,210,0,0,1509,1510,5,220,
        0,0,1510,1511,3,122,61,0,1511,1512,5,183,0,0,1512,1537,1,0,0,0,1513,
        1514,5,211,0,0,1514,1515,5,220,0,0,1515,1537,5,183,0,0,1516,1517,
        5,212,0,0,1517,1518,5,220,0,0,1518,1519,3,122,61,0,1519,1520,5,183,
        0,0,1520,1537,1,0,0,0,1521,1522,5,213,0,0,1522,1523,5,220,0,0,1523,
        1524,3,122,61,0,1524,1525,5,183,0,0,1525,1537,1,0,0,0,1526,1527,
        5,214,0,0,1527,1528,5,220,0,0,1528,1529,3,122,61,0,1529,1530,5,183,
        0,0,1530,1537,1,0,0,0,1531,1532,5,215,0,0,1532,1533,5,220,0,0,1533,
        1534,3,122,61,0,1534,1535,5,183,0,0,1535,1537,1,0,0,0,1536,1417,
        1,0,0,0,1536,1422,1,0,0,0,1536,1427,1,0,0,0,1536,1432,1,0,0,0,1536,
        1437,1,0,0,0,1536,1442,1,0,0,0,1536,1447,1,0,0,0,1536,1452,1,0,0,
        0,1536,1457,1,0,0,0,1536,1462,1,0,0,0,1536,1467,1,0,0,0,1536,1472,
        1,0,0,0,1536,1484,1,0,0,0,1536,1489,1,0,0,0,1536,1501,1,0,0,0,1536,
        1508,1,0,0,0,1536,1513,1,0,0,0,1536,1516,1,0,0,0,1536,1521,1,0,0,
        0,1536,1526,1,0,0,0,1536,1531,1,0,0,0,1537,125,1,0,0,0,1538,1539,
        7,6,0,0,1539,1540,5,222,0,0,1540,1541,5,231,0,0,1541,1542,5,223,
        0,0,1542,127,1,0,0,0,1543,1544,5,126,0,0,1544,1545,5,216,0,0,1545,
        1546,5,184,0,0,1546,1547,3,130,65,0,1547,1548,5,183,0,0,1548,129,
        1,0,0,0,1549,1552,3,122,61,0,1550,1551,7,5,0,0,1551,1553,3,130,65,
        0,1552,1550,1,0,0,0,1552,1553,1,0,0,0,1553,131,1,0,0,0,1554,1556,
        5,127,0,0,1555,1557,5,146,0,0,1556,1555,1,0,0,0,1556,1557,1,0,0,
        0,1557,1558,1,0,0,0,1558,1559,5,128,0,0,1559,1560,5,152,0,0,1560,
        1561,7,7,0,0,1561,1562,5,152,0,0,1562,1568,3,96,48,0,1563,1564,5,
        128,0,0,1564,1565,5,152,0,0,1565,1566,7,7,0,0,1566,1567,5,152,0,
        0,1567,1569,3,96,48,0,1568,1563,1,0,0,0,1568,1569,1,0,0,0,1569,1570,
        1,0,0,0,1570,1571,5,2,0,0,1571,133,1,0,0,0,1572,1573,5,130,0,0,1573,
        1574,5,238,0,0,1574,1575,5,235,0,0,1575,1594,5,233,0,0,1576,1578,
        5,236,0,0,1577,1576,1,0,0,0,1578,1581,1,0,0,0,1579,1577,1,0,0,0,
        1579,1580,1,0,0,0,1580,1595,1,0,0,0,1581,1579,1,0,0,0,1582,1584,
        5,237,0,0,1583,1582,1,0,0,0,1584,1587,1,0,0,0,1585,1583,1,0,0,0,
        1585,1586,1,0,0,0,1586,1595,1,0,0,0,1587,1585,1,0,0,0,1588,1590,
        5,239,0,0,1589,1588,1,0,0,0,1590,1593,1,0,0,0,1591,1589,1,0,0,0,
        1591,1592,1,0,0,0,1592,1595,1,0,0,0,1593,1591,1,0,0,0,1594,1579,
        1,0,0,0,1594,1585,1,0,0,0,1594,1591,1,0,0,0,1595,1596,1,0,0,0,1596,
        1597,5,234,0,0,1597,1598,5,131,0,0,1598,1603,5,242,0,0,1599,1602,
        3,128,64,0,1600,1602,3,28,14,0,1601,1599,1,0,0,0,1601,1600,1,0,0,
        0,1602,1605,1,0,0,0,1603,1601,1,0,0,0,1603,1604,1,0,0,0,1604,1606,
        1,0,0,0,1605,1603,1,0,0,0,1606,1607,5,2,0,0,1607,1608,5,131,0,0,
        1608,1609,5,242,0,0,1609,135,1,0,0,0,1610,1611,5,130,0,0,1611,1612,
        5,238,0,0,1612,1613,5,235,0,0,1613,1632,5,233,0,0,1614,1616,5,236,
        0,0,1615,1614,1,0,0,0,1616,1619,1,0,0,0,1617,1615,1,0,0,0,1617,1618,
        1,0,0,0,1618,1633,1,0,0,0,1619,1617,1,0,0,0,1620,1622,5,237,0,0,
        1621,1620,1,0,0,0,1622,1625,1,0,0,0,1623,1621,1,0,0,0,1623,1624,
        1,0,0,0,1624,1633,1,0,0,0,1625,1623,1,0,0,0,1626,1628,5,239,0,0,
        1627,1626,1,0,0,0,1628,1631,1,0,0,0,1629,1627,1,0,0,0,1629,1630,
        1,0,0,0,1630,1633,1,0,0,0,1631,1629,1,0,0,0,1632,1617,1,0,0,0,1632,
        1623,1,0,0,0,1632,1629,1,0,0,0,1633,1634,1,0,0,0,1634,1635,5,234,
        0,0,1635,1636,5,131,0,0,1636,1641,5,242,0,0,1637,1640,3,128,64,0,
        1638,1640,3,36,18,0,1639,1637,1,0,0,0,1639,1638,1,0,0,0,1640,1643,
        1,0,0,0,1641,1639,1,0,0,0,1641,1642,1,0,0,0,1642,1644,1,0,0,0,1643,
        1641,1,0,0,0,1644,1645,5,2,0,0,1645,1646,5,131,0,0,1646,1647,5,242,
        0,0,1647,137,1,0,0,0,1648,1649,5,130,0,0,1649,1650,5,238,0,0,1650,
        1651,5,235,0,0,1651,1670,5,233,0,0,1652,1654,5,236,0,0,1653,1652,
        1,0,0,0,1654,1657,1,0,0,0,1655,1653,1,0,0,0,1655,1656,1,0,0,0,1656,
        1671,1,0,0,0,1657,1655,1,0,0,0,1658,1660,5,237,0,0,1659,1658,1,0,
        0,0,1660,1663,1,0,0,0,1661,1659,1,0,0,0,1661,1662,1,0,0,0,1662,1671,
        1,0,0,0,1663,1661,1,0,0,0,1664,1666,5,239,0,0,1665,1664,1,0,0,0,
        1666,1669,1,0,0,0,1667,1665,1,0,0,0,1667,1668,1,0,0,0,1668,1671,
        1,0,0,0,1669,1667,1,0,0,0,1670,1655,1,0,0,0,1670,1661,1,0,0,0,1670,
        1667,1,0,0,0,1671,1672,1,0,0,0,1672,1673,5,234,0,0,1673,1674,5,131,
        0,0,1674,1679,5,242,0,0,1675,1678,3,128,64,0,1676,1678,3,48,24,0,
        1677,1675,1,0,0,0,1677,1676,1,0,0,0,1678,1681,1,0,0,0,1679,1677,
        1,0,0,0,1679,1680,1,0,0,0,1680,1682,1,0,0,0,1681,1679,1,0,0,0,1682,
        1683,5,2,0,0,1683,1684,5,131,0,0,1684,1685,5,242,0,0,1685,139,1,
        0,0,0,1686,1687,5,130,0,0,1687,1688,5,238,0,0,1688,1689,5,235,0,
        0,1689,1708,5,233,0,0,1690,1692,5,236,0,0,1691,1690,1,0,0,0,1692,
        1695,1,0,0,0,1693,1691,1,0,0,0,1693,1694,1,0,0,0,1694,1709,1,0,0,
        0,1695,1693,1,0,0,0,1696,1698,5,237,0,0,1697,1696,1,0,0,0,1698,1701,
        1,0,0,0,1699,1697,1,0,0,0,1699,1700,1,0,0,0,1700,1709,1,0,0,0,1701,
        1699,1,0,0,0,1702,1704,5,239,0,0,1703,1702,1,0,0,0,1704,1707,1,0,
        0,0,1705,1703,1,0,0,0,1705,1706,1,0,0,0,1706,1709,1,0,0,0,1707,1705,
        1,0,0,0,1708,1693,1,0,0,0,1708,1699,1,0,0,0,1708,1705,1,0,0,0,1709,
        1710,1,0,0,0,1710,1711,5,234,0,0,1711,1712,5,131,0,0,1712,1717,5,
        242,0,0,1713,1716,3,128,64,0,1714,1716,3,52,26,0,1715,1713,1,0,0,
        0,1715,1714,1,0,0,0,1716,1719,1,0,0,0,1717,1715,1,0,0,0,1717,1718,
        1,0,0,0,1718,1720,1,0,0,0,1719,1717,1,0,0,0,1720,1721,5,2,0,0,1721,
        1722,5,131,0,0,1722,1723,5,242,0,0,1723,141,1,0,0,0,1724,1725,5,
        130,0,0,1725,1726,5,238,0,0,1726,1727,5,235,0,0,1727,1746,5,233,
        0,0,1728,1730,5,236,0,0,1729,1728,1,0,0,0,1730,1733,1,0,0,0,1731,
        1729,1,0,0,0,1731,1732,1,0,0,0,1732,1747,1,0,0,0,1733,1731,1,0,0,
        0,1734,1736,5,237,0,0,1735,1734,1,0,0,0,1736,1739,1,0,0,0,1737,1735,
        1,0,0,0,1737,1738,1,0,0,0,1738,1747,1,0,0,0,1739,1737,1,0,0,0,1740,
        1742,5,239,0,0,1741,1740,1,0,0,0,1742,1745,1,0,0,0,1743,1741,1,0,
        0,0,1743,1744,1,0,0,0,1744,1747,1,0,0,0,1745,1743,1,0,0,0,1746,1731,
        1,0,0,0,1746,1737,1,0,0,0,1746,1743,1,0,0,0,1747,1748,1,0,0,0,1748,
        1749,5,234,0,0,1749,1750,5,131,0,0,1750,1755,5,242,0,0,1751,1754,
        3,128,64,0,1752,1754,3,56,28,0,1753,1751,1,0,0,0,1753,1752,1,0,0,
        0,1754,1757,1,0,0,0,1755,1753,1,0,0,0,1755,1756,1,0,0,0,1756,1758,
        1,0,0,0,1757,1755,1,0,0,0,1758,1759,5,2,0,0,1759,1760,5,131,0,0,
        1760,1761,5,242,0,0,1761,143,1,0,0,0,214,173,175,184,190,196,202,
        208,214,220,229,238,247,256,265,274,283,292,299,315,320,327,336,
        341,352,364,370,383,390,417,423,426,433,436,441,446,451,454,457,
        461,466,471,478,482,487,492,497,502,507,512,515,522,527,532,538,
        542,559,565,569,574,577,582,587,592,596,602,606,610,613,615,619,
        631,641,646,651,658,669,672,678,689,695,699,704,709,718,721,724,
        736,743,749,761,766,771,776,781,790,817,822,828,838,841,846,851,
        855,867,891,899,906,909,912,917,922,927,937,942,947,951,960,963,
        970,973,976,979,991,998,1005,1010,1022,1027,1032,1039,1050,1055,
        1069,1074,1079,1086,1103,1108,1117,1122,1127,1132,1141,1144,1152,
        1167,1178,1186,1201,1217,1220,1239,1244,1247,1256,1260,1271,1275,
        1279,1282,1295,1298,1305,1308,1315,1320,1323,1343,1351,1353,1369,
        1373,1375,1381,1396,1401,1406,1415,1479,1496,1536,1552,1556,1568,
        1579,1585,1591,1594,1601,1603,1617,1623,1629,1632,1639,1641,1655,
        1661,1667,1670,1677,1679,1693,1699,1705,1708,1715,1717,1731,1737,
        1743,1746,1753,1755
    ]

class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'CV'", "'DEN'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'OUTD'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'CUTOFF'", 
                     "'CUTON'", "'FROM'", "'TO'", "'PEAK'", "'SPECTRUM'", 
                     "'VOLUME'", "'PPM1'", "'PPM2'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SIZE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'FBOX'", "<INVALID>", 
                     "'ID'", "<INVALID>", "'NAME'", "'NONE'", "<INVALID>", 
                     "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SFBOX'", "'STORE1'", "'STORE2'", 
                     "'STORE3'", "'STORE4'", "'STORE5'", "'STORE6'", "'STORE7'", 
                     "'STORE8'", "'STORE9'", "'TAG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SHOW'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'NIL'", "'FOR'", "'LOOP'", "'TAIL'", "'HEAD'", "'OR'", 
                     "'AND'", "'NOT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "':'", "<INVALID>", 
                     "'<'", "'>'", "'<='", "'>='", "'#'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", 
                     "'ENCODE'", "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", 
                     "'LOG10'", "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", 
                     "'MOD'", "<INVALID>", "<INVALID>", "'SIGN'", "'SIN'", 
                     "'SQRT'", "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'RMS'", "'SUM'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Average", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Initialize", "Update", "Gamma", "Kappa", "Cutoff", 
                      "Cuton", "From", "To", "Peak", "Spectrum", "Volume", 
                      "Ppm1", "Ppm2", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Coupling", "Carbon", "Expectation", 
                      "PhiStep", "PsiStep", "Rcoil", "Zero", "Proton", "Observed", 
                      "Anisotropy", "Amides", "Nitrogens", "Oxygens", "RingAtoms", 
                      "AlphasAndAmides", "Error", "Conformation", "Compressed", 
                      "Phase", "Size", "Dimensions", "Danisotropy", "OneBond", 
                      "AngleDb", "DerivFlag", "Angle_or_Dihedral", "Flags", 
                      "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Fbox", "Hydrogen", 
                      "Id", "Known", "Name", "NONE", "Point", "Cut", "Previous", 
                      "Pseudo", "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Sfbox", "Store_1", "Store_2", "Store_3", "Store_4", 
                      "Store_5", "Store_6", "Store_7", "Store_8", "Store_9", 
                      "Tag", "Vector", "Do_Lp", "Identify_Lp", "Show", "Evaluate_Lp", 
                      "Patch", "Reference", "Nil", "For", "Loop", "Tail", 
                      "Head", "Or_op", "And_op", "Not_op", "Comma", "Complex", 
                      "Integer", "Logical", "Real", "Double_quote_string", 
                      "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", 
                      "Simple_name", "Simple_names", "Integers", "L_paren", 
                      "R_paren", "Colon", "Equ_op", "Lt_op", "Gt_op", "Leq_op", 
                      "Geq_op", "Neq_op", "Symbol_name", "SPACE", "COMMENT", 
                      "SECTION_COMMENT", "LINE_COMMENT", "SET_VARIABLE", 
                      "Abs", "Attr_properties", "Comparison_ops", "SPACE_ATTR", 
                      "Averaging_methods", "Simple_name_A", "SPACE_AVER", 
                      "Equ_op_P", "Potential_types", "Simple_name_P", "SPACE_POTE", 
                      "Noe_analysis", "SPACE_ANAL", "Exclude", "Include", 
                      "End_F", "Class_name", "Any_class", "SPACE_FLAG", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Symbol_name_VE", "Simple_name_VE", "Double_quote_string_VE", 
                      "SPACE_VE", "L_paren_VF", "SPACE_VF", "L_paren_VS", 
                      "R_paren_VS", "Average_VS", "Element_VS", "Max_VS", 
                      "Min_VS", "Norm_VS", "Rms_VS", "Sum_VS", "Atom_properties_VS", 
                      "SPACE_VS", "L_paren_CF", "R_paren_CF", "In_CF", "Integer_CF", 
                      "Real_CF", "Symbol_name_CF", "Simple_name_CF", "SPACE_CF", 
                      "COMMENT_CF", "Simple_name_LL", "SPACE_LL" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_noe_annotation = 16
    RULE_dihedral_statement = 17
    RULE_dihedral_assign = 18
    RULE_plane_statement = 19
    RULE_group_statement = 20
    RULE_harmonic_statement = 21
    RULE_harmonic_assign = 22
    RULE_sani_statement = 23
    RULE_sani_assign = 24
    RULE_coupling_statement = 25
    RULE_coup_assign = 26
    RULE_carbon_shift_statement = 27
    RULE_carbon_shift_assign = 28
    RULE_carbon_shift_rcoil = 29
    RULE_proton_shift_statement = 30
    RULE_observed = 31
    RULE_proton_shift_rcoil = 32
    RULE_proton_shift_anisotropy = 33
    RULE_proton_shift_amides = 34
    RULE_proton_shift_carbons = 35
    RULE_proton_shift_nitrogens = 36
    RULE_proton_shift_oxygens = 37
    RULE_proton_shift_ring_atoms = 38
    RULE_proton_shift_alphas_and_amides = 39
    RULE_conformation_statement = 40
    RULE_conf_assign = 41
    RULE_diffusion_statement = 42
    RULE_dani_assign = 43
    RULE_one_bond_coupling_statement = 44
    RULE_one_bond_assign = 45
    RULE_angle_db_statement = 46
    RULE_angle_db_assign = 47
    RULE_selection = 48
    RULE_selection_expression = 49
    RULE_term = 50
    RULE_factor = 51
    RULE_number = 52
    RULE_number_f = 53
    RULE_number_s = 54
    RULE_number_a = 55
    RULE_flag_statement = 56
    RULE_vector_statement = 57
    RULE_vector_mode = 58
    RULE_vector_expression = 59
    RULE_vector_operation = 60
    RULE_vflc = 61
    RULE_vector_func_call = 62
    RULE_vector_show_property = 63
    RULE_evaluate_statement = 64
    RULE_evaluate_operation = 65
    RULE_patch_statement = 66
    RULE_noe_assign_loop = 67
    RULE_dihedral_assign_loop = 68
    RULE_sani_assign_loop = 69
    RULE_coup_assign_loop = 70
    RULE_carbon_shift_assign_loop = 71

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "plane_statement", 
                   "group_statement", "harmonic_statement", "harmonic_assign", 
                   "sani_statement", "sani_assign", "coupling_statement", 
                   "coup_assign", "carbon_shift_statement", "carbon_shift_assign", 
                   "carbon_shift_rcoil", "proton_shift_statement", "observed", 
                   "proton_shift_rcoil", "proton_shift_anisotropy", "proton_shift_amides", 
                   "proton_shift_carbons", "proton_shift_nitrogens", "proton_shift_oxygens", 
                   "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s", "number_a", "flag_statement", "vector_statement", 
                   "vector_mode", "vector_expression", "vector_operation", 
                   "vflc", "vector_func_call", "vector_show_property", "evaluate_statement", 
                   "evaluate_operation", "patch_statement", "noe_assign_loop", 
                   "dihedral_assign_loop", "sani_assign_loop", "coup_assign_loop", 
                   "carbon_shift_assign_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Average=7
    Bhig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Cutoff=39
    Cuton=40
    From=41
    To=42
    Peak=43
    Spectrum=44
    Volume=45
    Ppm1=46
    Ppm2=47
    Restraints=48
    Dihedral=49
    Nassign=50
    Print_any=51
    Plane=52
    Group=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Sanisotropy=59
    Coefficients=60
    ForceConstant=61
    Coupling=62
    Carbon=63
    Expectation=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Zero=68
    Proton=69
    Observed=70
    Anisotropy=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Conformation=78
    Compressed=79
    Phase=80
    Size=81
    Dimensions=82
    Danisotropy=83
    OneBond=84
    AngleDb=85
    DerivFlag=86
    Angle_or_Dihedral=87
    Flags=88
    All=89
    Around=90
    Atom=91
    Attribute=92
    BondedTo=93
    ByGroup=94
    ByRes=95
    Chemical=96
    Fbox=97
    Hydrogen=98
    Id=99
    Known=100
    Name=101
    NONE=102
    Point=103
    Cut=104
    Previous=105
    Pseudo=106
    Residue=107
    Resname=108
    Saround=109
    SegIdentifier=110
    Sfbox=111
    Store_1=112
    Store_2=113
    Store_3=114
    Store_4=115
    Store_5=116
    Store_6=117
    Store_7=118
    Store_8=119
    Store_9=120
    Tag=121
    Vector=122
    Do_Lp=123
    Identify_Lp=124
    Show=125
    Evaluate_Lp=126
    Patch=127
    Reference=128
    Nil=129
    For=130
    Loop=131
    Tail=132
    Head=133
    Or_op=134
    And_op=135
    Not_op=136
    Comma=137
    Complex=138
    Integer=139
    Logical=140
    Real=141
    Double_quote_string=142
    SHARP_COMMENT=143
    EXCLM_COMMENT=144
    SMCLN_COMMENT=145
    Simple_name=146
    Simple_names=147
    Integers=148
    L_paren=149
    R_paren=150
    Colon=151
    Equ_op=152
    Lt_op=153
    Gt_op=154
    Leq_op=155
    Geq_op=156
    Neq_op=157
    Symbol_name=158
    SPACE=159
    COMMENT=160
    SECTION_COMMENT=161
    LINE_COMMENT=162
    SET_VARIABLE=163
    Abs=164
    Attr_properties=165
    Comparison_ops=166
    SPACE_ATTR=167
    Averaging_methods=168
    Simple_name_A=169
    SPACE_AVER=170
    Equ_op_P=171
    Potential_types=172
    Simple_name_P=173
    SPACE_POTE=174
    Noe_analysis=175
    SPACE_ANAL=176
    Exclude=177
    Include=178
    End_F=179
    Class_name=180
    Any_class=181
    SPACE_FLAG=182
    R_paren_VE=183
    Equ_op_VE=184
    Add_op_VE=185
    Sub_op_VE=186
    Mul_op_VE=187
    Div_op_VE=188
    Exp_op_VE=189
    Comma_VE=190
    Integer_VE=191
    Real_VE=192
    Atom_properties_VE=193
    Abs_VE=194
    Acos_VE=195
    Asin_VE=196
    Cos_VE=197
    Decode_VE=198
    Encode_VE=199
    Exp_VE=200
    Gauss_VE=201
    Heavy_VE=202
    Int_VE=203
    Log10_VE=204
    Log_VE=205
    Max_VE=206
    Maxw_VE=207
    Min_VE=208
    Mod_VE=209
    Norm_VE=210
    Random_VE=211
    Sign_VE=212
    Sin_VE=213
    Sqrt_VE=214
    Tan_VE=215
    Symbol_name_VE=216
    Simple_name_VE=217
    Double_quote_string_VE=218
    SPACE_VE=219
    L_paren_VF=220
    SPACE_VF=221
    L_paren_VS=222
    R_paren_VS=223
    Average_VS=224
    Element_VS=225
    Max_VS=226
    Min_VS=227
    Norm_VS=228
    Rms_VS=229
    Sum_VS=230
    Atom_properties_VS=231
    SPACE_VS=232
    L_paren_CF=233
    R_paren_CF=234
    In_CF=235
    Integer_CF=236
    Real_CF=237
    Symbol_name_CF=238
    Simple_name_CF=239
    SPACE_CF=240
    COMMENT_CF=241
    Simple_name_LL=242
    SPACE_LL=243

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def patch_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Patch_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Patch_statementContext,i)


        def noe_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assign_loopContext,i)


        def dihedral_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assign_loopContext,i)


        def sani_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assign_loopContext,i)


        def coup_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assign_loopContext,i)


        def carbon_shift_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assign_loopContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.ObservedContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Assign) | (1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Dihedral) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Plane) | (1 << CnsMRParser.Group) | (1 << CnsMRParser.Harmonic) | (1 << CnsMRParser.Sanisotropy) | (1 << CnsMRParser.Coupling) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CnsMRParser.Proton - 69)) | (1 << (CnsMRParser.Observed - 69)) | (1 << (CnsMRParser.Conformation - 69)) | (1 << (CnsMRParser.Danisotropy - 69)) | (1 << (CnsMRParser.OneBond - 69)) | (1 << (CnsMRParser.AngleDb - 69)) | (1 << (CnsMRParser.Flags - 69)) | (1 << (CnsMRParser.Vector - 69)) | (1 << (CnsMRParser.Evaluate_Lp - 69)) | (1 << (CnsMRParser.Patch - 69)) | (1 << (CnsMRParser.For - 69)))) != 0):
                self.state = 173
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 144
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 145
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 146
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 147
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 148
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 149
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 150
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 151
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 152
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 153
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 154
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 155
                    self.angle_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 156
                    self.flag_statement()
                    pass

                elif la_ == 14:
                    self.state = 157
                    self.vector_statement()
                    pass

                elif la_ == 15:
                    self.state = 158
                    self.evaluate_statement()
                    pass

                elif la_ == 16:
                    self.state = 159
                    self.patch_statement()
                    pass

                elif la_ == 17:
                    self.state = 160
                    self.noe_assign_loop()
                    pass

                elif la_ == 18:
                    self.state = 161
                    self.dihedral_assign_loop()
                    pass

                elif la_ == 19:
                    self.state = 162
                    self.sani_assign_loop()
                    pass

                elif la_ == 20:
                    self.state = 163
                    self.coup_assign_loop()
                    pass

                elif la_ == 21:
                    self.state = 164
                    self.carbon_shift_assign_loop()
                    pass

                elif la_ == 22:
                    self.state = 165
                    self.noe_assign()
                    pass

                elif la_ == 23:
                    self.state = 166
                    self.dihedral_assign()
                    pass

                elif la_ == 24:
                    self.state = 167
                    self.sani_assign()
                    pass

                elif la_ == 25:
                    self.state = 168
                    self.plane_statement()
                    pass

                elif la_ == 26:
                    self.state = 169
                    self.harmonic_assign()
                    pass

                elif la_ == 27:
                    self.state = 170
                    self.coup_assign()
                    pass

                elif la_ == 28:
                    self.state = 171
                    self.carbon_shift_assign()
                    pass

                elif la_ == 29:
                    self.state = 172
                    self.observed()
                    pass


                self.state = 177
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 178
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self.match(CnsMRParser.Noe)
            self.state = 184
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 181
                    self.noe_statement() 
                self.state = 186
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 187
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 189
                self.match(CnsMRParser.Restraints)


            self.state = 192
            self.match(CnsMRParser.Dihedral)
            self.state = 196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Scale) | (1 << CnsMRParser.Nassign) | (1 << CnsMRParser.Print_any))) != 0) or _la==CnsMRParser.Vector or _la==CnsMRParser.For:
                self.state = 193
                self.dihedral_statement()
                self.state = 198
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 199
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 201
                self.match(CnsMRParser.Restraints)


            self.state = 204
            self.match(CnsMRParser.Plane)
            self.state = 208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0) or _la==CnsMRParser.Vector:
                self.state = 205
                self.plane_statement()
                self.state = 210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 211
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 213
                self.match(CnsMRParser.Restraints)


            self.state = 216
            self.match(CnsMRParser.Harmonic)
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Exponent or _la==CnsMRParser.Normal or _la==CnsMRParser.Vector:
                self.state = 217
                self.harmonic_statement()
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 223
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(CnsMRParser.Sanisotropy)
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0) or _la==CnsMRParser.For:
                self.state = 226
                self.sani_statement()
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 232
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.match(CnsMRParser.Coupling)
            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0) or _la==CnsMRParser.For:
                self.state = 235
                self.coupling_statement()
                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 241
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.match(CnsMRParser.Carbon)
            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.ForceConstant - 5)) | (1 << (CnsMRParser.Expectation - 5)) | (1 << (CnsMRParser.PhiStep - 5)) | (1 << (CnsMRParser.PsiStep - 5)) | (1 << (CnsMRParser.Rcoil - 5)) | (1 << (CnsMRParser.Zero - 5)))) != 0) or _la==CnsMRParser.For:
                self.state = 244
                self.carbon_shift_statement()
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 250
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(CnsMRParser.Proton)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Classification) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CnsMRParser.Rcoil - 67)) | (1 << (CnsMRParser.Observed - 67)) | (1 << (CnsMRParser.Anisotropy - 67)) | (1 << (CnsMRParser.Amides - 67)) | (1 << (CnsMRParser.Nitrogens - 67)) | (1 << (CnsMRParser.Oxygens - 67)) | (1 << (CnsMRParser.RingAtoms - 67)) | (1 << (CnsMRParser.AlphasAndAmides - 67)) | (1 << (CnsMRParser.Error - 67)))) != 0):
                self.state = 253
                self.proton_shift_statement()
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 259
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def conformation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(CnsMRParser.Conformation)
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Compressed - 64)) | (1 << (CnsMRParser.Phase - 64)) | (1 << (CnsMRParser.Size - 64)))) != 0):
                self.state = 262
                self.conformation_statement()
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 268
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(CnsMRParser.Danisotropy)
            self.state = 274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 271
                self.diffusion_statement()
                self.state = 276
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 277
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 279
            self.match(CnsMRParser.OneBond)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 280
                self.one_bond_coupling_statement()
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 286
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 288
            self.match(CnsMRParser.AngleDb)
            self.state = 292
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Size - 64)) | (1 << (CnsMRParser.DerivFlag - 64)))) != 0):
                self.state = 289
                self.angle_db_statement()
                self.state = 294
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 295
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def noe_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,0)


        def noe_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assign_loopContext,0)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Average(self):
            return self.getToken(CnsMRParser.Average, 0)

        def Simple_name_A(self):
            return self.getToken(CnsMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(CnsMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(CnsMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(CnsMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 426
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 297
                self.match(CnsMRParser.Analysis)
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 298
                    self.match(CnsMRParser.Equ_op)


                self.state = 301
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 302
                self.noe_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 303
                self.noe_assign_loop()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 304
                self.match(CnsMRParser.Asymptote)
                self.state = 305
                self.match(CnsMRParser.Simple_name)
                self.state = 306
                self.number_s()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 307
                self.match(CnsMRParser.Average)
                self.state = 308
                self.match(CnsMRParser.Simple_name_A)
                self.state = 309
                self.match(CnsMRParser.Averaging_methods)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 310
                self.match(CnsMRParser.Bhig)
                self.state = 311
                self.match(CnsMRParser.Simple_name)
                self.state = 312
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 313
                self.match(CnsMRParser.Ceiling)
                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 314
                    self.match(CnsMRParser.Equ_op)


                self.state = 317
                self.number_s()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 318
                self.match(CnsMRParser.Classification)
                self.state = 320
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 319
                    self.match(CnsMRParser.Equ_op)


                self.state = 322
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 323
                self.match(CnsMRParser.CountViol)
                self.state = 324
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 325
                self.match(CnsMRParser.Cv)
                self.state = 327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 326
                    self.match(CnsMRParser.Equ_op)


                self.state = 329
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 330
                self.match(CnsMRParser.Den)
                self.state = 331
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 332
                self.match(CnsMRParser.Den)
                self.state = 333
                self.match(CnsMRParser.Update)
                self.state = 334
                self.match(CnsMRParser.Gamma)
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 335
                    self.match(CnsMRParser.Equ_op)


                self.state = 338
                self.number_s()
                self.state = 339
                self.match(CnsMRParser.Kappa)
                self.state = 341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 340
                    self.match(CnsMRParser.Equ_op)


                self.state = 343
                self.number_s()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 345
                self.match(CnsMRParser.Distribute)
                self.state = 346
                self.match(CnsMRParser.Simple_name)
                self.state = 347
                self.match(CnsMRParser.Simple_name)
                self.state = 348
                self.number_s()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 349
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 354
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 355
                self.match(CnsMRParser.End)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 356
                self.match(CnsMRParser.Monomers)
                self.state = 357
                self.match(CnsMRParser.Simple_name)
                self.state = 358
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 359
                self.match(CnsMRParser.Ncount)
                self.state = 360
                self.match(CnsMRParser.Simple_name)
                self.state = 361
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 362
                self.match(CnsMRParser.Nrestraints)
                self.state = 364
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 363
                    self.match(CnsMRParser.Equ_op)


                self.state = 366
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 367
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 368
                self.match(CnsMRParser.Partition)
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 369
                    self.match(CnsMRParser.Equ_op)


                self.state = 372
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 373
                self.match(CnsMRParser.Potential)
                self.state = 374
                self.match(CnsMRParser.Simple_name_P)
                self.state = 375
                self.match(CnsMRParser.Potential_types)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 376
                self.match(CnsMRParser.Predict)
                self.state = 377
                self.predict_statement()
                self.state = 378
                self.match(CnsMRParser.End)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 380
                self.match(CnsMRParser.Print)
                self.state = 381
                self.match(CnsMRParser.Threshold)
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 382
                    self.match(CnsMRParser.Equ_op)


                self.state = 385
                self.number_s()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 386
                self.match(CnsMRParser.Raverage)
                self.state = 390
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 387
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 392
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 393
                self.match(CnsMRParser.End)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 394
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 395
                self.match(CnsMRParser.Rswitch)
                self.state = 396
                self.match(CnsMRParser.Simple_name)
                self.state = 397
                self.number_s()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 398
                self.match(CnsMRParser.Scale)
                self.state = 399
                self.match(CnsMRParser.Simple_name)
                self.state = 400
                self.number_s()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 401
                self.match(CnsMRParser.SoExponent)
                self.state = 402
                self.match(CnsMRParser.Simple_name)
                self.state = 403
                self.number_s()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 404
                self.match(CnsMRParser.SqConstant)
                self.state = 405
                self.match(CnsMRParser.Simple_name)
                self.state = 406
                self.number_s()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 407
                self.match(CnsMRParser.SqExponent)
                self.state = 408
                self.match(CnsMRParser.Simple_name)
                self.state = 409
                self.number_s()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 410
                self.match(CnsMRParser.SqOffset)
                self.state = 411
                self.match(CnsMRParser.Simple_name)
                self.state = 412
                self.number_s()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 413
                self.match(CnsMRParser.Taverage)
                self.state = 417
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 414
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 419
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                self.state = 420
                self.match(CnsMRParser.End)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 421
                self.match(CnsMRParser.Temperature)
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 422
                    self.match(CnsMRParser.Equ_op)


                self.state = 425
                self.number_s()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Assign)
            else:
                return self.getToken(CnsMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 428
            self.match(CnsMRParser.Assign)
            self.state = 429
            self.selection()
            self.state = 430
            self.selection()
            self.state = 431
            self.number()
            self.state = 433
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 432
                self.number()


            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (CnsMRParser.Integer - 139)) | (1 << (CnsMRParser.Real - 139)) | (1 << (CnsMRParser.Symbol_name - 139)))) != 0):
                self.state = 435
                self.number()


            self.state = 441
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 438
                    self.noe_annotation() 
                self.state = 443
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 444
                self.match(CnsMRParser.Or_op)
                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Assign:
                    self.state = 445
                    self.match(CnsMRParser.Assign)


                self.state = 448
                self.selection()
                self.state = 449
                self.selection()
                self.state = 451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 450
                    self.number()


                self.state = 454
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 453
                    self.number()


                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (CnsMRParser.Integer - 139)) | (1 << (CnsMRParser.Real - 139)) | (1 << (CnsMRParser.Symbol_name - 139)))) != 0):
                    self.state = 456
                    self.number()


                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 464
                self.match(CnsMRParser.Cutoff)
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 465
                    self.match(CnsMRParser.Equ_op)


                self.state = 468
                self.number_s()
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 469
                self.match(CnsMRParser.Cuton)
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 470
                    self.match(CnsMRParser.Equ_op)


                self.state = 473
                self.number_s()
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 474
                self.match(CnsMRParser.From)
                self.state = 475
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 476
                self.match(CnsMRParser.To)
                self.state = 477
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(CnsMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(CnsMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(CnsMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(CnsMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(CnsMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(CnsMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = CnsMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 480
                self.match(CnsMRParser.Peak)
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 481
                    self.match(CnsMRParser.Equ_op)


                self.state = 484
                self.number_a()
                pass
            elif token in [CnsMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 485
                self.match(CnsMRParser.Spectrum)
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 486
                    self.match(CnsMRParser.Equ_op)


                self.state = 489
                self.number_a()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 490
                self.match(CnsMRParser.Weight)
                self.state = 492
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 491
                    self.match(CnsMRParser.Equ_op)


                self.state = 494
                self.number_a()
                pass
            elif token in [CnsMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 495
                self.match(CnsMRParser.Volume)
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 496
                    self.match(CnsMRParser.Equ_op)


                self.state = 499
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 500
                self.match(CnsMRParser.Ppm1)
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 501
                    self.match(CnsMRParser.Equ_op)


                self.state = 504
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 505
                self.match(CnsMRParser.Ppm2)
                self.state = 507
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 506
                    self.match(CnsMRParser.Equ_op)


                self.state = 509
                self.number_a()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 510
                self.match(CnsMRParser.Cv)
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 511
                    self.match(CnsMRParser.Equ_op)


                self.state = 514
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def dihedral_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assign_loopContext,0)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 542
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.dihedral_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 519
                self.dihedral_assign_loop()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 520
                self.match(CnsMRParser.Cv)
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 521
                    self.match(CnsMRParser.Equ_op)


                self.state = 524
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 525
                self.match(CnsMRParser.Nassign)
                self.state = 527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 526
                    self.match(CnsMRParser.Equ_op)


                self.state = 529
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 530
                self.match(CnsMRParser.Partition)
                self.state = 532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 531
                    self.match(CnsMRParser.Equ_op)


                self.state = 534
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 535
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 8)
                self.state = 536
                self.match(CnsMRParser.Scale)
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 537
                    self.match(CnsMRParser.Equ_op)


                self.state = 540
                self.number_s()
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 9)
                self.state = 541
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(CnsMRParser.Assign)
            self.state = 545
            self.selection()
            self.state = 546
            self.selection()
            self.state = 547
            self.selection()
            self.state = 548
            self.selection()
            self.state = 549
            self.number()
            self.state = 550
            self.number()
            self.state = 551
            self.number()
            self.state = 552
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_plane_statement)
        self._la = 0 # Token type
        try:
            self.state = 565
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 554
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.match(CnsMRParser.Group)
                self.state = 559
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Selection or _la==CnsMRParser.Weight:
                    self.state = 556
                    self.group_statement()
                    self.state = 561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 562
                self.match(CnsMRParser.End)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 3)
                self.state = 563
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 4)
                self.state = 564
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 577
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 567
                self.match(CnsMRParser.Selection)
                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 568
                    self.match(CnsMRParser.Equ_op)


                self.state = 571
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.match(CnsMRParser.Weight)
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 573
                    self.match(CnsMRParser.Equ_op)


                self.state = 576
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 619
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 579
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 2)
                self.state = 580
                self.match(CnsMRParser.Exponent)
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 581
                    self.match(CnsMRParser.Equ_op)


                self.state = 584
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 585
                self.match(CnsMRParser.Normal)
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 586
                    self.match(CnsMRParser.Equ_op)


                self.state = 589
                self.match(CnsMRParser.L_paren)
                self.state = 615
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integer, CnsMRParser.Real, CnsMRParser.Symbol_name]:
                    self.state = 590
                    self.number_s()
                    self.state = 592
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 591
                        self.match(CnsMRParser.Comma)


                    self.state = 594
                    self.number_s()
                    self.state = 596
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 595
                        self.match(CnsMRParser.Comma)


                    self.state = 598
                    self.number_s()
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 600
                    self.match(CnsMRParser.Tail)
                    self.state = 602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 601
                        self.match(CnsMRParser.Equ_op)


                    self.state = 604
                    self.selection()
                    self.state = 606
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 605
                        self.match(CnsMRParser.Comma)


                    self.state = 613
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 608
                        self.match(CnsMRParser.Head)
                        self.state = 610
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CnsMRParser.Equ_op:
                            self.state = 609
                            self.match(CnsMRParser.Equ_op)


                        self.state = 612
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 617
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = CnsMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 621
            self.match(CnsMRParser.Assign)
            self.state = 622
            self.selection()
            self.state = 623
            self.number()
            self.state = 624
            self.number()
            self.state = 625
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,0)


        def sani_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 658
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 627
                self.sani_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 628
                self.sani_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 629
                self.match(CnsMRParser.Classification)
                self.state = 631
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 630
                    self.match(CnsMRParser.Equ_op)


                self.state = 633
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 634
                self.match(CnsMRParser.Coefficients)
                self.state = 635
                self.number_s()
                self.state = 636
                self.number_s()
                self.state = 637
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 639
                self.match(CnsMRParser.ForceConstant)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 640
                    self.match(CnsMRParser.Equ_op)


                self.state = 643
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 644
                self.match(CnsMRParser.Nrestraints)
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 645
                    self.match(CnsMRParser.Equ_op)


                self.state = 648
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 7)
                self.state = 649
                self.match(CnsMRParser.Potential)
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 650
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 653
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 654
                self.match(CnsMRParser.Print)
                self.state = 655
                self.match(CnsMRParser.Threshold)
                self.state = 656
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 657
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 660
            self.match(CnsMRParser.Assign)
            self.state = 661
            self.selection()
            self.state = 662
            self.selection()
            self.state = 663
            self.selection()
            self.state = 664
            self.selection()
            self.state = 665
            self.selection()
            self.state = 666
            self.selection()
            self.state = 667
            self.number()
            self.state = 669
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 668
                self.number()


            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (CnsMRParser.Integer - 139)) | (1 << (CnsMRParser.Real - 139)) | (1 << (CnsMRParser.Symbol_name - 139)))) != 0):
                self.state = 671
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,0)


        def coup_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 674
                self.coup_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 675
                self.coup_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 676
                self.match(CnsMRParser.Classification)
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 677
                    self.match(CnsMRParser.Equ_op)


                self.state = 680
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 681
                self.match(CnsMRParser.Coefficients)
                self.state = 682
                self.number_s()
                self.state = 683
                self.number_s()
                self.state = 684
                self.number_s()
                self.state = 685
                self.number_s()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 5)
                self.state = 687
                self.match(CnsMRParser.Cv)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 688
                    self.match(CnsMRParser.Equ_op)


                self.state = 691
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 692
                self.match(CnsMRParser.ForceConstant)
                self.state = 693
                self.number_s()
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (CnsMRParser.Integer - 139)) | (1 << (CnsMRParser.Real - 139)) | (1 << (CnsMRParser.Symbol_name - 139)))) != 0):
                    self.state = 694
                    self.number_s()


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 697
                self.match(CnsMRParser.Nrestraints)
                self.state = 699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 698
                    self.match(CnsMRParser.Equ_op)


                self.state = 701
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 8)
                self.state = 702
                self.match(CnsMRParser.Partition)
                self.state = 704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 703
                    self.match(CnsMRParser.Equ_op)


                self.state = 706
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 707
                self.match(CnsMRParser.Potential)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 708
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 711
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 712
                self.match(CnsMRParser.Print)
                self.state = 713
                self.match(CnsMRParser.Threshold)
                self.state = 714
                self.number_s()
                self.state = 721
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 715
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 716
                    self.match(CnsMRParser.Classification)
                    self.state = 718
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 717
                        self.match(CnsMRParser.Equ_op)


                    self.state = 720
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 723
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(CnsMRParser.Assign)
            self.state = 727
            self.selection()
            self.state = 728
            self.selection()
            self.state = 729
            self.selection()
            self.state = 730
            self.selection()
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 731
                self.selection()
                self.state = 732
                self.selection()
                self.state = 733
                self.selection()
                self.state = 734
                self.selection()


            self.state = 738
            self.number()
            self.state = 739
            self.number()
            self.state = 743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (CnsMRParser.Integer - 139)) | (1 << (CnsMRParser.Real - 139)) | (1 << (CnsMRParser.Symbol_name - 139)))) != 0):
                self.state = 740
                self.number()
                self.state = 741
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,0)


        def carbon_shift_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 745
                self.carbon_shift_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 746
                self.carbon_shift_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 747
                self.match(CnsMRParser.Classification)
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 748
                    self.match(CnsMRParser.Equ_op)


                self.state = 751
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 752
                self.match(CnsMRParser.Expectation)
                self.state = 753
                self.match(CnsMRParser.Integer)
                self.state = 754
                self.match(CnsMRParser.Integer)
                self.state = 755
                self.number_s()
                self.state = 756
                self.number_s()
                self.state = 757
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 759
                self.match(CnsMRParser.ForceConstant)
                self.state = 761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 760
                    self.match(CnsMRParser.Equ_op)


                self.state = 763
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 764
                self.match(CnsMRParser.Nrestraints)
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 765
                    self.match(CnsMRParser.Equ_op)


                self.state = 768
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 769
                self.match(CnsMRParser.PhiStep)
                self.state = 771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 770
                    self.match(CnsMRParser.Equ_op)


                self.state = 773
                self.number_s()
                pass
            elif token in [CnsMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 8)
                self.state = 774
                self.match(CnsMRParser.PsiStep)
                self.state = 776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 775
                    self.match(CnsMRParser.Equ_op)


                self.state = 778
                self.number_s()
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 779
                self.match(CnsMRParser.Potential)
                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 780
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 783
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 784
                self.match(CnsMRParser.Print)
                self.state = 785
                self.match(CnsMRParser.Threshold)
                self.state = 786
                self.number_s()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 11)
                self.state = 787
                self.carbon_shift_rcoil()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 788
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 789
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 792
            self.match(CnsMRParser.Assign)
            self.state = 793
            self.selection()
            self.state = 794
            self.selection()
            self.state = 795
            self.selection()
            self.state = 796
            self.selection()
            self.state = 797
            self.selection()
            self.state = 798
            self.number()
            self.state = 799
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 801
            self.match(CnsMRParser.Rcoil)
            self.state = 802
            self.selection()
            self.state = 803
            self.number()
            self.state = 804
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(CnsMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 846
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 806
                self.observed()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 807
                self.proton_shift_rcoil()
                pass
            elif token in [CnsMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 808
                self.proton_shift_anisotropy()
                pass
            elif token in [CnsMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 809
                self.proton_shift_amides()
                pass
            elif token in [CnsMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 810
                self.proton_shift_carbons()
                pass
            elif token in [CnsMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 811
                self.proton_shift_nitrogens()
                pass
            elif token in [CnsMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 812
                self.proton_shift_oxygens()
                pass
            elif token in [CnsMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 813
                self.proton_shift_ring_atoms()
                pass
            elif token in [CnsMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 814
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 815
                self.match(CnsMRParser.Classification)
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 816
                    self.match(CnsMRParser.Equ_op)


                self.state = 819
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 820
                self.match(CnsMRParser.Error)
                self.state = 822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 821
                    self.match(CnsMRParser.Equ_op)


                self.state = 824
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 12)
                self.state = 825
                self.match(CnsMRParser.ForceConstant)
                self.state = 826
                self.number_s()
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (CnsMRParser.Integer - 139)) | (1 << (CnsMRParser.Real - 139)) | (1 << (CnsMRParser.Symbol_name - 139)))) != 0):
                    self.state = 827
                    self.number_s()


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 830
                self.match(CnsMRParser.Potential)
                self.state = 831
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 832
                self.match(CnsMRParser.Print)
                self.state = 833
                self.match(CnsMRParser.Threshold)
                self.state = 834
                self.number_s()
                self.state = 841
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 835
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 836
                    self.match(CnsMRParser.Classification)
                    self.state = 838
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 837
                        self.match(CnsMRParser.Equ_op)


                    self.state = 840
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 843
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 845
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(CnsMRParser.Observed)
            self.state = 849
            self.selection()
            self.state = 851
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 850
                self.selection()


            self.state = 853
            self.number()
            self.state = 855
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (CnsMRParser.Integer - 139)) | (1 << (CnsMRParser.Real - 139)) | (1 << (CnsMRParser.Symbol_name - 139)))) != 0):
                self.state = 854
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self):
            return self.getTypedRuleContext(CnsMRParser.NumberContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(CnsMRParser.Rcoil)
            self.state = 858
            self.selection()
            self.state = 859
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(CnsMRParser.Anisotropy)
            self.state = 862
            self.selection()
            self.state = 863
            self.selection()
            self.state = 864
            self.selection()
            self.state = 865
            self.match(CnsMRParser.Simple_name)
            self.state = 867
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 866
                self.match(CnsMRParser.Logical)


            self.state = 869
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(CnsMRParser.Amides)
            self.state = 872
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.match(CnsMRParser.Carbon)
            self.state = 875
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(CnsMRParser.Nitrogens)
            self.state = 878
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.match(CnsMRParser.Oxygens)
            self.state = 881
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(CnsMRParser.RingAtoms)
            self.state = 884
            self.match(CnsMRParser.Simple_name)
            self.state = 885
            self.selection()
            self.state = 886
            self.selection()
            self.state = 887
            self.selection()
            self.state = 888
            self.selection()
            self.state = 889
            self.selection()
            self.state = 891
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 890
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 894
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 896
                self.conf_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 897
                self.match(CnsMRParser.Classification)
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 898
                    self.match(CnsMRParser.Equ_op)


                self.state = 901
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 902
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 903
                self.match(CnsMRParser.Expectation)
                self.state = 904
                self.match(CnsMRParser.Integer)
                self.state = 906
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 905
                    self.match(CnsMRParser.Integer)


                self.state = 909
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 908
                    self.match(CnsMRParser.Integer)


                self.state = 912
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 911
                    self.match(CnsMRParser.Integer)


                self.state = 914
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 915
                self.match(CnsMRParser.Error)
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 916
                    self.match(CnsMRParser.Equ_op)


                self.state = 919
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 920
                self.match(CnsMRParser.ForceConstant)
                self.state = 922
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 921
                    self.match(CnsMRParser.Equ_op)


                self.state = 924
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 925
                self.match(CnsMRParser.Nrestraints)
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 926
                    self.match(CnsMRParser.Equ_op)


                self.state = 929
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 930
                self.match(CnsMRParser.Phase)
                self.state = 931
                self.match(CnsMRParser.Integer)
                self.state = 932
                self.match(CnsMRParser.Integer)
                self.state = 933
                self.match(CnsMRParser.Integer)
                self.state = 937
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 934
                    self.match(CnsMRParser.Integer)
                    self.state = 935
                    self.match(CnsMRParser.Integer)
                    self.state = 936
                    self.match(CnsMRParser.Integer)


                self.state = 942
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 939
                    self.match(CnsMRParser.Integer)
                    self.state = 940
                    self.match(CnsMRParser.Integer)
                    self.state = 941
                    self.match(CnsMRParser.Integer)


                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 944
                    self.match(CnsMRParser.Integer)
                    self.state = 945
                    self.match(CnsMRParser.Integer)
                    self.state = 946
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 949
                self.match(CnsMRParser.Potential)
                self.state = 951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 950
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 953
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 954
                self.match(CnsMRParser.Print)
                self.state = 955
                self.match(CnsMRParser.Threshold)
                self.state = 956
                self.number_s()
                self.state = 963
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 957
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 958
                    self.match(CnsMRParser.Classification)
                    self.state = 960
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 959
                        self.match(CnsMRParser.Equ_op)


                    self.state = 962
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 965
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 966
                self.match(CnsMRParser.Size)
                self.state = 967
                self.match(CnsMRParser.Dimensions)
                self.state = 968
                self.match(CnsMRParser.Integer)
                self.state = 970
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 969
                    self.match(CnsMRParser.Integer)


                self.state = 973
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 972
                    self.match(CnsMRParser.Integer)


                self.state = 976
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 975
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 978
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 981
            self.match(CnsMRParser.Assign)
            self.state = 982
            self.selection()
            self.state = 983
            self.selection()
            self.state = 984
            self.selection()
            self.state = 985
            self.selection()
            self.state = 991
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 986
                self.selection()
                self.state = 987
                self.selection()
                self.state = 988
                self.selection()
                self.state = 989
                self.selection()


            self.state = 998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 993
                self.selection()
                self.state = 994
                self.selection()
                self.state = 995
                self.selection()
                self.state = 996
                self.selection()


            self.state = 1005
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1000
                self.selection()
                self.state = 1001
                self.selection()
                self.state = 1002
                self.selection()
                self.state = 1003
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1039
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1007
                self.dani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1008
                self.match(CnsMRParser.Classification)
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1009
                    self.match(CnsMRParser.Equ_op)


                self.state = 1012
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1013
                self.match(CnsMRParser.Coefficients)
                self.state = 1014
                self.number_s()
                self.state = 1015
                self.number_s()
                self.state = 1016
                self.number_s()
                self.state = 1017
                self.number_s()
                self.state = 1018
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1020
                self.match(CnsMRParser.ForceConstant)
                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1021
                    self.match(CnsMRParser.Equ_op)


                self.state = 1024
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1025
                self.match(CnsMRParser.Nrestraints)
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1026
                    self.match(CnsMRParser.Equ_op)


                self.state = 1029
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1030
                self.match(CnsMRParser.Potential)
                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1031
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1034
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1035
                self.match(CnsMRParser.Print)
                self.state = 1036
                self.match(CnsMRParser.Threshold)
                self.state = 1037
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1038
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1041
            self.match(CnsMRParser.Assign)
            self.state = 1042
            self.selection()
            self.state = 1043
            self.selection()
            self.state = 1044
            self.selection()
            self.state = 1045
            self.selection()
            self.state = 1046
            self.selection()
            self.state = 1047
            self.selection()
            self.state = 1048
            self.number()
            self.state = 1050
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (CnsMRParser.Integer - 139)) | (1 << (CnsMRParser.Real - 139)) | (1 << (CnsMRParser.Symbol_name - 139)))) != 0):
                self.state = 1049
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1086
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1052
                self.one_bond_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1053
                self.match(CnsMRParser.Classification)
                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1054
                    self.match(CnsMRParser.Equ_op)


                self.state = 1057
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1058
                self.match(CnsMRParser.Coefficients)
                self.state = 1059
                self.number_s()
                self.state = 1060
                self.number_s()
                self.state = 1061
                self.number_s()
                self.state = 1062
                self.number_s()
                self.state = 1063
                self.number_s()
                self.state = 1064
                self.number_s()
                self.state = 1065
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1067
                self.match(CnsMRParser.ForceConstant)
                self.state = 1069
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1068
                    self.match(CnsMRParser.Equ_op)


                self.state = 1071
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1072
                self.match(CnsMRParser.Nrestraints)
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1073
                    self.match(CnsMRParser.Equ_op)


                self.state = 1076
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1077
                self.match(CnsMRParser.Potential)
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1078
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1081
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1082
                self.match(CnsMRParser.Print)
                self.state = 1083
                self.match(CnsMRParser.Threshold)
                self.state = 1084
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1085
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1088
            self.match(CnsMRParser.Assign)
            self.state = 1089
            self.selection()
            self.state = 1090
            self.selection()
            self.state = 1091
            self.selection()
            self.state = 1092
            self.selection()
            self.state = 1093
            self.selection()
            self.state = 1094
            self.selection()
            self.state = 1095
            self.selection()
            self.state = 1096
            self.selection()
            self.state = 1097
            self.number()
            self.state = 1098
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(CnsMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1100
                self.angle_db_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1101
                self.match(CnsMRParser.Classification)
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1102
                    self.match(CnsMRParser.Equ_op)


                self.state = 1105
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1106
                self.match(CnsMRParser.DerivFlag)
                self.state = 1108
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1107
                    self.match(CnsMRParser.Equ_op)


                self.state = 1110
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1111
                self.match(CnsMRParser.Expectation)
                self.state = 1112
                self.match(CnsMRParser.Integer)
                self.state = 1113
                self.match(CnsMRParser.Integer)
                self.state = 1114
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1115
                self.match(CnsMRParser.Error)
                self.state = 1117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1116
                    self.match(CnsMRParser.Equ_op)


                self.state = 1119
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1120
                self.match(CnsMRParser.ForceConstant)
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1121
                    self.match(CnsMRParser.Equ_op)


                self.state = 1124
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1125
                self.match(CnsMRParser.Nrestraints)
                self.state = 1127
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1126
                    self.match(CnsMRParser.Equ_op)


                self.state = 1129
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1130
                self.match(CnsMRParser.Potential)
                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1131
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1134
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1135
                self.match(CnsMRParser.Print)
                self.state = 1136
                self.match(CnsMRParser.Threshold)
                self.state = 1137
                self.number_s()
                self.state = 1144
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 1138
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 1139
                    self.match(CnsMRParser.Classification)
                    self.state = 1141
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1140
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1143
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1146
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1147
                self.match(CnsMRParser.Size)
                self.state = 1148
                self.match(CnsMRParser.Angle_or_Dihedral)
                self.state = 1149
                self.match(CnsMRParser.Integer)
                self.state = 1150
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1151
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self.match(CnsMRParser.Assign)
            self.state = 1155
            self.selection()
            self.state = 1156
            self.selection()
            self.state = 1157
            self.selection()
            self.state = 1158
            self.selection()
            self.state = 1159
            self.selection()
            self.state = 1160
            self.selection()
            self.state = 1161
            self.selection()
            self.state = 1162
            self.selection()
            self.state = 1163
            self.selection()
            self.state = 1164
            self.selection()
            self.state = 1165
            self.selection()
            self.state = 1167
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1166
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            self.match(CnsMRParser.L_paren)
            self.state = 1170
            self.selection_expression()
            self.state = 1171
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1173
            self.term()
            self.state = 1178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 1174
                self.match(CnsMRParser.Or_op)
                self.state = 1175
                self.term()
                self.state = 1180
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.factor(0)
            self.state = 1186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1182
                self.match(CnsMRParser.And_op)
                self.state = 1183
                self.factor(0)
                self.state = 1188
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store_1(self):
            return self.getToken(CnsMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(CnsMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(CnsMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(CnsMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(CnsMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(CnsMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(CnsMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(CnsMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(CnsMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1190
                self.match(CnsMRParser.L_paren)
                self.state = 1191
                self.selection_expression()
                self.state = 1192
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1194
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1195
                self.match(CnsMRParser.Atom)
                self.state = 1196
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1197
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1198
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1199
                self.match(CnsMRParser.Attribute)
                self.state = 1201
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1200
                    self.match(CnsMRParser.Abs)


                self.state = 1203
                self.match(CnsMRParser.Attr_properties)
                self.state = 1204
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1205
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1206
                self.match(CnsMRParser.BondedTo)
                self.state = 1207
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1208
                self.match(CnsMRParser.ByGroup)
                self.state = 1209
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1210
                self.match(CnsMRParser.ByRes)
                self.state = 1211
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1212
                self.match(CnsMRParser.Chemical)
                self.state = 1220
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1213
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1214
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1217
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        self.state = 1215
                        self.match(CnsMRParser.Colon)
                        self.state = 1216
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1219
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1222
                self.match(CnsMRParser.Fbox)
                self.state = 1223
                self.number_f()
                self.state = 1224
                self.number_f()
                self.state = 1225
                self.number_f()
                self.state = 1226
                self.number_f()
                self.state = 1227
                self.number_f()
                self.state = 1228
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1230
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1231
                self.match(CnsMRParser.Id)
                self.state = 1232
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1233
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1234
                self.match(CnsMRParser.Name)
                self.state = 1247
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1235
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1236
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1239
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                    if la_ == 1:
                        self.state = 1237
                        self.match(CnsMRParser.Colon)
                        self.state = 1238
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1241
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1244
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                    if la_ == 1:
                        self.state = 1242
                        self.match(CnsMRParser.Colon)
                        self.state = 1243
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1246
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1249
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1250
                self.match(CnsMRParser.Not_op)
                self.state = 1251
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1252
                self.match(CnsMRParser.Point)
                self.state = 1253
                self.match(CnsMRParser.L_paren)
                self.state = 1254
                self.number_f()
                self.state = 1256
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1255
                    self.match(CnsMRParser.Comma)


                self.state = 1258
                self.number_f()
                self.state = 1260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1259
                    self.match(CnsMRParser.Comma)


                self.state = 1262
                self.number_f()
                self.state = 1263
                self.match(CnsMRParser.R_paren)
                self.state = 1264
                self.match(CnsMRParser.Cut)
                self.state = 1265
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1267
                self.match(CnsMRParser.Point)
                self.state = 1268
                self.match(CnsMRParser.L_paren)
                self.state = 1269
                self.match(CnsMRParser.Tail)
                self.state = 1271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1270
                    self.match(CnsMRParser.Equ_op)


                self.state = 1273
                self.selection()
                self.state = 1275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1274
                    self.match(CnsMRParser.Comma)


                self.state = 1282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1277
                    self.match(CnsMRParser.Head)
                    self.state = 1279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1278
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1281
                    self.selection()


                self.state = 1284
                self.match(CnsMRParser.R_paren)
                self.state = 1285
                self.match(CnsMRParser.Cut)
                self.state = 1286
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1288
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1289
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1290
                self.match(CnsMRParser.Residue)
                self.state = 1298
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1291
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1292
                    self.match(CnsMRParser.Integer)
                    self.state = 1295
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                    if la_ == 1:
                        self.state = 1293
                        self.match(CnsMRParser.Colon)
                        self.state = 1294
                        self.match(CnsMRParser.Integer)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1297
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1300
                self.match(CnsMRParser.Resname)
                self.state = 1308
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1301
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1302
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1305
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                    if la_ == 1:
                        self.state = 1303
                        self.match(CnsMRParser.Colon)
                        self.state = 1304
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1307
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1310
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1323
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1311
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1312
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1315
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                    if la_ == 1:
                        self.state = 1313
                        self.match(CnsMRParser.Colon)
                        self.state = 1314
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1317
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1320
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                    if la_ == 1:
                        self.state = 1318
                        self.match(CnsMRParser.Colon)
                        self.state = 1319
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1322
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1325
                self.match(CnsMRParser.Sfbox)
                self.state = 1326
                self.number_f()
                self.state = 1327
                self.number_f()
                self.state = 1328
                self.number_f()
                self.state = 1329
                self.number_f()
                self.state = 1330
                self.number_f()
                self.state = 1331
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1333
                self.match(CnsMRParser.Store_1)
                pass

            elif la_ == 25:
                self.state = 1334
                self.match(CnsMRParser.Store_2)
                pass

            elif la_ == 26:
                self.state = 1335
                self.match(CnsMRParser.Store_3)
                pass

            elif la_ == 27:
                self.state = 1336
                self.match(CnsMRParser.Store_4)
                pass

            elif la_ == 28:
                self.state = 1337
                self.match(CnsMRParser.Store_5)
                pass

            elif la_ == 29:
                self.state = 1338
                self.match(CnsMRParser.Store_6)
                pass

            elif la_ == 30:
                self.state = 1339
                self.match(CnsMRParser.Store_7)
                pass

            elif la_ == 31:
                self.state = 1340
                self.match(CnsMRParser.Store_8)
                pass

            elif la_ == 32:
                self.state = 1341
                self.match(CnsMRParser.Store_9)
                pass

            elif la_ == 33:
                self.state = 1342
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1353
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1351
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1345
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1346
                        self.match(CnsMRParser.Around)
                        self.state = 1347
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1348
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1349
                        self.match(CnsMRParser.Saround)
                        self.state = 1350
                        self.number_f()
                        pass

             
                self.state = 1355
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1356
            _la = self._input.LA(1)
            if not(((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (CnsMRParser.Integer - 139)) | (1 << (CnsMRParser.Real - 139)) | (1 << (CnsMRParser.Symbol_name - 139)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1358
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1360
            _la = self._input.LA(1)
            if not(((((_la - 139)) & ~0x3f) == 0 and ((1 << (_la - 139)) & ((1 << (CnsMRParser.Integer - 139)) | (1 << (CnsMRParser.Real - 139)) | (1 << (CnsMRParser.Symbol_name - 139)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = CnsMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CnsMRParser.Flags, 0)

        def Include(self):
            return self.getToken(CnsMRParser.Include, 0)

        def End_F(self):
            return self.getToken(CnsMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(CnsMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Class_name)
            else:
                return self.getToken(CnsMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(CnsMRParser.Any_class, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = CnsMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            self.match(CnsMRParser.Flags)
            self.state = 1375
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Exclude:
                self.state = 1365
                self.match(CnsMRParser.Exclude)
                self.state = 1373
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Include, CnsMRParser.Class_name]:
                    self.state = 1369
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CnsMRParser.Class_name:
                        self.state = 1366
                        self.match(CnsMRParser.Class_name)
                        self.state = 1371
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CnsMRParser.Any_class]:
                    self.state = 1372
                    self.match(CnsMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1377
            self.match(CnsMRParser.Include)
            self.state = 1381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Class_name:
                self.state = 1378
                self.match(CnsMRParser.Class_name)
                self.state = 1383
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1384
            self.match(CnsMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(CnsMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = CnsMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1386
            self.match(CnsMRParser.Vector)
            self.state = 1387
            self.vector_mode()
            self.state = 1388
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(CnsMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(CnsMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(CnsMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = CnsMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 1396
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Do_Lp, CnsMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1390
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Do_Lp or _la==CnsMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1391
                self.vector_expression()
                self.state = 1392
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1394
                self.match(CnsMRParser.Show)
                self.state = 1395
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = CnsMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1398
            self.match(CnsMRParser.Atom_properties_VE)
            self.state = 1401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Equ_op_VE:
                self.state = 1399
                self.match(CnsMRParser.Equ_op_VE)
                self.state = 1400
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = CnsMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1403
            self.vflc()
            self.state = 1406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & ((1 << (CnsMRParser.Add_op_VE - 185)) | (1 << (CnsMRParser.Sub_op_VE - 185)) | (1 << (CnsMRParser.Mul_op_VE - 185)) | (1 << (CnsMRParser.Div_op_VE - 185)) | (1 << (CnsMRParser.Exp_op_VE - 185)))) != 0):
                self.state = 1404
                _la = self._input.LA(1)
                if not(((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & ((1 << (CnsMRParser.Add_op_VE - 185)) | (1 << (CnsMRParser.Sub_op_VE - 185)) | (1 << (CnsMRParser.Mul_op_VE - 185)) | (1 << (CnsMRParser.Div_op_VE - 185)) | (1 << (CnsMRParser.Exp_op_VE - 185)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1405
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(CnsMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(CnsMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(CnsMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(CnsMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = CnsMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vflc)
        try:
            self.state = 1415
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1408
                self.match(CnsMRParser.Atom_properties_VE)
                pass
            elif token in [CnsMRParser.Abs_VE, CnsMRParser.Acos_VE, CnsMRParser.Cos_VE, CnsMRParser.Decode_VE, CnsMRParser.Encode_VE, CnsMRParser.Exp_VE, CnsMRParser.Gauss_VE, CnsMRParser.Heavy_VE, CnsMRParser.Int_VE, CnsMRParser.Log10_VE, CnsMRParser.Log_VE, CnsMRParser.Max_VE, CnsMRParser.Maxw_VE, CnsMRParser.Min_VE, CnsMRParser.Mod_VE, CnsMRParser.Norm_VE, CnsMRParser.Random_VE, CnsMRParser.Sign_VE, CnsMRParser.Sin_VE, CnsMRParser.Sqrt_VE, CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1409
                self.vector_func_call()
                pass
            elif token in [CnsMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1410
                self.match(CnsMRParser.Integer_VE)
                pass
            elif token in [CnsMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1411
                self.match(CnsMRParser.Real_VE)
                pass
            elif token in [CnsMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1412
                self.match(CnsMRParser.Simple_name_VE)
                pass
            elif token in [CnsMRParser.Symbol_name_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1413
                self.match(CnsMRParser.Symbol_name_VE)
                pass
            elif token in [CnsMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1414
                self.match(CnsMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(CnsMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(CnsMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(CnsMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(CnsMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(CnsMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(CnsMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(CnsMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(CnsMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(CnsMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(CnsMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(CnsMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(CnsMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(CnsMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma_VE)
            else:
                return self.getToken(CnsMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(CnsMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(CnsMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(CnsMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(CnsMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(CnsMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(CnsMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(CnsMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(CnsMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(CnsMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = CnsMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1536
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1417
                self.match(CnsMRParser.Abs_VE)
                self.state = 1418
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1419
                self.vflc()
                self.state = 1420
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1422
                self.match(CnsMRParser.Acos_VE)
                self.state = 1423
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1424
                self.vflc()
                self.state = 1425
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1427
                self.match(CnsMRParser.Cos_VE)
                self.state = 1428
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1429
                self.vflc()
                self.state = 1430
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1432
                self.match(CnsMRParser.Decode_VE)
                self.state = 1433
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1434
                self.vflc()
                self.state = 1435
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1437
                self.match(CnsMRParser.Encode_VE)
                self.state = 1438
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1439
                self.vflc()
                self.state = 1440
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1442
                self.match(CnsMRParser.Exp_VE)
                self.state = 1443
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1444
                self.vflc()
                self.state = 1445
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1447
                self.match(CnsMRParser.Gauss_VE)
                self.state = 1448
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1449
                self.vflc()
                self.state = 1450
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1452
                self.match(CnsMRParser.Heavy_VE)
                self.state = 1453
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1454
                self.vflc()
                self.state = 1455
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1457
                self.match(CnsMRParser.Int_VE)
                self.state = 1458
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1459
                self.vflc()
                self.state = 1460
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1462
                self.match(CnsMRParser.Log10_VE)
                self.state = 1463
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1464
                self.vflc()
                self.state = 1465
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1467
                self.match(CnsMRParser.Log_VE)
                self.state = 1468
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1469
                self.vflc()
                self.state = 1470
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1472
                self.match(CnsMRParser.Max_VE)
                self.state = 1473
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1474
                self.vflc()
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1475
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1476
                    self.vflc()
                    self.state = 1481
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1482
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1484
                self.match(CnsMRParser.Maxw_VE)
                self.state = 1485
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1486
                self.vflc()
                self.state = 1487
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1489
                self.match(CnsMRParser.Min_VE)
                self.state = 1490
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1491
                self.vflc()
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1492
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1493
                    self.vflc()
                    self.state = 1498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1499
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1501
                self.match(CnsMRParser.Mod_VE)
                self.state = 1502
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1503
                self.vflc()
                self.state = 1504
                self.match(CnsMRParser.Comma_VE)
                self.state = 1505
                self.vflc()
                self.state = 1506
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1508
                self.match(CnsMRParser.Norm_VE)
                self.state = 1509
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1510
                self.vflc()
                self.state = 1511
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1513
                self.match(CnsMRParser.Random_VE)
                self.state = 1514
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1515
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1516
                self.match(CnsMRParser.Sign_VE)
                self.state = 1517
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1518
                self.vflc()
                self.state = 1519
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1521
                self.match(CnsMRParser.Sin_VE)
                self.state = 1522
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1523
                self.vflc()
                self.state = 1524
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1526
                self.match(CnsMRParser.Sqrt_VE)
                self.state = 1527
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1528
                self.vflc()
                self.state = 1529
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1531
                self.match(CnsMRParser.Tan_VE)
                self.state = 1532
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1533
                self.vflc()
                self.state = 1534
                self.match(CnsMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(CnsMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(CnsMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(CnsMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(CnsMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(CnsMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(CnsMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(CnsMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(CnsMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(CnsMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(CnsMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = CnsMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1538
            _la = self._input.LA(1)
            if not(((((_la - 224)) & ~0x3f) == 0 and ((1 << (_la - 224)) & ((1 << (CnsMRParser.Average_VS - 224)) | (1 << (CnsMRParser.Element_VS - 224)) | (1 << (CnsMRParser.Max_VS - 224)) | (1 << (CnsMRParser.Min_VS - 224)) | (1 << (CnsMRParser.Norm_VS - 224)) | (1 << (CnsMRParser.Rms_VS - 224)) | (1 << (CnsMRParser.Sum_VS - 224)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1539
            self.match(CnsMRParser.L_paren_VS)
            self.state = 1540
            self.match(CnsMRParser.Atom_properties_VS)
            self.state = 1541
            self.match(CnsMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(CnsMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = CnsMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1543
            self.match(CnsMRParser.Evaluate_Lp)
            self.state = 1544
            self.match(CnsMRParser.Symbol_name_VE)
            self.state = 1545
            self.match(CnsMRParser.Equ_op_VE)
            self.state = 1546
            self.evaluate_operation()
            self.state = 1547
            self.match(CnsMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = CnsMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            self.vflc()
            self.state = 1552
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & ((1 << (CnsMRParser.Add_op_VE - 185)) | (1 << (CnsMRParser.Sub_op_VE - 185)) | (1 << (CnsMRParser.Mul_op_VE - 185)) | (1 << (CnsMRParser.Div_op_VE - 185)) | (1 << (CnsMRParser.Exp_op_VE - 185)))) != 0):
                self.state = 1550
                _la = self._input.LA(1)
                if not(((((_la - 185)) & ~0x3f) == 0 and ((1 << (_la - 185)) & ((1 << (CnsMRParser.Add_op_VE - 185)) | (1 << (CnsMRParser.Sub_op_VE - 185)) | (1 << (CnsMRParser.Mul_op_VE - 185)) | (1 << (CnsMRParser.Div_op_VE - 185)) | (1 << (CnsMRParser.Exp_op_VE - 185)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1551
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Patch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Patch(self):
            return self.getToken(CnsMRParser.Patch, 0)

        def Reference(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Reference)
            else:
                return self.getToken(CnsMRParser.Reference, i)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Nil(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Nil)
            else:
                return self.getToken(CnsMRParser.Nil, i)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_patch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatch_statement" ):
                listener.enterPatch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatch_statement" ):
                listener.exitPatch_statement(self)




    def patch_statement(self):

        localctx = CnsMRParser.Patch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_patch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1554
            self.match(CnsMRParser.Patch)
            self.state = 1556
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Simple_name:
                self.state = 1555
                self.match(CnsMRParser.Simple_name)


            self.state = 1558
            self.match(CnsMRParser.Reference)
            self.state = 1559
            self.match(CnsMRParser.Equ_op)
            self.state = 1560
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Nil or _la==CnsMRParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1561
            self.match(CnsMRParser.Equ_op)
            self.state = 1562
            self.selection()
            self.state = 1568
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Reference:
                self.state = 1563
                self.match(CnsMRParser.Reference)
                self.state = 1564
                self.match(CnsMRParser.Equ_op)
                self.state = 1565
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Nil or _la==CnsMRParser.Integer):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1566
                self.match(CnsMRParser.Equ_op)
                self.state = 1567
                self.selection()


            self.state = 1570
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign_loop" ):
                listener.enterNoe_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign_loop" ):
                listener.exitNoe_assign_loop(self)




    def noe_assign_loop(self):

        localctx = CnsMRParser.Noe_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_noe_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1572
            self.match(CnsMRParser.For)
            self.state = 1573
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1574
            self.match(CnsMRParser.In_CF)
            self.state = 1575
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1594
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1576
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1582
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1587
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1588
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1596
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1597
            self.match(CnsMRParser.Loop)
            self.state = 1598
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1603
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1601
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1599
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1600
                    self.noe_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1605
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1606
            self.match(CnsMRParser.End)
            self.state = 1607
            self.match(CnsMRParser.Loop)
            self.state = 1608
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = CnsMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.match(CnsMRParser.For)
            self.state = 1611
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1612
            self.match(CnsMRParser.In_CF)
            self.state = 1613
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1632
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 1617
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1614
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1619
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1620
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1625
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1626
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1631
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1634
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1635
            self.match(CnsMRParser.Loop)
            self.state = 1636
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1641
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1639
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1637
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1638
                    self.dihedral_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1643
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1644
            self.match(CnsMRParser.End)
            self.state = 1645
            self.match(CnsMRParser.Loop)
            self.state = 1646
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign_loop" ):
                listener.enterSani_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign_loop" ):
                listener.exitSani_assign_loop(self)




    def sani_assign_loop(self):

        localctx = CnsMRParser.Sani_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_sani_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1648
            self.match(CnsMRParser.For)
            self.state = 1649
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1650
            self.match(CnsMRParser.In_CF)
            self.state = 1651
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,199,self._ctx)
            if la_ == 1:
                self.state = 1655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1652
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1657
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1658
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1663
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1664
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1669
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1672
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1673
            self.match(CnsMRParser.Loop)
            self.state = 1674
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1677
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1675
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1676
                    self.sani_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1681
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1682
            self.match(CnsMRParser.End)
            self.state = 1683
            self.match(CnsMRParser.Loop)
            self.state = 1684
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign_loop" ):
                listener.enterCoup_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign_loop" ):
                listener.exitCoup_assign_loop(self)




    def coup_assign_loop(self):

        localctx = CnsMRParser.Coup_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_coup_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1686
            self.match(CnsMRParser.For)
            self.state = 1687
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1688
            self.match(CnsMRParser.In_CF)
            self.state = 1689
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 1693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1690
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1699
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1696
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1701
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1702
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1707
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1710
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1711
            self.match(CnsMRParser.Loop)
            self.state = 1712
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1715
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1713
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1714
                    self.coup_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1719
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1720
            self.match(CnsMRParser.End)
            self.state = 1721
            self.match(CnsMRParser.Loop)
            self.state = 1722
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign_loop" ):
                listener.enterCarbon_shift_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign_loop" ):
                listener.exitCarbon_shift_assign_loop(self)




    def carbon_shift_assign_loop(self):

        localctx = CnsMRParser.Carbon_shift_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_carbon_shift_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1724
            self.match(CnsMRParser.For)
            self.state = 1725
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1726
            self.match(CnsMRParser.In_CF)
            self.state = 1727
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1746
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,211,self._ctx)
            if la_ == 1:
                self.state = 1731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1728
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1733
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1737
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1734
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1739
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1740
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1745
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1748
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1749
            self.match(CnsMRParser.Loop)
            self.state = 1750
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1755
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1753
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1751
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1752
                    self.carbon_shift_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1757
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1758
            self.match(CnsMRParser.End)
            self.state = 1759
            self.match(CnsMRParser.Loop)
            self.state = 1760
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[51] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




