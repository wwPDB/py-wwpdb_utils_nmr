# Generated from CnsMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,218,1477,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,147,8,
        0,10,0,12,0,150,9,0,1,0,1,0,1,1,1,1,5,1,156,8,1,10,1,12,1,159,9,
        1,1,1,1,1,1,2,3,2,164,8,2,1,2,1,2,5,2,168,8,2,10,2,12,2,171,9,2,
        1,2,1,2,1,3,3,3,176,8,3,1,3,1,3,5,3,180,8,3,10,3,12,3,183,9,3,1,
        3,1,3,1,4,3,4,188,8,4,1,4,1,4,5,4,192,8,4,10,4,12,4,195,9,4,1,4,
        1,4,1,5,1,5,5,5,201,8,5,10,5,12,5,204,9,5,1,5,1,5,1,6,1,6,5,6,210,
        8,6,10,6,12,6,213,9,6,1,6,1,6,1,7,1,7,5,7,219,8,7,10,7,12,7,222,
        9,7,1,7,1,7,1,8,1,8,5,8,228,8,8,10,8,12,8,231,9,8,1,8,1,8,1,9,1,
        9,5,9,237,8,9,10,9,12,9,240,9,9,1,9,1,9,1,10,1,10,5,10,246,8,10,
        10,10,12,10,249,9,10,1,10,1,10,1,11,1,11,5,11,255,8,11,10,11,12,
        11,258,9,11,1,11,1,11,1,12,1,12,5,12,264,8,12,10,12,12,12,267,9,
        12,1,12,1,12,1,13,1,13,3,13,273,8,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,288,8,13,1,13,1,13,1,
        13,3,13,293,8,13,1,13,1,13,1,13,1,13,1,13,3,13,300,8,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,3,13,309,8,13,1,13,1,13,1,13,3,13,314,8,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,323,8,13,10,13,12,13,
        326,9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,337,8,
        13,1,13,1,13,1,13,1,13,3,13,343,8,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,3,13,356,8,13,1,13,1,13,1,13,5,13,361,
        8,13,10,13,12,13,364,9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,5,13,388,8,13,10,13,12,13,391,9,13,1,13,1,13,1,13,3,13,396,
        8,13,1,13,3,13,399,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,5,14,
        408,8,14,10,14,12,14,411,9,14,1,14,1,14,1,14,1,14,5,14,417,8,14,
        10,14,12,14,420,9,14,1,15,1,15,3,15,424,8,15,1,15,1,15,1,15,3,15,
        429,8,15,1,15,1,15,1,15,1,15,1,15,3,15,436,8,15,1,16,1,16,3,16,440,
        8,16,1,16,1,16,1,16,3,16,445,8,16,1,16,1,16,1,16,3,16,450,8,16,1,
        16,1,16,1,16,3,16,455,8,16,1,16,1,16,1,16,3,16,460,8,16,1,16,1,16,
        1,16,3,16,465,8,16,1,16,1,16,1,16,3,16,470,8,16,1,16,3,16,473,8,
        16,1,17,1,17,1,17,3,17,478,8,17,1,17,1,17,1,17,3,17,483,8,17,1,17,
        1,17,1,17,3,17,488,8,17,1,17,1,17,1,17,1,17,3,17,494,8,17,1,17,1,
        17,3,17,498,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,19,1,19,5,19,512,8,19,10,19,12,19,515,9,19,1,19,1,19,1,19,3,
        19,520,8,19,1,20,1,20,3,20,524,8,20,1,20,1,20,1,20,3,20,529,8,20,
        1,20,3,20,532,8,20,1,21,1,21,3,21,536,8,21,1,21,1,21,1,21,3,21,541,
        8,21,1,21,1,21,1,21,3,21,546,8,21,1,21,1,21,3,21,550,8,21,1,21,1,
        21,1,21,1,21,3,21,556,8,21,1,21,1,21,3,21,560,8,21,1,21,1,21,3,21,
        564,8,21,1,21,3,21,567,8,21,3,21,569,8,21,1,21,1,21,3,21,573,8,21,
        1,22,1,22,1,22,3,22,578,8,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,3,22,588,8,22,1,22,1,22,1,22,3,22,593,8,22,1,22,1,22,1,22,3,
        22,598,8,22,1,22,1,22,1,22,1,22,1,22,3,22,605,8,22,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,617,8,23,1,24,1,24,1,24,
        3,24,622,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,
        633,8,24,1,24,1,24,1,24,1,24,3,24,639,8,24,1,24,1,24,3,24,643,8,
        24,1,24,1,24,1,24,3,24,648,8,24,1,24,1,24,1,24,3,24,653,8,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,3,24,662,8,24,1,24,3,24,665,8,24,1,
        24,3,24,668,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,3,25,680,8,25,1,25,1,25,1,25,1,25,1,25,3,25,687,8,25,1,26,1,26,
        1,26,3,26,692,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,3,26,704,8,26,1,26,1,26,1,26,3,26,709,8,26,1,26,1,26,1,26,3,
        26,714,8,26,1,26,1,26,1,26,3,26,719,8,26,1,26,1,26,1,26,3,26,724,
        8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,733,8,26,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,760,8,29,
        1,29,1,29,1,29,3,29,765,8,29,1,29,1,29,1,29,1,29,3,29,771,8,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,3,29,781,8,29,1,29,3,29,784,
        8,29,1,29,1,29,1,29,3,29,789,8,29,1,30,1,30,1,30,3,30,794,8,30,1,
        30,1,30,3,30,798,8,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,1,32,1,
        32,1,32,3,32,810,8,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,34,1,
        35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,
        37,3,37,834,8,37,1,38,1,38,1,38,1,39,1,39,1,39,3,39,842,8,39,1,39,
        1,39,1,39,1,39,1,39,3,39,849,8,39,1,39,3,39,852,8,39,1,39,3,39,855,
        8,39,1,39,1,39,1,39,3,39,860,8,39,1,39,1,39,1,39,3,39,865,8,39,1,
        39,1,39,1,39,3,39,870,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,3,39,880,8,39,1,39,1,39,1,39,3,39,885,8,39,1,39,1,39,1,39,3,39,
        890,8,39,1,39,1,39,3,39,894,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,3,39,903,8,39,1,39,3,39,906,8,39,1,39,1,39,1,39,1,39,1,39,3,39,
        913,8,39,1,39,3,39,916,8,39,1,39,3,39,919,8,39,1,39,3,39,922,8,39,
        1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,934,8,40,
        1,40,1,40,1,40,1,40,1,40,3,40,941,8,40,1,40,1,40,1,40,1,40,1,40,
        3,40,948,8,40,1,41,1,41,1,41,3,41,953,8,41,1,41,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,1,41,3,41,965,8,41,1,41,1,41,1,41,3,41,970,
        8,41,1,41,1,41,1,41,3,41,975,8,41,1,41,1,41,1,41,1,41,1,41,3,41,
        982,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,43,
        1,43,1,43,3,43,997,8,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,1,43,1,43,1,43,3,43,1011,8,43,1,43,1,43,1,43,3,43,1016,8,43,
        1,43,1,43,1,43,3,43,1021,8,43,1,43,1,43,1,43,1,43,1,43,3,43,1028,
        8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,45,1,45,1,45,3,45,1045,8,45,1,45,1,45,1,45,3,45,1050,8,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,3,45,1059,8,45,1,45,1,45,1,45,3,45,
        1064,8,45,1,45,1,45,1,45,3,45,1069,8,45,1,45,1,45,1,45,3,45,1074,
        8,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1083,8,45,1,45,3,45,
        1086,8,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1094,8,45,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1109,
        8,46,1,47,1,47,1,47,1,47,1,48,1,48,1,48,5,48,1118,8,48,10,48,12,
        48,1121,9,48,1,49,1,49,1,49,5,49,1126,8,49,10,49,12,49,1129,9,49,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,
        1143,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,3,50,1159,8,50,3,50,1161,8,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        3,50,1180,8,50,3,50,1182,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        3,50,1191,8,50,1,50,1,50,3,50,1195,8,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,3,50,1206,8,50,1,50,1,50,3,50,1210,8,50,1,50,
        1,50,3,50,1214,8,50,1,50,3,50,1217,8,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,3,50,1230,8,50,3,50,1232,8,50,1,50,
        1,50,1,50,1,50,1,50,3,50,1239,8,50,3,50,1241,8,50,1,50,1,50,1,50,
        1,50,1,50,3,50,1248,8,50,1,50,1,50,1,50,3,50,1253,8,50,3,50,1255,
        8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,3,50,1275,8,50,1,50,1,50,1,50,1,50,
        1,50,1,50,5,50,1283,8,50,10,50,12,50,1286,9,50,1,51,1,51,1,52,1,
        52,1,53,1,53,1,54,1,54,1,55,1,55,1,55,5,55,1299,8,55,10,55,12,55,
        1302,9,55,1,55,3,55,1305,8,55,3,55,1307,8,55,1,55,1,55,5,55,1311,
        8,55,10,55,12,55,1314,9,55,1,55,1,55,1,56,1,56,1,56,1,56,1,57,1,
        57,1,57,1,57,1,57,1,57,3,57,1328,8,57,1,58,1,58,1,58,3,58,1333,8,
        58,1,59,1,59,1,59,5,59,1338,8,59,10,59,12,59,1341,9,59,1,60,1,60,
        1,60,1,60,1,60,1,60,3,60,1349,8,60,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,5,61,1411,8,61,10,61,12,61,1414,9,61,1,61,1,61,1,61,1,
        61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,5,61,1428,8,61,10,61,
        12,61,1431,9,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
        1,61,3,61,1470,8,61,1,62,1,62,1,62,1,62,1,62,1,62,3,324,362,389,
        1,100,63,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
        40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
        84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,0,6,1,0,137,138,2,0,133,133,139,139,2,0,133,133,135,
        135,1,0,123,124,1,0,174,178,1,0,210,216,1770,0,148,1,0,0,0,2,153,
        1,0,0,0,4,163,1,0,0,0,6,175,1,0,0,0,8,187,1,0,0,0,10,198,1,0,0,0,
        12,207,1,0,0,0,14,216,1,0,0,0,16,225,1,0,0,0,18,234,1,0,0,0,20,243,
        1,0,0,0,22,252,1,0,0,0,24,261,1,0,0,0,26,398,1,0,0,0,28,400,1,0,
        0,0,30,435,1,0,0,0,32,472,1,0,0,0,34,497,1,0,0,0,36,499,1,0,0,0,
        38,519,1,0,0,0,40,531,1,0,0,0,42,572,1,0,0,0,44,604,1,0,0,0,46,606,
        1,0,0,0,48,667,1,0,0,0,50,669,1,0,0,0,52,732,1,0,0,0,54,734,1,0,
        0,0,56,743,1,0,0,0,58,788,1,0,0,0,60,790,1,0,0,0,62,799,1,0,0,0,
        64,803,1,0,0,0,66,813,1,0,0,0,68,816,1,0,0,0,70,819,1,0,0,0,72,822,
        1,0,0,0,74,825,1,0,0,0,76,835,1,0,0,0,78,921,1,0,0,0,80,923,1,0,
        0,0,82,981,1,0,0,0,84,983,1,0,0,0,86,1027,1,0,0,0,88,1029,1,0,0,
        0,90,1093,1,0,0,0,92,1095,1,0,0,0,94,1110,1,0,0,0,96,1114,1,0,0,
        0,98,1122,1,0,0,0,100,1274,1,0,0,0,102,1287,1,0,0,0,104,1289,1,0,
        0,0,106,1291,1,0,0,0,108,1293,1,0,0,0,110,1295,1,0,0,0,112,1317,
        1,0,0,0,114,1327,1,0,0,0,116,1329,1,0,0,0,118,1334,1,0,0,0,120,1348,
        1,0,0,0,122,1469,1,0,0,0,124,1471,1,0,0,0,126,147,3,2,1,0,127,147,
        3,4,2,0,128,147,3,6,3,0,129,147,3,8,4,0,130,147,3,10,5,0,131,147,
        3,12,6,0,132,147,3,14,7,0,133,147,3,16,8,0,134,147,3,18,9,0,135,
        147,3,20,10,0,136,147,3,22,11,0,137,147,3,24,12,0,138,147,3,110,
        55,0,139,147,3,112,56,0,140,147,3,28,14,0,141,147,3,36,18,0,142,
        147,3,46,23,0,143,147,3,38,19,0,144,147,3,50,25,0,145,147,3,54,27,
        0,146,126,1,0,0,0,146,127,1,0,0,0,146,128,1,0,0,0,146,129,1,0,0,
        0,146,130,1,0,0,0,146,131,1,0,0,0,146,132,1,0,0,0,146,133,1,0,0,
        0,146,134,1,0,0,0,146,135,1,0,0,0,146,136,1,0,0,0,146,137,1,0,0,
        0,146,138,1,0,0,0,146,139,1,0,0,0,146,140,1,0,0,0,146,141,1,0,0,
        0,146,142,1,0,0,0,146,143,1,0,0,0,146,144,1,0,0,0,146,145,1,0,0,
        0,147,150,1,0,0,0,148,146,1,0,0,0,148,149,1,0,0,0,149,151,1,0,0,
        0,150,148,1,0,0,0,151,152,5,0,0,1,152,1,1,0,0,0,153,157,5,3,0,0,
        154,156,3,26,13,0,155,154,1,0,0,0,156,159,1,0,0,0,157,155,1,0,0,
        0,157,158,1,0,0,0,158,160,1,0,0,0,159,157,1,0,0,0,160,161,5,2,0,
        0,161,3,1,0,0,0,162,164,5,48,0,0,163,162,1,0,0,0,163,164,1,0,0,0,
        164,165,1,0,0,0,165,169,5,49,0,0,166,168,3,34,17,0,167,166,1,0,0,
        0,168,171,1,0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,172,1,0,0,
        0,171,169,1,0,0,0,172,173,5,2,0,0,173,5,1,0,0,0,174,176,5,48,0,0,
        175,174,1,0,0,0,175,176,1,0,0,0,176,177,1,0,0,0,177,181,5,52,0,0,
        178,180,3,38,19,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,
        0,181,182,1,0,0,0,182,184,1,0,0,0,183,181,1,0,0,0,184,185,5,2,0,
        0,185,7,1,0,0,0,186,188,5,48,0,0,187,186,1,0,0,0,187,188,1,0,0,0,
        188,189,1,0,0,0,189,193,5,56,0,0,190,192,3,42,21,0,191,190,1,0,0,
        0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,
        0,195,193,1,0,0,0,196,197,5,2,0,0,197,9,1,0,0,0,198,202,5,59,0,0,
        199,201,3,44,22,0,200,199,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,
        0,202,203,1,0,0,0,203,205,1,0,0,0,204,202,1,0,0,0,205,206,5,2,0,
        0,206,11,1,0,0,0,207,211,5,62,0,0,208,210,3,48,24,0,209,208,1,0,
        0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,214,1,0,
        0,0,213,211,1,0,0,0,214,215,5,2,0,0,215,13,1,0,0,0,216,220,5,63,
        0,0,217,219,3,52,26,0,218,217,1,0,0,0,219,222,1,0,0,0,220,218,1,
        0,0,0,220,221,1,0,0,0,221,223,1,0,0,0,222,220,1,0,0,0,223,224,5,
        2,0,0,224,15,1,0,0,0,225,229,5,69,0,0,226,228,3,58,29,0,227,226,
        1,0,0,0,228,231,1,0,0,0,229,227,1,0,0,0,229,230,1,0,0,0,230,232,
        1,0,0,0,231,229,1,0,0,0,232,233,5,2,0,0,233,17,1,0,0,0,234,238,5,
        78,0,0,235,237,3,78,39,0,236,235,1,0,0,0,237,240,1,0,0,0,238,236,
        1,0,0,0,238,239,1,0,0,0,239,241,1,0,0,0,240,238,1,0,0,0,241,242,
        5,2,0,0,242,19,1,0,0,0,243,247,5,83,0,0,244,246,3,82,41,0,245,244,
        1,0,0,0,246,249,1,0,0,0,247,245,1,0,0,0,247,248,1,0,0,0,248,250,
        1,0,0,0,249,247,1,0,0,0,250,251,5,2,0,0,251,21,1,0,0,0,252,256,5,
        84,0,0,253,255,3,86,43,0,254,253,1,0,0,0,255,258,1,0,0,0,256,254,
        1,0,0,0,256,257,1,0,0,0,257,259,1,0,0,0,258,256,1,0,0,0,259,260,
        5,2,0,0,260,23,1,0,0,0,261,265,5,85,0,0,262,264,3,90,45,0,263,262,
        1,0,0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,268,
        1,0,0,0,267,265,1,0,0,0,268,269,5,2,0,0,269,25,1,0,0,0,270,272,5,
        4,0,0,271,273,5,143,0,0,272,271,1,0,0,0,272,273,1,0,0,0,273,274,
        1,0,0,0,274,399,5,164,0,0,275,399,3,28,14,0,276,277,5,6,0,0,277,
        278,5,137,0,0,278,399,3,106,53,0,279,280,5,7,0,0,280,281,5,159,0,
        0,281,399,5,158,0,0,282,283,5,8,0,0,283,284,5,137,0,0,284,399,3,
        106,53,0,285,287,5,9,0,0,286,288,5,143,0,0,287,286,1,0,0,0,287,288,
        1,0,0,0,288,289,1,0,0,0,289,399,3,106,53,0,290,292,5,10,0,0,291,
        293,5,143,0,0,292,291,1,0,0,0,292,293,1,0,0,0,293,294,1,0,0,0,294,
        399,5,137,0,0,295,296,5,11,0,0,296,399,5,137,0,0,297,299,5,12,0,
        0,298,300,5,143,0,0,299,298,1,0,0,0,299,300,1,0,0,0,300,301,1,0,
        0,0,301,399,5,133,0,0,302,303,5,13,0,0,303,399,5,35,0,0,304,305,
        5,13,0,0,305,306,5,36,0,0,306,308,5,37,0,0,307,309,5,143,0,0,308,
        307,1,0,0,0,308,309,1,0,0,0,309,310,1,0,0,0,310,311,3,106,53,0,311,
        313,5,38,0,0,312,314,5,143,0,0,313,312,1,0,0,0,313,314,1,0,0,0,314,
        315,1,0,0,0,315,316,3,106,53,0,316,399,1,0,0,0,317,318,5,14,0,0,
        318,319,5,137,0,0,319,320,5,137,0,0,320,399,3,106,53,0,321,323,5,
        15,0,0,322,321,1,0,0,0,323,326,1,0,0,0,324,325,1,0,0,0,324,322,1,
        0,0,0,325,327,1,0,0,0,326,324,1,0,0,0,327,399,5,2,0,0,328,329,5,
        16,0,0,329,330,5,137,0,0,330,399,5,133,0,0,331,332,5,17,0,0,332,
        333,5,137,0,0,333,399,5,133,0,0,334,336,5,18,0,0,335,337,5,143,0,
        0,336,335,1,0,0,0,336,337,1,0,0,0,337,338,1,0,0,0,338,399,5,133,
        0,0,339,399,5,19,0,0,340,342,5,20,0,0,341,343,5,143,0,0,342,341,
        1,0,0,0,342,343,1,0,0,0,343,344,1,0,0,0,344,399,5,133,0,0,345,346,
        5,21,0,0,346,347,5,162,0,0,347,399,5,161,0,0,348,349,5,22,0,0,349,
        350,3,30,15,0,350,351,5,2,0,0,351,399,1,0,0,0,352,353,5,23,0,0,353,
        355,5,25,0,0,354,356,5,143,0,0,355,354,1,0,0,0,355,356,1,0,0,0,356,
        357,1,0,0,0,357,399,3,106,53,0,358,362,5,24,0,0,359,361,5,137,0,
        0,360,359,1,0,0,0,361,364,1,0,0,0,362,363,1,0,0,0,362,360,1,0,0,
        0,363,365,1,0,0,0,364,362,1,0,0,0,365,399,5,2,0,0,366,399,5,26,0,
        0,367,368,5,27,0,0,368,369,5,137,0,0,369,399,3,106,53,0,370,371,
        5,28,0,0,371,372,5,137,0,0,372,399,3,106,53,0,373,374,5,29,0,0,374,
        375,5,137,0,0,375,399,3,106,53,0,376,377,5,30,0,0,377,378,5,137,
        0,0,378,399,3,106,53,0,379,380,5,31,0,0,380,381,5,137,0,0,381,399,
        3,106,53,0,382,383,5,32,0,0,383,384,5,137,0,0,384,399,3,106,53,0,
        385,389,5,33,0,0,386,388,5,137,0,0,387,386,1,0,0,0,388,391,1,0,0,
        0,389,390,1,0,0,0,389,387,1,0,0,0,390,392,1,0,0,0,391,389,1,0,0,
        0,392,399,5,2,0,0,393,395,5,34,0,0,394,396,5,143,0,0,395,394,1,0,
        0,0,395,396,1,0,0,0,396,397,1,0,0,0,397,399,3,106,53,0,398,270,1,
        0,0,0,398,275,1,0,0,0,398,276,1,0,0,0,398,279,1,0,0,0,398,282,1,
        0,0,0,398,285,1,0,0,0,398,290,1,0,0,0,398,295,1,0,0,0,398,297,1,
        0,0,0,398,302,1,0,0,0,398,304,1,0,0,0,398,317,1,0,0,0,398,324,1,
        0,0,0,398,328,1,0,0,0,398,331,1,0,0,0,398,334,1,0,0,0,398,339,1,
        0,0,0,398,340,1,0,0,0,398,345,1,0,0,0,398,348,1,0,0,0,398,352,1,
        0,0,0,398,358,1,0,0,0,398,366,1,0,0,0,398,367,1,0,0,0,398,370,1,
        0,0,0,398,373,1,0,0,0,398,376,1,0,0,0,398,379,1,0,0,0,398,382,1,
        0,0,0,398,385,1,0,0,0,398,393,1,0,0,0,399,27,1,0,0,0,400,401,5,5,
        0,0,401,402,3,94,47,0,402,403,3,94,47,0,403,404,3,102,51,0,404,405,
        3,102,51,0,405,409,3,102,51,0,406,408,3,32,16,0,407,406,1,0,0,0,
        408,411,1,0,0,0,409,407,1,0,0,0,409,410,1,0,0,0,410,418,1,0,0,0,
        411,409,1,0,0,0,412,413,5,128,0,0,413,414,3,94,47,0,414,415,3,94,
        47,0,415,417,1,0,0,0,416,412,1,0,0,0,417,420,1,0,0,0,418,416,1,0,
        0,0,418,419,1,0,0,0,419,29,1,0,0,0,420,418,1,0,0,0,421,423,5,39,
        0,0,422,424,5,143,0,0,423,422,1,0,0,0,423,424,1,0,0,0,424,425,1,
        0,0,0,425,436,3,106,53,0,426,428,5,40,0,0,427,429,5,143,0,0,428,
        427,1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,436,3,106,53,0,431,
        432,5,41,0,0,432,436,3,94,47,0,433,434,5,42,0,0,434,436,3,94,47,
        0,435,421,1,0,0,0,435,426,1,0,0,0,435,431,1,0,0,0,435,433,1,0,0,
        0,436,31,1,0,0,0,437,439,5,43,0,0,438,440,5,143,0,0,439,438,1,0,
        0,0,439,440,1,0,0,0,440,441,1,0,0,0,441,473,3,108,54,0,442,444,5,
        44,0,0,443,445,5,143,0,0,444,443,1,0,0,0,444,445,1,0,0,0,445,446,
        1,0,0,0,446,473,3,108,54,0,447,449,5,55,0,0,448,450,5,143,0,0,449,
        448,1,0,0,0,449,450,1,0,0,0,450,451,1,0,0,0,451,473,3,108,54,0,452,
        454,5,45,0,0,453,455,5,143,0,0,454,453,1,0,0,0,454,455,1,0,0,0,455,
        456,1,0,0,0,456,473,3,108,54,0,457,459,5,46,0,0,458,460,5,143,0,
        0,459,458,1,0,0,0,459,460,1,0,0,0,460,461,1,0,0,0,461,473,3,108,
        54,0,462,464,5,47,0,0,463,465,5,143,0,0,464,463,1,0,0,0,464,465,
        1,0,0,0,465,466,1,0,0,0,466,473,3,108,54,0,467,469,5,12,0,0,468,
        470,5,143,0,0,469,468,1,0,0,0,469,470,1,0,0,0,470,471,1,0,0,0,471,
        473,3,108,54,0,472,437,1,0,0,0,472,442,1,0,0,0,472,447,1,0,0,0,472,
        452,1,0,0,0,472,457,1,0,0,0,472,462,1,0,0,0,472,467,1,0,0,0,473,
        33,1,0,0,0,474,498,3,36,18,0,475,477,5,12,0,0,476,478,5,143,0,0,
        477,476,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,498,5,133,0,
        0,480,482,5,50,0,0,481,483,5,143,0,0,482,481,1,0,0,0,482,483,1,0,
        0,0,483,484,1,0,0,0,484,498,5,133,0,0,485,487,5,20,0,0,486,488,5,
        143,0,0,487,486,1,0,0,0,487,488,1,0,0,0,488,489,1,0,0,0,489,498,
        5,133,0,0,490,498,5,26,0,0,491,493,5,28,0,0,492,494,5,143,0,0,493,
        492,1,0,0,0,493,494,1,0,0,0,494,495,1,0,0,0,495,498,3,106,53,0,496,
        498,5,51,0,0,497,474,1,0,0,0,497,475,1,0,0,0,497,480,1,0,0,0,497,
        485,1,0,0,0,497,490,1,0,0,0,497,491,1,0,0,0,497,496,1,0,0,0,498,
        35,1,0,0,0,499,500,5,5,0,0,500,501,3,94,47,0,501,502,3,94,47,0,502,
        503,3,94,47,0,503,504,3,94,47,0,504,505,3,102,51,0,505,506,3,102,
        51,0,506,507,3,102,51,0,507,508,5,133,0,0,508,37,1,0,0,0,509,513,
        5,53,0,0,510,512,3,40,20,0,511,510,1,0,0,0,512,515,1,0,0,0,513,511,
        1,0,0,0,513,514,1,0,0,0,514,516,1,0,0,0,515,513,1,0,0,0,516,520,
        5,2,0,0,517,520,5,35,0,0,518,520,5,51,0,0,519,509,1,0,0,0,519,517,
        1,0,0,0,519,518,1,0,0,0,520,39,1,0,0,0,521,523,5,54,0,0,522,524,
        5,143,0,0,523,522,1,0,0,0,523,524,1,0,0,0,524,525,1,0,0,0,525,532,
        3,94,47,0,526,528,5,55,0,0,527,529,5,143,0,0,528,527,1,0,0,0,528,
        529,1,0,0,0,529,530,1,0,0,0,530,532,3,106,53,0,531,521,1,0,0,0,531,
        526,1,0,0,0,532,41,1,0,0,0,533,535,5,57,0,0,534,536,5,143,0,0,535,
        534,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,573,5,133,0,0,538,
        540,5,58,0,0,539,541,5,143,0,0,540,539,1,0,0,0,540,541,1,0,0,0,541,
        542,1,0,0,0,542,568,5,140,0,0,543,545,3,106,53,0,544,546,5,131,0,
        0,545,544,1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,549,3,106,
        53,0,548,550,5,131,0,0,549,548,1,0,0,0,549,550,1,0,0,0,550,551,1,
        0,0,0,551,552,3,106,53,0,552,569,1,0,0,0,553,555,5,126,0,0,554,556,
        5,143,0,0,555,554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,559,
        3,94,47,0,558,560,5,131,0,0,559,558,1,0,0,0,559,560,1,0,0,0,560,
        566,1,0,0,0,561,563,5,127,0,0,562,564,5,143,0,0,563,562,1,0,0,0,
        563,564,1,0,0,0,564,565,1,0,0,0,565,567,3,94,47,0,566,561,1,0,0,
        0,566,567,1,0,0,0,567,569,1,0,0,0,568,543,1,0,0,0,568,553,1,0,0,
        0,569,570,1,0,0,0,570,571,5,141,0,0,571,573,1,0,0,0,572,533,1,0,
        0,0,572,538,1,0,0,0,573,43,1,0,0,0,574,605,3,46,23,0,575,577,5,10,
        0,0,576,578,5,143,0,0,577,576,1,0,0,0,577,578,1,0,0,0,578,579,1,
        0,0,0,579,605,5,137,0,0,580,581,5,60,0,0,581,582,3,106,53,0,582,
        583,3,106,53,0,583,584,3,106,53,0,584,605,1,0,0,0,585,587,5,61,0,
        0,586,588,5,143,0,0,587,586,1,0,0,0,587,588,1,0,0,0,588,589,1,0,
        0,0,589,605,3,106,53,0,590,592,5,18,0,0,591,593,5,143,0,0,592,591,
        1,0,0,0,592,593,1,0,0,0,593,594,1,0,0,0,594,605,5,133,0,0,595,597,
        5,21,0,0,596,598,5,160,0,0,597,596,1,0,0,0,597,598,1,0,0,0,598,599,
        1,0,0,0,599,605,5,161,0,0,600,601,5,23,0,0,601,602,5,25,0,0,602,
        605,3,106,53,0,603,605,5,26,0,0,604,574,1,0,0,0,604,575,1,0,0,0,
        604,580,1,0,0,0,604,585,1,0,0,0,604,590,1,0,0,0,604,595,1,0,0,0,
        604,600,1,0,0,0,604,603,1,0,0,0,605,45,1,0,0,0,606,607,5,5,0,0,607,
        608,3,94,47,0,608,609,3,94,47,0,609,610,3,94,47,0,610,611,3,94,47,
        0,611,612,3,94,47,0,612,613,3,94,47,0,613,614,3,102,51,0,614,616,
        3,102,51,0,615,617,3,102,51,0,616,615,1,0,0,0,616,617,1,0,0,0,617,
        47,1,0,0,0,618,668,3,50,25,0,619,621,5,10,0,0,620,622,5,143,0,0,
        621,620,1,0,0,0,621,622,1,0,0,0,622,623,1,0,0,0,623,668,5,137,0,
        0,624,625,5,60,0,0,625,626,3,106,53,0,626,627,3,106,53,0,627,628,
        3,106,53,0,628,629,3,106,53,0,629,668,1,0,0,0,630,632,5,12,0,0,631,
        633,5,143,0,0,632,631,1,0,0,0,632,633,1,0,0,0,633,634,1,0,0,0,634,
        668,5,133,0,0,635,636,5,61,0,0,636,638,3,106,53,0,637,639,3,106,
        53,0,638,637,1,0,0,0,638,639,1,0,0,0,639,668,1,0,0,0,640,642,5,18,
        0,0,641,643,5,143,0,0,642,641,1,0,0,0,642,643,1,0,0,0,643,644,1,
        0,0,0,644,668,5,133,0,0,645,647,5,20,0,0,646,648,5,143,0,0,647,646,
        1,0,0,0,647,648,1,0,0,0,648,649,1,0,0,0,649,668,5,133,0,0,650,652,
        5,21,0,0,651,653,5,160,0,0,652,651,1,0,0,0,652,653,1,0,0,0,653,654,
        1,0,0,0,654,668,5,161,0,0,655,656,5,23,0,0,656,657,5,25,0,0,657,
        664,3,106,53,0,658,665,5,89,0,0,659,661,5,10,0,0,660,662,5,143,0,
        0,661,660,1,0,0,0,661,662,1,0,0,0,662,663,1,0,0,0,663,665,5,137,
        0,0,664,658,1,0,0,0,664,659,1,0,0,0,665,668,1,0,0,0,666,668,5,26,
        0,0,667,618,1,0,0,0,667,619,1,0,0,0,667,624,1,0,0,0,667,630,1,0,
        0,0,667,635,1,0,0,0,667,640,1,0,0,0,667,645,1,0,0,0,667,650,1,0,
        0,0,667,655,1,0,0,0,667,666,1,0,0,0,668,49,1,0,0,0,669,670,5,5,0,
        0,670,671,3,94,47,0,671,672,3,94,47,0,672,673,3,94,47,0,673,679,
        3,94,47,0,674,675,3,94,47,0,675,676,3,94,47,0,676,677,3,94,47,0,
        677,678,3,94,47,0,678,680,1,0,0,0,679,674,1,0,0,0,679,680,1,0,0,
        0,680,681,1,0,0,0,681,682,3,102,51,0,682,686,3,102,51,0,683,684,
        3,102,51,0,684,685,3,102,51,0,685,687,1,0,0,0,686,683,1,0,0,0,686,
        687,1,0,0,0,687,51,1,0,0,0,688,733,3,54,27,0,689,691,5,10,0,0,690,
        692,5,143,0,0,691,690,1,0,0,0,691,692,1,0,0,0,692,693,1,0,0,0,693,
        733,5,137,0,0,694,695,5,64,0,0,695,696,5,133,0,0,696,697,5,133,0,
        0,697,698,3,106,53,0,698,699,3,106,53,0,699,700,3,106,53,0,700,733,
        1,0,0,0,701,703,5,61,0,0,702,704,5,143,0,0,703,702,1,0,0,0,703,704,
        1,0,0,0,704,705,1,0,0,0,705,733,3,106,53,0,706,708,5,18,0,0,707,
        709,5,143,0,0,708,707,1,0,0,0,708,709,1,0,0,0,709,710,1,0,0,0,710,
        733,5,133,0,0,711,713,5,65,0,0,712,714,5,143,0,0,713,712,1,0,0,0,
        713,714,1,0,0,0,714,715,1,0,0,0,715,733,3,106,53,0,716,718,5,66,
        0,0,717,719,5,143,0,0,718,717,1,0,0,0,718,719,1,0,0,0,719,720,1,
        0,0,0,720,733,3,106,53,0,721,723,5,21,0,0,722,724,5,160,0,0,723,
        722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,733,5,161,0,0,726,
        727,5,23,0,0,727,728,5,25,0,0,728,733,3,106,53,0,729,733,3,56,28,
        0,730,733,5,26,0,0,731,733,5,68,0,0,732,688,1,0,0,0,732,689,1,0,
        0,0,732,694,1,0,0,0,732,701,1,0,0,0,732,706,1,0,0,0,732,711,1,0,
        0,0,732,716,1,0,0,0,732,721,1,0,0,0,732,726,1,0,0,0,732,729,1,0,
        0,0,732,730,1,0,0,0,732,731,1,0,0,0,733,53,1,0,0,0,734,735,5,5,0,
        0,735,736,3,94,47,0,736,737,3,94,47,0,737,738,3,94,47,0,738,739,
        3,94,47,0,739,740,3,94,47,0,740,741,3,102,51,0,741,742,3,102,51,
        0,742,55,1,0,0,0,743,744,5,67,0,0,744,745,3,94,47,0,745,746,3,106,
        53,0,746,747,3,106,53,0,747,57,1,0,0,0,748,789,3,60,30,0,749,789,
        3,62,31,0,750,789,3,64,32,0,751,789,3,66,33,0,752,789,3,68,34,0,
        753,789,3,70,35,0,754,789,3,72,36,0,755,789,3,74,37,0,756,789,3,
        76,38,0,757,759,5,10,0,0,758,760,5,143,0,0,759,758,1,0,0,0,759,760,
        1,0,0,0,760,761,1,0,0,0,761,789,5,137,0,0,762,764,5,77,0,0,763,765,
        5,143,0,0,764,763,1,0,0,0,764,765,1,0,0,0,765,766,1,0,0,0,766,789,
        3,106,53,0,767,768,5,61,0,0,768,770,3,106,53,0,769,771,3,106,53,
        0,770,769,1,0,0,0,770,771,1,0,0,0,771,789,1,0,0,0,772,773,5,21,0,
        0,773,789,5,161,0,0,774,775,5,23,0,0,775,776,5,25,0,0,776,783,3,
        106,53,0,777,784,5,89,0,0,778,780,5,10,0,0,779,781,5,143,0,0,780,
        779,1,0,0,0,780,781,1,0,0,0,781,782,1,0,0,0,782,784,5,137,0,0,783,
        777,1,0,0,0,783,778,1,0,0,0,784,785,1,0,0,0,785,786,5,137,0,0,786,
        789,1,0,0,0,787,789,5,26,0,0,788,748,1,0,0,0,788,749,1,0,0,0,788,
        750,1,0,0,0,788,751,1,0,0,0,788,752,1,0,0,0,788,753,1,0,0,0,788,
        754,1,0,0,0,788,755,1,0,0,0,788,756,1,0,0,0,788,757,1,0,0,0,788,
        762,1,0,0,0,788,767,1,0,0,0,788,772,1,0,0,0,788,774,1,0,0,0,788,
        787,1,0,0,0,789,59,1,0,0,0,790,791,5,70,0,0,791,793,3,94,47,0,792,
        794,3,94,47,0,793,792,1,0,0,0,793,794,1,0,0,0,794,795,1,0,0,0,795,
        797,3,106,53,0,796,798,3,106,53,0,797,796,1,0,0,0,797,798,1,0,0,
        0,798,61,1,0,0,0,799,800,5,67,0,0,800,801,3,94,47,0,801,802,3,106,
        53,0,802,63,1,0,0,0,803,804,5,71,0,0,804,805,3,94,47,0,805,806,3,
        94,47,0,806,807,3,94,47,0,807,809,5,137,0,0,808,810,5,134,0,0,809,
        808,1,0,0,0,809,810,1,0,0,0,810,811,1,0,0,0,811,812,5,137,0,0,812,
        65,1,0,0,0,813,814,5,72,0,0,814,815,3,94,47,0,815,67,1,0,0,0,816,
        817,5,63,0,0,817,818,3,94,47,0,818,69,1,0,0,0,819,820,5,73,0,0,820,
        821,3,94,47,0,821,71,1,0,0,0,822,823,5,74,0,0,823,824,3,94,47,0,
        824,73,1,0,0,0,825,826,5,75,0,0,826,827,5,137,0,0,827,828,3,94,47,
        0,828,829,3,94,47,0,829,830,3,94,47,0,830,831,3,94,47,0,831,833,
        3,94,47,0,832,834,3,94,47,0,833,832,1,0,0,0,833,834,1,0,0,0,834,
        75,1,0,0,0,835,836,5,76,0,0,836,837,3,94,47,0,837,77,1,0,0,0,838,
        922,3,80,40,0,839,841,5,10,0,0,840,842,5,143,0,0,841,840,1,0,0,0,
        841,842,1,0,0,0,842,843,1,0,0,0,843,922,5,137,0,0,844,922,5,79,0,
        0,845,846,5,64,0,0,846,848,5,133,0,0,847,849,5,133,0,0,848,847,1,
        0,0,0,848,849,1,0,0,0,849,851,1,0,0,0,850,852,5,133,0,0,851,850,
        1,0,0,0,851,852,1,0,0,0,852,854,1,0,0,0,853,855,5,133,0,0,854,853,
        1,0,0,0,854,855,1,0,0,0,855,856,1,0,0,0,856,922,3,106,53,0,857,859,
        5,77,0,0,858,860,5,143,0,0,859,858,1,0,0,0,859,860,1,0,0,0,860,861,
        1,0,0,0,861,922,3,106,53,0,862,864,5,61,0,0,863,865,5,143,0,0,864,
        863,1,0,0,0,864,865,1,0,0,0,865,866,1,0,0,0,866,922,3,106,53,0,867,
        869,5,18,0,0,868,870,5,143,0,0,869,868,1,0,0,0,869,870,1,0,0,0,870,
        871,1,0,0,0,871,922,5,133,0,0,872,873,5,80,0,0,873,874,5,133,0,0,
        874,875,5,133,0,0,875,879,5,133,0,0,876,877,5,133,0,0,877,878,5,
        133,0,0,878,880,5,133,0,0,879,876,1,0,0,0,879,880,1,0,0,0,880,884,
        1,0,0,0,881,882,5,133,0,0,882,883,5,133,0,0,883,885,5,133,0,0,884,
        881,1,0,0,0,884,885,1,0,0,0,885,889,1,0,0,0,886,887,5,133,0,0,887,
        888,5,133,0,0,888,890,5,133,0,0,889,886,1,0,0,0,889,890,1,0,0,0,
        890,922,1,0,0,0,891,893,5,21,0,0,892,894,5,160,0,0,893,892,1,0,0,
        0,893,894,1,0,0,0,894,895,1,0,0,0,895,922,5,161,0,0,896,897,5,23,
        0,0,897,898,5,25,0,0,898,905,3,106,53,0,899,906,5,89,0,0,900,902,
        5,10,0,0,901,903,5,143,0,0,902,901,1,0,0,0,902,903,1,0,0,0,903,904,
        1,0,0,0,904,906,5,137,0,0,905,899,1,0,0,0,905,900,1,0,0,0,906,922,
        1,0,0,0,907,922,5,26,0,0,908,909,5,81,0,0,909,910,5,82,0,0,910,912,
        5,133,0,0,911,913,5,133,0,0,912,911,1,0,0,0,912,913,1,0,0,0,913,
        915,1,0,0,0,914,916,5,133,0,0,915,914,1,0,0,0,915,916,1,0,0,0,916,
        918,1,0,0,0,917,919,5,133,0,0,918,917,1,0,0,0,918,919,1,0,0,0,919,
        922,1,0,0,0,920,922,5,68,0,0,921,838,1,0,0,0,921,839,1,0,0,0,921,
        844,1,0,0,0,921,845,1,0,0,0,921,857,1,0,0,0,921,862,1,0,0,0,921,
        867,1,0,0,0,921,872,1,0,0,0,921,891,1,0,0,0,921,896,1,0,0,0,921,
        907,1,0,0,0,921,908,1,0,0,0,921,920,1,0,0,0,922,79,1,0,0,0,923,924,
        5,5,0,0,924,925,3,94,47,0,925,926,3,94,47,0,926,927,3,94,47,0,927,
        933,3,94,47,0,928,929,3,94,47,0,929,930,3,94,47,0,930,931,3,94,47,
        0,931,932,3,94,47,0,932,934,1,0,0,0,933,928,1,0,0,0,933,934,1,0,
        0,0,934,940,1,0,0,0,935,936,3,94,47,0,936,937,3,94,47,0,937,938,
        3,94,47,0,938,939,3,94,47,0,939,941,1,0,0,0,940,935,1,0,0,0,940,
        941,1,0,0,0,941,947,1,0,0,0,942,943,3,94,47,0,943,944,3,94,47,0,
        944,945,3,94,47,0,945,946,3,94,47,0,946,948,1,0,0,0,947,942,1,0,
        0,0,947,948,1,0,0,0,948,81,1,0,0,0,949,982,3,84,42,0,950,952,5,10,
        0,0,951,953,5,143,0,0,952,951,1,0,0,0,952,953,1,0,0,0,953,954,1,
        0,0,0,954,982,5,137,0,0,955,956,5,60,0,0,956,957,3,106,53,0,957,
        958,3,106,53,0,958,959,3,106,53,0,959,960,3,106,53,0,960,961,3,106,
        53,0,961,982,1,0,0,0,962,964,5,61,0,0,963,965,5,143,0,0,964,963,
        1,0,0,0,964,965,1,0,0,0,965,966,1,0,0,0,966,982,3,106,53,0,967,969,
        5,18,0,0,968,970,5,143,0,0,969,968,1,0,0,0,969,970,1,0,0,0,970,971,
        1,0,0,0,971,982,5,133,0,0,972,974,5,21,0,0,973,975,5,160,0,0,974,
        973,1,0,0,0,974,975,1,0,0,0,975,976,1,0,0,0,976,982,5,161,0,0,977,
        978,5,23,0,0,978,979,5,25,0,0,979,982,3,106,53,0,980,982,5,26,0,
        0,981,949,1,0,0,0,981,950,1,0,0,0,981,955,1,0,0,0,981,962,1,0,0,
        0,981,967,1,0,0,0,981,972,1,0,0,0,981,977,1,0,0,0,981,980,1,0,0,
        0,982,83,1,0,0,0,983,984,5,5,0,0,984,985,3,94,47,0,985,986,3,94,
        47,0,986,987,3,94,47,0,987,988,3,94,47,0,988,989,3,94,47,0,989,990,
        3,94,47,0,990,991,3,102,51,0,991,992,3,102,51,0,992,85,1,0,0,0,993,
        1028,3,88,44,0,994,996,5,10,0,0,995,997,5,143,0,0,996,995,1,0,0,
        0,996,997,1,0,0,0,997,998,1,0,0,0,998,1028,5,137,0,0,999,1000,5,
        60,0,0,1000,1001,3,106,53,0,1001,1002,3,106,53,0,1002,1003,3,106,
        53,0,1003,1004,3,106,53,0,1004,1005,3,106,53,0,1005,1006,3,106,53,
        0,1006,1007,3,106,53,0,1007,1028,1,0,0,0,1008,1010,5,61,0,0,1009,
        1011,5,143,0,0,1010,1009,1,0,0,0,1010,1011,1,0,0,0,1011,1012,1,0,
        0,0,1012,1028,3,106,53,0,1013,1015,5,18,0,0,1014,1016,5,143,0,0,
        1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1017,1,0,0,0,1017,1028,
        5,133,0,0,1018,1020,5,21,0,0,1019,1021,5,160,0,0,1020,1019,1,0,0,
        0,1020,1021,1,0,0,0,1021,1022,1,0,0,0,1022,1028,5,161,0,0,1023,1024,
        5,23,0,0,1024,1025,5,25,0,0,1025,1028,3,106,53,0,1026,1028,5,26,
        0,0,1027,993,1,0,0,0,1027,994,1,0,0,0,1027,999,1,0,0,0,1027,1008,
        1,0,0,0,1027,1013,1,0,0,0,1027,1018,1,0,0,0,1027,1023,1,0,0,0,1027,
        1026,1,0,0,0,1028,87,1,0,0,0,1029,1030,5,5,0,0,1030,1031,3,94,47,
        0,1031,1032,3,94,47,0,1032,1033,3,94,47,0,1033,1034,3,94,47,0,1034,
        1035,3,94,47,0,1035,1036,3,94,47,0,1036,1037,3,94,47,0,1037,1038,
        3,94,47,0,1038,1039,3,102,51,0,1039,1040,3,102,51,0,1040,89,1,0,
        0,0,1041,1094,3,92,46,0,1042,1044,5,10,0,0,1043,1045,5,143,0,0,1044,
        1043,1,0,0,0,1044,1045,1,0,0,0,1045,1046,1,0,0,0,1046,1094,5,137,
        0,0,1047,1049,5,86,0,0,1048,1050,5,143,0,0,1049,1048,1,0,0,0,1049,
        1050,1,0,0,0,1050,1051,1,0,0,0,1051,1094,5,137,0,0,1052,1053,5,64,
        0,0,1053,1054,5,133,0,0,1054,1055,5,133,0,0,1055,1094,3,106,53,0,
        1056,1058,5,77,0,0,1057,1059,5,143,0,0,1058,1057,1,0,0,0,1058,1059,
        1,0,0,0,1059,1060,1,0,0,0,1060,1094,3,106,53,0,1061,1063,5,61,0,
        0,1062,1064,5,143,0,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,1065,
        1,0,0,0,1065,1094,3,106,53,0,1066,1068,5,18,0,0,1067,1069,5,143,
        0,0,1068,1067,1,0,0,0,1068,1069,1,0,0,0,1069,1070,1,0,0,0,1070,1094,
        5,133,0,0,1071,1073,5,21,0,0,1072,1074,5,160,0,0,1073,1072,1,0,0,
        0,1073,1074,1,0,0,0,1074,1075,1,0,0,0,1075,1094,5,161,0,0,1076,1077,
        5,23,0,0,1077,1078,5,25,0,0,1078,1085,3,106,53,0,1079,1086,5,89,
        0,0,1080,1082,5,10,0,0,1081,1083,5,143,0,0,1082,1081,1,0,0,0,1082,
        1083,1,0,0,0,1083,1084,1,0,0,0,1084,1086,5,137,0,0,1085,1079,1,0,
        0,0,1085,1080,1,0,0,0,1086,1094,1,0,0,0,1087,1094,5,26,0,0,1088,
        1089,5,81,0,0,1089,1090,5,87,0,0,1090,1091,5,133,0,0,1091,1094,5,
        133,0,0,1092,1094,5,68,0,0,1093,1041,1,0,0,0,1093,1042,1,0,0,0,1093,
        1047,1,0,0,0,1093,1052,1,0,0,0,1093,1056,1,0,0,0,1093,1061,1,0,0,
        0,1093,1066,1,0,0,0,1093,1071,1,0,0,0,1093,1076,1,0,0,0,1093,1087,
        1,0,0,0,1093,1088,1,0,0,0,1093,1092,1,0,0,0,1094,91,1,0,0,0,1095,
        1096,5,5,0,0,1096,1097,3,94,47,0,1097,1098,3,94,47,0,1098,1099,3,
        94,47,0,1099,1100,3,94,47,0,1100,1101,3,94,47,0,1101,1102,3,94,47,
        0,1102,1103,3,94,47,0,1103,1104,3,94,47,0,1104,1105,3,94,47,0,1105,
        1106,3,94,47,0,1106,1108,3,94,47,0,1107,1109,3,94,47,0,1108,1107,
        1,0,0,0,1108,1109,1,0,0,0,1109,93,1,0,0,0,1110,1111,5,140,0,0,1111,
        1112,3,96,48,0,1112,1113,5,141,0,0,1113,95,1,0,0,0,1114,1119,3,98,
        49,0,1115,1116,5,128,0,0,1116,1118,3,98,49,0,1117,1115,1,0,0,0,1118,
        1121,1,0,0,0,1119,1117,1,0,0,0,1119,1120,1,0,0,0,1120,97,1,0,0,0,
        1121,1119,1,0,0,0,1122,1127,3,100,50,0,1123,1124,5,129,0,0,1124,
        1126,3,100,50,0,1125,1123,1,0,0,0,1126,1129,1,0,0,0,1127,1125,1,
        0,0,0,1127,1128,1,0,0,0,1128,99,1,0,0,0,1129,1127,1,0,0,0,1130,1131,
        6,50,-1,0,1131,1132,5,140,0,0,1132,1133,3,96,48,0,1133,1134,5,141,
        0,0,1134,1275,1,0,0,0,1135,1275,5,89,0,0,1136,1137,5,91,0,0,1137,
        1138,7,0,0,0,1138,1139,7,1,0,0,1139,1275,7,0,0,0,1140,1142,5,92,
        0,0,1141,1143,5,154,0,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,
        1144,1,0,0,0,1144,1145,5,155,0,0,1145,1146,5,156,0,0,1146,1275,3,
        104,52,0,1147,1148,5,93,0,0,1148,1275,3,100,50,30,1149,1150,5,94,
        0,0,1150,1275,3,100,50,29,1151,1152,5,95,0,0,1152,1275,3,100,50,
        28,1153,1160,5,96,0,0,1154,1161,5,138,0,0,1155,1158,5,137,0,0,1156,
        1157,5,142,0,0,1157,1159,5,137,0,0,1158,1156,1,0,0,0,1158,1159,1,
        0,0,0,1159,1161,1,0,0,0,1160,1154,1,0,0,0,1160,1155,1,0,0,0,1161,
        1275,1,0,0,0,1162,1163,5,97,0,0,1163,1164,3,104,52,0,1164,1165,3,
        104,52,0,1165,1166,3,104,52,0,1166,1167,3,104,52,0,1167,1168,3,104,
        52,0,1168,1169,3,104,52,0,1169,1275,1,0,0,0,1170,1275,5,98,0,0,1171,
        1172,5,99,0,0,1172,1275,5,133,0,0,1173,1275,5,100,0,0,1174,1181,
        5,101,0,0,1175,1182,5,138,0,0,1176,1179,5,137,0,0,1177,1178,5,142,
        0,0,1178,1180,5,137,0,0,1179,1177,1,0,0,0,1179,1180,1,0,0,0,1180,
        1182,1,0,0,0,1181,1175,1,0,0,0,1181,1176,1,0,0,0,1182,1275,1,0,0,
        0,1183,1275,5,102,0,0,1184,1185,5,130,0,0,1185,1275,3,100,50,20,
        1186,1187,5,103,0,0,1187,1188,5,140,0,0,1188,1190,3,104,52,0,1189,
        1191,5,131,0,0,1190,1189,1,0,0,0,1190,1191,1,0,0,0,1191,1192,1,0,
        0,0,1192,1194,3,104,52,0,1193,1195,5,131,0,0,1194,1193,1,0,0,0,1194,
        1195,1,0,0,0,1195,1196,1,0,0,0,1196,1197,3,104,52,0,1197,1198,5,
        141,0,0,1198,1199,5,104,0,0,1199,1200,3,104,52,0,1200,1275,1,0,0,
        0,1201,1202,5,103,0,0,1202,1203,5,140,0,0,1203,1205,5,126,0,0,1204,
        1206,5,143,0,0,1205,1204,1,0,0,0,1205,1206,1,0,0,0,1206,1207,1,0,
        0,0,1207,1209,3,94,47,0,1208,1210,5,131,0,0,1209,1208,1,0,0,0,1209,
        1210,1,0,0,0,1210,1216,1,0,0,0,1211,1213,5,127,0,0,1212,1214,5,143,
        0,0,1213,1212,1,0,0,0,1213,1214,1,0,0,0,1214,1215,1,0,0,0,1215,1217,
        3,94,47,0,1216,1211,1,0,0,0,1216,1217,1,0,0,0,1217,1218,1,0,0,0,
        1218,1219,5,141,0,0,1219,1220,5,104,0,0,1220,1221,3,104,52,0,1221,
        1275,1,0,0,0,1222,1275,5,105,0,0,1223,1275,5,106,0,0,1224,1231,5,
        107,0,0,1225,1232,5,139,0,0,1226,1229,5,133,0,0,1227,1228,5,142,
        0,0,1228,1230,5,133,0,0,1229,1227,1,0,0,0,1229,1230,1,0,0,0,1230,
        1232,1,0,0,0,1231,1225,1,0,0,0,1231,1226,1,0,0,0,1232,1275,1,0,0,
        0,1233,1240,5,108,0,0,1234,1241,5,138,0,0,1235,1238,5,137,0,0,1236,
        1237,5,142,0,0,1237,1239,5,137,0,0,1238,1236,1,0,0,0,1238,1239,1,
        0,0,0,1239,1241,1,0,0,0,1240,1234,1,0,0,0,1240,1235,1,0,0,0,1241,
        1275,1,0,0,0,1242,1254,5,110,0,0,1243,1255,5,138,0,0,1244,1247,5,
        137,0,0,1245,1246,5,142,0,0,1246,1248,5,137,0,0,1247,1245,1,0,0,
        0,1247,1248,1,0,0,0,1248,1255,1,0,0,0,1249,1252,5,136,0,0,1250,1251,
        5,142,0,0,1251,1253,5,136,0,0,1252,1250,1,0,0,0,1252,1253,1,0,0,
        0,1253,1255,1,0,0,0,1254,1243,1,0,0,0,1254,1244,1,0,0,0,1254,1249,
        1,0,0,0,1255,1275,1,0,0,0,1256,1257,5,111,0,0,1257,1258,3,104,52,
        0,1258,1259,3,104,52,0,1259,1260,3,104,52,0,1260,1261,3,104,52,0,
        1261,1262,3,104,52,0,1262,1263,3,104,52,0,1263,1275,1,0,0,0,1264,
        1275,5,112,0,0,1265,1275,5,113,0,0,1266,1275,5,114,0,0,1267,1275,
        5,115,0,0,1268,1275,5,116,0,0,1269,1275,5,117,0,0,1270,1275,5,118,
        0,0,1271,1275,5,119,0,0,1272,1275,5,120,0,0,1273,1275,5,121,0,0,
        1274,1130,1,0,0,0,1274,1135,1,0,0,0,1274,1136,1,0,0,0,1274,1140,
        1,0,0,0,1274,1147,1,0,0,0,1274,1149,1,0,0,0,1274,1151,1,0,0,0,1274,
        1153,1,0,0,0,1274,1162,1,0,0,0,1274,1170,1,0,0,0,1274,1171,1,0,0,
        0,1274,1173,1,0,0,0,1274,1174,1,0,0,0,1274,1183,1,0,0,0,1274,1184,
        1,0,0,0,1274,1186,1,0,0,0,1274,1201,1,0,0,0,1274,1222,1,0,0,0,1274,
        1223,1,0,0,0,1274,1224,1,0,0,0,1274,1233,1,0,0,0,1274,1242,1,0,0,
        0,1274,1256,1,0,0,0,1274,1264,1,0,0,0,1274,1265,1,0,0,0,1274,1266,
        1,0,0,0,1274,1267,1,0,0,0,1274,1268,1,0,0,0,1274,1269,1,0,0,0,1274,
        1270,1,0,0,0,1274,1271,1,0,0,0,1274,1272,1,0,0,0,1274,1273,1,0,0,
        0,1275,1284,1,0,0,0,1276,1277,10,33,0,0,1277,1278,5,90,0,0,1278,
        1283,3,104,52,0,1279,1280,10,13,0,0,1280,1281,5,109,0,0,1281,1283,
        3,104,52,0,1282,1276,1,0,0,0,1282,1279,1,0,0,0,1283,1286,1,0,0,0,
        1284,1282,1,0,0,0,1284,1285,1,0,0,0,1285,101,1,0,0,0,1286,1284,1,
        0,0,0,1287,1288,7,2,0,0,1288,103,1,0,0,0,1289,1290,7,2,0,0,1290,
        105,1,0,0,0,1291,1292,7,2,0,0,1292,107,1,0,0,0,1293,1294,7,2,0,0,
        1294,109,1,0,0,0,1295,1306,5,88,0,0,1296,1304,5,166,0,0,1297,1299,
        5,169,0,0,1298,1297,1,0,0,0,1299,1302,1,0,0,0,1300,1298,1,0,0,0,
        1300,1301,1,0,0,0,1301,1305,1,0,0,0,1302,1300,1,0,0,0,1303,1305,
        5,170,0,0,1304,1300,1,0,0,0,1304,1303,1,0,0,0,1305,1307,1,0,0,0,
        1306,1296,1,0,0,0,1306,1307,1,0,0,0,1307,1308,1,0,0,0,1308,1312,
        5,167,0,0,1309,1311,5,169,0,0,1310,1309,1,0,0,0,1311,1314,1,0,0,
        0,1312,1310,1,0,0,0,1312,1313,1,0,0,0,1313,1315,1,0,0,0,1314,1312,
        1,0,0,0,1315,1316,5,168,0,0,1316,111,1,0,0,0,1317,1318,5,122,0,0,
        1318,1319,3,114,57,0,1319,1320,3,94,47,0,1320,113,1,0,0,0,1321,1322,
        7,3,0,0,1322,1323,3,116,58,0,1323,1324,5,172,0,0,1324,1328,1,0,0,
        0,1325,1326,5,125,0,0,1326,1328,3,124,62,0,1327,1321,1,0,0,0,1327,
        1325,1,0,0,0,1328,115,1,0,0,0,1329,1332,5,182,0,0,1330,1331,5,173,
        0,0,1331,1333,3,118,59,0,1332,1330,1,0,0,0,1332,1333,1,0,0,0,1333,
        117,1,0,0,0,1334,1339,3,120,60,0,1335,1336,7,4,0,0,1336,1338,3,118,
        59,0,1337,1335,1,0,0,0,1338,1341,1,0,0,0,1339,1337,1,0,0,0,1339,
        1340,1,0,0,0,1340,119,1,0,0,0,1341,1339,1,0,0,0,1342,1349,5,182,
        0,0,1343,1349,3,122,61,0,1344,1349,5,180,0,0,1345,1349,5,181,0,0,
        1346,1349,5,205,0,0,1347,1349,5,206,0,0,1348,1342,1,0,0,0,1348,1343,
        1,0,0,0,1348,1344,1,0,0,0,1348,1345,1,0,0,0,1348,1346,1,0,0,0,1348,
        1347,1,0,0,0,1349,121,1,0,0,0,1350,1351,5,183,0,0,1351,1352,5,207,
        0,0,1352,1353,3,120,60,0,1353,1354,5,172,0,0,1354,1470,1,0,0,0,1355,
        1356,5,184,0,0,1356,1357,5,207,0,0,1357,1358,3,120,60,0,1358,1359,
        5,172,0,0,1359,1470,1,0,0,0,1360,1361,5,186,0,0,1361,1362,5,207,
        0,0,1362,1363,3,120,60,0,1363,1364,5,172,0,0,1364,1470,1,0,0,0,1365,
        1366,5,187,0,0,1366,1367,5,207,0,0,1367,1368,3,120,60,0,1368,1369,
        5,172,0,0,1369,1470,1,0,0,0,1370,1371,5,188,0,0,1371,1372,5,207,
        0,0,1372,1373,3,120,60,0,1373,1374,5,172,0,0,1374,1470,1,0,0,0,1375,
        1376,5,189,0,0,1376,1377,5,207,0,0,1377,1378,3,120,60,0,1378,1379,
        5,172,0,0,1379,1470,1,0,0,0,1380,1381,5,190,0,0,1381,1382,5,207,
        0,0,1382,1383,3,120,60,0,1383,1384,5,172,0,0,1384,1470,1,0,0,0,1385,
        1386,5,191,0,0,1386,1387,5,207,0,0,1387,1388,3,120,60,0,1388,1389,
        5,172,0,0,1389,1470,1,0,0,0,1390,1391,5,192,0,0,1391,1392,5,207,
        0,0,1392,1393,3,120,60,0,1393,1394,5,172,0,0,1394,1470,1,0,0,0,1395,
        1396,5,193,0,0,1396,1397,5,207,0,0,1397,1398,3,120,60,0,1398,1399,
        5,172,0,0,1399,1470,1,0,0,0,1400,1401,5,194,0,0,1401,1402,5,207,
        0,0,1402,1403,3,120,60,0,1403,1404,5,172,0,0,1404,1470,1,0,0,0,1405,
        1406,5,195,0,0,1406,1407,5,207,0,0,1407,1412,3,120,60,0,1408,1409,
        5,179,0,0,1409,1411,3,120,60,0,1410,1408,1,0,0,0,1411,1414,1,0,0,
        0,1412,1410,1,0,0,0,1412,1413,1,0,0,0,1413,1415,1,0,0,0,1414,1412,
        1,0,0,0,1415,1416,5,172,0,0,1416,1470,1,0,0,0,1417,1418,5,196,0,
        0,1418,1419,5,207,0,0,1419,1420,3,120,60,0,1420,1421,5,172,0,0,1421,
        1470,1,0,0,0,1422,1423,5,197,0,0,1423,1424,5,207,0,0,1424,1429,3,
        120,60,0,1425,1426,5,179,0,0,1426,1428,3,120,60,0,1427,1425,1,0,
        0,0,1428,1431,1,0,0,0,1429,1427,1,0,0,0,1429,1430,1,0,0,0,1430,1432,
        1,0,0,0,1431,1429,1,0,0,0,1432,1433,5,172,0,0,1433,1470,1,0,0,0,
        1434,1435,5,198,0,0,1435,1436,5,207,0,0,1436,1437,3,120,60,0,1437,
        1438,5,179,0,0,1438,1439,3,120,60,0,1439,1440,5,172,0,0,1440,1470,
        1,0,0,0,1441,1442,5,199,0,0,1442,1443,5,207,0,0,1443,1444,3,120,
        60,0,1444,1445,5,172,0,0,1445,1470,1,0,0,0,1446,1447,5,200,0,0,1447,
        1448,5,207,0,0,1448,1470,5,172,0,0,1449,1450,5,201,0,0,1450,1451,
        5,207,0,0,1451,1452,3,120,60,0,1452,1453,5,172,0,0,1453,1470,1,0,
        0,0,1454,1455,5,202,0,0,1455,1456,5,207,0,0,1456,1457,3,120,60,0,
        1457,1458,5,172,0,0,1458,1470,1,0,0,0,1459,1460,5,203,0,0,1460,1461,
        5,207,0,0,1461,1462,3,120,60,0,1462,1463,5,172,0,0,1463,1470,1,0,
        0,0,1464,1465,5,204,0,0,1465,1466,5,207,0,0,1466,1467,3,120,60,0,
        1467,1468,5,172,0,0,1468,1470,1,0,0,0,1469,1350,1,0,0,0,1469,1355,
        1,0,0,0,1469,1360,1,0,0,0,1469,1365,1,0,0,0,1469,1370,1,0,0,0,1469,
        1375,1,0,0,0,1469,1380,1,0,0,0,1469,1385,1,0,0,0,1469,1390,1,0,0,
        0,1469,1395,1,0,0,0,1469,1400,1,0,0,0,1469,1405,1,0,0,0,1469,1417,
        1,0,0,0,1469,1422,1,0,0,0,1469,1434,1,0,0,0,1469,1441,1,0,0,0,1469,
        1446,1,0,0,0,1469,1449,1,0,0,0,1469,1454,1,0,0,0,1469,1459,1,0,0,
        0,1469,1464,1,0,0,0,1470,123,1,0,0,0,1471,1472,7,5,0,0,1472,1473,
        5,208,0,0,1473,1474,5,217,0,0,1474,1475,5,209,0,0,1475,125,1,0,0,
        0,172,146,148,157,163,169,175,181,187,193,202,211,220,229,238,247,
        256,265,272,287,292,299,308,313,324,336,342,355,362,389,395,398,
        409,418,423,428,435,439,444,449,454,459,464,469,472,477,482,487,
        493,497,513,519,523,528,531,535,540,545,549,555,559,563,566,568,
        572,577,587,592,597,604,616,621,632,638,642,647,652,661,664,667,
        679,686,691,703,708,713,718,723,732,759,764,770,780,783,788,793,
        797,809,833,841,848,851,854,859,864,869,879,884,889,893,902,905,
        912,915,918,921,933,940,947,952,964,969,974,981,996,1010,1015,1020,
        1027,1044,1049,1058,1063,1068,1073,1082,1085,1093,1108,1119,1127,
        1142,1158,1160,1179,1181,1190,1194,1205,1209,1213,1216,1229,1231,
        1238,1240,1247,1252,1254,1274,1282,1284,1300,1304,1306,1312,1327,
        1332,1339,1348,1412,1429,1469
    ]

class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'CV'", "'DEN'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'OUTD'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'CUTOFF'", 
                     "'CUTON'", "'FROM'", "'TO'", "'PEAK'", "'SPECTRUM'", 
                     "'VOLUME'", "'PPM1'", "'PPM2'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SIZE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'FBOX'", "<INVALID>", 
                     "'ID'", "<INVALID>", "'NAME'", "'NONE'", "<INVALID>", 
                     "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SFBOX'", "'STORE1'", "'STORE2'", 
                     "'STORE3'", "'STORE4'", "'STORE5'", "'STORE6'", "'STORE7'", 
                     "'STORE8'", "'STORE9'", "'TAG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SHOW'", "'TAIL'", "'HEAD'", "'OR'", 
                     "'AND'", "'NOT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "':'", "<INVALID>", "'<'", "'>'", "'<='", "'>='", "'#'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", 
                     "'ENCODE'", "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", 
                     "'LOG10'", "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", 
                     "'MOD'", "<INVALID>", "<INVALID>", "'SIGN'", "'SIN'", 
                     "'SQRT'", "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'RMS'", "'SUM'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Averaging", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Initialize", "Update", "Gamma", "Kappa", "Cutoff", 
                      "Cuton", "From", "To", "Peak", "Spectrum", "Volume", 
                      "Ppm1", "Ppm2", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Coupling", "Carbon", "Expectation", 
                      "PhiStep", "PsiStep", "Rcoil", "Zero", "Proton", "Observed", 
                      "Anisotropy", "Amides", "Nitrogens", "Oxygens", "RingAtoms", 
                      "AlphasAndAmides", "Error", "Conformation", "Compressed", 
                      "Phase", "Size", "Dimensions", "Danisotropy", "OneBond", 
                      "AngleDb", "DerivFlag", "Angle_or_Dihedral", "Flags", 
                      "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Fbox", "Hydrogen", 
                      "Id", "Known", "Name", "NONE", "Point", "Cut", "Previous", 
                      "Pseudo", "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Sfbox", "Store_1", "Store_2", "Store_3", "Store_4", 
                      "Store_5", "Store_6", "Store_7", "Store_8", "Store_9", 
                      "Tag", "Vector", "Do_Lp", "Identify_Lp", "Show", "Tail", 
                      "Head", "Or_op", "And_op", "Not_op", "Comma", "Complex", 
                      "Integer", "Logical", "Real", "Double_quote_string", 
                      "Simple_name", "Simple_names", "Integers", "L_paren", 
                      "R_paren", "Colon", "Equ_op", "Lt_op", "Gt_op", "Leq_op", 
                      "Geq_op", "Neq_op", "SPACE", "COMMENT", "SECTION_COMMENT", 
                      "LINE_COMMENT", "SET_VARIABLE", "Abs", "Attr_properties", 
                      "Comparison_ops", "SPACE_ATTR", "Averaging_methods", 
                      "Simple_name_A", "Equ_op_P", "Potential_types", "Simple_name_P", 
                      "SPACE_POTE", "Noe_analysis", "SPACE_ANAL", "Exclude", 
                      "Include", "End_F", "Class_name", "Any_class", "SPACE_FLAG", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Simple_name_VE", "Double_quote_string_VE", 
                      "L_paren_VF", "L_paren_VS", "R_paren_VS", "Average_VS", 
                      "Element_VS", "Max_VS", "Min_VS", "Norm_VS", "Rms_VS", 
                      "Sum_VS", "Atom_properties_VS", "SPACE_VS" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_noe_annotation = 16
    RULE_dihedral_statement = 17
    RULE_dihedral_assign = 18
    RULE_plane_statement = 19
    RULE_group_statement = 20
    RULE_harmonic_statement = 21
    RULE_sani_statement = 22
    RULE_sani_assign = 23
    RULE_coupling_statement = 24
    RULE_coup_assign = 25
    RULE_carbon_shift_statement = 26
    RULE_carbon_shift_assign = 27
    RULE_carbon_shift_rcoil = 28
    RULE_proton_shift_statement = 29
    RULE_observed = 30
    RULE_proton_shift_rcoil = 31
    RULE_proton_shift_anisotropy = 32
    RULE_proton_shift_amides = 33
    RULE_proton_shift_carbons = 34
    RULE_proton_shift_nitrogens = 35
    RULE_proton_shift_oxygens = 36
    RULE_proton_shift_ring_atoms = 37
    RULE_proton_shift_alphas_and_amides = 38
    RULE_conformation_statement = 39
    RULE_conf_assign = 40
    RULE_diffusion_statement = 41
    RULE_dani_assign = 42
    RULE_one_bond_coupling_statement = 43
    RULE_one_bond_assign = 44
    RULE_angle_db_statement = 45
    RULE_angle_db_assign = 46
    RULE_selection = 47
    RULE_selection_expression = 48
    RULE_term = 49
    RULE_factor = 50
    RULE_number = 51
    RULE_number_f = 52
    RULE_number_s = 53
    RULE_number_a = 54
    RULE_flag_statement = 55
    RULE_vector_statement = 56
    RULE_vector_mode = 57
    RULE_vector_expression = 58
    RULE_vector_operation = 59
    RULE_vflc = 60
    RULE_vector_func_call = 61
    RULE_vector_show_property = 62

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "plane_statement", 
                   "group_statement", "harmonic_statement", "sani_statement", 
                   "sani_assign", "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s", "number_a", "flag_statement", "vector_statement", 
                   "vector_mode", "vector_expression", "vector_operation", 
                   "vflc", "vector_func_call", "vector_show_property" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Averaging=7
    Bhig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Cutoff=39
    Cuton=40
    From=41
    To=42
    Peak=43
    Spectrum=44
    Volume=45
    Ppm1=46
    Ppm2=47
    Restraints=48
    Dihedral=49
    Nassign=50
    Print_any=51
    Plane=52
    Group=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Sanisotropy=59
    Coefficients=60
    ForceConstant=61
    Coupling=62
    Carbon=63
    Expectation=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Zero=68
    Proton=69
    Observed=70
    Anisotropy=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Conformation=78
    Compressed=79
    Phase=80
    Size=81
    Dimensions=82
    Danisotropy=83
    OneBond=84
    AngleDb=85
    DerivFlag=86
    Angle_or_Dihedral=87
    Flags=88
    All=89
    Around=90
    Atom=91
    Attribute=92
    BondedTo=93
    ByGroup=94
    ByRes=95
    Chemical=96
    Fbox=97
    Hydrogen=98
    Id=99
    Known=100
    Name=101
    NONE=102
    Point=103
    Cut=104
    Previous=105
    Pseudo=106
    Residue=107
    Resname=108
    Saround=109
    SegIdentifier=110
    Sfbox=111
    Store_1=112
    Store_2=113
    Store_3=114
    Store_4=115
    Store_5=116
    Store_6=117
    Store_7=118
    Store_8=119
    Store_9=120
    Tag=121
    Vector=122
    Do_Lp=123
    Identify_Lp=124
    Show=125
    Tail=126
    Head=127
    Or_op=128
    And_op=129
    Not_op=130
    Comma=131
    Complex=132
    Integer=133
    Logical=134
    Real=135
    Double_quote_string=136
    Simple_name=137
    Simple_names=138
    Integers=139
    L_paren=140
    R_paren=141
    Colon=142
    Equ_op=143
    Lt_op=144
    Gt_op=145
    Leq_op=146
    Geq_op=147
    Neq_op=148
    SPACE=149
    COMMENT=150
    SECTION_COMMENT=151
    LINE_COMMENT=152
    SET_VARIABLE=153
    Abs=154
    Attr_properties=155
    Comparison_ops=156
    SPACE_ATTR=157
    Averaging_methods=158
    Simple_name_A=159
    Equ_op_P=160
    Potential_types=161
    Simple_name_P=162
    SPACE_POTE=163
    Noe_analysis=164
    SPACE_ANAL=165
    Exclude=166
    Include=167
    End_F=168
    Class_name=169
    Any_class=170
    SPACE_FLAG=171
    R_paren_VE=172
    Equ_op_VE=173
    Add_op_VE=174
    Sub_op_VE=175
    Mul_op_VE=176
    Div_op_VE=177
    Exp_op_VE=178
    Comma_VE=179
    Integer_VE=180
    Real_VE=181
    Atom_properties_VE=182
    Abs_VE=183
    Acos_VE=184
    Asin_VE=185
    Cos_VE=186
    Decode_VE=187
    Encode_VE=188
    Exp_VE=189
    Gauss_VE=190
    Heavy_VE=191
    Int_VE=192
    Log10_VE=193
    Log_VE=194
    Max_VE=195
    Maxw_VE=196
    Min_VE=197
    Mod_VE=198
    Norm_VE=199
    Random_VE=200
    Sign_VE=201
    Sin_VE=202
    Sqrt_VE=203
    Tan_VE=204
    Simple_name_VE=205
    Double_quote_string_VE=206
    L_paren_VF=207
    L_paren_VS=208
    R_paren_VS=209
    Average_VS=210
    Element_VS=211
    Max_VS=212
    Min_VS=213
    Norm_VS=214
    Rms_VS=215
    Sum_VS=216
    Atom_properties_VS=217
    SPACE_VS=218

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Assign) | (1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Dihedral) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Plane) | (1 << CnsMRParser.Group) | (1 << CnsMRParser.Harmonic) | (1 << CnsMRParser.Sanisotropy) | (1 << CnsMRParser.Coupling) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CnsMRParser.Proton - 69)) | (1 << (CnsMRParser.Conformation - 69)) | (1 << (CnsMRParser.Danisotropy - 69)) | (1 << (CnsMRParser.OneBond - 69)) | (1 << (CnsMRParser.AngleDb - 69)) | (1 << (CnsMRParser.Flags - 69)) | (1 << (CnsMRParser.Vector - 69)))) != 0):
                self.state = 146
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 126
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 127
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 128
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 129
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 130
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 131
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 132
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 133
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 134
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 135
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 136
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 137
                    self.angle_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 138
                    self.flag_statement()
                    pass

                elif la_ == 14:
                    self.state = 139
                    self.vector_statement()
                    pass

                elif la_ == 15:
                    self.state = 140
                    self.noe_assign()
                    pass

                elif la_ == 16:
                    self.state = 141
                    self.dihedral_assign()
                    pass

                elif la_ == 17:
                    self.state = 142
                    self.sani_assign()
                    pass

                elif la_ == 18:
                    self.state = 143
                    self.plane_statement()
                    pass

                elif la_ == 19:
                    self.state = 144
                    self.coup_assign()
                    pass

                elif la_ == 20:
                    self.state = 145
                    self.carbon_shift_assign()
                    pass


                self.state = 150
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 151
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 153
            self.match(CnsMRParser.Noe)
            self.state = 157
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 154
                    self.noe_statement() 
                self.state = 159
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 160
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 162
                self.match(CnsMRParser.Restraints)


            self.state = 165
            self.match(CnsMRParser.Dihedral)
            self.state = 169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Scale) | (1 << CnsMRParser.Nassign) | (1 << CnsMRParser.Print_any))) != 0):
                self.state = 166
                self.dihedral_statement()
                self.state = 171
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 172
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 174
                self.match(CnsMRParser.Restraints)


            self.state = 177
            self.match(CnsMRParser.Plane)
            self.state = 181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0):
                self.state = 178
                self.plane_statement()
                self.state = 183
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 184
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 186
                self.match(CnsMRParser.Restraints)


            self.state = 189
            self.match(CnsMRParser.Harmonic)
            self.state = 193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Exponent or _la==CnsMRParser.Normal:
                self.state = 190
                self.harmonic_statement()
                self.state = 195
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 196
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.match(CnsMRParser.Sanisotropy)
            self.state = 202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 199
                self.sani_statement()
                self.state = 204
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 205
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            self.match(CnsMRParser.Coupling)
            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 208
                self.coupling_statement()
                self.state = 213
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 214
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 216
            self.match(CnsMRParser.Carbon)
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.ForceConstant - 5)) | (1 << (CnsMRParser.Expectation - 5)) | (1 << (CnsMRParser.PhiStep - 5)) | (1 << (CnsMRParser.PsiStep - 5)) | (1 << (CnsMRParser.Rcoil - 5)) | (1 << (CnsMRParser.Zero - 5)))) != 0):
                self.state = 217
                self.carbon_shift_statement()
                self.state = 222
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 223
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 225
            self.match(CnsMRParser.Proton)
            self.state = 229
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Classification) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CnsMRParser.Rcoil - 67)) | (1 << (CnsMRParser.Observed - 67)) | (1 << (CnsMRParser.Anisotropy - 67)) | (1 << (CnsMRParser.Amides - 67)) | (1 << (CnsMRParser.Nitrogens - 67)) | (1 << (CnsMRParser.Oxygens - 67)) | (1 << (CnsMRParser.RingAtoms - 67)) | (1 << (CnsMRParser.AlphasAndAmides - 67)) | (1 << (CnsMRParser.Error - 67)))) != 0):
                self.state = 226
                self.proton_shift_statement()
                self.state = 231
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 232
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def conformation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 234
            self.match(CnsMRParser.Conformation)
            self.state = 238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Compressed - 64)) | (1 << (CnsMRParser.Phase - 64)) | (1 << (CnsMRParser.Size - 64)))) != 0):
                self.state = 235
                self.conformation_statement()
                self.state = 240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 241
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.match(CnsMRParser.Danisotropy)
            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 244
                self.diffusion_statement()
                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 250
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(CnsMRParser.OneBond)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 253
                self.one_bond_coupling_statement()
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 259
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 261
            self.match(CnsMRParser.AngleDb)
            self.state = 265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Size - 64)) | (1 << (CnsMRParser.DerivFlag - 64)))) != 0):
                self.state = 262
                self.angle_db_statement()
                self.state = 267
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 268
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def noe_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Averaging(self):
            return self.getToken(CnsMRParser.Averaging, 0)

        def Simple_name_A(self):
            return self.getToken(CnsMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(CnsMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(CnsMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(CnsMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 398
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 270
                self.match(CnsMRParser.Analysis)
                self.state = 272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 271
                    self.match(CnsMRParser.Equ_op)


                self.state = 274
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 275
                self.noe_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 276
                self.match(CnsMRParser.Asymptote)
                self.state = 277
                self.match(CnsMRParser.Simple_name)
                self.state = 278
                self.number_s()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 279
                self.match(CnsMRParser.Averaging)
                self.state = 280
                self.match(CnsMRParser.Simple_name_A)
                self.state = 281
                self.match(CnsMRParser.Averaging_methods)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 282
                self.match(CnsMRParser.Bhig)
                self.state = 283
                self.match(CnsMRParser.Simple_name)
                self.state = 284
                self.number_s()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 285
                self.match(CnsMRParser.Ceiling)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 286
                    self.match(CnsMRParser.Equ_op)


                self.state = 289
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 290
                self.match(CnsMRParser.Classification)
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 291
                    self.match(CnsMRParser.Equ_op)


                self.state = 294
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 295
                self.match(CnsMRParser.CountViol)
                self.state = 296
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 297
                self.match(CnsMRParser.Cv)
                self.state = 299
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 298
                    self.match(CnsMRParser.Equ_op)


                self.state = 301
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 302
                self.match(CnsMRParser.Den)
                self.state = 303
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 304
                self.match(CnsMRParser.Den)
                self.state = 305
                self.match(CnsMRParser.Update)
                self.state = 306
                self.match(CnsMRParser.Gamma)
                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 307
                    self.match(CnsMRParser.Equ_op)


                self.state = 310
                self.number_s()
                self.state = 311
                self.match(CnsMRParser.Kappa)
                self.state = 313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 312
                    self.match(CnsMRParser.Equ_op)


                self.state = 315
                self.number_s()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 317
                self.match(CnsMRParser.Distribute)
                self.state = 318
                self.match(CnsMRParser.Simple_name)
                self.state = 319
                self.match(CnsMRParser.Simple_name)
                self.state = 320
                self.number_s()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 324
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 321
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 326
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 327
                self.match(CnsMRParser.End)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 328
                self.match(CnsMRParser.Monomers)
                self.state = 329
                self.match(CnsMRParser.Simple_name)
                self.state = 330
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 331
                self.match(CnsMRParser.Ncount)
                self.state = 332
                self.match(CnsMRParser.Simple_name)
                self.state = 333
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 334
                self.match(CnsMRParser.Nrestraints)
                self.state = 336
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 335
                    self.match(CnsMRParser.Equ_op)


                self.state = 338
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 339
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 340
                self.match(CnsMRParser.Partition)
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 341
                    self.match(CnsMRParser.Equ_op)


                self.state = 344
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 345
                self.match(CnsMRParser.Potential)
                self.state = 346
                self.match(CnsMRParser.Simple_name_P)
                self.state = 347
                self.match(CnsMRParser.Potential_types)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 348
                self.match(CnsMRParser.Predict)
                self.state = 349
                self.predict_statement()
                self.state = 350
                self.match(CnsMRParser.End)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 352
                self.match(CnsMRParser.Print)
                self.state = 353
                self.match(CnsMRParser.Threshold)
                self.state = 355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 354
                    self.match(CnsMRParser.Equ_op)


                self.state = 357
                self.number_s()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 358
                self.match(CnsMRParser.Raverage)
                self.state = 362
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 359
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 364
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 365
                self.match(CnsMRParser.End)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 366
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 367
                self.match(CnsMRParser.Rswitch)
                self.state = 368
                self.match(CnsMRParser.Simple_name)
                self.state = 369
                self.number_s()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 370
                self.match(CnsMRParser.Scale)
                self.state = 371
                self.match(CnsMRParser.Simple_name)
                self.state = 372
                self.number_s()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 373
                self.match(CnsMRParser.SoExponent)
                self.state = 374
                self.match(CnsMRParser.Simple_name)
                self.state = 375
                self.number_s()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 376
                self.match(CnsMRParser.SqConstant)
                self.state = 377
                self.match(CnsMRParser.Simple_name)
                self.state = 378
                self.number_s()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 379
                self.match(CnsMRParser.SqExponent)
                self.state = 380
                self.match(CnsMRParser.Simple_name)
                self.state = 381
                self.number_s()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 382
                self.match(CnsMRParser.SqOffset)
                self.state = 383
                self.match(CnsMRParser.Simple_name)
                self.state = 384
                self.number_s()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 385
                self.match(CnsMRParser.Taverage)
                self.state = 389
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 386
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 391
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                self.state = 392
                self.match(CnsMRParser.End)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 393
                self.match(CnsMRParser.Temperature)
                self.state = 395
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 394
                    self.match(CnsMRParser.Equ_op)


                self.state = 397
                self.number_s()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 400
            self.match(CnsMRParser.Assign)
            self.state = 401
            self.selection()
            self.state = 402
            self.selection()
            self.state = 403
            self.number()
            self.state = 404
            self.number()
            self.state = 405
            self.number()
            self.state = 409
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 406
                    self.noe_annotation() 
                self.state = 411
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 412
                self.match(CnsMRParser.Or_op)
                self.state = 413
                self.selection()
                self.state = 414
                self.selection()
                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 421
                self.match(CnsMRParser.Cutoff)
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 422
                    self.match(CnsMRParser.Equ_op)


                self.state = 425
                self.number_s()
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 426
                self.match(CnsMRParser.Cuton)
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 427
                    self.match(CnsMRParser.Equ_op)


                self.state = 430
                self.number_s()
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 431
                self.match(CnsMRParser.From)
                self.state = 432
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 433
                self.match(CnsMRParser.To)
                self.state = 434
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(CnsMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(CnsMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(CnsMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(CnsMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(CnsMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(CnsMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = CnsMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 437
                self.match(CnsMRParser.Peak)
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 438
                    self.match(CnsMRParser.Equ_op)


                self.state = 441
                self.number_a()
                pass
            elif token in [CnsMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 442
                self.match(CnsMRParser.Spectrum)
                self.state = 444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 443
                    self.match(CnsMRParser.Equ_op)


                self.state = 446
                self.number_a()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 447
                self.match(CnsMRParser.Weight)
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 448
                    self.match(CnsMRParser.Equ_op)


                self.state = 451
                self.number_a()
                pass
            elif token in [CnsMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 452
                self.match(CnsMRParser.Volume)
                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 453
                    self.match(CnsMRParser.Equ_op)


                self.state = 456
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 457
                self.match(CnsMRParser.Ppm1)
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 458
                    self.match(CnsMRParser.Equ_op)


                self.state = 461
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 462
                self.match(CnsMRParser.Ppm2)
                self.state = 464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 463
                    self.match(CnsMRParser.Equ_op)


                self.state = 466
                self.number_a()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 467
                self.match(CnsMRParser.Cv)
                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 468
                    self.match(CnsMRParser.Equ_op)


                self.state = 471
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,0)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 474
                self.dihedral_assign()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.match(CnsMRParser.Cv)
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 476
                    self.match(CnsMRParser.Equ_op)


                self.state = 479
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 480
                self.match(CnsMRParser.Nassign)
                self.state = 482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 481
                    self.match(CnsMRParser.Equ_op)


                self.state = 484
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 4)
                self.state = 485
                self.match(CnsMRParser.Partition)
                self.state = 487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 486
                    self.match(CnsMRParser.Equ_op)


                self.state = 489
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 490
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 491
                self.match(CnsMRParser.Scale)
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 492
                    self.match(CnsMRParser.Equ_op)


                self.state = 495
                self.number_s()
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 7)
                self.state = 496
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 499
            self.match(CnsMRParser.Assign)
            self.state = 500
            self.selection()
            self.state = 501
            self.selection()
            self.state = 502
            self.selection()
            self.state = 503
            self.selection()
            self.state = 504
            self.number()
            self.state = 505
            self.number()
            self.state = 506
            self.number()
            self.state = 507
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_plane_statement)
        self._la = 0 # Token type
        try:
            self.state = 519
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 509
                self.match(CnsMRParser.Group)
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Selection or _la==CnsMRParser.Weight:
                    self.state = 510
                    self.group_statement()
                    self.state = 515
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 516
                self.match(CnsMRParser.End)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 517
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 518
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 531
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self.match(CnsMRParser.Selection)
                self.state = 523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 522
                    self.match(CnsMRParser.Equ_op)


                self.state = 525
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 526
                self.match(CnsMRParser.Weight)
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 527
                    self.match(CnsMRParser.Equ_op)


                self.state = 530
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 533
                self.match(CnsMRParser.Exponent)
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 534
                    self.match(CnsMRParser.Equ_op)


                self.state = 537
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 538
                self.match(CnsMRParser.Normal)
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 539
                    self.match(CnsMRParser.Equ_op)


                self.state = 542
                self.match(CnsMRParser.L_paren)
                self.state = 568
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integer, CnsMRParser.Real]:
                    self.state = 543
                    self.number_s()
                    self.state = 545
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 544
                        self.match(CnsMRParser.Comma)


                    self.state = 547
                    self.number_s()
                    self.state = 549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 548
                        self.match(CnsMRParser.Comma)


                    self.state = 551
                    self.number_s()
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 553
                    self.match(CnsMRParser.Tail)
                    self.state = 555
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 554
                        self.match(CnsMRParser.Equ_op)


                    self.state = 557
                    self.selection()
                    self.state = 559
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 558
                        self.match(CnsMRParser.Comma)


                    self.state = 566
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 561
                        self.match(CnsMRParser.Head)
                        self.state = 563
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CnsMRParser.Equ_op:
                            self.state = 562
                            self.match(CnsMRParser.Equ_op)


                        self.state = 565
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 570
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 604
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 574
                self.sani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 575
                self.match(CnsMRParser.Classification)
                self.state = 577
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 576
                    self.match(CnsMRParser.Equ_op)


                self.state = 579
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 580
                self.match(CnsMRParser.Coefficients)
                self.state = 581
                self.number_s()
                self.state = 582
                self.number_s()
                self.state = 583
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 585
                self.match(CnsMRParser.ForceConstant)
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 586
                    self.match(CnsMRParser.Equ_op)


                self.state = 589
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 590
                self.match(CnsMRParser.Nrestraints)
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 591
                    self.match(CnsMRParser.Equ_op)


                self.state = 594
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 595
                self.match(CnsMRParser.Potential)
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 596
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 599
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 600
                self.match(CnsMRParser.Print)
                self.state = 601
                self.match(CnsMRParser.Threshold)
                self.state = 602
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 603
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 606
            self.match(CnsMRParser.Assign)
            self.state = 607
            self.selection()
            self.state = 608
            self.selection()
            self.state = 609
            self.selection()
            self.state = 610
            self.selection()
            self.state = 611
            self.selection()
            self.state = 612
            self.selection()
            self.state = 613
            self.number()
            self.state = 614
            self.number()
            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 615
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 667
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 618
                self.coup_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 619
                self.match(CnsMRParser.Classification)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 620
                    self.match(CnsMRParser.Equ_op)


                self.state = 623
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 624
                self.match(CnsMRParser.Coefficients)
                self.state = 625
                self.number_s()
                self.state = 626
                self.number_s()
                self.state = 627
                self.number_s()
                self.state = 628
                self.number_s()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 630
                self.match(CnsMRParser.Cv)
                self.state = 632
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 631
                    self.match(CnsMRParser.Equ_op)


                self.state = 634
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 635
                self.match(CnsMRParser.ForceConstant)
                self.state = 636
                self.number_s()
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                    self.state = 637
                    self.number_s()


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 640
                self.match(CnsMRParser.Nrestraints)
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 641
                    self.match(CnsMRParser.Equ_op)


                self.state = 644
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 645
                self.match(CnsMRParser.Partition)
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 646
                    self.match(CnsMRParser.Equ_op)


                self.state = 649
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 650
                self.match(CnsMRParser.Potential)
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 651
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 654
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 655
                self.match(CnsMRParser.Print)
                self.state = 656
                self.match(CnsMRParser.Threshold)
                self.state = 657
                self.number_s()
                self.state = 664
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 658
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 659
                    self.match(CnsMRParser.Classification)
                    self.state = 661
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 660
                        self.match(CnsMRParser.Equ_op)


                    self.state = 663
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 666
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 669
            self.match(CnsMRParser.Assign)
            self.state = 670
            self.selection()
            self.state = 671
            self.selection()
            self.state = 672
            self.selection()
            self.state = 673
            self.selection()
            self.state = 679
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 674
                self.selection()
                self.state = 675
                self.selection()
                self.state = 676
                self.selection()
                self.state = 677
                self.selection()


            self.state = 681
            self.number()
            self.state = 682
            self.number()
            self.state = 686
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 683
                self.number()
                self.state = 684
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 732
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 688
                self.carbon_shift_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 689
                self.match(CnsMRParser.Classification)
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 690
                    self.match(CnsMRParser.Equ_op)


                self.state = 693
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 694
                self.match(CnsMRParser.Expectation)
                self.state = 695
                self.match(CnsMRParser.Integer)
                self.state = 696
                self.match(CnsMRParser.Integer)
                self.state = 697
                self.number_s()
                self.state = 698
                self.number_s()
                self.state = 699
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 701
                self.match(CnsMRParser.ForceConstant)
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 702
                    self.match(CnsMRParser.Equ_op)


                self.state = 705
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 706
                self.match(CnsMRParser.Nrestraints)
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 707
                    self.match(CnsMRParser.Equ_op)


                self.state = 710
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 711
                self.match(CnsMRParser.PhiStep)
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 712
                    self.match(CnsMRParser.Equ_op)


                self.state = 715
                self.number_s()
                pass
            elif token in [CnsMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 716
                self.match(CnsMRParser.PsiStep)
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 717
                    self.match(CnsMRParser.Equ_op)


                self.state = 720
                self.number_s()
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 721
                self.match(CnsMRParser.Potential)
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 722
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 725
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 726
                self.match(CnsMRParser.Print)
                self.state = 727
                self.match(CnsMRParser.Threshold)
                self.state = 728
                self.number_s()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 729
                self.carbon_shift_rcoil()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 730
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 731
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 734
            self.match(CnsMRParser.Assign)
            self.state = 735
            self.selection()
            self.state = 736
            self.selection()
            self.state = 737
            self.selection()
            self.state = 738
            self.selection()
            self.state = 739
            self.selection()
            self.state = 740
            self.number()
            self.state = 741
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(CnsMRParser.Rcoil)
            self.state = 744
            self.selection()
            self.state = 745
            self.number_s()
            self.state = 746
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(CnsMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 788
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 748
                self.observed()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.proton_shift_rcoil()
                pass
            elif token in [CnsMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 750
                self.proton_shift_anisotropy()
                pass
            elif token in [CnsMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 751
                self.proton_shift_amides()
                pass
            elif token in [CnsMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 752
                self.proton_shift_carbons()
                pass
            elif token in [CnsMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 753
                self.proton_shift_nitrogens()
                pass
            elif token in [CnsMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 754
                self.proton_shift_oxygens()
                pass
            elif token in [CnsMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 755
                self.proton_shift_ring_atoms()
                pass
            elif token in [CnsMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 756
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 757
                self.match(CnsMRParser.Classification)
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 758
                    self.match(CnsMRParser.Equ_op)


                self.state = 761
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 762
                self.match(CnsMRParser.Error)
                self.state = 764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 763
                    self.match(CnsMRParser.Equ_op)


                self.state = 766
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 12)
                self.state = 767
                self.match(CnsMRParser.ForceConstant)
                self.state = 768
                self.number_s()
                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                    self.state = 769
                    self.number_s()


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 772
                self.match(CnsMRParser.Potential)
                self.state = 773
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 774
                self.match(CnsMRParser.Print)
                self.state = 775
                self.match(CnsMRParser.Threshold)
                self.state = 776
                self.number_s()
                self.state = 783
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 777
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 778
                    self.match(CnsMRParser.Classification)
                    self.state = 780
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 779
                        self.match(CnsMRParser.Equ_op)


                    self.state = 782
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 785
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 787
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 790
            self.match(CnsMRParser.Observed)
            self.state = 791
            self.selection()
            self.state = 793
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 792
                self.selection()


            self.state = 795
            self.number_s()
            self.state = 797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 796
                self.number_s()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(CnsMRParser.Rcoil)
            self.state = 800
            self.selection()
            self.state = 801
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.match(CnsMRParser.Anisotropy)
            self.state = 804
            self.selection()
            self.state = 805
            self.selection()
            self.state = 806
            self.selection()
            self.state = 807
            self.match(CnsMRParser.Simple_name)
            self.state = 809
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 808
                self.match(CnsMRParser.Logical)


            self.state = 811
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 813
            self.match(CnsMRParser.Amides)
            self.state = 814
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(CnsMRParser.Carbon)
            self.state = 817
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 819
            self.match(CnsMRParser.Nitrogens)
            self.state = 820
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(CnsMRParser.Oxygens)
            self.state = 823
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(CnsMRParser.RingAtoms)
            self.state = 826
            self.match(CnsMRParser.Simple_name)
            self.state = 827
            self.selection()
            self.state = 828
            self.selection()
            self.state = 829
            self.selection()
            self.state = 830
            self.selection()
            self.state = 831
            self.selection()
            self.state = 833
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 832
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 836
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 921
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 838
                self.conf_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 839
                self.match(CnsMRParser.Classification)
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 840
                    self.match(CnsMRParser.Equ_op)


                self.state = 843
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 844
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 845
                self.match(CnsMRParser.Expectation)
                self.state = 846
                self.match(CnsMRParser.Integer)
                self.state = 848
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 847
                    self.match(CnsMRParser.Integer)


                self.state = 851
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 850
                    self.match(CnsMRParser.Integer)


                self.state = 854
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 853
                    self.match(CnsMRParser.Integer)


                self.state = 856
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 857
                self.match(CnsMRParser.Error)
                self.state = 859
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 858
                    self.match(CnsMRParser.Equ_op)


                self.state = 861
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 862
                self.match(CnsMRParser.ForceConstant)
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 863
                    self.match(CnsMRParser.Equ_op)


                self.state = 866
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 867
                self.match(CnsMRParser.Nrestraints)
                self.state = 869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 868
                    self.match(CnsMRParser.Equ_op)


                self.state = 871
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 872
                self.match(CnsMRParser.Phase)
                self.state = 873
                self.match(CnsMRParser.Integer)
                self.state = 874
                self.match(CnsMRParser.Integer)
                self.state = 875
                self.match(CnsMRParser.Integer)
                self.state = 879
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 876
                    self.match(CnsMRParser.Integer)
                    self.state = 877
                    self.match(CnsMRParser.Integer)
                    self.state = 878
                    self.match(CnsMRParser.Integer)


                self.state = 884
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 881
                    self.match(CnsMRParser.Integer)
                    self.state = 882
                    self.match(CnsMRParser.Integer)
                    self.state = 883
                    self.match(CnsMRParser.Integer)


                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 886
                    self.match(CnsMRParser.Integer)
                    self.state = 887
                    self.match(CnsMRParser.Integer)
                    self.state = 888
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 891
                self.match(CnsMRParser.Potential)
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 892
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 895
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 896
                self.match(CnsMRParser.Print)
                self.state = 897
                self.match(CnsMRParser.Threshold)
                self.state = 898
                self.number_s()
                self.state = 905
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 899
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 900
                    self.match(CnsMRParser.Classification)
                    self.state = 902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 901
                        self.match(CnsMRParser.Equ_op)


                    self.state = 904
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 907
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 908
                self.match(CnsMRParser.Size)
                self.state = 909
                self.match(CnsMRParser.Dimensions)
                self.state = 910
                self.match(CnsMRParser.Integer)
                self.state = 912
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 911
                    self.match(CnsMRParser.Integer)


                self.state = 915
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 914
                    self.match(CnsMRParser.Integer)


                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 917
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 920
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 923
            self.match(CnsMRParser.Assign)
            self.state = 924
            self.selection()
            self.state = 925
            self.selection()
            self.state = 926
            self.selection()
            self.state = 927
            self.selection()
            self.state = 933
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 928
                self.selection()
                self.state = 929
                self.selection()
                self.state = 930
                self.selection()
                self.state = 931
                self.selection()


            self.state = 940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 935
                self.selection()
                self.state = 936
                self.selection()
                self.state = 937
                self.selection()
                self.state = 938
                self.selection()


            self.state = 947
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 942
                self.selection()
                self.state = 943
                self.selection()
                self.state = 944
                self.selection()
                self.state = 945
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 981
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 949
                self.dani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 950
                self.match(CnsMRParser.Classification)
                self.state = 952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 951
                    self.match(CnsMRParser.Equ_op)


                self.state = 954
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 955
                self.match(CnsMRParser.Coefficients)
                self.state = 956
                self.number_s()
                self.state = 957
                self.number_s()
                self.state = 958
                self.number_s()
                self.state = 959
                self.number_s()
                self.state = 960
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 962
                self.match(CnsMRParser.ForceConstant)
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 963
                    self.match(CnsMRParser.Equ_op)


                self.state = 966
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 967
                self.match(CnsMRParser.Nrestraints)
                self.state = 969
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 968
                    self.match(CnsMRParser.Equ_op)


                self.state = 971
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 972
                self.match(CnsMRParser.Potential)
                self.state = 974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 973
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 976
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 977
                self.match(CnsMRParser.Print)
                self.state = 978
                self.match(CnsMRParser.Threshold)
                self.state = 979
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 980
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 983
            self.match(CnsMRParser.Assign)
            self.state = 984
            self.selection()
            self.state = 985
            self.selection()
            self.state = 986
            self.selection()
            self.state = 987
            self.selection()
            self.state = 988
            self.selection()
            self.state = 989
            self.selection()
            self.state = 990
            self.number()
            self.state = 991
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1027
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 993
                self.one_bond_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 994
                self.match(CnsMRParser.Classification)
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 995
                    self.match(CnsMRParser.Equ_op)


                self.state = 998
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 999
                self.match(CnsMRParser.Coefficients)
                self.state = 1000
                self.number_s()
                self.state = 1001
                self.number_s()
                self.state = 1002
                self.number_s()
                self.state = 1003
                self.number_s()
                self.state = 1004
                self.number_s()
                self.state = 1005
                self.number_s()
                self.state = 1006
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1008
                self.match(CnsMRParser.ForceConstant)
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1009
                    self.match(CnsMRParser.Equ_op)


                self.state = 1012
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1013
                self.match(CnsMRParser.Nrestraints)
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1014
                    self.match(CnsMRParser.Equ_op)


                self.state = 1017
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1018
                self.match(CnsMRParser.Potential)
                self.state = 1020
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1019
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1022
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1023
                self.match(CnsMRParser.Print)
                self.state = 1024
                self.match(CnsMRParser.Threshold)
                self.state = 1025
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1026
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(CnsMRParser.Assign)
            self.state = 1030
            self.selection()
            self.state = 1031
            self.selection()
            self.state = 1032
            self.selection()
            self.state = 1033
            self.selection()
            self.state = 1034
            self.selection()
            self.state = 1035
            self.selection()
            self.state = 1036
            self.selection()
            self.state = 1037
            self.selection()
            self.state = 1038
            self.number()
            self.state = 1039
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(CnsMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1093
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1041
                self.angle_db_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1042
                self.match(CnsMRParser.Classification)
                self.state = 1044
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1043
                    self.match(CnsMRParser.Equ_op)


                self.state = 1046
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1047
                self.match(CnsMRParser.DerivFlag)
                self.state = 1049
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1048
                    self.match(CnsMRParser.Equ_op)


                self.state = 1051
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1052
                self.match(CnsMRParser.Expectation)
                self.state = 1053
                self.match(CnsMRParser.Integer)
                self.state = 1054
                self.match(CnsMRParser.Integer)
                self.state = 1055
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1056
                self.match(CnsMRParser.Error)
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1057
                    self.match(CnsMRParser.Equ_op)


                self.state = 1060
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1061
                self.match(CnsMRParser.ForceConstant)
                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1062
                    self.match(CnsMRParser.Equ_op)


                self.state = 1065
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1066
                self.match(CnsMRParser.Nrestraints)
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1067
                    self.match(CnsMRParser.Equ_op)


                self.state = 1070
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1071
                self.match(CnsMRParser.Potential)
                self.state = 1073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1072
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1075
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1076
                self.match(CnsMRParser.Print)
                self.state = 1077
                self.match(CnsMRParser.Threshold)
                self.state = 1078
                self.number_s()
                self.state = 1085
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 1079
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 1080
                    self.match(CnsMRParser.Classification)
                    self.state = 1082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1081
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1084
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1087
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1088
                self.match(CnsMRParser.Size)
                self.state = 1089
                self.match(CnsMRParser.Angle_or_Dihedral)
                self.state = 1090
                self.match(CnsMRParser.Integer)
                self.state = 1091
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1092
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1095
            self.match(CnsMRParser.Assign)
            self.state = 1096
            self.selection()
            self.state = 1097
            self.selection()
            self.state = 1098
            self.selection()
            self.state = 1099
            self.selection()
            self.state = 1100
            self.selection()
            self.state = 1101
            self.selection()
            self.state = 1102
            self.selection()
            self.state = 1103
            self.selection()
            self.state = 1104
            self.selection()
            self.state = 1105
            self.selection()
            self.state = 1106
            self.selection()
            self.state = 1108
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1107
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1110
            self.match(CnsMRParser.L_paren)
            self.state = 1111
            self.selection_expression()
            self.state = 1112
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1114
            self.term()
            self.state = 1119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 1115
                self.match(CnsMRParser.Or_op)
                self.state = 1116
                self.term()
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.factor(0)
            self.state = 1127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1123
                self.match(CnsMRParser.And_op)
                self.state = 1124
                self.factor(0)
                self.state = 1129
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store_1(self):
            return self.getToken(CnsMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(CnsMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(CnsMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(CnsMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(CnsMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(CnsMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(CnsMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(CnsMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(CnsMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 100
        self.enterRecursionRule(localctx, 100, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1274
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1131
                self.match(CnsMRParser.L_paren)
                self.state = 1132
                self.selection_expression()
                self.state = 1133
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1135
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1136
                self.match(CnsMRParser.Atom)
                self.state = 1137
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1138
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1139
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1140
                self.match(CnsMRParser.Attribute)
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1141
                    self.match(CnsMRParser.Abs)


                self.state = 1144
                self.match(CnsMRParser.Attr_properties)
                self.state = 1145
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1146
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1147
                self.match(CnsMRParser.BondedTo)
                self.state = 1148
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1149
                self.match(CnsMRParser.ByGroup)
                self.state = 1150
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1151
                self.match(CnsMRParser.ByRes)
                self.state = 1152
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1153
                self.match(CnsMRParser.Chemical)
                self.state = 1160
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1154
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1155
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1158
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                    if la_ == 1:
                        self.state = 1156
                        self.match(CnsMRParser.Colon)
                        self.state = 1157
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1162
                self.match(CnsMRParser.Fbox)
                self.state = 1163
                self.number_f()
                self.state = 1164
                self.number_f()
                self.state = 1165
                self.number_f()
                self.state = 1166
                self.number_f()
                self.state = 1167
                self.number_f()
                self.state = 1168
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1170
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1171
                self.match(CnsMRParser.Id)
                self.state = 1172
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1173
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1174
                self.match(CnsMRParser.Name)
                self.state = 1181
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1175
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1176
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1179
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                    if la_ == 1:
                        self.state = 1177
                        self.match(CnsMRParser.Colon)
                        self.state = 1178
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1183
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1184
                self.match(CnsMRParser.Not_op)
                self.state = 1185
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1186
                self.match(CnsMRParser.Point)
                self.state = 1187
                self.match(CnsMRParser.L_paren)
                self.state = 1188
                self.number_f()
                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1189
                    self.match(CnsMRParser.Comma)


                self.state = 1192
                self.number_f()
                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1193
                    self.match(CnsMRParser.Comma)


                self.state = 1196
                self.number_f()
                self.state = 1197
                self.match(CnsMRParser.R_paren)
                self.state = 1198
                self.match(CnsMRParser.Cut)
                self.state = 1199
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1201
                self.match(CnsMRParser.Point)
                self.state = 1202
                self.match(CnsMRParser.L_paren)
                self.state = 1203
                self.match(CnsMRParser.Tail)
                self.state = 1205
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1204
                    self.match(CnsMRParser.Equ_op)


                self.state = 1207
                self.selection()
                self.state = 1209
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1208
                    self.match(CnsMRParser.Comma)


                self.state = 1216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1211
                    self.match(CnsMRParser.Head)
                    self.state = 1213
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1212
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1215
                    self.selection()


                self.state = 1218
                self.match(CnsMRParser.R_paren)
                self.state = 1219
                self.match(CnsMRParser.Cut)
                self.state = 1220
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1222
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1223
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1224
                self.match(CnsMRParser.Residue)
                self.state = 1231
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1225
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1226
                    self.match(CnsMRParser.Integer)
                    self.state = 1229
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                    if la_ == 1:
                        self.state = 1227
                        self.match(CnsMRParser.Colon)
                        self.state = 1228
                        self.match(CnsMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1233
                self.match(CnsMRParser.Resname)
                self.state = 1240
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1234
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1235
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1238
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                    if la_ == 1:
                        self.state = 1236
                        self.match(CnsMRParser.Colon)
                        self.state = 1237
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1242
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1254
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1243
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1244
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1247
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 1245
                        self.match(CnsMRParser.Colon)
                        self.state = 1246
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1249
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1252
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1250
                        self.match(CnsMRParser.Colon)
                        self.state = 1251
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1256
                self.match(CnsMRParser.Sfbox)
                self.state = 1257
                self.number_f()
                self.state = 1258
                self.number_f()
                self.state = 1259
                self.number_f()
                self.state = 1260
                self.number_f()
                self.state = 1261
                self.number_f()
                self.state = 1262
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1264
                self.match(CnsMRParser.Store_1)
                pass

            elif la_ == 25:
                self.state = 1265
                self.match(CnsMRParser.Store_2)
                pass

            elif la_ == 26:
                self.state = 1266
                self.match(CnsMRParser.Store_3)
                pass

            elif la_ == 27:
                self.state = 1267
                self.match(CnsMRParser.Store_4)
                pass

            elif la_ == 28:
                self.state = 1268
                self.match(CnsMRParser.Store_5)
                pass

            elif la_ == 29:
                self.state = 1269
                self.match(CnsMRParser.Store_6)
                pass

            elif la_ == 30:
                self.state = 1270
                self.match(CnsMRParser.Store_7)
                pass

            elif la_ == 31:
                self.state = 1271
                self.match(CnsMRParser.Store_8)
                pass

            elif la_ == 32:
                self.state = 1272
                self.match(CnsMRParser.Store_9)
                pass

            elif la_ == 33:
                self.state = 1273
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1284
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1282
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1276
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1277
                        self.match(CnsMRParser.Around)
                        self.state = 1278
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1279
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1280
                        self.match(CnsMRParser.Saround)
                        self.state = 1281
                        self.number_f()
                        pass

             
                self.state = 1286
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1287
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1289
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1291
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = CnsMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CnsMRParser.Flags, 0)

        def Include(self):
            return self.getToken(CnsMRParser.Include, 0)

        def End_F(self):
            return self.getToken(CnsMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(CnsMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Class_name)
            else:
                return self.getToken(CnsMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(CnsMRParser.Any_class, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = CnsMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1295
            self.match(CnsMRParser.Flags)
            self.state = 1306
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Exclude:
                self.state = 1296
                self.match(CnsMRParser.Exclude)
                self.state = 1304
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Include, CnsMRParser.Class_name]:
                    self.state = 1300
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CnsMRParser.Class_name:
                        self.state = 1297
                        self.match(CnsMRParser.Class_name)
                        self.state = 1302
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CnsMRParser.Any_class]:
                    self.state = 1303
                    self.match(CnsMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1308
            self.match(CnsMRParser.Include)
            self.state = 1312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Class_name:
                self.state = 1309
                self.match(CnsMRParser.Class_name)
                self.state = 1314
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1315
            self.match(CnsMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(CnsMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = CnsMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1317
            self.match(CnsMRParser.Vector)
            self.state = 1318
            self.vector_mode()
            self.state = 1319
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(CnsMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(CnsMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(CnsMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = CnsMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 1327
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Do_Lp, CnsMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1321
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Do_Lp or _la==CnsMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1322
                self.vector_expression()
                self.state = 1323
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1325
                self.match(CnsMRParser.Show)
                self.state = 1326
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = CnsMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            self.match(CnsMRParser.Atom_properties_VE)
            self.state = 1332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Equ_op_VE:
                self.state = 1330
                self.match(CnsMRParser.Equ_op_VE)
                self.state = 1331
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def vector_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_operationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,i)


        def Add_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Add_op_VE)
            else:
                return self.getToken(CnsMRParser.Add_op_VE, i)

        def Sub_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Sub_op_VE)
            else:
                return self.getToken(CnsMRParser.Sub_op_VE, i)

        def Mul_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Mul_op_VE)
            else:
                return self.getToken(CnsMRParser.Mul_op_VE, i)

        def Div_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Div_op_VE)
            else:
                return self.getToken(CnsMRParser.Div_op_VE, i)

        def Exp_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Exp_op_VE)
            else:
                return self.getToken(CnsMRParser.Exp_op_VE, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = CnsMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1334
            self.vflc()
            self.state = 1339
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1335
                    _la = self._input.LA(1)
                    if not(((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & ((1 << (CnsMRParser.Add_op_VE - 174)) | (1 << (CnsMRParser.Sub_op_VE - 174)) | (1 << (CnsMRParser.Mul_op_VE - 174)) | (1 << (CnsMRParser.Div_op_VE - 174)) | (1 << (CnsMRParser.Exp_op_VE - 174)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1336
                    self.vector_operation() 
                self.state = 1341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(CnsMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(CnsMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(CnsMRParser.Simple_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(CnsMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = CnsMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vflc)
        try:
            self.state = 1348
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1342
                self.match(CnsMRParser.Atom_properties_VE)
                pass
            elif token in [CnsMRParser.Abs_VE, CnsMRParser.Acos_VE, CnsMRParser.Cos_VE, CnsMRParser.Decode_VE, CnsMRParser.Encode_VE, CnsMRParser.Exp_VE, CnsMRParser.Gauss_VE, CnsMRParser.Heavy_VE, CnsMRParser.Int_VE, CnsMRParser.Log10_VE, CnsMRParser.Log_VE, CnsMRParser.Max_VE, CnsMRParser.Maxw_VE, CnsMRParser.Min_VE, CnsMRParser.Mod_VE, CnsMRParser.Norm_VE, CnsMRParser.Random_VE, CnsMRParser.Sign_VE, CnsMRParser.Sin_VE, CnsMRParser.Sqrt_VE, CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1343
                self.vector_func_call()
                pass
            elif token in [CnsMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1344
                self.match(CnsMRParser.Integer_VE)
                pass
            elif token in [CnsMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1345
                self.match(CnsMRParser.Real_VE)
                pass
            elif token in [CnsMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1346
                self.match(CnsMRParser.Simple_name_VE)
                pass
            elif token in [CnsMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1347
                self.match(CnsMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(CnsMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(CnsMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(CnsMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(CnsMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(CnsMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(CnsMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(CnsMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(CnsMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(CnsMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(CnsMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(CnsMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(CnsMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(CnsMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma_VE)
            else:
                return self.getToken(CnsMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(CnsMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(CnsMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(CnsMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(CnsMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(CnsMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(CnsMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(CnsMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(CnsMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(CnsMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = CnsMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1350
                self.match(CnsMRParser.Abs_VE)
                self.state = 1351
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1352
                self.vflc()
                self.state = 1353
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1355
                self.match(CnsMRParser.Acos_VE)
                self.state = 1356
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1357
                self.vflc()
                self.state = 1358
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1360
                self.match(CnsMRParser.Cos_VE)
                self.state = 1361
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1362
                self.vflc()
                self.state = 1363
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1365
                self.match(CnsMRParser.Decode_VE)
                self.state = 1366
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1367
                self.vflc()
                self.state = 1368
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1370
                self.match(CnsMRParser.Encode_VE)
                self.state = 1371
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1372
                self.vflc()
                self.state = 1373
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1375
                self.match(CnsMRParser.Exp_VE)
                self.state = 1376
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1377
                self.vflc()
                self.state = 1378
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1380
                self.match(CnsMRParser.Gauss_VE)
                self.state = 1381
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1382
                self.vflc()
                self.state = 1383
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1385
                self.match(CnsMRParser.Heavy_VE)
                self.state = 1386
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1387
                self.vflc()
                self.state = 1388
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1390
                self.match(CnsMRParser.Int_VE)
                self.state = 1391
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1392
                self.vflc()
                self.state = 1393
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1395
                self.match(CnsMRParser.Log10_VE)
                self.state = 1396
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1397
                self.vflc()
                self.state = 1398
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1400
                self.match(CnsMRParser.Log_VE)
                self.state = 1401
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1402
                self.vflc()
                self.state = 1403
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1405
                self.match(CnsMRParser.Max_VE)
                self.state = 1406
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1407
                self.vflc()
                self.state = 1412
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1408
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1409
                    self.vflc()
                    self.state = 1414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1415
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1417
                self.match(CnsMRParser.Maxw_VE)
                self.state = 1418
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1419
                self.vflc()
                self.state = 1420
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1422
                self.match(CnsMRParser.Min_VE)
                self.state = 1423
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1424
                self.vflc()
                self.state = 1429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1425
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1426
                    self.vflc()
                    self.state = 1431
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1432
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1434
                self.match(CnsMRParser.Mod_VE)
                self.state = 1435
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1436
                self.vflc()
                self.state = 1437
                self.match(CnsMRParser.Comma_VE)
                self.state = 1438
                self.vflc()
                self.state = 1439
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1441
                self.match(CnsMRParser.Norm_VE)
                self.state = 1442
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1443
                self.vflc()
                self.state = 1444
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1446
                self.match(CnsMRParser.Random_VE)
                self.state = 1447
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1448
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1449
                self.match(CnsMRParser.Sign_VE)
                self.state = 1450
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1451
                self.vflc()
                self.state = 1452
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1454
                self.match(CnsMRParser.Sin_VE)
                self.state = 1455
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1456
                self.vflc()
                self.state = 1457
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1459
                self.match(CnsMRParser.Sqrt_VE)
                self.state = 1460
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1461
                self.vflc()
                self.state = 1462
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1464
                self.match(CnsMRParser.Tan_VE)
                self.state = 1465
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1466
                self.vflc()
                self.state = 1467
                self.match(CnsMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(CnsMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(CnsMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(CnsMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(CnsMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(CnsMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(CnsMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(CnsMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(CnsMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(CnsMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(CnsMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = CnsMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            _la = self._input.LA(1)
            if not(((((_la - 210)) & ~0x3f) == 0 and ((1 << (_la - 210)) & ((1 << (CnsMRParser.Average_VS - 210)) | (1 << (CnsMRParser.Element_VS - 210)) | (1 << (CnsMRParser.Max_VS - 210)) | (1 << (CnsMRParser.Min_VS - 210)) | (1 << (CnsMRParser.Norm_VS - 210)) | (1 << (CnsMRParser.Rms_VS - 210)) | (1 << (CnsMRParser.Sum_VS - 210)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1472
            self.match(CnsMRParser.L_paren_VS)
            self.state = 1473
            self.match(CnsMRParser.Atom_properties_VS)
            self.state = 1474
            self.match(CnsMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[50] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




