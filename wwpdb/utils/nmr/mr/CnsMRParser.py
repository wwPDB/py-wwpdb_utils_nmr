# Generated from CnsMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,254,1932,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,5,0,191,8,0,10,0,12,0,194,9,0,1,0,1,0,1,1,1,1,5,1,200,8,1,10,1,
        12,1,203,9,1,1,1,1,1,1,2,3,2,208,8,2,1,2,1,2,5,2,212,8,2,10,2,12,
        2,215,9,2,1,2,1,2,1,3,3,3,220,8,3,1,3,1,3,5,3,224,8,3,10,3,12,3,
        227,9,3,1,3,1,3,1,4,3,4,232,8,4,1,4,1,4,5,4,236,8,4,10,4,12,4,239,
        9,4,1,4,1,4,1,5,1,5,5,5,245,8,5,10,5,12,5,248,9,5,1,5,1,5,1,6,1,
        6,5,6,254,8,6,10,6,12,6,257,9,6,1,6,1,6,1,7,1,7,5,7,263,8,7,10,7,
        12,7,266,9,7,1,7,1,7,1,8,1,8,5,8,272,8,8,10,8,12,8,275,9,8,1,8,1,
        8,1,9,1,9,5,9,281,8,9,10,9,12,9,284,9,9,1,9,1,9,1,10,1,10,5,10,290,
        8,10,10,10,12,10,293,9,10,1,10,1,10,1,11,1,11,5,11,299,8,11,10,11,
        12,11,302,9,11,1,11,1,11,1,12,1,12,5,12,308,8,12,10,12,12,12,311,
        9,12,1,12,1,12,1,13,1,13,3,13,317,8,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,333,8,13,1,13,
        1,13,1,13,3,13,338,8,13,1,13,1,13,1,13,1,13,1,13,3,13,345,8,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,354,8,13,1,13,1,13,1,13,3,
        13,359,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,368,8,13,10,
        13,12,13,371,9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,
        13,382,8,13,1,13,1,13,1,13,1,13,3,13,388,8,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,401,8,13,1,13,1,13,1,13,
        5,13,406,8,13,10,13,12,13,409,9,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,5,13,433,8,13,10,13,12,13,436,9,13,1,13,1,13,1,13,
        3,13,441,8,13,1,13,3,13,444,8,13,1,14,1,14,1,14,1,14,1,14,3,14,451,
        8,14,1,14,3,14,454,8,14,1,14,5,14,457,8,14,10,14,12,14,460,9,14,
        1,14,1,14,3,14,464,8,14,1,14,1,14,1,14,3,14,469,8,14,1,14,3,14,472,
        8,14,1,14,3,14,475,8,14,5,14,477,8,14,10,14,12,14,480,9,14,1,15,
        1,15,3,15,484,8,15,1,15,1,15,1,15,3,15,489,8,15,1,15,1,15,1,15,1,
        15,1,15,3,15,496,8,15,1,16,1,16,3,16,500,8,16,1,16,1,16,1,16,3,16,
        505,8,16,1,16,1,16,1,16,3,16,510,8,16,1,16,1,16,1,16,3,16,515,8,
        16,1,16,1,16,1,16,3,16,520,8,16,1,16,1,16,1,16,3,16,525,8,16,1,16,
        1,16,1,16,3,16,530,8,16,1,16,3,16,533,8,16,1,17,1,17,1,17,1,17,1,
        17,3,17,540,8,17,1,17,1,17,1,17,3,17,545,8,17,1,17,1,17,1,17,3,17,
        550,8,17,1,17,1,17,1,17,1,17,3,17,556,8,17,1,17,1,17,3,17,560,8,
        17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,
        19,1,19,1,19,3,19,577,8,19,1,20,1,20,5,20,581,8,20,10,20,12,20,584,
        9,20,1,20,1,20,1,21,1,21,3,21,590,8,21,1,21,1,21,1,21,3,21,595,8,
        21,1,21,3,21,598,8,21,1,22,1,22,1,22,3,22,603,8,22,1,22,1,22,1,22,
        3,22,608,8,22,1,22,1,22,1,22,3,22,613,8,22,1,22,1,22,3,22,617,8,
        22,1,22,1,22,1,22,1,22,3,22,623,8,22,1,22,1,22,3,22,627,8,22,1,22,
        1,22,3,22,631,8,22,1,22,3,22,634,8,22,3,22,636,8,22,1,22,1,22,3,
        22,640,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,3,
        24,652,8,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,662,8,24,
        1,24,1,24,1,24,3,24,667,8,24,1,24,1,24,1,24,3,24,672,8,24,1,24,1,
        24,1,24,1,24,1,24,3,24,679,8,24,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,3,25,690,8,25,1,25,3,25,693,8,25,1,26,1,26,1,26,1,26,
        3,26,699,8,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,
        710,8,26,1,26,1,26,1,26,1,26,3,26,716,8,26,1,26,1,26,3,26,720,8,
        26,1,26,1,26,1,26,3,26,725,8,26,1,26,1,26,1,26,3,26,730,8,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,3,26,739,8,26,1,26,3,26,742,8,26,1,
        26,3,26,745,8,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,3,27,757,8,27,1,27,1,27,1,27,1,27,1,27,3,27,764,8,27,1,28,1,28,
        1,28,1,28,3,28,770,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,3,28,782,8,28,1,28,1,28,1,28,3,28,787,8,28,1,28,1,28,1,
        28,3,28,792,8,28,1,28,1,28,1,28,3,28,797,8,28,1,28,1,28,1,28,3,28,
        802,8,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,3,28,811,8,28,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,838,8,
        31,1,31,1,31,1,31,3,31,843,8,31,1,31,1,31,1,31,1,31,3,31,849,8,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,859,8,31,1,31,3,31,
        862,8,31,1,31,1,31,1,31,3,31,867,8,31,1,32,1,32,1,32,3,32,872,8,
        32,1,32,1,32,3,32,876,8,32,1,33,1,33,1,33,1,33,1,34,1,34,1,34,1,
        34,1,34,1,34,3,34,888,8,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,
        36,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,3,39,912,8,39,1,40,1,40,1,40,1,41,1,41,1,41,3,41,920,8,41,
        1,41,1,41,1,41,1,41,1,41,3,41,927,8,41,1,41,3,41,930,8,41,1,41,3,
        41,933,8,41,1,41,1,41,1,41,3,41,938,8,41,1,41,1,41,1,41,3,41,943,
        8,41,1,41,1,41,1,41,3,41,948,8,41,1,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,3,41,958,8,41,1,41,1,41,1,41,3,41,963,8,41,1,41,1,41,1,
        41,3,41,968,8,41,1,41,1,41,3,41,972,8,41,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,3,41,981,8,41,1,41,3,41,984,8,41,1,41,1,41,1,41,1,41,1,
        41,3,41,991,8,41,1,41,3,41,994,8,41,1,41,3,41,997,8,41,1,41,3,41,
        1000,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,
        1012,8,42,1,42,1,42,1,42,1,42,1,42,3,42,1019,8,42,1,42,1,42,1,42,
        1,42,1,42,3,42,1026,8,42,1,43,1,43,1,43,3,43,1031,8,43,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1043,8,43,1,43,1,43,
        1,43,3,43,1048,8,43,1,43,1,43,1,43,3,43,1053,8,43,1,43,1,43,1,43,
        1,43,1,43,3,43,1060,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,3,44,1071,8,44,1,45,1,45,1,45,3,45,1076,8,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,1090,8,45,1,45,
        1,45,1,45,3,45,1095,8,45,1,45,1,45,1,45,3,45,1100,8,45,1,45,1,45,
        1,45,1,45,1,45,3,45,1107,8,45,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,3,47,1124,8,47,1,47,1,47,
        1,47,3,47,1129,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1138,
        8,47,1,47,1,47,1,47,3,47,1143,8,47,1,47,1,47,1,47,3,47,1148,8,47,
        1,47,1,47,1,47,3,47,1153,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        3,47,1162,8,47,1,47,3,47,1165,8,47,1,47,1,47,1,47,1,47,1,47,1,47,
        3,47,1173,8,47,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,3,48,1188,8,48,1,49,1,49,1,49,5,49,1193,8,49,10,49,
        12,49,1196,9,49,1,49,1,49,1,50,1,50,5,50,1202,8,50,10,50,12,50,1205,
        9,50,1,50,1,50,1,50,3,50,1210,8,50,1,51,1,51,3,51,1214,8,51,1,51,
        1,51,1,51,3,51,1219,8,51,1,51,1,51,1,51,3,51,1224,8,51,1,51,3,51,
        1227,8,51,1,52,1,52,1,52,1,52,1,53,1,53,1,53,5,53,1236,8,53,10,53,
        12,53,1239,9,53,1,54,1,54,1,54,5,54,1244,8,54,10,54,12,54,1247,9,
        54,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,
        55,1261,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
        55,1,55,1,55,1,55,3,55,1277,8,55,1,55,3,55,1280,8,55,1,55,1,55,1,
        55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,
        55,1,55,3,55,1299,8,55,1,55,1,55,1,55,3,55,1304,8,55,1,55,3,55,1307,
        8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1316,8,55,1,55,1,55,
        3,55,1320,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,3,55,
        1331,8,55,1,55,1,55,3,55,1335,8,55,1,55,1,55,3,55,1339,8,55,1,55,
        3,55,1342,8,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,3,55,1355,8,55,1,55,3,55,1358,8,55,1,55,1,55,1,55,1,55,1,55,
        3,55,1365,8,55,1,55,3,55,1368,8,55,1,55,1,55,1,55,1,55,1,55,3,55,
        1375,8,55,1,55,1,55,1,55,3,55,1380,8,55,1,55,3,55,1383,8,55,1,55,
        1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,1,55,
        1,55,1,55,1,55,1,55,3,55,1403,8,55,1,55,1,55,1,55,1,55,1,55,1,55,
        5,55,1411,8,55,10,55,12,55,1414,9,55,1,56,1,56,1,57,1,57,1,58,1,
        58,1,59,1,59,1,60,1,60,1,60,5,60,1427,8,60,10,60,12,60,1430,9,60,
        1,60,3,60,1433,8,60,3,60,1435,8,60,1,60,1,60,5,60,1439,8,60,10,60,
        12,60,1442,9,60,1,60,1,60,1,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,
        1,62,1,62,3,62,1456,8,62,1,63,1,63,1,63,3,63,1461,8,63,1,64,1,64,
        1,64,3,64,1466,8,64,1,65,1,65,1,65,1,65,1,65,1,65,1,65,3,65,1475,
        8,65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,5,66,1537,8,66,10,66,
        12,66,1540,9,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,5,66,1554,8,66,10,66,12,66,1557,9,66,1,66,1,66,1,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1596,8,66,1,67,1,67,1,
        67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,1,68,1,69,1,69,1,69,3,69,1612,
        8,69,1,70,1,70,3,70,1616,8,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,3,70,1628,8,70,1,70,1,70,1,71,1,71,5,71,1634,8,71,
        10,71,12,71,1637,9,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,
        72,1,72,1,72,1,72,3,72,1651,8,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
        72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1666,8,72,1,72,1,72,1,72,1,
        72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,
        72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1696,
        8,72,1,73,1,73,1,73,1,73,1,73,5,73,1703,8,73,10,73,12,73,1706,9,
        73,1,73,5,73,1709,8,73,10,73,12,73,1712,9,73,1,73,5,73,1715,8,73,
        10,73,12,73,1718,9,73,3,73,1720,8,73,1,73,1,73,1,73,1,73,1,73,1,
        73,5,73,1728,8,73,10,73,12,73,1731,9,73,1,73,1,73,1,73,1,73,1,74,
        1,74,1,74,1,74,1,74,5,74,1742,8,74,10,74,12,74,1745,9,74,1,74,5,
        74,1748,8,74,10,74,12,74,1751,9,74,1,74,5,74,1754,8,74,10,74,12,
        74,1757,9,74,3,74,1759,8,74,1,74,1,74,1,74,1,74,1,74,1,74,5,74,1767,
        8,74,10,74,12,74,1770,9,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,
        75,1,75,5,75,1781,8,75,10,75,12,75,1784,9,75,1,75,5,75,1787,8,75,
        10,75,12,75,1790,9,75,1,75,5,75,1793,8,75,10,75,12,75,1796,9,75,
        3,75,1798,8,75,1,75,1,75,1,75,1,75,1,75,1,75,5,75,1806,8,75,10,75,
        12,75,1809,9,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,1,76,5,76,
        1820,8,76,10,76,12,76,1823,9,76,1,76,5,76,1826,8,76,10,76,12,76,
        1829,9,76,1,76,5,76,1832,8,76,10,76,12,76,1835,9,76,3,76,1837,8,
        76,1,76,1,76,1,76,1,76,1,76,1,76,5,76,1845,8,76,10,76,12,76,1848,
        9,76,1,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,1,77,5,77,1859,8,77,
        10,77,12,77,1862,9,77,1,77,5,77,1865,8,77,10,77,12,77,1868,9,77,
        1,77,5,77,1871,8,77,10,77,12,77,1874,9,77,3,77,1876,8,77,1,77,1,
        77,1,77,1,77,1,77,1,77,5,77,1884,8,77,10,77,12,77,1887,9,77,1,77,
        1,77,1,77,1,77,1,78,1,78,1,78,1,78,1,78,5,78,1898,8,78,10,78,12,
        78,1901,9,78,1,78,5,78,1904,8,78,10,78,12,78,1907,9,78,1,78,5,78,
        1910,8,78,10,78,12,78,1913,9,78,3,78,1915,8,78,1,78,1,78,1,78,1,
        78,1,78,1,78,5,78,1923,8,78,10,78,12,78,1926,9,78,1,78,1,78,1,78,
        1,78,1,78,3,369,407,434,1,110,79,0,2,4,6,8,10,12,14,16,18,20,22,
        24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,
        68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,0,12,2,0,49,49,85,85,1,0,157,
        158,2,0,150,150,159,159,3,0,150,150,152,152,169,169,2,0,150,150,
        152,152,1,0,125,126,1,0,196,200,1,0,235,241,4,0,49,49,85,85,135,
        136,157,157,2,0,131,131,150,150,2,0,49,49,136,136,2,0,26,26,139,
        139,2316,0,192,1,0,0,0,2,197,1,0,0,0,4,207,1,0,0,0,6,219,1,0,0,0,
        8,231,1,0,0,0,10,242,1,0,0,0,12,251,1,0,0,0,14,260,1,0,0,0,16,269,
        1,0,0,0,18,278,1,0,0,0,20,287,1,0,0,0,22,296,1,0,0,0,24,305,1,0,
        0,0,26,443,1,0,0,0,28,445,1,0,0,0,30,495,1,0,0,0,32,532,1,0,0,0,
        34,559,1,0,0,0,36,561,1,0,0,0,38,576,1,0,0,0,40,578,1,0,0,0,42,597,
        1,0,0,0,44,639,1,0,0,0,46,641,1,0,0,0,48,678,1,0,0,0,50,680,1,0,
        0,0,52,744,1,0,0,0,54,746,1,0,0,0,56,810,1,0,0,0,58,812,1,0,0,0,
        60,821,1,0,0,0,62,866,1,0,0,0,64,868,1,0,0,0,66,877,1,0,0,0,68,881,
        1,0,0,0,70,891,1,0,0,0,72,894,1,0,0,0,74,897,1,0,0,0,76,900,1,0,
        0,0,78,903,1,0,0,0,80,913,1,0,0,0,82,999,1,0,0,0,84,1001,1,0,0,0,
        86,1059,1,0,0,0,88,1061,1,0,0,0,90,1106,1,0,0,0,92,1108,1,0,0,0,
        94,1172,1,0,0,0,96,1174,1,0,0,0,98,1189,1,0,0,0,100,1209,1,0,0,0,
        102,1226,1,0,0,0,104,1228,1,0,0,0,106,1232,1,0,0,0,108,1240,1,0,
        0,0,110,1402,1,0,0,0,112,1415,1,0,0,0,114,1417,1,0,0,0,116,1419,
        1,0,0,0,118,1421,1,0,0,0,120,1423,1,0,0,0,122,1445,1,0,0,0,124,1455,
        1,0,0,0,126,1457,1,0,0,0,128,1462,1,0,0,0,130,1474,1,0,0,0,132,1595,
        1,0,0,0,134,1597,1,0,0,0,136,1602,1,0,0,0,138,1608,1,0,0,0,140,1613,
        1,0,0,0,142,1631,1,0,0,0,144,1695,1,0,0,0,146,1697,1,0,0,0,148,1736,
        1,0,0,0,150,1775,1,0,0,0,152,1814,1,0,0,0,154,1853,1,0,0,0,156,1892,
        1,0,0,0,158,191,3,2,1,0,159,191,3,4,2,0,160,191,3,6,3,0,161,191,
        3,8,4,0,162,191,3,10,5,0,163,191,3,12,6,0,164,191,3,14,7,0,165,191,
        3,16,8,0,166,191,3,18,9,0,167,191,3,20,10,0,168,191,3,22,11,0,169,
        191,3,24,12,0,170,191,3,98,49,0,171,191,3,120,60,0,172,191,3,122,
        61,0,173,191,3,136,68,0,174,191,3,140,70,0,175,191,3,142,71,0,176,
        191,3,146,73,0,177,191,3,148,74,0,178,191,3,150,75,0,179,191,3,152,
        76,0,180,191,3,154,77,0,181,191,3,28,14,0,182,191,3,36,18,0,183,
        191,3,50,25,0,184,191,3,38,19,0,185,191,3,46,23,0,186,191,3,54,27,
        0,187,191,3,58,29,0,188,191,3,64,32,0,189,191,3,144,72,0,190,158,
        1,0,0,0,190,159,1,0,0,0,190,160,1,0,0,0,190,161,1,0,0,0,190,162,
        1,0,0,0,190,163,1,0,0,0,190,164,1,0,0,0,190,165,1,0,0,0,190,166,
        1,0,0,0,190,167,1,0,0,0,190,168,1,0,0,0,190,169,1,0,0,0,190,170,
        1,0,0,0,190,171,1,0,0,0,190,172,1,0,0,0,190,173,1,0,0,0,190,174,
        1,0,0,0,190,175,1,0,0,0,190,176,1,0,0,0,190,177,1,0,0,0,190,178,
        1,0,0,0,190,179,1,0,0,0,190,180,1,0,0,0,190,181,1,0,0,0,190,182,
        1,0,0,0,190,183,1,0,0,0,190,184,1,0,0,0,190,185,1,0,0,0,190,186,
        1,0,0,0,190,187,1,0,0,0,190,188,1,0,0,0,190,189,1,0,0,0,191,194,
        1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,192,
        1,0,0,0,195,196,5,0,0,1,196,1,1,0,0,0,197,201,5,3,0,0,198,200,3,
        26,13,0,199,198,1,0,0,0,200,203,1,0,0,0,201,199,1,0,0,0,201,202,
        1,0,0,0,202,204,1,0,0,0,203,201,1,0,0,0,204,205,5,2,0,0,205,3,1,
        0,0,0,206,208,5,48,0,0,207,206,1,0,0,0,207,208,1,0,0,0,208,209,1,
        0,0,0,209,213,5,49,0,0,210,212,3,34,17,0,211,210,1,0,0,0,212,215,
        1,0,0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,213,
        1,0,0,0,216,217,5,2,0,0,217,5,1,0,0,0,218,220,5,48,0,0,219,218,1,
        0,0,0,219,220,1,0,0,0,220,221,1,0,0,0,221,225,5,52,0,0,222,224,3,
        38,19,0,223,222,1,0,0,0,224,227,1,0,0,0,225,223,1,0,0,0,225,226,
        1,0,0,0,226,228,1,0,0,0,227,225,1,0,0,0,228,229,5,2,0,0,229,7,1,
        0,0,0,230,232,5,48,0,0,231,230,1,0,0,0,231,232,1,0,0,0,232,233,1,
        0,0,0,233,237,5,56,0,0,234,236,3,44,22,0,235,234,1,0,0,0,236,239,
        1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,240,1,0,0,0,239,237,
        1,0,0,0,240,241,5,2,0,0,241,9,1,0,0,0,242,246,5,59,0,0,243,245,3,
        48,24,0,244,243,1,0,0,0,245,248,1,0,0,0,246,244,1,0,0,0,246,247,
        1,0,0,0,247,249,1,0,0,0,248,246,1,0,0,0,249,250,5,2,0,0,250,11,1,
        0,0,0,251,255,5,62,0,0,252,254,3,52,26,0,253,252,1,0,0,0,254,257,
        1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,258,1,0,0,0,257,255,
        1,0,0,0,258,259,5,2,0,0,259,13,1,0,0,0,260,264,5,63,0,0,261,263,
        3,56,28,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,
        1,0,0,0,265,267,1,0,0,0,266,264,1,0,0,0,267,268,5,2,0,0,268,15,1,
        0,0,0,269,273,5,69,0,0,270,272,3,62,31,0,271,270,1,0,0,0,272,275,
        1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,276,1,0,0,0,275,273,
        1,0,0,0,276,277,5,2,0,0,277,17,1,0,0,0,278,282,5,78,0,0,279,281,
        3,82,41,0,280,279,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,
        1,0,0,0,283,285,1,0,0,0,284,282,1,0,0,0,285,286,5,2,0,0,286,19,1,
        0,0,0,287,291,5,83,0,0,288,290,3,86,43,0,289,288,1,0,0,0,290,293,
        1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,294,1,0,0,0,293,291,
        1,0,0,0,294,295,5,2,0,0,295,21,1,0,0,0,296,300,5,84,0,0,297,299,
        3,90,45,0,298,297,1,0,0,0,299,302,1,0,0,0,300,298,1,0,0,0,300,301,
        1,0,0,0,301,303,1,0,0,0,302,300,1,0,0,0,303,304,5,2,0,0,304,23,1,
        0,0,0,305,309,5,85,0,0,306,308,3,94,47,0,307,306,1,0,0,0,308,311,
        1,0,0,0,309,307,1,0,0,0,309,310,1,0,0,0,310,312,1,0,0,0,311,309,
        1,0,0,0,312,313,5,2,0,0,313,25,1,0,0,0,314,316,5,4,0,0,315,317,5,
        163,0,0,316,315,1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,444,
        5,186,0,0,319,444,3,28,14,0,320,444,3,146,73,0,321,322,5,6,0,0,322,
        323,5,157,0,0,323,444,3,116,58,0,324,325,5,7,0,0,325,326,5,180,0,
        0,326,444,5,179,0,0,327,328,5,8,0,0,328,329,5,157,0,0,329,444,3,
        116,58,0,330,332,5,9,0,0,331,333,5,163,0,0,332,331,1,0,0,0,332,333,
        1,0,0,0,333,334,1,0,0,0,334,444,3,116,58,0,335,337,5,10,0,0,336,
        338,5,163,0,0,337,336,1,0,0,0,337,338,1,0,0,0,338,339,1,0,0,0,339,
        444,5,157,0,0,340,341,5,11,0,0,341,444,5,157,0,0,342,344,5,12,0,
        0,343,345,5,163,0,0,344,343,1,0,0,0,344,345,1,0,0,0,345,346,1,0,
        0,0,346,444,5,150,0,0,347,348,5,13,0,0,348,444,5,35,0,0,349,350,
        5,13,0,0,350,351,5,36,0,0,351,353,5,37,0,0,352,354,5,163,0,0,353,
        352,1,0,0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,356,3,116,58,0,356,
        358,5,38,0,0,357,359,5,163,0,0,358,357,1,0,0,0,358,359,1,0,0,0,359,
        360,1,0,0,0,360,361,3,116,58,0,361,444,1,0,0,0,362,363,5,14,0,0,
        363,364,5,157,0,0,364,365,5,157,0,0,365,444,3,116,58,0,366,368,5,
        15,0,0,367,366,1,0,0,0,368,371,1,0,0,0,369,370,1,0,0,0,369,367,1,
        0,0,0,370,372,1,0,0,0,371,369,1,0,0,0,372,444,5,2,0,0,373,374,5,
        16,0,0,374,375,5,157,0,0,375,444,5,150,0,0,376,377,5,17,0,0,377,
        378,5,157,0,0,378,444,5,150,0,0,379,381,5,18,0,0,380,382,5,163,0,
        0,381,380,1,0,0,0,381,382,1,0,0,0,382,383,1,0,0,0,383,444,5,150,
        0,0,384,444,5,19,0,0,385,387,5,20,0,0,386,388,5,163,0,0,387,386,
        1,0,0,0,387,388,1,0,0,0,388,389,1,0,0,0,389,444,5,150,0,0,390,391,
        5,21,0,0,391,392,5,184,0,0,392,444,5,183,0,0,393,394,5,22,0,0,394,
        395,3,30,15,0,395,396,5,2,0,0,396,444,1,0,0,0,397,398,5,23,0,0,398,
        400,5,25,0,0,399,401,5,163,0,0,400,399,1,0,0,0,400,401,1,0,0,0,401,
        402,1,0,0,0,402,444,3,116,58,0,403,407,5,24,0,0,404,406,5,157,0,
        0,405,404,1,0,0,0,406,409,1,0,0,0,407,408,1,0,0,0,407,405,1,0,0,
        0,408,410,1,0,0,0,409,407,1,0,0,0,410,444,5,2,0,0,411,444,5,26,0,
        0,412,413,5,27,0,0,413,414,5,157,0,0,414,444,3,116,58,0,415,416,
        5,28,0,0,416,417,5,157,0,0,417,444,3,116,58,0,418,419,5,29,0,0,419,
        420,5,157,0,0,420,444,3,116,58,0,421,422,5,30,0,0,422,423,5,157,
        0,0,423,444,3,116,58,0,424,425,5,31,0,0,425,426,5,157,0,0,426,444,
        3,116,58,0,427,428,5,32,0,0,428,429,5,157,0,0,429,444,3,116,58,0,
        430,434,5,33,0,0,431,433,5,157,0,0,432,431,1,0,0,0,433,436,1,0,0,
        0,434,435,1,0,0,0,434,432,1,0,0,0,435,437,1,0,0,0,436,434,1,0,0,
        0,437,444,5,2,0,0,438,440,5,34,0,0,439,441,5,163,0,0,440,439,1,0,
        0,0,440,441,1,0,0,0,441,442,1,0,0,0,442,444,3,116,58,0,443,314,1,
        0,0,0,443,319,1,0,0,0,443,320,1,0,0,0,443,321,1,0,0,0,443,324,1,
        0,0,0,443,327,1,0,0,0,443,330,1,0,0,0,443,335,1,0,0,0,443,340,1,
        0,0,0,443,342,1,0,0,0,443,347,1,0,0,0,443,349,1,0,0,0,443,362,1,
        0,0,0,443,369,1,0,0,0,443,373,1,0,0,0,443,376,1,0,0,0,443,379,1,
        0,0,0,443,384,1,0,0,0,443,385,1,0,0,0,443,390,1,0,0,0,443,393,1,
        0,0,0,443,397,1,0,0,0,443,403,1,0,0,0,443,411,1,0,0,0,443,412,1,
        0,0,0,443,415,1,0,0,0,443,418,1,0,0,0,443,421,1,0,0,0,443,424,1,
        0,0,0,443,427,1,0,0,0,443,430,1,0,0,0,443,438,1,0,0,0,444,27,1,0,
        0,0,445,446,5,5,0,0,446,447,3,104,52,0,447,448,3,104,52,0,448,450,
        3,112,56,0,449,451,3,112,56,0,450,449,1,0,0,0,450,451,1,0,0,0,451,
        453,1,0,0,0,452,454,3,112,56,0,453,452,1,0,0,0,453,454,1,0,0,0,454,
        458,1,0,0,0,455,457,3,32,16,0,456,455,1,0,0,0,457,460,1,0,0,0,458,
        456,1,0,0,0,458,459,1,0,0,0,459,478,1,0,0,0,460,458,1,0,0,0,461,
        463,5,145,0,0,462,464,5,5,0,0,463,462,1,0,0,0,463,464,1,0,0,0,464,
        465,1,0,0,0,465,466,3,104,52,0,466,468,3,104,52,0,467,469,3,112,
        56,0,468,467,1,0,0,0,468,469,1,0,0,0,469,471,1,0,0,0,470,472,3,112,
        56,0,471,470,1,0,0,0,471,472,1,0,0,0,472,474,1,0,0,0,473,475,3,112,
        56,0,474,473,1,0,0,0,474,475,1,0,0,0,475,477,1,0,0,0,476,461,1,0,
        0,0,477,480,1,0,0,0,478,476,1,0,0,0,478,479,1,0,0,0,479,29,1,0,0,
        0,480,478,1,0,0,0,481,483,5,39,0,0,482,484,5,163,0,0,483,482,1,0,
        0,0,483,484,1,0,0,0,484,485,1,0,0,0,485,496,3,116,58,0,486,488,5,
        40,0,0,487,489,5,163,0,0,488,487,1,0,0,0,488,489,1,0,0,0,489,490,
        1,0,0,0,490,496,3,116,58,0,491,492,5,41,0,0,492,496,3,104,52,0,493,
        494,5,42,0,0,494,496,3,104,52,0,495,481,1,0,0,0,495,486,1,0,0,0,
        495,491,1,0,0,0,495,493,1,0,0,0,496,31,1,0,0,0,497,499,5,43,0,0,
        498,500,5,163,0,0,499,498,1,0,0,0,499,500,1,0,0,0,500,501,1,0,0,
        0,501,533,3,118,59,0,502,504,5,44,0,0,503,505,5,163,0,0,504,503,
        1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,533,3,118,59,0,507,509,
        5,55,0,0,508,510,5,163,0,0,509,508,1,0,0,0,509,510,1,0,0,0,510,511,
        1,0,0,0,511,533,3,118,59,0,512,514,5,45,0,0,513,515,5,163,0,0,514,
        513,1,0,0,0,514,515,1,0,0,0,515,516,1,0,0,0,516,533,3,118,59,0,517,
        519,5,46,0,0,518,520,5,163,0,0,519,518,1,0,0,0,519,520,1,0,0,0,520,
        521,1,0,0,0,521,533,3,118,59,0,522,524,5,47,0,0,523,525,5,163,0,
        0,524,523,1,0,0,0,524,525,1,0,0,0,525,526,1,0,0,0,526,533,3,118,
        59,0,527,529,5,12,0,0,528,530,5,163,0,0,529,528,1,0,0,0,529,530,
        1,0,0,0,530,531,1,0,0,0,531,533,3,118,59,0,532,497,1,0,0,0,532,502,
        1,0,0,0,532,507,1,0,0,0,532,512,1,0,0,0,532,517,1,0,0,0,532,522,
        1,0,0,0,532,527,1,0,0,0,533,33,1,0,0,0,534,560,3,122,61,0,535,560,
        3,36,18,0,536,560,3,148,74,0,537,539,5,12,0,0,538,540,5,163,0,0,
        539,538,1,0,0,0,539,540,1,0,0,0,540,541,1,0,0,0,541,560,5,150,0,
        0,542,544,5,50,0,0,543,545,5,163,0,0,544,543,1,0,0,0,544,545,1,0,
        0,0,545,546,1,0,0,0,546,560,5,150,0,0,547,549,5,20,0,0,548,550,5,
        163,0,0,549,548,1,0,0,0,549,550,1,0,0,0,550,551,1,0,0,0,551,560,
        5,150,0,0,552,560,5,26,0,0,553,555,5,28,0,0,554,556,5,163,0,0,555,
        554,1,0,0,0,555,556,1,0,0,0,556,557,1,0,0,0,557,560,3,116,58,0,558,
        560,5,51,0,0,559,534,1,0,0,0,559,535,1,0,0,0,559,536,1,0,0,0,559,
        537,1,0,0,0,559,542,1,0,0,0,559,547,1,0,0,0,559,552,1,0,0,0,559,
        553,1,0,0,0,559,558,1,0,0,0,560,35,1,0,0,0,561,562,5,5,0,0,562,563,
        3,104,52,0,563,564,3,104,52,0,564,565,3,104,52,0,565,566,3,104,52,
        0,566,567,3,112,56,0,567,568,3,112,56,0,568,569,3,112,56,0,569,570,
        5,150,0,0,570,37,1,0,0,0,571,577,3,122,61,0,572,577,3,40,20,0,573,
        577,3,156,78,0,574,577,5,35,0,0,575,577,5,51,0,0,576,571,1,0,0,0,
        576,572,1,0,0,0,576,573,1,0,0,0,576,574,1,0,0,0,576,575,1,0,0,0,
        577,39,1,0,0,0,578,582,5,53,0,0,579,581,3,42,21,0,580,579,1,0,0,
        0,581,584,1,0,0,0,582,580,1,0,0,0,582,583,1,0,0,0,583,585,1,0,0,
        0,584,582,1,0,0,0,585,586,5,2,0,0,586,41,1,0,0,0,587,589,5,54,0,
        0,588,590,5,163,0,0,589,588,1,0,0,0,589,590,1,0,0,0,590,591,1,0,
        0,0,591,598,3,104,52,0,592,594,5,55,0,0,593,595,5,163,0,0,594,593,
        1,0,0,0,594,595,1,0,0,0,595,596,1,0,0,0,596,598,3,116,58,0,597,587,
        1,0,0,0,597,592,1,0,0,0,598,43,1,0,0,0,599,640,3,122,61,0,600,602,
        5,57,0,0,601,603,5,163,0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,604,
        1,0,0,0,604,640,5,150,0,0,605,607,5,58,0,0,606,608,5,163,0,0,607,
        606,1,0,0,0,607,608,1,0,0,0,608,609,1,0,0,0,609,635,5,160,0,0,610,
        612,3,116,58,0,611,613,5,148,0,0,612,611,1,0,0,0,612,613,1,0,0,0,
        613,614,1,0,0,0,614,616,3,116,58,0,615,617,5,148,0,0,616,615,1,0,
        0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,619,3,116,58,0,619,636,1,
        0,0,0,620,622,5,143,0,0,621,623,5,163,0,0,622,621,1,0,0,0,622,623,
        1,0,0,0,623,624,1,0,0,0,624,626,3,104,52,0,625,627,5,148,0,0,626,
        625,1,0,0,0,626,627,1,0,0,0,627,633,1,0,0,0,628,630,5,144,0,0,629,
        631,5,163,0,0,630,629,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,
        634,3,104,52,0,633,628,1,0,0,0,633,634,1,0,0,0,634,636,1,0,0,0,635,
        610,1,0,0,0,635,620,1,0,0,0,636,637,1,0,0,0,637,638,5,161,0,0,638,
        640,1,0,0,0,639,599,1,0,0,0,639,600,1,0,0,0,639,605,1,0,0,0,640,
        45,1,0,0,0,641,642,5,5,0,0,642,643,3,104,52,0,643,644,3,112,56,0,
        644,645,3,112,56,0,645,646,3,112,56,0,646,47,1,0,0,0,647,679,3,50,
        25,0,648,679,3,150,75,0,649,651,5,10,0,0,650,652,5,163,0,0,651,650,
        1,0,0,0,651,652,1,0,0,0,652,653,1,0,0,0,653,679,5,157,0,0,654,655,
        5,60,0,0,655,656,3,116,58,0,656,657,3,116,58,0,657,658,3,116,58,
        0,658,679,1,0,0,0,659,661,5,61,0,0,660,662,5,163,0,0,661,660,1,0,
        0,0,661,662,1,0,0,0,662,663,1,0,0,0,663,679,3,116,58,0,664,666,5,
        18,0,0,665,667,5,163,0,0,666,665,1,0,0,0,666,667,1,0,0,0,667,668,
        1,0,0,0,668,679,5,150,0,0,669,671,5,21,0,0,670,672,5,182,0,0,671,
        670,1,0,0,0,671,672,1,0,0,0,672,673,1,0,0,0,673,679,5,183,0,0,674,
        675,5,23,0,0,675,676,5,25,0,0,676,679,3,116,58,0,677,679,5,26,0,
        0,678,647,1,0,0,0,678,648,1,0,0,0,678,649,1,0,0,0,678,654,1,0,0,
        0,678,659,1,0,0,0,678,664,1,0,0,0,678,669,1,0,0,0,678,674,1,0,0,
        0,678,677,1,0,0,0,679,49,1,0,0,0,680,681,5,5,0,0,681,682,3,104,52,
        0,682,683,3,104,52,0,683,684,3,104,52,0,684,685,3,104,52,0,685,686,
        3,104,52,0,686,687,3,104,52,0,687,689,3,112,56,0,688,690,3,112,56,
        0,689,688,1,0,0,0,689,690,1,0,0,0,690,692,1,0,0,0,691,693,3,112,
        56,0,692,691,1,0,0,0,692,693,1,0,0,0,693,51,1,0,0,0,694,745,3,54,
        27,0,695,745,3,152,76,0,696,698,5,10,0,0,697,699,5,163,0,0,698,697,
        1,0,0,0,698,699,1,0,0,0,699,700,1,0,0,0,700,745,5,157,0,0,701,702,
        5,60,0,0,702,703,3,116,58,0,703,704,3,116,58,0,704,705,3,116,58,
        0,705,706,3,116,58,0,706,745,1,0,0,0,707,709,5,12,0,0,708,710,5,
        163,0,0,709,708,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,745,
        5,150,0,0,712,713,5,61,0,0,713,715,3,116,58,0,714,716,3,116,58,0,
        715,714,1,0,0,0,715,716,1,0,0,0,716,745,1,0,0,0,717,719,5,18,0,0,
        718,720,5,163,0,0,719,718,1,0,0,0,719,720,1,0,0,0,720,721,1,0,0,
        0,721,745,5,150,0,0,722,724,5,20,0,0,723,725,5,163,0,0,724,723,1,
        0,0,0,724,725,1,0,0,0,725,726,1,0,0,0,726,745,5,150,0,0,727,729,
        5,21,0,0,728,730,5,182,0,0,729,728,1,0,0,0,729,730,1,0,0,0,730,731,
        1,0,0,0,731,745,5,183,0,0,732,733,5,23,0,0,733,734,5,25,0,0,734,
        741,3,116,58,0,735,742,5,91,0,0,736,738,5,10,0,0,737,739,5,163,0,
        0,738,737,1,0,0,0,738,739,1,0,0,0,739,740,1,0,0,0,740,742,5,157,
        0,0,741,735,1,0,0,0,741,736,1,0,0,0,742,745,1,0,0,0,743,745,5,26,
        0,0,744,694,1,0,0,0,744,695,1,0,0,0,744,696,1,0,0,0,744,701,1,0,
        0,0,744,707,1,0,0,0,744,712,1,0,0,0,744,717,1,0,0,0,744,722,1,0,
        0,0,744,727,1,0,0,0,744,732,1,0,0,0,744,743,1,0,0,0,745,53,1,0,0,
        0,746,747,5,5,0,0,747,748,3,104,52,0,748,749,3,104,52,0,749,750,
        3,104,52,0,750,756,3,104,52,0,751,752,3,104,52,0,752,753,3,104,52,
        0,753,754,3,104,52,0,754,755,3,104,52,0,755,757,1,0,0,0,756,751,
        1,0,0,0,756,757,1,0,0,0,757,758,1,0,0,0,758,759,3,112,56,0,759,763,
        3,112,56,0,760,761,3,112,56,0,761,762,3,112,56,0,762,764,1,0,0,0,
        763,760,1,0,0,0,763,764,1,0,0,0,764,55,1,0,0,0,765,811,3,58,29,0,
        766,811,3,154,77,0,767,769,5,10,0,0,768,770,5,163,0,0,769,768,1,
        0,0,0,769,770,1,0,0,0,770,771,1,0,0,0,771,811,5,157,0,0,772,773,
        5,64,0,0,773,774,5,150,0,0,774,775,5,150,0,0,775,776,3,116,58,0,
        776,777,3,116,58,0,777,778,3,116,58,0,778,811,1,0,0,0,779,781,5,
        61,0,0,780,782,5,163,0,0,781,780,1,0,0,0,781,782,1,0,0,0,782,783,
        1,0,0,0,783,811,3,116,58,0,784,786,5,18,0,0,785,787,5,163,0,0,786,
        785,1,0,0,0,786,787,1,0,0,0,787,788,1,0,0,0,788,811,5,150,0,0,789,
        791,5,65,0,0,790,792,5,163,0,0,791,790,1,0,0,0,791,792,1,0,0,0,792,
        793,1,0,0,0,793,811,3,116,58,0,794,796,5,66,0,0,795,797,5,163,0,
        0,796,795,1,0,0,0,796,797,1,0,0,0,797,798,1,0,0,0,798,811,3,116,
        58,0,799,801,5,21,0,0,800,802,5,182,0,0,801,800,1,0,0,0,801,802,
        1,0,0,0,802,803,1,0,0,0,803,811,5,183,0,0,804,805,5,23,0,0,805,806,
        5,25,0,0,806,811,3,116,58,0,807,811,3,60,30,0,808,811,5,26,0,0,809,
        811,5,68,0,0,810,765,1,0,0,0,810,766,1,0,0,0,810,767,1,0,0,0,810,
        772,1,0,0,0,810,779,1,0,0,0,810,784,1,0,0,0,810,789,1,0,0,0,810,
        794,1,0,0,0,810,799,1,0,0,0,810,804,1,0,0,0,810,807,1,0,0,0,810,
        808,1,0,0,0,810,809,1,0,0,0,811,57,1,0,0,0,812,813,5,5,0,0,813,814,
        3,104,52,0,814,815,3,104,52,0,815,816,3,104,52,0,816,817,3,104,52,
        0,817,818,3,104,52,0,818,819,3,112,56,0,819,820,3,112,56,0,820,59,
        1,0,0,0,821,822,5,67,0,0,822,823,3,104,52,0,823,824,3,112,56,0,824,
        825,3,112,56,0,825,61,1,0,0,0,826,867,3,64,32,0,827,867,3,66,33,
        0,828,867,3,68,34,0,829,867,3,70,35,0,830,867,3,72,36,0,831,867,
        3,74,37,0,832,867,3,76,38,0,833,867,3,78,39,0,834,867,3,80,40,0,
        835,837,5,10,0,0,836,838,5,163,0,0,837,836,1,0,0,0,837,838,1,0,0,
        0,838,839,1,0,0,0,839,867,5,157,0,0,840,842,5,77,0,0,841,843,5,163,
        0,0,842,841,1,0,0,0,842,843,1,0,0,0,843,844,1,0,0,0,844,867,3,116,
        58,0,845,846,5,61,0,0,846,848,3,116,58,0,847,849,3,116,58,0,848,
        847,1,0,0,0,848,849,1,0,0,0,849,867,1,0,0,0,850,851,5,21,0,0,851,
        867,5,183,0,0,852,853,5,23,0,0,853,854,5,25,0,0,854,861,3,116,58,
        0,855,862,5,91,0,0,856,858,5,10,0,0,857,859,5,163,0,0,858,857,1,
        0,0,0,858,859,1,0,0,0,859,860,1,0,0,0,860,862,5,157,0,0,861,855,
        1,0,0,0,861,856,1,0,0,0,862,863,1,0,0,0,863,864,5,157,0,0,864,867,
        1,0,0,0,865,867,5,26,0,0,866,826,1,0,0,0,866,827,1,0,0,0,866,828,
        1,0,0,0,866,829,1,0,0,0,866,830,1,0,0,0,866,831,1,0,0,0,866,832,
        1,0,0,0,866,833,1,0,0,0,866,834,1,0,0,0,866,835,1,0,0,0,866,840,
        1,0,0,0,866,845,1,0,0,0,866,850,1,0,0,0,866,852,1,0,0,0,866,865,
        1,0,0,0,867,63,1,0,0,0,868,869,5,70,0,0,869,871,3,104,52,0,870,872,
        3,104,52,0,871,870,1,0,0,0,871,872,1,0,0,0,872,873,1,0,0,0,873,875,
        3,112,56,0,874,876,3,112,56,0,875,874,1,0,0,0,875,876,1,0,0,0,876,
        65,1,0,0,0,877,878,5,67,0,0,878,879,3,104,52,0,879,880,3,112,56,
        0,880,67,1,0,0,0,881,882,5,71,0,0,882,883,3,104,52,0,883,884,3,104,
        52,0,884,885,3,104,52,0,885,887,5,157,0,0,886,888,5,151,0,0,887,
        886,1,0,0,0,887,888,1,0,0,0,888,889,1,0,0,0,889,890,5,157,0,0,890,
        69,1,0,0,0,891,892,5,72,0,0,892,893,3,104,52,0,893,71,1,0,0,0,894,
        895,5,63,0,0,895,896,3,104,52,0,896,73,1,0,0,0,897,898,5,73,0,0,
        898,899,3,104,52,0,899,75,1,0,0,0,900,901,5,74,0,0,901,902,3,104,
        52,0,902,77,1,0,0,0,903,904,5,75,0,0,904,905,5,157,0,0,905,906,3,
        104,52,0,906,907,3,104,52,0,907,908,3,104,52,0,908,909,3,104,52,
        0,909,911,3,104,52,0,910,912,3,104,52,0,911,910,1,0,0,0,911,912,
        1,0,0,0,912,79,1,0,0,0,913,914,5,76,0,0,914,915,3,104,52,0,915,81,
        1,0,0,0,916,1000,3,84,42,0,917,919,5,10,0,0,918,920,5,163,0,0,919,
        918,1,0,0,0,919,920,1,0,0,0,920,921,1,0,0,0,921,1000,5,157,0,0,922,
        1000,5,79,0,0,923,924,5,64,0,0,924,926,5,150,0,0,925,927,5,150,0,
        0,926,925,1,0,0,0,926,927,1,0,0,0,927,929,1,0,0,0,928,930,5,150,
        0,0,929,928,1,0,0,0,929,930,1,0,0,0,930,932,1,0,0,0,931,933,5,150,
        0,0,932,931,1,0,0,0,932,933,1,0,0,0,933,934,1,0,0,0,934,1000,3,116,
        58,0,935,937,5,77,0,0,936,938,5,163,0,0,937,936,1,0,0,0,937,938,
        1,0,0,0,938,939,1,0,0,0,939,1000,3,116,58,0,940,942,5,61,0,0,941,
        943,5,163,0,0,942,941,1,0,0,0,942,943,1,0,0,0,943,944,1,0,0,0,944,
        1000,3,116,58,0,945,947,5,18,0,0,946,948,5,163,0,0,947,946,1,0,0,
        0,947,948,1,0,0,0,948,949,1,0,0,0,949,1000,5,150,0,0,950,951,5,80,
        0,0,951,952,5,150,0,0,952,953,5,150,0,0,953,957,5,150,0,0,954,955,
        5,150,0,0,955,956,5,150,0,0,956,958,5,150,0,0,957,954,1,0,0,0,957,
        958,1,0,0,0,958,962,1,0,0,0,959,960,5,150,0,0,960,961,5,150,0,0,
        961,963,5,150,0,0,962,959,1,0,0,0,962,963,1,0,0,0,963,967,1,0,0,
        0,964,965,5,150,0,0,965,966,5,150,0,0,966,968,5,150,0,0,967,964,
        1,0,0,0,967,968,1,0,0,0,968,1000,1,0,0,0,969,971,5,21,0,0,970,972,
        5,182,0,0,971,970,1,0,0,0,971,972,1,0,0,0,972,973,1,0,0,0,973,1000,
        5,183,0,0,974,975,5,23,0,0,975,976,5,25,0,0,976,983,3,116,58,0,977,
        984,5,91,0,0,978,980,5,10,0,0,979,981,5,163,0,0,980,979,1,0,0,0,
        980,981,1,0,0,0,981,982,1,0,0,0,982,984,5,157,0,0,983,977,1,0,0,
        0,983,978,1,0,0,0,984,1000,1,0,0,0,985,1000,5,26,0,0,986,987,5,81,
        0,0,987,988,5,82,0,0,988,990,5,150,0,0,989,991,5,150,0,0,990,989,
        1,0,0,0,990,991,1,0,0,0,991,993,1,0,0,0,992,994,5,150,0,0,993,992,
        1,0,0,0,993,994,1,0,0,0,994,996,1,0,0,0,995,997,5,150,0,0,996,995,
        1,0,0,0,996,997,1,0,0,0,997,1000,1,0,0,0,998,1000,5,68,0,0,999,916,
        1,0,0,0,999,917,1,0,0,0,999,922,1,0,0,0,999,923,1,0,0,0,999,935,
        1,0,0,0,999,940,1,0,0,0,999,945,1,0,0,0,999,950,1,0,0,0,999,969,
        1,0,0,0,999,974,1,0,0,0,999,985,1,0,0,0,999,986,1,0,0,0,999,998,
        1,0,0,0,1000,83,1,0,0,0,1001,1002,5,5,0,0,1002,1003,3,104,52,0,1003,
        1004,3,104,52,0,1004,1005,3,104,52,0,1005,1011,3,104,52,0,1006,1007,
        3,104,52,0,1007,1008,3,104,52,0,1008,1009,3,104,52,0,1009,1010,3,
        104,52,0,1010,1012,1,0,0,0,1011,1006,1,0,0,0,1011,1012,1,0,0,0,1012,
        1018,1,0,0,0,1013,1014,3,104,52,0,1014,1015,3,104,52,0,1015,1016,
        3,104,52,0,1016,1017,3,104,52,0,1017,1019,1,0,0,0,1018,1013,1,0,
        0,0,1018,1019,1,0,0,0,1019,1025,1,0,0,0,1020,1021,3,104,52,0,1021,
        1022,3,104,52,0,1022,1023,3,104,52,0,1023,1024,3,104,52,0,1024,1026,
        1,0,0,0,1025,1020,1,0,0,0,1025,1026,1,0,0,0,1026,85,1,0,0,0,1027,
        1060,3,88,44,0,1028,1030,5,10,0,0,1029,1031,5,163,0,0,1030,1029,
        1,0,0,0,1030,1031,1,0,0,0,1031,1032,1,0,0,0,1032,1060,5,157,0,0,
        1033,1034,5,60,0,0,1034,1035,3,116,58,0,1035,1036,3,116,58,0,1036,
        1037,3,116,58,0,1037,1038,3,116,58,0,1038,1039,3,116,58,0,1039,1060,
        1,0,0,0,1040,1042,5,61,0,0,1041,1043,5,163,0,0,1042,1041,1,0,0,0,
        1042,1043,1,0,0,0,1043,1044,1,0,0,0,1044,1060,3,116,58,0,1045,1047,
        5,18,0,0,1046,1048,5,163,0,0,1047,1046,1,0,0,0,1047,1048,1,0,0,0,
        1048,1049,1,0,0,0,1049,1060,5,150,0,0,1050,1052,5,21,0,0,1051,1053,
        5,182,0,0,1052,1051,1,0,0,0,1052,1053,1,0,0,0,1053,1054,1,0,0,0,
        1054,1060,5,183,0,0,1055,1056,5,23,0,0,1056,1057,5,25,0,0,1057,1060,
        3,116,58,0,1058,1060,5,26,0,0,1059,1027,1,0,0,0,1059,1028,1,0,0,
        0,1059,1033,1,0,0,0,1059,1040,1,0,0,0,1059,1045,1,0,0,0,1059,1050,
        1,0,0,0,1059,1055,1,0,0,0,1059,1058,1,0,0,0,1060,87,1,0,0,0,1061,
        1062,5,5,0,0,1062,1063,3,104,52,0,1063,1064,3,104,52,0,1064,1065,
        3,104,52,0,1065,1066,3,104,52,0,1066,1067,3,104,52,0,1067,1068,3,
        104,52,0,1068,1070,3,112,56,0,1069,1071,3,112,56,0,1070,1069,1,0,
        0,0,1070,1071,1,0,0,0,1071,89,1,0,0,0,1072,1107,3,92,46,0,1073,1075,
        5,10,0,0,1074,1076,5,163,0,0,1075,1074,1,0,0,0,1075,1076,1,0,0,0,
        1076,1077,1,0,0,0,1077,1107,5,157,0,0,1078,1079,5,60,0,0,1079,1080,
        3,116,58,0,1080,1081,3,116,58,0,1081,1082,3,116,58,0,1082,1083,3,
        116,58,0,1083,1084,3,116,58,0,1084,1085,3,116,58,0,1085,1086,3,116,
        58,0,1086,1107,1,0,0,0,1087,1089,5,61,0,0,1088,1090,5,163,0,0,1089,
        1088,1,0,0,0,1089,1090,1,0,0,0,1090,1091,1,0,0,0,1091,1107,3,116,
        58,0,1092,1094,5,18,0,0,1093,1095,5,163,0,0,1094,1093,1,0,0,0,1094,
        1095,1,0,0,0,1095,1096,1,0,0,0,1096,1107,5,150,0,0,1097,1099,5,21,
        0,0,1098,1100,5,182,0,0,1099,1098,1,0,0,0,1099,1100,1,0,0,0,1100,
        1101,1,0,0,0,1101,1107,5,183,0,0,1102,1103,5,23,0,0,1103,1104,5,
        25,0,0,1104,1107,3,116,58,0,1105,1107,5,26,0,0,1106,1072,1,0,0,0,
        1106,1073,1,0,0,0,1106,1078,1,0,0,0,1106,1087,1,0,0,0,1106,1092,
        1,0,0,0,1106,1097,1,0,0,0,1106,1102,1,0,0,0,1106,1105,1,0,0,0,1107,
        91,1,0,0,0,1108,1109,5,5,0,0,1109,1110,3,104,52,0,1110,1111,3,104,
        52,0,1111,1112,3,104,52,0,1112,1113,3,104,52,0,1113,1114,3,104,52,
        0,1114,1115,3,104,52,0,1115,1116,3,104,52,0,1116,1117,3,104,52,0,
        1117,1118,3,112,56,0,1118,1119,3,112,56,0,1119,93,1,0,0,0,1120,1173,
        3,96,48,0,1121,1123,5,10,0,0,1122,1124,5,163,0,0,1123,1122,1,0,0,
        0,1123,1124,1,0,0,0,1124,1125,1,0,0,0,1125,1173,5,157,0,0,1126,1128,
        5,86,0,0,1127,1129,5,163,0,0,1128,1127,1,0,0,0,1128,1129,1,0,0,0,
        1129,1130,1,0,0,0,1130,1173,5,157,0,0,1131,1132,5,64,0,0,1132,1133,
        5,150,0,0,1133,1134,5,150,0,0,1134,1173,3,116,58,0,1135,1137,5,77,
        0,0,1136,1138,5,163,0,0,1137,1136,1,0,0,0,1137,1138,1,0,0,0,1138,
        1139,1,0,0,0,1139,1173,3,116,58,0,1140,1142,5,61,0,0,1141,1143,5,
        163,0,0,1142,1141,1,0,0,0,1142,1143,1,0,0,0,1143,1144,1,0,0,0,1144,
        1173,3,116,58,0,1145,1147,5,18,0,0,1146,1148,5,163,0,0,1147,1146,
        1,0,0,0,1147,1148,1,0,0,0,1148,1149,1,0,0,0,1149,1173,5,150,0,0,
        1150,1152,5,21,0,0,1151,1153,5,182,0,0,1152,1151,1,0,0,0,1152,1153,
        1,0,0,0,1153,1154,1,0,0,0,1154,1173,5,183,0,0,1155,1156,5,23,0,0,
        1156,1157,5,25,0,0,1157,1164,3,116,58,0,1158,1165,5,91,0,0,1159,
        1161,5,10,0,0,1160,1162,5,163,0,0,1161,1160,1,0,0,0,1161,1162,1,
        0,0,0,1162,1163,1,0,0,0,1163,1165,5,157,0,0,1164,1158,1,0,0,0,1164,
        1159,1,0,0,0,1165,1173,1,0,0,0,1166,1173,5,26,0,0,1167,1168,5,81,
        0,0,1168,1169,7,0,0,0,1169,1170,5,150,0,0,1170,1173,5,150,0,0,1171,
        1173,5,68,0,0,1172,1120,1,0,0,0,1172,1121,1,0,0,0,1172,1126,1,0,
        0,0,1172,1131,1,0,0,0,1172,1135,1,0,0,0,1172,1140,1,0,0,0,1172,1145,
        1,0,0,0,1172,1150,1,0,0,0,1172,1155,1,0,0,0,1172,1166,1,0,0,0,1172,
        1167,1,0,0,0,1172,1171,1,0,0,0,1173,95,1,0,0,0,1174,1175,5,5,0,0,
        1175,1176,3,104,52,0,1176,1177,3,104,52,0,1177,1178,3,104,52,0,1178,
        1179,3,104,52,0,1179,1180,3,104,52,0,1180,1181,3,104,52,0,1181,1182,
        3,104,52,0,1182,1183,3,104,52,0,1183,1184,3,104,52,0,1184,1185,3,
        104,52,0,1185,1187,3,104,52,0,1186,1188,3,104,52,0,1187,1186,1,0,
        0,0,1187,1188,1,0,0,0,1188,97,1,0,0,0,1189,1190,5,87,0,0,1190,1194,
        5,48,0,0,1191,1193,3,100,50,0,1192,1191,1,0,0,0,1193,1196,1,0,0,
        0,1194,1192,1,0,0,0,1194,1195,1,0,0,0,1195,1197,1,0,0,0,1196,1194,
        1,0,0,0,1197,1198,5,2,0,0,1198,99,1,0,0,0,1199,1203,5,53,0,0,1200,
        1202,3,102,51,0,1201,1200,1,0,0,0,1202,1205,1,0,0,0,1203,1201,1,
        0,0,0,1203,1204,1,0,0,0,1204,1206,1,0,0,0,1205,1203,1,0,0,0,1206,
        1210,5,2,0,0,1207,1210,5,35,0,0,1208,1210,5,51,0,0,1209,1199,1,0,
        0,0,1209,1207,1,0,0,0,1209,1208,1,0,0,0,1210,101,1,0,0,0,1211,1213,
        5,88,0,0,1212,1214,5,163,0,0,1213,1212,1,0,0,0,1213,1214,1,0,0,0,
        1214,1215,1,0,0,0,1215,1227,3,104,52,0,1216,1218,5,89,0,0,1217,1219,
        5,163,0,0,1218,1217,1,0,0,0,1218,1219,1,0,0,0,1219,1220,1,0,0,0,
        1220,1227,3,116,58,0,1221,1223,5,55,0,0,1222,1224,5,163,0,0,1223,
        1222,1,0,0,0,1223,1224,1,0,0,0,1224,1225,1,0,0,0,1225,1227,3,116,
        58,0,1226,1211,1,0,0,0,1226,1216,1,0,0,0,1226,1221,1,0,0,0,1227,
        103,1,0,0,0,1228,1229,5,160,0,0,1229,1230,3,106,53,0,1230,1231,5,
        161,0,0,1231,105,1,0,0,0,1232,1237,3,108,54,0,1233,1234,5,145,0,
        0,1234,1236,3,108,54,0,1235,1233,1,0,0,0,1236,1239,1,0,0,0,1237,
        1235,1,0,0,0,1237,1238,1,0,0,0,1238,107,1,0,0,0,1239,1237,1,0,0,
        0,1240,1245,3,110,55,0,1241,1242,5,146,0,0,1242,1244,3,110,55,0,
        1243,1241,1,0,0,0,1244,1247,1,0,0,0,1245,1243,1,0,0,0,1245,1246,
        1,0,0,0,1246,109,1,0,0,0,1247,1245,1,0,0,0,1248,1249,6,55,-1,0,1249,
        1250,5,160,0,0,1250,1251,3,106,53,0,1251,1252,5,161,0,0,1252,1403,
        1,0,0,0,1253,1403,5,91,0,0,1254,1255,5,93,0,0,1255,1256,7,1,0,0,
        1256,1257,7,2,0,0,1257,1403,7,1,0,0,1258,1260,5,94,0,0,1259,1261,
        5,175,0,0,1260,1259,1,0,0,0,1260,1261,1,0,0,0,1261,1262,1,0,0,0,
        1262,1263,5,176,0,0,1263,1264,5,177,0,0,1264,1403,3,114,57,0,1265,
        1266,5,95,0,0,1266,1403,3,110,55,30,1267,1268,5,96,0,0,1268,1403,
        3,110,55,29,1269,1270,5,97,0,0,1270,1403,3,110,55,28,1271,1279,5,
        98,0,0,1272,1280,5,158,0,0,1273,1276,5,157,0,0,1274,1275,5,162,0,
        0,1275,1277,5,157,0,0,1276,1274,1,0,0,0,1276,1277,1,0,0,0,1277,1280,
        1,0,0,0,1278,1280,5,169,0,0,1279,1272,1,0,0,0,1279,1273,1,0,0,0,
        1279,1278,1,0,0,0,1280,1403,1,0,0,0,1281,1282,5,99,0,0,1282,1283,
        3,114,57,0,1283,1284,3,114,57,0,1284,1285,3,114,57,0,1285,1286,3,
        114,57,0,1286,1287,3,114,57,0,1287,1288,3,114,57,0,1288,1403,1,0,
        0,0,1289,1403,5,100,0,0,1290,1291,5,101,0,0,1291,1403,5,150,0,0,
        1292,1403,5,102,0,0,1293,1306,5,103,0,0,1294,1307,5,158,0,0,1295,
        1298,5,157,0,0,1296,1297,5,162,0,0,1297,1299,5,157,0,0,1298,1296,
        1,0,0,0,1298,1299,1,0,0,0,1299,1307,1,0,0,0,1300,1303,5,153,0,0,
        1301,1302,5,162,0,0,1302,1304,5,153,0,0,1303,1301,1,0,0,0,1303,1304,
        1,0,0,0,1304,1307,1,0,0,0,1305,1307,5,169,0,0,1306,1294,1,0,0,0,
        1306,1295,1,0,0,0,1306,1300,1,0,0,0,1306,1305,1,0,0,0,1307,1403,
        1,0,0,0,1308,1403,5,104,0,0,1309,1310,5,147,0,0,1310,1403,3,110,
        55,20,1311,1312,5,105,0,0,1312,1313,5,160,0,0,1313,1315,3,114,57,
        0,1314,1316,5,148,0,0,1315,1314,1,0,0,0,1315,1316,1,0,0,0,1316,1317,
        1,0,0,0,1317,1319,3,114,57,0,1318,1320,5,148,0,0,1319,1318,1,0,0,
        0,1319,1320,1,0,0,0,1320,1321,1,0,0,0,1321,1322,3,114,57,0,1322,
        1323,5,161,0,0,1323,1324,5,106,0,0,1324,1325,3,114,57,0,1325,1403,
        1,0,0,0,1326,1327,5,105,0,0,1327,1328,5,160,0,0,1328,1330,5,143,
        0,0,1329,1331,5,163,0,0,1330,1329,1,0,0,0,1330,1331,1,0,0,0,1331,
        1332,1,0,0,0,1332,1334,3,104,52,0,1333,1335,5,148,0,0,1334,1333,
        1,0,0,0,1334,1335,1,0,0,0,1335,1341,1,0,0,0,1336,1338,5,144,0,0,
        1337,1339,5,163,0,0,1338,1337,1,0,0,0,1338,1339,1,0,0,0,1339,1340,
        1,0,0,0,1340,1342,3,104,52,0,1341,1336,1,0,0,0,1341,1342,1,0,0,0,
        1342,1343,1,0,0,0,1343,1344,5,161,0,0,1344,1345,5,106,0,0,1345,1346,
        3,114,57,0,1346,1403,1,0,0,0,1347,1403,5,107,0,0,1348,1403,5,108,
        0,0,1349,1357,5,109,0,0,1350,1358,5,159,0,0,1351,1354,5,150,0,0,
        1352,1353,5,162,0,0,1353,1355,5,150,0,0,1354,1352,1,0,0,0,1354,1355,
        1,0,0,0,1355,1358,1,0,0,0,1356,1358,5,169,0,0,1357,1350,1,0,0,0,
        1357,1351,1,0,0,0,1357,1356,1,0,0,0,1358,1403,1,0,0,0,1359,1367,
        5,110,0,0,1360,1368,5,158,0,0,1361,1364,5,157,0,0,1362,1363,5,162,
        0,0,1363,1365,5,157,0,0,1364,1362,1,0,0,0,1364,1365,1,0,0,0,1365,
        1368,1,0,0,0,1366,1368,5,169,0,0,1367,1360,1,0,0,0,1367,1361,1,0,
        0,0,1367,1366,1,0,0,0,1368,1403,1,0,0,0,1369,1382,5,112,0,0,1370,
        1383,5,158,0,0,1371,1374,5,157,0,0,1372,1373,5,162,0,0,1373,1375,
        5,157,0,0,1374,1372,1,0,0,0,1374,1375,1,0,0,0,1375,1383,1,0,0,0,
        1376,1379,5,153,0,0,1377,1378,5,162,0,0,1378,1380,5,153,0,0,1379,
        1377,1,0,0,0,1379,1380,1,0,0,0,1380,1383,1,0,0,0,1381,1383,5,169,
        0,0,1382,1370,1,0,0,0,1382,1371,1,0,0,0,1382,1376,1,0,0,0,1382,1381,
        1,0,0,0,1383,1403,1,0,0,0,1384,1385,5,113,0,0,1385,1386,3,114,57,
        0,1386,1387,3,114,57,0,1387,1388,3,114,57,0,1388,1389,3,114,57,0,
        1389,1390,3,114,57,0,1390,1391,3,114,57,0,1391,1403,1,0,0,0,1392,
        1403,5,114,0,0,1393,1403,5,115,0,0,1394,1403,5,116,0,0,1395,1403,
        5,117,0,0,1396,1403,5,118,0,0,1397,1403,5,119,0,0,1398,1403,5,120,
        0,0,1399,1403,5,121,0,0,1400,1403,5,122,0,0,1401,1403,5,123,0,0,
        1402,1248,1,0,0,0,1402,1253,1,0,0,0,1402,1254,1,0,0,0,1402,1258,
        1,0,0,0,1402,1265,1,0,0,0,1402,1267,1,0,0,0,1402,1269,1,0,0,0,1402,
        1271,1,0,0,0,1402,1281,1,0,0,0,1402,1289,1,0,0,0,1402,1290,1,0,0,
        0,1402,1292,1,0,0,0,1402,1293,1,0,0,0,1402,1308,1,0,0,0,1402,1309,
        1,0,0,0,1402,1311,1,0,0,0,1402,1326,1,0,0,0,1402,1347,1,0,0,0,1402,
        1348,1,0,0,0,1402,1349,1,0,0,0,1402,1359,1,0,0,0,1402,1369,1,0,0,
        0,1402,1384,1,0,0,0,1402,1392,1,0,0,0,1402,1393,1,0,0,0,1402,1394,
        1,0,0,0,1402,1395,1,0,0,0,1402,1396,1,0,0,0,1402,1397,1,0,0,0,1402,
        1398,1,0,0,0,1402,1399,1,0,0,0,1402,1400,1,0,0,0,1402,1401,1,0,0,
        0,1403,1412,1,0,0,0,1404,1405,10,33,0,0,1405,1406,5,92,0,0,1406,
        1411,3,114,57,0,1407,1408,10,13,0,0,1408,1409,5,111,0,0,1409,1411,
        3,114,57,0,1410,1404,1,0,0,0,1410,1407,1,0,0,0,1411,1414,1,0,0,0,
        1412,1410,1,0,0,0,1412,1413,1,0,0,0,1413,111,1,0,0,0,1414,1412,1,
        0,0,0,1415,1416,7,3,0,0,1416,113,1,0,0,0,1417,1418,7,4,0,0,1418,
        115,1,0,0,0,1419,1420,7,3,0,0,1420,117,1,0,0,0,1421,1422,7,4,0,0,
        1422,119,1,0,0,0,1423,1434,5,90,0,0,1424,1432,5,188,0,0,1425,1427,
        5,191,0,0,1426,1425,1,0,0,0,1427,1430,1,0,0,0,1428,1426,1,0,0,0,
        1428,1429,1,0,0,0,1429,1433,1,0,0,0,1430,1428,1,0,0,0,1431,1433,
        5,192,0,0,1432,1428,1,0,0,0,1432,1431,1,0,0,0,1433,1435,1,0,0,0,
        1434,1424,1,0,0,0,1434,1435,1,0,0,0,1435,1436,1,0,0,0,1436,1440,
        5,189,0,0,1437,1439,5,191,0,0,1438,1437,1,0,0,0,1439,1442,1,0,0,
        0,1440,1438,1,0,0,0,1440,1441,1,0,0,0,1441,1443,1,0,0,0,1442,1440,
        1,0,0,0,1443,1444,5,190,0,0,1444,121,1,0,0,0,1445,1446,5,124,0,0,
        1446,1447,3,124,62,0,1447,1448,3,104,52,0,1448,123,1,0,0,0,1449,
        1450,7,5,0,0,1450,1451,3,126,63,0,1451,1452,5,194,0,0,1452,1456,
        1,0,0,0,1453,1454,5,127,0,0,1454,1456,3,134,67,0,1455,1449,1,0,0,
        0,1455,1453,1,0,0,0,1456,125,1,0,0,0,1457,1460,5,204,0,0,1458,1459,
        5,195,0,0,1459,1461,3,128,64,0,1460,1458,1,0,0,0,1460,1461,1,0,0,
        0,1461,127,1,0,0,0,1462,1465,3,130,65,0,1463,1464,7,6,0,0,1464,1466,
        3,128,64,0,1465,1463,1,0,0,0,1465,1466,1,0,0,0,1466,129,1,0,0,0,
        1467,1475,5,204,0,0,1468,1475,3,132,66,0,1469,1475,5,202,0,0,1470,
        1475,5,203,0,0,1471,1475,5,228,0,0,1472,1475,5,227,0,0,1473,1475,
        5,229,0,0,1474,1467,1,0,0,0,1474,1468,1,0,0,0,1474,1469,1,0,0,0,
        1474,1470,1,0,0,0,1474,1471,1,0,0,0,1474,1472,1,0,0,0,1474,1473,
        1,0,0,0,1475,131,1,0,0,0,1476,1477,5,205,0,0,1477,1478,5,231,0,0,
        1478,1479,3,130,65,0,1479,1480,5,194,0,0,1480,1596,1,0,0,0,1481,
        1482,5,206,0,0,1482,1483,5,231,0,0,1483,1484,3,130,65,0,1484,1485,
        5,194,0,0,1485,1596,1,0,0,0,1486,1487,5,208,0,0,1487,1488,5,231,
        0,0,1488,1489,3,130,65,0,1489,1490,5,194,0,0,1490,1596,1,0,0,0,1491,
        1492,5,209,0,0,1492,1493,5,231,0,0,1493,1494,3,130,65,0,1494,1495,
        5,194,0,0,1495,1596,1,0,0,0,1496,1497,5,210,0,0,1497,1498,5,231,
        0,0,1498,1499,3,130,65,0,1499,1500,5,194,0,0,1500,1596,1,0,0,0,1501,
        1502,5,211,0,0,1502,1503,5,231,0,0,1503,1504,3,130,65,0,1504,1505,
        5,194,0,0,1505,1596,1,0,0,0,1506,1507,5,212,0,0,1507,1508,5,231,
        0,0,1508,1509,3,130,65,0,1509,1510,5,194,0,0,1510,1596,1,0,0,0,1511,
        1512,5,213,0,0,1512,1513,5,231,0,0,1513,1514,3,130,65,0,1514,1515,
        5,194,0,0,1515,1596,1,0,0,0,1516,1517,5,214,0,0,1517,1518,5,231,
        0,0,1518,1519,3,130,65,0,1519,1520,5,194,0,0,1520,1596,1,0,0,0,1521,
        1522,5,215,0,0,1522,1523,5,231,0,0,1523,1524,3,130,65,0,1524,1525,
        5,194,0,0,1525,1596,1,0,0,0,1526,1527,5,216,0,0,1527,1528,5,231,
        0,0,1528,1529,3,130,65,0,1529,1530,5,194,0,0,1530,1596,1,0,0,0,1531,
        1532,5,217,0,0,1532,1533,5,231,0,0,1533,1538,3,130,65,0,1534,1535,
        5,201,0,0,1535,1537,3,130,65,0,1536,1534,1,0,0,0,1537,1540,1,0,0,
        0,1538,1536,1,0,0,0,1538,1539,1,0,0,0,1539,1541,1,0,0,0,1540,1538,
        1,0,0,0,1541,1542,5,194,0,0,1542,1596,1,0,0,0,1543,1544,5,218,0,
        0,1544,1545,5,231,0,0,1545,1546,3,130,65,0,1546,1547,5,194,0,0,1547,
        1596,1,0,0,0,1548,1549,5,219,0,0,1549,1550,5,231,0,0,1550,1555,3,
        130,65,0,1551,1552,5,201,0,0,1552,1554,3,130,65,0,1553,1551,1,0,
        0,0,1554,1557,1,0,0,0,1555,1553,1,0,0,0,1555,1556,1,0,0,0,1556,1558,
        1,0,0,0,1557,1555,1,0,0,0,1558,1559,5,194,0,0,1559,1596,1,0,0,0,
        1560,1561,5,220,0,0,1561,1562,5,231,0,0,1562,1563,3,130,65,0,1563,
        1564,5,201,0,0,1564,1565,3,130,65,0,1565,1566,5,194,0,0,1566,1596,
        1,0,0,0,1567,1568,5,221,0,0,1568,1569,5,231,0,0,1569,1570,3,130,
        65,0,1570,1571,5,194,0,0,1571,1596,1,0,0,0,1572,1573,5,222,0,0,1573,
        1574,5,231,0,0,1574,1596,5,194,0,0,1575,1576,5,223,0,0,1576,1577,
        5,231,0,0,1577,1578,3,130,65,0,1578,1579,5,194,0,0,1579,1596,1,0,
        0,0,1580,1581,5,224,0,0,1581,1582,5,231,0,0,1582,1583,3,130,65,0,
        1583,1584,5,194,0,0,1584,1596,1,0,0,0,1585,1586,5,225,0,0,1586,1587,
        5,231,0,0,1587,1588,3,130,65,0,1588,1589,5,194,0,0,1589,1596,1,0,
        0,0,1590,1591,5,226,0,0,1591,1592,5,231,0,0,1592,1593,3,130,65,0,
        1593,1594,5,194,0,0,1594,1596,1,0,0,0,1595,1476,1,0,0,0,1595,1481,
        1,0,0,0,1595,1486,1,0,0,0,1595,1491,1,0,0,0,1595,1496,1,0,0,0,1595,
        1501,1,0,0,0,1595,1506,1,0,0,0,1595,1511,1,0,0,0,1595,1516,1,0,0,
        0,1595,1521,1,0,0,0,1595,1526,1,0,0,0,1595,1531,1,0,0,0,1595,1543,
        1,0,0,0,1595,1548,1,0,0,0,1595,1560,1,0,0,0,1595,1567,1,0,0,0,1595,
        1572,1,0,0,0,1595,1575,1,0,0,0,1595,1580,1,0,0,0,1595,1585,1,0,0,
        0,1595,1590,1,0,0,0,1596,133,1,0,0,0,1597,1598,7,7,0,0,1598,1599,
        5,233,0,0,1599,1600,5,242,0,0,1600,1601,5,234,0,0,1601,135,1,0,0,
        0,1602,1603,5,128,0,0,1603,1604,5,227,0,0,1604,1605,5,195,0,0,1605,
        1606,3,138,69,0,1606,1607,5,194,0,0,1607,137,1,0,0,0,1608,1611,3,
        130,65,0,1609,1610,7,6,0,0,1610,1612,3,138,69,0,1611,1609,1,0,0,
        0,1611,1612,1,0,0,0,1612,139,1,0,0,0,1613,1615,5,129,0,0,1614,1616,
        7,8,0,0,1615,1614,1,0,0,0,1615,1616,1,0,0,0,1616,1617,1,0,0,0,1617,
        1618,5,130,0,0,1618,1619,5,163,0,0,1619,1620,7,9,0,0,1620,1621,5,
        163,0,0,1621,1627,3,104,52,0,1622,1623,5,130,0,0,1623,1624,5,163,
        0,0,1624,1625,7,9,0,0,1625,1626,5,163,0,0,1626,1628,3,104,52,0,1627,
        1622,1,0,0,0,1627,1628,1,0,0,0,1628,1629,1,0,0,0,1629,1630,5,2,0,
        0,1630,141,1,0,0,0,1631,1635,5,132,0,0,1632,1634,3,144,72,0,1633,
        1632,1,0,0,0,1634,1637,1,0,0,0,1635,1633,1,0,0,0,1635,1636,1,0,0,
        0,1636,1638,1,0,0,0,1637,1635,1,0,0,0,1638,1639,5,2,0,0,1639,143,
        1,0,0,0,1640,1641,5,85,0,0,1641,1642,5,157,0,0,1642,1643,5,157,0,
        0,1643,1644,5,157,0,0,1644,1645,3,116,58,0,1645,1650,3,116,58,0,
        1646,1647,5,133,0,0,1647,1648,3,116,58,0,1648,1649,3,116,58,0,1649,
        1651,1,0,0,0,1650,1646,1,0,0,0,1650,1651,1,0,0,0,1651,1696,1,0,0,
        0,1652,1653,5,95,0,0,1653,1654,5,157,0,0,1654,1655,5,157,0,0,1655,
        1656,3,116,58,0,1656,1657,3,116,58,0,1657,1696,1,0,0,0,1658,1659,
        7,10,0,0,1659,1660,5,157,0,0,1660,1661,5,157,0,0,1661,1662,5,157,
        0,0,1662,1665,5,157,0,0,1663,1664,5,134,0,0,1664,1666,5,150,0,0,
        1665,1663,1,0,0,0,1665,1666,1,0,0,0,1666,1667,1,0,0,0,1667,1668,
        3,116,58,0,1668,1669,5,150,0,0,1669,1670,3,116,58,0,1670,1696,1,
        0,0,0,1671,1672,5,135,0,0,1672,1673,5,158,0,0,1673,1674,5,158,0,
        0,1674,1675,3,116,58,0,1675,1676,3,116,58,0,1676,1696,1,0,0,0,1677,
        1678,5,137,0,0,1678,1679,5,157,0,0,1679,1680,5,157,0,0,1680,1681,
        3,116,58,0,1681,1682,3,116,58,0,1682,1683,3,116,58,0,1683,1684,3,
        116,58,0,1684,1696,1,0,0,0,1685,1686,5,138,0,0,1686,1687,5,157,0,
        0,1687,1688,3,116,58,0,1688,1689,3,116,58,0,1689,1690,3,116,58,0,
        1690,1691,3,116,58,0,1691,1696,1,0,0,0,1692,1693,7,11,0,0,1693,1696,
        5,157,0,0,1694,1696,5,140,0,0,1695,1640,1,0,0,0,1695,1652,1,0,0,
        0,1695,1658,1,0,0,0,1695,1671,1,0,0,0,1695,1677,1,0,0,0,1695,1685,
        1,0,0,0,1695,1692,1,0,0,0,1695,1694,1,0,0,0,1696,145,1,0,0,0,1697,
        1698,5,141,0,0,1698,1699,5,249,0,0,1699,1700,5,246,0,0,1700,1719,
        5,244,0,0,1701,1703,5,247,0,0,1702,1701,1,0,0,0,1703,1706,1,0,0,
        0,1704,1702,1,0,0,0,1704,1705,1,0,0,0,1705,1720,1,0,0,0,1706,1704,
        1,0,0,0,1707,1709,5,248,0,0,1708,1707,1,0,0,0,1709,1712,1,0,0,0,
        1710,1708,1,0,0,0,1710,1711,1,0,0,0,1711,1720,1,0,0,0,1712,1710,
        1,0,0,0,1713,1715,5,250,0,0,1714,1713,1,0,0,0,1715,1718,1,0,0,0,
        1716,1714,1,0,0,0,1716,1717,1,0,0,0,1717,1720,1,0,0,0,1718,1716,
        1,0,0,0,1719,1704,1,0,0,0,1719,1710,1,0,0,0,1719,1716,1,0,0,0,1720,
        1721,1,0,0,0,1721,1722,5,245,0,0,1722,1723,5,142,0,0,1723,1729,5,
        253,0,0,1724,1728,3,136,68,0,1725,1728,3,28,14,0,1726,1728,3,2,1,
        0,1727,1724,1,0,0,0,1727,1725,1,0,0,0,1727,1726,1,0,0,0,1728,1731,
        1,0,0,0,1729,1727,1,0,0,0,1729,1730,1,0,0,0,1730,1732,1,0,0,0,1731,
        1729,1,0,0,0,1732,1733,5,2,0,0,1733,1734,5,142,0,0,1734,1735,5,253,
        0,0,1735,147,1,0,0,0,1736,1737,5,141,0,0,1737,1738,5,249,0,0,1738,
        1739,5,246,0,0,1739,1758,5,244,0,0,1740,1742,5,247,0,0,1741,1740,
        1,0,0,0,1742,1745,1,0,0,0,1743,1741,1,0,0,0,1743,1744,1,0,0,0,1744,
        1759,1,0,0,0,1745,1743,1,0,0,0,1746,1748,5,248,0,0,1747,1746,1,0,
        0,0,1748,1751,1,0,0,0,1749,1747,1,0,0,0,1749,1750,1,0,0,0,1750,1759,
        1,0,0,0,1751,1749,1,0,0,0,1752,1754,5,250,0,0,1753,1752,1,0,0,0,
        1754,1757,1,0,0,0,1755,1753,1,0,0,0,1755,1756,1,0,0,0,1756,1759,
        1,0,0,0,1757,1755,1,0,0,0,1758,1743,1,0,0,0,1758,1749,1,0,0,0,1758,
        1755,1,0,0,0,1759,1760,1,0,0,0,1760,1761,5,245,0,0,1761,1762,5,142,
        0,0,1762,1768,5,253,0,0,1763,1767,3,136,68,0,1764,1767,3,36,18,0,
        1765,1767,3,4,2,0,1766,1763,1,0,0,0,1766,1764,1,0,0,0,1766,1765,
        1,0,0,0,1767,1770,1,0,0,0,1768,1766,1,0,0,0,1768,1769,1,0,0,0,1769,
        1771,1,0,0,0,1770,1768,1,0,0,0,1771,1772,5,2,0,0,1772,1773,5,142,
        0,0,1773,1774,5,253,0,0,1774,149,1,0,0,0,1775,1776,5,141,0,0,1776,
        1777,5,249,0,0,1777,1778,5,246,0,0,1778,1797,5,244,0,0,1779,1781,
        5,247,0,0,1780,1779,1,0,0,0,1781,1784,1,0,0,0,1782,1780,1,0,0,0,
        1782,1783,1,0,0,0,1783,1798,1,0,0,0,1784,1782,1,0,0,0,1785,1787,
        5,248,0,0,1786,1785,1,0,0,0,1787,1790,1,0,0,0,1788,1786,1,0,0,0,
        1788,1789,1,0,0,0,1789,1798,1,0,0,0,1790,1788,1,0,0,0,1791,1793,
        5,250,0,0,1792,1791,1,0,0,0,1793,1796,1,0,0,0,1794,1792,1,0,0,0,
        1794,1795,1,0,0,0,1795,1798,1,0,0,0,1796,1794,1,0,0,0,1797,1782,
        1,0,0,0,1797,1788,1,0,0,0,1797,1794,1,0,0,0,1798,1799,1,0,0,0,1799,
        1800,5,245,0,0,1800,1801,5,142,0,0,1801,1807,5,253,0,0,1802,1806,
        3,136,68,0,1803,1806,3,50,25,0,1804,1806,3,10,5,0,1805,1802,1,0,
        0,0,1805,1803,1,0,0,0,1805,1804,1,0,0,0,1806,1809,1,0,0,0,1807,1805,
        1,0,0,0,1807,1808,1,0,0,0,1808,1810,1,0,0,0,1809,1807,1,0,0,0,1810,
        1811,5,2,0,0,1811,1812,5,142,0,0,1812,1813,5,253,0,0,1813,151,1,
        0,0,0,1814,1815,5,141,0,0,1815,1816,5,249,0,0,1816,1817,5,246,0,
        0,1817,1836,5,244,0,0,1818,1820,5,247,0,0,1819,1818,1,0,0,0,1820,
        1823,1,0,0,0,1821,1819,1,0,0,0,1821,1822,1,0,0,0,1822,1837,1,0,0,
        0,1823,1821,1,0,0,0,1824,1826,5,248,0,0,1825,1824,1,0,0,0,1826,1829,
        1,0,0,0,1827,1825,1,0,0,0,1827,1828,1,0,0,0,1828,1837,1,0,0,0,1829,
        1827,1,0,0,0,1830,1832,5,250,0,0,1831,1830,1,0,0,0,1832,1835,1,0,
        0,0,1833,1831,1,0,0,0,1833,1834,1,0,0,0,1834,1837,1,0,0,0,1835,1833,
        1,0,0,0,1836,1821,1,0,0,0,1836,1827,1,0,0,0,1836,1833,1,0,0,0,1837,
        1838,1,0,0,0,1838,1839,5,245,0,0,1839,1840,5,142,0,0,1840,1846,5,
        253,0,0,1841,1845,3,136,68,0,1842,1845,3,54,27,0,1843,1845,3,12,
        6,0,1844,1841,1,0,0,0,1844,1842,1,0,0,0,1844,1843,1,0,0,0,1845,1848,
        1,0,0,0,1846,1844,1,0,0,0,1846,1847,1,0,0,0,1847,1849,1,0,0,0,1848,
        1846,1,0,0,0,1849,1850,5,2,0,0,1850,1851,5,142,0,0,1851,1852,5,253,
        0,0,1852,153,1,0,0,0,1853,1854,5,141,0,0,1854,1855,5,249,0,0,1855,
        1856,5,246,0,0,1856,1875,5,244,0,0,1857,1859,5,247,0,0,1858,1857,
        1,0,0,0,1859,1862,1,0,0,0,1860,1858,1,0,0,0,1860,1861,1,0,0,0,1861,
        1876,1,0,0,0,1862,1860,1,0,0,0,1863,1865,5,248,0,0,1864,1863,1,0,
        0,0,1865,1868,1,0,0,0,1866,1864,1,0,0,0,1866,1867,1,0,0,0,1867,1876,
        1,0,0,0,1868,1866,1,0,0,0,1869,1871,5,250,0,0,1870,1869,1,0,0,0,
        1871,1874,1,0,0,0,1872,1870,1,0,0,0,1872,1873,1,0,0,0,1873,1876,
        1,0,0,0,1874,1872,1,0,0,0,1875,1860,1,0,0,0,1875,1866,1,0,0,0,1875,
        1872,1,0,0,0,1876,1877,1,0,0,0,1877,1878,5,245,0,0,1878,1879,5,142,
        0,0,1879,1885,5,253,0,0,1880,1884,3,136,68,0,1881,1884,3,58,29,0,
        1882,1884,3,14,7,0,1883,1880,1,0,0,0,1883,1881,1,0,0,0,1883,1882,
        1,0,0,0,1884,1887,1,0,0,0,1885,1883,1,0,0,0,1885,1886,1,0,0,0,1886,
        1888,1,0,0,0,1887,1885,1,0,0,0,1888,1889,5,2,0,0,1889,1890,5,142,
        0,0,1890,1891,5,253,0,0,1891,155,1,0,0,0,1892,1893,5,141,0,0,1893,
        1894,5,249,0,0,1894,1895,5,246,0,0,1895,1914,5,244,0,0,1896,1898,
        5,247,0,0,1897,1896,1,0,0,0,1898,1901,1,0,0,0,1899,1897,1,0,0,0,
        1899,1900,1,0,0,0,1900,1915,1,0,0,0,1901,1899,1,0,0,0,1902,1904,
        5,248,0,0,1903,1902,1,0,0,0,1904,1907,1,0,0,0,1905,1903,1,0,0,0,
        1905,1906,1,0,0,0,1906,1915,1,0,0,0,1907,1905,1,0,0,0,1908,1910,
        5,250,0,0,1909,1908,1,0,0,0,1910,1913,1,0,0,0,1911,1909,1,0,0,0,
        1911,1912,1,0,0,0,1912,1915,1,0,0,0,1913,1911,1,0,0,0,1914,1899,
        1,0,0,0,1914,1905,1,0,0,0,1914,1911,1,0,0,0,1915,1916,1,0,0,0,1916,
        1917,5,245,0,0,1917,1918,5,142,0,0,1918,1924,5,253,0,0,1919,1923,
        3,136,68,0,1920,1923,3,40,20,0,1921,1923,3,6,3,0,1922,1919,1,0,0,
        0,1922,1920,1,0,0,0,1922,1921,1,0,0,0,1923,1926,1,0,0,0,1924,1922,
        1,0,0,0,1924,1925,1,0,0,0,1925,1927,1,0,0,0,1926,1924,1,0,0,0,1927,
        1928,5,2,0,0,1928,1929,5,142,0,0,1929,1930,5,253,0,0,1930,157,1,
        0,0,0,231,190,192,201,207,213,219,225,231,237,246,255,264,273,282,
        291,300,309,316,332,337,344,353,358,369,381,387,400,407,434,440,
        443,450,453,458,463,468,471,474,478,483,488,495,499,504,509,514,
        519,524,529,532,539,544,549,555,559,576,582,589,594,597,602,607,
        612,616,622,626,630,633,635,639,651,661,666,671,678,689,692,698,
        709,715,719,724,729,738,741,744,756,763,769,781,786,791,796,801,
        810,837,842,848,858,861,866,871,875,887,911,919,926,929,932,937,
        942,947,957,962,967,971,980,983,990,993,996,999,1011,1018,1025,1030,
        1042,1047,1052,1059,1070,1075,1089,1094,1099,1106,1123,1128,1137,
        1142,1147,1152,1161,1164,1172,1187,1194,1203,1209,1213,1218,1223,
        1226,1237,1245,1260,1276,1279,1298,1303,1306,1315,1319,1330,1334,
        1338,1341,1354,1357,1364,1367,1374,1379,1382,1402,1410,1412,1428,
        1432,1434,1440,1455,1460,1465,1474,1538,1555,1595,1611,1615,1627,
        1635,1650,1665,1695,1704,1710,1716,1719,1727,1729,1743,1749,1755,
        1758,1766,1768,1782,1788,1794,1797,1805,1807,1821,1827,1833,1836,
        1844,1846,1860,1866,1872,1875,1883,1885,1899,1905,1911,1914,1922,
        1924
    ]

class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'CV'", "'DEN'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'OUTD'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'CUTOFF'", 
                     "'CUTON'", "'FROM'", "'TO'", "'PEAK'", "'SPECTRUM'", 
                     "'VOLUME'", "'PPM1'", "'PPM2'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SIZE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'NCS'", "<INVALID>", "'SIGB'", 
                     "<INVALID>", "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'FBOX'", "<INVALID>", "'ID'", "<INVALID>", "'NAME'", 
                     "'NONE'", "<INVALID>", "'CUT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'SFBOX'", "'STORE1'", "'STORE2'", "'STORE3'", "'STORE4'", 
                     "'STORE5'", "'STORE6'", "'STORE7'", "'STORE8'", "'STORE9'", 
                     "'TAG'", "<INVALID>", "<INVALID>", "<INVALID>", "'SHOW'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'NIL'", "<INVALID>", 
                     "'UB'", "'MULT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'NONB'", "<INVALID>", "<INVALID>", "'FOR'", "'LOOP'", 
                     "'TAIL'", "'HEAD'", "'OR'", "'AND'", "'NOT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "':'", "<INVALID>", "'<'", "'>'", "'<='", 
                     "'>='", "'#'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", "'ENCODE'", 
                     "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", "'LOG10'", 
                     "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", "'MOD'", 
                     "<INVALID>", "<INVALID>", "'SIGN'", "'SIN'", "'SQRT'", 
                     "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'RMS'", "'SUM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Average", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Initialize", "Update", "Gamma", "Kappa", "Cutoff", 
                      "Cuton", "From", "To", "Peak", "Spectrum", "Volume", 
                      "Ppm1", "Ppm2", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Coupling", "Carbon", "Expectation", 
                      "PhiStep", "PsiStep", "Rcoil", "Zero", "Proton", "Observed", 
                      "Anisotropy", "Amides", "Nitrogens", "Oxygens", "RingAtoms", 
                      "AlphasAndAmides", "Error", "Conformation", "Compressed", 
                      "Phase", "Size", "Dimensions", "Danisotropy", "OneBond", 
                      "AngleDb", "DerivFlag", "Ncs", "Equivalence", "Sigb", 
                      "Flags", "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Fbox", "Hydrogen", 
                      "Id", "Known", "Name", "NONE", "Point", "Cut", "Previous", 
                      "Pseudo", "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Sfbox", "Store1", "Store2", "Store3", "Store4", "Store5", 
                      "Store6", "Store7", "Store8", "Store9", "Tag", "Vector", 
                      "Do_Lp", "Identity_Lp", "Show", "Evaluate_Lp", "Patch", 
                      "Reference", "Nil", "Parameter", "UB", "Mult", "HBonded", 
                      "Improper", "NBFix", "NonB", "VDWOff", "Verbose", 
                      "For", "Loop", "Tail", "Head", "Or_op", "And_op", 
                      "Not_op", "Comma", "Complex", "Integer", "Logical", 
                      "Real", "Double_quote_string", "SHARP_COMMENT", "EXCLM_COMMENT", 
                      "SMCLN_COMMENT", "Simple_name", "Simple_names", "Integers", 
                      "L_paren", "R_paren", "Colon", "Equ_op", "Lt_op", 
                      "Gt_op", "Leq_op", "Geq_op", "Neq_op", "Symbol_name", 
                      "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT", 
                      "SET_VARIABLE", "Abs", "Attr_properties", "Comparison_ops", 
                      "SPACE_AP", "Averaging_methods", "Simple_name_AM", 
                      "SPACE_AM", "Equ_op_PT", "Potential_types", "Simple_name_PT", 
                      "SPACE_PT", "Noe_analysis", "SPACE_NA", "Exclude", 
                      "Include", "End_FL", "Class_name", "Any_class", "SPACE_FL", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Symbol_name_VE", "Simple_name_VE", "Double_quote_string_VE", 
                      "SPACE_VE", "L_paren_VF", "SPACE_VF", "L_paren_VS", 
                      "R_paren_VS", "Average_VS", "Element_VS", "Max_VS", 
                      "Min_VS", "Norm_VS", "Rms_VS", "Sum_VS", "Atom_properties_VS", 
                      "SPACE_VS", "L_paren_CF", "R_paren_CF", "In_CF", "Integer_CF", 
                      "Real_CF", "Symbol_name_CF", "Simple_name_CF", "SPACE_CF", 
                      "COMMENT_CF", "Simple_name_LL", "SPACE_LL" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_noe_annotation = 16
    RULE_dihedral_statement = 17
    RULE_dihedral_assign = 18
    RULE_plane_statement = 19
    RULE_plane_group = 20
    RULE_group_statement = 21
    RULE_harmonic_statement = 22
    RULE_harmonic_assign = 23
    RULE_sani_statement = 24
    RULE_sani_assign = 25
    RULE_coupling_statement = 26
    RULE_coup_assign = 27
    RULE_carbon_shift_statement = 28
    RULE_carbon_shift_assign = 29
    RULE_carbon_shift_rcoil = 30
    RULE_proton_shift_statement = 31
    RULE_observed = 32
    RULE_proton_shift_rcoil = 33
    RULE_proton_shift_anisotropy = 34
    RULE_proton_shift_amides = 35
    RULE_proton_shift_carbons = 36
    RULE_proton_shift_nitrogens = 37
    RULE_proton_shift_oxygens = 38
    RULE_proton_shift_ring_atoms = 39
    RULE_proton_shift_alphas_and_amides = 40
    RULE_conformation_statement = 41
    RULE_conf_assign = 42
    RULE_diffusion_statement = 43
    RULE_dani_assign = 44
    RULE_one_bond_coupling_statement = 45
    RULE_one_bond_assign = 46
    RULE_angle_db_statement = 47
    RULE_angle_db_assign = 48
    RULE_ncs_restraint = 49
    RULE_ncs_statement = 50
    RULE_ncs_group_statement = 51
    RULE_selection = 52
    RULE_selection_expression = 53
    RULE_term = 54
    RULE_factor = 55
    RULE_number = 56
    RULE_number_f = 57
    RULE_number_s = 58
    RULE_number_a = 59
    RULE_flag_statement = 60
    RULE_vector_statement = 61
    RULE_vector_mode = 62
    RULE_vector_expression = 63
    RULE_vector_operation = 64
    RULE_vflc = 65
    RULE_vector_func_call = 66
    RULE_vector_show_property = 67
    RULE_evaluate_statement = 68
    RULE_evaluate_operation = 69
    RULE_patch_statement = 70
    RULE_parameter_setting = 71
    RULE_parameter_statement = 72
    RULE_noe_assign_loop = 73
    RULE_dihedral_assign_loop = 74
    RULE_sani_assign_loop = 75
    RULE_coup_assign_loop = 76
    RULE_carbon_shift_assign_loop = 77
    RULE_plane_group_loop = 78

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "plane_statement", 
                   "plane_group", "group_statement", "harmonic_statement", 
                   "harmonic_assign", "sani_statement", "sani_assign", "coupling_statement", 
                   "coup_assign", "carbon_shift_statement", "carbon_shift_assign", 
                   "carbon_shift_rcoil", "proton_shift_statement", "observed", 
                   "proton_shift_rcoil", "proton_shift_anisotropy", "proton_shift_amides", 
                   "proton_shift_carbons", "proton_shift_nitrogens", "proton_shift_oxygens", 
                   "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "ncs_restraint", 
                   "ncs_statement", "ncs_group_statement", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s", "number_a", "flag_statement", "vector_statement", 
                   "vector_mode", "vector_expression", "vector_operation", 
                   "vflc", "vector_func_call", "vector_show_property", "evaluate_statement", 
                   "evaluate_operation", "patch_statement", "parameter_setting", 
                   "parameter_statement", "noe_assign_loop", "dihedral_assign_loop", 
                   "sani_assign_loop", "coup_assign_loop", "carbon_shift_assign_loop", 
                   "plane_group_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Average=7
    Bhig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Cutoff=39
    Cuton=40
    From=41
    To=42
    Peak=43
    Spectrum=44
    Volume=45
    Ppm1=46
    Ppm2=47
    Restraints=48
    Dihedral=49
    Nassign=50
    Print_any=51
    Plane=52
    Group=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Sanisotropy=59
    Coefficients=60
    ForceConstant=61
    Coupling=62
    Carbon=63
    Expectation=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Zero=68
    Proton=69
    Observed=70
    Anisotropy=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Conformation=78
    Compressed=79
    Phase=80
    Size=81
    Dimensions=82
    Danisotropy=83
    OneBond=84
    AngleDb=85
    DerivFlag=86
    Ncs=87
    Equivalence=88
    Sigb=89
    Flags=90
    All=91
    Around=92
    Atom=93
    Attribute=94
    BondedTo=95
    ByGroup=96
    ByRes=97
    Chemical=98
    Fbox=99
    Hydrogen=100
    Id=101
    Known=102
    Name=103
    NONE=104
    Point=105
    Cut=106
    Previous=107
    Pseudo=108
    Residue=109
    Resname=110
    Saround=111
    SegIdentifier=112
    Sfbox=113
    Store1=114
    Store2=115
    Store3=116
    Store4=117
    Store5=118
    Store6=119
    Store7=120
    Store8=121
    Store9=122
    Tag=123
    Vector=124
    Do_Lp=125
    Identity_Lp=126
    Show=127
    Evaluate_Lp=128
    Patch=129
    Reference=130
    Nil=131
    Parameter=132
    UB=133
    Mult=134
    HBonded=135
    Improper=136
    NBFix=137
    NonB=138
    VDWOff=139
    Verbose=140
    For=141
    Loop=142
    Tail=143
    Head=144
    Or_op=145
    And_op=146
    Not_op=147
    Comma=148
    Complex=149
    Integer=150
    Logical=151
    Real=152
    Double_quote_string=153
    SHARP_COMMENT=154
    EXCLM_COMMENT=155
    SMCLN_COMMENT=156
    Simple_name=157
    Simple_names=158
    Integers=159
    L_paren=160
    R_paren=161
    Colon=162
    Equ_op=163
    Lt_op=164
    Gt_op=165
    Leq_op=166
    Geq_op=167
    Neq_op=168
    Symbol_name=169
    SPACE=170
    COMMENT=171
    SECTION_COMMENT=172
    LINE_COMMENT=173
    SET_VARIABLE=174
    Abs=175
    Attr_properties=176
    Comparison_ops=177
    SPACE_AP=178
    Averaging_methods=179
    Simple_name_AM=180
    SPACE_AM=181
    Equ_op_PT=182
    Potential_types=183
    Simple_name_PT=184
    SPACE_PT=185
    Noe_analysis=186
    SPACE_NA=187
    Exclude=188
    Include=189
    End_FL=190
    Class_name=191
    Any_class=192
    SPACE_FL=193
    R_paren_VE=194
    Equ_op_VE=195
    Add_op_VE=196
    Sub_op_VE=197
    Mul_op_VE=198
    Div_op_VE=199
    Exp_op_VE=200
    Comma_VE=201
    Integer_VE=202
    Real_VE=203
    Atom_properties_VE=204
    Abs_VE=205
    Acos_VE=206
    Asin_VE=207
    Cos_VE=208
    Decode_VE=209
    Encode_VE=210
    Exp_VE=211
    Gauss_VE=212
    Heavy_VE=213
    Int_VE=214
    Log10_VE=215
    Log_VE=216
    Max_VE=217
    Maxw_VE=218
    Min_VE=219
    Mod_VE=220
    Norm_VE=221
    Random_VE=222
    Sign_VE=223
    Sin_VE=224
    Sqrt_VE=225
    Tan_VE=226
    Symbol_name_VE=227
    Simple_name_VE=228
    Double_quote_string_VE=229
    SPACE_VE=230
    L_paren_VF=231
    SPACE_VF=232
    L_paren_VS=233
    R_paren_VS=234
    Average_VS=235
    Element_VS=236
    Max_VS=237
    Min_VS=238
    Norm_VS=239
    Rms_VS=240
    Sum_VS=241
    Atom_properties_VS=242
    SPACE_VS=243
    L_paren_CF=244
    R_paren_CF=245
    In_CF=246
    Integer_CF=247
    Real_CF=248
    Symbol_name_CF=249
    Simple_name_CF=250
    SPACE_CF=251
    COMMENT_CF=252
    Simple_name_LL=253
    SPACE_LL=254

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def ncs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Ncs_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Ncs_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def patch_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Patch_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Patch_statementContext,i)


        def parameter_setting(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Parameter_settingContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Parameter_settingContext,i)


        def noe_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assign_loopContext,i)


        def dihedral_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assign_loopContext,i)


        def sani_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assign_loopContext,i)


        def coup_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assign_loopContext,i)


        def carbon_shift_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assign_loopContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.ObservedContext,i)


        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Assign) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Dihedral) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Plane) | (1 << CnsMRParser.Group) | (1 << CnsMRParser.Harmonic) | (1 << CnsMRParser.Sanisotropy) | (1 << CnsMRParser.Coupling) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CnsMRParser.Proton - 69)) | (1 << (CnsMRParser.Observed - 69)) | (1 << (CnsMRParser.Conformation - 69)) | (1 << (CnsMRParser.Danisotropy - 69)) | (1 << (CnsMRParser.OneBond - 69)) | (1 << (CnsMRParser.AngleDb - 69)) | (1 << (CnsMRParser.Ncs - 69)) | (1 << (CnsMRParser.Flags - 69)) | (1 << (CnsMRParser.BondedTo - 69)) | (1 << (CnsMRParser.Vector - 69)) | (1 << (CnsMRParser.Evaluate_Lp - 69)) | (1 << (CnsMRParser.Patch - 69)) | (1 << (CnsMRParser.Parameter - 69)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (CnsMRParser.HBonded - 135)) | (1 << (CnsMRParser.Improper - 135)) | (1 << (CnsMRParser.NBFix - 135)) | (1 << (CnsMRParser.NonB - 135)) | (1 << (CnsMRParser.VDWOff - 135)) | (1 << (CnsMRParser.Verbose - 135)) | (1 << (CnsMRParser.For - 135)))) != 0):
                self.state = 190
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 158
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 159
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 160
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 161
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 162
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 163
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 164
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 165
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 166
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 167
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 168
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 169
                    self.angle_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 170
                    self.ncs_restraint()
                    pass

                elif la_ == 14:
                    self.state = 171
                    self.flag_statement()
                    pass

                elif la_ == 15:
                    self.state = 172
                    self.vector_statement()
                    pass

                elif la_ == 16:
                    self.state = 173
                    self.evaluate_statement()
                    pass

                elif la_ == 17:
                    self.state = 174
                    self.patch_statement()
                    pass

                elif la_ == 18:
                    self.state = 175
                    self.parameter_setting()
                    pass

                elif la_ == 19:
                    self.state = 176
                    self.noe_assign_loop()
                    pass

                elif la_ == 20:
                    self.state = 177
                    self.dihedral_assign_loop()
                    pass

                elif la_ == 21:
                    self.state = 178
                    self.sani_assign_loop()
                    pass

                elif la_ == 22:
                    self.state = 179
                    self.coup_assign_loop()
                    pass

                elif la_ == 23:
                    self.state = 180
                    self.carbon_shift_assign_loop()
                    pass

                elif la_ == 24:
                    self.state = 181
                    self.noe_assign()
                    pass

                elif la_ == 25:
                    self.state = 182
                    self.dihedral_assign()
                    pass

                elif la_ == 26:
                    self.state = 183
                    self.sani_assign()
                    pass

                elif la_ == 27:
                    self.state = 184
                    self.plane_statement()
                    pass

                elif la_ == 28:
                    self.state = 185
                    self.harmonic_assign()
                    pass

                elif la_ == 29:
                    self.state = 186
                    self.coup_assign()
                    pass

                elif la_ == 30:
                    self.state = 187
                    self.carbon_shift_assign()
                    pass

                elif la_ == 31:
                    self.state = 188
                    self.observed()
                    pass

                elif la_ == 32:
                    self.state = 189
                    self.parameter_statement()
                    pass


                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 195
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self.match(CnsMRParser.Noe)
            self.state = 201
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 198
                    self.noe_statement() 
                self.state = 203
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 204
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 206
                self.match(CnsMRParser.Restraints)


            self.state = 209
            self.match(CnsMRParser.Dihedral)
            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Scale) | (1 << CnsMRParser.Nassign) | (1 << CnsMRParser.Print_any))) != 0) or _la==CnsMRParser.Vector or _la==CnsMRParser.For:
                self.state = 210
                self.dihedral_statement()
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 216
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 218
                self.match(CnsMRParser.Restraints)


            self.state = 221
            self.match(CnsMRParser.Plane)
            self.state = 225
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0) or _la==CnsMRParser.Vector or _la==CnsMRParser.For:
                self.state = 222
                self.plane_statement()
                self.state = 227
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 228
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 230
                self.match(CnsMRParser.Restraints)


            self.state = 233
            self.match(CnsMRParser.Harmonic)
            self.state = 237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Exponent or _la==CnsMRParser.Normal or _la==CnsMRParser.Vector:
                self.state = 234
                self.harmonic_statement()
                self.state = 239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 240
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 242
            self.match(CnsMRParser.Sanisotropy)
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0) or _la==CnsMRParser.For:
                self.state = 243
                self.sani_statement()
                self.state = 248
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 249
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 251
            self.match(CnsMRParser.Coupling)
            self.state = 255
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0) or _la==CnsMRParser.For:
                self.state = 252
                self.coupling_statement()
                self.state = 257
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 258
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.match(CnsMRParser.Carbon)
            self.state = 264
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.ForceConstant - 5)) | (1 << (CnsMRParser.Expectation - 5)) | (1 << (CnsMRParser.PhiStep - 5)) | (1 << (CnsMRParser.PsiStep - 5)) | (1 << (CnsMRParser.Rcoil - 5)) | (1 << (CnsMRParser.Zero - 5)))) != 0) or _la==CnsMRParser.For:
                self.state = 261
                self.carbon_shift_statement()
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 267
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 269
            self.match(CnsMRParser.Proton)
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Classification) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CnsMRParser.Rcoil - 67)) | (1 << (CnsMRParser.Observed - 67)) | (1 << (CnsMRParser.Anisotropy - 67)) | (1 << (CnsMRParser.Amides - 67)) | (1 << (CnsMRParser.Nitrogens - 67)) | (1 << (CnsMRParser.Oxygens - 67)) | (1 << (CnsMRParser.RingAtoms - 67)) | (1 << (CnsMRParser.AlphasAndAmides - 67)) | (1 << (CnsMRParser.Error - 67)))) != 0):
                self.state = 270
                self.proton_shift_statement()
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 276
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def conformation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(CnsMRParser.Conformation)
            self.state = 282
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Compressed - 64)) | (1 << (CnsMRParser.Phase - 64)) | (1 << (CnsMRParser.Size - 64)))) != 0):
                self.state = 279
                self.conformation_statement()
                self.state = 284
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 285
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 287
            self.match(CnsMRParser.Danisotropy)
            self.state = 291
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 288
                self.diffusion_statement()
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 294
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 296
            self.match(CnsMRParser.OneBond)
            self.state = 300
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 297
                self.one_bond_coupling_statement()
                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 303
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 305
            self.match(CnsMRParser.AngleDb)
            self.state = 309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Size - 64)) | (1 << (CnsMRParser.DerivFlag - 64)))) != 0):
                self.state = 306
                self.angle_db_statement()
                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 312
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def noe_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,0)


        def noe_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assign_loopContext,0)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Average(self):
            return self.getToken(CnsMRParser.Average, 0)

        def Simple_name_AM(self):
            return self.getToken(CnsMRParser.Simple_name_AM, 0)

        def Averaging_methods(self):
            return self.getToken(CnsMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(CnsMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Simple_name_PT(self):
            return self.getToken(CnsMRParser.Simple_name_PT, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 314
                self.match(CnsMRParser.Analysis)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 315
                    self.match(CnsMRParser.Equ_op)


                self.state = 318
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 319
                self.noe_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 320
                self.noe_assign_loop()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 321
                self.match(CnsMRParser.Asymptote)
                self.state = 322
                self.match(CnsMRParser.Simple_name)
                self.state = 323
                self.number_s()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 324
                self.match(CnsMRParser.Average)
                self.state = 325
                self.match(CnsMRParser.Simple_name_AM)
                self.state = 326
                self.match(CnsMRParser.Averaging_methods)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 327
                self.match(CnsMRParser.Bhig)
                self.state = 328
                self.match(CnsMRParser.Simple_name)
                self.state = 329
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 330
                self.match(CnsMRParser.Ceiling)
                self.state = 332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 331
                    self.match(CnsMRParser.Equ_op)


                self.state = 334
                self.number_s()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 335
                self.match(CnsMRParser.Classification)
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 336
                    self.match(CnsMRParser.Equ_op)


                self.state = 339
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 340
                self.match(CnsMRParser.CountViol)
                self.state = 341
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 342
                self.match(CnsMRParser.Cv)
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 343
                    self.match(CnsMRParser.Equ_op)


                self.state = 346
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 347
                self.match(CnsMRParser.Den)
                self.state = 348
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 349
                self.match(CnsMRParser.Den)
                self.state = 350
                self.match(CnsMRParser.Update)
                self.state = 351
                self.match(CnsMRParser.Gamma)
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 352
                    self.match(CnsMRParser.Equ_op)


                self.state = 355
                self.number_s()
                self.state = 356
                self.match(CnsMRParser.Kappa)
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 357
                    self.match(CnsMRParser.Equ_op)


                self.state = 360
                self.number_s()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 362
                self.match(CnsMRParser.Distribute)
                self.state = 363
                self.match(CnsMRParser.Simple_name)
                self.state = 364
                self.match(CnsMRParser.Simple_name)
                self.state = 365
                self.number_s()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 369
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 366
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 371
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 372
                self.match(CnsMRParser.End)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 373
                self.match(CnsMRParser.Monomers)
                self.state = 374
                self.match(CnsMRParser.Simple_name)
                self.state = 375
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 376
                self.match(CnsMRParser.Ncount)
                self.state = 377
                self.match(CnsMRParser.Simple_name)
                self.state = 378
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 379
                self.match(CnsMRParser.Nrestraints)
                self.state = 381
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 380
                    self.match(CnsMRParser.Equ_op)


                self.state = 383
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 384
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 385
                self.match(CnsMRParser.Partition)
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 386
                    self.match(CnsMRParser.Equ_op)


                self.state = 389
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 390
                self.match(CnsMRParser.Potential)
                self.state = 391
                self.match(CnsMRParser.Simple_name_PT)
                self.state = 392
                self.match(CnsMRParser.Potential_types)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 393
                self.match(CnsMRParser.Predict)
                self.state = 394
                self.predict_statement()
                self.state = 395
                self.match(CnsMRParser.End)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 397
                self.match(CnsMRParser.Print)
                self.state = 398
                self.match(CnsMRParser.Threshold)
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 399
                    self.match(CnsMRParser.Equ_op)


                self.state = 402
                self.number_s()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 403
                self.match(CnsMRParser.Raverage)
                self.state = 407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 404
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 409
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 410
                self.match(CnsMRParser.End)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 411
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 412
                self.match(CnsMRParser.Rswitch)
                self.state = 413
                self.match(CnsMRParser.Simple_name)
                self.state = 414
                self.number_s()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 415
                self.match(CnsMRParser.Scale)
                self.state = 416
                self.match(CnsMRParser.Simple_name)
                self.state = 417
                self.number_s()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 418
                self.match(CnsMRParser.SoExponent)
                self.state = 419
                self.match(CnsMRParser.Simple_name)
                self.state = 420
                self.number_s()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 421
                self.match(CnsMRParser.SqConstant)
                self.state = 422
                self.match(CnsMRParser.Simple_name)
                self.state = 423
                self.number_s()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 424
                self.match(CnsMRParser.SqExponent)
                self.state = 425
                self.match(CnsMRParser.Simple_name)
                self.state = 426
                self.number_s()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 427
                self.match(CnsMRParser.SqOffset)
                self.state = 428
                self.match(CnsMRParser.Simple_name)
                self.state = 429
                self.number_s()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 430
                self.match(CnsMRParser.Taverage)
                self.state = 434
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 431
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 436
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                self.state = 437
                self.match(CnsMRParser.End)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 438
                self.match(CnsMRParser.Temperature)
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 439
                    self.match(CnsMRParser.Equ_op)


                self.state = 442
                self.number_s()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Assign)
            else:
                return self.getToken(CnsMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 445
            self.match(CnsMRParser.Assign)
            self.state = 446
            self.selection()
            self.state = 447
            self.selection()
            self.state = 448
            self.number()
            self.state = 450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 449
                self.number()


            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                self.state = 452
                self.number()


            self.state = 458
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 455
                    self.noe_annotation() 
                self.state = 460
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 461
                self.match(CnsMRParser.Or_op)
                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Assign:
                    self.state = 462
                    self.match(CnsMRParser.Assign)


                self.state = 465
                self.selection()
                self.state = 466
                self.selection()
                self.state = 468
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 467
                    self.number()


                self.state = 471
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 470
                    self.number()


                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                    self.state = 473
                    self.number()


                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 481
                self.match(CnsMRParser.Cutoff)
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 482
                    self.match(CnsMRParser.Equ_op)


                self.state = 485
                self.number_s()
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 486
                self.match(CnsMRParser.Cuton)
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 487
                    self.match(CnsMRParser.Equ_op)


                self.state = 490
                self.number_s()
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 491
                self.match(CnsMRParser.From)
                self.state = 492
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 493
                self.match(CnsMRParser.To)
                self.state = 494
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(CnsMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(CnsMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(CnsMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(CnsMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(CnsMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(CnsMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = CnsMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 532
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 497
                self.match(CnsMRParser.Peak)
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 498
                    self.match(CnsMRParser.Equ_op)


                self.state = 501
                self.number_a()
                pass
            elif token in [CnsMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 502
                self.match(CnsMRParser.Spectrum)
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 503
                    self.match(CnsMRParser.Equ_op)


                self.state = 506
                self.number_a()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 507
                self.match(CnsMRParser.Weight)
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 508
                    self.match(CnsMRParser.Equ_op)


                self.state = 511
                self.number_a()
                pass
            elif token in [CnsMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 512
                self.match(CnsMRParser.Volume)
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 513
                    self.match(CnsMRParser.Equ_op)


                self.state = 516
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 517
                self.match(CnsMRParser.Ppm1)
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 518
                    self.match(CnsMRParser.Equ_op)


                self.state = 521
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 522
                self.match(CnsMRParser.Ppm2)
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 523
                    self.match(CnsMRParser.Equ_op)


                self.state = 526
                self.number_a()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 527
                self.match(CnsMRParser.Cv)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 528
                    self.match(CnsMRParser.Equ_op)


                self.state = 531
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def dihedral_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assign_loopContext,0)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 534
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 535
                self.dihedral_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 536
                self.dihedral_assign_loop()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 537
                self.match(CnsMRParser.Cv)
                self.state = 539
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 538
                    self.match(CnsMRParser.Equ_op)


                self.state = 541
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 542
                self.match(CnsMRParser.Nassign)
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 543
                    self.match(CnsMRParser.Equ_op)


                self.state = 546
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 547
                self.match(CnsMRParser.Partition)
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 548
                    self.match(CnsMRParser.Equ_op)


                self.state = 551
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 552
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 8)
                self.state = 553
                self.match(CnsMRParser.Scale)
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 554
                    self.match(CnsMRParser.Equ_op)


                self.state = 557
                self.number_s()
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 9)
                self.state = 558
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 561
            self.match(CnsMRParser.Assign)
            self.state = 562
            self.selection()
            self.state = 563
            self.selection()
            self.state = 564
            self.selection()
            self.state = 565
            self.selection()
            self.state = 566
            self.number()
            self.state = 567
            self.number()
            self.state = 568
            self.number()
            self.state = 569
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def plane_group(self):
            return self.getTypedRuleContext(CnsMRParser.Plane_groupContext,0)


        def plane_group_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Plane_group_loopContext,0)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_plane_statement)
        try:
            self.state = 576
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 571
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 2)
                self.state = 572
                self.plane_group()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 573
                self.plane_group_loop()
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 4)
                self.state = 574
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 5)
                self.state = 575
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Group_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_group" ):
                listener.enterPlane_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_group" ):
                listener.exitPlane_group(self)




    def plane_group(self):

        localctx = CnsMRParser.Plane_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_plane_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 578
            self.match(CnsMRParser.Group)
            self.state = 582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Selection or _la==CnsMRParser.Weight:
                self.state = 579
                self.group_statement()
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 585
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 597
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 587
                self.match(CnsMRParser.Selection)
                self.state = 589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 588
                    self.match(CnsMRParser.Equ_op)


                self.state = 591
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 592
                self.match(CnsMRParser.Weight)
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 593
                    self.match(CnsMRParser.Equ_op)


                self.state = 596
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 639
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 599
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 2)
                self.state = 600
                self.match(CnsMRParser.Exponent)
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 601
                    self.match(CnsMRParser.Equ_op)


                self.state = 604
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 605
                self.match(CnsMRParser.Normal)
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 606
                    self.match(CnsMRParser.Equ_op)


                self.state = 609
                self.match(CnsMRParser.L_paren)
                self.state = 635
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integer, CnsMRParser.Real, CnsMRParser.Symbol_name]:
                    self.state = 610
                    self.number_s()
                    self.state = 612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 611
                        self.match(CnsMRParser.Comma)


                    self.state = 614
                    self.number_s()
                    self.state = 616
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 615
                        self.match(CnsMRParser.Comma)


                    self.state = 618
                    self.number_s()
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 620
                    self.match(CnsMRParser.Tail)
                    self.state = 622
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 621
                        self.match(CnsMRParser.Equ_op)


                    self.state = 624
                    self.selection()
                    self.state = 626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 625
                        self.match(CnsMRParser.Comma)


                    self.state = 633
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 628
                        self.match(CnsMRParser.Head)
                        self.state = 630
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CnsMRParser.Equ_op:
                            self.state = 629
                            self.match(CnsMRParser.Equ_op)


                        self.state = 632
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 637
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = CnsMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 641
            self.match(CnsMRParser.Assign)
            self.state = 642
            self.selection()
            self.state = 643
            self.number()
            self.state = 644
            self.number()
            self.state = 645
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,0)


        def sani_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 678
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 647
                self.sani_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 648
                self.sani_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 649
                self.match(CnsMRParser.Classification)
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 650
                    self.match(CnsMRParser.Equ_op)


                self.state = 653
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 654
                self.match(CnsMRParser.Coefficients)
                self.state = 655
                self.number_s()
                self.state = 656
                self.number_s()
                self.state = 657
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 659
                self.match(CnsMRParser.ForceConstant)
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 660
                    self.match(CnsMRParser.Equ_op)


                self.state = 663
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 664
                self.match(CnsMRParser.Nrestraints)
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 665
                    self.match(CnsMRParser.Equ_op)


                self.state = 668
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 7)
                self.state = 669
                self.match(CnsMRParser.Potential)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 670
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 673
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 674
                self.match(CnsMRParser.Print)
                self.state = 675
                self.match(CnsMRParser.Threshold)
                self.state = 676
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 677
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 680
            self.match(CnsMRParser.Assign)
            self.state = 681
            self.selection()
            self.state = 682
            self.selection()
            self.state = 683
            self.selection()
            self.state = 684
            self.selection()
            self.state = 685
            self.selection()
            self.state = 686
            self.selection()
            self.state = 687
            self.number()
            self.state = 689
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 688
                self.number()


            self.state = 692
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                self.state = 691
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,0)


        def coup_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 744
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 694
                self.coup_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 695
                self.coup_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 696
                self.match(CnsMRParser.Classification)
                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 697
                    self.match(CnsMRParser.Equ_op)


                self.state = 700
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 701
                self.match(CnsMRParser.Coefficients)
                self.state = 702
                self.number_s()
                self.state = 703
                self.number_s()
                self.state = 704
                self.number_s()
                self.state = 705
                self.number_s()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 5)
                self.state = 707
                self.match(CnsMRParser.Cv)
                self.state = 709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 708
                    self.match(CnsMRParser.Equ_op)


                self.state = 711
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 712
                self.match(CnsMRParser.ForceConstant)
                self.state = 713
                self.number_s()
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                    self.state = 714
                    self.number_s()


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 717
                self.match(CnsMRParser.Nrestraints)
                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 718
                    self.match(CnsMRParser.Equ_op)


                self.state = 721
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 8)
                self.state = 722
                self.match(CnsMRParser.Partition)
                self.state = 724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 723
                    self.match(CnsMRParser.Equ_op)


                self.state = 726
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 727
                self.match(CnsMRParser.Potential)
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 728
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 731
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 732
                self.match(CnsMRParser.Print)
                self.state = 733
                self.match(CnsMRParser.Threshold)
                self.state = 734
                self.number_s()
                self.state = 741
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 735
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 736
                    self.match(CnsMRParser.Classification)
                    self.state = 738
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 737
                        self.match(CnsMRParser.Equ_op)


                    self.state = 740
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 743
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(CnsMRParser.Assign)
            self.state = 747
            self.selection()
            self.state = 748
            self.selection()
            self.state = 749
            self.selection()
            self.state = 750
            self.selection()
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 751
                self.selection()
                self.state = 752
                self.selection()
                self.state = 753
                self.selection()
                self.state = 754
                self.selection()


            self.state = 758
            self.number()
            self.state = 759
            self.number()
            self.state = 763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                self.state = 760
                self.number()
                self.state = 761
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,0)


        def carbon_shift_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 810
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 765
                self.carbon_shift_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 766
                self.carbon_shift_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 767
                self.match(CnsMRParser.Classification)
                self.state = 769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 768
                    self.match(CnsMRParser.Equ_op)


                self.state = 771
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 772
                self.match(CnsMRParser.Expectation)
                self.state = 773
                self.match(CnsMRParser.Integer)
                self.state = 774
                self.match(CnsMRParser.Integer)
                self.state = 775
                self.number_s()
                self.state = 776
                self.number_s()
                self.state = 777
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 779
                self.match(CnsMRParser.ForceConstant)
                self.state = 781
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 780
                    self.match(CnsMRParser.Equ_op)


                self.state = 783
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 784
                self.match(CnsMRParser.Nrestraints)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 785
                    self.match(CnsMRParser.Equ_op)


                self.state = 788
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 789
                self.match(CnsMRParser.PhiStep)
                self.state = 791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 790
                    self.match(CnsMRParser.Equ_op)


                self.state = 793
                self.number_s()
                pass
            elif token in [CnsMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 8)
                self.state = 794
                self.match(CnsMRParser.PsiStep)
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 795
                    self.match(CnsMRParser.Equ_op)


                self.state = 798
                self.number_s()
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 799
                self.match(CnsMRParser.Potential)
                self.state = 801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 800
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 803
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 804
                self.match(CnsMRParser.Print)
                self.state = 805
                self.match(CnsMRParser.Threshold)
                self.state = 806
                self.number_s()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 11)
                self.state = 807
                self.carbon_shift_rcoil()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 808
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 809
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(CnsMRParser.Assign)
            self.state = 813
            self.selection()
            self.state = 814
            self.selection()
            self.state = 815
            self.selection()
            self.state = 816
            self.selection()
            self.state = 817
            self.selection()
            self.state = 818
            self.number()
            self.state = 819
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.match(CnsMRParser.Rcoil)
            self.state = 822
            self.selection()
            self.state = 823
            self.number()
            self.state = 824
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(CnsMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 866
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 826
                self.observed()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 827
                self.proton_shift_rcoil()
                pass
            elif token in [CnsMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 828
                self.proton_shift_anisotropy()
                pass
            elif token in [CnsMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 829
                self.proton_shift_amides()
                pass
            elif token in [CnsMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 830
                self.proton_shift_carbons()
                pass
            elif token in [CnsMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 831
                self.proton_shift_nitrogens()
                pass
            elif token in [CnsMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 832
                self.proton_shift_oxygens()
                pass
            elif token in [CnsMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 833
                self.proton_shift_ring_atoms()
                pass
            elif token in [CnsMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 834
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 835
                self.match(CnsMRParser.Classification)
                self.state = 837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 836
                    self.match(CnsMRParser.Equ_op)


                self.state = 839
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 840
                self.match(CnsMRParser.Error)
                self.state = 842
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 841
                    self.match(CnsMRParser.Equ_op)


                self.state = 844
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 12)
                self.state = 845
                self.match(CnsMRParser.ForceConstant)
                self.state = 846
                self.number_s()
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                    self.state = 847
                    self.number_s()


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 850
                self.match(CnsMRParser.Potential)
                self.state = 851
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 852
                self.match(CnsMRParser.Print)
                self.state = 853
                self.match(CnsMRParser.Threshold)
                self.state = 854
                self.number_s()
                self.state = 861
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 855
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 856
                    self.match(CnsMRParser.Classification)
                    self.state = 858
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 857
                        self.match(CnsMRParser.Equ_op)


                    self.state = 860
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 863
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 865
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(CnsMRParser.Observed)
            self.state = 869
            self.selection()
            self.state = 871
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 870
                self.selection()


            self.state = 873
            self.number()
            self.state = 875
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                self.state = 874
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self):
            return self.getTypedRuleContext(CnsMRParser.NumberContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(CnsMRParser.Rcoil)
            self.state = 878
            self.selection()
            self.state = 879
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 881
            self.match(CnsMRParser.Anisotropy)
            self.state = 882
            self.selection()
            self.state = 883
            self.selection()
            self.state = 884
            self.selection()
            self.state = 885
            self.match(CnsMRParser.Simple_name)
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 886
                self.match(CnsMRParser.Logical)


            self.state = 889
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 891
            self.match(CnsMRParser.Amides)
            self.state = 892
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 894
            self.match(CnsMRParser.Carbon)
            self.state = 895
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 897
            self.match(CnsMRParser.Nitrogens)
            self.state = 898
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.match(CnsMRParser.Oxygens)
            self.state = 901
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 903
            self.match(CnsMRParser.RingAtoms)
            self.state = 904
            self.match(CnsMRParser.Simple_name)
            self.state = 905
            self.selection()
            self.state = 906
            self.selection()
            self.state = 907
            self.selection()
            self.state = 908
            self.selection()
            self.state = 909
            self.selection()
            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 910
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 913
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 914
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 999
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 916
                self.conf_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 917
                self.match(CnsMRParser.Classification)
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 918
                    self.match(CnsMRParser.Equ_op)


                self.state = 921
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 922
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 923
                self.match(CnsMRParser.Expectation)
                self.state = 924
                self.match(CnsMRParser.Integer)
                self.state = 926
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 925
                    self.match(CnsMRParser.Integer)


                self.state = 929
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 928
                    self.match(CnsMRParser.Integer)


                self.state = 932
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 931
                    self.match(CnsMRParser.Integer)


                self.state = 934
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 935
                self.match(CnsMRParser.Error)
                self.state = 937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 936
                    self.match(CnsMRParser.Equ_op)


                self.state = 939
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 940
                self.match(CnsMRParser.ForceConstant)
                self.state = 942
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 941
                    self.match(CnsMRParser.Equ_op)


                self.state = 944
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 945
                self.match(CnsMRParser.Nrestraints)
                self.state = 947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 946
                    self.match(CnsMRParser.Equ_op)


                self.state = 949
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 950
                self.match(CnsMRParser.Phase)
                self.state = 951
                self.match(CnsMRParser.Integer)
                self.state = 952
                self.match(CnsMRParser.Integer)
                self.state = 953
                self.match(CnsMRParser.Integer)
                self.state = 957
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 954
                    self.match(CnsMRParser.Integer)
                    self.state = 955
                    self.match(CnsMRParser.Integer)
                    self.state = 956
                    self.match(CnsMRParser.Integer)


                self.state = 962
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 959
                    self.match(CnsMRParser.Integer)
                    self.state = 960
                    self.match(CnsMRParser.Integer)
                    self.state = 961
                    self.match(CnsMRParser.Integer)


                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 964
                    self.match(CnsMRParser.Integer)
                    self.state = 965
                    self.match(CnsMRParser.Integer)
                    self.state = 966
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 969
                self.match(CnsMRParser.Potential)
                self.state = 971
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 970
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 973
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 974
                self.match(CnsMRParser.Print)
                self.state = 975
                self.match(CnsMRParser.Threshold)
                self.state = 976
                self.number_s()
                self.state = 983
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 977
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 978
                    self.match(CnsMRParser.Classification)
                    self.state = 980
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 979
                        self.match(CnsMRParser.Equ_op)


                    self.state = 982
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 985
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 986
                self.match(CnsMRParser.Size)
                self.state = 987
                self.match(CnsMRParser.Dimensions)
                self.state = 988
                self.match(CnsMRParser.Integer)
                self.state = 990
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 989
                    self.match(CnsMRParser.Integer)


                self.state = 993
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 992
                    self.match(CnsMRParser.Integer)


                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 995
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 998
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1001
            self.match(CnsMRParser.Assign)
            self.state = 1002
            self.selection()
            self.state = 1003
            self.selection()
            self.state = 1004
            self.selection()
            self.state = 1005
            self.selection()
            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1006
                self.selection()
                self.state = 1007
                self.selection()
                self.state = 1008
                self.selection()
                self.state = 1009
                self.selection()


            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1013
                self.selection()
                self.state = 1014
                self.selection()
                self.state = 1015
                self.selection()
                self.state = 1016
                self.selection()


            self.state = 1025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1020
                self.selection()
                self.state = 1021
                self.selection()
                self.state = 1022
                self.selection()
                self.state = 1023
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1059
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1027
                self.dani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1028
                self.match(CnsMRParser.Classification)
                self.state = 1030
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1029
                    self.match(CnsMRParser.Equ_op)


                self.state = 1032
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1033
                self.match(CnsMRParser.Coefficients)
                self.state = 1034
                self.number_s()
                self.state = 1035
                self.number_s()
                self.state = 1036
                self.number_s()
                self.state = 1037
                self.number_s()
                self.state = 1038
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1040
                self.match(CnsMRParser.ForceConstant)
                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1041
                    self.match(CnsMRParser.Equ_op)


                self.state = 1044
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1045
                self.match(CnsMRParser.Nrestraints)
                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1046
                    self.match(CnsMRParser.Equ_op)


                self.state = 1049
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1050
                self.match(CnsMRParser.Potential)
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 1051
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 1054
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1055
                self.match(CnsMRParser.Print)
                self.state = 1056
                self.match(CnsMRParser.Threshold)
                self.state = 1057
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1058
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1061
            self.match(CnsMRParser.Assign)
            self.state = 1062
            self.selection()
            self.state = 1063
            self.selection()
            self.state = 1064
            self.selection()
            self.state = 1065
            self.selection()
            self.state = 1066
            self.selection()
            self.state = 1067
            self.selection()
            self.state = 1068
            self.number()
            self.state = 1070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                self.state = 1069
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1106
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1072
                self.one_bond_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                self.match(CnsMRParser.Classification)
                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1074
                    self.match(CnsMRParser.Equ_op)


                self.state = 1077
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1078
                self.match(CnsMRParser.Coefficients)
                self.state = 1079
                self.number_s()
                self.state = 1080
                self.number_s()
                self.state = 1081
                self.number_s()
                self.state = 1082
                self.number_s()
                self.state = 1083
                self.number_s()
                self.state = 1084
                self.number_s()
                self.state = 1085
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1087
                self.match(CnsMRParser.ForceConstant)
                self.state = 1089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1088
                    self.match(CnsMRParser.Equ_op)


                self.state = 1091
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1092
                self.match(CnsMRParser.Nrestraints)
                self.state = 1094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1093
                    self.match(CnsMRParser.Equ_op)


                self.state = 1096
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1097
                self.match(CnsMRParser.Potential)
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 1098
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 1101
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1102
                self.match(CnsMRParser.Print)
                self.state = 1103
                self.match(CnsMRParser.Threshold)
                self.state = 1104
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1105
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1108
            self.match(CnsMRParser.Assign)
            self.state = 1109
            self.selection()
            self.state = 1110
            self.selection()
            self.state = 1111
            self.selection()
            self.state = 1112
            self.selection()
            self.state = 1113
            self.selection()
            self.state = 1114
            self.selection()
            self.state = 1115
            self.selection()
            self.state = 1116
            self.selection()
            self.state = 1117
            self.number()
            self.state = 1118
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1172
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1120
                self.angle_db_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1121
                self.match(CnsMRParser.Classification)
                self.state = 1123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1122
                    self.match(CnsMRParser.Equ_op)


                self.state = 1125
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1126
                self.match(CnsMRParser.DerivFlag)
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1127
                    self.match(CnsMRParser.Equ_op)


                self.state = 1130
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1131
                self.match(CnsMRParser.Expectation)
                self.state = 1132
                self.match(CnsMRParser.Integer)
                self.state = 1133
                self.match(CnsMRParser.Integer)
                self.state = 1134
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1135
                self.match(CnsMRParser.Error)
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1136
                    self.match(CnsMRParser.Equ_op)


                self.state = 1139
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1140
                self.match(CnsMRParser.ForceConstant)
                self.state = 1142
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1141
                    self.match(CnsMRParser.Equ_op)


                self.state = 1144
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1145
                self.match(CnsMRParser.Nrestraints)
                self.state = 1147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1146
                    self.match(CnsMRParser.Equ_op)


                self.state = 1149
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1150
                self.match(CnsMRParser.Potential)
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 1151
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 1154
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1155
                self.match(CnsMRParser.Print)
                self.state = 1156
                self.match(CnsMRParser.Threshold)
                self.state = 1157
                self.number_s()
                self.state = 1164
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 1158
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 1159
                    self.match(CnsMRParser.Classification)
                    self.state = 1161
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1160
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1163
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1166
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1167
                self.match(CnsMRParser.Size)
                self.state = 1168
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Dihedral or _la==CnsMRParser.AngleDb):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1169
                self.match(CnsMRParser.Integer)
                self.state = 1170
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1171
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1174
            self.match(CnsMRParser.Assign)
            self.state = 1175
            self.selection()
            self.state = 1176
            self.selection()
            self.state = 1177
            self.selection()
            self.state = 1178
            self.selection()
            self.state = 1179
            self.selection()
            self.state = 1180
            self.selection()
            self.state = 1181
            self.selection()
            self.state = 1182
            self.selection()
            self.state = 1183
            self.selection()
            self.state = 1184
            self.selection()
            self.state = 1185
            self.selection()
            self.state = 1187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1186
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ncs(self):
            return self.getToken(CnsMRParser.Ncs, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def ncs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Ncs_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Ncs_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_ncs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_restraint" ):
                listener.enterNcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_restraint" ):
                listener.exitNcs_restraint(self)




    def ncs_restraint(self):

        localctx = CnsMRParser.Ncs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_ncs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1189
            self.match(CnsMRParser.Ncs)
            self.state = 1190
            self.match(CnsMRParser.Restraints)
            self.state = 1194
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0):
                self.state = 1191
                self.ncs_statement()
                self.state = 1196
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1197
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def ncs_group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Ncs_group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Ncs_group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_ncs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_statement" ):
                listener.enterNcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_statement" ):
                listener.exitNcs_statement(self)




    def ncs_statement(self):

        localctx = CnsMRParser.Ncs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ncs_statement)
        self._la = 0 # Token type
        try:
            self.state = 1209
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1199
                self.match(CnsMRParser.Group)
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CnsMRParser.Weight - 55)) | (1 << (CnsMRParser.Equivalence - 55)) | (1 << (CnsMRParser.Sigb - 55)))) != 0):
                    self.state = 1200
                    self.ncs_group_statement()
                    self.state = 1205
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1206
                self.match(CnsMRParser.End)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1207
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1208
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equivalence(self):
            return self.getToken(CnsMRParser.Equivalence, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Sigb(self):
            return self.getToken(CnsMRParser.Sigb, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_ncs_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_group_statement" ):
                listener.enterNcs_group_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_group_statement" ):
                listener.exitNcs_group_statement(self)




    def ncs_group_statement(self):

        localctx = CnsMRParser.Ncs_group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_ncs_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 1226
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Equivalence]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1211
                self.match(CnsMRParser.Equivalence)
                self.state = 1213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1212
                    self.match(CnsMRParser.Equ_op)


                self.state = 1215
                self.selection()
                pass
            elif token in [CnsMRParser.Sigb]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1216
                self.match(CnsMRParser.Sigb)
                self.state = 1218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1217
                    self.match(CnsMRParser.Equ_op)


                self.state = 1220
                self.number_s()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1221
                self.match(CnsMRParser.Weight)
                self.state = 1223
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1222
                    self.match(CnsMRParser.Equ_op)


                self.state = 1225
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1228
            self.match(CnsMRParser.L_paren)
            self.state = 1229
            self.selection_expression()
            self.state = 1230
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            self.term()
            self.state = 1237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 1233
                self.match(CnsMRParser.Or_op)
                self.state = 1234
                self.term()
                self.state = 1239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.factor(0)
            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1241
                self.match(CnsMRParser.And_op)
                self.state = 1242
                self.factor(0)
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store1(self):
            return self.getToken(CnsMRParser.Store1, 0)

        def Store2(self):
            return self.getToken(CnsMRParser.Store2, 0)

        def Store3(self):
            return self.getToken(CnsMRParser.Store3, 0)

        def Store4(self):
            return self.getToken(CnsMRParser.Store4, 0)

        def Store5(self):
            return self.getToken(CnsMRParser.Store5, 0)

        def Store6(self):
            return self.getToken(CnsMRParser.Store6, 0)

        def Store7(self):
            return self.getToken(CnsMRParser.Store7, 0)

        def Store8(self):
            return self.getToken(CnsMRParser.Store8, 0)

        def Store9(self):
            return self.getToken(CnsMRParser.Store9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 110
        self.enterRecursionRule(localctx, 110, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1249
                self.match(CnsMRParser.L_paren)
                self.state = 1250
                self.selection_expression()
                self.state = 1251
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1253
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1254
                self.match(CnsMRParser.Atom)
                self.state = 1255
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1256
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1257
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1258
                self.match(CnsMRParser.Attribute)
                self.state = 1260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1259
                    self.match(CnsMRParser.Abs)


                self.state = 1262
                self.match(CnsMRParser.Attr_properties)
                self.state = 1263
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1264
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1265
                self.match(CnsMRParser.BondedTo)
                self.state = 1266
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1267
                self.match(CnsMRParser.ByGroup)
                self.state = 1268
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1269
                self.match(CnsMRParser.ByRes)
                self.state = 1270
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1271
                self.match(CnsMRParser.Chemical)
                self.state = 1279
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1272
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1273
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1276
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1274
                        self.match(CnsMRParser.Colon)
                        self.state = 1275
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1278
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1281
                self.match(CnsMRParser.Fbox)
                self.state = 1282
                self.number_f()
                self.state = 1283
                self.number_f()
                self.state = 1284
                self.number_f()
                self.state = 1285
                self.number_f()
                self.state = 1286
                self.number_f()
                self.state = 1287
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1289
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1290
                self.match(CnsMRParser.Id)
                self.state = 1291
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1292
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1293
                self.match(CnsMRParser.Name)
                self.state = 1306
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1294
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1295
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1298
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        self.state = 1296
                        self.match(CnsMRParser.Colon)
                        self.state = 1297
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1300
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1303
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                    if la_ == 1:
                        self.state = 1301
                        self.match(CnsMRParser.Colon)
                        self.state = 1302
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1305
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1308
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1309
                self.match(CnsMRParser.Not_op)
                self.state = 1310
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1311
                self.match(CnsMRParser.Point)
                self.state = 1312
                self.match(CnsMRParser.L_paren)
                self.state = 1313
                self.number_f()
                self.state = 1315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1314
                    self.match(CnsMRParser.Comma)


                self.state = 1317
                self.number_f()
                self.state = 1319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1318
                    self.match(CnsMRParser.Comma)


                self.state = 1321
                self.number_f()
                self.state = 1322
                self.match(CnsMRParser.R_paren)
                self.state = 1323
                self.match(CnsMRParser.Cut)
                self.state = 1324
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1326
                self.match(CnsMRParser.Point)
                self.state = 1327
                self.match(CnsMRParser.L_paren)
                self.state = 1328
                self.match(CnsMRParser.Tail)
                self.state = 1330
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1329
                    self.match(CnsMRParser.Equ_op)


                self.state = 1332
                self.selection()
                self.state = 1334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1333
                    self.match(CnsMRParser.Comma)


                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1336
                    self.match(CnsMRParser.Head)
                    self.state = 1338
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1337
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1340
                    self.selection()


                self.state = 1343
                self.match(CnsMRParser.R_paren)
                self.state = 1344
                self.match(CnsMRParser.Cut)
                self.state = 1345
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1347
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1348
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1349
                self.match(CnsMRParser.Residue)
                self.state = 1357
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1350
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1351
                    self.match(CnsMRParser.Integer)
                    self.state = 1354
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                    if la_ == 1:
                        self.state = 1352
                        self.match(CnsMRParser.Colon)
                        self.state = 1353
                        self.match(CnsMRParser.Integer)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1356
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1359
                self.match(CnsMRParser.Resname)
                self.state = 1367
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1360
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1361
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1364
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                    if la_ == 1:
                        self.state = 1362
                        self.match(CnsMRParser.Colon)
                        self.state = 1363
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1366
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1369
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1382
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1370
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1371
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1374
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                    if la_ == 1:
                        self.state = 1372
                        self.match(CnsMRParser.Colon)
                        self.state = 1373
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1376
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1379
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                    if la_ == 1:
                        self.state = 1377
                        self.match(CnsMRParser.Colon)
                        self.state = 1378
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1381
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1384
                self.match(CnsMRParser.Sfbox)
                self.state = 1385
                self.number_f()
                self.state = 1386
                self.number_f()
                self.state = 1387
                self.number_f()
                self.state = 1388
                self.number_f()
                self.state = 1389
                self.number_f()
                self.state = 1390
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1392
                self.match(CnsMRParser.Store1)
                pass

            elif la_ == 25:
                self.state = 1393
                self.match(CnsMRParser.Store2)
                pass

            elif la_ == 26:
                self.state = 1394
                self.match(CnsMRParser.Store3)
                pass

            elif la_ == 27:
                self.state = 1395
                self.match(CnsMRParser.Store4)
                pass

            elif la_ == 28:
                self.state = 1396
                self.match(CnsMRParser.Store5)
                pass

            elif la_ == 29:
                self.state = 1397
                self.match(CnsMRParser.Store6)
                pass

            elif la_ == 30:
                self.state = 1398
                self.match(CnsMRParser.Store7)
                pass

            elif la_ == 31:
                self.state = 1399
                self.match(CnsMRParser.Store8)
                pass

            elif la_ == 32:
                self.state = 1400
                self.match(CnsMRParser.Store9)
                pass

            elif la_ == 33:
                self.state = 1401
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1412
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1410
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1404
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1405
                        self.match(CnsMRParser.Around)
                        self.state = 1406
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1407
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1408
                        self.match(CnsMRParser.Saround)
                        self.state = 1409
                        self.number_f()
                        pass

             
                self.state = 1414
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1415
            _la = self._input.LA(1)
            if not(((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1417
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1419
            _la = self._input.LA(1)
            if not(((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = CnsMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1421
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CnsMRParser.Flags, 0)

        def Include(self):
            return self.getToken(CnsMRParser.Include, 0)

        def End_FL(self):
            return self.getToken(CnsMRParser.End_FL, 0)

        def Exclude(self):
            return self.getToken(CnsMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Class_name)
            else:
                return self.getToken(CnsMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(CnsMRParser.Any_class, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = CnsMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1423
            self.match(CnsMRParser.Flags)
            self.state = 1434
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Exclude:
                self.state = 1424
                self.match(CnsMRParser.Exclude)
                self.state = 1432
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Include, CnsMRParser.Class_name]:
                    self.state = 1428
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CnsMRParser.Class_name:
                        self.state = 1425
                        self.match(CnsMRParser.Class_name)
                        self.state = 1430
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CnsMRParser.Any_class]:
                    self.state = 1431
                    self.match(CnsMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1436
            self.match(CnsMRParser.Include)
            self.state = 1440
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Class_name:
                self.state = 1437
                self.match(CnsMRParser.Class_name)
                self.state = 1442
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1443
            self.match(CnsMRParser.End_FL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(CnsMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = CnsMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.match(CnsMRParser.Vector)
            self.state = 1446
            self.vector_mode()
            self.state = 1447
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(CnsMRParser.Do_Lp, 0)

        def Identity_Lp(self):
            return self.getToken(CnsMRParser.Identity_Lp, 0)

        def Show(self):
            return self.getToken(CnsMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = CnsMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 1455
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Do_Lp, CnsMRParser.Identity_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1449
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Do_Lp or _la==CnsMRParser.Identity_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1450
                self.vector_expression()
                self.state = 1451
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1453
                self.match(CnsMRParser.Show)
                self.state = 1454
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = CnsMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1457
            self.match(CnsMRParser.Atom_properties_VE)
            self.state = 1460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Equ_op_VE:
                self.state = 1458
                self.match(CnsMRParser.Equ_op_VE)
                self.state = 1459
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = CnsMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1462
            self.vflc()
            self.state = 1465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (CnsMRParser.Add_op_VE - 196)) | (1 << (CnsMRParser.Sub_op_VE - 196)) | (1 << (CnsMRParser.Mul_op_VE - 196)) | (1 << (CnsMRParser.Div_op_VE - 196)) | (1 << (CnsMRParser.Exp_op_VE - 196)))) != 0):
                self.state = 1463
                _la = self._input.LA(1)
                if not(((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (CnsMRParser.Add_op_VE - 196)) | (1 << (CnsMRParser.Sub_op_VE - 196)) | (1 << (CnsMRParser.Mul_op_VE - 196)) | (1 << (CnsMRParser.Div_op_VE - 196)) | (1 << (CnsMRParser.Exp_op_VE - 196)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1464
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(CnsMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(CnsMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(CnsMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(CnsMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = CnsMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_vflc)
        try:
            self.state = 1474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1467
                self.match(CnsMRParser.Atom_properties_VE)
                pass
            elif token in [CnsMRParser.Abs_VE, CnsMRParser.Acos_VE, CnsMRParser.Cos_VE, CnsMRParser.Decode_VE, CnsMRParser.Encode_VE, CnsMRParser.Exp_VE, CnsMRParser.Gauss_VE, CnsMRParser.Heavy_VE, CnsMRParser.Int_VE, CnsMRParser.Log10_VE, CnsMRParser.Log_VE, CnsMRParser.Max_VE, CnsMRParser.Maxw_VE, CnsMRParser.Min_VE, CnsMRParser.Mod_VE, CnsMRParser.Norm_VE, CnsMRParser.Random_VE, CnsMRParser.Sign_VE, CnsMRParser.Sin_VE, CnsMRParser.Sqrt_VE, CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1468
                self.vector_func_call()
                pass
            elif token in [CnsMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1469
                self.match(CnsMRParser.Integer_VE)
                pass
            elif token in [CnsMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1470
                self.match(CnsMRParser.Real_VE)
                pass
            elif token in [CnsMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1471
                self.match(CnsMRParser.Simple_name_VE)
                pass
            elif token in [CnsMRParser.Symbol_name_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1472
                self.match(CnsMRParser.Symbol_name_VE)
                pass
            elif token in [CnsMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1473
                self.match(CnsMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(CnsMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(CnsMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(CnsMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(CnsMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(CnsMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(CnsMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(CnsMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(CnsMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(CnsMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(CnsMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(CnsMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(CnsMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(CnsMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma_VE)
            else:
                return self.getToken(CnsMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(CnsMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(CnsMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(CnsMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(CnsMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(CnsMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(CnsMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(CnsMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(CnsMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(CnsMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = CnsMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1595
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1476
                self.match(CnsMRParser.Abs_VE)
                self.state = 1477
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1478
                self.vflc()
                self.state = 1479
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1481
                self.match(CnsMRParser.Acos_VE)
                self.state = 1482
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1483
                self.vflc()
                self.state = 1484
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1486
                self.match(CnsMRParser.Cos_VE)
                self.state = 1487
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1488
                self.vflc()
                self.state = 1489
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1491
                self.match(CnsMRParser.Decode_VE)
                self.state = 1492
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1493
                self.vflc()
                self.state = 1494
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1496
                self.match(CnsMRParser.Encode_VE)
                self.state = 1497
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1498
                self.vflc()
                self.state = 1499
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1501
                self.match(CnsMRParser.Exp_VE)
                self.state = 1502
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1503
                self.vflc()
                self.state = 1504
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1506
                self.match(CnsMRParser.Gauss_VE)
                self.state = 1507
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1508
                self.vflc()
                self.state = 1509
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1511
                self.match(CnsMRParser.Heavy_VE)
                self.state = 1512
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1513
                self.vflc()
                self.state = 1514
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1516
                self.match(CnsMRParser.Int_VE)
                self.state = 1517
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1518
                self.vflc()
                self.state = 1519
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1521
                self.match(CnsMRParser.Log10_VE)
                self.state = 1522
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1523
                self.vflc()
                self.state = 1524
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1526
                self.match(CnsMRParser.Log_VE)
                self.state = 1527
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1528
                self.vflc()
                self.state = 1529
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1531
                self.match(CnsMRParser.Max_VE)
                self.state = 1532
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1533
                self.vflc()
                self.state = 1538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1534
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1535
                    self.vflc()
                    self.state = 1540
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1541
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1543
                self.match(CnsMRParser.Maxw_VE)
                self.state = 1544
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1545
                self.vflc()
                self.state = 1546
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1548
                self.match(CnsMRParser.Min_VE)
                self.state = 1549
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1550
                self.vflc()
                self.state = 1555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1551
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1552
                    self.vflc()
                    self.state = 1557
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1558
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1560
                self.match(CnsMRParser.Mod_VE)
                self.state = 1561
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1562
                self.vflc()
                self.state = 1563
                self.match(CnsMRParser.Comma_VE)
                self.state = 1564
                self.vflc()
                self.state = 1565
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1567
                self.match(CnsMRParser.Norm_VE)
                self.state = 1568
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1569
                self.vflc()
                self.state = 1570
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1572
                self.match(CnsMRParser.Random_VE)
                self.state = 1573
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1574
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1575
                self.match(CnsMRParser.Sign_VE)
                self.state = 1576
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1577
                self.vflc()
                self.state = 1578
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1580
                self.match(CnsMRParser.Sin_VE)
                self.state = 1581
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1582
                self.vflc()
                self.state = 1583
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1585
                self.match(CnsMRParser.Sqrt_VE)
                self.state = 1586
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1587
                self.vflc()
                self.state = 1588
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1590
                self.match(CnsMRParser.Tan_VE)
                self.state = 1591
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1592
                self.vflc()
                self.state = 1593
                self.match(CnsMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(CnsMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(CnsMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(CnsMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(CnsMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(CnsMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(CnsMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(CnsMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(CnsMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(CnsMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(CnsMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = CnsMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1597
            _la = self._input.LA(1)
            if not(((((_la - 235)) & ~0x3f) == 0 and ((1 << (_la - 235)) & ((1 << (CnsMRParser.Average_VS - 235)) | (1 << (CnsMRParser.Element_VS - 235)) | (1 << (CnsMRParser.Max_VS - 235)) | (1 << (CnsMRParser.Min_VS - 235)) | (1 << (CnsMRParser.Norm_VS - 235)) | (1 << (CnsMRParser.Rms_VS - 235)) | (1 << (CnsMRParser.Sum_VS - 235)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1598
            self.match(CnsMRParser.L_paren_VS)
            self.state = 1599
            self.match(CnsMRParser.Atom_properties_VS)
            self.state = 1600
            self.match(CnsMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(CnsMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = CnsMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1602
            self.match(CnsMRParser.Evaluate_Lp)
            self.state = 1603
            self.match(CnsMRParser.Symbol_name_VE)
            self.state = 1604
            self.match(CnsMRParser.Equ_op_VE)
            self.state = 1605
            self.evaluate_operation()
            self.state = 1606
            self.match(CnsMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = CnsMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.vflc()
            self.state = 1611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (CnsMRParser.Add_op_VE - 196)) | (1 << (CnsMRParser.Sub_op_VE - 196)) | (1 << (CnsMRParser.Mul_op_VE - 196)) | (1 << (CnsMRParser.Div_op_VE - 196)) | (1 << (CnsMRParser.Exp_op_VE - 196)))) != 0):
                self.state = 1609
                _la = self._input.LA(1)
                if not(((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (CnsMRParser.Add_op_VE - 196)) | (1 << (CnsMRParser.Sub_op_VE - 196)) | (1 << (CnsMRParser.Mul_op_VE - 196)) | (1 << (CnsMRParser.Div_op_VE - 196)) | (1 << (CnsMRParser.Exp_op_VE - 196)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1610
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Patch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Patch(self):
            return self.getToken(CnsMRParser.Patch, 0)

        def Reference(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Reference)
            else:
                return self.getToken(CnsMRParser.Reference, i)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Nil(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Nil)
            else:
                return self.getToken(CnsMRParser.Nil, i)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def HBonded(self):
            return self.getToken(CnsMRParser.HBonded, 0)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(CnsMRParser.Improper, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_patch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatch_statement" ):
                listener.enterPatch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatch_statement" ):
                listener.exitPatch_statement(self)




    def patch_statement(self):

        localctx = CnsMRParser.Patch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_patch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613
            self.match(CnsMRParser.Patch)
            self.state = 1615
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Dihedral or _la==CnsMRParser.AngleDb or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (CnsMRParser.HBonded - 135)) | (1 << (CnsMRParser.Improper - 135)) | (1 << (CnsMRParser.Simple_name - 135)))) != 0):
                self.state = 1614
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Dihedral or _la==CnsMRParser.AngleDb or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (CnsMRParser.HBonded - 135)) | (1 << (CnsMRParser.Improper - 135)) | (1 << (CnsMRParser.Simple_name - 135)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1617
            self.match(CnsMRParser.Reference)
            self.state = 1618
            self.match(CnsMRParser.Equ_op)
            self.state = 1619
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Nil or _la==CnsMRParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1620
            self.match(CnsMRParser.Equ_op)
            self.state = 1621
            self.selection()
            self.state = 1627
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Reference:
                self.state = 1622
                self.match(CnsMRParser.Reference)
                self.state = 1623
                self.match(CnsMRParser.Equ_op)
                self.state = 1624
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Nil or _la==CnsMRParser.Integer):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1625
                self.match(CnsMRParser.Equ_op)
                self.state = 1626
                self.selection()


            self.state = 1629
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_settingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Parameter(self):
            return self.getToken(CnsMRParser.Parameter, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_parameter_setting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_setting" ):
                listener.enterParameter_setting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_setting" ):
                listener.exitParameter_setting(self)




    def parameter_setting(self):

        localctx = CnsMRParser.Parameter_settingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_parameter_setting)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1631
            self.match(CnsMRParser.Parameter)
            self.state = 1635
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Reset or _la==CnsMRParser.Dihedral or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (CnsMRParser.AngleDb - 85)) | (1 << (CnsMRParser.BondedTo - 85)) | (1 << (CnsMRParser.HBonded - 85)) | (1 << (CnsMRParser.Improper - 85)) | (1 << (CnsMRParser.NBFix - 85)) | (1 << (CnsMRParser.NonB - 85)) | (1 << (CnsMRParser.VDWOff - 85)) | (1 << (CnsMRParser.Verbose - 85)))) != 0):
                self.state = 1632
                self.parameter_statement()
                self.state = 1637
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1638
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def UB(self):
            return self.getToken(CnsMRParser.UB, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(CnsMRParser.Improper, 0)

        def Mult(self):
            return self.getToken(CnsMRParser.Mult, 0)

        def HBonded(self):
            return self.getToken(CnsMRParser.HBonded, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def NBFix(self):
            return self.getToken(CnsMRParser.NBFix, 0)

        def NonB(self):
            return self.getToken(CnsMRParser.NonB, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def VDWOff(self):
            return self.getToken(CnsMRParser.VDWOff, 0)

        def Verbose(self):
            return self.getToken(CnsMRParser.Verbose, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_parameter_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_statement" ):
                listener.enterParameter_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_statement" ):
                listener.exitParameter_statement(self)




    def parameter_statement(self):

        localctx = CnsMRParser.Parameter_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_parameter_statement)
        self._la = 0 # Token type
        try:
            self.state = 1695
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.AngleDb]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1640
                self.match(CnsMRParser.AngleDb)
                self.state = 1641
                self.match(CnsMRParser.Simple_name)
                self.state = 1642
                self.match(CnsMRParser.Simple_name)
                self.state = 1643
                self.match(CnsMRParser.Simple_name)
                self.state = 1644
                self.number_s()
                self.state = 1645
                self.number_s()
                self.state = 1650
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.UB:
                    self.state = 1646
                    self.match(CnsMRParser.UB)
                    self.state = 1647
                    self.number_s()
                    self.state = 1648
                    self.number_s()


                pass
            elif token in [CnsMRParser.BondedTo]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1652
                self.match(CnsMRParser.BondedTo)
                self.state = 1653
                self.match(CnsMRParser.Simple_name)
                self.state = 1654
                self.match(CnsMRParser.Simple_name)
                self.state = 1655
                self.number_s()
                self.state = 1656
                self.number_s()
                pass
            elif token in [CnsMRParser.Dihedral, CnsMRParser.Improper]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1658
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Dihedral or _la==CnsMRParser.Improper):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1659
                self.match(CnsMRParser.Simple_name)
                self.state = 1660
                self.match(CnsMRParser.Simple_name)
                self.state = 1661
                self.match(CnsMRParser.Simple_name)
                self.state = 1662
                self.match(CnsMRParser.Simple_name)
                self.state = 1665
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Mult:
                    self.state = 1663
                    self.match(CnsMRParser.Mult)
                    self.state = 1664
                    self.match(CnsMRParser.Integer)


                self.state = 1667
                self.number_s()
                self.state = 1668
                self.match(CnsMRParser.Integer)
                self.state = 1669
                self.number_s()
                pass
            elif token in [CnsMRParser.HBonded]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1671
                self.match(CnsMRParser.HBonded)
                self.state = 1672
                self.match(CnsMRParser.Simple_names)
                self.state = 1673
                self.match(CnsMRParser.Simple_names)
                self.state = 1674
                self.number_s()
                self.state = 1675
                self.number_s()
                pass
            elif token in [CnsMRParser.NBFix]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1677
                self.match(CnsMRParser.NBFix)
                self.state = 1678
                self.match(CnsMRParser.Simple_name)
                self.state = 1679
                self.match(CnsMRParser.Simple_name)
                self.state = 1680
                self.number_s()
                self.state = 1681
                self.number_s()
                self.state = 1682
                self.number_s()
                self.state = 1683
                self.number_s()
                pass
            elif token in [CnsMRParser.NonB]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1685
                self.match(CnsMRParser.NonB)
                self.state = 1686
                self.match(CnsMRParser.Simple_name)
                self.state = 1687
                self.number_s()
                self.state = 1688
                self.number_s()
                self.state = 1689
                self.number_s()
                self.state = 1690
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset, CnsMRParser.VDWOff]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1692
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Reset or _la==CnsMRParser.VDWOff):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1693
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Verbose]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1694
                self.match(CnsMRParser.Verbose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign_loop" ):
                listener.enterNoe_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign_loop" ):
                listener.exitNoe_assign_loop(self)




    def noe_assign_loop(self):

        localctx = CnsMRParser.Noe_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_noe_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1697
            self.match(CnsMRParser.For)
            self.state = 1698
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1699
            self.match(CnsMRParser.In_CF)
            self.state = 1700
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1719
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1704
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1701
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1706
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1707
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1713
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1718
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1721
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1722
            self.match(CnsMRParser.Loop)
            self.state = 1723
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1729
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Noe or _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1727
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1724
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1725
                    self.noe_assign()
                    pass
                elif token in [CnsMRParser.Noe]:
                    self.state = 1726
                    self.distance_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1731
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1732
            self.match(CnsMRParser.End)
            self.state = 1733
            self.match(CnsMRParser.Loop)
            self.state = 1734
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = CnsMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1736
            self.match(CnsMRParser.For)
            self.state = 1737
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1738
            self.match(CnsMRParser.In_CF)
            self.state = 1739
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1758
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1740
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1745
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1746
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1751
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1752
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1757
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1760
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1761
            self.match(CnsMRParser.Loop)
            self.state = 1762
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Dihedral))) != 0) or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1766
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1763
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1764
                    self.dihedral_assign()
                    pass
                elif token in [CnsMRParser.Restraints, CnsMRParser.Dihedral]:
                    self.state = 1765
                    self.dihedral_angle_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1770
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1771
            self.match(CnsMRParser.End)
            self.state = 1772
            self.match(CnsMRParser.Loop)
            self.state = 1773
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign_loop" ):
                listener.enterSani_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign_loop" ):
                listener.exitSani_assign_loop(self)




    def sani_assign_loop(self):

        localctx = CnsMRParser.Sani_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_sani_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1775
            self.match(CnsMRParser.For)
            self.state = 1776
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1777
            self.match(CnsMRParser.In_CF)
            self.state = 1778
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1797
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 1782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1779
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1788
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1785
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1790
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1791
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1796
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1799
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1800
            self.match(CnsMRParser.Loop)
            self.state = 1801
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1807
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Sanisotropy or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1805
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1802
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1803
                    self.sani_assign()
                    pass
                elif token in [CnsMRParser.Sanisotropy]:
                    self.state = 1804
                    self.rdc_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1810
            self.match(CnsMRParser.End)
            self.state = 1811
            self.match(CnsMRParser.Loop)
            self.state = 1812
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign_loop" ):
                listener.enterCoup_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign_loop" ):
                listener.exitCoup_assign_loop(self)




    def coup_assign_loop(self):

        localctx = CnsMRParser.Coup_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_coup_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1814
            self.match(CnsMRParser.For)
            self.state = 1815
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1816
            self.match(CnsMRParser.In_CF)
            self.state = 1817
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1836
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 1821
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1818
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1823
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1827
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1824
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1829
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1830
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1835
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1838
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1839
            self.match(CnsMRParser.Loop)
            self.state = 1840
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1846
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Coupling or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1844
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1841
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1842
                    self.coup_assign()
                    pass
                elif token in [CnsMRParser.Coupling]:
                    self.state = 1843
                    self.coupling_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1848
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1849
            self.match(CnsMRParser.End)
            self.state = 1850
            self.match(CnsMRParser.Loop)
            self.state = 1851
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign_loop" ):
                listener.enterCarbon_shift_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign_loop" ):
                listener.exitCarbon_shift_assign_loop(self)




    def carbon_shift_assign_loop(self):

        localctx = CnsMRParser.Carbon_shift_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_carbon_shift_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1853
            self.match(CnsMRParser.For)
            self.state = 1854
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1855
            self.match(CnsMRParser.In_CF)
            self.state = 1856
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1875
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1860
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1857
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1862
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1866
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1863
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1868
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1869
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1874
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1877
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1878
            self.match(CnsMRParser.Loop)
            self.state = 1879
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Carbon or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1883
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1880
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1881
                    self.carbon_shift_assign()
                    pass
                elif token in [CnsMRParser.Carbon]:
                    self.state = 1882
                    self.carbon_shift_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1887
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1888
            self.match(CnsMRParser.End)
            self.state = 1889
            self.match(CnsMRParser.Loop)
            self.state = 1890
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_group_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def plane_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_groupContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_groupContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_group_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_group_loop" ):
                listener.enterPlane_group_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_group_loop" ):
                listener.exitPlane_group_loop(self)




    def plane_group_loop(self):

        localctx = CnsMRParser.Plane_group_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_plane_group_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1892
            self.match(CnsMRParser.For)
            self.state = 1893
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1894
            self.match(CnsMRParser.In_CF)
            self.state = 1895
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1914
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1896
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1901
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1902
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1907
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1911
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1908
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1913
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1916
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1917
            self.match(CnsMRParser.Loop)
            self.state = 1918
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1924
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Plane) | (1 << CnsMRParser.Group))) != 0) or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1922
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1919
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Group]:
                    self.state = 1920
                    self.plane_group()
                    pass
                elif token in [CnsMRParser.Restraints, CnsMRParser.Plane]:
                    self.state = 1921
                    self.plane_restraint()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1926
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1927
            self.match(CnsMRParser.End)
            self.state = 1928
            self.match(CnsMRParser.Loop)
            self.state = 1929
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[55] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




