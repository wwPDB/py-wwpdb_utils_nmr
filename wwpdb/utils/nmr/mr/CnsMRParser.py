# Generated from CnsMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,239,1557,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,157,8,0,10,0,12,0,160,9,
        0,1,0,1,0,1,1,1,1,5,1,166,8,1,10,1,12,1,169,9,1,1,1,1,1,1,2,3,2,
        174,8,2,1,2,1,2,5,2,178,8,2,10,2,12,2,181,9,2,1,2,1,2,1,3,3,3,186,
        8,3,1,3,1,3,5,3,190,8,3,10,3,12,3,193,9,3,1,3,1,3,1,4,3,4,198,8,
        4,1,4,1,4,5,4,202,8,4,10,4,12,4,205,9,4,1,4,1,4,1,5,1,5,5,5,211,
        8,5,10,5,12,5,214,9,5,1,5,1,5,1,6,1,6,5,6,220,8,6,10,6,12,6,223,
        9,6,1,6,1,6,1,7,1,7,5,7,229,8,7,10,7,12,7,232,9,7,1,7,1,7,1,8,1,
        8,5,8,238,8,8,10,8,12,8,241,9,8,1,8,1,8,1,9,1,9,5,9,247,8,9,10,9,
        12,9,250,9,9,1,9,1,9,1,10,1,10,5,10,256,8,10,10,10,12,10,259,9,10,
        1,10,1,10,1,11,1,11,5,11,265,8,11,10,11,12,11,268,9,11,1,11,1,11,
        1,12,1,12,5,12,274,8,12,10,12,12,12,277,9,12,1,12,1,12,1,13,1,13,
        3,13,283,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,3,13,298,8,13,1,13,1,13,1,13,3,13,303,8,13,1,13,1,
        13,1,13,1,13,1,13,3,13,310,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,3,13,319,8,13,1,13,1,13,1,13,3,13,324,8,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,5,13,333,8,13,10,13,12,13,336,9,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,3,13,347,8,13,1,13,1,13,1,13,1,13,
        3,13,353,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,3,13,366,8,13,1,13,1,13,1,13,5,13,371,8,13,10,13,12,13,374,
        9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,398,8,13,
        10,13,12,13,401,9,13,1,13,1,13,1,13,3,13,406,8,13,1,13,3,13,409,
        8,13,1,14,1,14,1,14,1,14,1,14,3,14,416,8,14,1,14,3,14,419,8,14,1,
        14,5,14,422,8,14,10,14,12,14,425,9,14,1,14,1,14,3,14,429,8,14,1,
        14,1,14,1,14,5,14,434,8,14,10,14,12,14,437,9,14,1,15,1,15,3,15,441,
        8,15,1,15,1,15,1,15,3,15,446,8,15,1,15,1,15,1,15,1,15,1,15,3,15,
        453,8,15,1,16,1,16,3,16,457,8,16,1,16,1,16,1,16,3,16,462,8,16,1,
        16,1,16,1,16,3,16,467,8,16,1,16,1,16,1,16,3,16,472,8,16,1,16,1,16,
        1,16,3,16,477,8,16,1,16,1,16,1,16,3,16,482,8,16,1,16,1,16,1,16,3,
        16,487,8,16,1,16,3,16,490,8,16,1,17,1,17,1,17,1,17,3,17,496,8,17,
        1,17,1,17,1,17,3,17,501,8,17,1,17,1,17,1,17,3,17,506,8,17,1,17,1,
        17,1,17,1,17,3,17,512,8,17,1,17,1,17,3,17,516,8,17,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,5,19,530,8,19,10,19,
        12,19,533,9,19,1,19,1,19,1,19,3,19,538,8,19,1,20,1,20,3,20,542,8,
        20,1,20,1,20,1,20,3,20,547,8,20,1,20,3,20,550,8,20,1,21,1,21,3,21,
        554,8,21,1,21,1,21,1,21,3,21,559,8,21,1,21,1,21,1,21,3,21,564,8,
        21,1,21,1,21,3,21,568,8,21,1,21,1,21,1,21,1,21,3,21,574,8,21,1,21,
        1,21,3,21,578,8,21,1,21,1,21,3,21,582,8,21,1,21,3,21,585,8,21,3,
        21,587,8,21,1,21,1,21,3,21,591,8,21,1,22,1,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,3,23,602,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,3,23,612,8,23,1,23,1,23,1,23,3,23,617,8,23,1,23,1,23,1,23,3,
        23,622,8,23,1,23,1,23,1,23,1,23,1,23,3,23,629,8,23,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,3,24,640,8,24,1,24,3,24,643,8,24,1,
        25,1,25,1,25,3,25,648,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,3,25,659,8,25,1,25,1,25,1,25,1,25,3,25,665,8,25,1,25,1,25,
        3,25,669,8,25,1,25,1,25,1,25,3,25,674,8,25,1,25,1,25,1,25,3,25,679,
        8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,688,8,25,1,25,3,25,
        691,8,25,1,25,3,25,694,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,1,26,1,26,3,26,706,8,26,1,26,1,26,1,26,1,26,1,26,3,26,713,8,26,
        1,27,1,27,1,27,3,27,718,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,3,27,730,8,27,1,27,1,27,1,27,3,27,735,8,27,1,27,1,
        27,1,27,3,27,740,8,27,1,27,1,27,1,27,3,27,745,8,27,1,27,1,27,1,27,
        3,27,750,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,759,8,27,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,
        29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,786,
        8,30,1,30,1,30,1,30,3,30,791,8,30,1,30,1,30,1,30,1,30,3,30,797,8,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,807,8,30,1,30,3,
        30,810,8,30,1,30,1,30,1,30,3,30,815,8,30,1,31,1,31,1,31,3,31,820,
        8,31,1,31,1,31,3,31,824,8,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,
        1,33,1,33,1,33,3,33,836,8,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,
        1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,3,38,860,8,38,1,39,1,39,1,39,1,40,1,40,1,40,3,40,868,8,
        40,1,40,1,40,1,40,1,40,1,40,3,40,875,8,40,1,40,3,40,878,8,40,1,40,
        3,40,881,8,40,1,40,1,40,1,40,3,40,886,8,40,1,40,1,40,1,40,3,40,891,
        8,40,1,40,1,40,1,40,3,40,896,8,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,3,40,906,8,40,1,40,1,40,1,40,3,40,911,8,40,1,40,1,40,1,
        40,3,40,916,8,40,1,40,1,40,3,40,920,8,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,3,40,929,8,40,1,40,3,40,932,8,40,1,40,1,40,1,40,1,40,1,
        40,3,40,939,8,40,1,40,3,40,942,8,40,1,40,3,40,945,8,40,1,40,3,40,
        948,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,
        960,8,41,1,41,1,41,1,41,1,41,1,41,3,41,967,8,41,1,41,1,41,1,41,1,
        41,1,41,3,41,974,8,41,1,42,1,42,1,42,3,42,979,8,42,1,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,991,8,42,1,42,1,42,1,42,
        3,42,996,8,42,1,42,1,42,1,42,3,42,1001,8,42,1,42,1,42,1,42,1,42,
        1,42,3,42,1008,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        3,43,1019,8,43,1,44,1,44,1,44,3,44,1024,8,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1038,8,44,1,44,1,44,
        1,44,3,44,1043,8,44,1,44,1,44,1,44,3,44,1048,8,44,1,44,1,44,1,44,
        1,44,1,44,3,44,1055,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,1072,8,46,1,46,1,46,1,46,
        3,46,1077,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1086,8,46,
        1,46,1,46,1,46,3,46,1091,8,46,1,46,1,46,1,46,3,46,1096,8,46,1,46,
        1,46,1,46,3,46,1101,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,
        1110,8,46,1,46,3,46,1113,8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,
        1121,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,3,47,1136,8,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,5,49,
        1145,8,49,10,49,12,49,1148,9,49,1,50,1,50,1,50,5,50,1153,8,50,10,
        50,12,50,1156,9,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,3,51,1170,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1186,8,51,3,51,1188,8,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,3,51,1207,8,51,1,51,1,51,1,51,3,51,1212,8,51,
        3,51,1214,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1223,8,51,
        1,51,1,51,3,51,1227,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,3,51,1238,8,51,1,51,1,51,3,51,1242,8,51,1,51,1,51,3,51,1246,
        8,51,1,51,3,51,1249,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,3,51,1262,8,51,1,51,3,51,1265,8,51,1,51,1,51,1,51,
        1,51,1,51,3,51,1272,8,51,3,51,1274,8,51,1,51,1,51,1,51,1,51,1,51,
        3,51,1281,8,51,1,51,1,51,1,51,3,51,1286,8,51,3,51,1288,8,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,3,51,1308,8,51,1,51,1,51,1,51,1,51,1,51,1,51,
        5,51,1316,8,51,10,51,12,51,1319,9,51,1,52,1,52,1,53,1,53,1,54,1,
        54,1,55,1,55,1,56,1,56,1,56,5,56,1332,8,56,10,56,12,56,1335,9,56,
        1,56,3,56,1338,8,56,3,56,1340,8,56,1,56,1,56,5,56,1344,8,56,10,56,
        12,56,1347,9,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,
        1,58,1,58,3,58,1361,8,58,1,59,1,59,1,59,3,59,1366,8,59,1,60,1,60,
        1,60,3,60,1371,8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1380,
        8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,1442,8,62,10,62,
        12,62,1445,9,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,5,62,1459,8,62,10,62,12,62,1462,9,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1501,8,62,1,63,1,63,1,
        63,1,63,1,63,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,3,65,1517,
        8,65,1,66,1,66,1,66,1,66,1,66,5,66,1524,8,66,10,66,12,66,1527,9,
        66,1,66,5,66,1530,8,66,10,66,12,66,1533,9,66,1,66,5,66,1536,8,66,
        10,66,12,66,1539,9,66,3,66,1541,8,66,1,66,1,66,1,66,1,66,1,66,5,
        66,1548,8,66,10,66,12,66,1551,9,66,1,66,1,66,1,66,1,66,1,66,3,334,
        372,399,1,102,67,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
        36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,
        80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
        118,120,122,124,126,128,130,132,0,7,1,0,143,144,2,0,136,136,145,
        145,3,0,136,136,138,138,155,155,2,0,136,136,138,138,1,0,123,124,
        1,0,181,185,1,0,220,226,1866,0,158,1,0,0,0,2,163,1,0,0,0,4,173,1,
        0,0,0,6,185,1,0,0,0,8,197,1,0,0,0,10,208,1,0,0,0,12,217,1,0,0,0,
        14,226,1,0,0,0,16,235,1,0,0,0,18,244,1,0,0,0,20,253,1,0,0,0,22,262,
        1,0,0,0,24,271,1,0,0,0,26,408,1,0,0,0,28,410,1,0,0,0,30,452,1,0,
        0,0,32,489,1,0,0,0,34,515,1,0,0,0,36,517,1,0,0,0,38,537,1,0,0,0,
        40,549,1,0,0,0,42,590,1,0,0,0,44,592,1,0,0,0,46,628,1,0,0,0,48,630,
        1,0,0,0,50,693,1,0,0,0,52,695,1,0,0,0,54,758,1,0,0,0,56,760,1,0,
        0,0,58,769,1,0,0,0,60,814,1,0,0,0,62,816,1,0,0,0,64,825,1,0,0,0,
        66,829,1,0,0,0,68,839,1,0,0,0,70,842,1,0,0,0,72,845,1,0,0,0,74,848,
        1,0,0,0,76,851,1,0,0,0,78,861,1,0,0,0,80,947,1,0,0,0,82,949,1,0,
        0,0,84,1007,1,0,0,0,86,1009,1,0,0,0,88,1054,1,0,0,0,90,1056,1,0,
        0,0,92,1120,1,0,0,0,94,1122,1,0,0,0,96,1137,1,0,0,0,98,1141,1,0,
        0,0,100,1149,1,0,0,0,102,1307,1,0,0,0,104,1320,1,0,0,0,106,1322,
        1,0,0,0,108,1324,1,0,0,0,110,1326,1,0,0,0,112,1328,1,0,0,0,114,1350,
        1,0,0,0,116,1360,1,0,0,0,118,1362,1,0,0,0,120,1367,1,0,0,0,122,1379,
        1,0,0,0,124,1500,1,0,0,0,126,1502,1,0,0,0,128,1507,1,0,0,0,130,1513,
        1,0,0,0,132,1518,1,0,0,0,134,157,3,2,1,0,135,157,3,4,2,0,136,157,
        3,6,3,0,137,157,3,8,4,0,138,157,3,10,5,0,139,157,3,12,6,0,140,157,
        3,14,7,0,141,157,3,16,8,0,142,157,3,18,9,0,143,157,3,20,10,0,144,
        157,3,22,11,0,145,157,3,24,12,0,146,157,3,112,56,0,147,157,3,114,
        57,0,148,157,3,128,64,0,149,157,3,28,14,0,150,157,3,36,18,0,151,
        157,3,48,24,0,152,157,3,38,19,0,153,157,3,44,22,0,154,157,3,52,26,
        0,155,157,3,56,28,0,156,134,1,0,0,0,156,135,1,0,0,0,156,136,1,0,
        0,0,156,137,1,0,0,0,156,138,1,0,0,0,156,139,1,0,0,0,156,140,1,0,
        0,0,156,141,1,0,0,0,156,142,1,0,0,0,156,143,1,0,0,0,156,144,1,0,
        0,0,156,145,1,0,0,0,156,146,1,0,0,0,156,147,1,0,0,0,156,148,1,0,
        0,0,156,149,1,0,0,0,156,150,1,0,0,0,156,151,1,0,0,0,156,152,1,0,
        0,0,156,153,1,0,0,0,156,154,1,0,0,0,156,155,1,0,0,0,157,160,1,0,
        0,0,158,156,1,0,0,0,158,159,1,0,0,0,159,161,1,0,0,0,160,158,1,0,
        0,0,161,162,5,0,0,1,162,1,1,0,0,0,163,167,5,3,0,0,164,166,3,26,13,
        0,165,164,1,0,0,0,166,169,1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,
        0,168,170,1,0,0,0,169,167,1,0,0,0,170,171,5,2,0,0,171,3,1,0,0,0,
        172,174,5,48,0,0,173,172,1,0,0,0,173,174,1,0,0,0,174,175,1,0,0,0,
        175,179,5,49,0,0,176,178,3,34,17,0,177,176,1,0,0,0,178,181,1,0,0,
        0,179,177,1,0,0,0,179,180,1,0,0,0,180,182,1,0,0,0,181,179,1,0,0,
        0,182,183,5,2,0,0,183,5,1,0,0,0,184,186,5,48,0,0,185,184,1,0,0,0,
        185,186,1,0,0,0,186,187,1,0,0,0,187,191,5,52,0,0,188,190,3,38,19,
        0,189,188,1,0,0,0,190,193,1,0,0,0,191,189,1,0,0,0,191,192,1,0,0,
        0,192,194,1,0,0,0,193,191,1,0,0,0,194,195,5,2,0,0,195,7,1,0,0,0,
        196,198,5,48,0,0,197,196,1,0,0,0,197,198,1,0,0,0,198,199,1,0,0,0,
        199,203,5,56,0,0,200,202,3,42,21,0,201,200,1,0,0,0,202,205,1,0,0,
        0,203,201,1,0,0,0,203,204,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,
        0,206,207,5,2,0,0,207,9,1,0,0,0,208,212,5,59,0,0,209,211,3,46,23,
        0,210,209,1,0,0,0,211,214,1,0,0,0,212,210,1,0,0,0,212,213,1,0,0,
        0,213,215,1,0,0,0,214,212,1,0,0,0,215,216,5,2,0,0,216,11,1,0,0,0,
        217,221,5,62,0,0,218,220,3,50,25,0,219,218,1,0,0,0,220,223,1,0,0,
        0,221,219,1,0,0,0,221,222,1,0,0,0,222,224,1,0,0,0,223,221,1,0,0,
        0,224,225,5,2,0,0,225,13,1,0,0,0,226,230,5,63,0,0,227,229,3,54,27,
        0,228,227,1,0,0,0,229,232,1,0,0,0,230,228,1,0,0,0,230,231,1,0,0,
        0,231,233,1,0,0,0,232,230,1,0,0,0,233,234,5,2,0,0,234,15,1,0,0,0,
        235,239,5,69,0,0,236,238,3,60,30,0,237,236,1,0,0,0,238,241,1,0,0,
        0,239,237,1,0,0,0,239,240,1,0,0,0,240,242,1,0,0,0,241,239,1,0,0,
        0,242,243,5,2,0,0,243,17,1,0,0,0,244,248,5,78,0,0,245,247,3,80,40,
        0,246,245,1,0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,
        0,249,251,1,0,0,0,250,248,1,0,0,0,251,252,5,2,0,0,252,19,1,0,0,0,
        253,257,5,83,0,0,254,256,3,84,42,0,255,254,1,0,0,0,256,259,1,0,0,
        0,257,255,1,0,0,0,257,258,1,0,0,0,258,260,1,0,0,0,259,257,1,0,0,
        0,260,261,5,2,0,0,261,21,1,0,0,0,262,266,5,84,0,0,263,265,3,88,44,
        0,264,263,1,0,0,0,265,268,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,
        0,267,269,1,0,0,0,268,266,1,0,0,0,269,270,5,2,0,0,270,23,1,0,0,0,
        271,275,5,85,0,0,272,274,3,92,46,0,273,272,1,0,0,0,274,277,1,0,0,
        0,275,273,1,0,0,0,275,276,1,0,0,0,276,278,1,0,0,0,277,275,1,0,0,
        0,278,279,5,2,0,0,279,25,1,0,0,0,280,282,5,4,0,0,281,283,5,149,0,
        0,282,281,1,0,0,0,282,283,1,0,0,0,283,284,1,0,0,0,284,409,5,171,
        0,0,285,409,3,28,14,0,286,287,5,6,0,0,287,288,5,143,0,0,288,409,
        3,108,54,0,289,290,5,7,0,0,290,291,5,166,0,0,291,409,5,165,0,0,292,
        293,5,8,0,0,293,294,5,143,0,0,294,409,3,108,54,0,295,297,5,9,0,0,
        296,298,5,149,0,0,297,296,1,0,0,0,297,298,1,0,0,0,298,299,1,0,0,
        0,299,409,3,108,54,0,300,302,5,10,0,0,301,303,5,149,0,0,302,301,
        1,0,0,0,302,303,1,0,0,0,303,304,1,0,0,0,304,409,5,143,0,0,305,306,
        5,11,0,0,306,409,5,143,0,0,307,309,5,12,0,0,308,310,5,149,0,0,309,
        308,1,0,0,0,309,310,1,0,0,0,310,311,1,0,0,0,311,409,5,136,0,0,312,
        313,5,13,0,0,313,409,5,35,0,0,314,315,5,13,0,0,315,316,5,36,0,0,
        316,318,5,37,0,0,317,319,5,149,0,0,318,317,1,0,0,0,318,319,1,0,0,
        0,319,320,1,0,0,0,320,321,3,108,54,0,321,323,5,38,0,0,322,324,5,
        149,0,0,323,322,1,0,0,0,323,324,1,0,0,0,324,325,1,0,0,0,325,326,
        3,108,54,0,326,409,1,0,0,0,327,328,5,14,0,0,328,329,5,143,0,0,329,
        330,5,143,0,0,330,409,3,108,54,0,331,333,5,15,0,0,332,331,1,0,0,
        0,333,336,1,0,0,0,334,335,1,0,0,0,334,332,1,0,0,0,335,337,1,0,0,
        0,336,334,1,0,0,0,337,409,5,2,0,0,338,339,5,16,0,0,339,340,5,143,
        0,0,340,409,5,136,0,0,341,342,5,17,0,0,342,343,5,143,0,0,343,409,
        5,136,0,0,344,346,5,18,0,0,345,347,5,149,0,0,346,345,1,0,0,0,346,
        347,1,0,0,0,347,348,1,0,0,0,348,409,5,136,0,0,349,409,5,19,0,0,350,
        352,5,20,0,0,351,353,5,149,0,0,352,351,1,0,0,0,352,353,1,0,0,0,353,
        354,1,0,0,0,354,409,5,136,0,0,355,356,5,21,0,0,356,357,5,169,0,0,
        357,409,5,168,0,0,358,359,5,22,0,0,359,360,3,30,15,0,360,361,5,2,
        0,0,361,409,1,0,0,0,362,363,5,23,0,0,363,365,5,25,0,0,364,366,5,
        149,0,0,365,364,1,0,0,0,365,366,1,0,0,0,366,367,1,0,0,0,367,409,
        3,108,54,0,368,372,5,24,0,0,369,371,5,143,0,0,370,369,1,0,0,0,371,
        374,1,0,0,0,372,373,1,0,0,0,372,370,1,0,0,0,373,375,1,0,0,0,374,
        372,1,0,0,0,375,409,5,2,0,0,376,409,5,26,0,0,377,378,5,27,0,0,378,
        379,5,143,0,0,379,409,3,108,54,0,380,381,5,28,0,0,381,382,5,143,
        0,0,382,409,3,108,54,0,383,384,5,29,0,0,384,385,5,143,0,0,385,409,
        3,108,54,0,386,387,5,30,0,0,387,388,5,143,0,0,388,409,3,108,54,0,
        389,390,5,31,0,0,390,391,5,143,0,0,391,409,3,108,54,0,392,393,5,
        32,0,0,393,394,5,143,0,0,394,409,3,108,54,0,395,399,5,33,0,0,396,
        398,5,143,0,0,397,396,1,0,0,0,398,401,1,0,0,0,399,400,1,0,0,0,399,
        397,1,0,0,0,400,402,1,0,0,0,401,399,1,0,0,0,402,409,5,2,0,0,403,
        405,5,34,0,0,404,406,5,149,0,0,405,404,1,0,0,0,405,406,1,0,0,0,406,
        407,1,0,0,0,407,409,3,108,54,0,408,280,1,0,0,0,408,285,1,0,0,0,408,
        286,1,0,0,0,408,289,1,0,0,0,408,292,1,0,0,0,408,295,1,0,0,0,408,
        300,1,0,0,0,408,305,1,0,0,0,408,307,1,0,0,0,408,312,1,0,0,0,408,
        314,1,0,0,0,408,327,1,0,0,0,408,334,1,0,0,0,408,338,1,0,0,0,408,
        341,1,0,0,0,408,344,1,0,0,0,408,349,1,0,0,0,408,350,1,0,0,0,408,
        355,1,0,0,0,408,358,1,0,0,0,408,362,1,0,0,0,408,368,1,0,0,0,408,
        376,1,0,0,0,408,377,1,0,0,0,408,380,1,0,0,0,408,383,1,0,0,0,408,
        386,1,0,0,0,408,389,1,0,0,0,408,392,1,0,0,0,408,395,1,0,0,0,408,
        403,1,0,0,0,409,27,1,0,0,0,410,411,5,5,0,0,411,412,3,96,48,0,412,
        413,3,96,48,0,413,415,3,104,52,0,414,416,3,104,52,0,415,414,1,0,
        0,0,415,416,1,0,0,0,416,418,1,0,0,0,417,419,3,104,52,0,418,417,1,
        0,0,0,418,419,1,0,0,0,419,423,1,0,0,0,420,422,3,32,16,0,421,420,
        1,0,0,0,422,425,1,0,0,0,423,421,1,0,0,0,423,424,1,0,0,0,424,435,
        1,0,0,0,425,423,1,0,0,0,426,428,5,131,0,0,427,429,5,5,0,0,428,427,
        1,0,0,0,428,429,1,0,0,0,429,430,1,0,0,0,430,431,3,96,48,0,431,432,
        3,96,48,0,432,434,1,0,0,0,433,426,1,0,0,0,434,437,1,0,0,0,435,433,
        1,0,0,0,435,436,1,0,0,0,436,29,1,0,0,0,437,435,1,0,0,0,438,440,5,
        39,0,0,439,441,5,149,0,0,440,439,1,0,0,0,440,441,1,0,0,0,441,442,
        1,0,0,0,442,453,3,108,54,0,443,445,5,40,0,0,444,446,5,149,0,0,445,
        444,1,0,0,0,445,446,1,0,0,0,446,447,1,0,0,0,447,453,3,108,54,0,448,
        449,5,41,0,0,449,453,3,96,48,0,450,451,5,42,0,0,451,453,3,96,48,
        0,452,438,1,0,0,0,452,443,1,0,0,0,452,448,1,0,0,0,452,450,1,0,0,
        0,453,31,1,0,0,0,454,456,5,43,0,0,455,457,5,149,0,0,456,455,1,0,
        0,0,456,457,1,0,0,0,457,458,1,0,0,0,458,490,3,110,55,0,459,461,5,
        44,0,0,460,462,5,149,0,0,461,460,1,0,0,0,461,462,1,0,0,0,462,463,
        1,0,0,0,463,490,3,110,55,0,464,466,5,55,0,0,465,467,5,149,0,0,466,
        465,1,0,0,0,466,467,1,0,0,0,467,468,1,0,0,0,468,490,3,110,55,0,469,
        471,5,45,0,0,470,472,5,149,0,0,471,470,1,0,0,0,471,472,1,0,0,0,472,
        473,1,0,0,0,473,490,3,110,55,0,474,476,5,46,0,0,475,477,5,149,0,
        0,476,475,1,0,0,0,476,477,1,0,0,0,477,478,1,0,0,0,478,490,3,110,
        55,0,479,481,5,47,0,0,480,482,5,149,0,0,481,480,1,0,0,0,481,482,
        1,0,0,0,482,483,1,0,0,0,483,490,3,110,55,0,484,486,5,12,0,0,485,
        487,5,149,0,0,486,485,1,0,0,0,486,487,1,0,0,0,487,488,1,0,0,0,488,
        490,3,110,55,0,489,454,1,0,0,0,489,459,1,0,0,0,489,464,1,0,0,0,489,
        469,1,0,0,0,489,474,1,0,0,0,489,479,1,0,0,0,489,484,1,0,0,0,490,
        33,1,0,0,0,491,516,3,36,18,0,492,516,3,132,66,0,493,495,5,12,0,0,
        494,496,5,149,0,0,495,494,1,0,0,0,495,496,1,0,0,0,496,497,1,0,0,
        0,497,516,5,136,0,0,498,500,5,50,0,0,499,501,5,149,0,0,500,499,1,
        0,0,0,500,501,1,0,0,0,501,502,1,0,0,0,502,516,5,136,0,0,503,505,
        5,20,0,0,504,506,5,149,0,0,505,504,1,0,0,0,505,506,1,0,0,0,506,507,
        1,0,0,0,507,516,5,136,0,0,508,516,5,26,0,0,509,511,5,28,0,0,510,
        512,5,149,0,0,511,510,1,0,0,0,511,512,1,0,0,0,512,513,1,0,0,0,513,
        516,3,108,54,0,514,516,5,51,0,0,515,491,1,0,0,0,515,492,1,0,0,0,
        515,493,1,0,0,0,515,498,1,0,0,0,515,503,1,0,0,0,515,508,1,0,0,0,
        515,509,1,0,0,0,515,514,1,0,0,0,516,35,1,0,0,0,517,518,5,5,0,0,518,
        519,3,96,48,0,519,520,3,96,48,0,520,521,3,96,48,0,521,522,3,96,48,
        0,522,523,3,104,52,0,523,524,3,104,52,0,524,525,3,104,52,0,525,526,
        5,136,0,0,526,37,1,0,0,0,527,531,5,53,0,0,528,530,3,40,20,0,529,
        528,1,0,0,0,530,533,1,0,0,0,531,529,1,0,0,0,531,532,1,0,0,0,532,
        534,1,0,0,0,533,531,1,0,0,0,534,538,5,2,0,0,535,538,5,35,0,0,536,
        538,5,51,0,0,537,527,1,0,0,0,537,535,1,0,0,0,537,536,1,0,0,0,538,
        39,1,0,0,0,539,541,5,54,0,0,540,542,5,149,0,0,541,540,1,0,0,0,541,
        542,1,0,0,0,542,543,1,0,0,0,543,550,3,96,48,0,544,546,5,55,0,0,545,
        547,5,149,0,0,546,545,1,0,0,0,546,547,1,0,0,0,547,548,1,0,0,0,548,
        550,3,108,54,0,549,539,1,0,0,0,549,544,1,0,0,0,550,41,1,0,0,0,551,
        553,5,57,0,0,552,554,5,149,0,0,553,552,1,0,0,0,553,554,1,0,0,0,554,
        555,1,0,0,0,555,591,5,136,0,0,556,558,5,58,0,0,557,559,5,149,0,0,
        558,557,1,0,0,0,558,559,1,0,0,0,559,560,1,0,0,0,560,586,5,146,0,
        0,561,563,3,108,54,0,562,564,5,134,0,0,563,562,1,0,0,0,563,564,1,
        0,0,0,564,565,1,0,0,0,565,567,3,108,54,0,566,568,5,134,0,0,567,566,
        1,0,0,0,567,568,1,0,0,0,568,569,1,0,0,0,569,570,3,108,54,0,570,587,
        1,0,0,0,571,573,5,129,0,0,572,574,5,149,0,0,573,572,1,0,0,0,573,
        574,1,0,0,0,574,575,1,0,0,0,575,577,3,96,48,0,576,578,5,134,0,0,
        577,576,1,0,0,0,577,578,1,0,0,0,578,584,1,0,0,0,579,581,5,130,0,
        0,580,582,5,149,0,0,581,580,1,0,0,0,581,582,1,0,0,0,582,583,1,0,
        0,0,583,585,3,96,48,0,584,579,1,0,0,0,584,585,1,0,0,0,585,587,1,
        0,0,0,586,561,1,0,0,0,586,571,1,0,0,0,587,588,1,0,0,0,588,589,5,
        147,0,0,589,591,1,0,0,0,590,551,1,0,0,0,590,556,1,0,0,0,591,43,1,
        0,0,0,592,593,5,5,0,0,593,594,3,96,48,0,594,595,3,104,52,0,595,596,
        3,104,52,0,596,597,3,104,52,0,597,45,1,0,0,0,598,629,3,48,24,0,599,
        601,5,10,0,0,600,602,5,149,0,0,601,600,1,0,0,0,601,602,1,0,0,0,602,
        603,1,0,0,0,603,629,5,143,0,0,604,605,5,60,0,0,605,606,3,108,54,
        0,606,607,3,108,54,0,607,608,3,108,54,0,608,629,1,0,0,0,609,611,
        5,61,0,0,610,612,5,149,0,0,611,610,1,0,0,0,611,612,1,0,0,0,612,613,
        1,0,0,0,613,629,3,108,54,0,614,616,5,18,0,0,615,617,5,149,0,0,616,
        615,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,629,5,136,0,0,619,
        621,5,21,0,0,620,622,5,167,0,0,621,620,1,0,0,0,621,622,1,0,0,0,622,
        623,1,0,0,0,623,629,5,168,0,0,624,625,5,23,0,0,625,626,5,25,0,0,
        626,629,3,108,54,0,627,629,5,26,0,0,628,598,1,0,0,0,628,599,1,0,
        0,0,628,604,1,0,0,0,628,609,1,0,0,0,628,614,1,0,0,0,628,619,1,0,
        0,0,628,624,1,0,0,0,628,627,1,0,0,0,629,47,1,0,0,0,630,631,5,5,0,
        0,631,632,3,96,48,0,632,633,3,96,48,0,633,634,3,96,48,0,634,635,
        3,96,48,0,635,636,3,96,48,0,636,637,3,96,48,0,637,639,3,104,52,0,
        638,640,3,104,52,0,639,638,1,0,0,0,639,640,1,0,0,0,640,642,1,0,0,
        0,641,643,3,104,52,0,642,641,1,0,0,0,642,643,1,0,0,0,643,49,1,0,
        0,0,644,694,3,52,26,0,645,647,5,10,0,0,646,648,5,149,0,0,647,646,
        1,0,0,0,647,648,1,0,0,0,648,649,1,0,0,0,649,694,5,143,0,0,650,651,
        5,60,0,0,651,652,3,108,54,0,652,653,3,108,54,0,653,654,3,108,54,
        0,654,655,3,108,54,0,655,694,1,0,0,0,656,658,5,12,0,0,657,659,5,
        149,0,0,658,657,1,0,0,0,658,659,1,0,0,0,659,660,1,0,0,0,660,694,
        5,136,0,0,661,662,5,61,0,0,662,664,3,108,54,0,663,665,3,108,54,0,
        664,663,1,0,0,0,664,665,1,0,0,0,665,694,1,0,0,0,666,668,5,18,0,0,
        667,669,5,149,0,0,668,667,1,0,0,0,668,669,1,0,0,0,669,670,1,0,0,
        0,670,694,5,136,0,0,671,673,5,20,0,0,672,674,5,149,0,0,673,672,1,
        0,0,0,673,674,1,0,0,0,674,675,1,0,0,0,675,694,5,136,0,0,676,678,
        5,21,0,0,677,679,5,167,0,0,678,677,1,0,0,0,678,679,1,0,0,0,679,680,
        1,0,0,0,680,694,5,168,0,0,681,682,5,23,0,0,682,683,5,25,0,0,683,
        690,3,108,54,0,684,691,5,89,0,0,685,687,5,10,0,0,686,688,5,149,0,
        0,687,686,1,0,0,0,687,688,1,0,0,0,688,689,1,0,0,0,689,691,5,143,
        0,0,690,684,1,0,0,0,690,685,1,0,0,0,691,694,1,0,0,0,692,694,5,26,
        0,0,693,644,1,0,0,0,693,645,1,0,0,0,693,650,1,0,0,0,693,656,1,0,
        0,0,693,661,1,0,0,0,693,666,1,0,0,0,693,671,1,0,0,0,693,676,1,0,
        0,0,693,681,1,0,0,0,693,692,1,0,0,0,694,51,1,0,0,0,695,696,5,5,0,
        0,696,697,3,96,48,0,697,698,3,96,48,0,698,699,3,96,48,0,699,705,
        3,96,48,0,700,701,3,96,48,0,701,702,3,96,48,0,702,703,3,96,48,0,
        703,704,3,96,48,0,704,706,1,0,0,0,705,700,1,0,0,0,705,706,1,0,0,
        0,706,707,1,0,0,0,707,708,3,104,52,0,708,712,3,104,52,0,709,710,
        3,104,52,0,710,711,3,104,52,0,711,713,1,0,0,0,712,709,1,0,0,0,712,
        713,1,0,0,0,713,53,1,0,0,0,714,759,3,56,28,0,715,717,5,10,0,0,716,
        718,5,149,0,0,717,716,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,719,
        759,5,143,0,0,720,721,5,64,0,0,721,722,5,136,0,0,722,723,5,136,0,
        0,723,724,3,108,54,0,724,725,3,108,54,0,725,726,3,108,54,0,726,759,
        1,0,0,0,727,729,5,61,0,0,728,730,5,149,0,0,729,728,1,0,0,0,729,730,
        1,0,0,0,730,731,1,0,0,0,731,759,3,108,54,0,732,734,5,18,0,0,733,
        735,5,149,0,0,734,733,1,0,0,0,734,735,1,0,0,0,735,736,1,0,0,0,736,
        759,5,136,0,0,737,739,5,65,0,0,738,740,5,149,0,0,739,738,1,0,0,0,
        739,740,1,0,0,0,740,741,1,0,0,0,741,759,3,108,54,0,742,744,5,66,
        0,0,743,745,5,149,0,0,744,743,1,0,0,0,744,745,1,0,0,0,745,746,1,
        0,0,0,746,759,3,108,54,0,747,749,5,21,0,0,748,750,5,167,0,0,749,
        748,1,0,0,0,749,750,1,0,0,0,750,751,1,0,0,0,751,759,5,168,0,0,752,
        753,5,23,0,0,753,754,5,25,0,0,754,759,3,108,54,0,755,759,3,58,29,
        0,756,759,5,26,0,0,757,759,5,68,0,0,758,714,1,0,0,0,758,715,1,0,
        0,0,758,720,1,0,0,0,758,727,1,0,0,0,758,732,1,0,0,0,758,737,1,0,
        0,0,758,742,1,0,0,0,758,747,1,0,0,0,758,752,1,0,0,0,758,755,1,0,
        0,0,758,756,1,0,0,0,758,757,1,0,0,0,759,55,1,0,0,0,760,761,5,5,0,
        0,761,762,3,96,48,0,762,763,3,96,48,0,763,764,3,96,48,0,764,765,
        3,96,48,0,765,766,3,96,48,0,766,767,3,104,52,0,767,768,3,104,52,
        0,768,57,1,0,0,0,769,770,5,67,0,0,770,771,3,96,48,0,771,772,3,108,
        54,0,772,773,3,108,54,0,773,59,1,0,0,0,774,815,3,62,31,0,775,815,
        3,64,32,0,776,815,3,66,33,0,777,815,3,68,34,0,778,815,3,70,35,0,
        779,815,3,72,36,0,780,815,3,74,37,0,781,815,3,76,38,0,782,815,3,
        78,39,0,783,785,5,10,0,0,784,786,5,149,0,0,785,784,1,0,0,0,785,786,
        1,0,0,0,786,787,1,0,0,0,787,815,5,143,0,0,788,790,5,77,0,0,789,791,
        5,149,0,0,790,789,1,0,0,0,790,791,1,0,0,0,791,792,1,0,0,0,792,815,
        3,108,54,0,793,794,5,61,0,0,794,796,3,108,54,0,795,797,3,108,54,
        0,796,795,1,0,0,0,796,797,1,0,0,0,797,815,1,0,0,0,798,799,5,21,0,
        0,799,815,5,168,0,0,800,801,5,23,0,0,801,802,5,25,0,0,802,809,3,
        108,54,0,803,810,5,89,0,0,804,806,5,10,0,0,805,807,5,149,0,0,806,
        805,1,0,0,0,806,807,1,0,0,0,807,808,1,0,0,0,808,810,5,143,0,0,809,
        803,1,0,0,0,809,804,1,0,0,0,810,811,1,0,0,0,811,812,5,143,0,0,812,
        815,1,0,0,0,813,815,5,26,0,0,814,774,1,0,0,0,814,775,1,0,0,0,814,
        776,1,0,0,0,814,777,1,0,0,0,814,778,1,0,0,0,814,779,1,0,0,0,814,
        780,1,0,0,0,814,781,1,0,0,0,814,782,1,0,0,0,814,783,1,0,0,0,814,
        788,1,0,0,0,814,793,1,0,0,0,814,798,1,0,0,0,814,800,1,0,0,0,814,
        813,1,0,0,0,815,61,1,0,0,0,816,817,5,70,0,0,817,819,3,96,48,0,818,
        820,3,96,48,0,819,818,1,0,0,0,819,820,1,0,0,0,820,821,1,0,0,0,821,
        823,3,108,54,0,822,824,3,108,54,0,823,822,1,0,0,0,823,824,1,0,0,
        0,824,63,1,0,0,0,825,826,5,67,0,0,826,827,3,96,48,0,827,828,3,108,
        54,0,828,65,1,0,0,0,829,830,5,71,0,0,830,831,3,96,48,0,831,832,3,
        96,48,0,832,833,3,96,48,0,833,835,5,143,0,0,834,836,5,137,0,0,835,
        834,1,0,0,0,835,836,1,0,0,0,836,837,1,0,0,0,837,838,5,143,0,0,838,
        67,1,0,0,0,839,840,5,72,0,0,840,841,3,96,48,0,841,69,1,0,0,0,842,
        843,5,63,0,0,843,844,3,96,48,0,844,71,1,0,0,0,845,846,5,73,0,0,846,
        847,3,96,48,0,847,73,1,0,0,0,848,849,5,74,0,0,849,850,3,96,48,0,
        850,75,1,0,0,0,851,852,5,75,0,0,852,853,5,143,0,0,853,854,3,96,48,
        0,854,855,3,96,48,0,855,856,3,96,48,0,856,857,3,96,48,0,857,859,
        3,96,48,0,858,860,3,96,48,0,859,858,1,0,0,0,859,860,1,0,0,0,860,
        77,1,0,0,0,861,862,5,76,0,0,862,863,3,96,48,0,863,79,1,0,0,0,864,
        948,3,82,41,0,865,867,5,10,0,0,866,868,5,149,0,0,867,866,1,0,0,0,
        867,868,1,0,0,0,868,869,1,0,0,0,869,948,5,143,0,0,870,948,5,79,0,
        0,871,872,5,64,0,0,872,874,5,136,0,0,873,875,5,136,0,0,874,873,1,
        0,0,0,874,875,1,0,0,0,875,877,1,0,0,0,876,878,5,136,0,0,877,876,
        1,0,0,0,877,878,1,0,0,0,878,880,1,0,0,0,879,881,5,136,0,0,880,879,
        1,0,0,0,880,881,1,0,0,0,881,882,1,0,0,0,882,948,3,108,54,0,883,885,
        5,77,0,0,884,886,5,149,0,0,885,884,1,0,0,0,885,886,1,0,0,0,886,887,
        1,0,0,0,887,948,3,108,54,0,888,890,5,61,0,0,889,891,5,149,0,0,890,
        889,1,0,0,0,890,891,1,0,0,0,891,892,1,0,0,0,892,948,3,108,54,0,893,
        895,5,18,0,0,894,896,5,149,0,0,895,894,1,0,0,0,895,896,1,0,0,0,896,
        897,1,0,0,0,897,948,5,136,0,0,898,899,5,80,0,0,899,900,5,136,0,0,
        900,901,5,136,0,0,901,905,5,136,0,0,902,903,5,136,0,0,903,904,5,
        136,0,0,904,906,5,136,0,0,905,902,1,0,0,0,905,906,1,0,0,0,906,910,
        1,0,0,0,907,908,5,136,0,0,908,909,5,136,0,0,909,911,5,136,0,0,910,
        907,1,0,0,0,910,911,1,0,0,0,911,915,1,0,0,0,912,913,5,136,0,0,913,
        914,5,136,0,0,914,916,5,136,0,0,915,912,1,0,0,0,915,916,1,0,0,0,
        916,948,1,0,0,0,917,919,5,21,0,0,918,920,5,167,0,0,919,918,1,0,0,
        0,919,920,1,0,0,0,920,921,1,0,0,0,921,948,5,168,0,0,922,923,5,23,
        0,0,923,924,5,25,0,0,924,931,3,108,54,0,925,932,5,89,0,0,926,928,
        5,10,0,0,927,929,5,149,0,0,928,927,1,0,0,0,928,929,1,0,0,0,929,930,
        1,0,0,0,930,932,5,143,0,0,931,925,1,0,0,0,931,926,1,0,0,0,932,948,
        1,0,0,0,933,948,5,26,0,0,934,935,5,81,0,0,935,936,5,82,0,0,936,938,
        5,136,0,0,937,939,5,136,0,0,938,937,1,0,0,0,938,939,1,0,0,0,939,
        941,1,0,0,0,940,942,5,136,0,0,941,940,1,0,0,0,941,942,1,0,0,0,942,
        944,1,0,0,0,943,945,5,136,0,0,944,943,1,0,0,0,944,945,1,0,0,0,945,
        948,1,0,0,0,946,948,5,68,0,0,947,864,1,0,0,0,947,865,1,0,0,0,947,
        870,1,0,0,0,947,871,1,0,0,0,947,883,1,0,0,0,947,888,1,0,0,0,947,
        893,1,0,0,0,947,898,1,0,0,0,947,917,1,0,0,0,947,922,1,0,0,0,947,
        933,1,0,0,0,947,934,1,0,0,0,947,946,1,0,0,0,948,81,1,0,0,0,949,950,
        5,5,0,0,950,951,3,96,48,0,951,952,3,96,48,0,952,953,3,96,48,0,953,
        959,3,96,48,0,954,955,3,96,48,0,955,956,3,96,48,0,956,957,3,96,48,
        0,957,958,3,96,48,0,958,960,1,0,0,0,959,954,1,0,0,0,959,960,1,0,
        0,0,960,966,1,0,0,0,961,962,3,96,48,0,962,963,3,96,48,0,963,964,
        3,96,48,0,964,965,3,96,48,0,965,967,1,0,0,0,966,961,1,0,0,0,966,
        967,1,0,0,0,967,973,1,0,0,0,968,969,3,96,48,0,969,970,3,96,48,0,
        970,971,3,96,48,0,971,972,3,96,48,0,972,974,1,0,0,0,973,968,1,0,
        0,0,973,974,1,0,0,0,974,83,1,0,0,0,975,1008,3,86,43,0,976,978,5,
        10,0,0,977,979,5,149,0,0,978,977,1,0,0,0,978,979,1,0,0,0,979,980,
        1,0,0,0,980,1008,5,143,0,0,981,982,5,60,0,0,982,983,3,108,54,0,983,
        984,3,108,54,0,984,985,3,108,54,0,985,986,3,108,54,0,986,987,3,108,
        54,0,987,1008,1,0,0,0,988,990,5,61,0,0,989,991,5,149,0,0,990,989,
        1,0,0,0,990,991,1,0,0,0,991,992,1,0,0,0,992,1008,3,108,54,0,993,
        995,5,18,0,0,994,996,5,149,0,0,995,994,1,0,0,0,995,996,1,0,0,0,996,
        997,1,0,0,0,997,1008,5,136,0,0,998,1000,5,21,0,0,999,1001,5,167,
        0,0,1000,999,1,0,0,0,1000,1001,1,0,0,0,1001,1002,1,0,0,0,1002,1008,
        5,168,0,0,1003,1004,5,23,0,0,1004,1005,5,25,0,0,1005,1008,3,108,
        54,0,1006,1008,5,26,0,0,1007,975,1,0,0,0,1007,976,1,0,0,0,1007,981,
        1,0,0,0,1007,988,1,0,0,0,1007,993,1,0,0,0,1007,998,1,0,0,0,1007,
        1003,1,0,0,0,1007,1006,1,0,0,0,1008,85,1,0,0,0,1009,1010,5,5,0,0,
        1010,1011,3,96,48,0,1011,1012,3,96,48,0,1012,1013,3,96,48,0,1013,
        1014,3,96,48,0,1014,1015,3,96,48,0,1015,1016,3,96,48,0,1016,1018,
        3,104,52,0,1017,1019,3,104,52,0,1018,1017,1,0,0,0,1018,1019,1,0,
        0,0,1019,87,1,0,0,0,1020,1055,3,90,45,0,1021,1023,5,10,0,0,1022,
        1024,5,149,0,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1025,1,0,
        0,0,1025,1055,5,143,0,0,1026,1027,5,60,0,0,1027,1028,3,108,54,0,
        1028,1029,3,108,54,0,1029,1030,3,108,54,0,1030,1031,3,108,54,0,1031,
        1032,3,108,54,0,1032,1033,3,108,54,0,1033,1034,3,108,54,0,1034,1055,
        1,0,0,0,1035,1037,5,61,0,0,1036,1038,5,149,0,0,1037,1036,1,0,0,0,
        1037,1038,1,0,0,0,1038,1039,1,0,0,0,1039,1055,3,108,54,0,1040,1042,
        5,18,0,0,1041,1043,5,149,0,0,1042,1041,1,0,0,0,1042,1043,1,0,0,0,
        1043,1044,1,0,0,0,1044,1055,5,136,0,0,1045,1047,5,21,0,0,1046,1048,
        5,167,0,0,1047,1046,1,0,0,0,1047,1048,1,0,0,0,1048,1049,1,0,0,0,
        1049,1055,5,168,0,0,1050,1051,5,23,0,0,1051,1052,5,25,0,0,1052,1055,
        3,108,54,0,1053,1055,5,26,0,0,1054,1020,1,0,0,0,1054,1021,1,0,0,
        0,1054,1026,1,0,0,0,1054,1035,1,0,0,0,1054,1040,1,0,0,0,1054,1045,
        1,0,0,0,1054,1050,1,0,0,0,1054,1053,1,0,0,0,1055,89,1,0,0,0,1056,
        1057,5,5,0,0,1057,1058,3,96,48,0,1058,1059,3,96,48,0,1059,1060,3,
        96,48,0,1060,1061,3,96,48,0,1061,1062,3,96,48,0,1062,1063,3,96,48,
        0,1063,1064,3,96,48,0,1064,1065,3,96,48,0,1065,1066,3,104,52,0,1066,
        1067,3,104,52,0,1067,91,1,0,0,0,1068,1121,3,94,47,0,1069,1071,5,
        10,0,0,1070,1072,5,149,0,0,1071,1070,1,0,0,0,1071,1072,1,0,0,0,1072,
        1073,1,0,0,0,1073,1121,5,143,0,0,1074,1076,5,86,0,0,1075,1077,5,
        149,0,0,1076,1075,1,0,0,0,1076,1077,1,0,0,0,1077,1078,1,0,0,0,1078,
        1121,5,143,0,0,1079,1080,5,64,0,0,1080,1081,5,136,0,0,1081,1082,
        5,136,0,0,1082,1121,3,108,54,0,1083,1085,5,77,0,0,1084,1086,5,149,
        0,0,1085,1084,1,0,0,0,1085,1086,1,0,0,0,1086,1087,1,0,0,0,1087,1121,
        3,108,54,0,1088,1090,5,61,0,0,1089,1091,5,149,0,0,1090,1089,1,0,
        0,0,1090,1091,1,0,0,0,1091,1092,1,0,0,0,1092,1121,3,108,54,0,1093,
        1095,5,18,0,0,1094,1096,5,149,0,0,1095,1094,1,0,0,0,1095,1096,1,
        0,0,0,1096,1097,1,0,0,0,1097,1121,5,136,0,0,1098,1100,5,21,0,0,1099,
        1101,5,167,0,0,1100,1099,1,0,0,0,1100,1101,1,0,0,0,1101,1102,1,0,
        0,0,1102,1121,5,168,0,0,1103,1104,5,23,0,0,1104,1105,5,25,0,0,1105,
        1112,3,108,54,0,1106,1113,5,89,0,0,1107,1109,5,10,0,0,1108,1110,
        5,149,0,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,1111,1,0,0,0,
        1111,1113,5,143,0,0,1112,1106,1,0,0,0,1112,1107,1,0,0,0,1113,1121,
        1,0,0,0,1114,1121,5,26,0,0,1115,1116,5,81,0,0,1116,1117,5,87,0,0,
        1117,1118,5,136,0,0,1118,1121,5,136,0,0,1119,1121,5,68,0,0,1120,
        1068,1,0,0,0,1120,1069,1,0,0,0,1120,1074,1,0,0,0,1120,1079,1,0,0,
        0,1120,1083,1,0,0,0,1120,1088,1,0,0,0,1120,1093,1,0,0,0,1120,1098,
        1,0,0,0,1120,1103,1,0,0,0,1120,1114,1,0,0,0,1120,1115,1,0,0,0,1120,
        1119,1,0,0,0,1121,93,1,0,0,0,1122,1123,5,5,0,0,1123,1124,3,96,48,
        0,1124,1125,3,96,48,0,1125,1126,3,96,48,0,1126,1127,3,96,48,0,1127,
        1128,3,96,48,0,1128,1129,3,96,48,0,1129,1130,3,96,48,0,1130,1131,
        3,96,48,0,1131,1132,3,96,48,0,1132,1133,3,96,48,0,1133,1135,3,96,
        48,0,1134,1136,3,96,48,0,1135,1134,1,0,0,0,1135,1136,1,0,0,0,1136,
        95,1,0,0,0,1137,1138,5,146,0,0,1138,1139,3,98,49,0,1139,1140,5,147,
        0,0,1140,97,1,0,0,0,1141,1146,3,100,50,0,1142,1143,5,131,0,0,1143,
        1145,3,100,50,0,1144,1142,1,0,0,0,1145,1148,1,0,0,0,1146,1144,1,
        0,0,0,1146,1147,1,0,0,0,1147,99,1,0,0,0,1148,1146,1,0,0,0,1149,1154,
        3,102,51,0,1150,1151,5,132,0,0,1151,1153,3,102,51,0,1152,1150,1,
        0,0,0,1153,1156,1,0,0,0,1154,1152,1,0,0,0,1154,1155,1,0,0,0,1155,
        101,1,0,0,0,1156,1154,1,0,0,0,1157,1158,6,51,-1,0,1158,1159,5,146,
        0,0,1159,1160,3,98,49,0,1160,1161,5,147,0,0,1161,1308,1,0,0,0,1162,
        1308,5,89,0,0,1163,1164,5,91,0,0,1164,1165,7,0,0,0,1165,1166,7,1,
        0,0,1166,1308,7,0,0,0,1167,1169,5,92,0,0,1168,1170,5,161,0,0,1169,
        1168,1,0,0,0,1169,1170,1,0,0,0,1170,1171,1,0,0,0,1171,1172,5,162,
        0,0,1172,1173,5,163,0,0,1173,1308,3,106,53,0,1174,1175,5,93,0,0,
        1175,1308,3,102,51,30,1176,1177,5,94,0,0,1177,1308,3,102,51,29,1178,
        1179,5,95,0,0,1179,1308,3,102,51,28,1180,1187,5,96,0,0,1181,1188,
        5,144,0,0,1182,1185,5,143,0,0,1183,1184,5,148,0,0,1184,1186,5,143,
        0,0,1185,1183,1,0,0,0,1185,1186,1,0,0,0,1186,1188,1,0,0,0,1187,1181,
        1,0,0,0,1187,1182,1,0,0,0,1188,1308,1,0,0,0,1189,1190,5,97,0,0,1190,
        1191,3,106,53,0,1191,1192,3,106,53,0,1192,1193,3,106,53,0,1193,1194,
        3,106,53,0,1194,1195,3,106,53,0,1195,1196,3,106,53,0,1196,1308,1,
        0,0,0,1197,1308,5,98,0,0,1198,1199,5,99,0,0,1199,1308,5,136,0,0,
        1200,1308,5,100,0,0,1201,1213,5,101,0,0,1202,1214,5,144,0,0,1203,
        1206,5,143,0,0,1204,1205,5,148,0,0,1205,1207,5,143,0,0,1206,1204,
        1,0,0,0,1206,1207,1,0,0,0,1207,1214,1,0,0,0,1208,1211,5,139,0,0,
        1209,1210,5,148,0,0,1210,1212,5,139,0,0,1211,1209,1,0,0,0,1211,1212,
        1,0,0,0,1212,1214,1,0,0,0,1213,1202,1,0,0,0,1213,1203,1,0,0,0,1213,
        1208,1,0,0,0,1214,1308,1,0,0,0,1215,1308,5,102,0,0,1216,1217,5,133,
        0,0,1217,1308,3,102,51,20,1218,1219,5,103,0,0,1219,1220,5,146,0,
        0,1220,1222,3,106,53,0,1221,1223,5,134,0,0,1222,1221,1,0,0,0,1222,
        1223,1,0,0,0,1223,1224,1,0,0,0,1224,1226,3,106,53,0,1225,1227,5,
        134,0,0,1226,1225,1,0,0,0,1226,1227,1,0,0,0,1227,1228,1,0,0,0,1228,
        1229,3,106,53,0,1229,1230,5,147,0,0,1230,1231,5,104,0,0,1231,1232,
        3,106,53,0,1232,1308,1,0,0,0,1233,1234,5,103,0,0,1234,1235,5,146,
        0,0,1235,1237,5,129,0,0,1236,1238,5,149,0,0,1237,1236,1,0,0,0,1237,
        1238,1,0,0,0,1238,1239,1,0,0,0,1239,1241,3,96,48,0,1240,1242,5,134,
        0,0,1241,1240,1,0,0,0,1241,1242,1,0,0,0,1242,1248,1,0,0,0,1243,1245,
        5,130,0,0,1244,1246,5,149,0,0,1245,1244,1,0,0,0,1245,1246,1,0,0,
        0,1246,1247,1,0,0,0,1247,1249,3,96,48,0,1248,1243,1,0,0,0,1248,1249,
        1,0,0,0,1249,1250,1,0,0,0,1250,1251,5,147,0,0,1251,1252,5,104,0,
        0,1252,1253,3,106,53,0,1253,1308,1,0,0,0,1254,1308,5,105,0,0,1255,
        1308,5,106,0,0,1256,1264,5,107,0,0,1257,1265,5,145,0,0,1258,1261,
        5,136,0,0,1259,1260,5,148,0,0,1260,1262,5,136,0,0,1261,1259,1,0,
        0,0,1261,1262,1,0,0,0,1262,1265,1,0,0,0,1263,1265,5,155,0,0,1264,
        1257,1,0,0,0,1264,1258,1,0,0,0,1264,1263,1,0,0,0,1265,1308,1,0,0,
        0,1266,1273,5,108,0,0,1267,1274,5,144,0,0,1268,1271,5,143,0,0,1269,
        1270,5,148,0,0,1270,1272,5,143,0,0,1271,1269,1,0,0,0,1271,1272,1,
        0,0,0,1272,1274,1,0,0,0,1273,1267,1,0,0,0,1273,1268,1,0,0,0,1274,
        1308,1,0,0,0,1275,1287,5,110,0,0,1276,1288,5,144,0,0,1277,1280,5,
        143,0,0,1278,1279,5,148,0,0,1279,1281,5,143,0,0,1280,1278,1,0,0,
        0,1280,1281,1,0,0,0,1281,1288,1,0,0,0,1282,1285,5,139,0,0,1283,1284,
        5,148,0,0,1284,1286,5,139,0,0,1285,1283,1,0,0,0,1285,1286,1,0,0,
        0,1286,1288,1,0,0,0,1287,1276,1,0,0,0,1287,1277,1,0,0,0,1287,1282,
        1,0,0,0,1288,1308,1,0,0,0,1289,1290,5,111,0,0,1290,1291,3,106,53,
        0,1291,1292,3,106,53,0,1292,1293,3,106,53,0,1293,1294,3,106,53,0,
        1294,1295,3,106,53,0,1295,1296,3,106,53,0,1296,1308,1,0,0,0,1297,
        1308,5,112,0,0,1298,1308,5,113,0,0,1299,1308,5,114,0,0,1300,1308,
        5,115,0,0,1301,1308,5,116,0,0,1302,1308,5,117,0,0,1303,1308,5,118,
        0,0,1304,1308,5,119,0,0,1305,1308,5,120,0,0,1306,1308,5,121,0,0,
        1307,1157,1,0,0,0,1307,1162,1,0,0,0,1307,1163,1,0,0,0,1307,1167,
        1,0,0,0,1307,1174,1,0,0,0,1307,1176,1,0,0,0,1307,1178,1,0,0,0,1307,
        1180,1,0,0,0,1307,1189,1,0,0,0,1307,1197,1,0,0,0,1307,1198,1,0,0,
        0,1307,1200,1,0,0,0,1307,1201,1,0,0,0,1307,1215,1,0,0,0,1307,1216,
        1,0,0,0,1307,1218,1,0,0,0,1307,1233,1,0,0,0,1307,1254,1,0,0,0,1307,
        1255,1,0,0,0,1307,1256,1,0,0,0,1307,1266,1,0,0,0,1307,1275,1,0,0,
        0,1307,1289,1,0,0,0,1307,1297,1,0,0,0,1307,1298,1,0,0,0,1307,1299,
        1,0,0,0,1307,1300,1,0,0,0,1307,1301,1,0,0,0,1307,1302,1,0,0,0,1307,
        1303,1,0,0,0,1307,1304,1,0,0,0,1307,1305,1,0,0,0,1307,1306,1,0,0,
        0,1308,1317,1,0,0,0,1309,1310,10,33,0,0,1310,1311,5,90,0,0,1311,
        1316,3,106,53,0,1312,1313,10,13,0,0,1313,1314,5,109,0,0,1314,1316,
        3,106,53,0,1315,1309,1,0,0,0,1315,1312,1,0,0,0,1316,1319,1,0,0,0,
        1317,1315,1,0,0,0,1317,1318,1,0,0,0,1318,103,1,0,0,0,1319,1317,1,
        0,0,0,1320,1321,7,2,0,0,1321,105,1,0,0,0,1322,1323,7,3,0,0,1323,
        107,1,0,0,0,1324,1325,7,2,0,0,1325,109,1,0,0,0,1326,1327,7,3,0,0,
        1327,111,1,0,0,0,1328,1339,5,88,0,0,1329,1337,5,173,0,0,1330,1332,
        5,176,0,0,1331,1330,1,0,0,0,1332,1335,1,0,0,0,1333,1331,1,0,0,0,
        1333,1334,1,0,0,0,1334,1338,1,0,0,0,1335,1333,1,0,0,0,1336,1338,
        5,177,0,0,1337,1333,1,0,0,0,1337,1336,1,0,0,0,1338,1340,1,0,0,0,
        1339,1329,1,0,0,0,1339,1340,1,0,0,0,1340,1341,1,0,0,0,1341,1345,
        5,174,0,0,1342,1344,5,176,0,0,1343,1342,1,0,0,0,1344,1347,1,0,0,
        0,1345,1343,1,0,0,0,1345,1346,1,0,0,0,1346,1348,1,0,0,0,1347,1345,
        1,0,0,0,1348,1349,5,175,0,0,1349,113,1,0,0,0,1350,1351,5,122,0,0,
        1351,1352,3,116,58,0,1352,1353,3,96,48,0,1353,115,1,0,0,0,1354,1355,
        7,4,0,0,1355,1356,3,118,59,0,1356,1357,5,179,0,0,1357,1361,1,0,0,
        0,1358,1359,5,125,0,0,1359,1361,3,126,63,0,1360,1354,1,0,0,0,1360,
        1358,1,0,0,0,1361,117,1,0,0,0,1362,1365,5,189,0,0,1363,1364,5,180,
        0,0,1364,1366,3,120,60,0,1365,1363,1,0,0,0,1365,1366,1,0,0,0,1366,
        119,1,0,0,0,1367,1370,3,122,61,0,1368,1369,7,5,0,0,1369,1371,3,120,
        60,0,1370,1368,1,0,0,0,1370,1371,1,0,0,0,1371,121,1,0,0,0,1372,1380,
        5,189,0,0,1373,1380,3,124,62,0,1374,1380,5,187,0,0,1375,1380,5,188,
        0,0,1376,1380,5,212,0,0,1377,1380,5,213,0,0,1378,1380,5,214,0,0,
        1379,1372,1,0,0,0,1379,1373,1,0,0,0,1379,1374,1,0,0,0,1379,1375,
        1,0,0,0,1379,1376,1,0,0,0,1379,1377,1,0,0,0,1379,1378,1,0,0,0,1380,
        123,1,0,0,0,1381,1382,5,190,0,0,1382,1383,5,216,0,0,1383,1384,3,
        122,61,0,1384,1385,5,179,0,0,1385,1501,1,0,0,0,1386,1387,5,191,0,
        0,1387,1388,5,216,0,0,1388,1389,3,122,61,0,1389,1390,5,179,0,0,1390,
        1501,1,0,0,0,1391,1392,5,193,0,0,1392,1393,5,216,0,0,1393,1394,3,
        122,61,0,1394,1395,5,179,0,0,1395,1501,1,0,0,0,1396,1397,5,194,0,
        0,1397,1398,5,216,0,0,1398,1399,3,122,61,0,1399,1400,5,179,0,0,1400,
        1501,1,0,0,0,1401,1402,5,195,0,0,1402,1403,5,216,0,0,1403,1404,3,
        122,61,0,1404,1405,5,179,0,0,1405,1501,1,0,0,0,1406,1407,5,196,0,
        0,1407,1408,5,216,0,0,1408,1409,3,122,61,0,1409,1410,5,179,0,0,1410,
        1501,1,0,0,0,1411,1412,5,197,0,0,1412,1413,5,216,0,0,1413,1414,3,
        122,61,0,1414,1415,5,179,0,0,1415,1501,1,0,0,0,1416,1417,5,198,0,
        0,1417,1418,5,216,0,0,1418,1419,3,122,61,0,1419,1420,5,179,0,0,1420,
        1501,1,0,0,0,1421,1422,5,199,0,0,1422,1423,5,216,0,0,1423,1424,3,
        122,61,0,1424,1425,5,179,0,0,1425,1501,1,0,0,0,1426,1427,5,200,0,
        0,1427,1428,5,216,0,0,1428,1429,3,122,61,0,1429,1430,5,179,0,0,1430,
        1501,1,0,0,0,1431,1432,5,201,0,0,1432,1433,5,216,0,0,1433,1434,3,
        122,61,0,1434,1435,5,179,0,0,1435,1501,1,0,0,0,1436,1437,5,202,0,
        0,1437,1438,5,216,0,0,1438,1443,3,122,61,0,1439,1440,5,186,0,0,1440,
        1442,3,122,61,0,1441,1439,1,0,0,0,1442,1445,1,0,0,0,1443,1441,1,
        0,0,0,1443,1444,1,0,0,0,1444,1446,1,0,0,0,1445,1443,1,0,0,0,1446,
        1447,5,179,0,0,1447,1501,1,0,0,0,1448,1449,5,203,0,0,1449,1450,5,
        216,0,0,1450,1451,3,122,61,0,1451,1452,5,179,0,0,1452,1501,1,0,0,
        0,1453,1454,5,204,0,0,1454,1455,5,216,0,0,1455,1460,3,122,61,0,1456,
        1457,5,186,0,0,1457,1459,3,122,61,0,1458,1456,1,0,0,0,1459,1462,
        1,0,0,0,1460,1458,1,0,0,0,1460,1461,1,0,0,0,1461,1463,1,0,0,0,1462,
        1460,1,0,0,0,1463,1464,5,179,0,0,1464,1501,1,0,0,0,1465,1466,5,205,
        0,0,1466,1467,5,216,0,0,1467,1468,3,122,61,0,1468,1469,5,186,0,0,
        1469,1470,3,122,61,0,1470,1471,5,179,0,0,1471,1501,1,0,0,0,1472,
        1473,5,206,0,0,1473,1474,5,216,0,0,1474,1475,3,122,61,0,1475,1476,
        5,179,0,0,1476,1501,1,0,0,0,1477,1478,5,207,0,0,1478,1479,5,216,
        0,0,1479,1501,5,179,0,0,1480,1481,5,208,0,0,1481,1482,5,216,0,0,
        1482,1483,3,122,61,0,1483,1484,5,179,0,0,1484,1501,1,0,0,0,1485,
        1486,5,209,0,0,1486,1487,5,216,0,0,1487,1488,3,122,61,0,1488,1489,
        5,179,0,0,1489,1501,1,0,0,0,1490,1491,5,210,0,0,1491,1492,5,216,
        0,0,1492,1493,3,122,61,0,1493,1494,5,179,0,0,1494,1501,1,0,0,0,1495,
        1496,5,211,0,0,1496,1497,5,216,0,0,1497,1498,3,122,61,0,1498,1499,
        5,179,0,0,1499,1501,1,0,0,0,1500,1381,1,0,0,0,1500,1386,1,0,0,0,
        1500,1391,1,0,0,0,1500,1396,1,0,0,0,1500,1401,1,0,0,0,1500,1406,
        1,0,0,0,1500,1411,1,0,0,0,1500,1416,1,0,0,0,1500,1421,1,0,0,0,1500,
        1426,1,0,0,0,1500,1431,1,0,0,0,1500,1436,1,0,0,0,1500,1448,1,0,0,
        0,1500,1453,1,0,0,0,1500,1465,1,0,0,0,1500,1472,1,0,0,0,1500,1477,
        1,0,0,0,1500,1480,1,0,0,0,1500,1485,1,0,0,0,1500,1490,1,0,0,0,1500,
        1495,1,0,0,0,1501,125,1,0,0,0,1502,1503,7,6,0,0,1503,1504,5,218,
        0,0,1504,1505,5,227,0,0,1505,1506,5,219,0,0,1506,127,1,0,0,0,1507,
        1508,5,126,0,0,1508,1509,5,213,0,0,1509,1510,5,180,0,0,1510,1511,
        3,130,65,0,1511,1512,5,179,0,0,1512,129,1,0,0,0,1513,1516,3,122,
        61,0,1514,1515,7,5,0,0,1515,1517,3,130,65,0,1516,1514,1,0,0,0,1516,
        1517,1,0,0,0,1517,131,1,0,0,0,1518,1519,5,127,0,0,1519,1520,5,234,
        0,0,1520,1521,5,231,0,0,1521,1540,5,229,0,0,1522,1524,5,232,0,0,
        1523,1522,1,0,0,0,1524,1527,1,0,0,0,1525,1523,1,0,0,0,1525,1526,
        1,0,0,0,1526,1541,1,0,0,0,1527,1525,1,0,0,0,1528,1530,5,233,0,0,
        1529,1528,1,0,0,0,1530,1533,1,0,0,0,1531,1529,1,0,0,0,1531,1532,
        1,0,0,0,1532,1541,1,0,0,0,1533,1531,1,0,0,0,1534,1536,5,235,0,0,
        1535,1534,1,0,0,0,1536,1539,1,0,0,0,1537,1535,1,0,0,0,1537,1538,
        1,0,0,0,1538,1541,1,0,0,0,1539,1537,1,0,0,0,1540,1525,1,0,0,0,1540,
        1531,1,0,0,0,1540,1537,1,0,0,0,1541,1542,1,0,0,0,1542,1543,5,230,
        0,0,1543,1544,5,128,0,0,1544,1549,5,238,0,0,1545,1548,3,128,64,0,
        1546,1548,3,36,18,0,1547,1545,1,0,0,0,1547,1546,1,0,0,0,1548,1551,
        1,0,0,0,1549,1547,1,0,0,0,1549,1550,1,0,0,0,1550,1552,1,0,0,0,1551,
        1549,1,0,0,0,1552,1553,5,2,0,0,1553,1554,5,128,0,0,1554,1555,5,238,
        0,0,1555,133,1,0,0,0,185,156,158,167,173,179,185,191,197,203,212,
        221,230,239,248,257,266,275,282,297,302,309,318,323,334,346,352,
        365,372,399,405,408,415,418,423,428,435,440,445,452,456,461,466,
        471,476,481,486,489,495,500,505,511,515,531,537,541,546,549,553,
        558,563,567,573,577,581,584,586,590,601,611,616,621,628,639,642,
        647,658,664,668,673,678,687,690,693,705,712,717,729,734,739,744,
        749,758,785,790,796,806,809,814,819,823,835,859,867,874,877,880,
        885,890,895,905,910,915,919,928,931,938,941,944,947,959,966,973,
        978,990,995,1000,1007,1018,1023,1037,1042,1047,1054,1071,1076,1085,
        1090,1095,1100,1109,1112,1120,1135,1146,1154,1169,1185,1187,1206,
        1211,1213,1222,1226,1237,1241,1245,1248,1261,1264,1271,1273,1280,
        1285,1287,1307,1315,1317,1333,1337,1339,1345,1360,1365,1370,1379,
        1443,1460,1500,1516,1525,1531,1537,1540,1547,1549
    ]

class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'CV'", "'DEN'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'OUTD'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'CUTOFF'", 
                     "'CUTON'", "'FROM'", "'TO'", "'PEAK'", "'SPECTRUM'", 
                     "'VOLUME'", "'PPM1'", "'PPM2'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SIZE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'FBOX'", "<INVALID>", 
                     "'ID'", "<INVALID>", "'NAME'", "'NONE'", "<INVALID>", 
                     "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SFBOX'", "'STORE1'", "'STORE2'", 
                     "'STORE3'", "'STORE4'", "'STORE5'", "'STORE6'", "'STORE7'", 
                     "'STORE8'", "'STORE9'", "'TAG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SHOW'", "<INVALID>", "'FOR'", "'LOOP'", 
                     "'TAIL'", "'HEAD'", "'OR'", "'AND'", "'NOT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "':'", "<INVALID>", "'<'", "'>'", "'<='", 
                     "'>='", "'#'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'+'", "'-'", 
                     "<INVALID>", "'/'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'ACOS'", "'ASIN'", 
                     "'COS'", "'DECODE'", "'ENCODE'", "'EXP'", "'GAUSS'", 
                     "'HEAVY'", "'INT'", "'LOG10'", "'LOG'", "<INVALID>", 
                     "'MAXW'", "<INVALID>", "'MOD'", "<INVALID>", "<INVALID>", 
                     "'SIGN'", "'SIN'", "'SQRT'", "'TAN'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'RMS'", "'SUM'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Averaging", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Initialize", "Update", "Gamma", "Kappa", "Cutoff", 
                      "Cuton", "From", "To", "Peak", "Spectrum", "Volume", 
                      "Ppm1", "Ppm2", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Coupling", "Carbon", "Expectation", 
                      "PhiStep", "PsiStep", "Rcoil", "Zero", "Proton", "Observed", 
                      "Anisotropy", "Amides", "Nitrogens", "Oxygens", "RingAtoms", 
                      "AlphasAndAmides", "Error", "Conformation", "Compressed", 
                      "Phase", "Size", "Dimensions", "Danisotropy", "OneBond", 
                      "AngleDb", "DerivFlag", "Angle_or_Dihedral", "Flags", 
                      "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Fbox", "Hydrogen", 
                      "Id", "Known", "Name", "NONE", "Point", "Cut", "Previous", 
                      "Pseudo", "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Sfbox", "Store_1", "Store_2", "Store_3", "Store_4", 
                      "Store_5", "Store_6", "Store_7", "Store_8", "Store_9", 
                      "Tag", "Vector", "Do_Lp", "Identify_Lp", "Show", "Evaluate_Lp", 
                      "For", "Loop", "Tail", "Head", "Or_op", "And_op", 
                      "Not_op", "Comma", "Complex", "Integer", "Logical", 
                      "Real", "Double_quote_string", "SHARP_COMMENT", "EXCLM_COMMENT", 
                      "SMCLN_COMMENT", "Simple_name", "Simple_names", "Integers", 
                      "L_paren", "R_paren", "Colon", "Equ_op", "Lt_op", 
                      "Gt_op", "Leq_op", "Geq_op", "Neq_op", "Symbol_name", 
                      "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT", 
                      "SET_VARIABLE", "Abs", "Attr_properties", "Comparison_ops", 
                      "SPACE_ATTR", "Averaging_methods", "Simple_name_A", 
                      "Equ_op_P", "Potential_types", "Simple_name_P", "SPACE_POTE", 
                      "Noe_analysis", "SPACE_ANAL", "Exclude", "Include", 
                      "End_F", "Class_name", "Any_class", "SPACE_FLAG", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Simple_name_VE", "Symbol_name_VE", "Double_quote_string_VE", 
                      "SPACE_VE", "L_paren_VF", "SPACE_VF", "L_paren_VS", 
                      "R_paren_VS", "Average_VS", "Element_VS", "Max_VS", 
                      "Min_VS", "Norm_VS", "Rms_VS", "Sum_VS", "Atom_properties_VS", 
                      "SPACE_VS", "L_paren_CF", "R_paren_CF", "In_CF", "Integer_CF", 
                      "Real_CF", "Symbol_name_CF", "Simple_name_CF", "SPACE_CF", 
                      "COMMENT_CF", "Simple_name_LL", "SPACE_LL" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_noe_annotation = 16
    RULE_dihedral_statement = 17
    RULE_dihedral_assign = 18
    RULE_plane_statement = 19
    RULE_group_statement = 20
    RULE_harmonic_statement = 21
    RULE_harmonic_assign = 22
    RULE_sani_statement = 23
    RULE_sani_assign = 24
    RULE_coupling_statement = 25
    RULE_coup_assign = 26
    RULE_carbon_shift_statement = 27
    RULE_carbon_shift_assign = 28
    RULE_carbon_shift_rcoil = 29
    RULE_proton_shift_statement = 30
    RULE_observed = 31
    RULE_proton_shift_rcoil = 32
    RULE_proton_shift_anisotropy = 33
    RULE_proton_shift_amides = 34
    RULE_proton_shift_carbons = 35
    RULE_proton_shift_nitrogens = 36
    RULE_proton_shift_oxygens = 37
    RULE_proton_shift_ring_atoms = 38
    RULE_proton_shift_alphas_and_amides = 39
    RULE_conformation_statement = 40
    RULE_conf_assign = 41
    RULE_diffusion_statement = 42
    RULE_dani_assign = 43
    RULE_one_bond_coupling_statement = 44
    RULE_one_bond_assign = 45
    RULE_angle_db_statement = 46
    RULE_angle_db_assign = 47
    RULE_selection = 48
    RULE_selection_expression = 49
    RULE_term = 50
    RULE_factor = 51
    RULE_number = 52
    RULE_number_f = 53
    RULE_number_s = 54
    RULE_number_a = 55
    RULE_flag_statement = 56
    RULE_vector_statement = 57
    RULE_vector_mode = 58
    RULE_vector_expression = 59
    RULE_vector_operation = 60
    RULE_vflc = 61
    RULE_vector_func_call = 62
    RULE_vector_show_property = 63
    RULE_evaluate_statement = 64
    RULE_evaluate_operation = 65
    RULE_dihedral_assign_loop = 66

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "plane_statement", 
                   "group_statement", "harmonic_statement", "harmonic_assign", 
                   "sani_statement", "sani_assign", "coupling_statement", 
                   "coup_assign", "carbon_shift_statement", "carbon_shift_assign", 
                   "carbon_shift_rcoil", "proton_shift_statement", "observed", 
                   "proton_shift_rcoil", "proton_shift_anisotropy", "proton_shift_amides", 
                   "proton_shift_carbons", "proton_shift_nitrogens", "proton_shift_oxygens", 
                   "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s", "number_a", "flag_statement", "vector_statement", 
                   "vector_mode", "vector_expression", "vector_operation", 
                   "vflc", "vector_func_call", "vector_show_property", "evaluate_statement", 
                   "evaluate_operation", "dihedral_assign_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Averaging=7
    Bhig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Cutoff=39
    Cuton=40
    From=41
    To=42
    Peak=43
    Spectrum=44
    Volume=45
    Ppm1=46
    Ppm2=47
    Restraints=48
    Dihedral=49
    Nassign=50
    Print_any=51
    Plane=52
    Group=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Sanisotropy=59
    Coefficients=60
    ForceConstant=61
    Coupling=62
    Carbon=63
    Expectation=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Zero=68
    Proton=69
    Observed=70
    Anisotropy=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Conformation=78
    Compressed=79
    Phase=80
    Size=81
    Dimensions=82
    Danisotropy=83
    OneBond=84
    AngleDb=85
    DerivFlag=86
    Angle_or_Dihedral=87
    Flags=88
    All=89
    Around=90
    Atom=91
    Attribute=92
    BondedTo=93
    ByGroup=94
    ByRes=95
    Chemical=96
    Fbox=97
    Hydrogen=98
    Id=99
    Known=100
    Name=101
    NONE=102
    Point=103
    Cut=104
    Previous=105
    Pseudo=106
    Residue=107
    Resname=108
    Saround=109
    SegIdentifier=110
    Sfbox=111
    Store_1=112
    Store_2=113
    Store_3=114
    Store_4=115
    Store_5=116
    Store_6=117
    Store_7=118
    Store_8=119
    Store_9=120
    Tag=121
    Vector=122
    Do_Lp=123
    Identify_Lp=124
    Show=125
    Evaluate_Lp=126
    For=127
    Loop=128
    Tail=129
    Head=130
    Or_op=131
    And_op=132
    Not_op=133
    Comma=134
    Complex=135
    Integer=136
    Logical=137
    Real=138
    Double_quote_string=139
    SHARP_COMMENT=140
    EXCLM_COMMENT=141
    SMCLN_COMMENT=142
    Simple_name=143
    Simple_names=144
    Integers=145
    L_paren=146
    R_paren=147
    Colon=148
    Equ_op=149
    Lt_op=150
    Gt_op=151
    Leq_op=152
    Geq_op=153
    Neq_op=154
    Symbol_name=155
    SPACE=156
    COMMENT=157
    SECTION_COMMENT=158
    LINE_COMMENT=159
    SET_VARIABLE=160
    Abs=161
    Attr_properties=162
    Comparison_ops=163
    SPACE_ATTR=164
    Averaging_methods=165
    Simple_name_A=166
    Equ_op_P=167
    Potential_types=168
    Simple_name_P=169
    SPACE_POTE=170
    Noe_analysis=171
    SPACE_ANAL=172
    Exclude=173
    Include=174
    End_F=175
    Class_name=176
    Any_class=177
    SPACE_FLAG=178
    R_paren_VE=179
    Equ_op_VE=180
    Add_op_VE=181
    Sub_op_VE=182
    Mul_op_VE=183
    Div_op_VE=184
    Exp_op_VE=185
    Comma_VE=186
    Integer_VE=187
    Real_VE=188
    Atom_properties_VE=189
    Abs_VE=190
    Acos_VE=191
    Asin_VE=192
    Cos_VE=193
    Decode_VE=194
    Encode_VE=195
    Exp_VE=196
    Gauss_VE=197
    Heavy_VE=198
    Int_VE=199
    Log10_VE=200
    Log_VE=201
    Max_VE=202
    Maxw_VE=203
    Min_VE=204
    Mod_VE=205
    Norm_VE=206
    Random_VE=207
    Sign_VE=208
    Sin_VE=209
    Sqrt_VE=210
    Tan_VE=211
    Simple_name_VE=212
    Symbol_name_VE=213
    Double_quote_string_VE=214
    SPACE_VE=215
    L_paren_VF=216
    SPACE_VF=217
    L_paren_VS=218
    R_paren_VS=219
    Average_VS=220
    Element_VS=221
    Max_VS=222
    Min_VS=223
    Norm_VS=224
    Rms_VS=225
    Sum_VS=226
    Atom_properties_VS=227
    SPACE_VS=228
    L_paren_CF=229
    R_paren_CF=230
    In_CF=231
    Integer_CF=232
    Real_CF=233
    Symbol_name_CF=234
    Simple_name_CF=235
    SPACE_CF=236
    COMMENT_CF=237
    Simple_name_LL=238
    SPACE_LL=239

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 158
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Assign) | (1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Dihedral) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Plane) | (1 << CnsMRParser.Group) | (1 << CnsMRParser.Harmonic) | (1 << CnsMRParser.Sanisotropy) | (1 << CnsMRParser.Coupling) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CnsMRParser.Proton - 69)) | (1 << (CnsMRParser.Conformation - 69)) | (1 << (CnsMRParser.Danisotropy - 69)) | (1 << (CnsMRParser.OneBond - 69)) | (1 << (CnsMRParser.AngleDb - 69)) | (1 << (CnsMRParser.Flags - 69)) | (1 << (CnsMRParser.Vector - 69)) | (1 << (CnsMRParser.Evaluate_Lp - 69)))) != 0):
                self.state = 156
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 134
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 135
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 136
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 137
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 138
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 139
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 140
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 141
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 142
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 143
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 144
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 145
                    self.angle_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 146
                    self.flag_statement()
                    pass

                elif la_ == 14:
                    self.state = 147
                    self.vector_statement()
                    pass

                elif la_ == 15:
                    self.state = 148
                    self.evaluate_statement()
                    pass

                elif la_ == 16:
                    self.state = 149
                    self.noe_assign()
                    pass

                elif la_ == 17:
                    self.state = 150
                    self.dihedral_assign()
                    pass

                elif la_ == 18:
                    self.state = 151
                    self.sani_assign()
                    pass

                elif la_ == 19:
                    self.state = 152
                    self.plane_statement()
                    pass

                elif la_ == 20:
                    self.state = 153
                    self.harmonic_assign()
                    pass

                elif la_ == 21:
                    self.state = 154
                    self.coup_assign()
                    pass

                elif la_ == 22:
                    self.state = 155
                    self.carbon_shift_assign()
                    pass


                self.state = 160
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 161
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 163
            self.match(CnsMRParser.Noe)
            self.state = 167
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 164
                    self.noe_statement() 
                self.state = 169
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 170
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 172
                self.match(CnsMRParser.Restraints)


            self.state = 175
            self.match(CnsMRParser.Dihedral)
            self.state = 179
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Scale) | (1 << CnsMRParser.Nassign) | (1 << CnsMRParser.Print_any))) != 0) or _la==CnsMRParser.For:
                self.state = 176
                self.dihedral_statement()
                self.state = 181
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 182
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 184
                self.match(CnsMRParser.Restraints)


            self.state = 187
            self.match(CnsMRParser.Plane)
            self.state = 191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0):
                self.state = 188
                self.plane_statement()
                self.state = 193
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 194
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 196
                self.match(CnsMRParser.Restraints)


            self.state = 199
            self.match(CnsMRParser.Harmonic)
            self.state = 203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Exponent or _la==CnsMRParser.Normal:
                self.state = 200
                self.harmonic_statement()
                self.state = 205
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 206
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self.match(CnsMRParser.Sanisotropy)
            self.state = 212
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 209
                self.sani_statement()
                self.state = 214
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 215
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.match(CnsMRParser.Coupling)
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 218
                self.coupling_statement()
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 224
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 226
            self.match(CnsMRParser.Carbon)
            self.state = 230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.ForceConstant - 5)) | (1 << (CnsMRParser.Expectation - 5)) | (1 << (CnsMRParser.PhiStep - 5)) | (1 << (CnsMRParser.PsiStep - 5)) | (1 << (CnsMRParser.Rcoil - 5)) | (1 << (CnsMRParser.Zero - 5)))) != 0):
                self.state = 227
                self.carbon_shift_statement()
                self.state = 232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 233
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 235
            self.match(CnsMRParser.Proton)
            self.state = 239
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Classification) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CnsMRParser.Rcoil - 67)) | (1 << (CnsMRParser.Observed - 67)) | (1 << (CnsMRParser.Anisotropy - 67)) | (1 << (CnsMRParser.Amides - 67)) | (1 << (CnsMRParser.Nitrogens - 67)) | (1 << (CnsMRParser.Oxygens - 67)) | (1 << (CnsMRParser.RingAtoms - 67)) | (1 << (CnsMRParser.AlphasAndAmides - 67)) | (1 << (CnsMRParser.Error - 67)))) != 0):
                self.state = 236
                self.proton_shift_statement()
                self.state = 241
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 242
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def conformation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 244
            self.match(CnsMRParser.Conformation)
            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Compressed - 64)) | (1 << (CnsMRParser.Phase - 64)) | (1 << (CnsMRParser.Size - 64)))) != 0):
                self.state = 245
                self.conformation_statement()
                self.state = 250
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 251
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.match(CnsMRParser.Danisotropy)
            self.state = 257
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 254
                self.diffusion_statement()
                self.state = 259
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 260
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(CnsMRParser.OneBond)
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 263
                self.one_bond_coupling_statement()
                self.state = 268
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 269
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.match(CnsMRParser.AngleDb)
            self.state = 275
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Size - 64)) | (1 << (CnsMRParser.DerivFlag - 64)))) != 0):
                self.state = 272
                self.angle_db_statement()
                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 278
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def noe_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Averaging(self):
            return self.getToken(CnsMRParser.Averaging, 0)

        def Simple_name_A(self):
            return self.getToken(CnsMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(CnsMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(CnsMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(CnsMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 280
                self.match(CnsMRParser.Analysis)
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 281
                    self.match(CnsMRParser.Equ_op)


                self.state = 284
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 285
                self.noe_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 286
                self.match(CnsMRParser.Asymptote)
                self.state = 287
                self.match(CnsMRParser.Simple_name)
                self.state = 288
                self.number_s()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 289
                self.match(CnsMRParser.Averaging)
                self.state = 290
                self.match(CnsMRParser.Simple_name_A)
                self.state = 291
                self.match(CnsMRParser.Averaging_methods)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 292
                self.match(CnsMRParser.Bhig)
                self.state = 293
                self.match(CnsMRParser.Simple_name)
                self.state = 294
                self.number_s()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 295
                self.match(CnsMRParser.Ceiling)
                self.state = 297
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 296
                    self.match(CnsMRParser.Equ_op)


                self.state = 299
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 300
                self.match(CnsMRParser.Classification)
                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 301
                    self.match(CnsMRParser.Equ_op)


                self.state = 304
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 305
                self.match(CnsMRParser.CountViol)
                self.state = 306
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 307
                self.match(CnsMRParser.Cv)
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 308
                    self.match(CnsMRParser.Equ_op)


                self.state = 311
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 312
                self.match(CnsMRParser.Den)
                self.state = 313
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 314
                self.match(CnsMRParser.Den)
                self.state = 315
                self.match(CnsMRParser.Update)
                self.state = 316
                self.match(CnsMRParser.Gamma)
                self.state = 318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 317
                    self.match(CnsMRParser.Equ_op)


                self.state = 320
                self.number_s()
                self.state = 321
                self.match(CnsMRParser.Kappa)
                self.state = 323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 322
                    self.match(CnsMRParser.Equ_op)


                self.state = 325
                self.number_s()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 327
                self.match(CnsMRParser.Distribute)
                self.state = 328
                self.match(CnsMRParser.Simple_name)
                self.state = 329
                self.match(CnsMRParser.Simple_name)
                self.state = 330
                self.number_s()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 334
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 331
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 336
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 337
                self.match(CnsMRParser.End)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 338
                self.match(CnsMRParser.Monomers)
                self.state = 339
                self.match(CnsMRParser.Simple_name)
                self.state = 340
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 341
                self.match(CnsMRParser.Ncount)
                self.state = 342
                self.match(CnsMRParser.Simple_name)
                self.state = 343
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 344
                self.match(CnsMRParser.Nrestraints)
                self.state = 346
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 345
                    self.match(CnsMRParser.Equ_op)


                self.state = 348
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 349
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 350
                self.match(CnsMRParser.Partition)
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 351
                    self.match(CnsMRParser.Equ_op)


                self.state = 354
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 355
                self.match(CnsMRParser.Potential)
                self.state = 356
                self.match(CnsMRParser.Simple_name_P)
                self.state = 357
                self.match(CnsMRParser.Potential_types)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 358
                self.match(CnsMRParser.Predict)
                self.state = 359
                self.predict_statement()
                self.state = 360
                self.match(CnsMRParser.End)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 362
                self.match(CnsMRParser.Print)
                self.state = 363
                self.match(CnsMRParser.Threshold)
                self.state = 365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 364
                    self.match(CnsMRParser.Equ_op)


                self.state = 367
                self.number_s()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 368
                self.match(CnsMRParser.Raverage)
                self.state = 372
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 369
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 374
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 375
                self.match(CnsMRParser.End)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 376
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 377
                self.match(CnsMRParser.Rswitch)
                self.state = 378
                self.match(CnsMRParser.Simple_name)
                self.state = 379
                self.number_s()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 380
                self.match(CnsMRParser.Scale)
                self.state = 381
                self.match(CnsMRParser.Simple_name)
                self.state = 382
                self.number_s()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 383
                self.match(CnsMRParser.SoExponent)
                self.state = 384
                self.match(CnsMRParser.Simple_name)
                self.state = 385
                self.number_s()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 386
                self.match(CnsMRParser.SqConstant)
                self.state = 387
                self.match(CnsMRParser.Simple_name)
                self.state = 388
                self.number_s()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 389
                self.match(CnsMRParser.SqExponent)
                self.state = 390
                self.match(CnsMRParser.Simple_name)
                self.state = 391
                self.number_s()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 392
                self.match(CnsMRParser.SqOffset)
                self.state = 393
                self.match(CnsMRParser.Simple_name)
                self.state = 394
                self.number_s()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 395
                self.match(CnsMRParser.Taverage)
                self.state = 399
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 396
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 401
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                self.state = 402
                self.match(CnsMRParser.End)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 403
                self.match(CnsMRParser.Temperature)
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 404
                    self.match(CnsMRParser.Equ_op)


                self.state = 407
                self.number_s()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Assign)
            else:
                return self.getToken(CnsMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 410
            self.match(CnsMRParser.Assign)
            self.state = 411
            self.selection()
            self.state = 412
            self.selection()
            self.state = 413
            self.number()
            self.state = 415
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 414
                self.number()


            self.state = 418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 417
                self.number()


            self.state = 423
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 420
                    self.noe_annotation() 
                self.state = 425
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 435
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 426
                self.match(CnsMRParser.Or_op)
                self.state = 428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Assign:
                    self.state = 427
                    self.match(CnsMRParser.Assign)


                self.state = 430
                self.selection()
                self.state = 431
                self.selection()
                self.state = 437
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 452
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 438
                self.match(CnsMRParser.Cutoff)
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 439
                    self.match(CnsMRParser.Equ_op)


                self.state = 442
                self.number_s()
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 443
                self.match(CnsMRParser.Cuton)
                self.state = 445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 444
                    self.match(CnsMRParser.Equ_op)


                self.state = 447
                self.number_s()
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 448
                self.match(CnsMRParser.From)
                self.state = 449
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 450
                self.match(CnsMRParser.To)
                self.state = 451
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(CnsMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(CnsMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(CnsMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(CnsMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(CnsMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(CnsMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = CnsMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 489
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 454
                self.match(CnsMRParser.Peak)
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 455
                    self.match(CnsMRParser.Equ_op)


                self.state = 458
                self.number_a()
                pass
            elif token in [CnsMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 459
                self.match(CnsMRParser.Spectrum)
                self.state = 461
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 460
                    self.match(CnsMRParser.Equ_op)


                self.state = 463
                self.number_a()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 464
                self.match(CnsMRParser.Weight)
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 465
                    self.match(CnsMRParser.Equ_op)


                self.state = 468
                self.number_a()
                pass
            elif token in [CnsMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 469
                self.match(CnsMRParser.Volume)
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 470
                    self.match(CnsMRParser.Equ_op)


                self.state = 473
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 474
                self.match(CnsMRParser.Ppm1)
                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 475
                    self.match(CnsMRParser.Equ_op)


                self.state = 478
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 479
                self.match(CnsMRParser.Ppm2)
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 480
                    self.match(CnsMRParser.Equ_op)


                self.state = 483
                self.number_a()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 484
                self.match(CnsMRParser.Cv)
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 485
                    self.match(CnsMRParser.Equ_op)


                self.state = 488
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assign_loopContext,0)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 491
                self.dihedral_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 492
                self.dihedral_assign_loop()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 3)
                self.state = 493
                self.match(CnsMRParser.Cv)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 494
                    self.match(CnsMRParser.Equ_op)


                self.state = 497
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 498
                self.match(CnsMRParser.Nassign)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 499
                    self.match(CnsMRParser.Equ_op)


                self.state = 502
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 5)
                self.state = 503
                self.match(CnsMRParser.Partition)
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 504
                    self.match(CnsMRParser.Equ_op)


                self.state = 507
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 508
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 7)
                self.state = 509
                self.match(CnsMRParser.Scale)
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 510
                    self.match(CnsMRParser.Equ_op)


                self.state = 513
                self.number_s()
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 8)
                self.state = 514
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 517
            self.match(CnsMRParser.Assign)
            self.state = 518
            self.selection()
            self.state = 519
            self.selection()
            self.state = 520
            self.selection()
            self.state = 521
            self.selection()
            self.state = 522
            self.number()
            self.state = 523
            self.number()
            self.state = 524
            self.number()
            self.state = 525
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_plane_statement)
        self._la = 0 # Token type
        try:
            self.state = 537
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 527
                self.match(CnsMRParser.Group)
                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Selection or _la==CnsMRParser.Weight:
                    self.state = 528
                    self.group_statement()
                    self.state = 533
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 534
                self.match(CnsMRParser.End)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 535
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 536
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 549
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 539
                self.match(CnsMRParser.Selection)
                self.state = 541
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 540
                    self.match(CnsMRParser.Equ_op)


                self.state = 543
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 544
                self.match(CnsMRParser.Weight)
                self.state = 546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 545
                    self.match(CnsMRParser.Equ_op)


                self.state = 548
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 590
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 551
                self.match(CnsMRParser.Exponent)
                self.state = 553
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 552
                    self.match(CnsMRParser.Equ_op)


                self.state = 555
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 556
                self.match(CnsMRParser.Normal)
                self.state = 558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 557
                    self.match(CnsMRParser.Equ_op)


                self.state = 560
                self.match(CnsMRParser.L_paren)
                self.state = 586
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integer, CnsMRParser.Real, CnsMRParser.Symbol_name]:
                    self.state = 561
                    self.number_s()
                    self.state = 563
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 562
                        self.match(CnsMRParser.Comma)


                    self.state = 565
                    self.number_s()
                    self.state = 567
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 566
                        self.match(CnsMRParser.Comma)


                    self.state = 569
                    self.number_s()
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 571
                    self.match(CnsMRParser.Tail)
                    self.state = 573
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 572
                        self.match(CnsMRParser.Equ_op)


                    self.state = 575
                    self.selection()
                    self.state = 577
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 576
                        self.match(CnsMRParser.Comma)


                    self.state = 584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 579
                        self.match(CnsMRParser.Head)
                        self.state = 581
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CnsMRParser.Equ_op:
                            self.state = 580
                            self.match(CnsMRParser.Equ_op)


                        self.state = 583
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 588
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = CnsMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(CnsMRParser.Assign)
            self.state = 593
            self.selection()
            self.state = 594
            self.number()
            self.state = 595
            self.number()
            self.state = 596
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 628
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 598
                self.sani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 599
                self.match(CnsMRParser.Classification)
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 600
                    self.match(CnsMRParser.Equ_op)


                self.state = 603
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 604
                self.match(CnsMRParser.Coefficients)
                self.state = 605
                self.number_s()
                self.state = 606
                self.number_s()
                self.state = 607
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 609
                self.match(CnsMRParser.ForceConstant)
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 610
                    self.match(CnsMRParser.Equ_op)


                self.state = 613
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 614
                self.match(CnsMRParser.Nrestraints)
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 615
                    self.match(CnsMRParser.Equ_op)


                self.state = 618
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 619
                self.match(CnsMRParser.Potential)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 620
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 623
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 624
                self.match(CnsMRParser.Print)
                self.state = 625
                self.match(CnsMRParser.Threshold)
                self.state = 626
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 627
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 630
            self.match(CnsMRParser.Assign)
            self.state = 631
            self.selection()
            self.state = 632
            self.selection()
            self.state = 633
            self.selection()
            self.state = 634
            self.selection()
            self.state = 635
            self.selection()
            self.state = 636
            self.selection()
            self.state = 637
            self.number()
            self.state = 639
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 638
                self.number()


            self.state = 642
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 641
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 644
                self.coup_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 645
                self.match(CnsMRParser.Classification)
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 646
                    self.match(CnsMRParser.Equ_op)


                self.state = 649
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 650
                self.match(CnsMRParser.Coefficients)
                self.state = 651
                self.number_s()
                self.state = 652
                self.number_s()
                self.state = 653
                self.number_s()
                self.state = 654
                self.number_s()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 656
                self.match(CnsMRParser.Cv)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 657
                    self.match(CnsMRParser.Equ_op)


                self.state = 660
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 661
                self.match(CnsMRParser.ForceConstant)
                self.state = 662
                self.number_s()
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                    self.state = 663
                    self.number_s()


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 666
                self.match(CnsMRParser.Nrestraints)
                self.state = 668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 667
                    self.match(CnsMRParser.Equ_op)


                self.state = 670
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 671
                self.match(CnsMRParser.Partition)
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 672
                    self.match(CnsMRParser.Equ_op)


                self.state = 675
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 676
                self.match(CnsMRParser.Potential)
                self.state = 678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 677
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 680
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 681
                self.match(CnsMRParser.Print)
                self.state = 682
                self.match(CnsMRParser.Threshold)
                self.state = 683
                self.number_s()
                self.state = 690
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 684
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 685
                    self.match(CnsMRParser.Classification)
                    self.state = 687
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 686
                        self.match(CnsMRParser.Equ_op)


                    self.state = 689
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 692
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 695
            self.match(CnsMRParser.Assign)
            self.state = 696
            self.selection()
            self.state = 697
            self.selection()
            self.state = 698
            self.selection()
            self.state = 699
            self.selection()
            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 700
                self.selection()
                self.state = 701
                self.selection()
                self.state = 702
                self.selection()
                self.state = 703
                self.selection()


            self.state = 707
            self.number()
            self.state = 708
            self.number()
            self.state = 712
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 709
                self.number()
                self.state = 710
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 714
                self.carbon_shift_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 715
                self.match(CnsMRParser.Classification)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 716
                    self.match(CnsMRParser.Equ_op)


                self.state = 719
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 720
                self.match(CnsMRParser.Expectation)
                self.state = 721
                self.match(CnsMRParser.Integer)
                self.state = 722
                self.match(CnsMRParser.Integer)
                self.state = 723
                self.number_s()
                self.state = 724
                self.number_s()
                self.state = 725
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 727
                self.match(CnsMRParser.ForceConstant)
                self.state = 729
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 728
                    self.match(CnsMRParser.Equ_op)


                self.state = 731
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 732
                self.match(CnsMRParser.Nrestraints)
                self.state = 734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 733
                    self.match(CnsMRParser.Equ_op)


                self.state = 736
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 737
                self.match(CnsMRParser.PhiStep)
                self.state = 739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 738
                    self.match(CnsMRParser.Equ_op)


                self.state = 741
                self.number_s()
                pass
            elif token in [CnsMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 742
                self.match(CnsMRParser.PsiStep)
                self.state = 744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 743
                    self.match(CnsMRParser.Equ_op)


                self.state = 746
                self.number_s()
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 747
                self.match(CnsMRParser.Potential)
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 748
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 751
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 752
                self.match(CnsMRParser.Print)
                self.state = 753
                self.match(CnsMRParser.Threshold)
                self.state = 754
                self.number_s()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 755
                self.carbon_shift_rcoil()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 756
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 757
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(CnsMRParser.Assign)
            self.state = 761
            self.selection()
            self.state = 762
            self.selection()
            self.state = 763
            self.selection()
            self.state = 764
            self.selection()
            self.state = 765
            self.selection()
            self.state = 766
            self.number()
            self.state = 767
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.match(CnsMRParser.Rcoil)
            self.state = 770
            self.selection()
            self.state = 771
            self.number_s()
            self.state = 772
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(CnsMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 774
                self.observed()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 775
                self.proton_shift_rcoil()
                pass
            elif token in [CnsMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 776
                self.proton_shift_anisotropy()
                pass
            elif token in [CnsMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 777
                self.proton_shift_amides()
                pass
            elif token in [CnsMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 778
                self.proton_shift_carbons()
                pass
            elif token in [CnsMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 779
                self.proton_shift_nitrogens()
                pass
            elif token in [CnsMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 780
                self.proton_shift_oxygens()
                pass
            elif token in [CnsMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 781
                self.proton_shift_ring_atoms()
                pass
            elif token in [CnsMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 782
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 783
                self.match(CnsMRParser.Classification)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 784
                    self.match(CnsMRParser.Equ_op)


                self.state = 787
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 788
                self.match(CnsMRParser.Error)
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 789
                    self.match(CnsMRParser.Equ_op)


                self.state = 792
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 12)
                self.state = 793
                self.match(CnsMRParser.ForceConstant)
                self.state = 794
                self.number_s()
                self.state = 796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                    self.state = 795
                    self.number_s()


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 798
                self.match(CnsMRParser.Potential)
                self.state = 799
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 800
                self.match(CnsMRParser.Print)
                self.state = 801
                self.match(CnsMRParser.Threshold)
                self.state = 802
                self.number_s()
                self.state = 809
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 803
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 804
                    self.match(CnsMRParser.Classification)
                    self.state = 806
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 805
                        self.match(CnsMRParser.Equ_op)


                    self.state = 808
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 811
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 813
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 816
            self.match(CnsMRParser.Observed)
            self.state = 817
            self.selection()
            self.state = 819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 818
                self.selection()


            self.state = 821
            self.number_s()
            self.state = 823
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 822
                self.number_s()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(CnsMRParser.Rcoil)
            self.state = 826
            self.selection()
            self.state = 827
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 829
            self.match(CnsMRParser.Anisotropy)
            self.state = 830
            self.selection()
            self.state = 831
            self.selection()
            self.state = 832
            self.selection()
            self.state = 833
            self.match(CnsMRParser.Simple_name)
            self.state = 835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 834
                self.match(CnsMRParser.Logical)


            self.state = 837
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 839
            self.match(CnsMRParser.Amides)
            self.state = 840
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 842
            self.match(CnsMRParser.Carbon)
            self.state = 843
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(CnsMRParser.Nitrogens)
            self.state = 846
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(CnsMRParser.Oxygens)
            self.state = 849
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(CnsMRParser.RingAtoms)
            self.state = 852
            self.match(CnsMRParser.Simple_name)
            self.state = 853
            self.selection()
            self.state = 854
            self.selection()
            self.state = 855
            self.selection()
            self.state = 856
            self.selection()
            self.state = 857
            self.selection()
            self.state = 859
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 858
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 862
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 947
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 864
                self.conf_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 865
                self.match(CnsMRParser.Classification)
                self.state = 867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 866
                    self.match(CnsMRParser.Equ_op)


                self.state = 869
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 870
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 871
                self.match(CnsMRParser.Expectation)
                self.state = 872
                self.match(CnsMRParser.Integer)
                self.state = 874
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 873
                    self.match(CnsMRParser.Integer)


                self.state = 877
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 876
                    self.match(CnsMRParser.Integer)


                self.state = 880
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 879
                    self.match(CnsMRParser.Integer)


                self.state = 882
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 883
                self.match(CnsMRParser.Error)
                self.state = 885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 884
                    self.match(CnsMRParser.Equ_op)


                self.state = 887
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 888
                self.match(CnsMRParser.ForceConstant)
                self.state = 890
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 889
                    self.match(CnsMRParser.Equ_op)


                self.state = 892
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 893
                self.match(CnsMRParser.Nrestraints)
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 894
                    self.match(CnsMRParser.Equ_op)


                self.state = 897
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 898
                self.match(CnsMRParser.Phase)
                self.state = 899
                self.match(CnsMRParser.Integer)
                self.state = 900
                self.match(CnsMRParser.Integer)
                self.state = 901
                self.match(CnsMRParser.Integer)
                self.state = 905
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                if la_ == 1:
                    self.state = 902
                    self.match(CnsMRParser.Integer)
                    self.state = 903
                    self.match(CnsMRParser.Integer)
                    self.state = 904
                    self.match(CnsMRParser.Integer)


                self.state = 910
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 907
                    self.match(CnsMRParser.Integer)
                    self.state = 908
                    self.match(CnsMRParser.Integer)
                    self.state = 909
                    self.match(CnsMRParser.Integer)


                self.state = 915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 912
                    self.match(CnsMRParser.Integer)
                    self.state = 913
                    self.match(CnsMRParser.Integer)
                    self.state = 914
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 917
                self.match(CnsMRParser.Potential)
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 918
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 921
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 922
                self.match(CnsMRParser.Print)
                self.state = 923
                self.match(CnsMRParser.Threshold)
                self.state = 924
                self.number_s()
                self.state = 931
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 925
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 926
                    self.match(CnsMRParser.Classification)
                    self.state = 928
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 927
                        self.match(CnsMRParser.Equ_op)


                    self.state = 930
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 933
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 934
                self.match(CnsMRParser.Size)
                self.state = 935
                self.match(CnsMRParser.Dimensions)
                self.state = 936
                self.match(CnsMRParser.Integer)
                self.state = 938
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                if la_ == 1:
                    self.state = 937
                    self.match(CnsMRParser.Integer)


                self.state = 941
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 940
                    self.match(CnsMRParser.Integer)


                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 943
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 946
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 949
            self.match(CnsMRParser.Assign)
            self.state = 950
            self.selection()
            self.state = 951
            self.selection()
            self.state = 952
            self.selection()
            self.state = 953
            self.selection()
            self.state = 959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.state = 954
                self.selection()
                self.state = 955
                self.selection()
                self.state = 956
                self.selection()
                self.state = 957
                self.selection()


            self.state = 966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.state = 961
                self.selection()
                self.state = 962
                self.selection()
                self.state = 963
                self.selection()
                self.state = 964
                self.selection()


            self.state = 973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 968
                self.selection()
                self.state = 969
                self.selection()
                self.state = 970
                self.selection()
                self.state = 971
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1007
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 975
                self.dani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 976
                self.match(CnsMRParser.Classification)
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 977
                    self.match(CnsMRParser.Equ_op)


                self.state = 980
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 981
                self.match(CnsMRParser.Coefficients)
                self.state = 982
                self.number_s()
                self.state = 983
                self.number_s()
                self.state = 984
                self.number_s()
                self.state = 985
                self.number_s()
                self.state = 986
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 988
                self.match(CnsMRParser.ForceConstant)
                self.state = 990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 989
                    self.match(CnsMRParser.Equ_op)


                self.state = 992
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 993
                self.match(CnsMRParser.Nrestraints)
                self.state = 995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 994
                    self.match(CnsMRParser.Equ_op)


                self.state = 997
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 998
                self.match(CnsMRParser.Potential)
                self.state = 1000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 999
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1002
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1003
                self.match(CnsMRParser.Print)
                self.state = 1004
                self.match(CnsMRParser.Threshold)
                self.state = 1005
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1006
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1009
            self.match(CnsMRParser.Assign)
            self.state = 1010
            self.selection()
            self.state = 1011
            self.selection()
            self.state = 1012
            self.selection()
            self.state = 1013
            self.selection()
            self.state = 1014
            self.selection()
            self.state = 1015
            self.selection()
            self.state = 1016
            self.number()
            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 1017
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1054
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1020
                self.one_bond_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1021
                self.match(CnsMRParser.Classification)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1022
                    self.match(CnsMRParser.Equ_op)


                self.state = 1025
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1026
                self.match(CnsMRParser.Coefficients)
                self.state = 1027
                self.number_s()
                self.state = 1028
                self.number_s()
                self.state = 1029
                self.number_s()
                self.state = 1030
                self.number_s()
                self.state = 1031
                self.number_s()
                self.state = 1032
                self.number_s()
                self.state = 1033
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1035
                self.match(CnsMRParser.ForceConstant)
                self.state = 1037
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1036
                    self.match(CnsMRParser.Equ_op)


                self.state = 1039
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1040
                self.match(CnsMRParser.Nrestraints)
                self.state = 1042
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1041
                    self.match(CnsMRParser.Equ_op)


                self.state = 1044
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1045
                self.match(CnsMRParser.Potential)
                self.state = 1047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1046
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1049
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1050
                self.match(CnsMRParser.Print)
                self.state = 1051
                self.match(CnsMRParser.Threshold)
                self.state = 1052
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1053
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(CnsMRParser.Assign)
            self.state = 1057
            self.selection()
            self.state = 1058
            self.selection()
            self.state = 1059
            self.selection()
            self.state = 1060
            self.selection()
            self.state = 1061
            self.selection()
            self.state = 1062
            self.selection()
            self.state = 1063
            self.selection()
            self.state = 1064
            self.selection()
            self.state = 1065
            self.number()
            self.state = 1066
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(CnsMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1120
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1068
                self.angle_db_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1069
                self.match(CnsMRParser.Classification)
                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1070
                    self.match(CnsMRParser.Equ_op)


                self.state = 1073
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1074
                self.match(CnsMRParser.DerivFlag)
                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1075
                    self.match(CnsMRParser.Equ_op)


                self.state = 1078
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1079
                self.match(CnsMRParser.Expectation)
                self.state = 1080
                self.match(CnsMRParser.Integer)
                self.state = 1081
                self.match(CnsMRParser.Integer)
                self.state = 1082
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1083
                self.match(CnsMRParser.Error)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1084
                    self.match(CnsMRParser.Equ_op)


                self.state = 1087
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1088
                self.match(CnsMRParser.ForceConstant)
                self.state = 1090
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1089
                    self.match(CnsMRParser.Equ_op)


                self.state = 1092
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1093
                self.match(CnsMRParser.Nrestraints)
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1094
                    self.match(CnsMRParser.Equ_op)


                self.state = 1097
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1098
                self.match(CnsMRParser.Potential)
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1099
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1102
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1103
                self.match(CnsMRParser.Print)
                self.state = 1104
                self.match(CnsMRParser.Threshold)
                self.state = 1105
                self.number_s()
                self.state = 1112
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 1106
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 1107
                    self.match(CnsMRParser.Classification)
                    self.state = 1109
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1108
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1111
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1114
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1115
                self.match(CnsMRParser.Size)
                self.state = 1116
                self.match(CnsMRParser.Angle_or_Dihedral)
                self.state = 1117
                self.match(CnsMRParser.Integer)
                self.state = 1118
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1119
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1122
            self.match(CnsMRParser.Assign)
            self.state = 1123
            self.selection()
            self.state = 1124
            self.selection()
            self.state = 1125
            self.selection()
            self.state = 1126
            self.selection()
            self.state = 1127
            self.selection()
            self.state = 1128
            self.selection()
            self.state = 1129
            self.selection()
            self.state = 1130
            self.selection()
            self.state = 1131
            self.selection()
            self.state = 1132
            self.selection()
            self.state = 1133
            self.selection()
            self.state = 1135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1134
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(CnsMRParser.L_paren)
            self.state = 1138
            self.selection_expression()
            self.state = 1139
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1141
            self.term()
            self.state = 1146
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 1142
                self.match(CnsMRParser.Or_op)
                self.state = 1143
                self.term()
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1149
            self.factor(0)
            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1150
                self.match(CnsMRParser.And_op)
                self.state = 1151
                self.factor(0)
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store_1(self):
            return self.getToken(CnsMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(CnsMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(CnsMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(CnsMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(CnsMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(CnsMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(CnsMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(CnsMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(CnsMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1158
                self.match(CnsMRParser.L_paren)
                self.state = 1159
                self.selection_expression()
                self.state = 1160
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1162
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1163
                self.match(CnsMRParser.Atom)
                self.state = 1164
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1165
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1166
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1167
                self.match(CnsMRParser.Attribute)
                self.state = 1169
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1168
                    self.match(CnsMRParser.Abs)


                self.state = 1171
                self.match(CnsMRParser.Attr_properties)
                self.state = 1172
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1173
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1174
                self.match(CnsMRParser.BondedTo)
                self.state = 1175
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1176
                self.match(CnsMRParser.ByGroup)
                self.state = 1177
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1178
                self.match(CnsMRParser.ByRes)
                self.state = 1179
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1180
                self.match(CnsMRParser.Chemical)
                self.state = 1187
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1181
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1182
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1185
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                    if la_ == 1:
                        self.state = 1183
                        self.match(CnsMRParser.Colon)
                        self.state = 1184
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1189
                self.match(CnsMRParser.Fbox)
                self.state = 1190
                self.number_f()
                self.state = 1191
                self.number_f()
                self.state = 1192
                self.number_f()
                self.state = 1193
                self.number_f()
                self.state = 1194
                self.number_f()
                self.state = 1195
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1197
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1198
                self.match(CnsMRParser.Id)
                self.state = 1199
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1200
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1201
                self.match(CnsMRParser.Name)
                self.state = 1213
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1202
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1203
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1206
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                    if la_ == 1:
                        self.state = 1204
                        self.match(CnsMRParser.Colon)
                        self.state = 1205
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1208
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1211
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        self.state = 1209
                        self.match(CnsMRParser.Colon)
                        self.state = 1210
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1215
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1216
                self.match(CnsMRParser.Not_op)
                self.state = 1217
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1218
                self.match(CnsMRParser.Point)
                self.state = 1219
                self.match(CnsMRParser.L_paren)
                self.state = 1220
                self.number_f()
                self.state = 1222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1221
                    self.match(CnsMRParser.Comma)


                self.state = 1224
                self.number_f()
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1225
                    self.match(CnsMRParser.Comma)


                self.state = 1228
                self.number_f()
                self.state = 1229
                self.match(CnsMRParser.R_paren)
                self.state = 1230
                self.match(CnsMRParser.Cut)
                self.state = 1231
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1233
                self.match(CnsMRParser.Point)
                self.state = 1234
                self.match(CnsMRParser.L_paren)
                self.state = 1235
                self.match(CnsMRParser.Tail)
                self.state = 1237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1236
                    self.match(CnsMRParser.Equ_op)


                self.state = 1239
                self.selection()
                self.state = 1241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1240
                    self.match(CnsMRParser.Comma)


                self.state = 1248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1243
                    self.match(CnsMRParser.Head)
                    self.state = 1245
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1244
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1247
                    self.selection()


                self.state = 1250
                self.match(CnsMRParser.R_paren)
                self.state = 1251
                self.match(CnsMRParser.Cut)
                self.state = 1252
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1254
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1255
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1256
                self.match(CnsMRParser.Residue)
                self.state = 1264
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1257
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1258
                    self.match(CnsMRParser.Integer)
                    self.state = 1261
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                    if la_ == 1:
                        self.state = 1259
                        self.match(CnsMRParser.Colon)
                        self.state = 1260
                        self.match(CnsMRParser.Integer)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1263
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1266
                self.match(CnsMRParser.Resname)
                self.state = 1273
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1267
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1268
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1271
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                    if la_ == 1:
                        self.state = 1269
                        self.match(CnsMRParser.Colon)
                        self.state = 1270
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1275
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1287
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1276
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1277
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1280
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                    if la_ == 1:
                        self.state = 1278
                        self.match(CnsMRParser.Colon)
                        self.state = 1279
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1282
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1285
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                    if la_ == 1:
                        self.state = 1283
                        self.match(CnsMRParser.Colon)
                        self.state = 1284
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1289
                self.match(CnsMRParser.Sfbox)
                self.state = 1290
                self.number_f()
                self.state = 1291
                self.number_f()
                self.state = 1292
                self.number_f()
                self.state = 1293
                self.number_f()
                self.state = 1294
                self.number_f()
                self.state = 1295
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1297
                self.match(CnsMRParser.Store_1)
                pass

            elif la_ == 25:
                self.state = 1298
                self.match(CnsMRParser.Store_2)
                pass

            elif la_ == 26:
                self.state = 1299
                self.match(CnsMRParser.Store_3)
                pass

            elif la_ == 27:
                self.state = 1300
                self.match(CnsMRParser.Store_4)
                pass

            elif la_ == 28:
                self.state = 1301
                self.match(CnsMRParser.Store_5)
                pass

            elif la_ == 29:
                self.state = 1302
                self.match(CnsMRParser.Store_6)
                pass

            elif la_ == 30:
                self.state = 1303
                self.match(CnsMRParser.Store_7)
                pass

            elif la_ == 31:
                self.state = 1304
                self.match(CnsMRParser.Store_8)
                pass

            elif la_ == 32:
                self.state = 1305
                self.match(CnsMRParser.Store_9)
                pass

            elif la_ == 33:
                self.state = 1306
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1317
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,166,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1315
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1309
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1310
                        self.match(CnsMRParser.Around)
                        self.state = 1311
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1312
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1313
                        self.match(CnsMRParser.Saround)
                        self.state = 1314
                        self.number_f()
                        pass

             
                self.state = 1319
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,166,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1320
            _la = self._input.LA(1)
            if not(((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1322
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1324
            _la = self._input.LA(1)
            if not(((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = CnsMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CnsMRParser.Flags, 0)

        def Include(self):
            return self.getToken(CnsMRParser.Include, 0)

        def End_F(self):
            return self.getToken(CnsMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(CnsMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Class_name)
            else:
                return self.getToken(CnsMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(CnsMRParser.Any_class, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = CnsMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1328
            self.match(CnsMRParser.Flags)
            self.state = 1339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Exclude:
                self.state = 1329
                self.match(CnsMRParser.Exclude)
                self.state = 1337
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Include, CnsMRParser.Class_name]:
                    self.state = 1333
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CnsMRParser.Class_name:
                        self.state = 1330
                        self.match(CnsMRParser.Class_name)
                        self.state = 1335
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CnsMRParser.Any_class]:
                    self.state = 1336
                    self.match(CnsMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1341
            self.match(CnsMRParser.Include)
            self.state = 1345
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Class_name:
                self.state = 1342
                self.match(CnsMRParser.Class_name)
                self.state = 1347
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1348
            self.match(CnsMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(CnsMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = CnsMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1350
            self.match(CnsMRParser.Vector)
            self.state = 1351
            self.vector_mode()
            self.state = 1352
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(CnsMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(CnsMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(CnsMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = CnsMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 1360
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Do_Lp, CnsMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1354
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Do_Lp or _la==CnsMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1355
                self.vector_expression()
                self.state = 1356
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1358
                self.match(CnsMRParser.Show)
                self.state = 1359
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = CnsMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            self.match(CnsMRParser.Atom_properties_VE)
            self.state = 1365
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Equ_op_VE:
                self.state = 1363
                self.match(CnsMRParser.Equ_op_VE)
                self.state = 1364
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = CnsMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1367
            self.vflc()
            self.state = 1370
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (CnsMRParser.Add_op_VE - 181)) | (1 << (CnsMRParser.Sub_op_VE - 181)) | (1 << (CnsMRParser.Mul_op_VE - 181)) | (1 << (CnsMRParser.Div_op_VE - 181)) | (1 << (CnsMRParser.Exp_op_VE - 181)))) != 0):
                self.state = 1368
                _la = self._input.LA(1)
                if not(((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (CnsMRParser.Add_op_VE - 181)) | (1 << (CnsMRParser.Sub_op_VE - 181)) | (1 << (CnsMRParser.Mul_op_VE - 181)) | (1 << (CnsMRParser.Div_op_VE - 181)) | (1 << (CnsMRParser.Exp_op_VE - 181)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1369
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(CnsMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(CnsMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(CnsMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(CnsMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = CnsMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vflc)
        try:
            self.state = 1379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1372
                self.match(CnsMRParser.Atom_properties_VE)
                pass
            elif token in [CnsMRParser.Abs_VE, CnsMRParser.Acos_VE, CnsMRParser.Cos_VE, CnsMRParser.Decode_VE, CnsMRParser.Encode_VE, CnsMRParser.Exp_VE, CnsMRParser.Gauss_VE, CnsMRParser.Heavy_VE, CnsMRParser.Int_VE, CnsMRParser.Log10_VE, CnsMRParser.Log_VE, CnsMRParser.Max_VE, CnsMRParser.Maxw_VE, CnsMRParser.Min_VE, CnsMRParser.Mod_VE, CnsMRParser.Norm_VE, CnsMRParser.Random_VE, CnsMRParser.Sign_VE, CnsMRParser.Sin_VE, CnsMRParser.Sqrt_VE, CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1373
                self.vector_func_call()
                pass
            elif token in [CnsMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1374
                self.match(CnsMRParser.Integer_VE)
                pass
            elif token in [CnsMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1375
                self.match(CnsMRParser.Real_VE)
                pass
            elif token in [CnsMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1376
                self.match(CnsMRParser.Simple_name_VE)
                pass
            elif token in [CnsMRParser.Symbol_name_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1377
                self.match(CnsMRParser.Symbol_name_VE)
                pass
            elif token in [CnsMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1378
                self.match(CnsMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(CnsMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(CnsMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(CnsMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(CnsMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(CnsMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(CnsMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(CnsMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(CnsMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(CnsMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(CnsMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(CnsMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(CnsMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(CnsMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma_VE)
            else:
                return self.getToken(CnsMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(CnsMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(CnsMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(CnsMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(CnsMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(CnsMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(CnsMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(CnsMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(CnsMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(CnsMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = CnsMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1381
                self.match(CnsMRParser.Abs_VE)
                self.state = 1382
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1383
                self.vflc()
                self.state = 1384
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1386
                self.match(CnsMRParser.Acos_VE)
                self.state = 1387
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1388
                self.vflc()
                self.state = 1389
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1391
                self.match(CnsMRParser.Cos_VE)
                self.state = 1392
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1393
                self.vflc()
                self.state = 1394
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1396
                self.match(CnsMRParser.Decode_VE)
                self.state = 1397
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1398
                self.vflc()
                self.state = 1399
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1401
                self.match(CnsMRParser.Encode_VE)
                self.state = 1402
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1403
                self.vflc()
                self.state = 1404
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1406
                self.match(CnsMRParser.Exp_VE)
                self.state = 1407
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1408
                self.vflc()
                self.state = 1409
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1411
                self.match(CnsMRParser.Gauss_VE)
                self.state = 1412
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1413
                self.vflc()
                self.state = 1414
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1416
                self.match(CnsMRParser.Heavy_VE)
                self.state = 1417
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1418
                self.vflc()
                self.state = 1419
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1421
                self.match(CnsMRParser.Int_VE)
                self.state = 1422
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1423
                self.vflc()
                self.state = 1424
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1426
                self.match(CnsMRParser.Log10_VE)
                self.state = 1427
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1428
                self.vflc()
                self.state = 1429
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1431
                self.match(CnsMRParser.Log_VE)
                self.state = 1432
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1433
                self.vflc()
                self.state = 1434
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1436
                self.match(CnsMRParser.Max_VE)
                self.state = 1437
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1438
                self.vflc()
                self.state = 1443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1439
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1440
                    self.vflc()
                    self.state = 1445
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1446
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1448
                self.match(CnsMRParser.Maxw_VE)
                self.state = 1449
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1450
                self.vflc()
                self.state = 1451
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1453
                self.match(CnsMRParser.Min_VE)
                self.state = 1454
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1455
                self.vflc()
                self.state = 1460
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1456
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1457
                    self.vflc()
                    self.state = 1462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1463
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1465
                self.match(CnsMRParser.Mod_VE)
                self.state = 1466
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1467
                self.vflc()
                self.state = 1468
                self.match(CnsMRParser.Comma_VE)
                self.state = 1469
                self.vflc()
                self.state = 1470
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1472
                self.match(CnsMRParser.Norm_VE)
                self.state = 1473
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1474
                self.vflc()
                self.state = 1475
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1477
                self.match(CnsMRParser.Random_VE)
                self.state = 1478
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1479
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1480
                self.match(CnsMRParser.Sign_VE)
                self.state = 1481
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1482
                self.vflc()
                self.state = 1483
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1485
                self.match(CnsMRParser.Sin_VE)
                self.state = 1486
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1487
                self.vflc()
                self.state = 1488
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1490
                self.match(CnsMRParser.Sqrt_VE)
                self.state = 1491
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1492
                self.vflc()
                self.state = 1493
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1495
                self.match(CnsMRParser.Tan_VE)
                self.state = 1496
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1497
                self.vflc()
                self.state = 1498
                self.match(CnsMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(CnsMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(CnsMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(CnsMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(CnsMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(CnsMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(CnsMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(CnsMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(CnsMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(CnsMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(CnsMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = CnsMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1502
            _la = self._input.LA(1)
            if not(((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (CnsMRParser.Average_VS - 220)) | (1 << (CnsMRParser.Element_VS - 220)) | (1 << (CnsMRParser.Max_VS - 220)) | (1 << (CnsMRParser.Min_VS - 220)) | (1 << (CnsMRParser.Norm_VS - 220)) | (1 << (CnsMRParser.Rms_VS - 220)) | (1 << (CnsMRParser.Sum_VS - 220)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1503
            self.match(CnsMRParser.L_paren_VS)
            self.state = 1504
            self.match(CnsMRParser.Atom_properties_VS)
            self.state = 1505
            self.match(CnsMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(CnsMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = CnsMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1507
            self.match(CnsMRParser.Evaluate_Lp)
            self.state = 1508
            self.match(CnsMRParser.Symbol_name_VE)
            self.state = 1509
            self.match(CnsMRParser.Equ_op_VE)
            self.state = 1510
            self.evaluate_operation()
            self.state = 1511
            self.match(CnsMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = CnsMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self.vflc()
            self.state = 1516
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (CnsMRParser.Add_op_VE - 181)) | (1 << (CnsMRParser.Sub_op_VE - 181)) | (1 << (CnsMRParser.Mul_op_VE - 181)) | (1 << (CnsMRParser.Div_op_VE - 181)) | (1 << (CnsMRParser.Exp_op_VE - 181)))) != 0):
                self.state = 1514
                _la = self._input.LA(1)
                if not(((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (CnsMRParser.Add_op_VE - 181)) | (1 << (CnsMRParser.Sub_op_VE - 181)) | (1 << (CnsMRParser.Mul_op_VE - 181)) | (1 << (CnsMRParser.Div_op_VE - 181)) | (1 << (CnsMRParser.Exp_op_VE - 181)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1515
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = CnsMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1518
            self.match(CnsMRParser.For)
            self.state = 1519
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1520
            self.match(CnsMRParser.In_CF)
            self.state = 1521
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1540
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.state = 1525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1522
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1527
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1528
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1533
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1534
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1539
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1542
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1543
            self.match(CnsMRParser.Loop)
            self.state = 1544
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1547
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1545
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1546
                    self.dihedral_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1551
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1552
            self.match(CnsMRParser.End)
            self.state = 1553
            self.match(CnsMRParser.Loop)
            self.state = 1554
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[51] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




