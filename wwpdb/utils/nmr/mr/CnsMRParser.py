# Generated from CnsMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,239,1566,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,158,8,0,10,0,12,0,161,
        9,0,1,0,1,0,1,1,1,1,5,1,167,8,1,10,1,12,1,170,9,1,1,1,1,1,1,2,3,
        2,175,8,2,1,2,1,2,5,2,179,8,2,10,2,12,2,182,9,2,1,2,1,2,1,3,3,3,
        187,8,3,1,3,1,3,5,3,191,8,3,10,3,12,3,194,9,3,1,3,1,3,1,4,3,4,199,
        8,4,1,4,1,4,5,4,203,8,4,10,4,12,4,206,9,4,1,4,1,4,1,5,1,5,5,5,212,
        8,5,10,5,12,5,215,9,5,1,5,1,5,1,6,1,6,5,6,221,8,6,10,6,12,6,224,
        9,6,1,6,1,6,1,7,1,7,5,7,230,8,7,10,7,12,7,233,9,7,1,7,1,7,1,8,1,
        8,5,8,239,8,8,10,8,12,8,242,9,8,1,8,1,8,1,9,1,9,5,9,248,8,9,10,9,
        12,9,251,9,9,1,9,1,9,1,10,1,10,5,10,257,8,10,10,10,12,10,260,9,10,
        1,10,1,10,1,11,1,11,5,11,266,8,11,10,11,12,11,269,9,11,1,11,1,11,
        1,12,1,12,5,12,275,8,12,10,12,12,12,278,9,12,1,12,1,12,1,13,1,13,
        3,13,284,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,3,13,299,8,13,1,13,1,13,1,13,3,13,304,8,13,1,13,1,
        13,1,13,1,13,1,13,3,13,311,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,3,13,320,8,13,1,13,1,13,1,13,3,13,325,8,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,5,13,334,8,13,10,13,12,13,337,9,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,3,13,348,8,13,1,13,1,13,1,13,1,13,
        3,13,354,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,3,13,367,8,13,1,13,1,13,1,13,5,13,372,8,13,10,13,12,13,375,
        9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,399,8,13,
        10,13,12,13,402,9,13,1,13,1,13,1,13,3,13,407,8,13,1,13,3,13,410,
        8,13,1,14,1,14,1,14,1,14,1,14,3,14,417,8,14,1,14,3,14,420,8,14,1,
        14,5,14,423,8,14,10,14,12,14,426,9,14,1,14,1,14,3,14,430,8,14,1,
        14,1,14,1,14,3,14,435,8,14,1,14,3,14,438,8,14,1,14,3,14,441,8,14,
        5,14,443,8,14,10,14,12,14,446,9,14,1,15,1,15,3,15,450,8,15,1,15,
        1,15,1,15,3,15,455,8,15,1,15,1,15,1,15,1,15,1,15,3,15,462,8,15,1,
        16,1,16,3,16,466,8,16,1,16,1,16,1,16,3,16,471,8,16,1,16,1,16,1,16,
        3,16,476,8,16,1,16,1,16,1,16,3,16,481,8,16,1,16,1,16,1,16,3,16,486,
        8,16,1,16,1,16,1,16,3,16,491,8,16,1,16,1,16,1,16,3,16,496,8,16,1,
        16,3,16,499,8,16,1,17,1,17,1,17,1,17,3,17,505,8,17,1,17,1,17,1,17,
        3,17,510,8,17,1,17,1,17,1,17,3,17,515,8,17,1,17,1,17,1,17,1,17,3,
        17,521,8,17,1,17,1,17,3,17,525,8,17,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,19,1,19,5,19,539,8,19,10,19,12,19,542,9,19,
        1,19,1,19,1,19,3,19,547,8,19,1,20,1,20,3,20,551,8,20,1,20,1,20,1,
        20,3,20,556,8,20,1,20,3,20,559,8,20,1,21,1,21,3,21,563,8,21,1,21,
        1,21,1,21,3,21,568,8,21,1,21,1,21,1,21,3,21,573,8,21,1,21,1,21,3,
        21,577,8,21,1,21,1,21,1,21,1,21,3,21,583,8,21,1,21,1,21,3,21,587,
        8,21,1,21,1,21,3,21,591,8,21,1,21,3,21,594,8,21,3,21,596,8,21,1,
        21,1,21,3,21,600,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,
        23,3,23,611,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,621,
        8,23,1,23,1,23,1,23,3,23,626,8,23,1,23,1,23,1,23,3,23,631,8,23,1,
        23,1,23,1,23,1,23,1,23,3,23,638,8,23,1,24,1,24,1,24,1,24,1,24,1,
        24,1,24,1,24,1,24,3,24,649,8,24,1,24,3,24,652,8,24,1,25,1,25,1,25,
        3,25,657,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,
        668,8,25,1,25,1,25,1,25,1,25,3,25,674,8,25,1,25,1,25,3,25,678,8,
        25,1,25,1,25,1,25,3,25,683,8,25,1,25,1,25,1,25,3,25,688,8,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,3,25,697,8,25,1,25,3,25,700,8,25,1,
        25,3,25,703,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,
        26,3,26,715,8,26,1,26,1,26,1,26,1,26,1,26,3,26,722,8,26,1,27,1,27,
        1,27,3,27,727,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,3,27,739,8,27,1,27,1,27,1,27,3,27,744,8,27,1,27,1,27,1,27,3,
        27,749,8,27,1,27,1,27,1,27,3,27,754,8,27,1,27,1,27,1,27,3,27,759,
        8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,768,8,27,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,795,8,30,
        1,30,1,30,1,30,3,30,800,8,30,1,30,1,30,1,30,1,30,3,30,806,8,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,816,8,30,1,30,3,30,819,
        8,30,1,30,1,30,1,30,3,30,824,8,30,1,31,1,31,1,31,3,31,829,8,31,1,
        31,1,31,3,31,833,8,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,
        33,1,33,3,33,845,8,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,
        36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,3,38,869,8,38,1,39,1,39,1,39,1,40,1,40,1,40,3,40,877,8,40,1,40,
        1,40,1,40,1,40,1,40,3,40,884,8,40,1,40,3,40,887,8,40,1,40,3,40,890,
        8,40,1,40,1,40,1,40,3,40,895,8,40,1,40,1,40,1,40,3,40,900,8,40,1,
        40,1,40,1,40,3,40,905,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,3,40,915,8,40,1,40,1,40,1,40,3,40,920,8,40,1,40,1,40,1,40,3,40,
        925,8,40,1,40,1,40,3,40,929,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,3,40,938,8,40,1,40,3,40,941,8,40,1,40,1,40,1,40,1,40,1,40,3,40,
        948,8,40,1,40,3,40,951,8,40,1,40,3,40,954,8,40,1,40,3,40,957,8,40,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,969,8,41,
        1,41,1,41,1,41,1,41,1,41,3,41,976,8,41,1,41,1,41,1,41,1,41,1,41,
        3,41,983,8,41,1,42,1,42,1,42,3,42,988,8,42,1,42,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,1,42,1,42,3,42,1000,8,42,1,42,1,42,1,42,3,42,1005,
        8,42,1,42,1,42,1,42,3,42,1010,8,42,1,42,1,42,1,42,1,42,1,42,3,42,
        1017,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1028,
        8,43,1,44,1,44,1,44,3,44,1033,8,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,3,44,1047,8,44,1,44,1,44,1,44,3,44,
        1052,8,44,1,44,1,44,1,44,3,44,1057,8,44,1,44,1,44,1,44,1,44,1,44,
        3,44,1064,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,46,1,46,1,46,3,46,1081,8,46,1,46,1,46,1,46,3,46,1086,
        8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1095,8,46,1,46,1,46,
        1,46,3,46,1100,8,46,1,46,1,46,1,46,3,46,1105,8,46,1,46,1,46,1,46,
        3,46,1110,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1119,8,46,
        1,46,3,46,1122,8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1130,8,46,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        3,47,1145,8,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,5,49,1154,8,49,
        10,49,12,49,1157,9,49,1,50,1,50,1,50,5,50,1162,8,50,10,50,12,50,
        1165,9,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,3,51,1179,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,3,51,1195,8,51,3,51,1197,8,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,3,51,1216,8,51,1,51,1,51,1,51,3,51,1221,8,51,3,51,1223,
        8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1232,8,51,1,51,1,51,
        3,51,1236,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,
        1247,8,51,1,51,1,51,3,51,1251,8,51,1,51,1,51,3,51,1255,8,51,1,51,
        3,51,1258,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,3,51,1271,8,51,1,51,3,51,1274,8,51,1,51,1,51,1,51,1,51,1,51,
        3,51,1281,8,51,3,51,1283,8,51,1,51,1,51,1,51,1,51,1,51,3,51,1290,
        8,51,1,51,1,51,1,51,3,51,1295,8,51,3,51,1297,8,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,3,51,1317,8,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,1325,
        8,51,10,51,12,51,1328,9,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,
        55,1,56,1,56,1,56,5,56,1341,8,56,10,56,12,56,1344,9,56,1,56,3,56,
        1347,8,56,3,56,1349,8,56,1,56,1,56,5,56,1353,8,56,10,56,12,56,1356,
        9,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,
        3,58,1370,8,58,1,59,1,59,1,59,3,59,1375,8,59,1,60,1,60,1,60,3,60,
        1380,8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1389,8,61,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,1451,8,62,10,62,12,62,1454,
        9,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        5,62,1468,8,62,10,62,12,62,1471,9,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,3,62,1510,8,62,1,63,1,63,1,63,1,63,1,
        63,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,3,65,1526,8,65,1,
        66,1,66,1,66,1,66,1,66,5,66,1533,8,66,10,66,12,66,1536,9,66,1,66,
        5,66,1539,8,66,10,66,12,66,1542,9,66,1,66,5,66,1545,8,66,10,66,12,
        66,1548,9,66,3,66,1550,8,66,1,66,1,66,1,66,1,66,1,66,5,66,1557,8,
        66,10,66,12,66,1560,9,66,1,66,1,66,1,66,1,66,1,66,3,335,373,400,
        1,102,67,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,
        40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,
        84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,
        120,122,124,126,128,130,132,0,7,1,0,143,144,2,0,136,136,145,145,
        3,0,136,136,138,138,155,155,2,0,136,136,138,138,1,0,123,124,1,0,
        181,185,1,0,220,226,1879,0,159,1,0,0,0,2,164,1,0,0,0,4,174,1,0,0,
        0,6,186,1,0,0,0,8,198,1,0,0,0,10,209,1,0,0,0,12,218,1,0,0,0,14,227,
        1,0,0,0,16,236,1,0,0,0,18,245,1,0,0,0,20,254,1,0,0,0,22,263,1,0,
        0,0,24,272,1,0,0,0,26,409,1,0,0,0,28,411,1,0,0,0,30,461,1,0,0,0,
        32,498,1,0,0,0,34,524,1,0,0,0,36,526,1,0,0,0,38,546,1,0,0,0,40,558,
        1,0,0,0,42,599,1,0,0,0,44,601,1,0,0,0,46,637,1,0,0,0,48,639,1,0,
        0,0,50,702,1,0,0,0,52,704,1,0,0,0,54,767,1,0,0,0,56,769,1,0,0,0,
        58,778,1,0,0,0,60,823,1,0,0,0,62,825,1,0,0,0,64,834,1,0,0,0,66,838,
        1,0,0,0,68,848,1,0,0,0,70,851,1,0,0,0,72,854,1,0,0,0,74,857,1,0,
        0,0,76,860,1,0,0,0,78,870,1,0,0,0,80,956,1,0,0,0,82,958,1,0,0,0,
        84,1016,1,0,0,0,86,1018,1,0,0,0,88,1063,1,0,0,0,90,1065,1,0,0,0,
        92,1129,1,0,0,0,94,1131,1,0,0,0,96,1146,1,0,0,0,98,1150,1,0,0,0,
        100,1158,1,0,0,0,102,1316,1,0,0,0,104,1329,1,0,0,0,106,1331,1,0,
        0,0,108,1333,1,0,0,0,110,1335,1,0,0,0,112,1337,1,0,0,0,114,1359,
        1,0,0,0,116,1369,1,0,0,0,118,1371,1,0,0,0,120,1376,1,0,0,0,122,1388,
        1,0,0,0,124,1509,1,0,0,0,126,1511,1,0,0,0,128,1516,1,0,0,0,130,1522,
        1,0,0,0,132,1527,1,0,0,0,134,158,3,2,1,0,135,158,3,4,2,0,136,158,
        3,6,3,0,137,158,3,8,4,0,138,158,3,10,5,0,139,158,3,12,6,0,140,158,
        3,14,7,0,141,158,3,16,8,0,142,158,3,18,9,0,143,158,3,20,10,0,144,
        158,3,22,11,0,145,158,3,24,12,0,146,158,3,112,56,0,147,158,3,114,
        57,0,148,158,3,128,64,0,149,158,3,28,14,0,150,158,3,36,18,0,151,
        158,3,48,24,0,152,158,3,38,19,0,153,158,3,44,22,0,154,158,3,52,26,
        0,155,158,3,56,28,0,156,158,3,62,31,0,157,134,1,0,0,0,157,135,1,
        0,0,0,157,136,1,0,0,0,157,137,1,0,0,0,157,138,1,0,0,0,157,139,1,
        0,0,0,157,140,1,0,0,0,157,141,1,0,0,0,157,142,1,0,0,0,157,143,1,
        0,0,0,157,144,1,0,0,0,157,145,1,0,0,0,157,146,1,0,0,0,157,147,1,
        0,0,0,157,148,1,0,0,0,157,149,1,0,0,0,157,150,1,0,0,0,157,151,1,
        0,0,0,157,152,1,0,0,0,157,153,1,0,0,0,157,154,1,0,0,0,157,155,1,
        0,0,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,
        0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,163,5,0,0,1,163,1,1,0,
        0,0,164,168,5,3,0,0,165,167,3,26,13,0,166,165,1,0,0,0,167,170,1,
        0,0,0,168,166,1,0,0,0,168,169,1,0,0,0,169,171,1,0,0,0,170,168,1,
        0,0,0,171,172,5,2,0,0,172,3,1,0,0,0,173,175,5,48,0,0,174,173,1,0,
        0,0,174,175,1,0,0,0,175,176,1,0,0,0,176,180,5,49,0,0,177,179,3,34,
        17,0,178,177,1,0,0,0,179,182,1,0,0,0,180,178,1,0,0,0,180,181,1,0,
        0,0,181,183,1,0,0,0,182,180,1,0,0,0,183,184,5,2,0,0,184,5,1,0,0,
        0,185,187,5,48,0,0,186,185,1,0,0,0,186,187,1,0,0,0,187,188,1,0,0,
        0,188,192,5,52,0,0,189,191,3,38,19,0,190,189,1,0,0,0,191,194,1,0,
        0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,195,1,0,0,0,194,192,1,0,
        0,0,195,196,5,2,0,0,196,7,1,0,0,0,197,199,5,48,0,0,198,197,1,0,0,
        0,198,199,1,0,0,0,199,200,1,0,0,0,200,204,5,56,0,0,201,203,3,42,
        21,0,202,201,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,
        0,0,205,207,1,0,0,0,206,204,1,0,0,0,207,208,5,2,0,0,208,9,1,0,0,
        0,209,213,5,59,0,0,210,212,3,46,23,0,211,210,1,0,0,0,212,215,1,0,
        0,0,213,211,1,0,0,0,213,214,1,0,0,0,214,216,1,0,0,0,215,213,1,0,
        0,0,216,217,5,2,0,0,217,11,1,0,0,0,218,222,5,62,0,0,219,221,3,50,
        25,0,220,219,1,0,0,0,221,224,1,0,0,0,222,220,1,0,0,0,222,223,1,0,
        0,0,223,225,1,0,0,0,224,222,1,0,0,0,225,226,5,2,0,0,226,13,1,0,0,
        0,227,231,5,63,0,0,228,230,3,54,27,0,229,228,1,0,0,0,230,233,1,0,
        0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,234,1,0,0,0,233,231,1,0,
        0,0,234,235,5,2,0,0,235,15,1,0,0,0,236,240,5,69,0,0,237,239,3,60,
        30,0,238,237,1,0,0,0,239,242,1,0,0,0,240,238,1,0,0,0,240,241,1,0,
        0,0,241,243,1,0,0,0,242,240,1,0,0,0,243,244,5,2,0,0,244,17,1,0,0,
        0,245,249,5,78,0,0,246,248,3,80,40,0,247,246,1,0,0,0,248,251,1,0,
        0,0,249,247,1,0,0,0,249,250,1,0,0,0,250,252,1,0,0,0,251,249,1,0,
        0,0,252,253,5,2,0,0,253,19,1,0,0,0,254,258,5,83,0,0,255,257,3,84,
        42,0,256,255,1,0,0,0,257,260,1,0,0,0,258,256,1,0,0,0,258,259,1,0,
        0,0,259,261,1,0,0,0,260,258,1,0,0,0,261,262,5,2,0,0,262,21,1,0,0,
        0,263,267,5,84,0,0,264,266,3,88,44,0,265,264,1,0,0,0,266,269,1,0,
        0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,270,1,0,0,0,269,267,1,0,
        0,0,270,271,5,2,0,0,271,23,1,0,0,0,272,276,5,85,0,0,273,275,3,92,
        46,0,274,273,1,0,0,0,275,278,1,0,0,0,276,274,1,0,0,0,276,277,1,0,
        0,0,277,279,1,0,0,0,278,276,1,0,0,0,279,280,5,2,0,0,280,25,1,0,0,
        0,281,283,5,4,0,0,282,284,5,149,0,0,283,282,1,0,0,0,283,284,1,0,
        0,0,284,285,1,0,0,0,285,410,5,171,0,0,286,410,3,28,14,0,287,288,
        5,6,0,0,288,289,5,143,0,0,289,410,3,108,54,0,290,291,5,7,0,0,291,
        292,5,166,0,0,292,410,5,165,0,0,293,294,5,8,0,0,294,295,5,143,0,
        0,295,410,3,108,54,0,296,298,5,9,0,0,297,299,5,149,0,0,298,297,1,
        0,0,0,298,299,1,0,0,0,299,300,1,0,0,0,300,410,3,108,54,0,301,303,
        5,10,0,0,302,304,5,149,0,0,303,302,1,0,0,0,303,304,1,0,0,0,304,305,
        1,0,0,0,305,410,5,143,0,0,306,307,5,11,0,0,307,410,5,143,0,0,308,
        310,5,12,0,0,309,311,5,149,0,0,310,309,1,0,0,0,310,311,1,0,0,0,311,
        312,1,0,0,0,312,410,5,136,0,0,313,314,5,13,0,0,314,410,5,35,0,0,
        315,316,5,13,0,0,316,317,5,36,0,0,317,319,5,37,0,0,318,320,5,149,
        0,0,319,318,1,0,0,0,319,320,1,0,0,0,320,321,1,0,0,0,321,322,3,108,
        54,0,322,324,5,38,0,0,323,325,5,149,0,0,324,323,1,0,0,0,324,325,
        1,0,0,0,325,326,1,0,0,0,326,327,3,108,54,0,327,410,1,0,0,0,328,329,
        5,14,0,0,329,330,5,143,0,0,330,331,5,143,0,0,331,410,3,108,54,0,
        332,334,5,15,0,0,333,332,1,0,0,0,334,337,1,0,0,0,335,336,1,0,0,0,
        335,333,1,0,0,0,336,338,1,0,0,0,337,335,1,0,0,0,338,410,5,2,0,0,
        339,340,5,16,0,0,340,341,5,143,0,0,341,410,5,136,0,0,342,343,5,17,
        0,0,343,344,5,143,0,0,344,410,5,136,0,0,345,347,5,18,0,0,346,348,
        5,149,0,0,347,346,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,410,
        5,136,0,0,350,410,5,19,0,0,351,353,5,20,0,0,352,354,5,149,0,0,353,
        352,1,0,0,0,353,354,1,0,0,0,354,355,1,0,0,0,355,410,5,136,0,0,356,
        357,5,21,0,0,357,358,5,169,0,0,358,410,5,168,0,0,359,360,5,22,0,
        0,360,361,3,30,15,0,361,362,5,2,0,0,362,410,1,0,0,0,363,364,5,23,
        0,0,364,366,5,25,0,0,365,367,5,149,0,0,366,365,1,0,0,0,366,367,1,
        0,0,0,367,368,1,0,0,0,368,410,3,108,54,0,369,373,5,24,0,0,370,372,
        5,143,0,0,371,370,1,0,0,0,372,375,1,0,0,0,373,374,1,0,0,0,373,371,
        1,0,0,0,374,376,1,0,0,0,375,373,1,0,0,0,376,410,5,2,0,0,377,410,
        5,26,0,0,378,379,5,27,0,0,379,380,5,143,0,0,380,410,3,108,54,0,381,
        382,5,28,0,0,382,383,5,143,0,0,383,410,3,108,54,0,384,385,5,29,0,
        0,385,386,5,143,0,0,386,410,3,108,54,0,387,388,5,30,0,0,388,389,
        5,143,0,0,389,410,3,108,54,0,390,391,5,31,0,0,391,392,5,143,0,0,
        392,410,3,108,54,0,393,394,5,32,0,0,394,395,5,143,0,0,395,410,3,
        108,54,0,396,400,5,33,0,0,397,399,5,143,0,0,398,397,1,0,0,0,399,
        402,1,0,0,0,400,401,1,0,0,0,400,398,1,0,0,0,401,403,1,0,0,0,402,
        400,1,0,0,0,403,410,5,2,0,0,404,406,5,34,0,0,405,407,5,149,0,0,406,
        405,1,0,0,0,406,407,1,0,0,0,407,408,1,0,0,0,408,410,3,108,54,0,409,
        281,1,0,0,0,409,286,1,0,0,0,409,287,1,0,0,0,409,290,1,0,0,0,409,
        293,1,0,0,0,409,296,1,0,0,0,409,301,1,0,0,0,409,306,1,0,0,0,409,
        308,1,0,0,0,409,313,1,0,0,0,409,315,1,0,0,0,409,328,1,0,0,0,409,
        335,1,0,0,0,409,339,1,0,0,0,409,342,1,0,0,0,409,345,1,0,0,0,409,
        350,1,0,0,0,409,351,1,0,0,0,409,356,1,0,0,0,409,359,1,0,0,0,409,
        363,1,0,0,0,409,369,1,0,0,0,409,377,1,0,0,0,409,378,1,0,0,0,409,
        381,1,0,0,0,409,384,1,0,0,0,409,387,1,0,0,0,409,390,1,0,0,0,409,
        393,1,0,0,0,409,396,1,0,0,0,409,404,1,0,0,0,410,27,1,0,0,0,411,412,
        5,5,0,0,412,413,3,96,48,0,413,414,3,96,48,0,414,416,3,104,52,0,415,
        417,3,104,52,0,416,415,1,0,0,0,416,417,1,0,0,0,417,419,1,0,0,0,418,
        420,3,104,52,0,419,418,1,0,0,0,419,420,1,0,0,0,420,424,1,0,0,0,421,
        423,3,32,16,0,422,421,1,0,0,0,423,426,1,0,0,0,424,422,1,0,0,0,424,
        425,1,0,0,0,425,444,1,0,0,0,426,424,1,0,0,0,427,429,5,131,0,0,428,
        430,5,5,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,0,431,
        432,3,96,48,0,432,434,3,96,48,0,433,435,3,104,52,0,434,433,1,0,0,
        0,434,435,1,0,0,0,435,437,1,0,0,0,436,438,3,104,52,0,437,436,1,0,
        0,0,437,438,1,0,0,0,438,440,1,0,0,0,439,441,3,104,52,0,440,439,1,
        0,0,0,440,441,1,0,0,0,441,443,1,0,0,0,442,427,1,0,0,0,443,446,1,
        0,0,0,444,442,1,0,0,0,444,445,1,0,0,0,445,29,1,0,0,0,446,444,1,0,
        0,0,447,449,5,39,0,0,448,450,5,149,0,0,449,448,1,0,0,0,449,450,1,
        0,0,0,450,451,1,0,0,0,451,462,3,108,54,0,452,454,5,40,0,0,453,455,
        5,149,0,0,454,453,1,0,0,0,454,455,1,0,0,0,455,456,1,0,0,0,456,462,
        3,108,54,0,457,458,5,41,0,0,458,462,3,96,48,0,459,460,5,42,0,0,460,
        462,3,96,48,0,461,447,1,0,0,0,461,452,1,0,0,0,461,457,1,0,0,0,461,
        459,1,0,0,0,462,31,1,0,0,0,463,465,5,43,0,0,464,466,5,149,0,0,465,
        464,1,0,0,0,465,466,1,0,0,0,466,467,1,0,0,0,467,499,3,110,55,0,468,
        470,5,44,0,0,469,471,5,149,0,0,470,469,1,0,0,0,470,471,1,0,0,0,471,
        472,1,0,0,0,472,499,3,110,55,0,473,475,5,55,0,0,474,476,5,149,0,
        0,475,474,1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,499,3,110,
        55,0,478,480,5,45,0,0,479,481,5,149,0,0,480,479,1,0,0,0,480,481,
        1,0,0,0,481,482,1,0,0,0,482,499,3,110,55,0,483,485,5,46,0,0,484,
        486,5,149,0,0,485,484,1,0,0,0,485,486,1,0,0,0,486,487,1,0,0,0,487,
        499,3,110,55,0,488,490,5,47,0,0,489,491,5,149,0,0,490,489,1,0,0,
        0,490,491,1,0,0,0,491,492,1,0,0,0,492,499,3,110,55,0,493,495,5,12,
        0,0,494,496,5,149,0,0,495,494,1,0,0,0,495,496,1,0,0,0,496,497,1,
        0,0,0,497,499,3,110,55,0,498,463,1,0,0,0,498,468,1,0,0,0,498,473,
        1,0,0,0,498,478,1,0,0,0,498,483,1,0,0,0,498,488,1,0,0,0,498,493,
        1,0,0,0,499,33,1,0,0,0,500,525,3,36,18,0,501,525,3,132,66,0,502,
        504,5,12,0,0,503,505,5,149,0,0,504,503,1,0,0,0,504,505,1,0,0,0,505,
        506,1,0,0,0,506,525,5,136,0,0,507,509,5,50,0,0,508,510,5,149,0,0,
        509,508,1,0,0,0,509,510,1,0,0,0,510,511,1,0,0,0,511,525,5,136,0,
        0,512,514,5,20,0,0,513,515,5,149,0,0,514,513,1,0,0,0,514,515,1,0,
        0,0,515,516,1,0,0,0,516,525,5,136,0,0,517,525,5,26,0,0,518,520,5,
        28,0,0,519,521,5,149,0,0,520,519,1,0,0,0,520,521,1,0,0,0,521,522,
        1,0,0,0,522,525,3,108,54,0,523,525,5,51,0,0,524,500,1,0,0,0,524,
        501,1,0,0,0,524,502,1,0,0,0,524,507,1,0,0,0,524,512,1,0,0,0,524,
        517,1,0,0,0,524,518,1,0,0,0,524,523,1,0,0,0,525,35,1,0,0,0,526,527,
        5,5,0,0,527,528,3,96,48,0,528,529,3,96,48,0,529,530,3,96,48,0,530,
        531,3,96,48,0,531,532,3,104,52,0,532,533,3,104,52,0,533,534,3,104,
        52,0,534,535,5,136,0,0,535,37,1,0,0,0,536,540,5,53,0,0,537,539,3,
        40,20,0,538,537,1,0,0,0,539,542,1,0,0,0,540,538,1,0,0,0,540,541,
        1,0,0,0,541,543,1,0,0,0,542,540,1,0,0,0,543,547,5,2,0,0,544,547,
        5,35,0,0,545,547,5,51,0,0,546,536,1,0,0,0,546,544,1,0,0,0,546,545,
        1,0,0,0,547,39,1,0,0,0,548,550,5,54,0,0,549,551,5,149,0,0,550,549,
        1,0,0,0,550,551,1,0,0,0,551,552,1,0,0,0,552,559,3,96,48,0,553,555,
        5,55,0,0,554,556,5,149,0,0,555,554,1,0,0,0,555,556,1,0,0,0,556,557,
        1,0,0,0,557,559,3,108,54,0,558,548,1,0,0,0,558,553,1,0,0,0,559,41,
        1,0,0,0,560,562,5,57,0,0,561,563,5,149,0,0,562,561,1,0,0,0,562,563,
        1,0,0,0,563,564,1,0,0,0,564,600,5,136,0,0,565,567,5,58,0,0,566,568,
        5,149,0,0,567,566,1,0,0,0,567,568,1,0,0,0,568,569,1,0,0,0,569,595,
        5,146,0,0,570,572,3,108,54,0,571,573,5,134,0,0,572,571,1,0,0,0,572,
        573,1,0,0,0,573,574,1,0,0,0,574,576,3,108,54,0,575,577,5,134,0,0,
        576,575,1,0,0,0,576,577,1,0,0,0,577,578,1,0,0,0,578,579,3,108,54,
        0,579,596,1,0,0,0,580,582,5,129,0,0,581,583,5,149,0,0,582,581,1,
        0,0,0,582,583,1,0,0,0,583,584,1,0,0,0,584,586,3,96,48,0,585,587,
        5,134,0,0,586,585,1,0,0,0,586,587,1,0,0,0,587,593,1,0,0,0,588,590,
        5,130,0,0,589,591,5,149,0,0,590,589,1,0,0,0,590,591,1,0,0,0,591,
        592,1,0,0,0,592,594,3,96,48,0,593,588,1,0,0,0,593,594,1,0,0,0,594,
        596,1,0,0,0,595,570,1,0,0,0,595,580,1,0,0,0,596,597,1,0,0,0,597,
        598,5,147,0,0,598,600,1,0,0,0,599,560,1,0,0,0,599,565,1,0,0,0,600,
        43,1,0,0,0,601,602,5,5,0,0,602,603,3,96,48,0,603,604,3,104,52,0,
        604,605,3,104,52,0,605,606,3,104,52,0,606,45,1,0,0,0,607,638,3,48,
        24,0,608,610,5,10,0,0,609,611,5,149,0,0,610,609,1,0,0,0,610,611,
        1,0,0,0,611,612,1,0,0,0,612,638,5,143,0,0,613,614,5,60,0,0,614,615,
        3,108,54,0,615,616,3,108,54,0,616,617,3,108,54,0,617,638,1,0,0,0,
        618,620,5,61,0,0,619,621,5,149,0,0,620,619,1,0,0,0,620,621,1,0,0,
        0,621,622,1,0,0,0,622,638,3,108,54,0,623,625,5,18,0,0,624,626,5,
        149,0,0,625,624,1,0,0,0,625,626,1,0,0,0,626,627,1,0,0,0,627,638,
        5,136,0,0,628,630,5,21,0,0,629,631,5,167,0,0,630,629,1,0,0,0,630,
        631,1,0,0,0,631,632,1,0,0,0,632,638,5,168,0,0,633,634,5,23,0,0,634,
        635,5,25,0,0,635,638,3,108,54,0,636,638,5,26,0,0,637,607,1,0,0,0,
        637,608,1,0,0,0,637,613,1,0,0,0,637,618,1,0,0,0,637,623,1,0,0,0,
        637,628,1,0,0,0,637,633,1,0,0,0,637,636,1,0,0,0,638,47,1,0,0,0,639,
        640,5,5,0,0,640,641,3,96,48,0,641,642,3,96,48,0,642,643,3,96,48,
        0,643,644,3,96,48,0,644,645,3,96,48,0,645,646,3,96,48,0,646,648,
        3,104,52,0,647,649,3,104,52,0,648,647,1,0,0,0,648,649,1,0,0,0,649,
        651,1,0,0,0,650,652,3,104,52,0,651,650,1,0,0,0,651,652,1,0,0,0,652,
        49,1,0,0,0,653,703,3,52,26,0,654,656,5,10,0,0,655,657,5,149,0,0,
        656,655,1,0,0,0,656,657,1,0,0,0,657,658,1,0,0,0,658,703,5,143,0,
        0,659,660,5,60,0,0,660,661,3,108,54,0,661,662,3,108,54,0,662,663,
        3,108,54,0,663,664,3,108,54,0,664,703,1,0,0,0,665,667,5,12,0,0,666,
        668,5,149,0,0,667,666,1,0,0,0,667,668,1,0,0,0,668,669,1,0,0,0,669,
        703,5,136,0,0,670,671,5,61,0,0,671,673,3,108,54,0,672,674,3,108,
        54,0,673,672,1,0,0,0,673,674,1,0,0,0,674,703,1,0,0,0,675,677,5,18,
        0,0,676,678,5,149,0,0,677,676,1,0,0,0,677,678,1,0,0,0,678,679,1,
        0,0,0,679,703,5,136,0,0,680,682,5,20,0,0,681,683,5,149,0,0,682,681,
        1,0,0,0,682,683,1,0,0,0,683,684,1,0,0,0,684,703,5,136,0,0,685,687,
        5,21,0,0,686,688,5,167,0,0,687,686,1,0,0,0,687,688,1,0,0,0,688,689,
        1,0,0,0,689,703,5,168,0,0,690,691,5,23,0,0,691,692,5,25,0,0,692,
        699,3,108,54,0,693,700,5,89,0,0,694,696,5,10,0,0,695,697,5,149,0,
        0,696,695,1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,700,5,143,
        0,0,699,693,1,0,0,0,699,694,1,0,0,0,700,703,1,0,0,0,701,703,5,26,
        0,0,702,653,1,0,0,0,702,654,1,0,0,0,702,659,1,0,0,0,702,665,1,0,
        0,0,702,670,1,0,0,0,702,675,1,0,0,0,702,680,1,0,0,0,702,685,1,0,
        0,0,702,690,1,0,0,0,702,701,1,0,0,0,703,51,1,0,0,0,704,705,5,5,0,
        0,705,706,3,96,48,0,706,707,3,96,48,0,707,708,3,96,48,0,708,714,
        3,96,48,0,709,710,3,96,48,0,710,711,3,96,48,0,711,712,3,96,48,0,
        712,713,3,96,48,0,713,715,1,0,0,0,714,709,1,0,0,0,714,715,1,0,0,
        0,715,716,1,0,0,0,716,717,3,104,52,0,717,721,3,104,52,0,718,719,
        3,104,52,0,719,720,3,104,52,0,720,722,1,0,0,0,721,718,1,0,0,0,721,
        722,1,0,0,0,722,53,1,0,0,0,723,768,3,56,28,0,724,726,5,10,0,0,725,
        727,5,149,0,0,726,725,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,728,
        768,5,143,0,0,729,730,5,64,0,0,730,731,5,136,0,0,731,732,5,136,0,
        0,732,733,3,108,54,0,733,734,3,108,54,0,734,735,3,108,54,0,735,768,
        1,0,0,0,736,738,5,61,0,0,737,739,5,149,0,0,738,737,1,0,0,0,738,739,
        1,0,0,0,739,740,1,0,0,0,740,768,3,108,54,0,741,743,5,18,0,0,742,
        744,5,149,0,0,743,742,1,0,0,0,743,744,1,0,0,0,744,745,1,0,0,0,745,
        768,5,136,0,0,746,748,5,65,0,0,747,749,5,149,0,0,748,747,1,0,0,0,
        748,749,1,0,0,0,749,750,1,0,0,0,750,768,3,108,54,0,751,753,5,66,
        0,0,752,754,5,149,0,0,753,752,1,0,0,0,753,754,1,0,0,0,754,755,1,
        0,0,0,755,768,3,108,54,0,756,758,5,21,0,0,757,759,5,167,0,0,758,
        757,1,0,0,0,758,759,1,0,0,0,759,760,1,0,0,0,760,768,5,168,0,0,761,
        762,5,23,0,0,762,763,5,25,0,0,763,768,3,108,54,0,764,768,3,58,29,
        0,765,768,5,26,0,0,766,768,5,68,0,0,767,723,1,0,0,0,767,724,1,0,
        0,0,767,729,1,0,0,0,767,736,1,0,0,0,767,741,1,0,0,0,767,746,1,0,
        0,0,767,751,1,0,0,0,767,756,1,0,0,0,767,761,1,0,0,0,767,764,1,0,
        0,0,767,765,1,0,0,0,767,766,1,0,0,0,768,55,1,0,0,0,769,770,5,5,0,
        0,770,771,3,96,48,0,771,772,3,96,48,0,772,773,3,96,48,0,773,774,
        3,96,48,0,774,775,3,96,48,0,775,776,3,104,52,0,776,777,3,104,52,
        0,777,57,1,0,0,0,778,779,5,67,0,0,779,780,3,96,48,0,780,781,3,104,
        52,0,781,782,3,104,52,0,782,59,1,0,0,0,783,824,3,62,31,0,784,824,
        3,64,32,0,785,824,3,66,33,0,786,824,3,68,34,0,787,824,3,70,35,0,
        788,824,3,72,36,0,789,824,3,74,37,0,790,824,3,76,38,0,791,824,3,
        78,39,0,792,794,5,10,0,0,793,795,5,149,0,0,794,793,1,0,0,0,794,795,
        1,0,0,0,795,796,1,0,0,0,796,824,5,143,0,0,797,799,5,77,0,0,798,800,
        5,149,0,0,799,798,1,0,0,0,799,800,1,0,0,0,800,801,1,0,0,0,801,824,
        3,108,54,0,802,803,5,61,0,0,803,805,3,108,54,0,804,806,3,108,54,
        0,805,804,1,0,0,0,805,806,1,0,0,0,806,824,1,0,0,0,807,808,5,21,0,
        0,808,824,5,168,0,0,809,810,5,23,0,0,810,811,5,25,0,0,811,818,3,
        108,54,0,812,819,5,89,0,0,813,815,5,10,0,0,814,816,5,149,0,0,815,
        814,1,0,0,0,815,816,1,0,0,0,816,817,1,0,0,0,817,819,5,143,0,0,818,
        812,1,0,0,0,818,813,1,0,0,0,819,820,1,0,0,0,820,821,5,143,0,0,821,
        824,1,0,0,0,822,824,5,26,0,0,823,783,1,0,0,0,823,784,1,0,0,0,823,
        785,1,0,0,0,823,786,1,0,0,0,823,787,1,0,0,0,823,788,1,0,0,0,823,
        789,1,0,0,0,823,790,1,0,0,0,823,791,1,0,0,0,823,792,1,0,0,0,823,
        797,1,0,0,0,823,802,1,0,0,0,823,807,1,0,0,0,823,809,1,0,0,0,823,
        822,1,0,0,0,824,61,1,0,0,0,825,826,5,70,0,0,826,828,3,96,48,0,827,
        829,3,96,48,0,828,827,1,0,0,0,828,829,1,0,0,0,829,830,1,0,0,0,830,
        832,3,104,52,0,831,833,3,104,52,0,832,831,1,0,0,0,832,833,1,0,0,
        0,833,63,1,0,0,0,834,835,5,67,0,0,835,836,3,96,48,0,836,837,3,104,
        52,0,837,65,1,0,0,0,838,839,5,71,0,0,839,840,3,96,48,0,840,841,3,
        96,48,0,841,842,3,96,48,0,842,844,5,143,0,0,843,845,5,137,0,0,844,
        843,1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,0,846,847,5,143,0,0,847,
        67,1,0,0,0,848,849,5,72,0,0,849,850,3,96,48,0,850,69,1,0,0,0,851,
        852,5,63,0,0,852,853,3,96,48,0,853,71,1,0,0,0,854,855,5,73,0,0,855,
        856,3,96,48,0,856,73,1,0,0,0,857,858,5,74,0,0,858,859,3,96,48,0,
        859,75,1,0,0,0,860,861,5,75,0,0,861,862,5,143,0,0,862,863,3,96,48,
        0,863,864,3,96,48,0,864,865,3,96,48,0,865,866,3,96,48,0,866,868,
        3,96,48,0,867,869,3,96,48,0,868,867,1,0,0,0,868,869,1,0,0,0,869,
        77,1,0,0,0,870,871,5,76,0,0,871,872,3,96,48,0,872,79,1,0,0,0,873,
        957,3,82,41,0,874,876,5,10,0,0,875,877,5,149,0,0,876,875,1,0,0,0,
        876,877,1,0,0,0,877,878,1,0,0,0,878,957,5,143,0,0,879,957,5,79,0,
        0,880,881,5,64,0,0,881,883,5,136,0,0,882,884,5,136,0,0,883,882,1,
        0,0,0,883,884,1,0,0,0,884,886,1,0,0,0,885,887,5,136,0,0,886,885,
        1,0,0,0,886,887,1,0,0,0,887,889,1,0,0,0,888,890,5,136,0,0,889,888,
        1,0,0,0,889,890,1,0,0,0,890,891,1,0,0,0,891,957,3,108,54,0,892,894,
        5,77,0,0,893,895,5,149,0,0,894,893,1,0,0,0,894,895,1,0,0,0,895,896,
        1,0,0,0,896,957,3,108,54,0,897,899,5,61,0,0,898,900,5,149,0,0,899,
        898,1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,957,3,108,54,0,902,
        904,5,18,0,0,903,905,5,149,0,0,904,903,1,0,0,0,904,905,1,0,0,0,905,
        906,1,0,0,0,906,957,5,136,0,0,907,908,5,80,0,0,908,909,5,136,0,0,
        909,910,5,136,0,0,910,914,5,136,0,0,911,912,5,136,0,0,912,913,5,
        136,0,0,913,915,5,136,0,0,914,911,1,0,0,0,914,915,1,0,0,0,915,919,
        1,0,0,0,916,917,5,136,0,0,917,918,5,136,0,0,918,920,5,136,0,0,919,
        916,1,0,0,0,919,920,1,0,0,0,920,924,1,0,0,0,921,922,5,136,0,0,922,
        923,5,136,0,0,923,925,5,136,0,0,924,921,1,0,0,0,924,925,1,0,0,0,
        925,957,1,0,0,0,926,928,5,21,0,0,927,929,5,167,0,0,928,927,1,0,0,
        0,928,929,1,0,0,0,929,930,1,0,0,0,930,957,5,168,0,0,931,932,5,23,
        0,0,932,933,5,25,0,0,933,940,3,108,54,0,934,941,5,89,0,0,935,937,
        5,10,0,0,936,938,5,149,0,0,937,936,1,0,0,0,937,938,1,0,0,0,938,939,
        1,0,0,0,939,941,5,143,0,0,940,934,1,0,0,0,940,935,1,0,0,0,941,957,
        1,0,0,0,942,957,5,26,0,0,943,944,5,81,0,0,944,945,5,82,0,0,945,947,
        5,136,0,0,946,948,5,136,0,0,947,946,1,0,0,0,947,948,1,0,0,0,948,
        950,1,0,0,0,949,951,5,136,0,0,950,949,1,0,0,0,950,951,1,0,0,0,951,
        953,1,0,0,0,952,954,5,136,0,0,953,952,1,0,0,0,953,954,1,0,0,0,954,
        957,1,0,0,0,955,957,5,68,0,0,956,873,1,0,0,0,956,874,1,0,0,0,956,
        879,1,0,0,0,956,880,1,0,0,0,956,892,1,0,0,0,956,897,1,0,0,0,956,
        902,1,0,0,0,956,907,1,0,0,0,956,926,1,0,0,0,956,931,1,0,0,0,956,
        942,1,0,0,0,956,943,1,0,0,0,956,955,1,0,0,0,957,81,1,0,0,0,958,959,
        5,5,0,0,959,960,3,96,48,0,960,961,3,96,48,0,961,962,3,96,48,0,962,
        968,3,96,48,0,963,964,3,96,48,0,964,965,3,96,48,0,965,966,3,96,48,
        0,966,967,3,96,48,0,967,969,1,0,0,0,968,963,1,0,0,0,968,969,1,0,
        0,0,969,975,1,0,0,0,970,971,3,96,48,0,971,972,3,96,48,0,972,973,
        3,96,48,0,973,974,3,96,48,0,974,976,1,0,0,0,975,970,1,0,0,0,975,
        976,1,0,0,0,976,982,1,0,0,0,977,978,3,96,48,0,978,979,3,96,48,0,
        979,980,3,96,48,0,980,981,3,96,48,0,981,983,1,0,0,0,982,977,1,0,
        0,0,982,983,1,0,0,0,983,83,1,0,0,0,984,1017,3,86,43,0,985,987,5,
        10,0,0,986,988,5,149,0,0,987,986,1,0,0,0,987,988,1,0,0,0,988,989,
        1,0,0,0,989,1017,5,143,0,0,990,991,5,60,0,0,991,992,3,108,54,0,992,
        993,3,108,54,0,993,994,3,108,54,0,994,995,3,108,54,0,995,996,3,108,
        54,0,996,1017,1,0,0,0,997,999,5,61,0,0,998,1000,5,149,0,0,999,998,
        1,0,0,0,999,1000,1,0,0,0,1000,1001,1,0,0,0,1001,1017,3,108,54,0,
        1002,1004,5,18,0,0,1003,1005,5,149,0,0,1004,1003,1,0,0,0,1004,1005,
        1,0,0,0,1005,1006,1,0,0,0,1006,1017,5,136,0,0,1007,1009,5,21,0,0,
        1008,1010,5,167,0,0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,
        1,0,0,0,1011,1017,5,168,0,0,1012,1013,5,23,0,0,1013,1014,5,25,0,
        0,1014,1017,3,108,54,0,1015,1017,5,26,0,0,1016,984,1,0,0,0,1016,
        985,1,0,0,0,1016,990,1,0,0,0,1016,997,1,0,0,0,1016,1002,1,0,0,0,
        1016,1007,1,0,0,0,1016,1012,1,0,0,0,1016,1015,1,0,0,0,1017,85,1,
        0,0,0,1018,1019,5,5,0,0,1019,1020,3,96,48,0,1020,1021,3,96,48,0,
        1021,1022,3,96,48,0,1022,1023,3,96,48,0,1023,1024,3,96,48,0,1024,
        1025,3,96,48,0,1025,1027,3,104,52,0,1026,1028,3,104,52,0,1027,1026,
        1,0,0,0,1027,1028,1,0,0,0,1028,87,1,0,0,0,1029,1064,3,90,45,0,1030,
        1032,5,10,0,0,1031,1033,5,149,0,0,1032,1031,1,0,0,0,1032,1033,1,
        0,0,0,1033,1034,1,0,0,0,1034,1064,5,143,0,0,1035,1036,5,60,0,0,1036,
        1037,3,108,54,0,1037,1038,3,108,54,0,1038,1039,3,108,54,0,1039,1040,
        3,108,54,0,1040,1041,3,108,54,0,1041,1042,3,108,54,0,1042,1043,3,
        108,54,0,1043,1064,1,0,0,0,1044,1046,5,61,0,0,1045,1047,5,149,0,
        0,1046,1045,1,0,0,0,1046,1047,1,0,0,0,1047,1048,1,0,0,0,1048,1064,
        3,108,54,0,1049,1051,5,18,0,0,1050,1052,5,149,0,0,1051,1050,1,0,
        0,0,1051,1052,1,0,0,0,1052,1053,1,0,0,0,1053,1064,5,136,0,0,1054,
        1056,5,21,0,0,1055,1057,5,167,0,0,1056,1055,1,0,0,0,1056,1057,1,
        0,0,0,1057,1058,1,0,0,0,1058,1064,5,168,0,0,1059,1060,5,23,0,0,1060,
        1061,5,25,0,0,1061,1064,3,108,54,0,1062,1064,5,26,0,0,1063,1029,
        1,0,0,0,1063,1030,1,0,0,0,1063,1035,1,0,0,0,1063,1044,1,0,0,0,1063,
        1049,1,0,0,0,1063,1054,1,0,0,0,1063,1059,1,0,0,0,1063,1062,1,0,0,
        0,1064,89,1,0,0,0,1065,1066,5,5,0,0,1066,1067,3,96,48,0,1067,1068,
        3,96,48,0,1068,1069,3,96,48,0,1069,1070,3,96,48,0,1070,1071,3,96,
        48,0,1071,1072,3,96,48,0,1072,1073,3,96,48,0,1073,1074,3,96,48,0,
        1074,1075,3,104,52,0,1075,1076,3,104,52,0,1076,91,1,0,0,0,1077,1130,
        3,94,47,0,1078,1080,5,10,0,0,1079,1081,5,149,0,0,1080,1079,1,0,0,
        0,1080,1081,1,0,0,0,1081,1082,1,0,0,0,1082,1130,5,143,0,0,1083,1085,
        5,86,0,0,1084,1086,5,149,0,0,1085,1084,1,0,0,0,1085,1086,1,0,0,0,
        1086,1087,1,0,0,0,1087,1130,5,143,0,0,1088,1089,5,64,0,0,1089,1090,
        5,136,0,0,1090,1091,5,136,0,0,1091,1130,3,108,54,0,1092,1094,5,77,
        0,0,1093,1095,5,149,0,0,1094,1093,1,0,0,0,1094,1095,1,0,0,0,1095,
        1096,1,0,0,0,1096,1130,3,108,54,0,1097,1099,5,61,0,0,1098,1100,5,
        149,0,0,1099,1098,1,0,0,0,1099,1100,1,0,0,0,1100,1101,1,0,0,0,1101,
        1130,3,108,54,0,1102,1104,5,18,0,0,1103,1105,5,149,0,0,1104,1103,
        1,0,0,0,1104,1105,1,0,0,0,1105,1106,1,0,0,0,1106,1130,5,136,0,0,
        1107,1109,5,21,0,0,1108,1110,5,167,0,0,1109,1108,1,0,0,0,1109,1110,
        1,0,0,0,1110,1111,1,0,0,0,1111,1130,5,168,0,0,1112,1113,5,23,0,0,
        1113,1114,5,25,0,0,1114,1121,3,108,54,0,1115,1122,5,89,0,0,1116,
        1118,5,10,0,0,1117,1119,5,149,0,0,1118,1117,1,0,0,0,1118,1119,1,
        0,0,0,1119,1120,1,0,0,0,1120,1122,5,143,0,0,1121,1115,1,0,0,0,1121,
        1116,1,0,0,0,1122,1130,1,0,0,0,1123,1130,5,26,0,0,1124,1125,5,81,
        0,0,1125,1126,5,87,0,0,1126,1127,5,136,0,0,1127,1130,5,136,0,0,1128,
        1130,5,68,0,0,1129,1077,1,0,0,0,1129,1078,1,0,0,0,1129,1083,1,0,
        0,0,1129,1088,1,0,0,0,1129,1092,1,0,0,0,1129,1097,1,0,0,0,1129,1102,
        1,0,0,0,1129,1107,1,0,0,0,1129,1112,1,0,0,0,1129,1123,1,0,0,0,1129,
        1124,1,0,0,0,1129,1128,1,0,0,0,1130,93,1,0,0,0,1131,1132,5,5,0,0,
        1132,1133,3,96,48,0,1133,1134,3,96,48,0,1134,1135,3,96,48,0,1135,
        1136,3,96,48,0,1136,1137,3,96,48,0,1137,1138,3,96,48,0,1138,1139,
        3,96,48,0,1139,1140,3,96,48,0,1140,1141,3,96,48,0,1141,1142,3,96,
        48,0,1142,1144,3,96,48,0,1143,1145,3,96,48,0,1144,1143,1,0,0,0,1144,
        1145,1,0,0,0,1145,95,1,0,0,0,1146,1147,5,146,0,0,1147,1148,3,98,
        49,0,1148,1149,5,147,0,0,1149,97,1,0,0,0,1150,1155,3,100,50,0,1151,
        1152,5,131,0,0,1152,1154,3,100,50,0,1153,1151,1,0,0,0,1154,1157,
        1,0,0,0,1155,1153,1,0,0,0,1155,1156,1,0,0,0,1156,99,1,0,0,0,1157,
        1155,1,0,0,0,1158,1163,3,102,51,0,1159,1160,5,132,0,0,1160,1162,
        3,102,51,0,1161,1159,1,0,0,0,1162,1165,1,0,0,0,1163,1161,1,0,0,0,
        1163,1164,1,0,0,0,1164,101,1,0,0,0,1165,1163,1,0,0,0,1166,1167,6,
        51,-1,0,1167,1168,5,146,0,0,1168,1169,3,98,49,0,1169,1170,5,147,
        0,0,1170,1317,1,0,0,0,1171,1317,5,89,0,0,1172,1173,5,91,0,0,1173,
        1174,7,0,0,0,1174,1175,7,1,0,0,1175,1317,7,0,0,0,1176,1178,5,92,
        0,0,1177,1179,5,161,0,0,1178,1177,1,0,0,0,1178,1179,1,0,0,0,1179,
        1180,1,0,0,0,1180,1181,5,162,0,0,1181,1182,5,163,0,0,1182,1317,3,
        106,53,0,1183,1184,5,93,0,0,1184,1317,3,102,51,30,1185,1186,5,94,
        0,0,1186,1317,3,102,51,29,1187,1188,5,95,0,0,1188,1317,3,102,51,
        28,1189,1196,5,96,0,0,1190,1197,5,144,0,0,1191,1194,5,143,0,0,1192,
        1193,5,148,0,0,1193,1195,5,143,0,0,1194,1192,1,0,0,0,1194,1195,1,
        0,0,0,1195,1197,1,0,0,0,1196,1190,1,0,0,0,1196,1191,1,0,0,0,1197,
        1317,1,0,0,0,1198,1199,5,97,0,0,1199,1200,3,106,53,0,1200,1201,3,
        106,53,0,1201,1202,3,106,53,0,1202,1203,3,106,53,0,1203,1204,3,106,
        53,0,1204,1205,3,106,53,0,1205,1317,1,0,0,0,1206,1317,5,98,0,0,1207,
        1208,5,99,0,0,1208,1317,5,136,0,0,1209,1317,5,100,0,0,1210,1222,
        5,101,0,0,1211,1223,5,144,0,0,1212,1215,5,143,0,0,1213,1214,5,148,
        0,0,1214,1216,5,143,0,0,1215,1213,1,0,0,0,1215,1216,1,0,0,0,1216,
        1223,1,0,0,0,1217,1220,5,139,0,0,1218,1219,5,148,0,0,1219,1221,5,
        139,0,0,1220,1218,1,0,0,0,1220,1221,1,0,0,0,1221,1223,1,0,0,0,1222,
        1211,1,0,0,0,1222,1212,1,0,0,0,1222,1217,1,0,0,0,1223,1317,1,0,0,
        0,1224,1317,5,102,0,0,1225,1226,5,133,0,0,1226,1317,3,102,51,20,
        1227,1228,5,103,0,0,1228,1229,5,146,0,0,1229,1231,3,106,53,0,1230,
        1232,5,134,0,0,1231,1230,1,0,0,0,1231,1232,1,0,0,0,1232,1233,1,0,
        0,0,1233,1235,3,106,53,0,1234,1236,5,134,0,0,1235,1234,1,0,0,0,1235,
        1236,1,0,0,0,1236,1237,1,0,0,0,1237,1238,3,106,53,0,1238,1239,5,
        147,0,0,1239,1240,5,104,0,0,1240,1241,3,106,53,0,1241,1317,1,0,0,
        0,1242,1243,5,103,0,0,1243,1244,5,146,0,0,1244,1246,5,129,0,0,1245,
        1247,5,149,0,0,1246,1245,1,0,0,0,1246,1247,1,0,0,0,1247,1248,1,0,
        0,0,1248,1250,3,96,48,0,1249,1251,5,134,0,0,1250,1249,1,0,0,0,1250,
        1251,1,0,0,0,1251,1257,1,0,0,0,1252,1254,5,130,0,0,1253,1255,5,149,
        0,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,1256,1,0,0,0,1256,1258,
        3,96,48,0,1257,1252,1,0,0,0,1257,1258,1,0,0,0,1258,1259,1,0,0,0,
        1259,1260,5,147,0,0,1260,1261,5,104,0,0,1261,1262,3,106,53,0,1262,
        1317,1,0,0,0,1263,1317,5,105,0,0,1264,1317,5,106,0,0,1265,1273,5,
        107,0,0,1266,1274,5,145,0,0,1267,1270,5,136,0,0,1268,1269,5,148,
        0,0,1269,1271,5,136,0,0,1270,1268,1,0,0,0,1270,1271,1,0,0,0,1271,
        1274,1,0,0,0,1272,1274,5,155,0,0,1273,1266,1,0,0,0,1273,1267,1,0,
        0,0,1273,1272,1,0,0,0,1274,1317,1,0,0,0,1275,1282,5,108,0,0,1276,
        1283,5,144,0,0,1277,1280,5,143,0,0,1278,1279,5,148,0,0,1279,1281,
        5,143,0,0,1280,1278,1,0,0,0,1280,1281,1,0,0,0,1281,1283,1,0,0,0,
        1282,1276,1,0,0,0,1282,1277,1,0,0,0,1283,1317,1,0,0,0,1284,1296,
        5,110,0,0,1285,1297,5,144,0,0,1286,1289,5,143,0,0,1287,1288,5,148,
        0,0,1288,1290,5,143,0,0,1289,1287,1,0,0,0,1289,1290,1,0,0,0,1290,
        1297,1,0,0,0,1291,1294,5,139,0,0,1292,1293,5,148,0,0,1293,1295,5,
        139,0,0,1294,1292,1,0,0,0,1294,1295,1,0,0,0,1295,1297,1,0,0,0,1296,
        1285,1,0,0,0,1296,1286,1,0,0,0,1296,1291,1,0,0,0,1297,1317,1,0,0,
        0,1298,1299,5,111,0,0,1299,1300,3,106,53,0,1300,1301,3,106,53,0,
        1301,1302,3,106,53,0,1302,1303,3,106,53,0,1303,1304,3,106,53,0,1304,
        1305,3,106,53,0,1305,1317,1,0,0,0,1306,1317,5,112,0,0,1307,1317,
        5,113,0,0,1308,1317,5,114,0,0,1309,1317,5,115,0,0,1310,1317,5,116,
        0,0,1311,1317,5,117,0,0,1312,1317,5,118,0,0,1313,1317,5,119,0,0,
        1314,1317,5,120,0,0,1315,1317,5,121,0,0,1316,1166,1,0,0,0,1316,1171,
        1,0,0,0,1316,1172,1,0,0,0,1316,1176,1,0,0,0,1316,1183,1,0,0,0,1316,
        1185,1,0,0,0,1316,1187,1,0,0,0,1316,1189,1,0,0,0,1316,1198,1,0,0,
        0,1316,1206,1,0,0,0,1316,1207,1,0,0,0,1316,1209,1,0,0,0,1316,1210,
        1,0,0,0,1316,1224,1,0,0,0,1316,1225,1,0,0,0,1316,1227,1,0,0,0,1316,
        1242,1,0,0,0,1316,1263,1,0,0,0,1316,1264,1,0,0,0,1316,1265,1,0,0,
        0,1316,1275,1,0,0,0,1316,1284,1,0,0,0,1316,1298,1,0,0,0,1316,1306,
        1,0,0,0,1316,1307,1,0,0,0,1316,1308,1,0,0,0,1316,1309,1,0,0,0,1316,
        1310,1,0,0,0,1316,1311,1,0,0,0,1316,1312,1,0,0,0,1316,1313,1,0,0,
        0,1316,1314,1,0,0,0,1316,1315,1,0,0,0,1317,1326,1,0,0,0,1318,1319,
        10,33,0,0,1319,1320,5,90,0,0,1320,1325,3,106,53,0,1321,1322,10,13,
        0,0,1322,1323,5,109,0,0,1323,1325,3,106,53,0,1324,1318,1,0,0,0,1324,
        1321,1,0,0,0,1325,1328,1,0,0,0,1326,1324,1,0,0,0,1326,1327,1,0,0,
        0,1327,103,1,0,0,0,1328,1326,1,0,0,0,1329,1330,7,2,0,0,1330,105,
        1,0,0,0,1331,1332,7,3,0,0,1332,107,1,0,0,0,1333,1334,7,2,0,0,1334,
        109,1,0,0,0,1335,1336,7,3,0,0,1336,111,1,0,0,0,1337,1348,5,88,0,
        0,1338,1346,5,173,0,0,1339,1341,5,176,0,0,1340,1339,1,0,0,0,1341,
        1344,1,0,0,0,1342,1340,1,0,0,0,1342,1343,1,0,0,0,1343,1347,1,0,0,
        0,1344,1342,1,0,0,0,1345,1347,5,177,0,0,1346,1342,1,0,0,0,1346,1345,
        1,0,0,0,1347,1349,1,0,0,0,1348,1338,1,0,0,0,1348,1349,1,0,0,0,1349,
        1350,1,0,0,0,1350,1354,5,174,0,0,1351,1353,5,176,0,0,1352,1351,1,
        0,0,0,1353,1356,1,0,0,0,1354,1352,1,0,0,0,1354,1355,1,0,0,0,1355,
        1357,1,0,0,0,1356,1354,1,0,0,0,1357,1358,5,175,0,0,1358,113,1,0,
        0,0,1359,1360,5,122,0,0,1360,1361,3,116,58,0,1361,1362,3,96,48,0,
        1362,115,1,0,0,0,1363,1364,7,4,0,0,1364,1365,3,118,59,0,1365,1366,
        5,179,0,0,1366,1370,1,0,0,0,1367,1368,5,125,0,0,1368,1370,3,126,
        63,0,1369,1363,1,0,0,0,1369,1367,1,0,0,0,1370,117,1,0,0,0,1371,1374,
        5,189,0,0,1372,1373,5,180,0,0,1373,1375,3,120,60,0,1374,1372,1,0,
        0,0,1374,1375,1,0,0,0,1375,119,1,0,0,0,1376,1379,3,122,61,0,1377,
        1378,7,5,0,0,1378,1380,3,120,60,0,1379,1377,1,0,0,0,1379,1380,1,
        0,0,0,1380,121,1,0,0,0,1381,1389,5,189,0,0,1382,1389,3,124,62,0,
        1383,1389,5,187,0,0,1384,1389,5,188,0,0,1385,1389,5,212,0,0,1386,
        1389,5,213,0,0,1387,1389,5,214,0,0,1388,1381,1,0,0,0,1388,1382,1,
        0,0,0,1388,1383,1,0,0,0,1388,1384,1,0,0,0,1388,1385,1,0,0,0,1388,
        1386,1,0,0,0,1388,1387,1,0,0,0,1389,123,1,0,0,0,1390,1391,5,190,
        0,0,1391,1392,5,216,0,0,1392,1393,3,122,61,0,1393,1394,5,179,0,0,
        1394,1510,1,0,0,0,1395,1396,5,191,0,0,1396,1397,5,216,0,0,1397,1398,
        3,122,61,0,1398,1399,5,179,0,0,1399,1510,1,0,0,0,1400,1401,5,193,
        0,0,1401,1402,5,216,0,0,1402,1403,3,122,61,0,1403,1404,5,179,0,0,
        1404,1510,1,0,0,0,1405,1406,5,194,0,0,1406,1407,5,216,0,0,1407,1408,
        3,122,61,0,1408,1409,5,179,0,0,1409,1510,1,0,0,0,1410,1411,5,195,
        0,0,1411,1412,5,216,0,0,1412,1413,3,122,61,0,1413,1414,5,179,0,0,
        1414,1510,1,0,0,0,1415,1416,5,196,0,0,1416,1417,5,216,0,0,1417,1418,
        3,122,61,0,1418,1419,5,179,0,0,1419,1510,1,0,0,0,1420,1421,5,197,
        0,0,1421,1422,5,216,0,0,1422,1423,3,122,61,0,1423,1424,5,179,0,0,
        1424,1510,1,0,0,0,1425,1426,5,198,0,0,1426,1427,5,216,0,0,1427,1428,
        3,122,61,0,1428,1429,5,179,0,0,1429,1510,1,0,0,0,1430,1431,5,199,
        0,0,1431,1432,5,216,0,0,1432,1433,3,122,61,0,1433,1434,5,179,0,0,
        1434,1510,1,0,0,0,1435,1436,5,200,0,0,1436,1437,5,216,0,0,1437,1438,
        3,122,61,0,1438,1439,5,179,0,0,1439,1510,1,0,0,0,1440,1441,5,201,
        0,0,1441,1442,5,216,0,0,1442,1443,3,122,61,0,1443,1444,5,179,0,0,
        1444,1510,1,0,0,0,1445,1446,5,202,0,0,1446,1447,5,216,0,0,1447,1452,
        3,122,61,0,1448,1449,5,186,0,0,1449,1451,3,122,61,0,1450,1448,1,
        0,0,0,1451,1454,1,0,0,0,1452,1450,1,0,0,0,1452,1453,1,0,0,0,1453,
        1455,1,0,0,0,1454,1452,1,0,0,0,1455,1456,5,179,0,0,1456,1510,1,0,
        0,0,1457,1458,5,203,0,0,1458,1459,5,216,0,0,1459,1460,3,122,61,0,
        1460,1461,5,179,0,0,1461,1510,1,0,0,0,1462,1463,5,204,0,0,1463,1464,
        5,216,0,0,1464,1469,3,122,61,0,1465,1466,5,186,0,0,1466,1468,3,122,
        61,0,1467,1465,1,0,0,0,1468,1471,1,0,0,0,1469,1467,1,0,0,0,1469,
        1470,1,0,0,0,1470,1472,1,0,0,0,1471,1469,1,0,0,0,1472,1473,5,179,
        0,0,1473,1510,1,0,0,0,1474,1475,5,205,0,0,1475,1476,5,216,0,0,1476,
        1477,3,122,61,0,1477,1478,5,186,0,0,1478,1479,3,122,61,0,1479,1480,
        5,179,0,0,1480,1510,1,0,0,0,1481,1482,5,206,0,0,1482,1483,5,216,
        0,0,1483,1484,3,122,61,0,1484,1485,5,179,0,0,1485,1510,1,0,0,0,1486,
        1487,5,207,0,0,1487,1488,5,216,0,0,1488,1510,5,179,0,0,1489,1490,
        5,208,0,0,1490,1491,5,216,0,0,1491,1492,3,122,61,0,1492,1493,5,179,
        0,0,1493,1510,1,0,0,0,1494,1495,5,209,0,0,1495,1496,5,216,0,0,1496,
        1497,3,122,61,0,1497,1498,5,179,0,0,1498,1510,1,0,0,0,1499,1500,
        5,210,0,0,1500,1501,5,216,0,0,1501,1502,3,122,61,0,1502,1503,5,179,
        0,0,1503,1510,1,0,0,0,1504,1505,5,211,0,0,1505,1506,5,216,0,0,1506,
        1507,3,122,61,0,1507,1508,5,179,0,0,1508,1510,1,0,0,0,1509,1390,
        1,0,0,0,1509,1395,1,0,0,0,1509,1400,1,0,0,0,1509,1405,1,0,0,0,1509,
        1410,1,0,0,0,1509,1415,1,0,0,0,1509,1420,1,0,0,0,1509,1425,1,0,0,
        0,1509,1430,1,0,0,0,1509,1435,1,0,0,0,1509,1440,1,0,0,0,1509,1445,
        1,0,0,0,1509,1457,1,0,0,0,1509,1462,1,0,0,0,1509,1474,1,0,0,0,1509,
        1481,1,0,0,0,1509,1486,1,0,0,0,1509,1489,1,0,0,0,1509,1494,1,0,0,
        0,1509,1499,1,0,0,0,1509,1504,1,0,0,0,1510,125,1,0,0,0,1511,1512,
        7,6,0,0,1512,1513,5,218,0,0,1513,1514,5,227,0,0,1514,1515,5,219,
        0,0,1515,127,1,0,0,0,1516,1517,5,126,0,0,1517,1518,5,213,0,0,1518,
        1519,5,180,0,0,1519,1520,3,130,65,0,1520,1521,5,179,0,0,1521,129,
        1,0,0,0,1522,1525,3,122,61,0,1523,1524,7,5,0,0,1524,1526,3,130,65,
        0,1525,1523,1,0,0,0,1525,1526,1,0,0,0,1526,131,1,0,0,0,1527,1528,
        5,127,0,0,1528,1529,5,234,0,0,1529,1530,5,231,0,0,1530,1549,5,229,
        0,0,1531,1533,5,232,0,0,1532,1531,1,0,0,0,1533,1536,1,0,0,0,1534,
        1532,1,0,0,0,1534,1535,1,0,0,0,1535,1550,1,0,0,0,1536,1534,1,0,0,
        0,1537,1539,5,233,0,0,1538,1537,1,0,0,0,1539,1542,1,0,0,0,1540,1538,
        1,0,0,0,1540,1541,1,0,0,0,1541,1550,1,0,0,0,1542,1540,1,0,0,0,1543,
        1545,5,235,0,0,1544,1543,1,0,0,0,1545,1548,1,0,0,0,1546,1544,1,0,
        0,0,1546,1547,1,0,0,0,1547,1550,1,0,0,0,1548,1546,1,0,0,0,1549,1534,
        1,0,0,0,1549,1540,1,0,0,0,1549,1546,1,0,0,0,1550,1551,1,0,0,0,1551,
        1552,5,230,0,0,1552,1553,5,128,0,0,1553,1558,5,238,0,0,1554,1557,
        3,128,64,0,1555,1557,3,36,18,0,1556,1554,1,0,0,0,1556,1555,1,0,0,
        0,1557,1560,1,0,0,0,1558,1556,1,0,0,0,1558,1559,1,0,0,0,1559,1561,
        1,0,0,0,1560,1558,1,0,0,0,1561,1562,5,2,0,0,1562,1563,5,128,0,0,
        1563,1564,5,238,0,0,1564,133,1,0,0,0,188,157,159,168,174,180,186,
        192,198,204,213,222,231,240,249,258,267,276,283,298,303,310,319,
        324,335,347,353,366,373,400,406,409,416,419,424,429,434,437,440,
        444,449,454,461,465,470,475,480,485,490,495,498,504,509,514,520,
        524,540,546,550,555,558,562,567,572,576,582,586,590,593,595,599,
        610,620,625,630,637,648,651,656,667,673,677,682,687,696,699,702,
        714,721,726,738,743,748,753,758,767,794,799,805,815,818,823,828,
        832,844,868,876,883,886,889,894,899,904,914,919,924,928,937,940,
        947,950,953,956,968,975,982,987,999,1004,1009,1016,1027,1032,1046,
        1051,1056,1063,1080,1085,1094,1099,1104,1109,1118,1121,1129,1144,
        1155,1163,1178,1194,1196,1215,1220,1222,1231,1235,1246,1250,1254,
        1257,1270,1273,1280,1282,1289,1294,1296,1316,1324,1326,1342,1346,
        1348,1354,1369,1374,1379,1388,1452,1469,1509,1525,1534,1540,1546,
        1549,1556,1558
    ]

class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'CV'", "'DEN'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'OUTD'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'CUTOFF'", 
                     "'CUTON'", "'FROM'", "'TO'", "'PEAK'", "'SPECTRUM'", 
                     "'VOLUME'", "'PPM1'", "'PPM2'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SIZE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'FBOX'", "<INVALID>", 
                     "'ID'", "<INVALID>", "'NAME'", "'NONE'", "<INVALID>", 
                     "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SFBOX'", "'STORE1'", "'STORE2'", 
                     "'STORE3'", "'STORE4'", "'STORE5'", "'STORE6'", "'STORE7'", 
                     "'STORE8'", "'STORE9'", "'TAG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SHOW'", "<INVALID>", "'FOR'", "'LOOP'", 
                     "'TAIL'", "'HEAD'", "'OR'", "'AND'", "'NOT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "':'", "<INVALID>", "'<'", "'>'", "'<='", 
                     "'>='", "'#'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'+'", "'-'", 
                     "<INVALID>", "'/'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'ACOS'", "'ASIN'", 
                     "'COS'", "'DECODE'", "'ENCODE'", "'EXP'", "'GAUSS'", 
                     "'HEAVY'", "'INT'", "'LOG10'", "'LOG'", "<INVALID>", 
                     "'MAXW'", "<INVALID>", "'MOD'", "<INVALID>", "<INVALID>", 
                     "'SIGN'", "'SIN'", "'SQRT'", "'TAN'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'RMS'", "'SUM'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Averaging", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Initialize", "Update", "Gamma", "Kappa", "Cutoff", 
                      "Cuton", "From", "To", "Peak", "Spectrum", "Volume", 
                      "Ppm1", "Ppm2", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Coupling", "Carbon", "Expectation", 
                      "PhiStep", "PsiStep", "Rcoil", "Zero", "Proton", "Observed", 
                      "Anisotropy", "Amides", "Nitrogens", "Oxygens", "RingAtoms", 
                      "AlphasAndAmides", "Error", "Conformation", "Compressed", 
                      "Phase", "Size", "Dimensions", "Danisotropy", "OneBond", 
                      "AngleDb", "DerivFlag", "Angle_or_Dihedral", "Flags", 
                      "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Fbox", "Hydrogen", 
                      "Id", "Known", "Name", "NONE", "Point", "Cut", "Previous", 
                      "Pseudo", "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Sfbox", "Store_1", "Store_2", "Store_3", "Store_4", 
                      "Store_5", "Store_6", "Store_7", "Store_8", "Store_9", 
                      "Tag", "Vector", "Do_Lp", "Identify_Lp", "Show", "Evaluate_Lp", 
                      "For", "Loop", "Tail", "Head", "Or_op", "And_op", 
                      "Not_op", "Comma", "Complex", "Integer", "Logical", 
                      "Real", "Double_quote_string", "SHARP_COMMENT", "EXCLM_COMMENT", 
                      "SMCLN_COMMENT", "Simple_name", "Simple_names", "Integers", 
                      "L_paren", "R_paren", "Colon", "Equ_op", "Lt_op", 
                      "Gt_op", "Leq_op", "Geq_op", "Neq_op", "Symbol_name", 
                      "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT", 
                      "SET_VARIABLE", "Abs", "Attr_properties", "Comparison_ops", 
                      "SPACE_ATTR", "Averaging_methods", "Simple_name_A", 
                      "Equ_op_P", "Potential_types", "Simple_name_P", "SPACE_POTE", 
                      "Noe_analysis", "SPACE_ANAL", "Exclude", "Include", 
                      "End_F", "Class_name", "Any_class", "SPACE_FLAG", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Simple_name_VE", "Symbol_name_VE", "Double_quote_string_VE", 
                      "SPACE_VE", "L_paren_VF", "SPACE_VF", "L_paren_VS", 
                      "R_paren_VS", "Average_VS", "Element_VS", "Max_VS", 
                      "Min_VS", "Norm_VS", "Rms_VS", "Sum_VS", "Atom_properties_VS", 
                      "SPACE_VS", "L_paren_CF", "R_paren_CF", "In_CF", "Integer_CF", 
                      "Real_CF", "Symbol_name_CF", "Simple_name_CF", "SPACE_CF", 
                      "COMMENT_CF", "Simple_name_LL", "SPACE_LL" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_noe_annotation = 16
    RULE_dihedral_statement = 17
    RULE_dihedral_assign = 18
    RULE_plane_statement = 19
    RULE_group_statement = 20
    RULE_harmonic_statement = 21
    RULE_harmonic_assign = 22
    RULE_sani_statement = 23
    RULE_sani_assign = 24
    RULE_coupling_statement = 25
    RULE_coup_assign = 26
    RULE_carbon_shift_statement = 27
    RULE_carbon_shift_assign = 28
    RULE_carbon_shift_rcoil = 29
    RULE_proton_shift_statement = 30
    RULE_observed = 31
    RULE_proton_shift_rcoil = 32
    RULE_proton_shift_anisotropy = 33
    RULE_proton_shift_amides = 34
    RULE_proton_shift_carbons = 35
    RULE_proton_shift_nitrogens = 36
    RULE_proton_shift_oxygens = 37
    RULE_proton_shift_ring_atoms = 38
    RULE_proton_shift_alphas_and_amides = 39
    RULE_conformation_statement = 40
    RULE_conf_assign = 41
    RULE_diffusion_statement = 42
    RULE_dani_assign = 43
    RULE_one_bond_coupling_statement = 44
    RULE_one_bond_assign = 45
    RULE_angle_db_statement = 46
    RULE_angle_db_assign = 47
    RULE_selection = 48
    RULE_selection_expression = 49
    RULE_term = 50
    RULE_factor = 51
    RULE_number = 52
    RULE_number_f = 53
    RULE_number_s = 54
    RULE_number_a = 55
    RULE_flag_statement = 56
    RULE_vector_statement = 57
    RULE_vector_mode = 58
    RULE_vector_expression = 59
    RULE_vector_operation = 60
    RULE_vflc = 61
    RULE_vector_func_call = 62
    RULE_vector_show_property = 63
    RULE_evaluate_statement = 64
    RULE_evaluate_operation = 65
    RULE_dihedral_assign_loop = 66

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "plane_statement", 
                   "group_statement", "harmonic_statement", "harmonic_assign", 
                   "sani_statement", "sani_assign", "coupling_statement", 
                   "coup_assign", "carbon_shift_statement", "carbon_shift_assign", 
                   "carbon_shift_rcoil", "proton_shift_statement", "observed", 
                   "proton_shift_rcoil", "proton_shift_anisotropy", "proton_shift_amides", 
                   "proton_shift_carbons", "proton_shift_nitrogens", "proton_shift_oxygens", 
                   "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s", "number_a", "flag_statement", "vector_statement", 
                   "vector_mode", "vector_expression", "vector_operation", 
                   "vflc", "vector_func_call", "vector_show_property", "evaluate_statement", 
                   "evaluate_operation", "dihedral_assign_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Averaging=7
    Bhig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Cutoff=39
    Cuton=40
    From=41
    To=42
    Peak=43
    Spectrum=44
    Volume=45
    Ppm1=46
    Ppm2=47
    Restraints=48
    Dihedral=49
    Nassign=50
    Print_any=51
    Plane=52
    Group=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Sanisotropy=59
    Coefficients=60
    ForceConstant=61
    Coupling=62
    Carbon=63
    Expectation=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Zero=68
    Proton=69
    Observed=70
    Anisotropy=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Conformation=78
    Compressed=79
    Phase=80
    Size=81
    Dimensions=82
    Danisotropy=83
    OneBond=84
    AngleDb=85
    DerivFlag=86
    Angle_or_Dihedral=87
    Flags=88
    All=89
    Around=90
    Atom=91
    Attribute=92
    BondedTo=93
    ByGroup=94
    ByRes=95
    Chemical=96
    Fbox=97
    Hydrogen=98
    Id=99
    Known=100
    Name=101
    NONE=102
    Point=103
    Cut=104
    Previous=105
    Pseudo=106
    Residue=107
    Resname=108
    Saround=109
    SegIdentifier=110
    Sfbox=111
    Store_1=112
    Store_2=113
    Store_3=114
    Store_4=115
    Store_5=116
    Store_6=117
    Store_7=118
    Store_8=119
    Store_9=120
    Tag=121
    Vector=122
    Do_Lp=123
    Identify_Lp=124
    Show=125
    Evaluate_Lp=126
    For=127
    Loop=128
    Tail=129
    Head=130
    Or_op=131
    And_op=132
    Not_op=133
    Comma=134
    Complex=135
    Integer=136
    Logical=137
    Real=138
    Double_quote_string=139
    SHARP_COMMENT=140
    EXCLM_COMMENT=141
    SMCLN_COMMENT=142
    Simple_name=143
    Simple_names=144
    Integers=145
    L_paren=146
    R_paren=147
    Colon=148
    Equ_op=149
    Lt_op=150
    Gt_op=151
    Leq_op=152
    Geq_op=153
    Neq_op=154
    Symbol_name=155
    SPACE=156
    COMMENT=157
    SECTION_COMMENT=158
    LINE_COMMENT=159
    SET_VARIABLE=160
    Abs=161
    Attr_properties=162
    Comparison_ops=163
    SPACE_ATTR=164
    Averaging_methods=165
    Simple_name_A=166
    Equ_op_P=167
    Potential_types=168
    Simple_name_P=169
    SPACE_POTE=170
    Noe_analysis=171
    SPACE_ANAL=172
    Exclude=173
    Include=174
    End_F=175
    Class_name=176
    Any_class=177
    SPACE_FLAG=178
    R_paren_VE=179
    Equ_op_VE=180
    Add_op_VE=181
    Sub_op_VE=182
    Mul_op_VE=183
    Div_op_VE=184
    Exp_op_VE=185
    Comma_VE=186
    Integer_VE=187
    Real_VE=188
    Atom_properties_VE=189
    Abs_VE=190
    Acos_VE=191
    Asin_VE=192
    Cos_VE=193
    Decode_VE=194
    Encode_VE=195
    Exp_VE=196
    Gauss_VE=197
    Heavy_VE=198
    Int_VE=199
    Log10_VE=200
    Log_VE=201
    Max_VE=202
    Maxw_VE=203
    Min_VE=204
    Mod_VE=205
    Norm_VE=206
    Random_VE=207
    Sign_VE=208
    Sin_VE=209
    Sqrt_VE=210
    Tan_VE=211
    Simple_name_VE=212
    Symbol_name_VE=213
    Double_quote_string_VE=214
    SPACE_VE=215
    L_paren_VF=216
    SPACE_VF=217
    L_paren_VS=218
    R_paren_VS=219
    Average_VS=220
    Element_VS=221
    Max_VS=222
    Min_VS=223
    Norm_VS=224
    Rms_VS=225
    Sum_VS=226
    Atom_properties_VS=227
    SPACE_VS=228
    L_paren_CF=229
    R_paren_CF=230
    In_CF=231
    Integer_CF=232
    Real_CF=233
    Symbol_name_CF=234
    Simple_name_CF=235
    SPACE_CF=236
    COMMENT_CF=237
    Simple_name_LL=238
    SPACE_LL=239

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.ObservedContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Assign) | (1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Dihedral) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Plane) | (1 << CnsMRParser.Group) | (1 << CnsMRParser.Harmonic) | (1 << CnsMRParser.Sanisotropy) | (1 << CnsMRParser.Coupling) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CnsMRParser.Proton - 69)) | (1 << (CnsMRParser.Observed - 69)) | (1 << (CnsMRParser.Conformation - 69)) | (1 << (CnsMRParser.Danisotropy - 69)) | (1 << (CnsMRParser.OneBond - 69)) | (1 << (CnsMRParser.AngleDb - 69)) | (1 << (CnsMRParser.Flags - 69)) | (1 << (CnsMRParser.Vector - 69)) | (1 << (CnsMRParser.Evaluate_Lp - 69)))) != 0):
                self.state = 157
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 134
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 135
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 136
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 137
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 138
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 139
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 140
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 141
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 142
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 143
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 144
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 145
                    self.angle_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 146
                    self.flag_statement()
                    pass

                elif la_ == 14:
                    self.state = 147
                    self.vector_statement()
                    pass

                elif la_ == 15:
                    self.state = 148
                    self.evaluate_statement()
                    pass

                elif la_ == 16:
                    self.state = 149
                    self.noe_assign()
                    pass

                elif la_ == 17:
                    self.state = 150
                    self.dihedral_assign()
                    pass

                elif la_ == 18:
                    self.state = 151
                    self.sani_assign()
                    pass

                elif la_ == 19:
                    self.state = 152
                    self.plane_statement()
                    pass

                elif la_ == 20:
                    self.state = 153
                    self.harmonic_assign()
                    pass

                elif la_ == 21:
                    self.state = 154
                    self.coup_assign()
                    pass

                elif la_ == 22:
                    self.state = 155
                    self.carbon_shift_assign()
                    pass

                elif la_ == 23:
                    self.state = 156
                    self.observed()
                    pass


                self.state = 161
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 162
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 164
            self.match(CnsMRParser.Noe)
            self.state = 168
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 165
                    self.noe_statement() 
                self.state = 170
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 171
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 173
                self.match(CnsMRParser.Restraints)


            self.state = 176
            self.match(CnsMRParser.Dihedral)
            self.state = 180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Scale) | (1 << CnsMRParser.Nassign) | (1 << CnsMRParser.Print_any))) != 0) or _la==CnsMRParser.For:
                self.state = 177
                self.dihedral_statement()
                self.state = 182
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 183
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 185
                self.match(CnsMRParser.Restraints)


            self.state = 188
            self.match(CnsMRParser.Plane)
            self.state = 192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0):
                self.state = 189
                self.plane_statement()
                self.state = 194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 195
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 197
                self.match(CnsMRParser.Restraints)


            self.state = 200
            self.match(CnsMRParser.Harmonic)
            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Exponent or _la==CnsMRParser.Normal:
                self.state = 201
                self.harmonic_statement()
                self.state = 206
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 207
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 209
            self.match(CnsMRParser.Sanisotropy)
            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 210
                self.sani_statement()
                self.state = 215
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 216
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 218
            self.match(CnsMRParser.Coupling)
            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 219
                self.coupling_statement()
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 225
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self.match(CnsMRParser.Carbon)
            self.state = 231
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.ForceConstant - 5)) | (1 << (CnsMRParser.Expectation - 5)) | (1 << (CnsMRParser.PhiStep - 5)) | (1 << (CnsMRParser.PsiStep - 5)) | (1 << (CnsMRParser.Rcoil - 5)) | (1 << (CnsMRParser.Zero - 5)))) != 0):
                self.state = 228
                self.carbon_shift_statement()
                self.state = 233
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 234
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 236
            self.match(CnsMRParser.Proton)
            self.state = 240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Classification) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CnsMRParser.Rcoil - 67)) | (1 << (CnsMRParser.Observed - 67)) | (1 << (CnsMRParser.Anisotropy - 67)) | (1 << (CnsMRParser.Amides - 67)) | (1 << (CnsMRParser.Nitrogens - 67)) | (1 << (CnsMRParser.Oxygens - 67)) | (1 << (CnsMRParser.RingAtoms - 67)) | (1 << (CnsMRParser.AlphasAndAmides - 67)) | (1 << (CnsMRParser.Error - 67)))) != 0):
                self.state = 237
                self.proton_shift_statement()
                self.state = 242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 243
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def conformation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(CnsMRParser.Conformation)
            self.state = 249
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Compressed - 64)) | (1 << (CnsMRParser.Phase - 64)) | (1 << (CnsMRParser.Size - 64)))) != 0):
                self.state = 246
                self.conformation_statement()
                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 252
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 254
            self.match(CnsMRParser.Danisotropy)
            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 255
                self.diffusion_statement()
                self.state = 260
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 261
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(CnsMRParser.OneBond)
            self.state = 267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 264
                self.one_bond_coupling_statement()
                self.state = 269
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 270
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 272
            self.match(CnsMRParser.AngleDb)
            self.state = 276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Size - 64)) | (1 << (CnsMRParser.DerivFlag - 64)))) != 0):
                self.state = 273
                self.angle_db_statement()
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 279
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def noe_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Averaging(self):
            return self.getToken(CnsMRParser.Averaging, 0)

        def Simple_name_A(self):
            return self.getToken(CnsMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(CnsMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(CnsMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(CnsMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 409
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 281
                self.match(CnsMRParser.Analysis)
                self.state = 283
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 282
                    self.match(CnsMRParser.Equ_op)


                self.state = 285
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 286
                self.noe_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 287
                self.match(CnsMRParser.Asymptote)
                self.state = 288
                self.match(CnsMRParser.Simple_name)
                self.state = 289
                self.number_s()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 290
                self.match(CnsMRParser.Averaging)
                self.state = 291
                self.match(CnsMRParser.Simple_name_A)
                self.state = 292
                self.match(CnsMRParser.Averaging_methods)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 293
                self.match(CnsMRParser.Bhig)
                self.state = 294
                self.match(CnsMRParser.Simple_name)
                self.state = 295
                self.number_s()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 296
                self.match(CnsMRParser.Ceiling)
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 297
                    self.match(CnsMRParser.Equ_op)


                self.state = 300
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 301
                self.match(CnsMRParser.Classification)
                self.state = 303
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 302
                    self.match(CnsMRParser.Equ_op)


                self.state = 305
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 306
                self.match(CnsMRParser.CountViol)
                self.state = 307
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 308
                self.match(CnsMRParser.Cv)
                self.state = 310
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 309
                    self.match(CnsMRParser.Equ_op)


                self.state = 312
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 313
                self.match(CnsMRParser.Den)
                self.state = 314
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 315
                self.match(CnsMRParser.Den)
                self.state = 316
                self.match(CnsMRParser.Update)
                self.state = 317
                self.match(CnsMRParser.Gamma)
                self.state = 319
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 318
                    self.match(CnsMRParser.Equ_op)


                self.state = 321
                self.number_s()
                self.state = 322
                self.match(CnsMRParser.Kappa)
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 323
                    self.match(CnsMRParser.Equ_op)


                self.state = 326
                self.number_s()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 328
                self.match(CnsMRParser.Distribute)
                self.state = 329
                self.match(CnsMRParser.Simple_name)
                self.state = 330
                self.match(CnsMRParser.Simple_name)
                self.state = 331
                self.number_s()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 335
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 332
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 337
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 338
                self.match(CnsMRParser.End)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 339
                self.match(CnsMRParser.Monomers)
                self.state = 340
                self.match(CnsMRParser.Simple_name)
                self.state = 341
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 342
                self.match(CnsMRParser.Ncount)
                self.state = 343
                self.match(CnsMRParser.Simple_name)
                self.state = 344
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 345
                self.match(CnsMRParser.Nrestraints)
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 346
                    self.match(CnsMRParser.Equ_op)


                self.state = 349
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 350
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 351
                self.match(CnsMRParser.Partition)
                self.state = 353
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 352
                    self.match(CnsMRParser.Equ_op)


                self.state = 355
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 356
                self.match(CnsMRParser.Potential)
                self.state = 357
                self.match(CnsMRParser.Simple_name_P)
                self.state = 358
                self.match(CnsMRParser.Potential_types)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 359
                self.match(CnsMRParser.Predict)
                self.state = 360
                self.predict_statement()
                self.state = 361
                self.match(CnsMRParser.End)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 363
                self.match(CnsMRParser.Print)
                self.state = 364
                self.match(CnsMRParser.Threshold)
                self.state = 366
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 365
                    self.match(CnsMRParser.Equ_op)


                self.state = 368
                self.number_s()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 369
                self.match(CnsMRParser.Raverage)
                self.state = 373
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 370
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 375
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 376
                self.match(CnsMRParser.End)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 377
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 378
                self.match(CnsMRParser.Rswitch)
                self.state = 379
                self.match(CnsMRParser.Simple_name)
                self.state = 380
                self.number_s()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 381
                self.match(CnsMRParser.Scale)
                self.state = 382
                self.match(CnsMRParser.Simple_name)
                self.state = 383
                self.number_s()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 384
                self.match(CnsMRParser.SoExponent)
                self.state = 385
                self.match(CnsMRParser.Simple_name)
                self.state = 386
                self.number_s()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 387
                self.match(CnsMRParser.SqConstant)
                self.state = 388
                self.match(CnsMRParser.Simple_name)
                self.state = 389
                self.number_s()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 390
                self.match(CnsMRParser.SqExponent)
                self.state = 391
                self.match(CnsMRParser.Simple_name)
                self.state = 392
                self.number_s()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 393
                self.match(CnsMRParser.SqOffset)
                self.state = 394
                self.match(CnsMRParser.Simple_name)
                self.state = 395
                self.number_s()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 396
                self.match(CnsMRParser.Taverage)
                self.state = 400
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 397
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 402
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                self.state = 403
                self.match(CnsMRParser.End)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 404
                self.match(CnsMRParser.Temperature)
                self.state = 406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 405
                    self.match(CnsMRParser.Equ_op)


                self.state = 408
                self.number_s()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Assign)
            else:
                return self.getToken(CnsMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 411
            self.match(CnsMRParser.Assign)
            self.state = 412
            self.selection()
            self.state = 413
            self.selection()
            self.state = 414
            self.number()
            self.state = 416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 415
                self.number()


            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 418
                self.number()


            self.state = 424
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 421
                    self.noe_annotation() 
                self.state = 426
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 427
                self.match(CnsMRParser.Or_op)
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Assign:
                    self.state = 428
                    self.match(CnsMRParser.Assign)


                self.state = 431
                self.selection()
                self.state = 432
                self.selection()
                self.state = 434
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 433
                    self.number()


                self.state = 437
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 436
                    self.number()


                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                    self.state = 439
                    self.number()


                self.state = 446
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 461
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 447
                self.match(CnsMRParser.Cutoff)
                self.state = 449
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 448
                    self.match(CnsMRParser.Equ_op)


                self.state = 451
                self.number_s()
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 452
                self.match(CnsMRParser.Cuton)
                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 453
                    self.match(CnsMRParser.Equ_op)


                self.state = 456
                self.number_s()
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 457
                self.match(CnsMRParser.From)
                self.state = 458
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 459
                self.match(CnsMRParser.To)
                self.state = 460
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(CnsMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(CnsMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(CnsMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(CnsMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(CnsMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(CnsMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = CnsMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 498
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 463
                self.match(CnsMRParser.Peak)
                self.state = 465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 464
                    self.match(CnsMRParser.Equ_op)


                self.state = 467
                self.number_a()
                pass
            elif token in [CnsMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 468
                self.match(CnsMRParser.Spectrum)
                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 469
                    self.match(CnsMRParser.Equ_op)


                self.state = 472
                self.number_a()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 473
                self.match(CnsMRParser.Weight)
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 474
                    self.match(CnsMRParser.Equ_op)


                self.state = 477
                self.number_a()
                pass
            elif token in [CnsMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 478
                self.match(CnsMRParser.Volume)
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 479
                    self.match(CnsMRParser.Equ_op)


                self.state = 482
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 483
                self.match(CnsMRParser.Ppm1)
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 484
                    self.match(CnsMRParser.Equ_op)


                self.state = 487
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 488
                self.match(CnsMRParser.Ppm2)
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 489
                    self.match(CnsMRParser.Equ_op)


                self.state = 492
                self.number_a()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 493
                self.match(CnsMRParser.Cv)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 494
                    self.match(CnsMRParser.Equ_op)


                self.state = 497
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assign_loopContext,0)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 524
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 500
                self.dihedral_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 501
                self.dihedral_assign_loop()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 3)
                self.state = 502
                self.match(CnsMRParser.Cv)
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 503
                    self.match(CnsMRParser.Equ_op)


                self.state = 506
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 507
                self.match(CnsMRParser.Nassign)
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 508
                    self.match(CnsMRParser.Equ_op)


                self.state = 511
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 5)
                self.state = 512
                self.match(CnsMRParser.Partition)
                self.state = 514
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 513
                    self.match(CnsMRParser.Equ_op)


                self.state = 516
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 517
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 7)
                self.state = 518
                self.match(CnsMRParser.Scale)
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 519
                    self.match(CnsMRParser.Equ_op)


                self.state = 522
                self.number_s()
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 8)
                self.state = 523
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 526
            self.match(CnsMRParser.Assign)
            self.state = 527
            self.selection()
            self.state = 528
            self.selection()
            self.state = 529
            self.selection()
            self.state = 530
            self.selection()
            self.state = 531
            self.number()
            self.state = 532
            self.number()
            self.state = 533
            self.number()
            self.state = 534
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_plane_statement)
        self._la = 0 # Token type
        try:
            self.state = 546
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 536
                self.match(CnsMRParser.Group)
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Selection or _la==CnsMRParser.Weight:
                    self.state = 537
                    self.group_statement()
                    self.state = 542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 543
                self.match(CnsMRParser.End)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 544
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 545
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 558
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 548
                self.match(CnsMRParser.Selection)
                self.state = 550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 549
                    self.match(CnsMRParser.Equ_op)


                self.state = 552
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 553
                self.match(CnsMRParser.Weight)
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 554
                    self.match(CnsMRParser.Equ_op)


                self.state = 557
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 599
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.match(CnsMRParser.Exponent)
                self.state = 562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 561
                    self.match(CnsMRParser.Equ_op)


                self.state = 564
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 565
                self.match(CnsMRParser.Normal)
                self.state = 567
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 566
                    self.match(CnsMRParser.Equ_op)


                self.state = 569
                self.match(CnsMRParser.L_paren)
                self.state = 595
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integer, CnsMRParser.Real, CnsMRParser.Symbol_name]:
                    self.state = 570
                    self.number_s()
                    self.state = 572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 571
                        self.match(CnsMRParser.Comma)


                    self.state = 574
                    self.number_s()
                    self.state = 576
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 575
                        self.match(CnsMRParser.Comma)


                    self.state = 578
                    self.number_s()
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 580
                    self.match(CnsMRParser.Tail)
                    self.state = 582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 581
                        self.match(CnsMRParser.Equ_op)


                    self.state = 584
                    self.selection()
                    self.state = 586
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 585
                        self.match(CnsMRParser.Comma)


                    self.state = 593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 588
                        self.match(CnsMRParser.Head)
                        self.state = 590
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CnsMRParser.Equ_op:
                            self.state = 589
                            self.match(CnsMRParser.Equ_op)


                        self.state = 592
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 597
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = CnsMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 601
            self.match(CnsMRParser.Assign)
            self.state = 602
            self.selection()
            self.state = 603
            self.number()
            self.state = 604
            self.number()
            self.state = 605
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 607
                self.sani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 608
                self.match(CnsMRParser.Classification)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 609
                    self.match(CnsMRParser.Equ_op)


                self.state = 612
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 613
                self.match(CnsMRParser.Coefficients)
                self.state = 614
                self.number_s()
                self.state = 615
                self.number_s()
                self.state = 616
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 618
                self.match(CnsMRParser.ForceConstant)
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 619
                    self.match(CnsMRParser.Equ_op)


                self.state = 622
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 623
                self.match(CnsMRParser.Nrestraints)
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 624
                    self.match(CnsMRParser.Equ_op)


                self.state = 627
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 628
                self.match(CnsMRParser.Potential)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 629
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 632
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 633
                self.match(CnsMRParser.Print)
                self.state = 634
                self.match(CnsMRParser.Threshold)
                self.state = 635
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 636
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 639
            self.match(CnsMRParser.Assign)
            self.state = 640
            self.selection()
            self.state = 641
            self.selection()
            self.state = 642
            self.selection()
            self.state = 643
            self.selection()
            self.state = 644
            self.selection()
            self.state = 645
            self.selection()
            self.state = 646
            self.number()
            self.state = 648
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 647
                self.number()


            self.state = 651
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 650
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 702
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 653
                self.coup_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 654
                self.match(CnsMRParser.Classification)
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 655
                    self.match(CnsMRParser.Equ_op)


                self.state = 658
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 659
                self.match(CnsMRParser.Coefficients)
                self.state = 660
                self.number_s()
                self.state = 661
                self.number_s()
                self.state = 662
                self.number_s()
                self.state = 663
                self.number_s()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 665
                self.match(CnsMRParser.Cv)
                self.state = 667
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 666
                    self.match(CnsMRParser.Equ_op)


                self.state = 669
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 670
                self.match(CnsMRParser.ForceConstant)
                self.state = 671
                self.number_s()
                self.state = 673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                    self.state = 672
                    self.number_s()


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 675
                self.match(CnsMRParser.Nrestraints)
                self.state = 677
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 676
                    self.match(CnsMRParser.Equ_op)


                self.state = 679
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 680
                self.match(CnsMRParser.Partition)
                self.state = 682
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 681
                    self.match(CnsMRParser.Equ_op)


                self.state = 684
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 685
                self.match(CnsMRParser.Potential)
                self.state = 687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 686
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 689
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 690
                self.match(CnsMRParser.Print)
                self.state = 691
                self.match(CnsMRParser.Threshold)
                self.state = 692
                self.number_s()
                self.state = 699
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 693
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 694
                    self.match(CnsMRParser.Classification)
                    self.state = 696
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 695
                        self.match(CnsMRParser.Equ_op)


                    self.state = 698
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 701
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 704
            self.match(CnsMRParser.Assign)
            self.state = 705
            self.selection()
            self.state = 706
            self.selection()
            self.state = 707
            self.selection()
            self.state = 708
            self.selection()
            self.state = 714
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 709
                self.selection()
                self.state = 710
                self.selection()
                self.state = 711
                self.selection()
                self.state = 712
                self.selection()


            self.state = 716
            self.number()
            self.state = 717
            self.number()
            self.state = 721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 718
                self.number()
                self.state = 719
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 767
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 723
                self.carbon_shift_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 724
                self.match(CnsMRParser.Classification)
                self.state = 726
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 725
                    self.match(CnsMRParser.Equ_op)


                self.state = 728
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 729
                self.match(CnsMRParser.Expectation)
                self.state = 730
                self.match(CnsMRParser.Integer)
                self.state = 731
                self.match(CnsMRParser.Integer)
                self.state = 732
                self.number_s()
                self.state = 733
                self.number_s()
                self.state = 734
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 736
                self.match(CnsMRParser.ForceConstant)
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 737
                    self.match(CnsMRParser.Equ_op)


                self.state = 740
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 741
                self.match(CnsMRParser.Nrestraints)
                self.state = 743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 742
                    self.match(CnsMRParser.Equ_op)


                self.state = 745
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 746
                self.match(CnsMRParser.PhiStep)
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 747
                    self.match(CnsMRParser.Equ_op)


                self.state = 750
                self.number_s()
                pass
            elif token in [CnsMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 751
                self.match(CnsMRParser.PsiStep)
                self.state = 753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 752
                    self.match(CnsMRParser.Equ_op)


                self.state = 755
                self.number_s()
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 756
                self.match(CnsMRParser.Potential)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 757
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 760
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 761
                self.match(CnsMRParser.Print)
                self.state = 762
                self.match(CnsMRParser.Threshold)
                self.state = 763
                self.number_s()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 764
                self.carbon_shift_rcoil()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 765
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 766
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 769
            self.match(CnsMRParser.Assign)
            self.state = 770
            self.selection()
            self.state = 771
            self.selection()
            self.state = 772
            self.selection()
            self.state = 773
            self.selection()
            self.state = 774
            self.selection()
            self.state = 775
            self.number()
            self.state = 776
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(CnsMRParser.Rcoil)
            self.state = 779
            self.selection()
            self.state = 780
            self.number()
            self.state = 781
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(CnsMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.observed()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.proton_shift_rcoil()
                pass
            elif token in [CnsMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 785
                self.proton_shift_anisotropy()
                pass
            elif token in [CnsMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 786
                self.proton_shift_amides()
                pass
            elif token in [CnsMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 787
                self.proton_shift_carbons()
                pass
            elif token in [CnsMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 788
                self.proton_shift_nitrogens()
                pass
            elif token in [CnsMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 789
                self.proton_shift_oxygens()
                pass
            elif token in [CnsMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 790
                self.proton_shift_ring_atoms()
                pass
            elif token in [CnsMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 791
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 792
                self.match(CnsMRParser.Classification)
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 793
                    self.match(CnsMRParser.Equ_op)


                self.state = 796
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 797
                self.match(CnsMRParser.Error)
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 798
                    self.match(CnsMRParser.Equ_op)


                self.state = 801
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 12)
                self.state = 802
                self.match(CnsMRParser.ForceConstant)
                self.state = 803
                self.number_s()
                self.state = 805
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                    self.state = 804
                    self.number_s()


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 807
                self.match(CnsMRParser.Potential)
                self.state = 808
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 809
                self.match(CnsMRParser.Print)
                self.state = 810
                self.match(CnsMRParser.Threshold)
                self.state = 811
                self.number_s()
                self.state = 818
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 812
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 813
                    self.match(CnsMRParser.Classification)
                    self.state = 815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 814
                        self.match(CnsMRParser.Equ_op)


                    self.state = 817
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 820
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 822
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(CnsMRParser.Observed)
            self.state = 826
            self.selection()
            self.state = 828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 827
                self.selection()


            self.state = 830
            self.number()
            self.state = 832
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 831
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self):
            return self.getTypedRuleContext(CnsMRParser.NumberContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(CnsMRParser.Rcoil)
            self.state = 835
            self.selection()
            self.state = 836
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.match(CnsMRParser.Anisotropy)
            self.state = 839
            self.selection()
            self.state = 840
            self.selection()
            self.state = 841
            self.selection()
            self.state = 842
            self.match(CnsMRParser.Simple_name)
            self.state = 844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 843
                self.match(CnsMRParser.Logical)


            self.state = 846
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 848
            self.match(CnsMRParser.Amides)
            self.state = 849
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 851
            self.match(CnsMRParser.Carbon)
            self.state = 852
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(CnsMRParser.Nitrogens)
            self.state = 855
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 857
            self.match(CnsMRParser.Oxygens)
            self.state = 858
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 860
            self.match(CnsMRParser.RingAtoms)
            self.state = 861
            self.match(CnsMRParser.Simple_name)
            self.state = 862
            self.selection()
            self.state = 863
            self.selection()
            self.state = 864
            self.selection()
            self.state = 865
            self.selection()
            self.state = 866
            self.selection()
            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 867
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 871
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 956
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 873
                self.conf_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 874
                self.match(CnsMRParser.Classification)
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 875
                    self.match(CnsMRParser.Equ_op)


                self.state = 878
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 879
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 880
                self.match(CnsMRParser.Expectation)
                self.state = 881
                self.match(CnsMRParser.Integer)
                self.state = 883
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 882
                    self.match(CnsMRParser.Integer)


                self.state = 886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 885
                    self.match(CnsMRParser.Integer)


                self.state = 889
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 888
                    self.match(CnsMRParser.Integer)


                self.state = 891
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 892
                self.match(CnsMRParser.Error)
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 893
                    self.match(CnsMRParser.Equ_op)


                self.state = 896
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 897
                self.match(CnsMRParser.ForceConstant)
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 898
                    self.match(CnsMRParser.Equ_op)


                self.state = 901
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 902
                self.match(CnsMRParser.Nrestraints)
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 903
                    self.match(CnsMRParser.Equ_op)


                self.state = 906
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 907
                self.match(CnsMRParser.Phase)
                self.state = 908
                self.match(CnsMRParser.Integer)
                self.state = 909
                self.match(CnsMRParser.Integer)
                self.state = 910
                self.match(CnsMRParser.Integer)
                self.state = 914
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 911
                    self.match(CnsMRParser.Integer)
                    self.state = 912
                    self.match(CnsMRParser.Integer)
                    self.state = 913
                    self.match(CnsMRParser.Integer)


                self.state = 919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 916
                    self.match(CnsMRParser.Integer)
                    self.state = 917
                    self.match(CnsMRParser.Integer)
                    self.state = 918
                    self.match(CnsMRParser.Integer)


                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 921
                    self.match(CnsMRParser.Integer)
                    self.state = 922
                    self.match(CnsMRParser.Integer)
                    self.state = 923
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 926
                self.match(CnsMRParser.Potential)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 927
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 930
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 931
                self.match(CnsMRParser.Print)
                self.state = 932
                self.match(CnsMRParser.Threshold)
                self.state = 933
                self.number_s()
                self.state = 940
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 934
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 935
                    self.match(CnsMRParser.Classification)
                    self.state = 937
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 936
                        self.match(CnsMRParser.Equ_op)


                    self.state = 939
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 942
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 943
                self.match(CnsMRParser.Size)
                self.state = 944
                self.match(CnsMRParser.Dimensions)
                self.state = 945
                self.match(CnsMRParser.Integer)
                self.state = 947
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 946
                    self.match(CnsMRParser.Integer)


                self.state = 950
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 949
                    self.match(CnsMRParser.Integer)


                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 952
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 955
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 958
            self.match(CnsMRParser.Assign)
            self.state = 959
            self.selection()
            self.state = 960
            self.selection()
            self.state = 961
            self.selection()
            self.state = 962
            self.selection()
            self.state = 968
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 963
                self.selection()
                self.state = 964
                self.selection()
                self.state = 965
                self.selection()
                self.state = 966
                self.selection()


            self.state = 975
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 970
                self.selection()
                self.state = 971
                self.selection()
                self.state = 972
                self.selection()
                self.state = 973
                self.selection()


            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 977
                self.selection()
                self.state = 978
                self.selection()
                self.state = 979
                self.selection()
                self.state = 980
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1016
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 984
                self.dani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.match(CnsMRParser.Classification)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 986
                    self.match(CnsMRParser.Equ_op)


                self.state = 989
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 990
                self.match(CnsMRParser.Coefficients)
                self.state = 991
                self.number_s()
                self.state = 992
                self.number_s()
                self.state = 993
                self.number_s()
                self.state = 994
                self.number_s()
                self.state = 995
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 997
                self.match(CnsMRParser.ForceConstant)
                self.state = 999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 998
                    self.match(CnsMRParser.Equ_op)


                self.state = 1001
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1002
                self.match(CnsMRParser.Nrestraints)
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1003
                    self.match(CnsMRParser.Equ_op)


                self.state = 1006
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1007
                self.match(CnsMRParser.Potential)
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1008
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1011
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1012
                self.match(CnsMRParser.Print)
                self.state = 1013
                self.match(CnsMRParser.Threshold)
                self.state = 1014
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1015
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1018
            self.match(CnsMRParser.Assign)
            self.state = 1019
            self.selection()
            self.state = 1020
            self.selection()
            self.state = 1021
            self.selection()
            self.state = 1022
            self.selection()
            self.state = 1023
            self.selection()
            self.state = 1024
            self.selection()
            self.state = 1025
            self.number()
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 1026
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1029
                self.one_bond_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1030
                self.match(CnsMRParser.Classification)
                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1031
                    self.match(CnsMRParser.Equ_op)


                self.state = 1034
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1035
                self.match(CnsMRParser.Coefficients)
                self.state = 1036
                self.number_s()
                self.state = 1037
                self.number_s()
                self.state = 1038
                self.number_s()
                self.state = 1039
                self.number_s()
                self.state = 1040
                self.number_s()
                self.state = 1041
                self.number_s()
                self.state = 1042
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1044
                self.match(CnsMRParser.ForceConstant)
                self.state = 1046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1045
                    self.match(CnsMRParser.Equ_op)


                self.state = 1048
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1049
                self.match(CnsMRParser.Nrestraints)
                self.state = 1051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1050
                    self.match(CnsMRParser.Equ_op)


                self.state = 1053
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1054
                self.match(CnsMRParser.Potential)
                self.state = 1056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1055
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1058
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1059
                self.match(CnsMRParser.Print)
                self.state = 1060
                self.match(CnsMRParser.Threshold)
                self.state = 1061
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1062
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.match(CnsMRParser.Assign)
            self.state = 1066
            self.selection()
            self.state = 1067
            self.selection()
            self.state = 1068
            self.selection()
            self.state = 1069
            self.selection()
            self.state = 1070
            self.selection()
            self.state = 1071
            self.selection()
            self.state = 1072
            self.selection()
            self.state = 1073
            self.selection()
            self.state = 1074
            self.number()
            self.state = 1075
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(CnsMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1129
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1077
                self.angle_db_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1078
                self.match(CnsMRParser.Classification)
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1079
                    self.match(CnsMRParser.Equ_op)


                self.state = 1082
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1083
                self.match(CnsMRParser.DerivFlag)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1084
                    self.match(CnsMRParser.Equ_op)


                self.state = 1087
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1088
                self.match(CnsMRParser.Expectation)
                self.state = 1089
                self.match(CnsMRParser.Integer)
                self.state = 1090
                self.match(CnsMRParser.Integer)
                self.state = 1091
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1092
                self.match(CnsMRParser.Error)
                self.state = 1094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1093
                    self.match(CnsMRParser.Equ_op)


                self.state = 1096
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1097
                self.match(CnsMRParser.ForceConstant)
                self.state = 1099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1098
                    self.match(CnsMRParser.Equ_op)


                self.state = 1101
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1102
                self.match(CnsMRParser.Nrestraints)
                self.state = 1104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1103
                    self.match(CnsMRParser.Equ_op)


                self.state = 1106
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1107
                self.match(CnsMRParser.Potential)
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1108
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1111
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1112
                self.match(CnsMRParser.Print)
                self.state = 1113
                self.match(CnsMRParser.Threshold)
                self.state = 1114
                self.number_s()
                self.state = 1121
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 1115
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 1116
                    self.match(CnsMRParser.Classification)
                    self.state = 1118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1117
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1120
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1123
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1124
                self.match(CnsMRParser.Size)
                self.state = 1125
                self.match(CnsMRParser.Angle_or_Dihedral)
                self.state = 1126
                self.match(CnsMRParser.Integer)
                self.state = 1127
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1128
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.match(CnsMRParser.Assign)
            self.state = 1132
            self.selection()
            self.state = 1133
            self.selection()
            self.state = 1134
            self.selection()
            self.state = 1135
            self.selection()
            self.state = 1136
            self.selection()
            self.state = 1137
            self.selection()
            self.state = 1138
            self.selection()
            self.state = 1139
            self.selection()
            self.state = 1140
            self.selection()
            self.state = 1141
            self.selection()
            self.state = 1142
            self.selection()
            self.state = 1144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1143
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.match(CnsMRParser.L_paren)
            self.state = 1147
            self.selection_expression()
            self.state = 1148
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1150
            self.term()
            self.state = 1155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 1151
                self.match(CnsMRParser.Or_op)
                self.state = 1152
                self.term()
                self.state = 1157
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1158
            self.factor(0)
            self.state = 1163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1159
                self.match(CnsMRParser.And_op)
                self.state = 1160
                self.factor(0)
                self.state = 1165
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store_1(self):
            return self.getToken(CnsMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(CnsMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(CnsMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(CnsMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(CnsMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(CnsMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(CnsMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(CnsMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(CnsMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1316
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1167
                self.match(CnsMRParser.L_paren)
                self.state = 1168
                self.selection_expression()
                self.state = 1169
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1171
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1172
                self.match(CnsMRParser.Atom)
                self.state = 1173
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1174
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1175
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1176
                self.match(CnsMRParser.Attribute)
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1177
                    self.match(CnsMRParser.Abs)


                self.state = 1180
                self.match(CnsMRParser.Attr_properties)
                self.state = 1181
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1182
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1183
                self.match(CnsMRParser.BondedTo)
                self.state = 1184
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1185
                self.match(CnsMRParser.ByGroup)
                self.state = 1186
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1187
                self.match(CnsMRParser.ByRes)
                self.state = 1188
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1189
                self.match(CnsMRParser.Chemical)
                self.state = 1196
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1190
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1191
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1194
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        self.state = 1192
                        self.match(CnsMRParser.Colon)
                        self.state = 1193
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1198
                self.match(CnsMRParser.Fbox)
                self.state = 1199
                self.number_f()
                self.state = 1200
                self.number_f()
                self.state = 1201
                self.number_f()
                self.state = 1202
                self.number_f()
                self.state = 1203
                self.number_f()
                self.state = 1204
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1206
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1207
                self.match(CnsMRParser.Id)
                self.state = 1208
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1209
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1210
                self.match(CnsMRParser.Name)
                self.state = 1222
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1211
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1212
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1215
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                    if la_ == 1:
                        self.state = 1213
                        self.match(CnsMRParser.Colon)
                        self.state = 1214
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1217
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1220
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                    if la_ == 1:
                        self.state = 1218
                        self.match(CnsMRParser.Colon)
                        self.state = 1219
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1224
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1225
                self.match(CnsMRParser.Not_op)
                self.state = 1226
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1227
                self.match(CnsMRParser.Point)
                self.state = 1228
                self.match(CnsMRParser.L_paren)
                self.state = 1229
                self.number_f()
                self.state = 1231
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1230
                    self.match(CnsMRParser.Comma)


                self.state = 1233
                self.number_f()
                self.state = 1235
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1234
                    self.match(CnsMRParser.Comma)


                self.state = 1237
                self.number_f()
                self.state = 1238
                self.match(CnsMRParser.R_paren)
                self.state = 1239
                self.match(CnsMRParser.Cut)
                self.state = 1240
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1242
                self.match(CnsMRParser.Point)
                self.state = 1243
                self.match(CnsMRParser.L_paren)
                self.state = 1244
                self.match(CnsMRParser.Tail)
                self.state = 1246
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1245
                    self.match(CnsMRParser.Equ_op)


                self.state = 1248
                self.selection()
                self.state = 1250
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1249
                    self.match(CnsMRParser.Comma)


                self.state = 1257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1252
                    self.match(CnsMRParser.Head)
                    self.state = 1254
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1253
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1256
                    self.selection()


                self.state = 1259
                self.match(CnsMRParser.R_paren)
                self.state = 1260
                self.match(CnsMRParser.Cut)
                self.state = 1261
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1263
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1264
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1265
                self.match(CnsMRParser.Residue)
                self.state = 1273
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1266
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1267
                    self.match(CnsMRParser.Integer)
                    self.state = 1270
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                    if la_ == 1:
                        self.state = 1268
                        self.match(CnsMRParser.Colon)
                        self.state = 1269
                        self.match(CnsMRParser.Integer)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1272
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1275
                self.match(CnsMRParser.Resname)
                self.state = 1282
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1276
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1277
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1280
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                    if la_ == 1:
                        self.state = 1278
                        self.match(CnsMRParser.Colon)
                        self.state = 1279
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1284
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1296
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1285
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1286
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1289
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                    if la_ == 1:
                        self.state = 1287
                        self.match(CnsMRParser.Colon)
                        self.state = 1288
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1291
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1294
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                    if la_ == 1:
                        self.state = 1292
                        self.match(CnsMRParser.Colon)
                        self.state = 1293
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1298
                self.match(CnsMRParser.Sfbox)
                self.state = 1299
                self.number_f()
                self.state = 1300
                self.number_f()
                self.state = 1301
                self.number_f()
                self.state = 1302
                self.number_f()
                self.state = 1303
                self.number_f()
                self.state = 1304
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1306
                self.match(CnsMRParser.Store_1)
                pass

            elif la_ == 25:
                self.state = 1307
                self.match(CnsMRParser.Store_2)
                pass

            elif la_ == 26:
                self.state = 1308
                self.match(CnsMRParser.Store_3)
                pass

            elif la_ == 27:
                self.state = 1309
                self.match(CnsMRParser.Store_4)
                pass

            elif la_ == 28:
                self.state = 1310
                self.match(CnsMRParser.Store_5)
                pass

            elif la_ == 29:
                self.state = 1311
                self.match(CnsMRParser.Store_6)
                pass

            elif la_ == 30:
                self.state = 1312
                self.match(CnsMRParser.Store_7)
                pass

            elif la_ == 31:
                self.state = 1313
                self.match(CnsMRParser.Store_8)
                pass

            elif la_ == 32:
                self.state = 1314
                self.match(CnsMRParser.Store_9)
                pass

            elif la_ == 33:
                self.state = 1315
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1326
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1324
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1318
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1319
                        self.match(CnsMRParser.Around)
                        self.state = 1320
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1321
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1322
                        self.match(CnsMRParser.Saround)
                        self.state = 1323
                        self.number_f()
                        pass

             
                self.state = 1328
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1329
            _la = self._input.LA(1)
            if not(((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1331
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1333
            _la = self._input.LA(1)
            if not(((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = CnsMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1335
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CnsMRParser.Flags, 0)

        def Include(self):
            return self.getToken(CnsMRParser.Include, 0)

        def End_F(self):
            return self.getToken(CnsMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(CnsMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Class_name)
            else:
                return self.getToken(CnsMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(CnsMRParser.Any_class, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = CnsMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1337
            self.match(CnsMRParser.Flags)
            self.state = 1348
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Exclude:
                self.state = 1338
                self.match(CnsMRParser.Exclude)
                self.state = 1346
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Include, CnsMRParser.Class_name]:
                    self.state = 1342
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CnsMRParser.Class_name:
                        self.state = 1339
                        self.match(CnsMRParser.Class_name)
                        self.state = 1344
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CnsMRParser.Any_class]:
                    self.state = 1345
                    self.match(CnsMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1350
            self.match(CnsMRParser.Include)
            self.state = 1354
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Class_name:
                self.state = 1351
                self.match(CnsMRParser.Class_name)
                self.state = 1356
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1357
            self.match(CnsMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(CnsMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = CnsMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            self.match(CnsMRParser.Vector)
            self.state = 1360
            self.vector_mode()
            self.state = 1361
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(CnsMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(CnsMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(CnsMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = CnsMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 1369
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Do_Lp, CnsMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1363
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Do_Lp or _la==CnsMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1364
                self.vector_expression()
                self.state = 1365
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1367
                self.match(CnsMRParser.Show)
                self.state = 1368
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = CnsMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1371
            self.match(CnsMRParser.Atom_properties_VE)
            self.state = 1374
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Equ_op_VE:
                self.state = 1372
                self.match(CnsMRParser.Equ_op_VE)
                self.state = 1373
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = CnsMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.vflc()
            self.state = 1379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (CnsMRParser.Add_op_VE - 181)) | (1 << (CnsMRParser.Sub_op_VE - 181)) | (1 << (CnsMRParser.Mul_op_VE - 181)) | (1 << (CnsMRParser.Div_op_VE - 181)) | (1 << (CnsMRParser.Exp_op_VE - 181)))) != 0):
                self.state = 1377
                _la = self._input.LA(1)
                if not(((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (CnsMRParser.Add_op_VE - 181)) | (1 << (CnsMRParser.Sub_op_VE - 181)) | (1 << (CnsMRParser.Mul_op_VE - 181)) | (1 << (CnsMRParser.Div_op_VE - 181)) | (1 << (CnsMRParser.Exp_op_VE - 181)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1378
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(CnsMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(CnsMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(CnsMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(CnsMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = CnsMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vflc)
        try:
            self.state = 1388
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1381
                self.match(CnsMRParser.Atom_properties_VE)
                pass
            elif token in [CnsMRParser.Abs_VE, CnsMRParser.Acos_VE, CnsMRParser.Cos_VE, CnsMRParser.Decode_VE, CnsMRParser.Encode_VE, CnsMRParser.Exp_VE, CnsMRParser.Gauss_VE, CnsMRParser.Heavy_VE, CnsMRParser.Int_VE, CnsMRParser.Log10_VE, CnsMRParser.Log_VE, CnsMRParser.Max_VE, CnsMRParser.Maxw_VE, CnsMRParser.Min_VE, CnsMRParser.Mod_VE, CnsMRParser.Norm_VE, CnsMRParser.Random_VE, CnsMRParser.Sign_VE, CnsMRParser.Sin_VE, CnsMRParser.Sqrt_VE, CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1382
                self.vector_func_call()
                pass
            elif token in [CnsMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1383
                self.match(CnsMRParser.Integer_VE)
                pass
            elif token in [CnsMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1384
                self.match(CnsMRParser.Real_VE)
                pass
            elif token in [CnsMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1385
                self.match(CnsMRParser.Simple_name_VE)
                pass
            elif token in [CnsMRParser.Symbol_name_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1386
                self.match(CnsMRParser.Symbol_name_VE)
                pass
            elif token in [CnsMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1387
                self.match(CnsMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(CnsMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(CnsMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(CnsMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(CnsMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(CnsMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(CnsMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(CnsMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(CnsMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(CnsMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(CnsMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(CnsMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(CnsMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(CnsMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma_VE)
            else:
                return self.getToken(CnsMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(CnsMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(CnsMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(CnsMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(CnsMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(CnsMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(CnsMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(CnsMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(CnsMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(CnsMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = CnsMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1509
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1390
                self.match(CnsMRParser.Abs_VE)
                self.state = 1391
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1392
                self.vflc()
                self.state = 1393
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1395
                self.match(CnsMRParser.Acos_VE)
                self.state = 1396
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1397
                self.vflc()
                self.state = 1398
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1400
                self.match(CnsMRParser.Cos_VE)
                self.state = 1401
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1402
                self.vflc()
                self.state = 1403
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1405
                self.match(CnsMRParser.Decode_VE)
                self.state = 1406
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1407
                self.vflc()
                self.state = 1408
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1410
                self.match(CnsMRParser.Encode_VE)
                self.state = 1411
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1412
                self.vflc()
                self.state = 1413
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1415
                self.match(CnsMRParser.Exp_VE)
                self.state = 1416
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1417
                self.vflc()
                self.state = 1418
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1420
                self.match(CnsMRParser.Gauss_VE)
                self.state = 1421
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1422
                self.vflc()
                self.state = 1423
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1425
                self.match(CnsMRParser.Heavy_VE)
                self.state = 1426
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1427
                self.vflc()
                self.state = 1428
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1430
                self.match(CnsMRParser.Int_VE)
                self.state = 1431
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1432
                self.vflc()
                self.state = 1433
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1435
                self.match(CnsMRParser.Log10_VE)
                self.state = 1436
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1437
                self.vflc()
                self.state = 1438
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1440
                self.match(CnsMRParser.Log_VE)
                self.state = 1441
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1442
                self.vflc()
                self.state = 1443
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1445
                self.match(CnsMRParser.Max_VE)
                self.state = 1446
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1447
                self.vflc()
                self.state = 1452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1448
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1449
                    self.vflc()
                    self.state = 1454
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1455
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1457
                self.match(CnsMRParser.Maxw_VE)
                self.state = 1458
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1459
                self.vflc()
                self.state = 1460
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1462
                self.match(CnsMRParser.Min_VE)
                self.state = 1463
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1464
                self.vflc()
                self.state = 1469
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1465
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1466
                    self.vflc()
                    self.state = 1471
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1472
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1474
                self.match(CnsMRParser.Mod_VE)
                self.state = 1475
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1476
                self.vflc()
                self.state = 1477
                self.match(CnsMRParser.Comma_VE)
                self.state = 1478
                self.vflc()
                self.state = 1479
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1481
                self.match(CnsMRParser.Norm_VE)
                self.state = 1482
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1483
                self.vflc()
                self.state = 1484
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1486
                self.match(CnsMRParser.Random_VE)
                self.state = 1487
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1488
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1489
                self.match(CnsMRParser.Sign_VE)
                self.state = 1490
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1491
                self.vflc()
                self.state = 1492
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1494
                self.match(CnsMRParser.Sin_VE)
                self.state = 1495
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1496
                self.vflc()
                self.state = 1497
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1499
                self.match(CnsMRParser.Sqrt_VE)
                self.state = 1500
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1501
                self.vflc()
                self.state = 1502
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1504
                self.match(CnsMRParser.Tan_VE)
                self.state = 1505
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1506
                self.vflc()
                self.state = 1507
                self.match(CnsMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(CnsMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(CnsMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(CnsMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(CnsMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(CnsMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(CnsMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(CnsMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(CnsMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(CnsMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(CnsMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = CnsMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1511
            _la = self._input.LA(1)
            if not(((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (CnsMRParser.Average_VS - 220)) | (1 << (CnsMRParser.Element_VS - 220)) | (1 << (CnsMRParser.Max_VS - 220)) | (1 << (CnsMRParser.Min_VS - 220)) | (1 << (CnsMRParser.Norm_VS - 220)) | (1 << (CnsMRParser.Rms_VS - 220)) | (1 << (CnsMRParser.Sum_VS - 220)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1512
            self.match(CnsMRParser.L_paren_VS)
            self.state = 1513
            self.match(CnsMRParser.Atom_properties_VS)
            self.state = 1514
            self.match(CnsMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(CnsMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = CnsMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1516
            self.match(CnsMRParser.Evaluate_Lp)
            self.state = 1517
            self.match(CnsMRParser.Symbol_name_VE)
            self.state = 1518
            self.match(CnsMRParser.Equ_op_VE)
            self.state = 1519
            self.evaluate_operation()
            self.state = 1520
            self.match(CnsMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = CnsMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1522
            self.vflc()
            self.state = 1525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (CnsMRParser.Add_op_VE - 181)) | (1 << (CnsMRParser.Sub_op_VE - 181)) | (1 << (CnsMRParser.Mul_op_VE - 181)) | (1 << (CnsMRParser.Div_op_VE - 181)) | (1 << (CnsMRParser.Exp_op_VE - 181)))) != 0):
                self.state = 1523
                _la = self._input.LA(1)
                if not(((((_la - 181)) & ~0x3f) == 0 and ((1 << (_la - 181)) & ((1 << (CnsMRParser.Add_op_VE - 181)) | (1 << (CnsMRParser.Sub_op_VE - 181)) | (1 << (CnsMRParser.Mul_op_VE - 181)) | (1 << (CnsMRParser.Div_op_VE - 181)) | (1 << (CnsMRParser.Exp_op_VE - 181)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1524
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = CnsMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1527
            self.match(CnsMRParser.For)
            self.state = 1528
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1529
            self.match(CnsMRParser.In_CF)
            self.state = 1530
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1549
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1534
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1531
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1536
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1537
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1546
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1543
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1551
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1552
            self.match(CnsMRParser.Loop)
            self.state = 1553
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1556
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1554
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1555
                    self.dihedral_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1560
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1561
            self.match(CnsMRParser.End)
            self.state = 1562
            self.match(CnsMRParser.Loop)
            self.state = 1563
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[51] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




