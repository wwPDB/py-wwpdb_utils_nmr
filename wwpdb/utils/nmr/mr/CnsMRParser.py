# Generated from CnsMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,240,1742,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,171,8,0,10,0,12,0,174,9,
        0,1,0,1,0,1,1,1,1,5,1,180,8,1,10,1,12,1,183,9,1,1,1,1,1,1,2,3,2,
        188,8,2,1,2,1,2,5,2,192,8,2,10,2,12,2,195,9,2,1,2,1,2,1,3,3,3,200,
        8,3,1,3,1,3,5,3,204,8,3,10,3,12,3,207,9,3,1,3,1,3,1,4,3,4,212,8,
        4,1,4,1,4,5,4,216,8,4,10,4,12,4,219,9,4,1,4,1,4,1,5,1,5,5,5,225,
        8,5,10,5,12,5,228,9,5,1,5,1,5,1,6,1,6,5,6,234,8,6,10,6,12,6,237,
        9,6,1,6,1,6,1,7,1,7,5,7,243,8,7,10,7,12,7,246,9,7,1,7,1,7,1,8,1,
        8,5,8,252,8,8,10,8,12,8,255,9,8,1,8,1,8,1,9,1,9,5,9,261,8,9,10,9,
        12,9,264,9,9,1,9,1,9,1,10,1,10,5,10,270,8,10,10,10,12,10,273,9,10,
        1,10,1,10,1,11,1,11,5,11,279,8,11,10,11,12,11,282,9,11,1,11,1,11,
        1,12,1,12,5,12,288,8,12,10,12,12,12,291,9,12,1,12,1,12,1,13,1,13,
        3,13,297,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,3,13,313,8,13,1,13,1,13,1,13,3,13,318,8,13,1,
        13,1,13,1,13,1,13,1,13,3,13,325,8,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,3,13,334,8,13,1,13,1,13,1,13,3,13,339,8,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,5,13,348,8,13,10,13,12,13,351,9,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,362,8,13,1,13,1,13,1,13,
        1,13,3,13,368,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,3,13,381,8,13,1,13,1,13,1,13,5,13,386,8,13,10,13,12,13,
        389,9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,413,
        8,13,10,13,12,13,416,9,13,1,13,1,13,1,13,3,13,421,8,13,1,13,3,13,
        424,8,13,1,14,1,14,1,14,1,14,1,14,3,14,431,8,14,1,14,3,14,434,8,
        14,1,14,5,14,437,8,14,10,14,12,14,440,9,14,1,14,1,14,3,14,444,8,
        14,1,14,1,14,1,14,3,14,449,8,14,1,14,3,14,452,8,14,1,14,3,14,455,
        8,14,5,14,457,8,14,10,14,12,14,460,9,14,1,15,1,15,3,15,464,8,15,
        1,15,1,15,1,15,3,15,469,8,15,1,15,1,15,1,15,1,15,1,15,3,15,476,8,
        15,1,16,1,16,3,16,480,8,16,1,16,1,16,1,16,3,16,485,8,16,1,16,1,16,
        1,16,3,16,490,8,16,1,16,1,16,1,16,3,16,495,8,16,1,16,1,16,1,16,3,
        16,500,8,16,1,16,1,16,1,16,3,16,505,8,16,1,16,1,16,1,16,3,16,510,
        8,16,1,16,3,16,513,8,16,1,17,1,17,1,17,1,17,1,17,3,17,520,8,17,1,
        17,1,17,1,17,3,17,525,8,17,1,17,1,17,1,17,3,17,530,8,17,1,17,1,17,
        1,17,1,17,3,17,536,8,17,1,17,1,17,3,17,540,8,17,1,18,1,18,1,18,1,
        18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,5,19,555,8,19,10,
        19,12,19,558,9,19,1,19,1,19,1,19,3,19,563,8,19,1,20,1,20,3,20,567,
        8,20,1,20,1,20,1,20,3,20,572,8,20,1,20,3,20,575,8,20,1,21,1,21,1,
        21,3,21,580,8,21,1,21,1,21,1,21,3,21,585,8,21,1,21,1,21,1,21,3,21,
        590,8,21,1,21,1,21,3,21,594,8,21,1,21,1,21,1,21,1,21,3,21,600,8,
        21,1,21,1,21,3,21,604,8,21,1,21,1,21,3,21,608,8,21,1,21,3,21,611,
        8,21,3,21,613,8,21,1,21,1,21,3,21,617,8,21,1,22,1,22,1,22,1,22,1,
        22,1,22,1,23,1,23,1,23,1,23,3,23,629,8,23,1,23,1,23,1,23,1,23,1,
        23,1,23,1,23,1,23,3,23,639,8,23,1,23,1,23,1,23,3,23,644,8,23,1,23,
        1,23,1,23,3,23,649,8,23,1,23,1,23,1,23,1,23,1,23,3,23,656,8,23,1,
        24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,667,8,24,1,24,3,
        24,670,8,24,1,25,1,25,1,25,1,25,3,25,676,8,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,3,25,687,8,25,1,25,1,25,1,25,1,25,3,25,
        693,8,25,1,25,1,25,3,25,697,8,25,1,25,1,25,1,25,3,25,702,8,25,1,
        25,1,25,1,25,3,25,707,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,
        25,716,8,25,1,25,3,25,719,8,25,1,25,3,25,722,8,25,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,734,8,26,1,26,1,26,1,26,
        1,26,1,26,3,26,741,8,26,1,27,1,27,1,27,1,27,3,27,747,8,27,1,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,759,8,27,1,27,1,
        27,1,27,3,27,764,8,27,1,27,1,27,1,27,3,27,769,8,27,1,27,1,27,1,27,
        3,27,774,8,27,1,27,1,27,1,27,3,27,779,8,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,3,27,788,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,3,30,815,8,30,1,30,1,30,1,30,3,30,820,8,30,
        1,30,1,30,1,30,1,30,3,30,826,8,30,1,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,3,30,836,8,30,1,30,3,30,839,8,30,1,30,1,30,1,30,3,30,844,
        8,30,1,31,1,31,1,31,3,31,849,8,31,1,31,1,31,3,31,853,8,31,1,32,1,
        32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,865,8,33,1,33,1,
        33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,889,8,38,1,39,1,39,1,
        39,1,40,1,40,1,40,3,40,897,8,40,1,40,1,40,1,40,1,40,1,40,3,40,904,
        8,40,1,40,3,40,907,8,40,1,40,3,40,910,8,40,1,40,1,40,1,40,3,40,915,
        8,40,1,40,1,40,1,40,3,40,920,8,40,1,40,1,40,1,40,3,40,925,8,40,1,
        40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,935,8,40,1,40,1,40,1,
        40,3,40,940,8,40,1,40,1,40,1,40,3,40,945,8,40,1,40,1,40,3,40,949,
        8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,958,8,40,1,40,3,40,
        961,8,40,1,40,1,40,1,40,1,40,1,40,3,40,968,8,40,1,40,3,40,971,8,
        40,1,40,3,40,974,8,40,1,40,3,40,977,8,40,1,41,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,3,41,989,8,41,1,41,1,41,1,41,1,41,1,41,
        3,41,996,8,41,1,41,1,41,1,41,1,41,1,41,3,41,1003,8,41,1,42,1,42,
        1,42,3,42,1008,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,3,42,1020,8,42,1,42,1,42,1,42,3,42,1025,8,42,1,42,1,42,1,42,
        3,42,1030,8,42,1,42,1,42,1,42,1,42,1,42,3,42,1037,8,42,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1048,8,43,1,44,1,44,1,44,
        3,44,1053,8,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,3,44,1067,8,44,1,44,1,44,1,44,3,44,1072,8,44,1,44,1,44,
        1,44,3,44,1077,8,44,1,44,1,44,1,44,1,44,1,44,3,44,1084,8,44,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,
        1,46,3,46,1101,8,46,1,46,1,46,1,46,3,46,1106,8,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,3,46,1115,8,46,1,46,1,46,1,46,3,46,1120,8,46,
        1,46,1,46,1,46,3,46,1125,8,46,1,46,1,46,1,46,3,46,1130,8,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,3,46,1139,8,46,1,46,3,46,1142,8,46,
        1,46,1,46,1,46,1,46,1,46,1,46,3,46,1150,8,46,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1165,8,47,1,48,
        1,48,1,48,1,48,1,49,1,49,1,49,5,49,1174,8,49,10,49,12,49,1177,9,
        49,1,50,1,50,1,50,5,50,1182,8,50,10,50,12,50,1185,9,50,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1199,8,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,3,51,1215,8,51,1,51,3,51,1218,8,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,
        1237,8,51,1,51,1,51,1,51,3,51,1242,8,51,1,51,3,51,1245,8,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,3,51,1254,8,51,1,51,1,51,3,51,1258,
        8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1269,8,51,
        1,51,1,51,3,51,1273,8,51,1,51,1,51,3,51,1277,8,51,1,51,3,51,1280,
        8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,
        1293,8,51,1,51,3,51,1296,8,51,1,51,1,51,1,51,1,51,1,51,3,51,1303,
        8,51,1,51,3,51,1306,8,51,1,51,1,51,1,51,1,51,1,51,3,51,1313,8,51,
        1,51,1,51,1,51,3,51,1318,8,51,1,51,3,51,1321,8,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,3,51,1341,8,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,1349,
        8,51,10,51,12,51,1352,9,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,
        55,1,56,1,56,1,56,5,56,1365,8,56,10,56,12,56,1368,9,56,1,56,3,56,
        1371,8,56,3,56,1373,8,56,1,56,1,56,5,56,1377,8,56,10,56,12,56,1380,
        9,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,
        3,58,1394,8,58,1,59,1,59,1,59,3,59,1399,8,59,1,60,1,60,1,60,3,60,
        1404,8,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1413,8,61,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,1475,8,62,10,62,12,62,1478,
        9,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        5,62,1492,8,62,10,62,12,62,1495,9,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,3,62,1534,8,62,1,63,1,63,1,63,1,63,1,
        63,1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,3,65,1550,8,65,1,
        66,1,66,1,66,1,66,1,66,5,66,1557,8,66,10,66,12,66,1560,9,66,1,66,
        5,66,1563,8,66,10,66,12,66,1566,9,66,1,66,5,66,1569,8,66,10,66,12,
        66,1572,9,66,3,66,1574,8,66,1,66,1,66,1,66,1,66,1,66,5,66,1581,8,
        66,10,66,12,66,1584,9,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,
        1,67,5,67,1595,8,67,10,67,12,67,1598,9,67,1,67,5,67,1601,8,67,10,
        67,12,67,1604,9,67,1,67,5,67,1607,8,67,10,67,12,67,1610,9,67,3,67,
        1612,8,67,1,67,1,67,1,67,1,67,1,67,5,67,1619,8,67,10,67,12,67,1622,
        9,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,1,68,1,68,5,68,1633,8,68,
        10,68,12,68,1636,9,68,1,68,5,68,1639,8,68,10,68,12,68,1642,9,68,
        1,68,5,68,1645,8,68,10,68,12,68,1648,9,68,3,68,1650,8,68,1,68,1,
        68,1,68,1,68,1,68,5,68,1657,8,68,10,68,12,68,1660,9,68,1,68,1,68,
        1,68,1,68,1,69,1,69,1,69,1,69,1,69,5,69,1671,8,69,10,69,12,69,1674,
        9,69,1,69,5,69,1677,8,69,10,69,12,69,1680,9,69,1,69,5,69,1683,8,
        69,10,69,12,69,1686,9,69,3,69,1688,8,69,1,69,1,69,1,69,1,69,1,69,
        5,69,1695,8,69,10,69,12,69,1698,9,69,1,69,1,69,1,69,1,69,1,70,1,
        70,1,70,1,70,1,70,5,70,1709,8,70,10,70,12,70,1712,9,70,1,70,5,70,
        1715,8,70,10,70,12,70,1718,9,70,1,70,5,70,1721,8,70,10,70,12,70,
        1724,9,70,3,70,1726,8,70,1,70,1,70,1,70,1,70,1,70,5,70,1733,8,70,
        10,70,12,70,1736,9,70,1,70,1,70,1,70,1,70,1,70,3,349,387,414,1,102,
        71,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,0,7,1,0,143,144,2,0,136,136,
        145,145,3,0,136,136,138,138,155,155,2,0,136,136,138,138,1,0,123,
        124,1,0,182,186,1,0,221,227,2095,0,172,1,0,0,0,2,177,1,0,0,0,4,187,
        1,0,0,0,6,199,1,0,0,0,8,211,1,0,0,0,10,222,1,0,0,0,12,231,1,0,0,
        0,14,240,1,0,0,0,16,249,1,0,0,0,18,258,1,0,0,0,20,267,1,0,0,0,22,
        276,1,0,0,0,24,285,1,0,0,0,26,423,1,0,0,0,28,425,1,0,0,0,30,475,
        1,0,0,0,32,512,1,0,0,0,34,539,1,0,0,0,36,541,1,0,0,0,38,562,1,0,
        0,0,40,574,1,0,0,0,42,616,1,0,0,0,44,618,1,0,0,0,46,655,1,0,0,0,
        48,657,1,0,0,0,50,721,1,0,0,0,52,723,1,0,0,0,54,787,1,0,0,0,56,789,
        1,0,0,0,58,798,1,0,0,0,60,843,1,0,0,0,62,845,1,0,0,0,64,854,1,0,
        0,0,66,858,1,0,0,0,68,868,1,0,0,0,70,871,1,0,0,0,72,874,1,0,0,0,
        74,877,1,0,0,0,76,880,1,0,0,0,78,890,1,0,0,0,80,976,1,0,0,0,82,978,
        1,0,0,0,84,1036,1,0,0,0,86,1038,1,0,0,0,88,1083,1,0,0,0,90,1085,
        1,0,0,0,92,1149,1,0,0,0,94,1151,1,0,0,0,96,1166,1,0,0,0,98,1170,
        1,0,0,0,100,1178,1,0,0,0,102,1340,1,0,0,0,104,1353,1,0,0,0,106,1355,
        1,0,0,0,108,1357,1,0,0,0,110,1359,1,0,0,0,112,1361,1,0,0,0,114,1383,
        1,0,0,0,116,1393,1,0,0,0,118,1395,1,0,0,0,120,1400,1,0,0,0,122,1412,
        1,0,0,0,124,1533,1,0,0,0,126,1535,1,0,0,0,128,1540,1,0,0,0,130,1546,
        1,0,0,0,132,1551,1,0,0,0,134,1589,1,0,0,0,136,1627,1,0,0,0,138,1665,
        1,0,0,0,140,1703,1,0,0,0,142,171,3,2,1,0,143,171,3,4,2,0,144,171,
        3,6,3,0,145,171,3,8,4,0,146,171,3,10,5,0,147,171,3,12,6,0,148,171,
        3,14,7,0,149,171,3,16,8,0,150,171,3,18,9,0,151,171,3,20,10,0,152,
        171,3,22,11,0,153,171,3,24,12,0,154,171,3,112,56,0,155,171,3,114,
        57,0,156,171,3,128,64,0,157,171,3,132,66,0,158,171,3,134,67,0,159,
        171,3,136,68,0,160,171,3,138,69,0,161,171,3,140,70,0,162,171,3,28,
        14,0,163,171,3,36,18,0,164,171,3,48,24,0,165,171,3,38,19,0,166,171,
        3,44,22,0,167,171,3,52,26,0,168,171,3,56,28,0,169,171,3,62,31,0,
        170,142,1,0,0,0,170,143,1,0,0,0,170,144,1,0,0,0,170,145,1,0,0,0,
        170,146,1,0,0,0,170,147,1,0,0,0,170,148,1,0,0,0,170,149,1,0,0,0,
        170,150,1,0,0,0,170,151,1,0,0,0,170,152,1,0,0,0,170,153,1,0,0,0,
        170,154,1,0,0,0,170,155,1,0,0,0,170,156,1,0,0,0,170,157,1,0,0,0,
        170,158,1,0,0,0,170,159,1,0,0,0,170,160,1,0,0,0,170,161,1,0,0,0,
        170,162,1,0,0,0,170,163,1,0,0,0,170,164,1,0,0,0,170,165,1,0,0,0,
        170,166,1,0,0,0,170,167,1,0,0,0,170,168,1,0,0,0,170,169,1,0,0,0,
        171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,175,1,0,0,0,
        174,172,1,0,0,0,175,176,5,0,0,1,176,1,1,0,0,0,177,181,5,3,0,0,178,
        180,3,26,13,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,
        182,1,0,0,0,182,184,1,0,0,0,183,181,1,0,0,0,184,185,5,2,0,0,185,
        3,1,0,0,0,186,188,5,48,0,0,187,186,1,0,0,0,187,188,1,0,0,0,188,189,
        1,0,0,0,189,193,5,49,0,0,190,192,3,34,17,0,191,190,1,0,0,0,192,195,
        1,0,0,0,193,191,1,0,0,0,193,194,1,0,0,0,194,196,1,0,0,0,195,193,
        1,0,0,0,196,197,5,2,0,0,197,5,1,0,0,0,198,200,5,48,0,0,199,198,1,
        0,0,0,199,200,1,0,0,0,200,201,1,0,0,0,201,205,5,52,0,0,202,204,3,
        38,19,0,203,202,1,0,0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,
        1,0,0,0,206,208,1,0,0,0,207,205,1,0,0,0,208,209,5,2,0,0,209,7,1,
        0,0,0,210,212,5,48,0,0,211,210,1,0,0,0,211,212,1,0,0,0,212,213,1,
        0,0,0,213,217,5,56,0,0,214,216,3,42,21,0,215,214,1,0,0,0,216,219,
        1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,1,0,0,0,219,217,
        1,0,0,0,220,221,5,2,0,0,221,9,1,0,0,0,222,226,5,59,0,0,223,225,3,
        46,23,0,224,223,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,
        1,0,0,0,227,229,1,0,0,0,228,226,1,0,0,0,229,230,5,2,0,0,230,11,1,
        0,0,0,231,235,5,62,0,0,232,234,3,50,25,0,233,232,1,0,0,0,234,237,
        1,0,0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,238,1,0,0,0,237,235,
        1,0,0,0,238,239,5,2,0,0,239,13,1,0,0,0,240,244,5,63,0,0,241,243,
        3,54,27,0,242,241,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,
        1,0,0,0,245,247,1,0,0,0,246,244,1,0,0,0,247,248,5,2,0,0,248,15,1,
        0,0,0,249,253,5,69,0,0,250,252,3,60,30,0,251,250,1,0,0,0,252,255,
        1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,253,
        1,0,0,0,256,257,5,2,0,0,257,17,1,0,0,0,258,262,5,78,0,0,259,261,
        3,80,40,0,260,259,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,
        1,0,0,0,263,265,1,0,0,0,264,262,1,0,0,0,265,266,5,2,0,0,266,19,1,
        0,0,0,267,271,5,83,0,0,268,270,3,84,42,0,269,268,1,0,0,0,270,273,
        1,0,0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,271,
        1,0,0,0,274,275,5,2,0,0,275,21,1,0,0,0,276,280,5,84,0,0,277,279,
        3,88,44,0,278,277,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,
        1,0,0,0,281,283,1,0,0,0,282,280,1,0,0,0,283,284,5,2,0,0,284,23,1,
        0,0,0,285,289,5,85,0,0,286,288,3,92,46,0,287,286,1,0,0,0,288,291,
        1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,289,
        1,0,0,0,292,293,5,2,0,0,293,25,1,0,0,0,294,296,5,4,0,0,295,297,5,
        149,0,0,296,295,1,0,0,0,296,297,1,0,0,0,297,298,1,0,0,0,298,424,
        5,172,0,0,299,424,3,28,14,0,300,424,3,132,66,0,301,302,5,6,0,0,302,
        303,5,143,0,0,303,424,3,108,54,0,304,305,5,7,0,0,305,306,5,166,0,
        0,306,424,5,165,0,0,307,308,5,8,0,0,308,309,5,143,0,0,309,424,3,
        108,54,0,310,312,5,9,0,0,311,313,5,149,0,0,312,311,1,0,0,0,312,313,
        1,0,0,0,313,314,1,0,0,0,314,424,3,108,54,0,315,317,5,10,0,0,316,
        318,5,149,0,0,317,316,1,0,0,0,317,318,1,0,0,0,318,319,1,0,0,0,319,
        424,5,143,0,0,320,321,5,11,0,0,321,424,5,143,0,0,322,324,5,12,0,
        0,323,325,5,149,0,0,324,323,1,0,0,0,324,325,1,0,0,0,325,326,1,0,
        0,0,326,424,5,136,0,0,327,328,5,13,0,0,328,424,5,35,0,0,329,330,
        5,13,0,0,330,331,5,36,0,0,331,333,5,37,0,0,332,334,5,149,0,0,333,
        332,1,0,0,0,333,334,1,0,0,0,334,335,1,0,0,0,335,336,3,108,54,0,336,
        338,5,38,0,0,337,339,5,149,0,0,338,337,1,0,0,0,338,339,1,0,0,0,339,
        340,1,0,0,0,340,341,3,108,54,0,341,424,1,0,0,0,342,343,5,14,0,0,
        343,344,5,143,0,0,344,345,5,143,0,0,345,424,3,108,54,0,346,348,5,
        15,0,0,347,346,1,0,0,0,348,351,1,0,0,0,349,350,1,0,0,0,349,347,1,
        0,0,0,350,352,1,0,0,0,351,349,1,0,0,0,352,424,5,2,0,0,353,354,5,
        16,0,0,354,355,5,143,0,0,355,424,5,136,0,0,356,357,5,17,0,0,357,
        358,5,143,0,0,358,424,5,136,0,0,359,361,5,18,0,0,360,362,5,149,0,
        0,361,360,1,0,0,0,361,362,1,0,0,0,362,363,1,0,0,0,363,424,5,136,
        0,0,364,424,5,19,0,0,365,367,5,20,0,0,366,368,5,149,0,0,367,366,
        1,0,0,0,367,368,1,0,0,0,368,369,1,0,0,0,369,424,5,136,0,0,370,371,
        5,21,0,0,371,372,5,170,0,0,372,424,5,169,0,0,373,374,5,22,0,0,374,
        375,3,30,15,0,375,376,5,2,0,0,376,424,1,0,0,0,377,378,5,23,0,0,378,
        380,5,25,0,0,379,381,5,149,0,0,380,379,1,0,0,0,380,381,1,0,0,0,381,
        382,1,0,0,0,382,424,3,108,54,0,383,387,5,24,0,0,384,386,5,143,0,
        0,385,384,1,0,0,0,386,389,1,0,0,0,387,388,1,0,0,0,387,385,1,0,0,
        0,388,390,1,0,0,0,389,387,1,0,0,0,390,424,5,2,0,0,391,424,5,26,0,
        0,392,393,5,27,0,0,393,394,5,143,0,0,394,424,3,108,54,0,395,396,
        5,28,0,0,396,397,5,143,0,0,397,424,3,108,54,0,398,399,5,29,0,0,399,
        400,5,143,0,0,400,424,3,108,54,0,401,402,5,30,0,0,402,403,5,143,
        0,0,403,424,3,108,54,0,404,405,5,31,0,0,405,406,5,143,0,0,406,424,
        3,108,54,0,407,408,5,32,0,0,408,409,5,143,0,0,409,424,3,108,54,0,
        410,414,5,33,0,0,411,413,5,143,0,0,412,411,1,0,0,0,413,416,1,0,0,
        0,414,415,1,0,0,0,414,412,1,0,0,0,415,417,1,0,0,0,416,414,1,0,0,
        0,417,424,5,2,0,0,418,420,5,34,0,0,419,421,5,149,0,0,420,419,1,0,
        0,0,420,421,1,0,0,0,421,422,1,0,0,0,422,424,3,108,54,0,423,294,1,
        0,0,0,423,299,1,0,0,0,423,300,1,0,0,0,423,301,1,0,0,0,423,304,1,
        0,0,0,423,307,1,0,0,0,423,310,1,0,0,0,423,315,1,0,0,0,423,320,1,
        0,0,0,423,322,1,0,0,0,423,327,1,0,0,0,423,329,1,0,0,0,423,342,1,
        0,0,0,423,349,1,0,0,0,423,353,1,0,0,0,423,356,1,0,0,0,423,359,1,
        0,0,0,423,364,1,0,0,0,423,365,1,0,0,0,423,370,1,0,0,0,423,373,1,
        0,0,0,423,377,1,0,0,0,423,383,1,0,0,0,423,391,1,0,0,0,423,392,1,
        0,0,0,423,395,1,0,0,0,423,398,1,0,0,0,423,401,1,0,0,0,423,404,1,
        0,0,0,423,407,1,0,0,0,423,410,1,0,0,0,423,418,1,0,0,0,424,27,1,0,
        0,0,425,426,5,5,0,0,426,427,3,96,48,0,427,428,3,96,48,0,428,430,
        3,104,52,0,429,431,3,104,52,0,430,429,1,0,0,0,430,431,1,0,0,0,431,
        433,1,0,0,0,432,434,3,104,52,0,433,432,1,0,0,0,433,434,1,0,0,0,434,
        438,1,0,0,0,435,437,3,32,16,0,436,435,1,0,0,0,437,440,1,0,0,0,438,
        436,1,0,0,0,438,439,1,0,0,0,439,458,1,0,0,0,440,438,1,0,0,0,441,
        443,5,131,0,0,442,444,5,5,0,0,443,442,1,0,0,0,443,444,1,0,0,0,444,
        445,1,0,0,0,445,446,3,96,48,0,446,448,3,96,48,0,447,449,3,104,52,
        0,448,447,1,0,0,0,448,449,1,0,0,0,449,451,1,0,0,0,450,452,3,104,
        52,0,451,450,1,0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,455,3,104,
        52,0,454,453,1,0,0,0,454,455,1,0,0,0,455,457,1,0,0,0,456,441,1,0,
        0,0,457,460,1,0,0,0,458,456,1,0,0,0,458,459,1,0,0,0,459,29,1,0,0,
        0,460,458,1,0,0,0,461,463,5,39,0,0,462,464,5,149,0,0,463,462,1,0,
        0,0,463,464,1,0,0,0,464,465,1,0,0,0,465,476,3,108,54,0,466,468,5,
        40,0,0,467,469,5,149,0,0,468,467,1,0,0,0,468,469,1,0,0,0,469,470,
        1,0,0,0,470,476,3,108,54,0,471,472,5,41,0,0,472,476,3,96,48,0,473,
        474,5,42,0,0,474,476,3,96,48,0,475,461,1,0,0,0,475,466,1,0,0,0,475,
        471,1,0,0,0,475,473,1,0,0,0,476,31,1,0,0,0,477,479,5,43,0,0,478,
        480,5,149,0,0,479,478,1,0,0,0,479,480,1,0,0,0,480,481,1,0,0,0,481,
        513,3,110,55,0,482,484,5,44,0,0,483,485,5,149,0,0,484,483,1,0,0,
        0,484,485,1,0,0,0,485,486,1,0,0,0,486,513,3,110,55,0,487,489,5,55,
        0,0,488,490,5,149,0,0,489,488,1,0,0,0,489,490,1,0,0,0,490,491,1,
        0,0,0,491,513,3,110,55,0,492,494,5,45,0,0,493,495,5,149,0,0,494,
        493,1,0,0,0,494,495,1,0,0,0,495,496,1,0,0,0,496,513,3,110,55,0,497,
        499,5,46,0,0,498,500,5,149,0,0,499,498,1,0,0,0,499,500,1,0,0,0,500,
        501,1,0,0,0,501,513,3,110,55,0,502,504,5,47,0,0,503,505,5,149,0,
        0,504,503,1,0,0,0,504,505,1,0,0,0,505,506,1,0,0,0,506,513,3,110,
        55,0,507,509,5,12,0,0,508,510,5,149,0,0,509,508,1,0,0,0,509,510,
        1,0,0,0,510,511,1,0,0,0,511,513,3,110,55,0,512,477,1,0,0,0,512,482,
        1,0,0,0,512,487,1,0,0,0,512,492,1,0,0,0,512,497,1,0,0,0,512,502,
        1,0,0,0,512,507,1,0,0,0,513,33,1,0,0,0,514,540,3,114,57,0,515,540,
        3,36,18,0,516,540,3,134,67,0,517,519,5,12,0,0,518,520,5,149,0,0,
        519,518,1,0,0,0,519,520,1,0,0,0,520,521,1,0,0,0,521,540,5,136,0,
        0,522,524,5,50,0,0,523,525,5,149,0,0,524,523,1,0,0,0,524,525,1,0,
        0,0,525,526,1,0,0,0,526,540,5,136,0,0,527,529,5,20,0,0,528,530,5,
        149,0,0,529,528,1,0,0,0,529,530,1,0,0,0,530,531,1,0,0,0,531,540,
        5,136,0,0,532,540,5,26,0,0,533,535,5,28,0,0,534,536,5,149,0,0,535,
        534,1,0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,540,3,108,54,0,538,
        540,5,51,0,0,539,514,1,0,0,0,539,515,1,0,0,0,539,516,1,0,0,0,539,
        517,1,0,0,0,539,522,1,0,0,0,539,527,1,0,0,0,539,532,1,0,0,0,539,
        533,1,0,0,0,539,538,1,0,0,0,540,35,1,0,0,0,541,542,5,5,0,0,542,543,
        3,96,48,0,543,544,3,96,48,0,544,545,3,96,48,0,545,546,3,96,48,0,
        546,547,3,104,52,0,547,548,3,104,52,0,548,549,3,104,52,0,549,550,
        5,136,0,0,550,37,1,0,0,0,551,563,3,114,57,0,552,556,5,53,0,0,553,
        555,3,40,20,0,554,553,1,0,0,0,555,558,1,0,0,0,556,554,1,0,0,0,556,
        557,1,0,0,0,557,559,1,0,0,0,558,556,1,0,0,0,559,563,5,2,0,0,560,
        563,5,35,0,0,561,563,5,51,0,0,562,551,1,0,0,0,562,552,1,0,0,0,562,
        560,1,0,0,0,562,561,1,0,0,0,563,39,1,0,0,0,564,566,5,54,0,0,565,
        567,5,149,0,0,566,565,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,
        575,3,96,48,0,569,571,5,55,0,0,570,572,5,149,0,0,571,570,1,0,0,0,
        571,572,1,0,0,0,572,573,1,0,0,0,573,575,3,108,54,0,574,564,1,0,0,
        0,574,569,1,0,0,0,575,41,1,0,0,0,576,617,3,114,57,0,577,579,5,57,
        0,0,578,580,5,149,0,0,579,578,1,0,0,0,579,580,1,0,0,0,580,581,1,
        0,0,0,581,617,5,136,0,0,582,584,5,58,0,0,583,585,5,149,0,0,584,583,
        1,0,0,0,584,585,1,0,0,0,585,586,1,0,0,0,586,612,5,146,0,0,587,589,
        3,108,54,0,588,590,5,134,0,0,589,588,1,0,0,0,589,590,1,0,0,0,590,
        591,1,0,0,0,591,593,3,108,54,0,592,594,5,134,0,0,593,592,1,0,0,0,
        593,594,1,0,0,0,594,595,1,0,0,0,595,596,3,108,54,0,596,613,1,0,0,
        0,597,599,5,129,0,0,598,600,5,149,0,0,599,598,1,0,0,0,599,600,1,
        0,0,0,600,601,1,0,0,0,601,603,3,96,48,0,602,604,5,134,0,0,603,602,
        1,0,0,0,603,604,1,0,0,0,604,610,1,0,0,0,605,607,5,130,0,0,606,608,
        5,149,0,0,607,606,1,0,0,0,607,608,1,0,0,0,608,609,1,0,0,0,609,611,
        3,96,48,0,610,605,1,0,0,0,610,611,1,0,0,0,611,613,1,0,0,0,612,587,
        1,0,0,0,612,597,1,0,0,0,613,614,1,0,0,0,614,615,5,147,0,0,615,617,
        1,0,0,0,616,576,1,0,0,0,616,577,1,0,0,0,616,582,1,0,0,0,617,43,1,
        0,0,0,618,619,5,5,0,0,619,620,3,96,48,0,620,621,3,104,52,0,621,622,
        3,104,52,0,622,623,3,104,52,0,623,45,1,0,0,0,624,656,3,48,24,0,625,
        656,3,136,68,0,626,628,5,10,0,0,627,629,5,149,0,0,628,627,1,0,0,
        0,628,629,1,0,0,0,629,630,1,0,0,0,630,656,5,143,0,0,631,632,5,60,
        0,0,632,633,3,108,54,0,633,634,3,108,54,0,634,635,3,108,54,0,635,
        656,1,0,0,0,636,638,5,61,0,0,637,639,5,149,0,0,638,637,1,0,0,0,638,
        639,1,0,0,0,639,640,1,0,0,0,640,656,3,108,54,0,641,643,5,18,0,0,
        642,644,5,149,0,0,643,642,1,0,0,0,643,644,1,0,0,0,644,645,1,0,0,
        0,645,656,5,136,0,0,646,648,5,21,0,0,647,649,5,168,0,0,648,647,1,
        0,0,0,648,649,1,0,0,0,649,650,1,0,0,0,650,656,5,169,0,0,651,652,
        5,23,0,0,652,653,5,25,0,0,653,656,3,108,54,0,654,656,5,26,0,0,655,
        624,1,0,0,0,655,625,1,0,0,0,655,626,1,0,0,0,655,631,1,0,0,0,655,
        636,1,0,0,0,655,641,1,0,0,0,655,646,1,0,0,0,655,651,1,0,0,0,655,
        654,1,0,0,0,656,47,1,0,0,0,657,658,5,5,0,0,658,659,3,96,48,0,659,
        660,3,96,48,0,660,661,3,96,48,0,661,662,3,96,48,0,662,663,3,96,48,
        0,663,664,3,96,48,0,664,666,3,104,52,0,665,667,3,104,52,0,666,665,
        1,0,0,0,666,667,1,0,0,0,667,669,1,0,0,0,668,670,3,104,52,0,669,668,
        1,0,0,0,669,670,1,0,0,0,670,49,1,0,0,0,671,722,3,52,26,0,672,722,
        3,138,69,0,673,675,5,10,0,0,674,676,5,149,0,0,675,674,1,0,0,0,675,
        676,1,0,0,0,676,677,1,0,0,0,677,722,5,143,0,0,678,679,5,60,0,0,679,
        680,3,108,54,0,680,681,3,108,54,0,681,682,3,108,54,0,682,683,3,108,
        54,0,683,722,1,0,0,0,684,686,5,12,0,0,685,687,5,149,0,0,686,685,
        1,0,0,0,686,687,1,0,0,0,687,688,1,0,0,0,688,722,5,136,0,0,689,690,
        5,61,0,0,690,692,3,108,54,0,691,693,3,108,54,0,692,691,1,0,0,0,692,
        693,1,0,0,0,693,722,1,0,0,0,694,696,5,18,0,0,695,697,5,149,0,0,696,
        695,1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,722,5,136,0,0,699,
        701,5,20,0,0,700,702,5,149,0,0,701,700,1,0,0,0,701,702,1,0,0,0,702,
        703,1,0,0,0,703,722,5,136,0,0,704,706,5,21,0,0,705,707,5,168,0,0,
        706,705,1,0,0,0,706,707,1,0,0,0,707,708,1,0,0,0,708,722,5,169,0,
        0,709,710,5,23,0,0,710,711,5,25,0,0,711,718,3,108,54,0,712,719,5,
        89,0,0,713,715,5,10,0,0,714,716,5,149,0,0,715,714,1,0,0,0,715,716,
        1,0,0,0,716,717,1,0,0,0,717,719,5,143,0,0,718,712,1,0,0,0,718,713,
        1,0,0,0,719,722,1,0,0,0,720,722,5,26,0,0,721,671,1,0,0,0,721,672,
        1,0,0,0,721,673,1,0,0,0,721,678,1,0,0,0,721,684,1,0,0,0,721,689,
        1,0,0,0,721,694,1,0,0,0,721,699,1,0,0,0,721,704,1,0,0,0,721,709,
        1,0,0,0,721,720,1,0,0,0,722,51,1,0,0,0,723,724,5,5,0,0,724,725,3,
        96,48,0,725,726,3,96,48,0,726,727,3,96,48,0,727,733,3,96,48,0,728,
        729,3,96,48,0,729,730,3,96,48,0,730,731,3,96,48,0,731,732,3,96,48,
        0,732,734,1,0,0,0,733,728,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,
        0,735,736,3,104,52,0,736,740,3,104,52,0,737,738,3,104,52,0,738,739,
        3,104,52,0,739,741,1,0,0,0,740,737,1,0,0,0,740,741,1,0,0,0,741,53,
        1,0,0,0,742,788,3,56,28,0,743,788,3,140,70,0,744,746,5,10,0,0,745,
        747,5,149,0,0,746,745,1,0,0,0,746,747,1,0,0,0,747,748,1,0,0,0,748,
        788,5,143,0,0,749,750,5,64,0,0,750,751,5,136,0,0,751,752,5,136,0,
        0,752,753,3,108,54,0,753,754,3,108,54,0,754,755,3,108,54,0,755,788,
        1,0,0,0,756,758,5,61,0,0,757,759,5,149,0,0,758,757,1,0,0,0,758,759,
        1,0,0,0,759,760,1,0,0,0,760,788,3,108,54,0,761,763,5,18,0,0,762,
        764,5,149,0,0,763,762,1,0,0,0,763,764,1,0,0,0,764,765,1,0,0,0,765,
        788,5,136,0,0,766,768,5,65,0,0,767,769,5,149,0,0,768,767,1,0,0,0,
        768,769,1,0,0,0,769,770,1,0,0,0,770,788,3,108,54,0,771,773,5,66,
        0,0,772,774,5,149,0,0,773,772,1,0,0,0,773,774,1,0,0,0,774,775,1,
        0,0,0,775,788,3,108,54,0,776,778,5,21,0,0,777,779,5,168,0,0,778,
        777,1,0,0,0,778,779,1,0,0,0,779,780,1,0,0,0,780,788,5,169,0,0,781,
        782,5,23,0,0,782,783,5,25,0,0,783,788,3,108,54,0,784,788,3,58,29,
        0,785,788,5,26,0,0,786,788,5,68,0,0,787,742,1,0,0,0,787,743,1,0,
        0,0,787,744,1,0,0,0,787,749,1,0,0,0,787,756,1,0,0,0,787,761,1,0,
        0,0,787,766,1,0,0,0,787,771,1,0,0,0,787,776,1,0,0,0,787,781,1,0,
        0,0,787,784,1,0,0,0,787,785,1,0,0,0,787,786,1,0,0,0,788,55,1,0,0,
        0,789,790,5,5,0,0,790,791,3,96,48,0,791,792,3,96,48,0,792,793,3,
        96,48,0,793,794,3,96,48,0,794,795,3,96,48,0,795,796,3,104,52,0,796,
        797,3,104,52,0,797,57,1,0,0,0,798,799,5,67,0,0,799,800,3,96,48,0,
        800,801,3,104,52,0,801,802,3,104,52,0,802,59,1,0,0,0,803,844,3,62,
        31,0,804,844,3,64,32,0,805,844,3,66,33,0,806,844,3,68,34,0,807,844,
        3,70,35,0,808,844,3,72,36,0,809,844,3,74,37,0,810,844,3,76,38,0,
        811,844,3,78,39,0,812,814,5,10,0,0,813,815,5,149,0,0,814,813,1,0,
        0,0,814,815,1,0,0,0,815,816,1,0,0,0,816,844,5,143,0,0,817,819,5,
        77,0,0,818,820,5,149,0,0,819,818,1,0,0,0,819,820,1,0,0,0,820,821,
        1,0,0,0,821,844,3,108,54,0,822,823,5,61,0,0,823,825,3,108,54,0,824,
        826,3,108,54,0,825,824,1,0,0,0,825,826,1,0,0,0,826,844,1,0,0,0,827,
        828,5,21,0,0,828,844,5,169,0,0,829,830,5,23,0,0,830,831,5,25,0,0,
        831,838,3,108,54,0,832,839,5,89,0,0,833,835,5,10,0,0,834,836,5,149,
        0,0,835,834,1,0,0,0,835,836,1,0,0,0,836,837,1,0,0,0,837,839,5,143,
        0,0,838,832,1,0,0,0,838,833,1,0,0,0,839,840,1,0,0,0,840,841,5,143,
        0,0,841,844,1,0,0,0,842,844,5,26,0,0,843,803,1,0,0,0,843,804,1,0,
        0,0,843,805,1,0,0,0,843,806,1,0,0,0,843,807,1,0,0,0,843,808,1,0,
        0,0,843,809,1,0,0,0,843,810,1,0,0,0,843,811,1,0,0,0,843,812,1,0,
        0,0,843,817,1,0,0,0,843,822,1,0,0,0,843,827,1,0,0,0,843,829,1,0,
        0,0,843,842,1,0,0,0,844,61,1,0,0,0,845,846,5,70,0,0,846,848,3,96,
        48,0,847,849,3,96,48,0,848,847,1,0,0,0,848,849,1,0,0,0,849,850,1,
        0,0,0,850,852,3,104,52,0,851,853,3,104,52,0,852,851,1,0,0,0,852,
        853,1,0,0,0,853,63,1,0,0,0,854,855,5,67,0,0,855,856,3,96,48,0,856,
        857,3,104,52,0,857,65,1,0,0,0,858,859,5,71,0,0,859,860,3,96,48,0,
        860,861,3,96,48,0,861,862,3,96,48,0,862,864,5,143,0,0,863,865,5,
        137,0,0,864,863,1,0,0,0,864,865,1,0,0,0,865,866,1,0,0,0,866,867,
        5,143,0,0,867,67,1,0,0,0,868,869,5,72,0,0,869,870,3,96,48,0,870,
        69,1,0,0,0,871,872,5,63,0,0,872,873,3,96,48,0,873,71,1,0,0,0,874,
        875,5,73,0,0,875,876,3,96,48,0,876,73,1,0,0,0,877,878,5,74,0,0,878,
        879,3,96,48,0,879,75,1,0,0,0,880,881,5,75,0,0,881,882,5,143,0,0,
        882,883,3,96,48,0,883,884,3,96,48,0,884,885,3,96,48,0,885,886,3,
        96,48,0,886,888,3,96,48,0,887,889,3,96,48,0,888,887,1,0,0,0,888,
        889,1,0,0,0,889,77,1,0,0,0,890,891,5,76,0,0,891,892,3,96,48,0,892,
        79,1,0,0,0,893,977,3,82,41,0,894,896,5,10,0,0,895,897,5,149,0,0,
        896,895,1,0,0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,977,5,143,0,
        0,899,977,5,79,0,0,900,901,5,64,0,0,901,903,5,136,0,0,902,904,5,
        136,0,0,903,902,1,0,0,0,903,904,1,0,0,0,904,906,1,0,0,0,905,907,
        5,136,0,0,906,905,1,0,0,0,906,907,1,0,0,0,907,909,1,0,0,0,908,910,
        5,136,0,0,909,908,1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,0,911,977,
        3,108,54,0,912,914,5,77,0,0,913,915,5,149,0,0,914,913,1,0,0,0,914,
        915,1,0,0,0,915,916,1,0,0,0,916,977,3,108,54,0,917,919,5,61,0,0,
        918,920,5,149,0,0,919,918,1,0,0,0,919,920,1,0,0,0,920,921,1,0,0,
        0,921,977,3,108,54,0,922,924,5,18,0,0,923,925,5,149,0,0,924,923,
        1,0,0,0,924,925,1,0,0,0,925,926,1,0,0,0,926,977,5,136,0,0,927,928,
        5,80,0,0,928,929,5,136,0,0,929,930,5,136,0,0,930,934,5,136,0,0,931,
        932,5,136,0,0,932,933,5,136,0,0,933,935,5,136,0,0,934,931,1,0,0,
        0,934,935,1,0,0,0,935,939,1,0,0,0,936,937,5,136,0,0,937,938,5,136,
        0,0,938,940,5,136,0,0,939,936,1,0,0,0,939,940,1,0,0,0,940,944,1,
        0,0,0,941,942,5,136,0,0,942,943,5,136,0,0,943,945,5,136,0,0,944,
        941,1,0,0,0,944,945,1,0,0,0,945,977,1,0,0,0,946,948,5,21,0,0,947,
        949,5,168,0,0,948,947,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,0,950,
        977,5,169,0,0,951,952,5,23,0,0,952,953,5,25,0,0,953,960,3,108,54,
        0,954,961,5,89,0,0,955,957,5,10,0,0,956,958,5,149,0,0,957,956,1,
        0,0,0,957,958,1,0,0,0,958,959,1,0,0,0,959,961,5,143,0,0,960,954,
        1,0,0,0,960,955,1,0,0,0,961,977,1,0,0,0,962,977,5,26,0,0,963,964,
        5,81,0,0,964,965,5,82,0,0,965,967,5,136,0,0,966,968,5,136,0,0,967,
        966,1,0,0,0,967,968,1,0,0,0,968,970,1,0,0,0,969,971,5,136,0,0,970,
        969,1,0,0,0,970,971,1,0,0,0,971,973,1,0,0,0,972,974,5,136,0,0,973,
        972,1,0,0,0,973,974,1,0,0,0,974,977,1,0,0,0,975,977,5,68,0,0,976,
        893,1,0,0,0,976,894,1,0,0,0,976,899,1,0,0,0,976,900,1,0,0,0,976,
        912,1,0,0,0,976,917,1,0,0,0,976,922,1,0,0,0,976,927,1,0,0,0,976,
        946,1,0,0,0,976,951,1,0,0,0,976,962,1,0,0,0,976,963,1,0,0,0,976,
        975,1,0,0,0,977,81,1,0,0,0,978,979,5,5,0,0,979,980,3,96,48,0,980,
        981,3,96,48,0,981,982,3,96,48,0,982,988,3,96,48,0,983,984,3,96,48,
        0,984,985,3,96,48,0,985,986,3,96,48,0,986,987,3,96,48,0,987,989,
        1,0,0,0,988,983,1,0,0,0,988,989,1,0,0,0,989,995,1,0,0,0,990,991,
        3,96,48,0,991,992,3,96,48,0,992,993,3,96,48,0,993,994,3,96,48,0,
        994,996,1,0,0,0,995,990,1,0,0,0,995,996,1,0,0,0,996,1002,1,0,0,0,
        997,998,3,96,48,0,998,999,3,96,48,0,999,1000,3,96,48,0,1000,1001,
        3,96,48,0,1001,1003,1,0,0,0,1002,997,1,0,0,0,1002,1003,1,0,0,0,1003,
        83,1,0,0,0,1004,1037,3,86,43,0,1005,1007,5,10,0,0,1006,1008,5,149,
        0,0,1007,1006,1,0,0,0,1007,1008,1,0,0,0,1008,1009,1,0,0,0,1009,1037,
        5,143,0,0,1010,1011,5,60,0,0,1011,1012,3,108,54,0,1012,1013,3,108,
        54,0,1013,1014,3,108,54,0,1014,1015,3,108,54,0,1015,1016,3,108,54,
        0,1016,1037,1,0,0,0,1017,1019,5,61,0,0,1018,1020,5,149,0,0,1019,
        1018,1,0,0,0,1019,1020,1,0,0,0,1020,1021,1,0,0,0,1021,1037,3,108,
        54,0,1022,1024,5,18,0,0,1023,1025,5,149,0,0,1024,1023,1,0,0,0,1024,
        1025,1,0,0,0,1025,1026,1,0,0,0,1026,1037,5,136,0,0,1027,1029,5,21,
        0,0,1028,1030,5,168,0,0,1029,1028,1,0,0,0,1029,1030,1,0,0,0,1030,
        1031,1,0,0,0,1031,1037,5,169,0,0,1032,1033,5,23,0,0,1033,1034,5,
        25,0,0,1034,1037,3,108,54,0,1035,1037,5,26,0,0,1036,1004,1,0,0,0,
        1036,1005,1,0,0,0,1036,1010,1,0,0,0,1036,1017,1,0,0,0,1036,1022,
        1,0,0,0,1036,1027,1,0,0,0,1036,1032,1,0,0,0,1036,1035,1,0,0,0,1037,
        85,1,0,0,0,1038,1039,5,5,0,0,1039,1040,3,96,48,0,1040,1041,3,96,
        48,0,1041,1042,3,96,48,0,1042,1043,3,96,48,0,1043,1044,3,96,48,0,
        1044,1045,3,96,48,0,1045,1047,3,104,52,0,1046,1048,3,104,52,0,1047,
        1046,1,0,0,0,1047,1048,1,0,0,0,1048,87,1,0,0,0,1049,1084,3,90,45,
        0,1050,1052,5,10,0,0,1051,1053,5,149,0,0,1052,1051,1,0,0,0,1052,
        1053,1,0,0,0,1053,1054,1,0,0,0,1054,1084,5,143,0,0,1055,1056,5,60,
        0,0,1056,1057,3,108,54,0,1057,1058,3,108,54,0,1058,1059,3,108,54,
        0,1059,1060,3,108,54,0,1060,1061,3,108,54,0,1061,1062,3,108,54,0,
        1062,1063,3,108,54,0,1063,1084,1,0,0,0,1064,1066,5,61,0,0,1065,1067,
        5,149,0,0,1066,1065,1,0,0,0,1066,1067,1,0,0,0,1067,1068,1,0,0,0,
        1068,1084,3,108,54,0,1069,1071,5,18,0,0,1070,1072,5,149,0,0,1071,
        1070,1,0,0,0,1071,1072,1,0,0,0,1072,1073,1,0,0,0,1073,1084,5,136,
        0,0,1074,1076,5,21,0,0,1075,1077,5,168,0,0,1076,1075,1,0,0,0,1076,
        1077,1,0,0,0,1077,1078,1,0,0,0,1078,1084,5,169,0,0,1079,1080,5,23,
        0,0,1080,1081,5,25,0,0,1081,1084,3,108,54,0,1082,1084,5,26,0,0,1083,
        1049,1,0,0,0,1083,1050,1,0,0,0,1083,1055,1,0,0,0,1083,1064,1,0,0,
        0,1083,1069,1,0,0,0,1083,1074,1,0,0,0,1083,1079,1,0,0,0,1083,1082,
        1,0,0,0,1084,89,1,0,0,0,1085,1086,5,5,0,0,1086,1087,3,96,48,0,1087,
        1088,3,96,48,0,1088,1089,3,96,48,0,1089,1090,3,96,48,0,1090,1091,
        3,96,48,0,1091,1092,3,96,48,0,1092,1093,3,96,48,0,1093,1094,3,96,
        48,0,1094,1095,3,104,52,0,1095,1096,3,104,52,0,1096,91,1,0,0,0,1097,
        1150,3,94,47,0,1098,1100,5,10,0,0,1099,1101,5,149,0,0,1100,1099,
        1,0,0,0,1100,1101,1,0,0,0,1101,1102,1,0,0,0,1102,1150,5,143,0,0,
        1103,1105,5,86,0,0,1104,1106,5,149,0,0,1105,1104,1,0,0,0,1105,1106,
        1,0,0,0,1106,1107,1,0,0,0,1107,1150,5,143,0,0,1108,1109,5,64,0,0,
        1109,1110,5,136,0,0,1110,1111,5,136,0,0,1111,1150,3,108,54,0,1112,
        1114,5,77,0,0,1113,1115,5,149,0,0,1114,1113,1,0,0,0,1114,1115,1,
        0,0,0,1115,1116,1,0,0,0,1116,1150,3,108,54,0,1117,1119,5,61,0,0,
        1118,1120,5,149,0,0,1119,1118,1,0,0,0,1119,1120,1,0,0,0,1120,1121,
        1,0,0,0,1121,1150,3,108,54,0,1122,1124,5,18,0,0,1123,1125,5,149,
        0,0,1124,1123,1,0,0,0,1124,1125,1,0,0,0,1125,1126,1,0,0,0,1126,1150,
        5,136,0,0,1127,1129,5,21,0,0,1128,1130,5,168,0,0,1129,1128,1,0,0,
        0,1129,1130,1,0,0,0,1130,1131,1,0,0,0,1131,1150,5,169,0,0,1132,1133,
        5,23,0,0,1133,1134,5,25,0,0,1134,1141,3,108,54,0,1135,1142,5,89,
        0,0,1136,1138,5,10,0,0,1137,1139,5,149,0,0,1138,1137,1,0,0,0,1138,
        1139,1,0,0,0,1139,1140,1,0,0,0,1140,1142,5,143,0,0,1141,1135,1,0,
        0,0,1141,1136,1,0,0,0,1142,1150,1,0,0,0,1143,1150,5,26,0,0,1144,
        1145,5,81,0,0,1145,1146,5,87,0,0,1146,1147,5,136,0,0,1147,1150,5,
        136,0,0,1148,1150,5,68,0,0,1149,1097,1,0,0,0,1149,1098,1,0,0,0,1149,
        1103,1,0,0,0,1149,1108,1,0,0,0,1149,1112,1,0,0,0,1149,1117,1,0,0,
        0,1149,1122,1,0,0,0,1149,1127,1,0,0,0,1149,1132,1,0,0,0,1149,1143,
        1,0,0,0,1149,1144,1,0,0,0,1149,1148,1,0,0,0,1150,93,1,0,0,0,1151,
        1152,5,5,0,0,1152,1153,3,96,48,0,1153,1154,3,96,48,0,1154,1155,3,
        96,48,0,1155,1156,3,96,48,0,1156,1157,3,96,48,0,1157,1158,3,96,48,
        0,1158,1159,3,96,48,0,1159,1160,3,96,48,0,1160,1161,3,96,48,0,1161,
        1162,3,96,48,0,1162,1164,3,96,48,0,1163,1165,3,96,48,0,1164,1163,
        1,0,0,0,1164,1165,1,0,0,0,1165,95,1,0,0,0,1166,1167,5,146,0,0,1167,
        1168,3,98,49,0,1168,1169,5,147,0,0,1169,97,1,0,0,0,1170,1175,3,100,
        50,0,1171,1172,5,131,0,0,1172,1174,3,100,50,0,1173,1171,1,0,0,0,
        1174,1177,1,0,0,0,1175,1173,1,0,0,0,1175,1176,1,0,0,0,1176,99,1,
        0,0,0,1177,1175,1,0,0,0,1178,1183,3,102,51,0,1179,1180,5,132,0,0,
        1180,1182,3,102,51,0,1181,1179,1,0,0,0,1182,1185,1,0,0,0,1183,1181,
        1,0,0,0,1183,1184,1,0,0,0,1184,101,1,0,0,0,1185,1183,1,0,0,0,1186,
        1187,6,51,-1,0,1187,1188,5,146,0,0,1188,1189,3,98,49,0,1189,1190,
        5,147,0,0,1190,1341,1,0,0,0,1191,1341,5,89,0,0,1192,1193,5,91,0,
        0,1193,1194,7,0,0,0,1194,1195,7,1,0,0,1195,1341,7,0,0,0,1196,1198,
        5,92,0,0,1197,1199,5,161,0,0,1198,1197,1,0,0,0,1198,1199,1,0,0,0,
        1199,1200,1,0,0,0,1200,1201,5,162,0,0,1201,1202,5,163,0,0,1202,1341,
        3,106,53,0,1203,1204,5,93,0,0,1204,1341,3,102,51,30,1205,1206,5,
        94,0,0,1206,1341,3,102,51,29,1207,1208,5,95,0,0,1208,1341,3,102,
        51,28,1209,1217,5,96,0,0,1210,1218,5,144,0,0,1211,1214,5,143,0,0,
        1212,1213,5,148,0,0,1213,1215,5,143,0,0,1214,1212,1,0,0,0,1214,1215,
        1,0,0,0,1215,1218,1,0,0,0,1216,1218,5,155,0,0,1217,1210,1,0,0,0,
        1217,1211,1,0,0,0,1217,1216,1,0,0,0,1218,1341,1,0,0,0,1219,1220,
        5,97,0,0,1220,1221,3,106,53,0,1221,1222,3,106,53,0,1222,1223,3,106,
        53,0,1223,1224,3,106,53,0,1224,1225,3,106,53,0,1225,1226,3,106,53,
        0,1226,1341,1,0,0,0,1227,1341,5,98,0,0,1228,1229,5,99,0,0,1229,1341,
        5,136,0,0,1230,1341,5,100,0,0,1231,1244,5,101,0,0,1232,1245,5,144,
        0,0,1233,1236,5,143,0,0,1234,1235,5,148,0,0,1235,1237,5,143,0,0,
        1236,1234,1,0,0,0,1236,1237,1,0,0,0,1237,1245,1,0,0,0,1238,1241,
        5,139,0,0,1239,1240,5,148,0,0,1240,1242,5,139,0,0,1241,1239,1,0,
        0,0,1241,1242,1,0,0,0,1242,1245,1,0,0,0,1243,1245,5,155,0,0,1244,
        1232,1,0,0,0,1244,1233,1,0,0,0,1244,1238,1,0,0,0,1244,1243,1,0,0,
        0,1245,1341,1,0,0,0,1246,1341,5,102,0,0,1247,1248,5,133,0,0,1248,
        1341,3,102,51,20,1249,1250,5,103,0,0,1250,1251,5,146,0,0,1251,1253,
        3,106,53,0,1252,1254,5,134,0,0,1253,1252,1,0,0,0,1253,1254,1,0,0,
        0,1254,1255,1,0,0,0,1255,1257,3,106,53,0,1256,1258,5,134,0,0,1257,
        1256,1,0,0,0,1257,1258,1,0,0,0,1258,1259,1,0,0,0,1259,1260,3,106,
        53,0,1260,1261,5,147,0,0,1261,1262,5,104,0,0,1262,1263,3,106,53,
        0,1263,1341,1,0,0,0,1264,1265,5,103,0,0,1265,1266,5,146,0,0,1266,
        1268,5,129,0,0,1267,1269,5,149,0,0,1268,1267,1,0,0,0,1268,1269,1,
        0,0,0,1269,1270,1,0,0,0,1270,1272,3,96,48,0,1271,1273,5,134,0,0,
        1272,1271,1,0,0,0,1272,1273,1,0,0,0,1273,1279,1,0,0,0,1274,1276,
        5,130,0,0,1275,1277,5,149,0,0,1276,1275,1,0,0,0,1276,1277,1,0,0,
        0,1277,1278,1,0,0,0,1278,1280,3,96,48,0,1279,1274,1,0,0,0,1279,1280,
        1,0,0,0,1280,1281,1,0,0,0,1281,1282,5,147,0,0,1282,1283,5,104,0,
        0,1283,1284,3,106,53,0,1284,1341,1,0,0,0,1285,1341,5,105,0,0,1286,
        1341,5,106,0,0,1287,1295,5,107,0,0,1288,1296,5,145,0,0,1289,1292,
        5,136,0,0,1290,1291,5,148,0,0,1291,1293,5,136,0,0,1292,1290,1,0,
        0,0,1292,1293,1,0,0,0,1293,1296,1,0,0,0,1294,1296,5,155,0,0,1295,
        1288,1,0,0,0,1295,1289,1,0,0,0,1295,1294,1,0,0,0,1296,1341,1,0,0,
        0,1297,1305,5,108,0,0,1298,1306,5,144,0,0,1299,1302,5,143,0,0,1300,
        1301,5,148,0,0,1301,1303,5,143,0,0,1302,1300,1,0,0,0,1302,1303,1,
        0,0,0,1303,1306,1,0,0,0,1304,1306,5,155,0,0,1305,1298,1,0,0,0,1305,
        1299,1,0,0,0,1305,1304,1,0,0,0,1306,1341,1,0,0,0,1307,1320,5,110,
        0,0,1308,1321,5,144,0,0,1309,1312,5,143,0,0,1310,1311,5,148,0,0,
        1311,1313,5,143,0,0,1312,1310,1,0,0,0,1312,1313,1,0,0,0,1313,1321,
        1,0,0,0,1314,1317,5,139,0,0,1315,1316,5,148,0,0,1316,1318,5,139,
        0,0,1317,1315,1,0,0,0,1317,1318,1,0,0,0,1318,1321,1,0,0,0,1319,1321,
        5,155,0,0,1320,1308,1,0,0,0,1320,1309,1,0,0,0,1320,1314,1,0,0,0,
        1320,1319,1,0,0,0,1321,1341,1,0,0,0,1322,1323,5,111,0,0,1323,1324,
        3,106,53,0,1324,1325,3,106,53,0,1325,1326,3,106,53,0,1326,1327,3,
        106,53,0,1327,1328,3,106,53,0,1328,1329,3,106,53,0,1329,1341,1,0,
        0,0,1330,1341,5,112,0,0,1331,1341,5,113,0,0,1332,1341,5,114,0,0,
        1333,1341,5,115,0,0,1334,1341,5,116,0,0,1335,1341,5,117,0,0,1336,
        1341,5,118,0,0,1337,1341,5,119,0,0,1338,1341,5,120,0,0,1339,1341,
        5,121,0,0,1340,1186,1,0,0,0,1340,1191,1,0,0,0,1340,1192,1,0,0,0,
        1340,1196,1,0,0,0,1340,1203,1,0,0,0,1340,1205,1,0,0,0,1340,1207,
        1,0,0,0,1340,1209,1,0,0,0,1340,1219,1,0,0,0,1340,1227,1,0,0,0,1340,
        1228,1,0,0,0,1340,1230,1,0,0,0,1340,1231,1,0,0,0,1340,1246,1,0,0,
        0,1340,1247,1,0,0,0,1340,1249,1,0,0,0,1340,1264,1,0,0,0,1340,1285,
        1,0,0,0,1340,1286,1,0,0,0,1340,1287,1,0,0,0,1340,1297,1,0,0,0,1340,
        1307,1,0,0,0,1340,1322,1,0,0,0,1340,1330,1,0,0,0,1340,1331,1,0,0,
        0,1340,1332,1,0,0,0,1340,1333,1,0,0,0,1340,1334,1,0,0,0,1340,1335,
        1,0,0,0,1340,1336,1,0,0,0,1340,1337,1,0,0,0,1340,1338,1,0,0,0,1340,
        1339,1,0,0,0,1341,1350,1,0,0,0,1342,1343,10,33,0,0,1343,1344,5,90,
        0,0,1344,1349,3,106,53,0,1345,1346,10,13,0,0,1346,1347,5,109,0,0,
        1347,1349,3,106,53,0,1348,1342,1,0,0,0,1348,1345,1,0,0,0,1349,1352,
        1,0,0,0,1350,1348,1,0,0,0,1350,1351,1,0,0,0,1351,103,1,0,0,0,1352,
        1350,1,0,0,0,1353,1354,7,2,0,0,1354,105,1,0,0,0,1355,1356,7,3,0,
        0,1356,107,1,0,0,0,1357,1358,7,2,0,0,1358,109,1,0,0,0,1359,1360,
        7,3,0,0,1360,111,1,0,0,0,1361,1372,5,88,0,0,1362,1370,5,174,0,0,
        1363,1365,5,177,0,0,1364,1363,1,0,0,0,1365,1368,1,0,0,0,1366,1364,
        1,0,0,0,1366,1367,1,0,0,0,1367,1371,1,0,0,0,1368,1366,1,0,0,0,1369,
        1371,5,178,0,0,1370,1366,1,0,0,0,1370,1369,1,0,0,0,1371,1373,1,0,
        0,0,1372,1362,1,0,0,0,1372,1373,1,0,0,0,1373,1374,1,0,0,0,1374,1378,
        5,175,0,0,1375,1377,5,177,0,0,1376,1375,1,0,0,0,1377,1380,1,0,0,
        0,1378,1376,1,0,0,0,1378,1379,1,0,0,0,1379,1381,1,0,0,0,1380,1378,
        1,0,0,0,1381,1382,5,176,0,0,1382,113,1,0,0,0,1383,1384,5,122,0,0,
        1384,1385,3,116,58,0,1385,1386,3,96,48,0,1386,115,1,0,0,0,1387,1388,
        7,4,0,0,1388,1389,3,118,59,0,1389,1390,5,180,0,0,1390,1394,1,0,0,
        0,1391,1392,5,125,0,0,1392,1394,3,126,63,0,1393,1387,1,0,0,0,1393,
        1391,1,0,0,0,1394,117,1,0,0,0,1395,1398,5,190,0,0,1396,1397,5,181,
        0,0,1397,1399,3,120,60,0,1398,1396,1,0,0,0,1398,1399,1,0,0,0,1399,
        119,1,0,0,0,1400,1403,3,122,61,0,1401,1402,7,5,0,0,1402,1404,3,120,
        60,0,1403,1401,1,0,0,0,1403,1404,1,0,0,0,1404,121,1,0,0,0,1405,1413,
        5,190,0,0,1406,1413,3,124,62,0,1407,1413,5,188,0,0,1408,1413,5,189,
        0,0,1409,1413,5,214,0,0,1410,1413,5,213,0,0,1411,1413,5,215,0,0,
        1412,1405,1,0,0,0,1412,1406,1,0,0,0,1412,1407,1,0,0,0,1412,1408,
        1,0,0,0,1412,1409,1,0,0,0,1412,1410,1,0,0,0,1412,1411,1,0,0,0,1413,
        123,1,0,0,0,1414,1415,5,191,0,0,1415,1416,5,217,0,0,1416,1417,3,
        122,61,0,1417,1418,5,180,0,0,1418,1534,1,0,0,0,1419,1420,5,192,0,
        0,1420,1421,5,217,0,0,1421,1422,3,122,61,0,1422,1423,5,180,0,0,1423,
        1534,1,0,0,0,1424,1425,5,194,0,0,1425,1426,5,217,0,0,1426,1427,3,
        122,61,0,1427,1428,5,180,0,0,1428,1534,1,0,0,0,1429,1430,5,195,0,
        0,1430,1431,5,217,0,0,1431,1432,3,122,61,0,1432,1433,5,180,0,0,1433,
        1534,1,0,0,0,1434,1435,5,196,0,0,1435,1436,5,217,0,0,1436,1437,3,
        122,61,0,1437,1438,5,180,0,0,1438,1534,1,0,0,0,1439,1440,5,197,0,
        0,1440,1441,5,217,0,0,1441,1442,3,122,61,0,1442,1443,5,180,0,0,1443,
        1534,1,0,0,0,1444,1445,5,198,0,0,1445,1446,5,217,0,0,1446,1447,3,
        122,61,0,1447,1448,5,180,0,0,1448,1534,1,0,0,0,1449,1450,5,199,0,
        0,1450,1451,5,217,0,0,1451,1452,3,122,61,0,1452,1453,5,180,0,0,1453,
        1534,1,0,0,0,1454,1455,5,200,0,0,1455,1456,5,217,0,0,1456,1457,3,
        122,61,0,1457,1458,5,180,0,0,1458,1534,1,0,0,0,1459,1460,5,201,0,
        0,1460,1461,5,217,0,0,1461,1462,3,122,61,0,1462,1463,5,180,0,0,1463,
        1534,1,0,0,0,1464,1465,5,202,0,0,1465,1466,5,217,0,0,1466,1467,3,
        122,61,0,1467,1468,5,180,0,0,1468,1534,1,0,0,0,1469,1470,5,203,0,
        0,1470,1471,5,217,0,0,1471,1476,3,122,61,0,1472,1473,5,187,0,0,1473,
        1475,3,122,61,0,1474,1472,1,0,0,0,1475,1478,1,0,0,0,1476,1474,1,
        0,0,0,1476,1477,1,0,0,0,1477,1479,1,0,0,0,1478,1476,1,0,0,0,1479,
        1480,5,180,0,0,1480,1534,1,0,0,0,1481,1482,5,204,0,0,1482,1483,5,
        217,0,0,1483,1484,3,122,61,0,1484,1485,5,180,0,0,1485,1534,1,0,0,
        0,1486,1487,5,205,0,0,1487,1488,5,217,0,0,1488,1493,3,122,61,0,1489,
        1490,5,187,0,0,1490,1492,3,122,61,0,1491,1489,1,0,0,0,1492,1495,
        1,0,0,0,1493,1491,1,0,0,0,1493,1494,1,0,0,0,1494,1496,1,0,0,0,1495,
        1493,1,0,0,0,1496,1497,5,180,0,0,1497,1534,1,0,0,0,1498,1499,5,206,
        0,0,1499,1500,5,217,0,0,1500,1501,3,122,61,0,1501,1502,5,187,0,0,
        1502,1503,3,122,61,0,1503,1504,5,180,0,0,1504,1534,1,0,0,0,1505,
        1506,5,207,0,0,1506,1507,5,217,0,0,1507,1508,3,122,61,0,1508,1509,
        5,180,0,0,1509,1534,1,0,0,0,1510,1511,5,208,0,0,1511,1512,5,217,
        0,0,1512,1534,5,180,0,0,1513,1514,5,209,0,0,1514,1515,5,217,0,0,
        1515,1516,3,122,61,0,1516,1517,5,180,0,0,1517,1534,1,0,0,0,1518,
        1519,5,210,0,0,1519,1520,5,217,0,0,1520,1521,3,122,61,0,1521,1522,
        5,180,0,0,1522,1534,1,0,0,0,1523,1524,5,211,0,0,1524,1525,5,217,
        0,0,1525,1526,3,122,61,0,1526,1527,5,180,0,0,1527,1534,1,0,0,0,1528,
        1529,5,212,0,0,1529,1530,5,217,0,0,1530,1531,3,122,61,0,1531,1532,
        5,180,0,0,1532,1534,1,0,0,0,1533,1414,1,0,0,0,1533,1419,1,0,0,0,
        1533,1424,1,0,0,0,1533,1429,1,0,0,0,1533,1434,1,0,0,0,1533,1439,
        1,0,0,0,1533,1444,1,0,0,0,1533,1449,1,0,0,0,1533,1454,1,0,0,0,1533,
        1459,1,0,0,0,1533,1464,1,0,0,0,1533,1469,1,0,0,0,1533,1481,1,0,0,
        0,1533,1486,1,0,0,0,1533,1498,1,0,0,0,1533,1505,1,0,0,0,1533,1510,
        1,0,0,0,1533,1513,1,0,0,0,1533,1518,1,0,0,0,1533,1523,1,0,0,0,1533,
        1528,1,0,0,0,1534,125,1,0,0,0,1535,1536,7,6,0,0,1536,1537,5,219,
        0,0,1537,1538,5,228,0,0,1538,1539,5,220,0,0,1539,127,1,0,0,0,1540,
        1541,5,126,0,0,1541,1542,5,213,0,0,1542,1543,5,181,0,0,1543,1544,
        3,130,65,0,1544,1545,5,180,0,0,1545,129,1,0,0,0,1546,1549,3,122,
        61,0,1547,1548,7,5,0,0,1548,1550,3,130,65,0,1549,1547,1,0,0,0,1549,
        1550,1,0,0,0,1550,131,1,0,0,0,1551,1552,5,127,0,0,1552,1553,5,235,
        0,0,1553,1554,5,232,0,0,1554,1573,5,230,0,0,1555,1557,5,233,0,0,
        1556,1555,1,0,0,0,1557,1560,1,0,0,0,1558,1556,1,0,0,0,1558,1559,
        1,0,0,0,1559,1574,1,0,0,0,1560,1558,1,0,0,0,1561,1563,5,234,0,0,
        1562,1561,1,0,0,0,1563,1566,1,0,0,0,1564,1562,1,0,0,0,1564,1565,
        1,0,0,0,1565,1574,1,0,0,0,1566,1564,1,0,0,0,1567,1569,5,236,0,0,
        1568,1567,1,0,0,0,1569,1572,1,0,0,0,1570,1568,1,0,0,0,1570,1571,
        1,0,0,0,1571,1574,1,0,0,0,1572,1570,1,0,0,0,1573,1558,1,0,0,0,1573,
        1564,1,0,0,0,1573,1570,1,0,0,0,1574,1575,1,0,0,0,1575,1576,5,231,
        0,0,1576,1577,5,128,0,0,1577,1582,5,239,0,0,1578,1581,3,128,64,0,
        1579,1581,3,28,14,0,1580,1578,1,0,0,0,1580,1579,1,0,0,0,1581,1584,
        1,0,0,0,1582,1580,1,0,0,0,1582,1583,1,0,0,0,1583,1585,1,0,0,0,1584,
        1582,1,0,0,0,1585,1586,5,2,0,0,1586,1587,5,128,0,0,1587,1588,5,239,
        0,0,1588,133,1,0,0,0,1589,1590,5,127,0,0,1590,1591,5,235,0,0,1591,
        1592,5,232,0,0,1592,1611,5,230,0,0,1593,1595,5,233,0,0,1594,1593,
        1,0,0,0,1595,1598,1,0,0,0,1596,1594,1,0,0,0,1596,1597,1,0,0,0,1597,
        1612,1,0,0,0,1598,1596,1,0,0,0,1599,1601,5,234,0,0,1600,1599,1,0,
        0,0,1601,1604,1,0,0,0,1602,1600,1,0,0,0,1602,1603,1,0,0,0,1603,1612,
        1,0,0,0,1604,1602,1,0,0,0,1605,1607,5,236,0,0,1606,1605,1,0,0,0,
        1607,1610,1,0,0,0,1608,1606,1,0,0,0,1608,1609,1,0,0,0,1609,1612,
        1,0,0,0,1610,1608,1,0,0,0,1611,1596,1,0,0,0,1611,1602,1,0,0,0,1611,
        1608,1,0,0,0,1612,1613,1,0,0,0,1613,1614,5,231,0,0,1614,1615,5,128,
        0,0,1615,1620,5,239,0,0,1616,1619,3,128,64,0,1617,1619,3,36,18,0,
        1618,1616,1,0,0,0,1618,1617,1,0,0,0,1619,1622,1,0,0,0,1620,1618,
        1,0,0,0,1620,1621,1,0,0,0,1621,1623,1,0,0,0,1622,1620,1,0,0,0,1623,
        1624,5,2,0,0,1624,1625,5,128,0,0,1625,1626,5,239,0,0,1626,135,1,
        0,0,0,1627,1628,5,127,0,0,1628,1629,5,235,0,0,1629,1630,5,232,0,
        0,1630,1649,5,230,0,0,1631,1633,5,233,0,0,1632,1631,1,0,0,0,1633,
        1636,1,0,0,0,1634,1632,1,0,0,0,1634,1635,1,0,0,0,1635,1650,1,0,0,
        0,1636,1634,1,0,0,0,1637,1639,5,234,0,0,1638,1637,1,0,0,0,1639,1642,
        1,0,0,0,1640,1638,1,0,0,0,1640,1641,1,0,0,0,1641,1650,1,0,0,0,1642,
        1640,1,0,0,0,1643,1645,5,236,0,0,1644,1643,1,0,0,0,1645,1648,1,0,
        0,0,1646,1644,1,0,0,0,1646,1647,1,0,0,0,1647,1650,1,0,0,0,1648,1646,
        1,0,0,0,1649,1634,1,0,0,0,1649,1640,1,0,0,0,1649,1646,1,0,0,0,1650,
        1651,1,0,0,0,1651,1652,5,231,0,0,1652,1653,5,128,0,0,1653,1658,5,
        239,0,0,1654,1657,3,128,64,0,1655,1657,3,48,24,0,1656,1654,1,0,0,
        0,1656,1655,1,0,0,0,1657,1660,1,0,0,0,1658,1656,1,0,0,0,1658,1659,
        1,0,0,0,1659,1661,1,0,0,0,1660,1658,1,0,0,0,1661,1662,5,2,0,0,1662,
        1663,5,128,0,0,1663,1664,5,239,0,0,1664,137,1,0,0,0,1665,1666,5,
        127,0,0,1666,1667,5,235,0,0,1667,1668,5,232,0,0,1668,1687,5,230,
        0,0,1669,1671,5,233,0,0,1670,1669,1,0,0,0,1671,1674,1,0,0,0,1672,
        1670,1,0,0,0,1672,1673,1,0,0,0,1673,1688,1,0,0,0,1674,1672,1,0,0,
        0,1675,1677,5,234,0,0,1676,1675,1,0,0,0,1677,1680,1,0,0,0,1678,1676,
        1,0,0,0,1678,1679,1,0,0,0,1679,1688,1,0,0,0,1680,1678,1,0,0,0,1681,
        1683,5,236,0,0,1682,1681,1,0,0,0,1683,1686,1,0,0,0,1684,1682,1,0,
        0,0,1684,1685,1,0,0,0,1685,1688,1,0,0,0,1686,1684,1,0,0,0,1687,1672,
        1,0,0,0,1687,1678,1,0,0,0,1687,1684,1,0,0,0,1688,1689,1,0,0,0,1689,
        1690,5,231,0,0,1690,1691,5,128,0,0,1691,1696,5,239,0,0,1692,1695,
        3,128,64,0,1693,1695,3,52,26,0,1694,1692,1,0,0,0,1694,1693,1,0,0,
        0,1695,1698,1,0,0,0,1696,1694,1,0,0,0,1696,1697,1,0,0,0,1697,1699,
        1,0,0,0,1698,1696,1,0,0,0,1699,1700,5,2,0,0,1700,1701,5,128,0,0,
        1701,1702,5,239,0,0,1702,139,1,0,0,0,1703,1704,5,127,0,0,1704,1705,
        5,235,0,0,1705,1706,5,232,0,0,1706,1725,5,230,0,0,1707,1709,5,233,
        0,0,1708,1707,1,0,0,0,1709,1712,1,0,0,0,1710,1708,1,0,0,0,1710,1711,
        1,0,0,0,1711,1726,1,0,0,0,1712,1710,1,0,0,0,1713,1715,5,234,0,0,
        1714,1713,1,0,0,0,1715,1718,1,0,0,0,1716,1714,1,0,0,0,1716,1717,
        1,0,0,0,1717,1726,1,0,0,0,1718,1716,1,0,0,0,1719,1721,5,236,0,0,
        1720,1719,1,0,0,0,1721,1724,1,0,0,0,1722,1720,1,0,0,0,1722,1723,
        1,0,0,0,1723,1726,1,0,0,0,1724,1722,1,0,0,0,1725,1710,1,0,0,0,1725,
        1716,1,0,0,0,1725,1722,1,0,0,0,1726,1727,1,0,0,0,1727,1728,5,231,
        0,0,1728,1729,5,128,0,0,1729,1734,5,239,0,0,1730,1733,3,128,64,0,
        1731,1733,3,56,28,0,1732,1730,1,0,0,0,1732,1731,1,0,0,0,1733,1736,
        1,0,0,0,1734,1732,1,0,0,0,1734,1735,1,0,0,0,1735,1737,1,0,0,0,1736,
        1734,1,0,0,0,1737,1738,5,2,0,0,1738,1739,5,128,0,0,1739,1740,5,239,
        0,0,1740,141,1,0,0,0,212,170,172,181,187,193,199,205,211,217,226,
        235,244,253,262,271,280,289,296,312,317,324,333,338,349,361,367,
        380,387,414,420,423,430,433,438,443,448,451,454,458,463,468,475,
        479,484,489,494,499,504,509,512,519,524,529,535,539,556,562,566,
        571,574,579,584,589,593,599,603,607,610,612,616,628,638,643,648,
        655,666,669,675,686,692,696,701,706,715,718,721,733,740,746,758,
        763,768,773,778,787,814,819,825,835,838,843,848,852,864,888,896,
        903,906,909,914,919,924,934,939,944,948,957,960,967,970,973,976,
        988,995,1002,1007,1019,1024,1029,1036,1047,1052,1066,1071,1076,1083,
        1100,1105,1114,1119,1124,1129,1138,1141,1149,1164,1175,1183,1198,
        1214,1217,1236,1241,1244,1253,1257,1268,1272,1276,1279,1292,1295,
        1302,1305,1312,1317,1320,1340,1348,1350,1366,1370,1372,1378,1393,
        1398,1403,1412,1476,1493,1533,1549,1558,1564,1570,1573,1580,1582,
        1596,1602,1608,1611,1618,1620,1634,1640,1646,1649,1656,1658,1672,
        1678,1684,1687,1694,1696,1710,1716,1722,1725,1732,1734
    ]

class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'CV'", "'DEN'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'OUTD'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'CUTOFF'", 
                     "'CUTON'", "'FROM'", "'TO'", "'PEAK'", "'SPECTRUM'", 
                     "'VOLUME'", "'PPM1'", "'PPM2'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SIZE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'FBOX'", "<INVALID>", 
                     "'ID'", "<INVALID>", "'NAME'", "'NONE'", "<INVALID>", 
                     "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SFBOX'", "'STORE1'", "'STORE2'", 
                     "'STORE3'", "'STORE4'", "'STORE5'", "'STORE6'", "'STORE7'", 
                     "'STORE8'", "'STORE9'", "'TAG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SHOW'", "<INVALID>", "'FOR'", "'LOOP'", 
                     "'TAIL'", "'HEAD'", "'OR'", "'AND'", "'NOT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "':'", "<INVALID>", "'<'", "'>'", "'<='", 
                     "'>='", "'#'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", "'ENCODE'", 
                     "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", "'LOG10'", 
                     "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", "'MOD'", 
                     "<INVALID>", "<INVALID>", "'SIGN'", "'SIN'", "'SQRT'", 
                     "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'RMS'", "'SUM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Average", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Initialize", "Update", "Gamma", "Kappa", "Cutoff", 
                      "Cuton", "From", "To", "Peak", "Spectrum", "Volume", 
                      "Ppm1", "Ppm2", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Coupling", "Carbon", "Expectation", 
                      "PhiStep", "PsiStep", "Rcoil", "Zero", "Proton", "Observed", 
                      "Anisotropy", "Amides", "Nitrogens", "Oxygens", "RingAtoms", 
                      "AlphasAndAmides", "Error", "Conformation", "Compressed", 
                      "Phase", "Size", "Dimensions", "Danisotropy", "OneBond", 
                      "AngleDb", "DerivFlag", "Angle_or_Dihedral", "Flags", 
                      "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Fbox", "Hydrogen", 
                      "Id", "Known", "Name", "NONE", "Point", "Cut", "Previous", 
                      "Pseudo", "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Sfbox", "Store_1", "Store_2", "Store_3", "Store_4", 
                      "Store_5", "Store_6", "Store_7", "Store_8", "Store_9", 
                      "Tag", "Vector", "Do_Lp", "Identify_Lp", "Show", "Evaluate_Lp", 
                      "For", "Loop", "Tail", "Head", "Or_op", "And_op", 
                      "Not_op", "Comma", "Complex", "Integer", "Logical", 
                      "Real", "Double_quote_string", "SHARP_COMMENT", "EXCLM_COMMENT", 
                      "SMCLN_COMMENT", "Simple_name", "Simple_names", "Integers", 
                      "L_paren", "R_paren", "Colon", "Equ_op", "Lt_op", 
                      "Gt_op", "Leq_op", "Geq_op", "Neq_op", "Symbol_name", 
                      "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT", 
                      "SET_VARIABLE", "Abs", "Attr_properties", "Comparison_ops", 
                      "SPACE_ATTR", "Averaging_methods", "Simple_name_A", 
                      "SPACE_AVER", "Equ_op_P", "Potential_types", "Simple_name_P", 
                      "SPACE_POTE", "Noe_analysis", "SPACE_ANAL", "Exclude", 
                      "Include", "End_F", "Class_name", "Any_class", "SPACE_FLAG", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Symbol_name_VE", "Simple_name_VE", "Double_quote_string_VE", 
                      "SPACE_VE", "L_paren_VF", "SPACE_VF", "L_paren_VS", 
                      "R_paren_VS", "Average_VS", "Element_VS", "Max_VS", 
                      "Min_VS", "Norm_VS", "Rms_VS", "Sum_VS", "Atom_properties_VS", 
                      "SPACE_VS", "L_paren_CF", "R_paren_CF", "In_CF", "Integer_CF", 
                      "Real_CF", "Symbol_name_CF", "Simple_name_CF", "SPACE_CF", 
                      "COMMENT_CF", "Simple_name_LL", "SPACE_LL" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_noe_annotation = 16
    RULE_dihedral_statement = 17
    RULE_dihedral_assign = 18
    RULE_plane_statement = 19
    RULE_group_statement = 20
    RULE_harmonic_statement = 21
    RULE_harmonic_assign = 22
    RULE_sani_statement = 23
    RULE_sani_assign = 24
    RULE_coupling_statement = 25
    RULE_coup_assign = 26
    RULE_carbon_shift_statement = 27
    RULE_carbon_shift_assign = 28
    RULE_carbon_shift_rcoil = 29
    RULE_proton_shift_statement = 30
    RULE_observed = 31
    RULE_proton_shift_rcoil = 32
    RULE_proton_shift_anisotropy = 33
    RULE_proton_shift_amides = 34
    RULE_proton_shift_carbons = 35
    RULE_proton_shift_nitrogens = 36
    RULE_proton_shift_oxygens = 37
    RULE_proton_shift_ring_atoms = 38
    RULE_proton_shift_alphas_and_amides = 39
    RULE_conformation_statement = 40
    RULE_conf_assign = 41
    RULE_diffusion_statement = 42
    RULE_dani_assign = 43
    RULE_one_bond_coupling_statement = 44
    RULE_one_bond_assign = 45
    RULE_angle_db_statement = 46
    RULE_angle_db_assign = 47
    RULE_selection = 48
    RULE_selection_expression = 49
    RULE_term = 50
    RULE_factor = 51
    RULE_number = 52
    RULE_number_f = 53
    RULE_number_s = 54
    RULE_number_a = 55
    RULE_flag_statement = 56
    RULE_vector_statement = 57
    RULE_vector_mode = 58
    RULE_vector_expression = 59
    RULE_vector_operation = 60
    RULE_vflc = 61
    RULE_vector_func_call = 62
    RULE_vector_show_property = 63
    RULE_evaluate_statement = 64
    RULE_evaluate_operation = 65
    RULE_noe_assign_loop = 66
    RULE_dihedral_assign_loop = 67
    RULE_sani_assign_loop = 68
    RULE_coup_assign_loop = 69
    RULE_carbon_shift_assign_loop = 70

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "plane_statement", 
                   "group_statement", "harmonic_statement", "harmonic_assign", 
                   "sani_statement", "sani_assign", "coupling_statement", 
                   "coup_assign", "carbon_shift_statement", "carbon_shift_assign", 
                   "carbon_shift_rcoil", "proton_shift_statement", "observed", 
                   "proton_shift_rcoil", "proton_shift_anisotropy", "proton_shift_amides", 
                   "proton_shift_carbons", "proton_shift_nitrogens", "proton_shift_oxygens", 
                   "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s", "number_a", "flag_statement", "vector_statement", 
                   "vector_mode", "vector_expression", "vector_operation", 
                   "vflc", "vector_func_call", "vector_show_property", "evaluate_statement", 
                   "evaluate_operation", "noe_assign_loop", "dihedral_assign_loop", 
                   "sani_assign_loop", "coup_assign_loop", "carbon_shift_assign_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Average=7
    Bhig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Cutoff=39
    Cuton=40
    From=41
    To=42
    Peak=43
    Spectrum=44
    Volume=45
    Ppm1=46
    Ppm2=47
    Restraints=48
    Dihedral=49
    Nassign=50
    Print_any=51
    Plane=52
    Group=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Sanisotropy=59
    Coefficients=60
    ForceConstant=61
    Coupling=62
    Carbon=63
    Expectation=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Zero=68
    Proton=69
    Observed=70
    Anisotropy=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Conformation=78
    Compressed=79
    Phase=80
    Size=81
    Dimensions=82
    Danisotropy=83
    OneBond=84
    AngleDb=85
    DerivFlag=86
    Angle_or_Dihedral=87
    Flags=88
    All=89
    Around=90
    Atom=91
    Attribute=92
    BondedTo=93
    ByGroup=94
    ByRes=95
    Chemical=96
    Fbox=97
    Hydrogen=98
    Id=99
    Known=100
    Name=101
    NONE=102
    Point=103
    Cut=104
    Previous=105
    Pseudo=106
    Residue=107
    Resname=108
    Saround=109
    SegIdentifier=110
    Sfbox=111
    Store_1=112
    Store_2=113
    Store_3=114
    Store_4=115
    Store_5=116
    Store_6=117
    Store_7=118
    Store_8=119
    Store_9=120
    Tag=121
    Vector=122
    Do_Lp=123
    Identify_Lp=124
    Show=125
    Evaluate_Lp=126
    For=127
    Loop=128
    Tail=129
    Head=130
    Or_op=131
    And_op=132
    Not_op=133
    Comma=134
    Complex=135
    Integer=136
    Logical=137
    Real=138
    Double_quote_string=139
    SHARP_COMMENT=140
    EXCLM_COMMENT=141
    SMCLN_COMMENT=142
    Simple_name=143
    Simple_names=144
    Integers=145
    L_paren=146
    R_paren=147
    Colon=148
    Equ_op=149
    Lt_op=150
    Gt_op=151
    Leq_op=152
    Geq_op=153
    Neq_op=154
    Symbol_name=155
    SPACE=156
    COMMENT=157
    SECTION_COMMENT=158
    LINE_COMMENT=159
    SET_VARIABLE=160
    Abs=161
    Attr_properties=162
    Comparison_ops=163
    SPACE_ATTR=164
    Averaging_methods=165
    Simple_name_A=166
    SPACE_AVER=167
    Equ_op_P=168
    Potential_types=169
    Simple_name_P=170
    SPACE_POTE=171
    Noe_analysis=172
    SPACE_ANAL=173
    Exclude=174
    Include=175
    End_F=176
    Class_name=177
    Any_class=178
    SPACE_FLAG=179
    R_paren_VE=180
    Equ_op_VE=181
    Add_op_VE=182
    Sub_op_VE=183
    Mul_op_VE=184
    Div_op_VE=185
    Exp_op_VE=186
    Comma_VE=187
    Integer_VE=188
    Real_VE=189
    Atom_properties_VE=190
    Abs_VE=191
    Acos_VE=192
    Asin_VE=193
    Cos_VE=194
    Decode_VE=195
    Encode_VE=196
    Exp_VE=197
    Gauss_VE=198
    Heavy_VE=199
    Int_VE=200
    Log10_VE=201
    Log_VE=202
    Max_VE=203
    Maxw_VE=204
    Min_VE=205
    Mod_VE=206
    Norm_VE=207
    Random_VE=208
    Sign_VE=209
    Sin_VE=210
    Sqrt_VE=211
    Tan_VE=212
    Symbol_name_VE=213
    Simple_name_VE=214
    Double_quote_string_VE=215
    SPACE_VE=216
    L_paren_VF=217
    SPACE_VF=218
    L_paren_VS=219
    R_paren_VS=220
    Average_VS=221
    Element_VS=222
    Max_VS=223
    Min_VS=224
    Norm_VS=225
    Rms_VS=226
    Sum_VS=227
    Atom_properties_VS=228
    SPACE_VS=229
    L_paren_CF=230
    R_paren_CF=231
    In_CF=232
    Integer_CF=233
    Real_CF=234
    Symbol_name_CF=235
    Simple_name_CF=236
    SPACE_CF=237
    COMMENT_CF=238
    Simple_name_LL=239
    SPACE_LL=240

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def noe_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assign_loopContext,i)


        def dihedral_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assign_loopContext,i)


        def sani_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assign_loopContext,i)


        def coup_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assign_loopContext,i)


        def carbon_shift_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assign_loopContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.ObservedContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Assign) | (1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Dihedral) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Plane) | (1 << CnsMRParser.Group) | (1 << CnsMRParser.Harmonic) | (1 << CnsMRParser.Sanisotropy) | (1 << CnsMRParser.Coupling) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CnsMRParser.Proton - 69)) | (1 << (CnsMRParser.Observed - 69)) | (1 << (CnsMRParser.Conformation - 69)) | (1 << (CnsMRParser.Danisotropy - 69)) | (1 << (CnsMRParser.OneBond - 69)) | (1 << (CnsMRParser.AngleDb - 69)) | (1 << (CnsMRParser.Flags - 69)) | (1 << (CnsMRParser.Vector - 69)) | (1 << (CnsMRParser.Evaluate_Lp - 69)) | (1 << (CnsMRParser.For - 69)))) != 0):
                self.state = 170
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 142
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 143
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 144
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 145
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 146
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 147
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 148
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 149
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 150
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 151
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 152
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 153
                    self.angle_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 154
                    self.flag_statement()
                    pass

                elif la_ == 14:
                    self.state = 155
                    self.vector_statement()
                    pass

                elif la_ == 15:
                    self.state = 156
                    self.evaluate_statement()
                    pass

                elif la_ == 16:
                    self.state = 157
                    self.noe_assign_loop()
                    pass

                elif la_ == 17:
                    self.state = 158
                    self.dihedral_assign_loop()
                    pass

                elif la_ == 18:
                    self.state = 159
                    self.sani_assign_loop()
                    pass

                elif la_ == 19:
                    self.state = 160
                    self.coup_assign_loop()
                    pass

                elif la_ == 20:
                    self.state = 161
                    self.carbon_shift_assign_loop()
                    pass

                elif la_ == 21:
                    self.state = 162
                    self.noe_assign()
                    pass

                elif la_ == 22:
                    self.state = 163
                    self.dihedral_assign()
                    pass

                elif la_ == 23:
                    self.state = 164
                    self.sani_assign()
                    pass

                elif la_ == 24:
                    self.state = 165
                    self.plane_statement()
                    pass

                elif la_ == 25:
                    self.state = 166
                    self.harmonic_assign()
                    pass

                elif la_ == 26:
                    self.state = 167
                    self.coup_assign()
                    pass

                elif la_ == 27:
                    self.state = 168
                    self.carbon_shift_assign()
                    pass

                elif la_ == 28:
                    self.state = 169
                    self.observed()
                    pass


                self.state = 174
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 175
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 177
            self.match(CnsMRParser.Noe)
            self.state = 181
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 178
                    self.noe_statement() 
                self.state = 183
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 184
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 186
                self.match(CnsMRParser.Restraints)


            self.state = 189
            self.match(CnsMRParser.Dihedral)
            self.state = 193
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Scale) | (1 << CnsMRParser.Nassign) | (1 << CnsMRParser.Print_any))) != 0) or _la==CnsMRParser.Vector or _la==CnsMRParser.For:
                self.state = 190
                self.dihedral_statement()
                self.state = 195
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 196
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 198
                self.match(CnsMRParser.Restraints)


            self.state = 201
            self.match(CnsMRParser.Plane)
            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0) or _la==CnsMRParser.Vector:
                self.state = 202
                self.plane_statement()
                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 208
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 210
                self.match(CnsMRParser.Restraints)


            self.state = 213
            self.match(CnsMRParser.Harmonic)
            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Exponent or _la==CnsMRParser.Normal or _la==CnsMRParser.Vector:
                self.state = 214
                self.harmonic_statement()
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 220
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(CnsMRParser.Sanisotropy)
            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0) or _la==CnsMRParser.For:
                self.state = 223
                self.sani_statement()
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 229
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.match(CnsMRParser.Coupling)
            self.state = 235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0) or _la==CnsMRParser.For:
                self.state = 232
                self.coupling_statement()
                self.state = 237
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 238
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(CnsMRParser.Carbon)
            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.PhiStep - 64)) | (1 << (CnsMRParser.PsiStep - 64)) | (1 << (CnsMRParser.Rcoil - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.For - 64)))) != 0):
                self.state = 241
                self.carbon_shift_statement()
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 247
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.match(CnsMRParser.Proton)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Classification) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CnsMRParser.Rcoil - 67)) | (1 << (CnsMRParser.Observed - 67)) | (1 << (CnsMRParser.Anisotropy - 67)) | (1 << (CnsMRParser.Amides - 67)) | (1 << (CnsMRParser.Nitrogens - 67)) | (1 << (CnsMRParser.Oxygens - 67)) | (1 << (CnsMRParser.RingAtoms - 67)) | (1 << (CnsMRParser.AlphasAndAmides - 67)) | (1 << (CnsMRParser.Error - 67)))) != 0):
                self.state = 250
                self.proton_shift_statement()
                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 256
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def conformation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.match(CnsMRParser.Conformation)
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Compressed - 64)) | (1 << (CnsMRParser.Phase - 64)) | (1 << (CnsMRParser.Size - 64)))) != 0):
                self.state = 259
                self.conformation_statement()
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 265
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(CnsMRParser.Danisotropy)
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 268
                self.diffusion_statement()
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 274
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.match(CnsMRParser.OneBond)
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 277
                self.one_bond_coupling_statement()
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 283
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(CnsMRParser.AngleDb)
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Size - 64)) | (1 << (CnsMRParser.DerivFlag - 64)))) != 0):
                self.state = 286
                self.angle_db_statement()
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 292
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def noe_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,0)


        def noe_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assign_loopContext,0)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Average(self):
            return self.getToken(CnsMRParser.Average, 0)

        def Simple_name_A(self):
            return self.getToken(CnsMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(CnsMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(CnsMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(CnsMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 294
                self.match(CnsMRParser.Analysis)
                self.state = 296
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 295
                    self.match(CnsMRParser.Equ_op)


                self.state = 298
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 299
                self.noe_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 300
                self.noe_assign_loop()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 301
                self.match(CnsMRParser.Asymptote)
                self.state = 302
                self.match(CnsMRParser.Simple_name)
                self.state = 303
                self.number_s()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 304
                self.match(CnsMRParser.Average)
                self.state = 305
                self.match(CnsMRParser.Simple_name_A)
                self.state = 306
                self.match(CnsMRParser.Averaging_methods)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 307
                self.match(CnsMRParser.Bhig)
                self.state = 308
                self.match(CnsMRParser.Simple_name)
                self.state = 309
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 310
                self.match(CnsMRParser.Ceiling)
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 311
                    self.match(CnsMRParser.Equ_op)


                self.state = 314
                self.number_s()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 315
                self.match(CnsMRParser.Classification)
                self.state = 317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 316
                    self.match(CnsMRParser.Equ_op)


                self.state = 319
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 320
                self.match(CnsMRParser.CountViol)
                self.state = 321
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 322
                self.match(CnsMRParser.Cv)
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 323
                    self.match(CnsMRParser.Equ_op)


                self.state = 326
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 327
                self.match(CnsMRParser.Den)
                self.state = 328
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 329
                self.match(CnsMRParser.Den)
                self.state = 330
                self.match(CnsMRParser.Update)
                self.state = 331
                self.match(CnsMRParser.Gamma)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 332
                    self.match(CnsMRParser.Equ_op)


                self.state = 335
                self.number_s()
                self.state = 336
                self.match(CnsMRParser.Kappa)
                self.state = 338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 337
                    self.match(CnsMRParser.Equ_op)


                self.state = 340
                self.number_s()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 342
                self.match(CnsMRParser.Distribute)
                self.state = 343
                self.match(CnsMRParser.Simple_name)
                self.state = 344
                self.match(CnsMRParser.Simple_name)
                self.state = 345
                self.number_s()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 349
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 346
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 351
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 352
                self.match(CnsMRParser.End)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 353
                self.match(CnsMRParser.Monomers)
                self.state = 354
                self.match(CnsMRParser.Simple_name)
                self.state = 355
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 356
                self.match(CnsMRParser.Ncount)
                self.state = 357
                self.match(CnsMRParser.Simple_name)
                self.state = 358
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 359
                self.match(CnsMRParser.Nrestraints)
                self.state = 361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 360
                    self.match(CnsMRParser.Equ_op)


                self.state = 363
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 364
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 365
                self.match(CnsMRParser.Partition)
                self.state = 367
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 366
                    self.match(CnsMRParser.Equ_op)


                self.state = 369
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 370
                self.match(CnsMRParser.Potential)
                self.state = 371
                self.match(CnsMRParser.Simple_name_P)
                self.state = 372
                self.match(CnsMRParser.Potential_types)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 373
                self.match(CnsMRParser.Predict)
                self.state = 374
                self.predict_statement()
                self.state = 375
                self.match(CnsMRParser.End)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 377
                self.match(CnsMRParser.Print)
                self.state = 378
                self.match(CnsMRParser.Threshold)
                self.state = 380
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 379
                    self.match(CnsMRParser.Equ_op)


                self.state = 382
                self.number_s()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 383
                self.match(CnsMRParser.Raverage)
                self.state = 387
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 384
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 389
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 390
                self.match(CnsMRParser.End)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 391
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 392
                self.match(CnsMRParser.Rswitch)
                self.state = 393
                self.match(CnsMRParser.Simple_name)
                self.state = 394
                self.number_s()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 395
                self.match(CnsMRParser.Scale)
                self.state = 396
                self.match(CnsMRParser.Simple_name)
                self.state = 397
                self.number_s()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 398
                self.match(CnsMRParser.SoExponent)
                self.state = 399
                self.match(CnsMRParser.Simple_name)
                self.state = 400
                self.number_s()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 401
                self.match(CnsMRParser.SqConstant)
                self.state = 402
                self.match(CnsMRParser.Simple_name)
                self.state = 403
                self.number_s()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 404
                self.match(CnsMRParser.SqExponent)
                self.state = 405
                self.match(CnsMRParser.Simple_name)
                self.state = 406
                self.number_s()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 407
                self.match(CnsMRParser.SqOffset)
                self.state = 408
                self.match(CnsMRParser.Simple_name)
                self.state = 409
                self.number_s()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 410
                self.match(CnsMRParser.Taverage)
                self.state = 414
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 411
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 416
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                self.state = 417
                self.match(CnsMRParser.End)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 418
                self.match(CnsMRParser.Temperature)
                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 419
                    self.match(CnsMRParser.Equ_op)


                self.state = 422
                self.number_s()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Assign)
            else:
                return self.getToken(CnsMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 425
            self.match(CnsMRParser.Assign)
            self.state = 426
            self.selection()
            self.state = 427
            self.selection()
            self.state = 428
            self.number()
            self.state = 430
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 429
                self.number()


            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 432
                self.number()


            self.state = 438
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 435
                    self.noe_annotation() 
                self.state = 440
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 441
                self.match(CnsMRParser.Or_op)
                self.state = 443
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Assign:
                    self.state = 442
                    self.match(CnsMRParser.Assign)


                self.state = 445
                self.selection()
                self.state = 446
                self.selection()
                self.state = 448
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 447
                    self.number()


                self.state = 451
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 450
                    self.number()


                self.state = 454
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                    self.state = 453
                    self.number()


                self.state = 460
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 461
                self.match(CnsMRParser.Cutoff)
                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 462
                    self.match(CnsMRParser.Equ_op)


                self.state = 465
                self.number_s()
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 466
                self.match(CnsMRParser.Cuton)
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 467
                    self.match(CnsMRParser.Equ_op)


                self.state = 470
                self.number_s()
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 471
                self.match(CnsMRParser.From)
                self.state = 472
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 473
                self.match(CnsMRParser.To)
                self.state = 474
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(CnsMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(CnsMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(CnsMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(CnsMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(CnsMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(CnsMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = CnsMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 512
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 477
                self.match(CnsMRParser.Peak)
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 478
                    self.match(CnsMRParser.Equ_op)


                self.state = 481
                self.number_a()
                pass
            elif token in [CnsMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 482
                self.match(CnsMRParser.Spectrum)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 483
                    self.match(CnsMRParser.Equ_op)


                self.state = 486
                self.number_a()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 487
                self.match(CnsMRParser.Weight)
                self.state = 489
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 488
                    self.match(CnsMRParser.Equ_op)


                self.state = 491
                self.number_a()
                pass
            elif token in [CnsMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 492
                self.match(CnsMRParser.Volume)
                self.state = 494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 493
                    self.match(CnsMRParser.Equ_op)


                self.state = 496
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 497
                self.match(CnsMRParser.Ppm1)
                self.state = 499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 498
                    self.match(CnsMRParser.Equ_op)


                self.state = 501
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 502
                self.match(CnsMRParser.Ppm2)
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 503
                    self.match(CnsMRParser.Equ_op)


                self.state = 506
                self.number_a()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 507
                self.match(CnsMRParser.Cv)
                self.state = 509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 508
                    self.match(CnsMRParser.Equ_op)


                self.state = 511
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def dihedral_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assign_loopContext,0)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 514
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 515
                self.dihedral_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 516
                self.dihedral_assign_loop()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 517
                self.match(CnsMRParser.Cv)
                self.state = 519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 518
                    self.match(CnsMRParser.Equ_op)


                self.state = 521
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 522
                self.match(CnsMRParser.Nassign)
                self.state = 524
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 523
                    self.match(CnsMRParser.Equ_op)


                self.state = 526
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 527
                self.match(CnsMRParser.Partition)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 528
                    self.match(CnsMRParser.Equ_op)


                self.state = 531
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 532
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 8)
                self.state = 533
                self.match(CnsMRParser.Scale)
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 534
                    self.match(CnsMRParser.Equ_op)


                self.state = 537
                self.number_s()
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 9)
                self.state = 538
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(CnsMRParser.Assign)
            self.state = 542
            self.selection()
            self.state = 543
            self.selection()
            self.state = 544
            self.selection()
            self.state = 545
            self.selection()
            self.state = 546
            self.number()
            self.state = 547
            self.number()
            self.state = 548
            self.number()
            self.state = 549
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_plane_statement)
        self._la = 0 # Token type
        try:
            self.state = 562
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 551
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 2)
                self.state = 552
                self.match(CnsMRParser.Group)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Selection or _la==CnsMRParser.Weight:
                    self.state = 553
                    self.group_statement()
                    self.state = 558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 559
                self.match(CnsMRParser.End)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 3)
                self.state = 560
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 4)
                self.state = 561
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 574
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 564
                self.match(CnsMRParser.Selection)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 565
                    self.match(CnsMRParser.Equ_op)


                self.state = 568
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 569
                self.match(CnsMRParser.Weight)
                self.state = 571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 570
                    self.match(CnsMRParser.Equ_op)


                self.state = 573
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 616
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 2)
                self.state = 577
                self.match(CnsMRParser.Exponent)
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 578
                    self.match(CnsMRParser.Equ_op)


                self.state = 581
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 582
                self.match(CnsMRParser.Normal)
                self.state = 584
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 583
                    self.match(CnsMRParser.Equ_op)


                self.state = 586
                self.match(CnsMRParser.L_paren)
                self.state = 612
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integer, CnsMRParser.Real, CnsMRParser.Symbol_name]:
                    self.state = 587
                    self.number_s()
                    self.state = 589
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 588
                        self.match(CnsMRParser.Comma)


                    self.state = 591
                    self.number_s()
                    self.state = 593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 592
                        self.match(CnsMRParser.Comma)


                    self.state = 595
                    self.number_s()
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 597
                    self.match(CnsMRParser.Tail)
                    self.state = 599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 598
                        self.match(CnsMRParser.Equ_op)


                    self.state = 601
                    self.selection()
                    self.state = 603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 602
                        self.match(CnsMRParser.Comma)


                    self.state = 610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 605
                        self.match(CnsMRParser.Head)
                        self.state = 607
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CnsMRParser.Equ_op:
                            self.state = 606
                            self.match(CnsMRParser.Equ_op)


                        self.state = 609
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 614
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = CnsMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(CnsMRParser.Assign)
            self.state = 619
            self.selection()
            self.state = 620
            self.number()
            self.state = 621
            self.number()
            self.state = 622
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,0)


        def sani_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 624
                self.sani_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 625
                self.sani_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 626
                self.match(CnsMRParser.Classification)
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 627
                    self.match(CnsMRParser.Equ_op)


                self.state = 630
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 631
                self.match(CnsMRParser.Coefficients)
                self.state = 632
                self.number_s()
                self.state = 633
                self.number_s()
                self.state = 634
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 636
                self.match(CnsMRParser.ForceConstant)
                self.state = 638
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 637
                    self.match(CnsMRParser.Equ_op)


                self.state = 640
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 641
                self.match(CnsMRParser.Nrestraints)
                self.state = 643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 642
                    self.match(CnsMRParser.Equ_op)


                self.state = 645
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 7)
                self.state = 646
                self.match(CnsMRParser.Potential)
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 647
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 650
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 651
                self.match(CnsMRParser.Print)
                self.state = 652
                self.match(CnsMRParser.Threshold)
                self.state = 653
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 654
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 657
            self.match(CnsMRParser.Assign)
            self.state = 658
            self.selection()
            self.state = 659
            self.selection()
            self.state = 660
            self.selection()
            self.state = 661
            self.selection()
            self.state = 662
            self.selection()
            self.state = 663
            self.selection()
            self.state = 664
            self.number()
            self.state = 666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 665
                self.number()


            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 668
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,0)


        def coup_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 721
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 671
                self.coup_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 672
                self.coup_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 673
                self.match(CnsMRParser.Classification)
                self.state = 675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 674
                    self.match(CnsMRParser.Equ_op)


                self.state = 677
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 678
                self.match(CnsMRParser.Coefficients)
                self.state = 679
                self.number_s()
                self.state = 680
                self.number_s()
                self.state = 681
                self.number_s()
                self.state = 682
                self.number_s()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 5)
                self.state = 684
                self.match(CnsMRParser.Cv)
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 685
                    self.match(CnsMRParser.Equ_op)


                self.state = 688
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 689
                self.match(CnsMRParser.ForceConstant)
                self.state = 690
                self.number_s()
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                    self.state = 691
                    self.number_s()


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 694
                self.match(CnsMRParser.Nrestraints)
                self.state = 696
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 695
                    self.match(CnsMRParser.Equ_op)


                self.state = 698
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 8)
                self.state = 699
                self.match(CnsMRParser.Partition)
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 700
                    self.match(CnsMRParser.Equ_op)


                self.state = 703
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 704
                self.match(CnsMRParser.Potential)
                self.state = 706
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 705
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 708
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 709
                self.match(CnsMRParser.Print)
                self.state = 710
                self.match(CnsMRParser.Threshold)
                self.state = 711
                self.number_s()
                self.state = 718
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 712
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 713
                    self.match(CnsMRParser.Classification)
                    self.state = 715
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 714
                        self.match(CnsMRParser.Equ_op)


                    self.state = 717
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 720
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 723
            self.match(CnsMRParser.Assign)
            self.state = 724
            self.selection()
            self.state = 725
            self.selection()
            self.state = 726
            self.selection()
            self.state = 727
            self.selection()
            self.state = 733
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 728
                self.selection()
                self.state = 729
                self.selection()
                self.state = 730
                self.selection()
                self.state = 731
                self.selection()


            self.state = 735
            self.number()
            self.state = 736
            self.number()
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 737
                self.number()
                self.state = 738
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,0)


        def carbon_shift_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 787
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 742
                self.carbon_shift_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 743
                self.carbon_shift_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 744
                self.match(CnsMRParser.Classification)
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 745
                    self.match(CnsMRParser.Equ_op)


                self.state = 748
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 749
                self.match(CnsMRParser.Expectation)
                self.state = 750
                self.match(CnsMRParser.Integer)
                self.state = 751
                self.match(CnsMRParser.Integer)
                self.state = 752
                self.number_s()
                self.state = 753
                self.number_s()
                self.state = 754
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 756
                self.match(CnsMRParser.ForceConstant)
                self.state = 758
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 757
                    self.match(CnsMRParser.Equ_op)


                self.state = 760
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 761
                self.match(CnsMRParser.Nrestraints)
                self.state = 763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 762
                    self.match(CnsMRParser.Equ_op)


                self.state = 765
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 766
                self.match(CnsMRParser.PhiStep)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 767
                    self.match(CnsMRParser.Equ_op)


                self.state = 770
                self.number_s()
                pass
            elif token in [CnsMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 8)
                self.state = 771
                self.match(CnsMRParser.PsiStep)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 772
                    self.match(CnsMRParser.Equ_op)


                self.state = 775
                self.number_s()
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 776
                self.match(CnsMRParser.Potential)
                self.state = 778
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 777
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 780
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 781
                self.match(CnsMRParser.Print)
                self.state = 782
                self.match(CnsMRParser.Threshold)
                self.state = 783
                self.number_s()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 11)
                self.state = 784
                self.carbon_shift_rcoil()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 785
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 786
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 789
            self.match(CnsMRParser.Assign)
            self.state = 790
            self.selection()
            self.state = 791
            self.selection()
            self.state = 792
            self.selection()
            self.state = 793
            self.selection()
            self.state = 794
            self.selection()
            self.state = 795
            self.number()
            self.state = 796
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(CnsMRParser.Rcoil)
            self.state = 799
            self.selection()
            self.state = 800
            self.number()
            self.state = 801
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(CnsMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 843
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 803
                self.observed()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 804
                self.proton_shift_rcoil()
                pass
            elif token in [CnsMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 805
                self.proton_shift_anisotropy()
                pass
            elif token in [CnsMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 806
                self.proton_shift_amides()
                pass
            elif token in [CnsMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 807
                self.proton_shift_carbons()
                pass
            elif token in [CnsMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 808
                self.proton_shift_nitrogens()
                pass
            elif token in [CnsMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 809
                self.proton_shift_oxygens()
                pass
            elif token in [CnsMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 810
                self.proton_shift_ring_atoms()
                pass
            elif token in [CnsMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 811
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 812
                self.match(CnsMRParser.Classification)
                self.state = 814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 813
                    self.match(CnsMRParser.Equ_op)


                self.state = 816
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 817
                self.match(CnsMRParser.Error)
                self.state = 819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 818
                    self.match(CnsMRParser.Equ_op)


                self.state = 821
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 12)
                self.state = 822
                self.match(CnsMRParser.ForceConstant)
                self.state = 823
                self.number_s()
                self.state = 825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                    self.state = 824
                    self.number_s()


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 827
                self.match(CnsMRParser.Potential)
                self.state = 828
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 829
                self.match(CnsMRParser.Print)
                self.state = 830
                self.match(CnsMRParser.Threshold)
                self.state = 831
                self.number_s()
                self.state = 838
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 832
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 833
                    self.match(CnsMRParser.Classification)
                    self.state = 835
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 834
                        self.match(CnsMRParser.Equ_op)


                    self.state = 837
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 840
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 842
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 845
            self.match(CnsMRParser.Observed)
            self.state = 846
            self.selection()
            self.state = 848
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 847
                self.selection()


            self.state = 850
            self.number()
            self.state = 852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 851
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self):
            return self.getTypedRuleContext(CnsMRParser.NumberContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(CnsMRParser.Rcoil)
            self.state = 855
            self.selection()
            self.state = 856
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 858
            self.match(CnsMRParser.Anisotropy)
            self.state = 859
            self.selection()
            self.state = 860
            self.selection()
            self.state = 861
            self.selection()
            self.state = 862
            self.match(CnsMRParser.Simple_name)
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 863
                self.match(CnsMRParser.Logical)


            self.state = 866
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 868
            self.match(CnsMRParser.Amides)
            self.state = 869
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 871
            self.match(CnsMRParser.Carbon)
            self.state = 872
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.match(CnsMRParser.Nitrogens)
            self.state = 875
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(CnsMRParser.Oxygens)
            self.state = 878
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.match(CnsMRParser.RingAtoms)
            self.state = 881
            self.match(CnsMRParser.Simple_name)
            self.state = 882
            self.selection()
            self.state = 883
            self.selection()
            self.state = 884
            self.selection()
            self.state = 885
            self.selection()
            self.state = 886
            self.selection()
            self.state = 888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 887
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 891
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 976
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 893
                self.conf_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                self.match(CnsMRParser.Classification)
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 895
                    self.match(CnsMRParser.Equ_op)


                self.state = 898
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 899
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 900
                self.match(CnsMRParser.Expectation)
                self.state = 901
                self.match(CnsMRParser.Integer)
                self.state = 903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 902
                    self.match(CnsMRParser.Integer)


                self.state = 906
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 905
                    self.match(CnsMRParser.Integer)


                self.state = 909
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 908
                    self.match(CnsMRParser.Integer)


                self.state = 911
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 912
                self.match(CnsMRParser.Error)
                self.state = 914
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 913
                    self.match(CnsMRParser.Equ_op)


                self.state = 916
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 917
                self.match(CnsMRParser.ForceConstant)
                self.state = 919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 918
                    self.match(CnsMRParser.Equ_op)


                self.state = 921
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 922
                self.match(CnsMRParser.Nrestraints)
                self.state = 924
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 923
                    self.match(CnsMRParser.Equ_op)


                self.state = 926
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 927
                self.match(CnsMRParser.Phase)
                self.state = 928
                self.match(CnsMRParser.Integer)
                self.state = 929
                self.match(CnsMRParser.Integer)
                self.state = 930
                self.match(CnsMRParser.Integer)
                self.state = 934
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 931
                    self.match(CnsMRParser.Integer)
                    self.state = 932
                    self.match(CnsMRParser.Integer)
                    self.state = 933
                    self.match(CnsMRParser.Integer)


                self.state = 939
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 936
                    self.match(CnsMRParser.Integer)
                    self.state = 937
                    self.match(CnsMRParser.Integer)
                    self.state = 938
                    self.match(CnsMRParser.Integer)


                self.state = 944
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 941
                    self.match(CnsMRParser.Integer)
                    self.state = 942
                    self.match(CnsMRParser.Integer)
                    self.state = 943
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 946
                self.match(CnsMRParser.Potential)
                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 947
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 950
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 951
                self.match(CnsMRParser.Print)
                self.state = 952
                self.match(CnsMRParser.Threshold)
                self.state = 953
                self.number_s()
                self.state = 960
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 954
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 955
                    self.match(CnsMRParser.Classification)
                    self.state = 957
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 956
                        self.match(CnsMRParser.Equ_op)


                    self.state = 959
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 962
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 963
                self.match(CnsMRParser.Size)
                self.state = 964
                self.match(CnsMRParser.Dimensions)
                self.state = 965
                self.match(CnsMRParser.Integer)
                self.state = 967
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 966
                    self.match(CnsMRParser.Integer)


                self.state = 970
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 969
                    self.match(CnsMRParser.Integer)


                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 972
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 975
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 978
            self.match(CnsMRParser.Assign)
            self.state = 979
            self.selection()
            self.state = 980
            self.selection()
            self.state = 981
            self.selection()
            self.state = 982
            self.selection()
            self.state = 988
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 983
                self.selection()
                self.state = 984
                self.selection()
                self.state = 985
                self.selection()
                self.state = 986
                self.selection()


            self.state = 995
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 990
                self.selection()
                self.state = 991
                self.selection()
                self.state = 992
                self.selection()
                self.state = 993
                self.selection()


            self.state = 1002
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 997
                self.selection()
                self.state = 998
                self.selection()
                self.state = 999
                self.selection()
                self.state = 1000
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1004
                self.dani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1005
                self.match(CnsMRParser.Classification)
                self.state = 1007
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1006
                    self.match(CnsMRParser.Equ_op)


                self.state = 1009
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1010
                self.match(CnsMRParser.Coefficients)
                self.state = 1011
                self.number_s()
                self.state = 1012
                self.number_s()
                self.state = 1013
                self.number_s()
                self.state = 1014
                self.number_s()
                self.state = 1015
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1017
                self.match(CnsMRParser.ForceConstant)
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1018
                    self.match(CnsMRParser.Equ_op)


                self.state = 1021
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1022
                self.match(CnsMRParser.Nrestraints)
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1023
                    self.match(CnsMRParser.Equ_op)


                self.state = 1026
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1027
                self.match(CnsMRParser.Potential)
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1028
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1031
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1032
                self.match(CnsMRParser.Print)
                self.state = 1033
                self.match(CnsMRParser.Threshold)
                self.state = 1034
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1035
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(CnsMRParser.Assign)
            self.state = 1039
            self.selection()
            self.state = 1040
            self.selection()
            self.state = 1041
            self.selection()
            self.state = 1042
            self.selection()
            self.state = 1043
            self.selection()
            self.state = 1044
            self.selection()
            self.state = 1045
            self.number()
            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0):
                self.state = 1046
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1083
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1049
                self.one_bond_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1050
                self.match(CnsMRParser.Classification)
                self.state = 1052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1051
                    self.match(CnsMRParser.Equ_op)


                self.state = 1054
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1055
                self.match(CnsMRParser.Coefficients)
                self.state = 1056
                self.number_s()
                self.state = 1057
                self.number_s()
                self.state = 1058
                self.number_s()
                self.state = 1059
                self.number_s()
                self.state = 1060
                self.number_s()
                self.state = 1061
                self.number_s()
                self.state = 1062
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1064
                self.match(CnsMRParser.ForceConstant)
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1065
                    self.match(CnsMRParser.Equ_op)


                self.state = 1068
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1069
                self.match(CnsMRParser.Nrestraints)
                self.state = 1071
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1070
                    self.match(CnsMRParser.Equ_op)


                self.state = 1073
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1074
                self.match(CnsMRParser.Potential)
                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1075
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1078
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1079
                self.match(CnsMRParser.Print)
                self.state = 1080
                self.match(CnsMRParser.Threshold)
                self.state = 1081
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1082
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1085
            self.match(CnsMRParser.Assign)
            self.state = 1086
            self.selection()
            self.state = 1087
            self.selection()
            self.state = 1088
            self.selection()
            self.state = 1089
            self.selection()
            self.state = 1090
            self.selection()
            self.state = 1091
            self.selection()
            self.state = 1092
            self.selection()
            self.state = 1093
            self.selection()
            self.state = 1094
            self.number()
            self.state = 1095
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(CnsMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1149
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1097
                self.angle_db_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1098
                self.match(CnsMRParser.Classification)
                self.state = 1100
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1099
                    self.match(CnsMRParser.Equ_op)


                self.state = 1102
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1103
                self.match(CnsMRParser.DerivFlag)
                self.state = 1105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1104
                    self.match(CnsMRParser.Equ_op)


                self.state = 1107
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1108
                self.match(CnsMRParser.Expectation)
                self.state = 1109
                self.match(CnsMRParser.Integer)
                self.state = 1110
                self.match(CnsMRParser.Integer)
                self.state = 1111
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1112
                self.match(CnsMRParser.Error)
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1113
                    self.match(CnsMRParser.Equ_op)


                self.state = 1116
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1117
                self.match(CnsMRParser.ForceConstant)
                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1118
                    self.match(CnsMRParser.Equ_op)


                self.state = 1121
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1122
                self.match(CnsMRParser.Nrestraints)
                self.state = 1124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1123
                    self.match(CnsMRParser.Equ_op)


                self.state = 1126
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1127
                self.match(CnsMRParser.Potential)
                self.state = 1129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1128
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1131
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1132
                self.match(CnsMRParser.Print)
                self.state = 1133
                self.match(CnsMRParser.Threshold)
                self.state = 1134
                self.number_s()
                self.state = 1141
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 1135
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 1136
                    self.match(CnsMRParser.Classification)
                    self.state = 1138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1137
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1140
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1143
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1144
                self.match(CnsMRParser.Size)
                self.state = 1145
                self.match(CnsMRParser.Angle_or_Dihedral)
                self.state = 1146
                self.match(CnsMRParser.Integer)
                self.state = 1147
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1148
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1151
            self.match(CnsMRParser.Assign)
            self.state = 1152
            self.selection()
            self.state = 1153
            self.selection()
            self.state = 1154
            self.selection()
            self.state = 1155
            self.selection()
            self.state = 1156
            self.selection()
            self.state = 1157
            self.selection()
            self.state = 1158
            self.selection()
            self.state = 1159
            self.selection()
            self.state = 1160
            self.selection()
            self.state = 1161
            self.selection()
            self.state = 1162
            self.selection()
            self.state = 1164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1163
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1166
            self.match(CnsMRParser.L_paren)
            self.state = 1167
            self.selection_expression()
            self.state = 1168
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1170
            self.term()
            self.state = 1175
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 1171
                self.match(CnsMRParser.Or_op)
                self.state = 1172
                self.term()
                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1178
            self.factor(0)
            self.state = 1183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1179
                self.match(CnsMRParser.And_op)
                self.state = 1180
                self.factor(0)
                self.state = 1185
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store_1(self):
            return self.getToken(CnsMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(CnsMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(CnsMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(CnsMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(CnsMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(CnsMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(CnsMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(CnsMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(CnsMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1340
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1187
                self.match(CnsMRParser.L_paren)
                self.state = 1188
                self.selection_expression()
                self.state = 1189
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1191
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1192
                self.match(CnsMRParser.Atom)
                self.state = 1193
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1194
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1195
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1196
                self.match(CnsMRParser.Attribute)
                self.state = 1198
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1197
                    self.match(CnsMRParser.Abs)


                self.state = 1200
                self.match(CnsMRParser.Attr_properties)
                self.state = 1201
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1202
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1203
                self.match(CnsMRParser.BondedTo)
                self.state = 1204
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1205
                self.match(CnsMRParser.ByGroup)
                self.state = 1206
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1207
                self.match(CnsMRParser.ByRes)
                self.state = 1208
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1209
                self.match(CnsMRParser.Chemical)
                self.state = 1217
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1210
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1211
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1214
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        self.state = 1212
                        self.match(CnsMRParser.Colon)
                        self.state = 1213
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1216
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1219
                self.match(CnsMRParser.Fbox)
                self.state = 1220
                self.number_f()
                self.state = 1221
                self.number_f()
                self.state = 1222
                self.number_f()
                self.state = 1223
                self.number_f()
                self.state = 1224
                self.number_f()
                self.state = 1225
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1227
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1228
                self.match(CnsMRParser.Id)
                self.state = 1229
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1230
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1231
                self.match(CnsMRParser.Name)
                self.state = 1244
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1232
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1233
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1236
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                    if la_ == 1:
                        self.state = 1234
                        self.match(CnsMRParser.Colon)
                        self.state = 1235
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1238
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1241
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                    if la_ == 1:
                        self.state = 1239
                        self.match(CnsMRParser.Colon)
                        self.state = 1240
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1243
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1246
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1247
                self.match(CnsMRParser.Not_op)
                self.state = 1248
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1249
                self.match(CnsMRParser.Point)
                self.state = 1250
                self.match(CnsMRParser.L_paren)
                self.state = 1251
                self.number_f()
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1252
                    self.match(CnsMRParser.Comma)


                self.state = 1255
                self.number_f()
                self.state = 1257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1256
                    self.match(CnsMRParser.Comma)


                self.state = 1259
                self.number_f()
                self.state = 1260
                self.match(CnsMRParser.R_paren)
                self.state = 1261
                self.match(CnsMRParser.Cut)
                self.state = 1262
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1264
                self.match(CnsMRParser.Point)
                self.state = 1265
                self.match(CnsMRParser.L_paren)
                self.state = 1266
                self.match(CnsMRParser.Tail)
                self.state = 1268
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1267
                    self.match(CnsMRParser.Equ_op)


                self.state = 1270
                self.selection()
                self.state = 1272
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1271
                    self.match(CnsMRParser.Comma)


                self.state = 1279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1274
                    self.match(CnsMRParser.Head)
                    self.state = 1276
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1275
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1278
                    self.selection()


                self.state = 1281
                self.match(CnsMRParser.R_paren)
                self.state = 1282
                self.match(CnsMRParser.Cut)
                self.state = 1283
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1285
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1286
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1287
                self.match(CnsMRParser.Residue)
                self.state = 1295
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1288
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1289
                    self.match(CnsMRParser.Integer)
                    self.state = 1292
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                    if la_ == 1:
                        self.state = 1290
                        self.match(CnsMRParser.Colon)
                        self.state = 1291
                        self.match(CnsMRParser.Integer)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1294
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1297
                self.match(CnsMRParser.Resname)
                self.state = 1305
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1298
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1299
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1302
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                    if la_ == 1:
                        self.state = 1300
                        self.match(CnsMRParser.Colon)
                        self.state = 1301
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1304
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1307
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1320
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1308
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1309
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1312
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                    if la_ == 1:
                        self.state = 1310
                        self.match(CnsMRParser.Colon)
                        self.state = 1311
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1314
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1317
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                    if la_ == 1:
                        self.state = 1315
                        self.match(CnsMRParser.Colon)
                        self.state = 1316
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1319
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1322
                self.match(CnsMRParser.Sfbox)
                self.state = 1323
                self.number_f()
                self.state = 1324
                self.number_f()
                self.state = 1325
                self.number_f()
                self.state = 1326
                self.number_f()
                self.state = 1327
                self.number_f()
                self.state = 1328
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1330
                self.match(CnsMRParser.Store_1)
                pass

            elif la_ == 25:
                self.state = 1331
                self.match(CnsMRParser.Store_2)
                pass

            elif la_ == 26:
                self.state = 1332
                self.match(CnsMRParser.Store_3)
                pass

            elif la_ == 27:
                self.state = 1333
                self.match(CnsMRParser.Store_4)
                pass

            elif la_ == 28:
                self.state = 1334
                self.match(CnsMRParser.Store_5)
                pass

            elif la_ == 29:
                self.state = 1335
                self.match(CnsMRParser.Store_6)
                pass

            elif la_ == 30:
                self.state = 1336
                self.match(CnsMRParser.Store_7)
                pass

            elif la_ == 31:
                self.state = 1337
                self.match(CnsMRParser.Store_8)
                pass

            elif la_ == 32:
                self.state = 1338
                self.match(CnsMRParser.Store_9)
                pass

            elif la_ == 33:
                self.state = 1339
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1350
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1348
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1342
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1343
                        self.match(CnsMRParser.Around)
                        self.state = 1344
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1345
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1346
                        self.match(CnsMRParser.Saround)
                        self.state = 1347
                        self.number_f()
                        pass

             
                self.state = 1352
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1353
            _la = self._input.LA(1)
            if not(((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1355
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1357
            _la = self._input.LA(1)
            if not(((((_la - 136)) & ~0x3f) == 0 and ((1 << (_la - 136)) & ((1 << (CnsMRParser.Integer - 136)) | (1 << (CnsMRParser.Real - 136)) | (1 << (CnsMRParser.Symbol_name - 136)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = CnsMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1359
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CnsMRParser.Flags, 0)

        def Include(self):
            return self.getToken(CnsMRParser.Include, 0)

        def End_F(self):
            return self.getToken(CnsMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(CnsMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Class_name)
            else:
                return self.getToken(CnsMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(CnsMRParser.Any_class, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = CnsMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1361
            self.match(CnsMRParser.Flags)
            self.state = 1372
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Exclude:
                self.state = 1362
                self.match(CnsMRParser.Exclude)
                self.state = 1370
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Include, CnsMRParser.Class_name]:
                    self.state = 1366
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CnsMRParser.Class_name:
                        self.state = 1363
                        self.match(CnsMRParser.Class_name)
                        self.state = 1368
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CnsMRParser.Any_class]:
                    self.state = 1369
                    self.match(CnsMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1374
            self.match(CnsMRParser.Include)
            self.state = 1378
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Class_name:
                self.state = 1375
                self.match(CnsMRParser.Class_name)
                self.state = 1380
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1381
            self.match(CnsMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(CnsMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = CnsMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1383
            self.match(CnsMRParser.Vector)
            self.state = 1384
            self.vector_mode()
            self.state = 1385
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(CnsMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(CnsMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(CnsMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = CnsMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 1393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Do_Lp, CnsMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1387
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Do_Lp or _la==CnsMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1388
                self.vector_expression()
                self.state = 1389
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1391
                self.match(CnsMRParser.Show)
                self.state = 1392
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = CnsMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self.match(CnsMRParser.Atom_properties_VE)
            self.state = 1398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Equ_op_VE:
                self.state = 1396
                self.match(CnsMRParser.Equ_op_VE)
                self.state = 1397
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = CnsMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.vflc()
            self.state = 1403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (CnsMRParser.Add_op_VE - 182)) | (1 << (CnsMRParser.Sub_op_VE - 182)) | (1 << (CnsMRParser.Mul_op_VE - 182)) | (1 << (CnsMRParser.Div_op_VE - 182)) | (1 << (CnsMRParser.Exp_op_VE - 182)))) != 0):
                self.state = 1401
                _la = self._input.LA(1)
                if not(((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (CnsMRParser.Add_op_VE - 182)) | (1 << (CnsMRParser.Sub_op_VE - 182)) | (1 << (CnsMRParser.Mul_op_VE - 182)) | (1 << (CnsMRParser.Div_op_VE - 182)) | (1 << (CnsMRParser.Exp_op_VE - 182)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1402
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(CnsMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(CnsMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(CnsMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(CnsMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = CnsMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vflc)
        try:
            self.state = 1412
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1405
                self.match(CnsMRParser.Atom_properties_VE)
                pass
            elif token in [CnsMRParser.Abs_VE, CnsMRParser.Acos_VE, CnsMRParser.Cos_VE, CnsMRParser.Decode_VE, CnsMRParser.Encode_VE, CnsMRParser.Exp_VE, CnsMRParser.Gauss_VE, CnsMRParser.Heavy_VE, CnsMRParser.Int_VE, CnsMRParser.Log10_VE, CnsMRParser.Log_VE, CnsMRParser.Max_VE, CnsMRParser.Maxw_VE, CnsMRParser.Min_VE, CnsMRParser.Mod_VE, CnsMRParser.Norm_VE, CnsMRParser.Random_VE, CnsMRParser.Sign_VE, CnsMRParser.Sin_VE, CnsMRParser.Sqrt_VE, CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1406
                self.vector_func_call()
                pass
            elif token in [CnsMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1407
                self.match(CnsMRParser.Integer_VE)
                pass
            elif token in [CnsMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1408
                self.match(CnsMRParser.Real_VE)
                pass
            elif token in [CnsMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1409
                self.match(CnsMRParser.Simple_name_VE)
                pass
            elif token in [CnsMRParser.Symbol_name_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1410
                self.match(CnsMRParser.Symbol_name_VE)
                pass
            elif token in [CnsMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1411
                self.match(CnsMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(CnsMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(CnsMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(CnsMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(CnsMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(CnsMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(CnsMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(CnsMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(CnsMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(CnsMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(CnsMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(CnsMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(CnsMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(CnsMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma_VE)
            else:
                return self.getToken(CnsMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(CnsMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(CnsMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(CnsMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(CnsMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(CnsMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(CnsMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(CnsMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(CnsMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(CnsMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = CnsMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1533
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1414
                self.match(CnsMRParser.Abs_VE)
                self.state = 1415
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1416
                self.vflc()
                self.state = 1417
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1419
                self.match(CnsMRParser.Acos_VE)
                self.state = 1420
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1421
                self.vflc()
                self.state = 1422
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1424
                self.match(CnsMRParser.Cos_VE)
                self.state = 1425
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1426
                self.vflc()
                self.state = 1427
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1429
                self.match(CnsMRParser.Decode_VE)
                self.state = 1430
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1431
                self.vflc()
                self.state = 1432
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1434
                self.match(CnsMRParser.Encode_VE)
                self.state = 1435
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1436
                self.vflc()
                self.state = 1437
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1439
                self.match(CnsMRParser.Exp_VE)
                self.state = 1440
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1441
                self.vflc()
                self.state = 1442
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1444
                self.match(CnsMRParser.Gauss_VE)
                self.state = 1445
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1446
                self.vflc()
                self.state = 1447
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1449
                self.match(CnsMRParser.Heavy_VE)
                self.state = 1450
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1451
                self.vflc()
                self.state = 1452
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1454
                self.match(CnsMRParser.Int_VE)
                self.state = 1455
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1456
                self.vflc()
                self.state = 1457
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1459
                self.match(CnsMRParser.Log10_VE)
                self.state = 1460
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1461
                self.vflc()
                self.state = 1462
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1464
                self.match(CnsMRParser.Log_VE)
                self.state = 1465
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1466
                self.vflc()
                self.state = 1467
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1469
                self.match(CnsMRParser.Max_VE)
                self.state = 1470
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1471
                self.vflc()
                self.state = 1476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1472
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1473
                    self.vflc()
                    self.state = 1478
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1479
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1481
                self.match(CnsMRParser.Maxw_VE)
                self.state = 1482
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1483
                self.vflc()
                self.state = 1484
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1486
                self.match(CnsMRParser.Min_VE)
                self.state = 1487
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1488
                self.vflc()
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1489
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1490
                    self.vflc()
                    self.state = 1495
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1496
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1498
                self.match(CnsMRParser.Mod_VE)
                self.state = 1499
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1500
                self.vflc()
                self.state = 1501
                self.match(CnsMRParser.Comma_VE)
                self.state = 1502
                self.vflc()
                self.state = 1503
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1505
                self.match(CnsMRParser.Norm_VE)
                self.state = 1506
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1507
                self.vflc()
                self.state = 1508
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1510
                self.match(CnsMRParser.Random_VE)
                self.state = 1511
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1512
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1513
                self.match(CnsMRParser.Sign_VE)
                self.state = 1514
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1515
                self.vflc()
                self.state = 1516
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1518
                self.match(CnsMRParser.Sin_VE)
                self.state = 1519
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1520
                self.vflc()
                self.state = 1521
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1523
                self.match(CnsMRParser.Sqrt_VE)
                self.state = 1524
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1525
                self.vflc()
                self.state = 1526
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1528
                self.match(CnsMRParser.Tan_VE)
                self.state = 1529
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1530
                self.vflc()
                self.state = 1531
                self.match(CnsMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(CnsMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(CnsMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(CnsMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(CnsMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(CnsMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(CnsMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(CnsMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(CnsMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(CnsMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(CnsMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = CnsMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1535
            _la = self._input.LA(1)
            if not(((((_la - 221)) & ~0x3f) == 0 and ((1 << (_la - 221)) & ((1 << (CnsMRParser.Average_VS - 221)) | (1 << (CnsMRParser.Element_VS - 221)) | (1 << (CnsMRParser.Max_VS - 221)) | (1 << (CnsMRParser.Min_VS - 221)) | (1 << (CnsMRParser.Norm_VS - 221)) | (1 << (CnsMRParser.Rms_VS - 221)) | (1 << (CnsMRParser.Sum_VS - 221)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1536
            self.match(CnsMRParser.L_paren_VS)
            self.state = 1537
            self.match(CnsMRParser.Atom_properties_VS)
            self.state = 1538
            self.match(CnsMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(CnsMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = CnsMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1540
            self.match(CnsMRParser.Evaluate_Lp)
            self.state = 1541
            self.match(CnsMRParser.Symbol_name_VE)
            self.state = 1542
            self.match(CnsMRParser.Equ_op_VE)
            self.state = 1543
            self.evaluate_operation()
            self.state = 1544
            self.match(CnsMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = CnsMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1546
            self.vflc()
            self.state = 1549
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (CnsMRParser.Add_op_VE - 182)) | (1 << (CnsMRParser.Sub_op_VE - 182)) | (1 << (CnsMRParser.Mul_op_VE - 182)) | (1 << (CnsMRParser.Div_op_VE - 182)) | (1 << (CnsMRParser.Exp_op_VE - 182)))) != 0):
                self.state = 1547
                _la = self._input.LA(1)
                if not(((((_la - 182)) & ~0x3f) == 0 and ((1 << (_la - 182)) & ((1 << (CnsMRParser.Add_op_VE - 182)) | (1 << (CnsMRParser.Sub_op_VE - 182)) | (1 << (CnsMRParser.Mul_op_VE - 182)) | (1 << (CnsMRParser.Div_op_VE - 182)) | (1 << (CnsMRParser.Exp_op_VE - 182)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1548
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign_loop" ):
                listener.enterNoe_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign_loop" ):
                listener.exitNoe_assign_loop(self)




    def noe_assign_loop(self):

        localctx = CnsMRParser.Noe_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_noe_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1551
            self.match(CnsMRParser.For)
            self.state = 1552
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1553
            self.match(CnsMRParser.In_CF)
            self.state = 1554
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1573
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1555
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1561
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1566
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1567
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1572
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1575
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1576
            self.match(CnsMRParser.Loop)
            self.state = 1577
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1580
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1578
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1579
                    self.noe_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1584
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1585
            self.match(CnsMRParser.End)
            self.state = 1586
            self.match(CnsMRParser.Loop)
            self.state = 1587
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = CnsMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1589
            self.match(CnsMRParser.For)
            self.state = 1590
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1591
            self.match(CnsMRParser.In_CF)
            self.state = 1592
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1611
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1593
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1598
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1599
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1604
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1608
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1605
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1610
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1613
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1614
            self.match(CnsMRParser.Loop)
            self.state = 1615
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1618
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1616
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1617
                    self.dihedral_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1622
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1623
            self.match(CnsMRParser.End)
            self.state = 1624
            self.match(CnsMRParser.Loop)
            self.state = 1625
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign_loop" ):
                listener.enterSani_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign_loop" ):
                listener.exitSani_assign_loop(self)




    def sani_assign_loop(self):

        localctx = CnsMRParser.Sani_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_sani_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1627
            self.match(CnsMRParser.For)
            self.state = 1628
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1629
            self.match(CnsMRParser.In_CF)
            self.state = 1630
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1631
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1636
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1637
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1643
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1648
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1651
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1652
            self.match(CnsMRParser.Loop)
            self.state = 1653
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1658
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1656
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1654
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1655
                    self.sani_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1660
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1661
            self.match(CnsMRParser.End)
            self.state = 1662
            self.match(CnsMRParser.Loop)
            self.state = 1663
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign_loop" ):
                listener.enterCoup_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign_loop" ):
                listener.exitCoup_assign_loop(self)




    def coup_assign_loop(self):

        localctx = CnsMRParser.Coup_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_coup_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1665
            self.match(CnsMRParser.For)
            self.state = 1666
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1667
            self.match(CnsMRParser.In_CF)
            self.state = 1668
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1687
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 1672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1669
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1675
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1680
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1681
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1686
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1689
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1690
            self.match(CnsMRParser.Loop)
            self.state = 1691
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1694
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1692
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1693
                    self.coup_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1698
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1699
            self.match(CnsMRParser.End)
            self.state = 1700
            self.match(CnsMRParser.Loop)
            self.state = 1701
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign_loop" ):
                listener.enterCarbon_shift_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign_loop" ):
                listener.exitCarbon_shift_assign_loop(self)




    def carbon_shift_assign_loop(self):

        localctx = CnsMRParser.Carbon_shift_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_carbon_shift_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1703
            self.match(CnsMRParser.For)
            self.state = 1704
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1705
            self.match(CnsMRParser.In_CF)
            self.state = 1706
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1725
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1707
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1712
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1713
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1718
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1719
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1727
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1728
            self.match(CnsMRParser.Loop)
            self.state = 1729
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1732
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1730
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1731
                    self.carbon_shift_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1736
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1737
            self.match(CnsMRParser.End)
            self.state = 1738
            self.match(CnsMRParser.Loop)
            self.state = 1739
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[51] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




