# Generated from CnsMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,218,1486,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,5,0,150,8,0,10,0,12,0,153,9,0,1,0,1,0,1,1,1,1,5,1,159,8,1,10,
        1,12,1,162,9,1,1,1,1,1,1,2,3,2,167,8,2,1,2,1,2,5,2,171,8,2,10,2,
        12,2,174,9,2,1,2,1,2,1,3,3,3,179,8,3,1,3,1,3,5,3,183,8,3,10,3,12,
        3,186,9,3,1,3,1,3,1,4,3,4,191,8,4,1,4,1,4,5,4,195,8,4,10,4,12,4,
        198,9,4,1,4,1,4,1,5,1,5,5,5,204,8,5,10,5,12,5,207,9,5,1,5,1,5,1,
        6,1,6,5,6,213,8,6,10,6,12,6,216,9,6,1,6,1,6,1,7,1,7,5,7,222,8,7,
        10,7,12,7,225,9,7,1,7,1,7,1,8,1,8,5,8,231,8,8,10,8,12,8,234,9,8,
        1,8,1,8,1,9,1,9,5,9,240,8,9,10,9,12,9,243,9,9,1,9,1,9,1,10,1,10,
        5,10,249,8,10,10,10,12,10,252,9,10,1,10,1,10,1,11,1,11,5,11,258,
        8,11,10,11,12,11,261,9,11,1,11,1,11,1,12,1,12,5,12,267,8,12,10,12,
        12,12,270,9,12,1,12,1,12,1,13,1,13,3,13,276,8,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,291,8,13,
        1,13,1,13,1,13,3,13,296,8,13,1,13,1,13,1,13,1,13,1,13,3,13,303,8,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,312,8,13,1,13,1,13,1,
        13,3,13,317,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,326,8,13,
        10,13,12,13,329,9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        3,13,340,8,13,1,13,1,13,1,13,1,13,3,13,346,8,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,359,8,13,1,13,1,13,1,
        13,5,13,364,8,13,10,13,12,13,367,9,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,5,13,391,8,13,10,13,12,13,394,9,13,1,13,1,13,1,
        13,3,13,399,8,13,1,13,3,13,402,8,13,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,5,14,411,8,14,10,14,12,14,414,9,14,1,14,1,14,1,14,1,14,5,14,
        420,8,14,10,14,12,14,423,9,14,1,15,1,15,3,15,427,8,15,1,15,1,15,
        1,15,3,15,432,8,15,1,15,1,15,1,15,1,15,1,15,3,15,439,8,15,1,16,1,
        16,3,16,443,8,16,1,16,1,16,1,16,3,16,448,8,16,1,16,1,16,1,16,3,16,
        453,8,16,1,16,1,16,1,16,3,16,458,8,16,1,16,1,16,1,16,3,16,463,8,
        16,1,16,1,16,1,16,3,16,468,8,16,1,16,1,16,1,16,3,16,473,8,16,1,16,
        3,16,476,8,16,1,17,1,17,1,17,3,17,481,8,17,1,17,1,17,1,17,3,17,486,
        8,17,1,17,1,17,1,17,3,17,491,8,17,1,17,1,17,1,17,1,17,3,17,497,8,
        17,1,17,1,17,3,17,501,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,18,1,19,1,19,5,19,515,8,19,10,19,12,19,518,9,19,1,19,1,
        19,1,19,3,19,523,8,19,1,20,1,20,3,20,527,8,20,1,20,1,20,1,20,3,20,
        532,8,20,1,20,3,20,535,8,20,1,21,1,21,3,21,539,8,21,1,21,1,21,1,
        21,3,21,544,8,21,1,21,1,21,1,21,3,21,549,8,21,1,21,1,21,3,21,553,
        8,21,1,21,1,21,1,21,1,21,3,21,559,8,21,1,21,1,21,3,21,563,8,21,1,
        21,1,21,3,21,567,8,21,1,21,3,21,570,8,21,3,21,572,8,21,1,21,1,21,
        3,21,576,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,3,23,
        587,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,597,8,23,1,
        23,1,23,1,23,3,23,602,8,23,1,23,1,23,1,23,3,23,607,8,23,1,23,1,23,
        1,23,1,23,1,23,3,23,614,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,3,24,626,8,24,1,25,1,25,1,25,3,25,631,8,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,642,8,25,1,25,1,25,1,
        25,1,25,3,25,648,8,25,1,25,1,25,3,25,652,8,25,1,25,1,25,1,25,3,25,
        657,8,25,1,25,1,25,1,25,3,25,662,8,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,3,25,671,8,25,1,25,3,25,674,8,25,1,25,3,25,677,8,25,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,689,8,26,1,26,
        1,26,1,26,1,26,1,26,3,26,696,8,26,1,27,1,27,1,27,3,27,701,8,27,1,
        27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,713,8,27,1,
        27,1,27,1,27,3,27,718,8,27,1,27,1,27,1,27,3,27,723,8,27,1,27,1,27,
        1,27,3,27,728,8,27,1,27,1,27,1,27,3,27,733,8,27,1,27,1,27,1,27,1,
        27,1,27,1,27,1,27,3,27,742,8,27,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,3,30,769,8,30,1,30,1,30,1,30,3,30,774,
        8,30,1,30,1,30,1,30,1,30,3,30,780,8,30,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,3,30,790,8,30,1,30,3,30,793,8,30,1,30,1,30,1,30,3,
        30,798,8,30,1,31,1,31,1,31,3,31,803,8,31,1,31,1,31,3,31,807,8,31,
        1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,819,8,33,
        1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,
        1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,843,8,38,1,39,
        1,39,1,39,1,40,1,40,1,40,3,40,851,8,40,1,40,1,40,1,40,1,40,1,40,
        3,40,858,8,40,1,40,3,40,861,8,40,1,40,3,40,864,8,40,1,40,1,40,1,
        40,3,40,869,8,40,1,40,1,40,1,40,3,40,874,8,40,1,40,1,40,1,40,3,40,
        879,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,889,8,40,1,
        40,1,40,1,40,3,40,894,8,40,1,40,1,40,1,40,3,40,899,8,40,1,40,1,40,
        3,40,903,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,912,8,40,1,
        40,3,40,915,8,40,1,40,1,40,1,40,1,40,1,40,3,40,922,8,40,1,40,3,40,
        925,8,40,1,40,3,40,928,8,40,1,40,3,40,931,8,40,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,943,8,41,1,41,1,41,1,41,1,
        41,1,41,3,41,950,8,41,1,41,1,41,1,41,1,41,1,41,3,41,957,8,41,1,42,
        1,42,1,42,3,42,962,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,3,42,974,8,42,1,42,1,42,1,42,3,42,979,8,42,1,42,1,42,1,
        42,3,42,984,8,42,1,42,1,42,1,42,1,42,1,42,3,42,991,8,42,1,43,1,43,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,3,44,1006,
        8,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        3,44,1020,8,44,1,44,1,44,1,44,3,44,1025,8,44,1,44,1,44,1,44,3,44,
        1030,8,44,1,44,1,44,1,44,1,44,1,44,3,44,1037,8,44,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,
        1054,8,46,1,46,1,46,1,46,3,46,1059,8,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,3,46,1068,8,46,1,46,1,46,1,46,3,46,1073,8,46,1,46,1,46,
        1,46,3,46,1078,8,46,1,46,1,46,1,46,3,46,1083,8,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,3,46,1092,8,46,1,46,3,46,1095,8,46,1,46,1,46,
        1,46,1,46,1,46,1,46,3,46,1103,8,46,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1118,8,47,1,48,1,48,1,48,
        1,48,1,49,1,49,1,49,5,49,1127,8,49,10,49,12,49,1130,9,49,1,50,1,
        50,1,50,5,50,1135,8,50,10,50,12,50,1138,9,50,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1152,8,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,
        1168,8,51,3,51,1170,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1189,8,51,3,51,
        1191,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1200,8,51,1,51,
        1,51,3,51,1204,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        3,51,1215,8,51,1,51,1,51,3,51,1219,8,51,1,51,1,51,3,51,1223,8,51,
        1,51,3,51,1226,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,3,51,1239,8,51,3,51,1241,8,51,1,51,1,51,1,51,1,51,1,51,
        3,51,1248,8,51,3,51,1250,8,51,1,51,1,51,1,51,1,51,1,51,3,51,1257,
        8,51,1,51,1,51,1,51,3,51,1262,8,51,3,51,1264,8,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,3,51,1284,8,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,1292,
        8,51,10,51,12,51,1295,9,51,1,52,1,52,1,53,1,53,1,54,1,54,1,55,1,
        55,1,56,1,56,1,56,5,56,1308,8,56,10,56,12,56,1311,9,56,1,56,3,56,
        1314,8,56,3,56,1316,8,56,1,56,1,56,5,56,1320,8,56,10,56,12,56,1323,
        9,56,1,56,1,56,1,57,1,57,1,57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,
        3,58,1337,8,58,1,59,1,59,1,59,3,59,1342,8,59,1,60,1,60,1,60,5,60,
        1347,8,60,10,60,12,60,1350,9,60,1,61,1,61,1,61,1,61,1,61,1,61,3,
        61,1358,8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,1420,8,
        62,10,62,12,62,1423,9,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,5,62,1437,8,62,10,62,12,62,1440,9,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1479,8,62,1,
        63,1,63,1,63,1,63,1,63,1,63,3,327,365,392,1,102,64,0,2,4,6,8,10,
        12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,
        56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
        100,102,104,106,108,110,112,114,116,118,120,122,124,126,0,6,1,0,
        137,138,2,0,133,133,139,139,2,0,133,133,135,135,1,0,123,124,1,0,
        174,178,1,0,210,216,1779,0,151,1,0,0,0,2,156,1,0,0,0,4,166,1,0,0,
        0,6,178,1,0,0,0,8,190,1,0,0,0,10,201,1,0,0,0,12,210,1,0,0,0,14,219,
        1,0,0,0,16,228,1,0,0,0,18,237,1,0,0,0,20,246,1,0,0,0,22,255,1,0,
        0,0,24,264,1,0,0,0,26,401,1,0,0,0,28,403,1,0,0,0,30,438,1,0,0,0,
        32,475,1,0,0,0,34,500,1,0,0,0,36,502,1,0,0,0,38,522,1,0,0,0,40,534,
        1,0,0,0,42,575,1,0,0,0,44,577,1,0,0,0,46,613,1,0,0,0,48,615,1,0,
        0,0,50,676,1,0,0,0,52,678,1,0,0,0,54,741,1,0,0,0,56,743,1,0,0,0,
        58,752,1,0,0,0,60,797,1,0,0,0,62,799,1,0,0,0,64,808,1,0,0,0,66,812,
        1,0,0,0,68,822,1,0,0,0,70,825,1,0,0,0,72,828,1,0,0,0,74,831,1,0,
        0,0,76,834,1,0,0,0,78,844,1,0,0,0,80,930,1,0,0,0,82,932,1,0,0,0,
        84,990,1,0,0,0,86,992,1,0,0,0,88,1036,1,0,0,0,90,1038,1,0,0,0,92,
        1102,1,0,0,0,94,1104,1,0,0,0,96,1119,1,0,0,0,98,1123,1,0,0,0,100,
        1131,1,0,0,0,102,1283,1,0,0,0,104,1296,1,0,0,0,106,1298,1,0,0,0,
        108,1300,1,0,0,0,110,1302,1,0,0,0,112,1304,1,0,0,0,114,1326,1,0,
        0,0,116,1336,1,0,0,0,118,1338,1,0,0,0,120,1343,1,0,0,0,122,1357,
        1,0,0,0,124,1478,1,0,0,0,126,1480,1,0,0,0,128,150,3,2,1,0,129,150,
        3,4,2,0,130,150,3,6,3,0,131,150,3,8,4,0,132,150,3,10,5,0,133,150,
        3,12,6,0,134,150,3,14,7,0,135,150,3,16,8,0,136,150,3,18,9,0,137,
        150,3,20,10,0,138,150,3,22,11,0,139,150,3,24,12,0,140,150,3,112,
        56,0,141,150,3,114,57,0,142,150,3,28,14,0,143,150,3,36,18,0,144,
        150,3,48,24,0,145,150,3,38,19,0,146,150,3,44,22,0,147,150,3,52,26,
        0,148,150,3,56,28,0,149,128,1,0,0,0,149,129,1,0,0,0,149,130,1,0,
        0,0,149,131,1,0,0,0,149,132,1,0,0,0,149,133,1,0,0,0,149,134,1,0,
        0,0,149,135,1,0,0,0,149,136,1,0,0,0,149,137,1,0,0,0,149,138,1,0,
        0,0,149,139,1,0,0,0,149,140,1,0,0,0,149,141,1,0,0,0,149,142,1,0,
        0,0,149,143,1,0,0,0,149,144,1,0,0,0,149,145,1,0,0,0,149,146,1,0,
        0,0,149,147,1,0,0,0,149,148,1,0,0,0,150,153,1,0,0,0,151,149,1,0,
        0,0,151,152,1,0,0,0,152,154,1,0,0,0,153,151,1,0,0,0,154,155,5,0,
        0,1,155,1,1,0,0,0,156,160,5,3,0,0,157,159,3,26,13,0,158,157,1,0,
        0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,1,0,0,0,161,163,1,0,
        0,0,162,160,1,0,0,0,163,164,5,2,0,0,164,3,1,0,0,0,165,167,5,48,0,
        0,166,165,1,0,0,0,166,167,1,0,0,0,167,168,1,0,0,0,168,172,5,49,0,
        0,169,171,3,34,17,0,170,169,1,0,0,0,171,174,1,0,0,0,172,170,1,0,
        0,0,172,173,1,0,0,0,173,175,1,0,0,0,174,172,1,0,0,0,175,176,5,2,
        0,0,176,5,1,0,0,0,177,179,5,48,0,0,178,177,1,0,0,0,178,179,1,0,0,
        0,179,180,1,0,0,0,180,184,5,52,0,0,181,183,3,38,19,0,182,181,1,0,
        0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,187,1,0,
        0,0,186,184,1,0,0,0,187,188,5,2,0,0,188,7,1,0,0,0,189,191,5,48,0,
        0,190,189,1,0,0,0,190,191,1,0,0,0,191,192,1,0,0,0,192,196,5,56,0,
        0,193,195,3,42,21,0,194,193,1,0,0,0,195,198,1,0,0,0,196,194,1,0,
        0,0,196,197,1,0,0,0,197,199,1,0,0,0,198,196,1,0,0,0,199,200,5,2,
        0,0,200,9,1,0,0,0,201,205,5,59,0,0,202,204,3,46,23,0,203,202,1,0,
        0,0,204,207,1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,208,1,0,
        0,0,207,205,1,0,0,0,208,209,5,2,0,0,209,11,1,0,0,0,210,214,5,62,
        0,0,211,213,3,50,25,0,212,211,1,0,0,0,213,216,1,0,0,0,214,212,1,
        0,0,0,214,215,1,0,0,0,215,217,1,0,0,0,216,214,1,0,0,0,217,218,5,
        2,0,0,218,13,1,0,0,0,219,223,5,63,0,0,220,222,3,54,27,0,221,220,
        1,0,0,0,222,225,1,0,0,0,223,221,1,0,0,0,223,224,1,0,0,0,224,226,
        1,0,0,0,225,223,1,0,0,0,226,227,5,2,0,0,227,15,1,0,0,0,228,232,5,
        69,0,0,229,231,3,60,30,0,230,229,1,0,0,0,231,234,1,0,0,0,232,230,
        1,0,0,0,232,233,1,0,0,0,233,235,1,0,0,0,234,232,1,0,0,0,235,236,
        5,2,0,0,236,17,1,0,0,0,237,241,5,78,0,0,238,240,3,80,40,0,239,238,
        1,0,0,0,240,243,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,244,
        1,0,0,0,243,241,1,0,0,0,244,245,5,2,0,0,245,19,1,0,0,0,246,250,5,
        83,0,0,247,249,3,84,42,0,248,247,1,0,0,0,249,252,1,0,0,0,250,248,
        1,0,0,0,250,251,1,0,0,0,251,253,1,0,0,0,252,250,1,0,0,0,253,254,
        5,2,0,0,254,21,1,0,0,0,255,259,5,84,0,0,256,258,3,88,44,0,257,256,
        1,0,0,0,258,261,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,262,
        1,0,0,0,261,259,1,0,0,0,262,263,5,2,0,0,263,23,1,0,0,0,264,268,5,
        85,0,0,265,267,3,92,46,0,266,265,1,0,0,0,267,270,1,0,0,0,268,266,
        1,0,0,0,268,269,1,0,0,0,269,271,1,0,0,0,270,268,1,0,0,0,271,272,
        5,2,0,0,272,25,1,0,0,0,273,275,5,4,0,0,274,276,5,143,0,0,275,274,
        1,0,0,0,275,276,1,0,0,0,276,277,1,0,0,0,277,402,5,164,0,0,278,402,
        3,28,14,0,279,280,5,6,0,0,280,281,5,137,0,0,281,402,3,108,54,0,282,
        283,5,7,0,0,283,284,5,159,0,0,284,402,5,158,0,0,285,286,5,8,0,0,
        286,287,5,137,0,0,287,402,3,108,54,0,288,290,5,9,0,0,289,291,5,143,
        0,0,290,289,1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,402,3,108,
        54,0,293,295,5,10,0,0,294,296,5,143,0,0,295,294,1,0,0,0,295,296,
        1,0,0,0,296,297,1,0,0,0,297,402,5,137,0,0,298,299,5,11,0,0,299,402,
        5,137,0,0,300,302,5,12,0,0,301,303,5,143,0,0,302,301,1,0,0,0,302,
        303,1,0,0,0,303,304,1,0,0,0,304,402,5,133,0,0,305,306,5,13,0,0,306,
        402,5,35,0,0,307,308,5,13,0,0,308,309,5,36,0,0,309,311,5,37,0,0,
        310,312,5,143,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,313,1,0,0,
        0,313,314,3,108,54,0,314,316,5,38,0,0,315,317,5,143,0,0,316,315,
        1,0,0,0,316,317,1,0,0,0,317,318,1,0,0,0,318,319,3,108,54,0,319,402,
        1,0,0,0,320,321,5,14,0,0,321,322,5,137,0,0,322,323,5,137,0,0,323,
        402,3,108,54,0,324,326,5,15,0,0,325,324,1,0,0,0,326,329,1,0,0,0,
        327,328,1,0,0,0,327,325,1,0,0,0,328,330,1,0,0,0,329,327,1,0,0,0,
        330,402,5,2,0,0,331,332,5,16,0,0,332,333,5,137,0,0,333,402,5,133,
        0,0,334,335,5,17,0,0,335,336,5,137,0,0,336,402,5,133,0,0,337,339,
        5,18,0,0,338,340,5,143,0,0,339,338,1,0,0,0,339,340,1,0,0,0,340,341,
        1,0,0,0,341,402,5,133,0,0,342,402,5,19,0,0,343,345,5,20,0,0,344,
        346,5,143,0,0,345,344,1,0,0,0,345,346,1,0,0,0,346,347,1,0,0,0,347,
        402,5,133,0,0,348,349,5,21,0,0,349,350,5,162,0,0,350,402,5,161,0,
        0,351,352,5,22,0,0,352,353,3,30,15,0,353,354,5,2,0,0,354,402,1,0,
        0,0,355,356,5,23,0,0,356,358,5,25,0,0,357,359,5,143,0,0,358,357,
        1,0,0,0,358,359,1,0,0,0,359,360,1,0,0,0,360,402,3,108,54,0,361,365,
        5,24,0,0,362,364,5,137,0,0,363,362,1,0,0,0,364,367,1,0,0,0,365,366,
        1,0,0,0,365,363,1,0,0,0,366,368,1,0,0,0,367,365,1,0,0,0,368,402,
        5,2,0,0,369,402,5,26,0,0,370,371,5,27,0,0,371,372,5,137,0,0,372,
        402,3,108,54,0,373,374,5,28,0,0,374,375,5,137,0,0,375,402,3,108,
        54,0,376,377,5,29,0,0,377,378,5,137,0,0,378,402,3,108,54,0,379,380,
        5,30,0,0,380,381,5,137,0,0,381,402,3,108,54,0,382,383,5,31,0,0,383,
        384,5,137,0,0,384,402,3,108,54,0,385,386,5,32,0,0,386,387,5,137,
        0,0,387,402,3,108,54,0,388,392,5,33,0,0,389,391,5,137,0,0,390,389,
        1,0,0,0,391,394,1,0,0,0,392,393,1,0,0,0,392,390,1,0,0,0,393,395,
        1,0,0,0,394,392,1,0,0,0,395,402,5,2,0,0,396,398,5,34,0,0,397,399,
        5,143,0,0,398,397,1,0,0,0,398,399,1,0,0,0,399,400,1,0,0,0,400,402,
        3,108,54,0,401,273,1,0,0,0,401,278,1,0,0,0,401,279,1,0,0,0,401,282,
        1,0,0,0,401,285,1,0,0,0,401,288,1,0,0,0,401,293,1,0,0,0,401,298,
        1,0,0,0,401,300,1,0,0,0,401,305,1,0,0,0,401,307,1,0,0,0,401,320,
        1,0,0,0,401,327,1,0,0,0,401,331,1,0,0,0,401,334,1,0,0,0,401,337,
        1,0,0,0,401,342,1,0,0,0,401,343,1,0,0,0,401,348,1,0,0,0,401,351,
        1,0,0,0,401,355,1,0,0,0,401,361,1,0,0,0,401,369,1,0,0,0,401,370,
        1,0,0,0,401,373,1,0,0,0,401,376,1,0,0,0,401,379,1,0,0,0,401,382,
        1,0,0,0,401,385,1,0,0,0,401,388,1,0,0,0,401,396,1,0,0,0,402,27,1,
        0,0,0,403,404,5,5,0,0,404,405,3,96,48,0,405,406,3,96,48,0,406,407,
        3,104,52,0,407,408,3,104,52,0,408,412,3,104,52,0,409,411,3,32,16,
        0,410,409,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,413,1,0,0,
        0,413,421,1,0,0,0,414,412,1,0,0,0,415,416,5,128,0,0,416,417,3,96,
        48,0,417,418,3,96,48,0,418,420,1,0,0,0,419,415,1,0,0,0,420,423,1,
        0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,29,1,0,0,0,423,421,1,0,
        0,0,424,426,5,39,0,0,425,427,5,143,0,0,426,425,1,0,0,0,426,427,1,
        0,0,0,427,428,1,0,0,0,428,439,3,108,54,0,429,431,5,40,0,0,430,432,
        5,143,0,0,431,430,1,0,0,0,431,432,1,0,0,0,432,433,1,0,0,0,433,439,
        3,108,54,0,434,435,5,41,0,0,435,439,3,96,48,0,436,437,5,42,0,0,437,
        439,3,96,48,0,438,424,1,0,0,0,438,429,1,0,0,0,438,434,1,0,0,0,438,
        436,1,0,0,0,439,31,1,0,0,0,440,442,5,43,0,0,441,443,5,143,0,0,442,
        441,1,0,0,0,442,443,1,0,0,0,443,444,1,0,0,0,444,476,3,110,55,0,445,
        447,5,44,0,0,446,448,5,143,0,0,447,446,1,0,0,0,447,448,1,0,0,0,448,
        449,1,0,0,0,449,476,3,110,55,0,450,452,5,55,0,0,451,453,5,143,0,
        0,452,451,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,476,3,110,
        55,0,455,457,5,45,0,0,456,458,5,143,0,0,457,456,1,0,0,0,457,458,
        1,0,0,0,458,459,1,0,0,0,459,476,3,110,55,0,460,462,5,46,0,0,461,
        463,5,143,0,0,462,461,1,0,0,0,462,463,1,0,0,0,463,464,1,0,0,0,464,
        476,3,110,55,0,465,467,5,47,0,0,466,468,5,143,0,0,467,466,1,0,0,
        0,467,468,1,0,0,0,468,469,1,0,0,0,469,476,3,110,55,0,470,472,5,12,
        0,0,471,473,5,143,0,0,472,471,1,0,0,0,472,473,1,0,0,0,473,474,1,
        0,0,0,474,476,3,110,55,0,475,440,1,0,0,0,475,445,1,0,0,0,475,450,
        1,0,0,0,475,455,1,0,0,0,475,460,1,0,0,0,475,465,1,0,0,0,475,470,
        1,0,0,0,476,33,1,0,0,0,477,501,3,36,18,0,478,480,5,12,0,0,479,481,
        5,143,0,0,480,479,1,0,0,0,480,481,1,0,0,0,481,482,1,0,0,0,482,501,
        5,133,0,0,483,485,5,50,0,0,484,486,5,143,0,0,485,484,1,0,0,0,485,
        486,1,0,0,0,486,487,1,0,0,0,487,501,5,133,0,0,488,490,5,20,0,0,489,
        491,5,143,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,
        501,5,133,0,0,493,501,5,26,0,0,494,496,5,28,0,0,495,497,5,143,0,
        0,496,495,1,0,0,0,496,497,1,0,0,0,497,498,1,0,0,0,498,501,3,108,
        54,0,499,501,5,51,0,0,500,477,1,0,0,0,500,478,1,0,0,0,500,483,1,
        0,0,0,500,488,1,0,0,0,500,493,1,0,0,0,500,494,1,0,0,0,500,499,1,
        0,0,0,501,35,1,0,0,0,502,503,5,5,0,0,503,504,3,96,48,0,504,505,3,
        96,48,0,505,506,3,96,48,0,506,507,3,96,48,0,507,508,3,104,52,0,508,
        509,3,104,52,0,509,510,3,104,52,0,510,511,5,133,0,0,511,37,1,0,0,
        0,512,516,5,53,0,0,513,515,3,40,20,0,514,513,1,0,0,0,515,518,1,0,
        0,0,516,514,1,0,0,0,516,517,1,0,0,0,517,519,1,0,0,0,518,516,1,0,
        0,0,519,523,5,2,0,0,520,523,5,35,0,0,521,523,5,51,0,0,522,512,1,
        0,0,0,522,520,1,0,0,0,522,521,1,0,0,0,523,39,1,0,0,0,524,526,5,54,
        0,0,525,527,5,143,0,0,526,525,1,0,0,0,526,527,1,0,0,0,527,528,1,
        0,0,0,528,535,3,96,48,0,529,531,5,55,0,0,530,532,5,143,0,0,531,530,
        1,0,0,0,531,532,1,0,0,0,532,533,1,0,0,0,533,535,3,108,54,0,534,524,
        1,0,0,0,534,529,1,0,0,0,535,41,1,0,0,0,536,538,5,57,0,0,537,539,
        5,143,0,0,538,537,1,0,0,0,538,539,1,0,0,0,539,540,1,0,0,0,540,576,
        5,133,0,0,541,543,5,58,0,0,542,544,5,143,0,0,543,542,1,0,0,0,543,
        544,1,0,0,0,544,545,1,0,0,0,545,571,5,140,0,0,546,548,3,108,54,0,
        547,549,5,131,0,0,548,547,1,0,0,0,548,549,1,0,0,0,549,550,1,0,0,
        0,550,552,3,108,54,0,551,553,5,131,0,0,552,551,1,0,0,0,552,553,1,
        0,0,0,553,554,1,0,0,0,554,555,3,108,54,0,555,572,1,0,0,0,556,558,
        5,126,0,0,557,559,5,143,0,0,558,557,1,0,0,0,558,559,1,0,0,0,559,
        560,1,0,0,0,560,562,3,96,48,0,561,563,5,131,0,0,562,561,1,0,0,0,
        562,563,1,0,0,0,563,569,1,0,0,0,564,566,5,127,0,0,565,567,5,143,
        0,0,566,565,1,0,0,0,566,567,1,0,0,0,567,568,1,0,0,0,568,570,3,96,
        48,0,569,564,1,0,0,0,569,570,1,0,0,0,570,572,1,0,0,0,571,546,1,0,
        0,0,571,556,1,0,0,0,572,573,1,0,0,0,573,574,5,141,0,0,574,576,1,
        0,0,0,575,536,1,0,0,0,575,541,1,0,0,0,576,43,1,0,0,0,577,578,5,5,
        0,0,578,579,3,96,48,0,579,580,3,104,52,0,580,581,3,104,52,0,581,
        582,3,104,52,0,582,45,1,0,0,0,583,614,3,48,24,0,584,586,5,10,0,0,
        585,587,5,143,0,0,586,585,1,0,0,0,586,587,1,0,0,0,587,588,1,0,0,
        0,588,614,5,137,0,0,589,590,5,60,0,0,590,591,3,108,54,0,591,592,
        3,108,54,0,592,593,3,108,54,0,593,614,1,0,0,0,594,596,5,61,0,0,595,
        597,5,143,0,0,596,595,1,0,0,0,596,597,1,0,0,0,597,598,1,0,0,0,598,
        614,3,108,54,0,599,601,5,18,0,0,600,602,5,143,0,0,601,600,1,0,0,
        0,601,602,1,0,0,0,602,603,1,0,0,0,603,614,5,133,0,0,604,606,5,21,
        0,0,605,607,5,160,0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,608,1,
        0,0,0,608,614,5,161,0,0,609,610,5,23,0,0,610,611,5,25,0,0,611,614,
        3,108,54,0,612,614,5,26,0,0,613,583,1,0,0,0,613,584,1,0,0,0,613,
        589,1,0,0,0,613,594,1,0,0,0,613,599,1,0,0,0,613,604,1,0,0,0,613,
        609,1,0,0,0,613,612,1,0,0,0,614,47,1,0,0,0,615,616,5,5,0,0,616,617,
        3,96,48,0,617,618,3,96,48,0,618,619,3,96,48,0,619,620,3,96,48,0,
        620,621,3,96,48,0,621,622,3,96,48,0,622,623,3,104,52,0,623,625,3,
        104,52,0,624,626,3,104,52,0,625,624,1,0,0,0,625,626,1,0,0,0,626,
        49,1,0,0,0,627,677,3,52,26,0,628,630,5,10,0,0,629,631,5,143,0,0,
        630,629,1,0,0,0,630,631,1,0,0,0,631,632,1,0,0,0,632,677,5,137,0,
        0,633,634,5,60,0,0,634,635,3,108,54,0,635,636,3,108,54,0,636,637,
        3,108,54,0,637,638,3,108,54,0,638,677,1,0,0,0,639,641,5,12,0,0,640,
        642,5,143,0,0,641,640,1,0,0,0,641,642,1,0,0,0,642,643,1,0,0,0,643,
        677,5,133,0,0,644,645,5,61,0,0,645,647,3,108,54,0,646,648,3,108,
        54,0,647,646,1,0,0,0,647,648,1,0,0,0,648,677,1,0,0,0,649,651,5,18,
        0,0,650,652,5,143,0,0,651,650,1,0,0,0,651,652,1,0,0,0,652,653,1,
        0,0,0,653,677,5,133,0,0,654,656,5,20,0,0,655,657,5,143,0,0,656,655,
        1,0,0,0,656,657,1,0,0,0,657,658,1,0,0,0,658,677,5,133,0,0,659,661,
        5,21,0,0,660,662,5,160,0,0,661,660,1,0,0,0,661,662,1,0,0,0,662,663,
        1,0,0,0,663,677,5,161,0,0,664,665,5,23,0,0,665,666,5,25,0,0,666,
        673,3,108,54,0,667,674,5,89,0,0,668,670,5,10,0,0,669,671,5,143,0,
        0,670,669,1,0,0,0,670,671,1,0,0,0,671,672,1,0,0,0,672,674,5,137,
        0,0,673,667,1,0,0,0,673,668,1,0,0,0,674,677,1,0,0,0,675,677,5,26,
        0,0,676,627,1,0,0,0,676,628,1,0,0,0,676,633,1,0,0,0,676,639,1,0,
        0,0,676,644,1,0,0,0,676,649,1,0,0,0,676,654,1,0,0,0,676,659,1,0,
        0,0,676,664,1,0,0,0,676,675,1,0,0,0,677,51,1,0,0,0,678,679,5,5,0,
        0,679,680,3,96,48,0,680,681,3,96,48,0,681,682,3,96,48,0,682,688,
        3,96,48,0,683,684,3,96,48,0,684,685,3,96,48,0,685,686,3,96,48,0,
        686,687,3,96,48,0,687,689,1,0,0,0,688,683,1,0,0,0,688,689,1,0,0,
        0,689,690,1,0,0,0,690,691,3,104,52,0,691,695,3,104,52,0,692,693,
        3,104,52,0,693,694,3,104,52,0,694,696,1,0,0,0,695,692,1,0,0,0,695,
        696,1,0,0,0,696,53,1,0,0,0,697,742,3,56,28,0,698,700,5,10,0,0,699,
        701,5,143,0,0,700,699,1,0,0,0,700,701,1,0,0,0,701,702,1,0,0,0,702,
        742,5,137,0,0,703,704,5,64,0,0,704,705,5,133,0,0,705,706,5,133,0,
        0,706,707,3,108,54,0,707,708,3,108,54,0,708,709,3,108,54,0,709,742,
        1,0,0,0,710,712,5,61,0,0,711,713,5,143,0,0,712,711,1,0,0,0,712,713,
        1,0,0,0,713,714,1,0,0,0,714,742,3,108,54,0,715,717,5,18,0,0,716,
        718,5,143,0,0,717,716,1,0,0,0,717,718,1,0,0,0,718,719,1,0,0,0,719,
        742,5,133,0,0,720,722,5,65,0,0,721,723,5,143,0,0,722,721,1,0,0,0,
        722,723,1,0,0,0,723,724,1,0,0,0,724,742,3,108,54,0,725,727,5,66,
        0,0,726,728,5,143,0,0,727,726,1,0,0,0,727,728,1,0,0,0,728,729,1,
        0,0,0,729,742,3,108,54,0,730,732,5,21,0,0,731,733,5,160,0,0,732,
        731,1,0,0,0,732,733,1,0,0,0,733,734,1,0,0,0,734,742,5,161,0,0,735,
        736,5,23,0,0,736,737,5,25,0,0,737,742,3,108,54,0,738,742,3,58,29,
        0,739,742,5,26,0,0,740,742,5,68,0,0,741,697,1,0,0,0,741,698,1,0,
        0,0,741,703,1,0,0,0,741,710,1,0,0,0,741,715,1,0,0,0,741,720,1,0,
        0,0,741,725,1,0,0,0,741,730,1,0,0,0,741,735,1,0,0,0,741,738,1,0,
        0,0,741,739,1,0,0,0,741,740,1,0,0,0,742,55,1,0,0,0,743,744,5,5,0,
        0,744,745,3,96,48,0,745,746,3,96,48,0,746,747,3,96,48,0,747,748,
        3,96,48,0,748,749,3,96,48,0,749,750,3,104,52,0,750,751,3,104,52,
        0,751,57,1,0,0,0,752,753,5,67,0,0,753,754,3,96,48,0,754,755,3,108,
        54,0,755,756,3,108,54,0,756,59,1,0,0,0,757,798,3,62,31,0,758,798,
        3,64,32,0,759,798,3,66,33,0,760,798,3,68,34,0,761,798,3,70,35,0,
        762,798,3,72,36,0,763,798,3,74,37,0,764,798,3,76,38,0,765,798,3,
        78,39,0,766,768,5,10,0,0,767,769,5,143,0,0,768,767,1,0,0,0,768,769,
        1,0,0,0,769,770,1,0,0,0,770,798,5,137,0,0,771,773,5,77,0,0,772,774,
        5,143,0,0,773,772,1,0,0,0,773,774,1,0,0,0,774,775,1,0,0,0,775,798,
        3,108,54,0,776,777,5,61,0,0,777,779,3,108,54,0,778,780,3,108,54,
        0,779,778,1,0,0,0,779,780,1,0,0,0,780,798,1,0,0,0,781,782,5,21,0,
        0,782,798,5,161,0,0,783,784,5,23,0,0,784,785,5,25,0,0,785,792,3,
        108,54,0,786,793,5,89,0,0,787,789,5,10,0,0,788,790,5,143,0,0,789,
        788,1,0,0,0,789,790,1,0,0,0,790,791,1,0,0,0,791,793,5,137,0,0,792,
        786,1,0,0,0,792,787,1,0,0,0,793,794,1,0,0,0,794,795,5,137,0,0,795,
        798,1,0,0,0,796,798,5,26,0,0,797,757,1,0,0,0,797,758,1,0,0,0,797,
        759,1,0,0,0,797,760,1,0,0,0,797,761,1,0,0,0,797,762,1,0,0,0,797,
        763,1,0,0,0,797,764,1,0,0,0,797,765,1,0,0,0,797,766,1,0,0,0,797,
        771,1,0,0,0,797,776,1,0,0,0,797,781,1,0,0,0,797,783,1,0,0,0,797,
        796,1,0,0,0,798,61,1,0,0,0,799,800,5,70,0,0,800,802,3,96,48,0,801,
        803,3,96,48,0,802,801,1,0,0,0,802,803,1,0,0,0,803,804,1,0,0,0,804,
        806,3,108,54,0,805,807,3,108,54,0,806,805,1,0,0,0,806,807,1,0,0,
        0,807,63,1,0,0,0,808,809,5,67,0,0,809,810,3,96,48,0,810,811,3,108,
        54,0,811,65,1,0,0,0,812,813,5,71,0,0,813,814,3,96,48,0,814,815,3,
        96,48,0,815,816,3,96,48,0,816,818,5,137,0,0,817,819,5,134,0,0,818,
        817,1,0,0,0,818,819,1,0,0,0,819,820,1,0,0,0,820,821,5,137,0,0,821,
        67,1,0,0,0,822,823,5,72,0,0,823,824,3,96,48,0,824,69,1,0,0,0,825,
        826,5,63,0,0,826,827,3,96,48,0,827,71,1,0,0,0,828,829,5,73,0,0,829,
        830,3,96,48,0,830,73,1,0,0,0,831,832,5,74,0,0,832,833,3,96,48,0,
        833,75,1,0,0,0,834,835,5,75,0,0,835,836,5,137,0,0,836,837,3,96,48,
        0,837,838,3,96,48,0,838,839,3,96,48,0,839,840,3,96,48,0,840,842,
        3,96,48,0,841,843,3,96,48,0,842,841,1,0,0,0,842,843,1,0,0,0,843,
        77,1,0,0,0,844,845,5,76,0,0,845,846,3,96,48,0,846,79,1,0,0,0,847,
        931,3,82,41,0,848,850,5,10,0,0,849,851,5,143,0,0,850,849,1,0,0,0,
        850,851,1,0,0,0,851,852,1,0,0,0,852,931,5,137,0,0,853,931,5,79,0,
        0,854,855,5,64,0,0,855,857,5,133,0,0,856,858,5,133,0,0,857,856,1,
        0,0,0,857,858,1,0,0,0,858,860,1,0,0,0,859,861,5,133,0,0,860,859,
        1,0,0,0,860,861,1,0,0,0,861,863,1,0,0,0,862,864,5,133,0,0,863,862,
        1,0,0,0,863,864,1,0,0,0,864,865,1,0,0,0,865,931,3,108,54,0,866,868,
        5,77,0,0,867,869,5,143,0,0,868,867,1,0,0,0,868,869,1,0,0,0,869,870,
        1,0,0,0,870,931,3,108,54,0,871,873,5,61,0,0,872,874,5,143,0,0,873,
        872,1,0,0,0,873,874,1,0,0,0,874,875,1,0,0,0,875,931,3,108,54,0,876,
        878,5,18,0,0,877,879,5,143,0,0,878,877,1,0,0,0,878,879,1,0,0,0,879,
        880,1,0,0,0,880,931,5,133,0,0,881,882,5,80,0,0,882,883,5,133,0,0,
        883,884,5,133,0,0,884,888,5,133,0,0,885,886,5,133,0,0,886,887,5,
        133,0,0,887,889,5,133,0,0,888,885,1,0,0,0,888,889,1,0,0,0,889,893,
        1,0,0,0,890,891,5,133,0,0,891,892,5,133,0,0,892,894,5,133,0,0,893,
        890,1,0,0,0,893,894,1,0,0,0,894,898,1,0,0,0,895,896,5,133,0,0,896,
        897,5,133,0,0,897,899,5,133,0,0,898,895,1,0,0,0,898,899,1,0,0,0,
        899,931,1,0,0,0,900,902,5,21,0,0,901,903,5,160,0,0,902,901,1,0,0,
        0,902,903,1,0,0,0,903,904,1,0,0,0,904,931,5,161,0,0,905,906,5,23,
        0,0,906,907,5,25,0,0,907,914,3,108,54,0,908,915,5,89,0,0,909,911,
        5,10,0,0,910,912,5,143,0,0,911,910,1,0,0,0,911,912,1,0,0,0,912,913,
        1,0,0,0,913,915,5,137,0,0,914,908,1,0,0,0,914,909,1,0,0,0,915,931,
        1,0,0,0,916,931,5,26,0,0,917,918,5,81,0,0,918,919,5,82,0,0,919,921,
        5,133,0,0,920,922,5,133,0,0,921,920,1,0,0,0,921,922,1,0,0,0,922,
        924,1,0,0,0,923,925,5,133,0,0,924,923,1,0,0,0,924,925,1,0,0,0,925,
        927,1,0,0,0,926,928,5,133,0,0,927,926,1,0,0,0,927,928,1,0,0,0,928,
        931,1,0,0,0,929,931,5,68,0,0,930,847,1,0,0,0,930,848,1,0,0,0,930,
        853,1,0,0,0,930,854,1,0,0,0,930,866,1,0,0,0,930,871,1,0,0,0,930,
        876,1,0,0,0,930,881,1,0,0,0,930,900,1,0,0,0,930,905,1,0,0,0,930,
        916,1,0,0,0,930,917,1,0,0,0,930,929,1,0,0,0,931,81,1,0,0,0,932,933,
        5,5,0,0,933,934,3,96,48,0,934,935,3,96,48,0,935,936,3,96,48,0,936,
        942,3,96,48,0,937,938,3,96,48,0,938,939,3,96,48,0,939,940,3,96,48,
        0,940,941,3,96,48,0,941,943,1,0,0,0,942,937,1,0,0,0,942,943,1,0,
        0,0,943,949,1,0,0,0,944,945,3,96,48,0,945,946,3,96,48,0,946,947,
        3,96,48,0,947,948,3,96,48,0,948,950,1,0,0,0,949,944,1,0,0,0,949,
        950,1,0,0,0,950,956,1,0,0,0,951,952,3,96,48,0,952,953,3,96,48,0,
        953,954,3,96,48,0,954,955,3,96,48,0,955,957,1,0,0,0,956,951,1,0,
        0,0,956,957,1,0,0,0,957,83,1,0,0,0,958,991,3,86,43,0,959,961,5,10,
        0,0,960,962,5,143,0,0,961,960,1,0,0,0,961,962,1,0,0,0,962,963,1,
        0,0,0,963,991,5,137,0,0,964,965,5,60,0,0,965,966,3,108,54,0,966,
        967,3,108,54,0,967,968,3,108,54,0,968,969,3,108,54,0,969,970,3,108,
        54,0,970,991,1,0,0,0,971,973,5,61,0,0,972,974,5,143,0,0,973,972,
        1,0,0,0,973,974,1,0,0,0,974,975,1,0,0,0,975,991,3,108,54,0,976,978,
        5,18,0,0,977,979,5,143,0,0,978,977,1,0,0,0,978,979,1,0,0,0,979,980,
        1,0,0,0,980,991,5,133,0,0,981,983,5,21,0,0,982,984,5,160,0,0,983,
        982,1,0,0,0,983,984,1,0,0,0,984,985,1,0,0,0,985,991,5,161,0,0,986,
        987,5,23,0,0,987,988,5,25,0,0,988,991,3,108,54,0,989,991,5,26,0,
        0,990,958,1,0,0,0,990,959,1,0,0,0,990,964,1,0,0,0,990,971,1,0,0,
        0,990,976,1,0,0,0,990,981,1,0,0,0,990,986,1,0,0,0,990,989,1,0,0,
        0,991,85,1,0,0,0,992,993,5,5,0,0,993,994,3,96,48,0,994,995,3,96,
        48,0,995,996,3,96,48,0,996,997,3,96,48,0,997,998,3,96,48,0,998,999,
        3,96,48,0,999,1000,3,104,52,0,1000,1001,3,104,52,0,1001,87,1,0,0,
        0,1002,1037,3,90,45,0,1003,1005,5,10,0,0,1004,1006,5,143,0,0,1005,
        1004,1,0,0,0,1005,1006,1,0,0,0,1006,1007,1,0,0,0,1007,1037,5,137,
        0,0,1008,1009,5,60,0,0,1009,1010,3,108,54,0,1010,1011,3,108,54,0,
        1011,1012,3,108,54,0,1012,1013,3,108,54,0,1013,1014,3,108,54,0,1014,
        1015,3,108,54,0,1015,1016,3,108,54,0,1016,1037,1,0,0,0,1017,1019,
        5,61,0,0,1018,1020,5,143,0,0,1019,1018,1,0,0,0,1019,1020,1,0,0,0,
        1020,1021,1,0,0,0,1021,1037,3,108,54,0,1022,1024,5,18,0,0,1023,1025,
        5,143,0,0,1024,1023,1,0,0,0,1024,1025,1,0,0,0,1025,1026,1,0,0,0,
        1026,1037,5,133,0,0,1027,1029,5,21,0,0,1028,1030,5,160,0,0,1029,
        1028,1,0,0,0,1029,1030,1,0,0,0,1030,1031,1,0,0,0,1031,1037,5,161,
        0,0,1032,1033,5,23,0,0,1033,1034,5,25,0,0,1034,1037,3,108,54,0,1035,
        1037,5,26,0,0,1036,1002,1,0,0,0,1036,1003,1,0,0,0,1036,1008,1,0,
        0,0,1036,1017,1,0,0,0,1036,1022,1,0,0,0,1036,1027,1,0,0,0,1036,1032,
        1,0,0,0,1036,1035,1,0,0,0,1037,89,1,0,0,0,1038,1039,5,5,0,0,1039,
        1040,3,96,48,0,1040,1041,3,96,48,0,1041,1042,3,96,48,0,1042,1043,
        3,96,48,0,1043,1044,3,96,48,0,1044,1045,3,96,48,0,1045,1046,3,96,
        48,0,1046,1047,3,96,48,0,1047,1048,3,104,52,0,1048,1049,3,104,52,
        0,1049,91,1,0,0,0,1050,1103,3,94,47,0,1051,1053,5,10,0,0,1052,1054,
        5,143,0,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,1055,1,0,0,0,
        1055,1103,5,137,0,0,1056,1058,5,86,0,0,1057,1059,5,143,0,0,1058,
        1057,1,0,0,0,1058,1059,1,0,0,0,1059,1060,1,0,0,0,1060,1103,5,137,
        0,0,1061,1062,5,64,0,0,1062,1063,5,133,0,0,1063,1064,5,133,0,0,1064,
        1103,3,108,54,0,1065,1067,5,77,0,0,1066,1068,5,143,0,0,1067,1066,
        1,0,0,0,1067,1068,1,0,0,0,1068,1069,1,0,0,0,1069,1103,3,108,54,0,
        1070,1072,5,61,0,0,1071,1073,5,143,0,0,1072,1071,1,0,0,0,1072,1073,
        1,0,0,0,1073,1074,1,0,0,0,1074,1103,3,108,54,0,1075,1077,5,18,0,
        0,1076,1078,5,143,0,0,1077,1076,1,0,0,0,1077,1078,1,0,0,0,1078,1079,
        1,0,0,0,1079,1103,5,133,0,0,1080,1082,5,21,0,0,1081,1083,5,160,0,
        0,1082,1081,1,0,0,0,1082,1083,1,0,0,0,1083,1084,1,0,0,0,1084,1103,
        5,161,0,0,1085,1086,5,23,0,0,1086,1087,5,25,0,0,1087,1094,3,108,
        54,0,1088,1095,5,89,0,0,1089,1091,5,10,0,0,1090,1092,5,143,0,0,1091,
        1090,1,0,0,0,1091,1092,1,0,0,0,1092,1093,1,0,0,0,1093,1095,5,137,
        0,0,1094,1088,1,0,0,0,1094,1089,1,0,0,0,1095,1103,1,0,0,0,1096,1103,
        5,26,0,0,1097,1098,5,81,0,0,1098,1099,5,87,0,0,1099,1100,5,133,0,
        0,1100,1103,5,133,0,0,1101,1103,5,68,0,0,1102,1050,1,0,0,0,1102,
        1051,1,0,0,0,1102,1056,1,0,0,0,1102,1061,1,0,0,0,1102,1065,1,0,0,
        0,1102,1070,1,0,0,0,1102,1075,1,0,0,0,1102,1080,1,0,0,0,1102,1085,
        1,0,0,0,1102,1096,1,0,0,0,1102,1097,1,0,0,0,1102,1101,1,0,0,0,1103,
        93,1,0,0,0,1104,1105,5,5,0,0,1105,1106,3,96,48,0,1106,1107,3,96,
        48,0,1107,1108,3,96,48,0,1108,1109,3,96,48,0,1109,1110,3,96,48,0,
        1110,1111,3,96,48,0,1111,1112,3,96,48,0,1112,1113,3,96,48,0,1113,
        1114,3,96,48,0,1114,1115,3,96,48,0,1115,1117,3,96,48,0,1116,1118,
        3,96,48,0,1117,1116,1,0,0,0,1117,1118,1,0,0,0,1118,95,1,0,0,0,1119,
        1120,5,140,0,0,1120,1121,3,98,49,0,1121,1122,5,141,0,0,1122,97,1,
        0,0,0,1123,1128,3,100,50,0,1124,1125,5,128,0,0,1125,1127,3,100,50,
        0,1126,1124,1,0,0,0,1127,1130,1,0,0,0,1128,1126,1,0,0,0,1128,1129,
        1,0,0,0,1129,99,1,0,0,0,1130,1128,1,0,0,0,1131,1136,3,102,51,0,1132,
        1133,5,129,0,0,1133,1135,3,102,51,0,1134,1132,1,0,0,0,1135,1138,
        1,0,0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,101,1,0,0,0,1138,
        1136,1,0,0,0,1139,1140,6,51,-1,0,1140,1141,5,140,0,0,1141,1142,3,
        98,49,0,1142,1143,5,141,0,0,1143,1284,1,0,0,0,1144,1284,5,89,0,0,
        1145,1146,5,91,0,0,1146,1147,7,0,0,0,1147,1148,7,1,0,0,1148,1284,
        7,0,0,0,1149,1151,5,92,0,0,1150,1152,5,154,0,0,1151,1150,1,0,0,0,
        1151,1152,1,0,0,0,1152,1153,1,0,0,0,1153,1154,5,155,0,0,1154,1155,
        5,156,0,0,1155,1284,3,106,53,0,1156,1157,5,93,0,0,1157,1284,3,102,
        51,30,1158,1159,5,94,0,0,1159,1284,3,102,51,29,1160,1161,5,95,0,
        0,1161,1284,3,102,51,28,1162,1169,5,96,0,0,1163,1170,5,138,0,0,1164,
        1167,5,137,0,0,1165,1166,5,142,0,0,1166,1168,5,137,0,0,1167,1165,
        1,0,0,0,1167,1168,1,0,0,0,1168,1170,1,0,0,0,1169,1163,1,0,0,0,1169,
        1164,1,0,0,0,1170,1284,1,0,0,0,1171,1172,5,97,0,0,1172,1173,3,106,
        53,0,1173,1174,3,106,53,0,1174,1175,3,106,53,0,1175,1176,3,106,53,
        0,1176,1177,3,106,53,0,1177,1178,3,106,53,0,1178,1284,1,0,0,0,1179,
        1284,5,98,0,0,1180,1181,5,99,0,0,1181,1284,5,133,0,0,1182,1284,5,
        100,0,0,1183,1190,5,101,0,0,1184,1191,5,138,0,0,1185,1188,5,137,
        0,0,1186,1187,5,142,0,0,1187,1189,5,137,0,0,1188,1186,1,0,0,0,1188,
        1189,1,0,0,0,1189,1191,1,0,0,0,1190,1184,1,0,0,0,1190,1185,1,0,0,
        0,1191,1284,1,0,0,0,1192,1284,5,102,0,0,1193,1194,5,130,0,0,1194,
        1284,3,102,51,20,1195,1196,5,103,0,0,1196,1197,5,140,0,0,1197,1199,
        3,106,53,0,1198,1200,5,131,0,0,1199,1198,1,0,0,0,1199,1200,1,0,0,
        0,1200,1201,1,0,0,0,1201,1203,3,106,53,0,1202,1204,5,131,0,0,1203,
        1202,1,0,0,0,1203,1204,1,0,0,0,1204,1205,1,0,0,0,1205,1206,3,106,
        53,0,1206,1207,5,141,0,0,1207,1208,5,104,0,0,1208,1209,3,106,53,
        0,1209,1284,1,0,0,0,1210,1211,5,103,0,0,1211,1212,5,140,0,0,1212,
        1214,5,126,0,0,1213,1215,5,143,0,0,1214,1213,1,0,0,0,1214,1215,1,
        0,0,0,1215,1216,1,0,0,0,1216,1218,3,96,48,0,1217,1219,5,131,0,0,
        1218,1217,1,0,0,0,1218,1219,1,0,0,0,1219,1225,1,0,0,0,1220,1222,
        5,127,0,0,1221,1223,5,143,0,0,1222,1221,1,0,0,0,1222,1223,1,0,0,
        0,1223,1224,1,0,0,0,1224,1226,3,96,48,0,1225,1220,1,0,0,0,1225,1226,
        1,0,0,0,1226,1227,1,0,0,0,1227,1228,5,141,0,0,1228,1229,5,104,0,
        0,1229,1230,3,106,53,0,1230,1284,1,0,0,0,1231,1284,5,105,0,0,1232,
        1284,5,106,0,0,1233,1240,5,107,0,0,1234,1241,5,139,0,0,1235,1238,
        5,133,0,0,1236,1237,5,142,0,0,1237,1239,5,133,0,0,1238,1236,1,0,
        0,0,1238,1239,1,0,0,0,1239,1241,1,0,0,0,1240,1234,1,0,0,0,1240,1235,
        1,0,0,0,1241,1284,1,0,0,0,1242,1249,5,108,0,0,1243,1250,5,138,0,
        0,1244,1247,5,137,0,0,1245,1246,5,142,0,0,1246,1248,5,137,0,0,1247,
        1245,1,0,0,0,1247,1248,1,0,0,0,1248,1250,1,0,0,0,1249,1243,1,0,0,
        0,1249,1244,1,0,0,0,1250,1284,1,0,0,0,1251,1263,5,110,0,0,1252,1264,
        5,138,0,0,1253,1256,5,137,0,0,1254,1255,5,142,0,0,1255,1257,5,137,
        0,0,1256,1254,1,0,0,0,1256,1257,1,0,0,0,1257,1264,1,0,0,0,1258,1261,
        5,136,0,0,1259,1260,5,142,0,0,1260,1262,5,136,0,0,1261,1259,1,0,
        0,0,1261,1262,1,0,0,0,1262,1264,1,0,0,0,1263,1252,1,0,0,0,1263,1253,
        1,0,0,0,1263,1258,1,0,0,0,1264,1284,1,0,0,0,1265,1266,5,111,0,0,
        1266,1267,3,106,53,0,1267,1268,3,106,53,0,1268,1269,3,106,53,0,1269,
        1270,3,106,53,0,1270,1271,3,106,53,0,1271,1272,3,106,53,0,1272,1284,
        1,0,0,0,1273,1284,5,112,0,0,1274,1284,5,113,0,0,1275,1284,5,114,
        0,0,1276,1284,5,115,0,0,1277,1284,5,116,0,0,1278,1284,5,117,0,0,
        1279,1284,5,118,0,0,1280,1284,5,119,0,0,1281,1284,5,120,0,0,1282,
        1284,5,121,0,0,1283,1139,1,0,0,0,1283,1144,1,0,0,0,1283,1145,1,0,
        0,0,1283,1149,1,0,0,0,1283,1156,1,0,0,0,1283,1158,1,0,0,0,1283,1160,
        1,0,0,0,1283,1162,1,0,0,0,1283,1171,1,0,0,0,1283,1179,1,0,0,0,1283,
        1180,1,0,0,0,1283,1182,1,0,0,0,1283,1183,1,0,0,0,1283,1192,1,0,0,
        0,1283,1193,1,0,0,0,1283,1195,1,0,0,0,1283,1210,1,0,0,0,1283,1231,
        1,0,0,0,1283,1232,1,0,0,0,1283,1233,1,0,0,0,1283,1242,1,0,0,0,1283,
        1251,1,0,0,0,1283,1265,1,0,0,0,1283,1273,1,0,0,0,1283,1274,1,0,0,
        0,1283,1275,1,0,0,0,1283,1276,1,0,0,0,1283,1277,1,0,0,0,1283,1278,
        1,0,0,0,1283,1279,1,0,0,0,1283,1280,1,0,0,0,1283,1281,1,0,0,0,1283,
        1282,1,0,0,0,1284,1293,1,0,0,0,1285,1286,10,33,0,0,1286,1287,5,90,
        0,0,1287,1292,3,106,53,0,1288,1289,10,13,0,0,1289,1290,5,109,0,0,
        1290,1292,3,106,53,0,1291,1285,1,0,0,0,1291,1288,1,0,0,0,1292,1295,
        1,0,0,0,1293,1291,1,0,0,0,1293,1294,1,0,0,0,1294,103,1,0,0,0,1295,
        1293,1,0,0,0,1296,1297,7,2,0,0,1297,105,1,0,0,0,1298,1299,7,2,0,
        0,1299,107,1,0,0,0,1300,1301,7,2,0,0,1301,109,1,0,0,0,1302,1303,
        7,2,0,0,1303,111,1,0,0,0,1304,1315,5,88,0,0,1305,1313,5,166,0,0,
        1306,1308,5,169,0,0,1307,1306,1,0,0,0,1308,1311,1,0,0,0,1309,1307,
        1,0,0,0,1309,1310,1,0,0,0,1310,1314,1,0,0,0,1311,1309,1,0,0,0,1312,
        1314,5,170,0,0,1313,1309,1,0,0,0,1313,1312,1,0,0,0,1314,1316,1,0,
        0,0,1315,1305,1,0,0,0,1315,1316,1,0,0,0,1316,1317,1,0,0,0,1317,1321,
        5,167,0,0,1318,1320,5,169,0,0,1319,1318,1,0,0,0,1320,1323,1,0,0,
        0,1321,1319,1,0,0,0,1321,1322,1,0,0,0,1322,1324,1,0,0,0,1323,1321,
        1,0,0,0,1324,1325,5,168,0,0,1325,113,1,0,0,0,1326,1327,5,122,0,0,
        1327,1328,3,116,58,0,1328,1329,3,96,48,0,1329,115,1,0,0,0,1330,1331,
        7,3,0,0,1331,1332,3,118,59,0,1332,1333,5,172,0,0,1333,1337,1,0,0,
        0,1334,1335,5,125,0,0,1335,1337,3,126,63,0,1336,1330,1,0,0,0,1336,
        1334,1,0,0,0,1337,117,1,0,0,0,1338,1341,5,182,0,0,1339,1340,5,173,
        0,0,1340,1342,3,120,60,0,1341,1339,1,0,0,0,1341,1342,1,0,0,0,1342,
        119,1,0,0,0,1343,1348,3,122,61,0,1344,1345,7,4,0,0,1345,1347,3,120,
        60,0,1346,1344,1,0,0,0,1347,1350,1,0,0,0,1348,1346,1,0,0,0,1348,
        1349,1,0,0,0,1349,121,1,0,0,0,1350,1348,1,0,0,0,1351,1358,5,182,
        0,0,1352,1358,3,124,62,0,1353,1358,5,180,0,0,1354,1358,5,181,0,0,
        1355,1358,5,205,0,0,1356,1358,5,206,0,0,1357,1351,1,0,0,0,1357,1352,
        1,0,0,0,1357,1353,1,0,0,0,1357,1354,1,0,0,0,1357,1355,1,0,0,0,1357,
        1356,1,0,0,0,1358,123,1,0,0,0,1359,1360,5,183,0,0,1360,1361,5,207,
        0,0,1361,1362,3,122,61,0,1362,1363,5,172,0,0,1363,1479,1,0,0,0,1364,
        1365,5,184,0,0,1365,1366,5,207,0,0,1366,1367,3,122,61,0,1367,1368,
        5,172,0,0,1368,1479,1,0,0,0,1369,1370,5,186,0,0,1370,1371,5,207,
        0,0,1371,1372,3,122,61,0,1372,1373,5,172,0,0,1373,1479,1,0,0,0,1374,
        1375,5,187,0,0,1375,1376,5,207,0,0,1376,1377,3,122,61,0,1377,1378,
        5,172,0,0,1378,1479,1,0,0,0,1379,1380,5,188,0,0,1380,1381,5,207,
        0,0,1381,1382,3,122,61,0,1382,1383,5,172,0,0,1383,1479,1,0,0,0,1384,
        1385,5,189,0,0,1385,1386,5,207,0,0,1386,1387,3,122,61,0,1387,1388,
        5,172,0,0,1388,1479,1,0,0,0,1389,1390,5,190,0,0,1390,1391,5,207,
        0,0,1391,1392,3,122,61,0,1392,1393,5,172,0,0,1393,1479,1,0,0,0,1394,
        1395,5,191,0,0,1395,1396,5,207,0,0,1396,1397,3,122,61,0,1397,1398,
        5,172,0,0,1398,1479,1,0,0,0,1399,1400,5,192,0,0,1400,1401,5,207,
        0,0,1401,1402,3,122,61,0,1402,1403,5,172,0,0,1403,1479,1,0,0,0,1404,
        1405,5,193,0,0,1405,1406,5,207,0,0,1406,1407,3,122,61,0,1407,1408,
        5,172,0,0,1408,1479,1,0,0,0,1409,1410,5,194,0,0,1410,1411,5,207,
        0,0,1411,1412,3,122,61,0,1412,1413,5,172,0,0,1413,1479,1,0,0,0,1414,
        1415,5,195,0,0,1415,1416,5,207,0,0,1416,1421,3,122,61,0,1417,1418,
        5,179,0,0,1418,1420,3,122,61,0,1419,1417,1,0,0,0,1420,1423,1,0,0,
        0,1421,1419,1,0,0,0,1421,1422,1,0,0,0,1422,1424,1,0,0,0,1423,1421,
        1,0,0,0,1424,1425,5,172,0,0,1425,1479,1,0,0,0,1426,1427,5,196,0,
        0,1427,1428,5,207,0,0,1428,1429,3,122,61,0,1429,1430,5,172,0,0,1430,
        1479,1,0,0,0,1431,1432,5,197,0,0,1432,1433,5,207,0,0,1433,1438,3,
        122,61,0,1434,1435,5,179,0,0,1435,1437,3,122,61,0,1436,1434,1,0,
        0,0,1437,1440,1,0,0,0,1438,1436,1,0,0,0,1438,1439,1,0,0,0,1439,1441,
        1,0,0,0,1440,1438,1,0,0,0,1441,1442,5,172,0,0,1442,1479,1,0,0,0,
        1443,1444,5,198,0,0,1444,1445,5,207,0,0,1445,1446,3,122,61,0,1446,
        1447,5,179,0,0,1447,1448,3,122,61,0,1448,1449,5,172,0,0,1449,1479,
        1,0,0,0,1450,1451,5,199,0,0,1451,1452,5,207,0,0,1452,1453,3,122,
        61,0,1453,1454,5,172,0,0,1454,1479,1,0,0,0,1455,1456,5,200,0,0,1456,
        1457,5,207,0,0,1457,1479,5,172,0,0,1458,1459,5,201,0,0,1459,1460,
        5,207,0,0,1460,1461,3,122,61,0,1461,1462,5,172,0,0,1462,1479,1,0,
        0,0,1463,1464,5,202,0,0,1464,1465,5,207,0,0,1465,1466,3,122,61,0,
        1466,1467,5,172,0,0,1467,1479,1,0,0,0,1468,1469,5,203,0,0,1469,1470,
        5,207,0,0,1470,1471,3,122,61,0,1471,1472,5,172,0,0,1472,1479,1,0,
        0,0,1473,1474,5,204,0,0,1474,1475,5,207,0,0,1475,1476,3,122,61,0,
        1476,1477,5,172,0,0,1477,1479,1,0,0,0,1478,1359,1,0,0,0,1478,1364,
        1,0,0,0,1478,1369,1,0,0,0,1478,1374,1,0,0,0,1478,1379,1,0,0,0,1478,
        1384,1,0,0,0,1478,1389,1,0,0,0,1478,1394,1,0,0,0,1478,1399,1,0,0,
        0,1478,1404,1,0,0,0,1478,1409,1,0,0,0,1478,1414,1,0,0,0,1478,1426,
        1,0,0,0,1478,1431,1,0,0,0,1478,1443,1,0,0,0,1478,1450,1,0,0,0,1478,
        1455,1,0,0,0,1478,1458,1,0,0,0,1478,1463,1,0,0,0,1478,1468,1,0,0,
        0,1478,1473,1,0,0,0,1479,125,1,0,0,0,1480,1481,7,5,0,0,1481,1482,
        5,208,0,0,1482,1483,5,217,0,0,1483,1484,5,209,0,0,1484,127,1,0,0,
        0,172,149,151,160,166,172,178,184,190,196,205,214,223,232,241,250,
        259,268,275,290,295,302,311,316,327,339,345,358,365,392,398,401,
        412,421,426,431,438,442,447,452,457,462,467,472,475,480,485,490,
        496,500,516,522,526,531,534,538,543,548,552,558,562,566,569,571,
        575,586,596,601,606,613,625,630,641,647,651,656,661,670,673,676,
        688,695,700,712,717,722,727,732,741,768,773,779,789,792,797,802,
        806,818,842,850,857,860,863,868,873,878,888,893,898,902,911,914,
        921,924,927,930,942,949,956,961,973,978,983,990,1005,1019,1024,1029,
        1036,1053,1058,1067,1072,1077,1082,1091,1094,1102,1117,1128,1136,
        1151,1167,1169,1188,1190,1199,1203,1214,1218,1222,1225,1238,1240,
        1247,1249,1256,1261,1263,1283,1291,1293,1309,1313,1315,1321,1336,
        1341,1348,1357,1421,1438,1478
    ]

class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'CV'", "'DEN'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'OUTD'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'CUTOFF'", 
                     "'CUTON'", "'FROM'", "'TO'", "'PEAK'", "'SPECTRUM'", 
                     "'VOLUME'", "'PPM1'", "'PPM2'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SIZE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'FBOX'", "<INVALID>", 
                     "'ID'", "<INVALID>", "'NAME'", "'NONE'", "<INVALID>", 
                     "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SFBOX'", "'STORE1'", "'STORE2'", 
                     "'STORE3'", "'STORE4'", "'STORE5'", "'STORE6'", "'STORE7'", 
                     "'STORE8'", "'STORE9'", "'TAG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SHOW'", "'TAIL'", "'HEAD'", "'OR'", 
                     "'AND'", "'NOT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "':'", "<INVALID>", "'<'", "'>'", "'<='", "'>='", "'#'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", 
                     "'ENCODE'", "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", 
                     "'LOG10'", "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", 
                     "'MOD'", "<INVALID>", "<INVALID>", "'SIGN'", "'SIN'", 
                     "'SQRT'", "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'RMS'", "'SUM'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Averaging", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Initialize", "Update", "Gamma", "Kappa", "Cutoff", 
                      "Cuton", "From", "To", "Peak", "Spectrum", "Volume", 
                      "Ppm1", "Ppm2", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Coupling", "Carbon", "Expectation", 
                      "PhiStep", "PsiStep", "Rcoil", "Zero", "Proton", "Observed", 
                      "Anisotropy", "Amides", "Nitrogens", "Oxygens", "RingAtoms", 
                      "AlphasAndAmides", "Error", "Conformation", "Compressed", 
                      "Phase", "Size", "Dimensions", "Danisotropy", "OneBond", 
                      "AngleDb", "DerivFlag", "Angle_or_Dihedral", "Flags", 
                      "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Fbox", "Hydrogen", 
                      "Id", "Known", "Name", "NONE", "Point", "Cut", "Previous", 
                      "Pseudo", "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Sfbox", "Store_1", "Store_2", "Store_3", "Store_4", 
                      "Store_5", "Store_6", "Store_7", "Store_8", "Store_9", 
                      "Tag", "Vector", "Do_Lp", "Identify_Lp", "Show", "Tail", 
                      "Head", "Or_op", "And_op", "Not_op", "Comma", "Complex", 
                      "Integer", "Logical", "Real", "Double_quote_string", 
                      "Simple_name", "Simple_names", "Integers", "L_paren", 
                      "R_paren", "Colon", "Equ_op", "Lt_op", "Gt_op", "Leq_op", 
                      "Geq_op", "Neq_op", "SPACE", "COMMENT", "SECTION_COMMENT", 
                      "LINE_COMMENT", "SET_VARIABLE", "Abs", "Attr_properties", 
                      "Comparison_ops", "SPACE_ATTR", "Averaging_methods", 
                      "Simple_name_A", "Equ_op_P", "Potential_types", "Simple_name_P", 
                      "SPACE_POTE", "Noe_analysis", "SPACE_ANAL", "Exclude", 
                      "Include", "End_F", "Class_name", "Any_class", "SPACE_FLAG", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Simple_name_VE", "Double_quote_string_VE", 
                      "L_paren_VF", "L_paren_VS", "R_paren_VS", "Average_VS", 
                      "Element_VS", "Max_VS", "Min_VS", "Norm_VS", "Rms_VS", 
                      "Sum_VS", "Atom_properties_VS", "SPACE_VS" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_noe_annotation = 16
    RULE_dihedral_statement = 17
    RULE_dihedral_assign = 18
    RULE_plane_statement = 19
    RULE_group_statement = 20
    RULE_harmonic_statement = 21
    RULE_harmonic_assign = 22
    RULE_sani_statement = 23
    RULE_sani_assign = 24
    RULE_coupling_statement = 25
    RULE_coup_assign = 26
    RULE_carbon_shift_statement = 27
    RULE_carbon_shift_assign = 28
    RULE_carbon_shift_rcoil = 29
    RULE_proton_shift_statement = 30
    RULE_observed = 31
    RULE_proton_shift_rcoil = 32
    RULE_proton_shift_anisotropy = 33
    RULE_proton_shift_amides = 34
    RULE_proton_shift_carbons = 35
    RULE_proton_shift_nitrogens = 36
    RULE_proton_shift_oxygens = 37
    RULE_proton_shift_ring_atoms = 38
    RULE_proton_shift_alphas_and_amides = 39
    RULE_conformation_statement = 40
    RULE_conf_assign = 41
    RULE_diffusion_statement = 42
    RULE_dani_assign = 43
    RULE_one_bond_coupling_statement = 44
    RULE_one_bond_assign = 45
    RULE_angle_db_statement = 46
    RULE_angle_db_assign = 47
    RULE_selection = 48
    RULE_selection_expression = 49
    RULE_term = 50
    RULE_factor = 51
    RULE_number = 52
    RULE_number_f = 53
    RULE_number_s = 54
    RULE_number_a = 55
    RULE_flag_statement = 56
    RULE_vector_statement = 57
    RULE_vector_mode = 58
    RULE_vector_expression = 59
    RULE_vector_operation = 60
    RULE_vflc = 61
    RULE_vector_func_call = 62
    RULE_vector_show_property = 63

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "plane_statement", 
                   "group_statement", "harmonic_statement", "harmonic_assign", 
                   "sani_statement", "sani_assign", "coupling_statement", 
                   "coup_assign", "carbon_shift_statement", "carbon_shift_assign", 
                   "carbon_shift_rcoil", "proton_shift_statement", "observed", 
                   "proton_shift_rcoil", "proton_shift_anisotropy", "proton_shift_amides", 
                   "proton_shift_carbons", "proton_shift_nitrogens", "proton_shift_oxygens", 
                   "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s", "number_a", "flag_statement", "vector_statement", 
                   "vector_mode", "vector_expression", "vector_operation", 
                   "vflc", "vector_func_call", "vector_show_property" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Averaging=7
    Bhig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Cutoff=39
    Cuton=40
    From=41
    To=42
    Peak=43
    Spectrum=44
    Volume=45
    Ppm1=46
    Ppm2=47
    Restraints=48
    Dihedral=49
    Nassign=50
    Print_any=51
    Plane=52
    Group=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Sanisotropy=59
    Coefficients=60
    ForceConstant=61
    Coupling=62
    Carbon=63
    Expectation=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Zero=68
    Proton=69
    Observed=70
    Anisotropy=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Conformation=78
    Compressed=79
    Phase=80
    Size=81
    Dimensions=82
    Danisotropy=83
    OneBond=84
    AngleDb=85
    DerivFlag=86
    Angle_or_Dihedral=87
    Flags=88
    All=89
    Around=90
    Atom=91
    Attribute=92
    BondedTo=93
    ByGroup=94
    ByRes=95
    Chemical=96
    Fbox=97
    Hydrogen=98
    Id=99
    Known=100
    Name=101
    NONE=102
    Point=103
    Cut=104
    Previous=105
    Pseudo=106
    Residue=107
    Resname=108
    Saround=109
    SegIdentifier=110
    Sfbox=111
    Store_1=112
    Store_2=113
    Store_3=114
    Store_4=115
    Store_5=116
    Store_6=117
    Store_7=118
    Store_8=119
    Store_9=120
    Tag=121
    Vector=122
    Do_Lp=123
    Identify_Lp=124
    Show=125
    Tail=126
    Head=127
    Or_op=128
    And_op=129
    Not_op=130
    Comma=131
    Complex=132
    Integer=133
    Logical=134
    Real=135
    Double_quote_string=136
    Simple_name=137
    Simple_names=138
    Integers=139
    L_paren=140
    R_paren=141
    Colon=142
    Equ_op=143
    Lt_op=144
    Gt_op=145
    Leq_op=146
    Geq_op=147
    Neq_op=148
    SPACE=149
    COMMENT=150
    SECTION_COMMENT=151
    LINE_COMMENT=152
    SET_VARIABLE=153
    Abs=154
    Attr_properties=155
    Comparison_ops=156
    SPACE_ATTR=157
    Averaging_methods=158
    Simple_name_A=159
    Equ_op_P=160
    Potential_types=161
    Simple_name_P=162
    SPACE_POTE=163
    Noe_analysis=164
    SPACE_ANAL=165
    Exclude=166
    Include=167
    End_F=168
    Class_name=169
    Any_class=170
    SPACE_FLAG=171
    R_paren_VE=172
    Equ_op_VE=173
    Add_op_VE=174
    Sub_op_VE=175
    Mul_op_VE=176
    Div_op_VE=177
    Exp_op_VE=178
    Comma_VE=179
    Integer_VE=180
    Real_VE=181
    Atom_properties_VE=182
    Abs_VE=183
    Acos_VE=184
    Asin_VE=185
    Cos_VE=186
    Decode_VE=187
    Encode_VE=188
    Exp_VE=189
    Gauss_VE=190
    Heavy_VE=191
    Int_VE=192
    Log10_VE=193
    Log_VE=194
    Max_VE=195
    Maxw_VE=196
    Min_VE=197
    Mod_VE=198
    Norm_VE=199
    Random_VE=200
    Sign_VE=201
    Sin_VE=202
    Sqrt_VE=203
    Tan_VE=204
    Simple_name_VE=205
    Double_quote_string_VE=206
    L_paren_VF=207
    L_paren_VS=208
    R_paren_VS=209
    Average_VS=210
    Element_VS=211
    Max_VS=212
    Min_VS=213
    Norm_VS=214
    Rms_VS=215
    Sum_VS=216
    Atom_properties_VS=217
    SPACE_VS=218

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 151
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Assign) | (1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Dihedral) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Plane) | (1 << CnsMRParser.Group) | (1 << CnsMRParser.Harmonic) | (1 << CnsMRParser.Sanisotropy) | (1 << CnsMRParser.Coupling) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CnsMRParser.Proton - 69)) | (1 << (CnsMRParser.Conformation - 69)) | (1 << (CnsMRParser.Danisotropy - 69)) | (1 << (CnsMRParser.OneBond - 69)) | (1 << (CnsMRParser.AngleDb - 69)) | (1 << (CnsMRParser.Flags - 69)) | (1 << (CnsMRParser.Vector - 69)))) != 0):
                self.state = 149
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 128
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 129
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 130
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 131
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 132
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 133
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 134
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 135
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 136
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 137
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 138
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 139
                    self.angle_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 140
                    self.flag_statement()
                    pass

                elif la_ == 14:
                    self.state = 141
                    self.vector_statement()
                    pass

                elif la_ == 15:
                    self.state = 142
                    self.noe_assign()
                    pass

                elif la_ == 16:
                    self.state = 143
                    self.dihedral_assign()
                    pass

                elif la_ == 17:
                    self.state = 144
                    self.sani_assign()
                    pass

                elif la_ == 18:
                    self.state = 145
                    self.plane_statement()
                    pass

                elif la_ == 19:
                    self.state = 146
                    self.harmonic_assign()
                    pass

                elif la_ == 20:
                    self.state = 147
                    self.coup_assign()
                    pass

                elif la_ == 21:
                    self.state = 148
                    self.carbon_shift_assign()
                    pass


                self.state = 153
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 154
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 156
            self.match(CnsMRParser.Noe)
            self.state = 160
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 157
                    self.noe_statement() 
                self.state = 162
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 163
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 165
                self.match(CnsMRParser.Restraints)


            self.state = 168
            self.match(CnsMRParser.Dihedral)
            self.state = 172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Scale) | (1 << CnsMRParser.Nassign) | (1 << CnsMRParser.Print_any))) != 0):
                self.state = 169
                self.dihedral_statement()
                self.state = 174
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 175
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 178
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 177
                self.match(CnsMRParser.Restraints)


            self.state = 180
            self.match(CnsMRParser.Plane)
            self.state = 184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0):
                self.state = 181
                self.plane_statement()
                self.state = 186
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 187
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 189
                self.match(CnsMRParser.Restraints)


            self.state = 192
            self.match(CnsMRParser.Harmonic)
            self.state = 196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Exponent or _la==CnsMRParser.Normal:
                self.state = 193
                self.harmonic_statement()
                self.state = 198
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 199
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 201
            self.match(CnsMRParser.Sanisotropy)
            self.state = 205
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 202
                self.sani_statement()
                self.state = 207
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 208
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 210
            self.match(CnsMRParser.Coupling)
            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 211
                self.coupling_statement()
                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 217
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 219
            self.match(CnsMRParser.Carbon)
            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.ForceConstant - 5)) | (1 << (CnsMRParser.Expectation - 5)) | (1 << (CnsMRParser.PhiStep - 5)) | (1 << (CnsMRParser.PsiStep - 5)) | (1 << (CnsMRParser.Rcoil - 5)) | (1 << (CnsMRParser.Zero - 5)))) != 0):
                self.state = 220
                self.carbon_shift_statement()
                self.state = 225
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 226
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 228
            self.match(CnsMRParser.Proton)
            self.state = 232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Classification) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CnsMRParser.Rcoil - 67)) | (1 << (CnsMRParser.Observed - 67)) | (1 << (CnsMRParser.Anisotropy - 67)) | (1 << (CnsMRParser.Amides - 67)) | (1 << (CnsMRParser.Nitrogens - 67)) | (1 << (CnsMRParser.Oxygens - 67)) | (1 << (CnsMRParser.RingAtoms - 67)) | (1 << (CnsMRParser.AlphasAndAmides - 67)) | (1 << (CnsMRParser.Error - 67)))) != 0):
                self.state = 229
                self.proton_shift_statement()
                self.state = 234
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 235
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def conformation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 237
            self.match(CnsMRParser.Conformation)
            self.state = 241
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Compressed - 64)) | (1 << (CnsMRParser.Phase - 64)) | (1 << (CnsMRParser.Size - 64)))) != 0):
                self.state = 238
                self.conformation_statement()
                self.state = 243
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 244
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 246
            self.match(CnsMRParser.Danisotropy)
            self.state = 250
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 247
                self.diffusion_statement()
                self.state = 252
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 253
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.match(CnsMRParser.OneBond)
            self.state = 259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 256
                self.one_bond_coupling_statement()
                self.state = 261
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 262
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 264
            self.match(CnsMRParser.AngleDb)
            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Size - 64)) | (1 << (CnsMRParser.DerivFlag - 64)))) != 0):
                self.state = 265
                self.angle_db_statement()
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 271
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def noe_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Averaging(self):
            return self.getToken(CnsMRParser.Averaging, 0)

        def Simple_name_A(self):
            return self.getToken(CnsMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(CnsMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(CnsMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(CnsMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 401
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 273
                self.match(CnsMRParser.Analysis)
                self.state = 275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 274
                    self.match(CnsMRParser.Equ_op)


                self.state = 277
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 278
                self.noe_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 279
                self.match(CnsMRParser.Asymptote)
                self.state = 280
                self.match(CnsMRParser.Simple_name)
                self.state = 281
                self.number_s()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 282
                self.match(CnsMRParser.Averaging)
                self.state = 283
                self.match(CnsMRParser.Simple_name_A)
                self.state = 284
                self.match(CnsMRParser.Averaging_methods)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 285
                self.match(CnsMRParser.Bhig)
                self.state = 286
                self.match(CnsMRParser.Simple_name)
                self.state = 287
                self.number_s()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 288
                self.match(CnsMRParser.Ceiling)
                self.state = 290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 289
                    self.match(CnsMRParser.Equ_op)


                self.state = 292
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 293
                self.match(CnsMRParser.Classification)
                self.state = 295
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 294
                    self.match(CnsMRParser.Equ_op)


                self.state = 297
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 298
                self.match(CnsMRParser.CountViol)
                self.state = 299
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 300
                self.match(CnsMRParser.Cv)
                self.state = 302
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 301
                    self.match(CnsMRParser.Equ_op)


                self.state = 304
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 305
                self.match(CnsMRParser.Den)
                self.state = 306
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 307
                self.match(CnsMRParser.Den)
                self.state = 308
                self.match(CnsMRParser.Update)
                self.state = 309
                self.match(CnsMRParser.Gamma)
                self.state = 311
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 310
                    self.match(CnsMRParser.Equ_op)


                self.state = 313
                self.number_s()
                self.state = 314
                self.match(CnsMRParser.Kappa)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 315
                    self.match(CnsMRParser.Equ_op)


                self.state = 318
                self.number_s()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 320
                self.match(CnsMRParser.Distribute)
                self.state = 321
                self.match(CnsMRParser.Simple_name)
                self.state = 322
                self.match(CnsMRParser.Simple_name)
                self.state = 323
                self.number_s()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 327
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 324
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 329
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 330
                self.match(CnsMRParser.End)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 331
                self.match(CnsMRParser.Monomers)
                self.state = 332
                self.match(CnsMRParser.Simple_name)
                self.state = 333
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 334
                self.match(CnsMRParser.Ncount)
                self.state = 335
                self.match(CnsMRParser.Simple_name)
                self.state = 336
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 337
                self.match(CnsMRParser.Nrestraints)
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 338
                    self.match(CnsMRParser.Equ_op)


                self.state = 341
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 342
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 343
                self.match(CnsMRParser.Partition)
                self.state = 345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 344
                    self.match(CnsMRParser.Equ_op)


                self.state = 347
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 348
                self.match(CnsMRParser.Potential)
                self.state = 349
                self.match(CnsMRParser.Simple_name_P)
                self.state = 350
                self.match(CnsMRParser.Potential_types)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 351
                self.match(CnsMRParser.Predict)
                self.state = 352
                self.predict_statement()
                self.state = 353
                self.match(CnsMRParser.End)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 355
                self.match(CnsMRParser.Print)
                self.state = 356
                self.match(CnsMRParser.Threshold)
                self.state = 358
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 357
                    self.match(CnsMRParser.Equ_op)


                self.state = 360
                self.number_s()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 361
                self.match(CnsMRParser.Raverage)
                self.state = 365
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 362
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 367
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 368
                self.match(CnsMRParser.End)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 369
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 370
                self.match(CnsMRParser.Rswitch)
                self.state = 371
                self.match(CnsMRParser.Simple_name)
                self.state = 372
                self.number_s()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 373
                self.match(CnsMRParser.Scale)
                self.state = 374
                self.match(CnsMRParser.Simple_name)
                self.state = 375
                self.number_s()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 376
                self.match(CnsMRParser.SoExponent)
                self.state = 377
                self.match(CnsMRParser.Simple_name)
                self.state = 378
                self.number_s()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 379
                self.match(CnsMRParser.SqConstant)
                self.state = 380
                self.match(CnsMRParser.Simple_name)
                self.state = 381
                self.number_s()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 382
                self.match(CnsMRParser.SqExponent)
                self.state = 383
                self.match(CnsMRParser.Simple_name)
                self.state = 384
                self.number_s()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 385
                self.match(CnsMRParser.SqOffset)
                self.state = 386
                self.match(CnsMRParser.Simple_name)
                self.state = 387
                self.number_s()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 388
                self.match(CnsMRParser.Taverage)
                self.state = 392
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 389
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 394
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                self.state = 395
                self.match(CnsMRParser.End)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 396
                self.match(CnsMRParser.Temperature)
                self.state = 398
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 397
                    self.match(CnsMRParser.Equ_op)


                self.state = 400
                self.number_s()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 403
            self.match(CnsMRParser.Assign)
            self.state = 404
            self.selection()
            self.state = 405
            self.selection()
            self.state = 406
            self.number()
            self.state = 407
            self.number()
            self.state = 408
            self.number()
            self.state = 412
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,31,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 409
                    self.noe_annotation() 
                self.state = 414
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 415
                self.match(CnsMRParser.Or_op)
                self.state = 416
                self.selection()
                self.state = 417
                self.selection()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 424
                self.match(CnsMRParser.Cutoff)
                self.state = 426
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 425
                    self.match(CnsMRParser.Equ_op)


                self.state = 428
                self.number_s()
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 429
                self.match(CnsMRParser.Cuton)
                self.state = 431
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 430
                    self.match(CnsMRParser.Equ_op)


                self.state = 433
                self.number_s()
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 434
                self.match(CnsMRParser.From)
                self.state = 435
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 436
                self.match(CnsMRParser.To)
                self.state = 437
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(CnsMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(CnsMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(CnsMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(CnsMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(CnsMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(CnsMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = CnsMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 475
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 440
                self.match(CnsMRParser.Peak)
                self.state = 442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 441
                    self.match(CnsMRParser.Equ_op)


                self.state = 444
                self.number_a()
                pass
            elif token in [CnsMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 445
                self.match(CnsMRParser.Spectrum)
                self.state = 447
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 446
                    self.match(CnsMRParser.Equ_op)


                self.state = 449
                self.number_a()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 450
                self.match(CnsMRParser.Weight)
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 451
                    self.match(CnsMRParser.Equ_op)


                self.state = 454
                self.number_a()
                pass
            elif token in [CnsMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 455
                self.match(CnsMRParser.Volume)
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 456
                    self.match(CnsMRParser.Equ_op)


                self.state = 459
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 460
                self.match(CnsMRParser.Ppm1)
                self.state = 462
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 461
                    self.match(CnsMRParser.Equ_op)


                self.state = 464
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 465
                self.match(CnsMRParser.Ppm2)
                self.state = 467
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 466
                    self.match(CnsMRParser.Equ_op)


                self.state = 469
                self.number_a()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 470
                self.match(CnsMRParser.Cv)
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 471
                    self.match(CnsMRParser.Equ_op)


                self.state = 474
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,0)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 500
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 477
                self.dihedral_assign()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 478
                self.match(CnsMRParser.Cv)
                self.state = 480
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 479
                    self.match(CnsMRParser.Equ_op)


                self.state = 482
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 483
                self.match(CnsMRParser.Nassign)
                self.state = 485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 484
                    self.match(CnsMRParser.Equ_op)


                self.state = 487
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 4)
                self.state = 488
                self.match(CnsMRParser.Partition)
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 489
                    self.match(CnsMRParser.Equ_op)


                self.state = 492
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 493
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 494
                self.match(CnsMRParser.Scale)
                self.state = 496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 495
                    self.match(CnsMRParser.Equ_op)


                self.state = 498
                self.number_s()
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 7)
                self.state = 499
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(CnsMRParser.Assign)
            self.state = 503
            self.selection()
            self.state = 504
            self.selection()
            self.state = 505
            self.selection()
            self.state = 506
            self.selection()
            self.state = 507
            self.number()
            self.state = 508
            self.number()
            self.state = 509
            self.number()
            self.state = 510
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_plane_statement)
        self._la = 0 # Token type
        try:
            self.state = 522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 512
                self.match(CnsMRParser.Group)
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Selection or _la==CnsMRParser.Weight:
                    self.state = 513
                    self.group_statement()
                    self.state = 518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 519
                self.match(CnsMRParser.End)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 520
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 521
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 524
                self.match(CnsMRParser.Selection)
                self.state = 526
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 525
                    self.match(CnsMRParser.Equ_op)


                self.state = 528
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 529
                self.match(CnsMRParser.Weight)
                self.state = 531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 530
                    self.match(CnsMRParser.Equ_op)


                self.state = 533
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 575
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 536
                self.match(CnsMRParser.Exponent)
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 537
                    self.match(CnsMRParser.Equ_op)


                self.state = 540
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 541
                self.match(CnsMRParser.Normal)
                self.state = 543
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 542
                    self.match(CnsMRParser.Equ_op)


                self.state = 545
                self.match(CnsMRParser.L_paren)
                self.state = 571
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integer, CnsMRParser.Real]:
                    self.state = 546
                    self.number_s()
                    self.state = 548
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 547
                        self.match(CnsMRParser.Comma)


                    self.state = 550
                    self.number_s()
                    self.state = 552
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 551
                        self.match(CnsMRParser.Comma)


                    self.state = 554
                    self.number_s()
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 556
                    self.match(CnsMRParser.Tail)
                    self.state = 558
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 557
                        self.match(CnsMRParser.Equ_op)


                    self.state = 560
                    self.selection()
                    self.state = 562
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 561
                        self.match(CnsMRParser.Comma)


                    self.state = 569
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 564
                        self.match(CnsMRParser.Head)
                        self.state = 566
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CnsMRParser.Equ_op:
                            self.state = 565
                            self.match(CnsMRParser.Equ_op)


                        self.state = 568
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 573
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = CnsMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 577
            self.match(CnsMRParser.Assign)
            self.state = 578
            self.selection()
            self.state = 579
            self.number()
            self.state = 580
            self.number()
            self.state = 581
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 613
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 583
                self.sani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 584
                self.match(CnsMRParser.Classification)
                self.state = 586
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 585
                    self.match(CnsMRParser.Equ_op)


                self.state = 588
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 589
                self.match(CnsMRParser.Coefficients)
                self.state = 590
                self.number_s()
                self.state = 591
                self.number_s()
                self.state = 592
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 594
                self.match(CnsMRParser.ForceConstant)
                self.state = 596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 595
                    self.match(CnsMRParser.Equ_op)


                self.state = 598
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 599
                self.match(CnsMRParser.Nrestraints)
                self.state = 601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 600
                    self.match(CnsMRParser.Equ_op)


                self.state = 603
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 604
                self.match(CnsMRParser.Potential)
                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 605
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 608
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 609
                self.match(CnsMRParser.Print)
                self.state = 610
                self.match(CnsMRParser.Threshold)
                self.state = 611
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 612
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 615
            self.match(CnsMRParser.Assign)
            self.state = 616
            self.selection()
            self.state = 617
            self.selection()
            self.state = 618
            self.selection()
            self.state = 619
            self.selection()
            self.state = 620
            self.selection()
            self.state = 621
            self.selection()
            self.state = 622
            self.number()
            self.state = 623
            self.number()
            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 624
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 676
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 627
                self.coup_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 628
                self.match(CnsMRParser.Classification)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 629
                    self.match(CnsMRParser.Equ_op)


                self.state = 632
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 633
                self.match(CnsMRParser.Coefficients)
                self.state = 634
                self.number_s()
                self.state = 635
                self.number_s()
                self.state = 636
                self.number_s()
                self.state = 637
                self.number_s()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 639
                self.match(CnsMRParser.Cv)
                self.state = 641
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 640
                    self.match(CnsMRParser.Equ_op)


                self.state = 643
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 644
                self.match(CnsMRParser.ForceConstant)
                self.state = 645
                self.number_s()
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                    self.state = 646
                    self.number_s()


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 649
                self.match(CnsMRParser.Nrestraints)
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 650
                    self.match(CnsMRParser.Equ_op)


                self.state = 653
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 654
                self.match(CnsMRParser.Partition)
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 655
                    self.match(CnsMRParser.Equ_op)


                self.state = 658
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 659
                self.match(CnsMRParser.Potential)
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 660
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 663
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 664
                self.match(CnsMRParser.Print)
                self.state = 665
                self.match(CnsMRParser.Threshold)
                self.state = 666
                self.number_s()
                self.state = 673
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 667
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 668
                    self.match(CnsMRParser.Classification)
                    self.state = 670
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 669
                        self.match(CnsMRParser.Equ_op)


                    self.state = 672
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 675
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(CnsMRParser.Assign)
            self.state = 679
            self.selection()
            self.state = 680
            self.selection()
            self.state = 681
            self.selection()
            self.state = 682
            self.selection()
            self.state = 688
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 683
                self.selection()
                self.state = 684
                self.selection()
                self.state = 685
                self.selection()
                self.state = 686
                self.selection()


            self.state = 690
            self.number()
            self.state = 691
            self.number()
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 692
                self.number()
                self.state = 693
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 741
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 697
                self.carbon_shift_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 698
                self.match(CnsMRParser.Classification)
                self.state = 700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 699
                    self.match(CnsMRParser.Equ_op)


                self.state = 702
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 703
                self.match(CnsMRParser.Expectation)
                self.state = 704
                self.match(CnsMRParser.Integer)
                self.state = 705
                self.match(CnsMRParser.Integer)
                self.state = 706
                self.number_s()
                self.state = 707
                self.number_s()
                self.state = 708
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 710
                self.match(CnsMRParser.ForceConstant)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 711
                    self.match(CnsMRParser.Equ_op)


                self.state = 714
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 715
                self.match(CnsMRParser.Nrestraints)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 716
                    self.match(CnsMRParser.Equ_op)


                self.state = 719
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 720
                self.match(CnsMRParser.PhiStep)
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 721
                    self.match(CnsMRParser.Equ_op)


                self.state = 724
                self.number_s()
                pass
            elif token in [CnsMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 725
                self.match(CnsMRParser.PsiStep)
                self.state = 727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 726
                    self.match(CnsMRParser.Equ_op)


                self.state = 729
                self.number_s()
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 730
                self.match(CnsMRParser.Potential)
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 731
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 734
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 735
                self.match(CnsMRParser.Print)
                self.state = 736
                self.match(CnsMRParser.Threshold)
                self.state = 737
                self.number_s()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 738
                self.carbon_shift_rcoil()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 739
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 740
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(CnsMRParser.Assign)
            self.state = 744
            self.selection()
            self.state = 745
            self.selection()
            self.state = 746
            self.selection()
            self.state = 747
            self.selection()
            self.state = 748
            self.selection()
            self.state = 749
            self.number()
            self.state = 750
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 752
            self.match(CnsMRParser.Rcoil)
            self.state = 753
            self.selection()
            self.state = 754
            self.number_s()
            self.state = 755
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(CnsMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 797
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 757
                self.observed()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 758
                self.proton_shift_rcoil()
                pass
            elif token in [CnsMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 759
                self.proton_shift_anisotropy()
                pass
            elif token in [CnsMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 760
                self.proton_shift_amides()
                pass
            elif token in [CnsMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 761
                self.proton_shift_carbons()
                pass
            elif token in [CnsMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 762
                self.proton_shift_nitrogens()
                pass
            elif token in [CnsMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 763
                self.proton_shift_oxygens()
                pass
            elif token in [CnsMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 764
                self.proton_shift_ring_atoms()
                pass
            elif token in [CnsMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 765
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 766
                self.match(CnsMRParser.Classification)
                self.state = 768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 767
                    self.match(CnsMRParser.Equ_op)


                self.state = 770
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 771
                self.match(CnsMRParser.Error)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 772
                    self.match(CnsMRParser.Equ_op)


                self.state = 775
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 12)
                self.state = 776
                self.match(CnsMRParser.ForceConstant)
                self.state = 777
                self.number_s()
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                    self.state = 778
                    self.number_s()


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 781
                self.match(CnsMRParser.Potential)
                self.state = 782
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 783
                self.match(CnsMRParser.Print)
                self.state = 784
                self.match(CnsMRParser.Threshold)
                self.state = 785
                self.number_s()
                self.state = 792
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 786
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 787
                    self.match(CnsMRParser.Classification)
                    self.state = 789
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 788
                        self.match(CnsMRParser.Equ_op)


                    self.state = 791
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 794
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 796
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 799
            self.match(CnsMRParser.Observed)
            self.state = 800
            self.selection()
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 801
                self.selection()


            self.state = 804
            self.number_s()
            self.state = 806
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 805
                self.number_s()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(CnsMRParser.Rcoil)
            self.state = 809
            self.selection()
            self.state = 810
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 812
            self.match(CnsMRParser.Anisotropy)
            self.state = 813
            self.selection()
            self.state = 814
            self.selection()
            self.state = 815
            self.selection()
            self.state = 816
            self.match(CnsMRParser.Simple_name)
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 817
                self.match(CnsMRParser.Logical)


            self.state = 820
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(CnsMRParser.Amides)
            self.state = 823
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 825
            self.match(CnsMRParser.Carbon)
            self.state = 826
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 828
            self.match(CnsMRParser.Nitrogens)
            self.state = 829
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 831
            self.match(CnsMRParser.Oxygens)
            self.state = 832
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(CnsMRParser.RingAtoms)
            self.state = 835
            self.match(CnsMRParser.Simple_name)
            self.state = 836
            self.selection()
            self.state = 837
            self.selection()
            self.state = 838
            self.selection()
            self.state = 839
            self.selection()
            self.state = 840
            self.selection()
            self.state = 842
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 841
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 844
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 845
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 930
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 847
                self.conf_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 848
                self.match(CnsMRParser.Classification)
                self.state = 850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 849
                    self.match(CnsMRParser.Equ_op)


                self.state = 852
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 853
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 854
                self.match(CnsMRParser.Expectation)
                self.state = 855
                self.match(CnsMRParser.Integer)
                self.state = 857
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,99,self._ctx)
                if la_ == 1:
                    self.state = 856
                    self.match(CnsMRParser.Integer)


                self.state = 860
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                if la_ == 1:
                    self.state = 859
                    self.match(CnsMRParser.Integer)


                self.state = 863
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 862
                    self.match(CnsMRParser.Integer)


                self.state = 865
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 866
                self.match(CnsMRParser.Error)
                self.state = 868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 867
                    self.match(CnsMRParser.Equ_op)


                self.state = 870
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 871
                self.match(CnsMRParser.ForceConstant)
                self.state = 873
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 872
                    self.match(CnsMRParser.Equ_op)


                self.state = 875
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 876
                self.match(CnsMRParser.Nrestraints)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 877
                    self.match(CnsMRParser.Equ_op)


                self.state = 880
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 881
                self.match(CnsMRParser.Phase)
                self.state = 882
                self.match(CnsMRParser.Integer)
                self.state = 883
                self.match(CnsMRParser.Integer)
                self.state = 884
                self.match(CnsMRParser.Integer)
                self.state = 888
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 885
                    self.match(CnsMRParser.Integer)
                    self.state = 886
                    self.match(CnsMRParser.Integer)
                    self.state = 887
                    self.match(CnsMRParser.Integer)


                self.state = 893
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 890
                    self.match(CnsMRParser.Integer)
                    self.state = 891
                    self.match(CnsMRParser.Integer)
                    self.state = 892
                    self.match(CnsMRParser.Integer)


                self.state = 898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 895
                    self.match(CnsMRParser.Integer)
                    self.state = 896
                    self.match(CnsMRParser.Integer)
                    self.state = 897
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 900
                self.match(CnsMRParser.Potential)
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 901
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 904
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 905
                self.match(CnsMRParser.Print)
                self.state = 906
                self.match(CnsMRParser.Threshold)
                self.state = 907
                self.number_s()
                self.state = 914
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 908
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 909
                    self.match(CnsMRParser.Classification)
                    self.state = 911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 910
                        self.match(CnsMRParser.Equ_op)


                    self.state = 913
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 916
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 917
                self.match(CnsMRParser.Size)
                self.state = 918
                self.match(CnsMRParser.Dimensions)
                self.state = 919
                self.match(CnsMRParser.Integer)
                self.state = 921
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 920
                    self.match(CnsMRParser.Integer)


                self.state = 924
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 923
                    self.match(CnsMRParser.Integer)


                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 926
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 929
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 932
            self.match(CnsMRParser.Assign)
            self.state = 933
            self.selection()
            self.state = 934
            self.selection()
            self.state = 935
            self.selection()
            self.state = 936
            self.selection()
            self.state = 942
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.state = 937
                self.selection()
                self.state = 938
                self.selection()
                self.state = 939
                self.selection()
                self.state = 940
                self.selection()


            self.state = 949
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
            if la_ == 1:
                self.state = 944
                self.selection()
                self.state = 945
                self.selection()
                self.state = 946
                self.selection()
                self.state = 947
                self.selection()


            self.state = 956
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 951
                self.selection()
                self.state = 952
                self.selection()
                self.state = 953
                self.selection()
                self.state = 954
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 990
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 958
                self.dani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 959
                self.match(CnsMRParser.Classification)
                self.state = 961
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 960
                    self.match(CnsMRParser.Equ_op)


                self.state = 963
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 964
                self.match(CnsMRParser.Coefficients)
                self.state = 965
                self.number_s()
                self.state = 966
                self.number_s()
                self.state = 967
                self.number_s()
                self.state = 968
                self.number_s()
                self.state = 969
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 971
                self.match(CnsMRParser.ForceConstant)
                self.state = 973
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 972
                    self.match(CnsMRParser.Equ_op)


                self.state = 975
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 976
                self.match(CnsMRParser.Nrestraints)
                self.state = 978
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 977
                    self.match(CnsMRParser.Equ_op)


                self.state = 980
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 981
                self.match(CnsMRParser.Potential)
                self.state = 983
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 982
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 985
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 986
                self.match(CnsMRParser.Print)
                self.state = 987
                self.match(CnsMRParser.Threshold)
                self.state = 988
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 989
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 992
            self.match(CnsMRParser.Assign)
            self.state = 993
            self.selection()
            self.state = 994
            self.selection()
            self.state = 995
            self.selection()
            self.state = 996
            self.selection()
            self.state = 997
            self.selection()
            self.state = 998
            self.selection()
            self.state = 999
            self.number()
            self.state = 1000
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1002
                self.one_bond_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1003
                self.match(CnsMRParser.Classification)
                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1004
                    self.match(CnsMRParser.Equ_op)


                self.state = 1007
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1008
                self.match(CnsMRParser.Coefficients)
                self.state = 1009
                self.number_s()
                self.state = 1010
                self.number_s()
                self.state = 1011
                self.number_s()
                self.state = 1012
                self.number_s()
                self.state = 1013
                self.number_s()
                self.state = 1014
                self.number_s()
                self.state = 1015
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1017
                self.match(CnsMRParser.ForceConstant)
                self.state = 1019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1018
                    self.match(CnsMRParser.Equ_op)


                self.state = 1021
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1022
                self.match(CnsMRParser.Nrestraints)
                self.state = 1024
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1023
                    self.match(CnsMRParser.Equ_op)


                self.state = 1026
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1027
                self.match(CnsMRParser.Potential)
                self.state = 1029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1028
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1031
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1032
                self.match(CnsMRParser.Print)
                self.state = 1033
                self.match(CnsMRParser.Threshold)
                self.state = 1034
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1035
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(CnsMRParser.Assign)
            self.state = 1039
            self.selection()
            self.state = 1040
            self.selection()
            self.state = 1041
            self.selection()
            self.state = 1042
            self.selection()
            self.state = 1043
            self.selection()
            self.state = 1044
            self.selection()
            self.state = 1045
            self.selection()
            self.state = 1046
            self.selection()
            self.state = 1047
            self.number()
            self.state = 1048
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(CnsMRParser.Equ_op_P, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(CnsMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1102
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1050
                self.angle_db_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1051
                self.match(CnsMRParser.Classification)
                self.state = 1053
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1052
                    self.match(CnsMRParser.Equ_op)


                self.state = 1055
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1056
                self.match(CnsMRParser.DerivFlag)
                self.state = 1058
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1057
                    self.match(CnsMRParser.Equ_op)


                self.state = 1060
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1061
                self.match(CnsMRParser.Expectation)
                self.state = 1062
                self.match(CnsMRParser.Integer)
                self.state = 1063
                self.match(CnsMRParser.Integer)
                self.state = 1064
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1065
                self.match(CnsMRParser.Error)
                self.state = 1067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1066
                    self.match(CnsMRParser.Equ_op)


                self.state = 1069
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1070
                self.match(CnsMRParser.ForceConstant)
                self.state = 1072
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1071
                    self.match(CnsMRParser.Equ_op)


                self.state = 1074
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1075
                self.match(CnsMRParser.Nrestraints)
                self.state = 1077
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1076
                    self.match(CnsMRParser.Equ_op)


                self.state = 1079
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1080
                self.match(CnsMRParser.Potential)
                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_P:
                    self.state = 1081
                    self.match(CnsMRParser.Equ_op_P)


                self.state = 1084
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1085
                self.match(CnsMRParser.Print)
                self.state = 1086
                self.match(CnsMRParser.Threshold)
                self.state = 1087
                self.number_s()
                self.state = 1094
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 1088
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 1089
                    self.match(CnsMRParser.Classification)
                    self.state = 1091
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1090
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1093
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1096
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1097
                self.match(CnsMRParser.Size)
                self.state = 1098
                self.match(CnsMRParser.Angle_or_Dihedral)
                self.state = 1099
                self.match(CnsMRParser.Integer)
                self.state = 1100
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1101
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1104
            self.match(CnsMRParser.Assign)
            self.state = 1105
            self.selection()
            self.state = 1106
            self.selection()
            self.state = 1107
            self.selection()
            self.state = 1108
            self.selection()
            self.state = 1109
            self.selection()
            self.state = 1110
            self.selection()
            self.state = 1111
            self.selection()
            self.state = 1112
            self.selection()
            self.state = 1113
            self.selection()
            self.state = 1114
            self.selection()
            self.state = 1115
            self.selection()
            self.state = 1117
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1116
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1119
            self.match(CnsMRParser.L_paren)
            self.state = 1120
            self.selection_expression()
            self.state = 1121
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1123
            self.term()
            self.state = 1128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 1124
                self.match(CnsMRParser.Or_op)
                self.state = 1125
                self.term()
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1131
            self.factor(0)
            self.state = 1136
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1132
                self.match(CnsMRParser.And_op)
                self.state = 1133
                self.factor(0)
                self.state = 1138
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store_1(self):
            return self.getToken(CnsMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(CnsMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(CnsMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(CnsMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(CnsMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(CnsMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(CnsMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(CnsMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(CnsMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1283
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.state = 1140
                self.match(CnsMRParser.L_paren)
                self.state = 1141
                self.selection_expression()
                self.state = 1142
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1144
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1145
                self.match(CnsMRParser.Atom)
                self.state = 1146
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1147
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1148
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1149
                self.match(CnsMRParser.Attribute)
                self.state = 1151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1150
                    self.match(CnsMRParser.Abs)


                self.state = 1153
                self.match(CnsMRParser.Attr_properties)
                self.state = 1154
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1155
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1156
                self.match(CnsMRParser.BondedTo)
                self.state = 1157
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1158
                self.match(CnsMRParser.ByGroup)
                self.state = 1159
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1160
                self.match(CnsMRParser.ByRes)
                self.state = 1161
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1162
                self.match(CnsMRParser.Chemical)
                self.state = 1169
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1163
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1164
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1167
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                    if la_ == 1:
                        self.state = 1165
                        self.match(CnsMRParser.Colon)
                        self.state = 1166
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1171
                self.match(CnsMRParser.Fbox)
                self.state = 1172
                self.number_f()
                self.state = 1173
                self.number_f()
                self.state = 1174
                self.number_f()
                self.state = 1175
                self.number_f()
                self.state = 1176
                self.number_f()
                self.state = 1177
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1179
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1180
                self.match(CnsMRParser.Id)
                self.state = 1181
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1182
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1183
                self.match(CnsMRParser.Name)
                self.state = 1190
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1184
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1185
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1188
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                    if la_ == 1:
                        self.state = 1186
                        self.match(CnsMRParser.Colon)
                        self.state = 1187
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1192
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1193
                self.match(CnsMRParser.Not_op)
                self.state = 1194
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1195
                self.match(CnsMRParser.Point)
                self.state = 1196
                self.match(CnsMRParser.L_paren)
                self.state = 1197
                self.number_f()
                self.state = 1199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1198
                    self.match(CnsMRParser.Comma)


                self.state = 1201
                self.number_f()
                self.state = 1203
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1202
                    self.match(CnsMRParser.Comma)


                self.state = 1205
                self.number_f()
                self.state = 1206
                self.match(CnsMRParser.R_paren)
                self.state = 1207
                self.match(CnsMRParser.Cut)
                self.state = 1208
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1210
                self.match(CnsMRParser.Point)
                self.state = 1211
                self.match(CnsMRParser.L_paren)
                self.state = 1212
                self.match(CnsMRParser.Tail)
                self.state = 1214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1213
                    self.match(CnsMRParser.Equ_op)


                self.state = 1216
                self.selection()
                self.state = 1218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1217
                    self.match(CnsMRParser.Comma)


                self.state = 1225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1220
                    self.match(CnsMRParser.Head)
                    self.state = 1222
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1221
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1224
                    self.selection()


                self.state = 1227
                self.match(CnsMRParser.R_paren)
                self.state = 1228
                self.match(CnsMRParser.Cut)
                self.state = 1229
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1231
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1232
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1233
                self.match(CnsMRParser.Residue)
                self.state = 1240
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1234
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1235
                    self.match(CnsMRParser.Integer)
                    self.state = 1238
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                    if la_ == 1:
                        self.state = 1236
                        self.match(CnsMRParser.Colon)
                        self.state = 1237
                        self.match(CnsMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1242
                self.match(CnsMRParser.Resname)
                self.state = 1249
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1243
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1244
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1247
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
                    if la_ == 1:
                        self.state = 1245
                        self.match(CnsMRParser.Colon)
                        self.state = 1246
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1251
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1263
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1252
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1253
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1256
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 1254
                        self.match(CnsMRParser.Colon)
                        self.state = 1255
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1258
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1261
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1259
                        self.match(CnsMRParser.Colon)
                        self.state = 1260
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1265
                self.match(CnsMRParser.Sfbox)
                self.state = 1266
                self.number_f()
                self.state = 1267
                self.number_f()
                self.state = 1268
                self.number_f()
                self.state = 1269
                self.number_f()
                self.state = 1270
                self.number_f()
                self.state = 1271
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1273
                self.match(CnsMRParser.Store_1)
                pass

            elif la_ == 25:
                self.state = 1274
                self.match(CnsMRParser.Store_2)
                pass

            elif la_ == 26:
                self.state = 1275
                self.match(CnsMRParser.Store_3)
                pass

            elif la_ == 27:
                self.state = 1276
                self.match(CnsMRParser.Store_4)
                pass

            elif la_ == 28:
                self.state = 1277
                self.match(CnsMRParser.Store_5)
                pass

            elif la_ == 29:
                self.state = 1278
                self.match(CnsMRParser.Store_6)
                pass

            elif la_ == 30:
                self.state = 1279
                self.match(CnsMRParser.Store_7)
                pass

            elif la_ == 31:
                self.state = 1280
                self.match(CnsMRParser.Store_8)
                pass

            elif la_ == 32:
                self.state = 1281
                self.match(CnsMRParser.Store_9)
                pass

            elif la_ == 33:
                self.state = 1282
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1293
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,160,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1291
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1285
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1286
                        self.match(CnsMRParser.Around)
                        self.state = 1287
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1288
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1289
                        self.match(CnsMRParser.Saround)
                        self.state = 1290
                        self.number_f()
                        pass

             
                self.state = 1295
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,160,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1298
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1300
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = CnsMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CnsMRParser.Flags, 0)

        def Include(self):
            return self.getToken(CnsMRParser.Include, 0)

        def End_F(self):
            return self.getToken(CnsMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(CnsMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Class_name)
            else:
                return self.getToken(CnsMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(CnsMRParser.Any_class, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = CnsMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1304
            self.match(CnsMRParser.Flags)
            self.state = 1315
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Exclude:
                self.state = 1305
                self.match(CnsMRParser.Exclude)
                self.state = 1313
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Include, CnsMRParser.Class_name]:
                    self.state = 1309
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CnsMRParser.Class_name:
                        self.state = 1306
                        self.match(CnsMRParser.Class_name)
                        self.state = 1311
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CnsMRParser.Any_class]:
                    self.state = 1312
                    self.match(CnsMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1317
            self.match(CnsMRParser.Include)
            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Class_name:
                self.state = 1318
                self.match(CnsMRParser.Class_name)
                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1324
            self.match(CnsMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(CnsMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = CnsMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self.match(CnsMRParser.Vector)
            self.state = 1327
            self.vector_mode()
            self.state = 1328
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(CnsMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(CnsMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(CnsMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = CnsMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 1336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Do_Lp, CnsMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1330
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Do_Lp or _la==CnsMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1331
                self.vector_expression()
                self.state = 1332
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1334
                self.match(CnsMRParser.Show)
                self.state = 1335
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = CnsMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.match(CnsMRParser.Atom_properties_VE)
            self.state = 1341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Equ_op_VE:
                self.state = 1339
                self.match(CnsMRParser.Equ_op_VE)
                self.state = 1340
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def vector_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_operationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,i)


        def Add_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Add_op_VE)
            else:
                return self.getToken(CnsMRParser.Add_op_VE, i)

        def Sub_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Sub_op_VE)
            else:
                return self.getToken(CnsMRParser.Sub_op_VE, i)

        def Mul_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Mul_op_VE)
            else:
                return self.getToken(CnsMRParser.Mul_op_VE, i)

        def Div_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Div_op_VE)
            else:
                return self.getToken(CnsMRParser.Div_op_VE, i)

        def Exp_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Exp_op_VE)
            else:
                return self.getToken(CnsMRParser.Exp_op_VE, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = CnsMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1343
            self.vflc()
            self.state = 1348
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1344
                    _la = self._input.LA(1)
                    if not(((((_la - 174)) & ~0x3f) == 0 and ((1 << (_la - 174)) & ((1 << (CnsMRParser.Add_op_VE - 174)) | (1 << (CnsMRParser.Sub_op_VE - 174)) | (1 << (CnsMRParser.Mul_op_VE - 174)) | (1 << (CnsMRParser.Div_op_VE - 174)) | (1 << (CnsMRParser.Exp_op_VE - 174)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1345
                    self.vector_operation() 
                self.state = 1350
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(CnsMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(CnsMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(CnsMRParser.Simple_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(CnsMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = CnsMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vflc)
        try:
            self.state = 1357
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1351
                self.match(CnsMRParser.Atom_properties_VE)
                pass
            elif token in [CnsMRParser.Abs_VE, CnsMRParser.Acos_VE, CnsMRParser.Cos_VE, CnsMRParser.Decode_VE, CnsMRParser.Encode_VE, CnsMRParser.Exp_VE, CnsMRParser.Gauss_VE, CnsMRParser.Heavy_VE, CnsMRParser.Int_VE, CnsMRParser.Log10_VE, CnsMRParser.Log_VE, CnsMRParser.Max_VE, CnsMRParser.Maxw_VE, CnsMRParser.Min_VE, CnsMRParser.Mod_VE, CnsMRParser.Norm_VE, CnsMRParser.Random_VE, CnsMRParser.Sign_VE, CnsMRParser.Sin_VE, CnsMRParser.Sqrt_VE, CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1352
                self.vector_func_call()
                pass
            elif token in [CnsMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1353
                self.match(CnsMRParser.Integer_VE)
                pass
            elif token in [CnsMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1354
                self.match(CnsMRParser.Real_VE)
                pass
            elif token in [CnsMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1355
                self.match(CnsMRParser.Simple_name_VE)
                pass
            elif token in [CnsMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1356
                self.match(CnsMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(CnsMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(CnsMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(CnsMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(CnsMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(CnsMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(CnsMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(CnsMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(CnsMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(CnsMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(CnsMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(CnsMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(CnsMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(CnsMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma_VE)
            else:
                return self.getToken(CnsMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(CnsMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(CnsMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(CnsMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(CnsMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(CnsMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(CnsMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(CnsMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(CnsMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(CnsMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = CnsMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1478
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1359
                self.match(CnsMRParser.Abs_VE)
                self.state = 1360
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1361
                self.vflc()
                self.state = 1362
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1364
                self.match(CnsMRParser.Acos_VE)
                self.state = 1365
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1366
                self.vflc()
                self.state = 1367
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1369
                self.match(CnsMRParser.Cos_VE)
                self.state = 1370
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1371
                self.vflc()
                self.state = 1372
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1374
                self.match(CnsMRParser.Decode_VE)
                self.state = 1375
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1376
                self.vflc()
                self.state = 1377
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1379
                self.match(CnsMRParser.Encode_VE)
                self.state = 1380
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1381
                self.vflc()
                self.state = 1382
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1384
                self.match(CnsMRParser.Exp_VE)
                self.state = 1385
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1386
                self.vflc()
                self.state = 1387
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1389
                self.match(CnsMRParser.Gauss_VE)
                self.state = 1390
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1391
                self.vflc()
                self.state = 1392
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1394
                self.match(CnsMRParser.Heavy_VE)
                self.state = 1395
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1396
                self.vflc()
                self.state = 1397
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1399
                self.match(CnsMRParser.Int_VE)
                self.state = 1400
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1401
                self.vflc()
                self.state = 1402
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1404
                self.match(CnsMRParser.Log10_VE)
                self.state = 1405
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1406
                self.vflc()
                self.state = 1407
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1409
                self.match(CnsMRParser.Log_VE)
                self.state = 1410
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1411
                self.vflc()
                self.state = 1412
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1414
                self.match(CnsMRParser.Max_VE)
                self.state = 1415
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1416
                self.vflc()
                self.state = 1421
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1417
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1418
                    self.vflc()
                    self.state = 1423
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1424
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1426
                self.match(CnsMRParser.Maxw_VE)
                self.state = 1427
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1428
                self.vflc()
                self.state = 1429
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1431
                self.match(CnsMRParser.Min_VE)
                self.state = 1432
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1433
                self.vflc()
                self.state = 1438
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1434
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1435
                    self.vflc()
                    self.state = 1440
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1441
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1443
                self.match(CnsMRParser.Mod_VE)
                self.state = 1444
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1445
                self.vflc()
                self.state = 1446
                self.match(CnsMRParser.Comma_VE)
                self.state = 1447
                self.vflc()
                self.state = 1448
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1450
                self.match(CnsMRParser.Norm_VE)
                self.state = 1451
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1452
                self.vflc()
                self.state = 1453
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1455
                self.match(CnsMRParser.Random_VE)
                self.state = 1456
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1457
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1458
                self.match(CnsMRParser.Sign_VE)
                self.state = 1459
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1460
                self.vflc()
                self.state = 1461
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1463
                self.match(CnsMRParser.Sin_VE)
                self.state = 1464
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1465
                self.vflc()
                self.state = 1466
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1468
                self.match(CnsMRParser.Sqrt_VE)
                self.state = 1469
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1470
                self.vflc()
                self.state = 1471
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1473
                self.match(CnsMRParser.Tan_VE)
                self.state = 1474
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1475
                self.vflc()
                self.state = 1476
                self.match(CnsMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(CnsMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(CnsMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(CnsMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(CnsMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(CnsMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(CnsMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(CnsMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(CnsMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(CnsMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(CnsMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = CnsMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1480
            _la = self._input.LA(1)
            if not(((((_la - 210)) & ~0x3f) == 0 and ((1 << (_la - 210)) & ((1 << (CnsMRParser.Average_VS - 210)) | (1 << (CnsMRParser.Element_VS - 210)) | (1 << (CnsMRParser.Max_VS - 210)) | (1 << (CnsMRParser.Min_VS - 210)) | (1 << (CnsMRParser.Norm_VS - 210)) | (1 << (CnsMRParser.Rms_VS - 210)) | (1 << (CnsMRParser.Sum_VS - 210)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1481
            self.match(CnsMRParser.L_paren_VS)
            self.state = 1482
            self.match(CnsMRParser.Atom_properties_VS)
            self.state = 1483
            self.match(CnsMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[51] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




