# Generated from CnsMRParser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u009a")
        buf.write("\u0498\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\7\2y\n\2\f\2\16\2|\13\2\3\2\7\2\177\n\2")
        buf.write("\f\2\16\2\u0082\13\2\3\2\7\2\u0085\n\2\f\2\16\2\u0088")
        buf.write("\13\2\3\2\7\2\u008b\n\2\f\2\16\2\u008e\13\2\3\2\7\2\u0091")
        buf.write("\n\2\f\2\16\2\u0094\13\2\3\2\7\2\u0097\n\2\f\2\16\2\u009a")
        buf.write("\13\2\3\2\3\2\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3")
        buf.write("\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\13\3")
        buf.write("\13\3\13\3\13\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\16\3\16")
        buf.write("\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u00e3")
        buf.write("\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\7\17\u00fb\n\17\f\17\16\17\u00fe\13\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\7\17\u011b\n\17\f\17\16\17\u011e\13\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\7\17\u0136\n\17\f\17\16\17\u0139\13\17\3\17\3\17\3\17")
        buf.write("\3\17\7\17\u013f\n\17\f\17\16\17\u0142\13\17\3\20\3\20")
        buf.write("\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u014e\n")
        buf.write("\20\f\20\16\20\u0151\13\20\3\21\3\21\3\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\5\21\u015d\n\21\3\22\7\22\u0160")
        buf.write("\n\22\f\22\16\22\u0163\13\22\3\22\3\22\3\22\3\22\3\22")
        buf.write("\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22\u0173")
        buf.write("\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\24\3\24\3\24\3\24\5\24\u0183\n\24\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\5\25\u018b\n\25\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\5\26\u0195\n\26\3\26\3\26\5\26\u0199\n")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u01a1\n\26\3\26")
        buf.write("\3\26\3\26\5\26\u01a6\n\26\5\26\u01a8\n\26\3\26\3\26\5")
        buf.write("\26\u01ac\n\26\3\27\7\27\u01af\n\27\f\27\16\27\u01b2\13")
        buf.write("\27\3\27\3\27\5\27\u01b6\n\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\5\27\u01cb\n\27\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\5\30\u01d7\n\30\3\31\7\31")
        buf.write("\u01da\n\31\f\31\16\31\u01dd\13\31\3\31\3\31\5\31\u01e1")
        buf.write("\n\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\5\31\u01f0\n\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\5\31\u0201\n\31\3\31\5\31\u0204\n\31\3\31\5\31\u0207")
        buf.write("\n\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\5\32\u0213\n\32\3\32\3\32\3\32\3\32\3\32\5\32\u021a\n")
        buf.write("\32\3\33\7\33\u021d\n\33\f\33\16\33\u0220\13\33\3\33\3")
        buf.write("\33\5\33\u0224\n\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\7\33\u0241")
        buf.write("\n\33\f\33\16\33\u0244\13\33\3\33\3\33\5\33\u0248\n\33")
        buf.write("\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\36\7\36\u0259\n\36\f\36\16\36\u025c")
        buf.write("\13\36\3\36\7\36\u025f\n\36\f\36\16\36\u0262\13\36\3\36")
        buf.write("\7\36\u0265\n\36\f\36\16\36\u0268\13\36\3\36\7\36\u026b")
        buf.write("\n\36\f\36\16\36\u026e\13\36\3\36\7\36\u0271\n\36\f\36")
        buf.write("\16\36\u0274\13\36\3\36\7\36\u0277\n\36\f\36\16\36\u027a")
        buf.write("\13\36\3\36\7\36\u027d\n\36\f\36\16\36\u0280\13\36\3\36")
        buf.write("\7\36\u0283\n\36\f\36\16\36\u0286\13\36\3\36\7\36\u0289")
        buf.write("\n\36\f\36\16\36\u028c\13\36\3\36\3\36\5\36\u0290\n\36")
        buf.write("\3\36\3\36\3\36\5\36\u0295\n\36\3\36\3\36\3\36\3\36\5")
        buf.write("\36\u029b\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\5\36\u02a5\n\36\3\36\5\36\u02a8\n\36\3\36\3\36\3\36\5")
        buf.write("\36\u02ad\n\36\3\37\3\37\3\37\5\37\u02b2\n\37\3\37\3\37")
        buf.write("\5\37\u02b6\n\37\3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\5!\u02c2")
        buf.write("\n!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3%\3%\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\5&\u02da\n&\3\'\3\'\3\'\3(\7(\u02e0")
        buf.write("\n(\f(\16(\u02e3\13(\3(\3(\5(\u02e7\n(\3(\3(\3(\3(\3(")
        buf.write("\5(\u02ee\n(\3(\5(\u02f1\n(\3(\5(\u02f4\n(\3(\3(\3(\3")
        buf.write("(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0307\n(\3")
        buf.write("(\3(\3(\5(\u030c\n(\3(\3(\3(\5(\u0311\n(\3(\3(\3(\3(\3")
        buf.write("(\3(\3(\3(\3(\5(\u031c\n(\3(\5(\u031f\n(\3(\3(\3(\3(\3")
        buf.write("(\5(\u0326\n(\3(\5(\u0329\n(\3(\5(\u032c\n(\3(\5(\u032f")
        buf.write("\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u033b\n)\3)\3)\3")
        buf.write(")\3)\3)\5)\u0342\n)\3)\3)\3)\3)\3)\5)\u0349\n)\3*\7*\u034c")
        buf.write("\n*\f*\16*\u034f\13*\3*\3*\5*\u0353\n*\3*\3*\3*\3*\3*")
        buf.write("\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u036a")
        buf.write("\n*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3+\3,\7,\u0377\n,\f,\16")
        buf.write(",\u037a\13,\3,\3,\5,\u037e\n,\3,\3,\3,\3,\3,\3,\3,\3,")
        buf.write("\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u0397")
        buf.write("\n,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\3.\7.\u03a6\n")
        buf.write(".\f.\16.\u03a9\13.\3.\3.\5.\u03ad\n.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\5.\u03c9\n.\3.\5.\u03cc\n.\3.\3.\3.\3.\3.\3.\5")
        buf.write(".\u03d4\n.\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u03e3")
        buf.write("\n/\3\60\3\60\3\60\3\60\3\61\3\61\3\61\7\61\u03ec\n\61")
        buf.write("\f\61\16\61\u03ef\13\61\3\62\3\62\3\62\7\62\u03f4\n\62")
        buf.write("\f\62\16\62\u03f7\13\62\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0405\n\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\5\63\u0415\n\63\5\63\u0417\n\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\5\63\u042a\n\63\5\63\u042c\n\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0435\n\63\3\63")
        buf.write("\3\63\5\63\u0439\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\5\63\u0446\n\63\3\63\3\63\3\63")
        buf.write("\5\63\u044b\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\5\63\u0458\n\63\5\63\u045a\n\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\5\63\u0461\n\63\5\63\u0463\n\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\5\63\u046a\n\63\3\63\3\63\3\63")
        buf.write("\5\63\u046f\n\63\5\63\u0471\n\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\5\63\u0485\n\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\7\63\u048d\n\63\f\63\16\63\u0490\13\63\3\64\3")
        buf.write("\64\3\65\3\65\3\66\3\66\3\66\5\u00fc\u011c\u0137\3d\67")
        buf.write("\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhj\2\5\3\2\u0087\u0088")
        buf.write("\4\2\u0083\u0083\u0089\u0089\4\2\u0083\u0083\u0085\u0085")
        buf.write("\2\u0565\2z\3\2\2\2\4\u009d\3\2\2\2\6\u00a1\3\2\2\2\b")
        buf.write("\u00a6\3\2\2\2\n\u00ab\3\2\2\2\f\u00b0\3\2\2\2\16\u00b4")
        buf.write("\3\2\2\2\20\u00b8\3\2\2\2\22\u00bc\3\2\2\2\24\u00c0\3")
        buf.write("\2\2\2\26\u00c4\3\2\2\2\30\u00c8\3\2\2\2\32\u00cc\3\2")
        buf.write("\2\2\34\u0140\3\2\2\2\36\u0143\3\2\2\2 \u015c\3\2\2\2")
        buf.write("\"\u0172\3\2\2\2$\u0174\3\2\2\2&\u0182\3\2\2\2(\u018a")
        buf.write("\3\2\2\2*\u01ab\3\2\2\2,\u01ca\3\2\2\2.\u01cc\3\2\2\2")
        buf.write("\60\u0206\3\2\2\2\62\u0208\3\2\2\2\64\u0247\3\2\2\2\66")
        buf.write("\u0249\3\2\2\28\u0252\3\2\2\2:\u02ac\3\2\2\2<\u02ae\3")
        buf.write("\2\2\2>\u02b7\3\2\2\2@\u02bb\3\2\2\2B\u02c5\3\2\2\2D\u02c8")
        buf.write("\3\2\2\2F\u02cb\3\2\2\2H\u02ce\3\2\2\2J\u02d1\3\2\2\2")
        buf.write("L\u02db\3\2\2\2N\u032e\3\2\2\2P\u0330\3\2\2\2R\u0369\3")
        buf.write("\2\2\2T\u036b\3\2\2\2V\u0396\3\2\2\2X\u0398\3\2\2\2Z\u03d3")
        buf.write("\3\2\2\2\\\u03d5\3\2\2\2^\u03e4\3\2\2\2`\u03e8\3\2\2\2")
        buf.write("b\u03f0\3\2\2\2d\u0484\3\2\2\2f\u0491\3\2\2\2h\u0493\3")
        buf.write("\2\2\2j\u0495\3\2\2\2ly\5\4\3\2my\5\6\4\2ny\5\b\5\2oy")
        buf.write("\5\n\6\2py\5\f\7\2qy\5\16\b\2ry\5\20\t\2sy\5\22\n\2ty")
        buf.write("\5\24\13\2uy\5\26\f\2vy\5\30\r\2wy\5\32\16\2xl\3\2\2\2")
        buf.write("xm\3\2\2\2xn\3\2\2\2xo\3\2\2\2xp\3\2\2\2xq\3\2\2\2xr\3")
        buf.write("\2\2\2xs\3\2\2\2xt\3\2\2\2xu\3\2\2\2xv\3\2\2\2xw\3\2\2")
        buf.write("\2y|\3\2\2\2zx\3\2\2\2z{\3\2\2\2{\u0080\3\2\2\2|z\3\2")
        buf.write("\2\2}\177\5\36\20\2~}\3\2\2\2\177\u0082\3\2\2\2\u0080")
        buf.write("~\3\2\2\2\u0080\u0081\3\2\2\2\u0081\u0086\3\2\2\2\u0082")
        buf.write("\u0080\3\2\2\2\u0083\u0085\5$\23\2\u0084\u0083\3\2\2\2")
        buf.write("\u0085\u0088\3\2\2\2\u0086\u0084\3\2\2\2\u0086\u0087\3")
        buf.write("\2\2\2\u0087\u008c\3\2\2\2\u0088\u0086\3\2\2\2\u0089\u008b")
        buf.write("\5.\30\2\u008a\u0089\3\2\2\2\u008b\u008e\3\2\2\2\u008c")
        buf.write("\u008a\3\2\2\2\u008c\u008d\3\2\2\2\u008d\u0092\3\2\2\2")
        buf.write("\u008e\u008c\3\2\2\2\u008f\u0091\5&\24\2\u0090\u008f\3")
        buf.write("\2\2\2\u0091\u0094\3\2\2\2\u0092\u0090\3\2\2\2\u0092\u0093")
        buf.write("\3\2\2\2\u0093\u0098\3\2\2\2\u0094\u0092\3\2\2\2\u0095")
        buf.write("\u0097\5\62\32\2\u0096\u0095\3\2\2\2\u0097\u009a\3\2\2")
        buf.write("\2\u0098\u0096\3\2\2\2\u0098\u0099\3\2\2\2\u0099\u009b")
        buf.write("\3\2\2\2\u009a\u0098\3\2\2\2\u009b\u009c\7\2\2\3\u009c")
        buf.write("\3\3\2\2\2\u009d\u009e\7\5\2\2\u009e\u009f\5\34\17\2\u009f")
        buf.write("\u00a0\7\4\2\2\u00a0\5\3\2\2\2\u00a1\u00a2\7\60\2\2\u00a2")
        buf.write("\u00a3\7\61\2\2\u00a3\u00a4\5\"\22\2\u00a4\u00a5\7\4\2")
        buf.write("\2\u00a5\7\3\2\2\2\u00a6\u00a7\7\60\2\2\u00a7\u00a8\7")
        buf.write("\64\2\2\u00a8\u00a9\5&\24\2\u00a9\u00aa\7\4\2\2\u00aa")
        buf.write("\t\3\2\2\2\u00ab\u00ac\7\60\2\2\u00ac\u00ad\78\2\2\u00ad")
        buf.write("\u00ae\5*\26\2\u00ae\u00af\7\4\2\2\u00af\13\3\2\2\2\u00b0")
        buf.write("\u00b1\7;\2\2\u00b1\u00b2\5,\27\2\u00b2\u00b3\7\4\2\2")
        buf.write("\u00b3\r\3\2\2\2\u00b4\u00b5\7?\2\2\u00b5\u00b6\5\60\31")
        buf.write("\2\u00b6\u00b7\7\4\2\2\u00b7\17\3\2\2\2\u00b8\u00b9\7")
        buf.write("A\2\2\u00b9\u00ba\5\64\33\2\u00ba\u00bb\7\4\2\2\u00bb")
        buf.write("\21\3\2\2\2\u00bc\u00bd\7G\2\2\u00bd\u00be\5:\36\2\u00be")
        buf.write("\u00bf\7\4\2\2\u00bf\23\3\2\2\2\u00c0\u00c1\7Q\2\2\u00c1")
        buf.write("\u00c2\5N(\2\u00c2\u00c3\7\4\2\2\u00c3\25\3\2\2\2\u00c4")
        buf.write("\u00c5\7V\2\2\u00c5\u00c6\5R*\2\u00c6\u00c7\7\4\2\2\u00c7")
        buf.write("\27\3\2\2\2\u00c8\u00c9\7W\2\2\u00c9\u00ca\5V,\2\u00ca")
        buf.write("\u00cb\7\4\2\2\u00cb\31\3\2\2\2\u00cc\u00cd\7X\2\2\u00cd")
        buf.write("\u00ce\5Z.\2\u00ce\u00cf\7\4\2\2\u00cf\33\3\2\2\2\u00d0")
        buf.write("\u00d1\7\6\2\2\u00d1\u00d2\7\u008d\2\2\u00d2\u013f\7%")
        buf.write("\2\2\u00d3\u013f\5\36\20\2\u00d4\u00d5\7\b\2\2\u00d5\u00d6")
        buf.write("\7\u0088\2\2\u00d6\u013f\5j\66\2\u00d7\u00d8\7\t\2\2\u00d8")
        buf.write("\u00d9\7\u0088\2\2\u00d9\u013f\7*\2\2\u00da\u00db\7\n")
        buf.write("\2\2\u00db\u00dc\7\u0088\2\2\u00dc\u013f\5j\66\2\u00dd")
        buf.write("\u00de\7\13\2\2\u00de\u00df\7\u008d\2\2\u00df\u013f\5")
        buf.write("j\66\2\u00e0\u00e2\7\f\2\2\u00e1\u00e3\7\u008d\2\2\u00e2")
        buf.write("\u00e1\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e4\3\2\2\2")
        buf.write("\u00e4\u013f\7\u0087\2\2\u00e5\u00e6\7\r\2\2\u00e6\u013f")
        buf.write("\7\u0087\2\2\u00e7\u00e8\7\16\2\2\u00e8\u00e9\7\u008d")
        buf.write("\2\2\u00e9\u013f\7\u0083\2\2\u00ea\u00eb\7\17\2\2\u00eb")
        buf.write("\u013f\7&\2\2\u00ec\u00ed\7\17\2\2\u00ed\u00ee\7\'\2\2")
        buf.write("\u00ee\u00ef\7(\2\2\u00ef\u00f0\7\u008d\2\2\u00f0\u00f1")
        buf.write("\5j\66\2\u00f1\u00f2\7)\2\2\u00f2\u00f3\7\u008d\2\2\u00f3")
        buf.write("\u00f4\5j\66\2\u00f4\u013f\3\2\2\2\u00f5\u00f6\7\20\2")
        buf.write("\2\u00f6\u00f7\7\u0087\2\2\u00f7\u00f8\7\u0087\2\2\u00f8")
        buf.write("\u013f\5j\66\2\u00f9\u00fb\7\21\2\2\u00fa\u00f9\3\2\2")
        buf.write("\2\u00fb\u00fe\3\2\2\2\u00fc\u00fd\3\2\2\2\u00fc\u00fa")
        buf.write("\3\2\2\2\u00fd\u00ff\3\2\2\2\u00fe\u00fc\3\2\2\2\u00ff")
        buf.write("\u013f\7\4\2\2\u0100\u0101\7\22\2\2\u0101\u0102\7\u0088")
        buf.write("\2\2\u0102\u013f\7\u0083\2\2\u0103\u0104\7\23\2\2\u0104")
        buf.write("\u0105\7\u0088\2\2\u0105\u013f\7\u0083\2\2\u0106\u0107")
        buf.write("\7\24\2\2\u0107\u0108\7\u008d\2\2\u0108\u013f\7\u0083")
        buf.write("\2\2\u0109\u013f\7\25\2\2\u010a\u010b\7\26\2\2\u010b\u010c")
        buf.write("\7\u008d\2\2\u010c\u013f\7\u0083\2\2\u010d\u010e\7\27")
        buf.write("\2\2\u010e\u010f\7\u0088\2\2\u010f\u013f\7+\2\2\u0110")
        buf.write("\u0111\7\30\2\2\u0111\u0112\5 \21\2\u0112\u0113\7\4\2")
        buf.write("\2\u0113\u013f\3\2\2\2\u0114\u0115\7\31\2\2\u0115\u0116")
        buf.write("\7\33\2\2\u0116\u0117\7\u008d\2\2\u0117\u013f\5j\66\2")
        buf.write("\u0118\u011c\7\32\2\2\u0119\u011b\7\u0087\2\2\u011a\u0119")
        buf.write("\3\2\2\2\u011b\u011e\3\2\2\2\u011c\u011d\3\2\2\2\u011c")
        buf.write("\u011a\3\2\2\2\u011d\u011f\3\2\2\2\u011e\u011c\3\2\2\2")
        buf.write("\u011f\u013f\7\4\2\2\u0120\u013f\7\34\2\2\u0121\u0122")
        buf.write("\7\35\2\2\u0122\u0123\7\u0088\2\2\u0123\u013f\5j\66\2")
        buf.write("\u0124\u0125\7\36\2\2\u0125\u0126\7\u0088\2\2\u0126\u013f")
        buf.write("\5j\66\2\u0127\u0128\7\37\2\2\u0128\u0129\7\u0088\2\2")
        buf.write("\u0129\u013f\5j\66\2\u012a\u012b\7 \2\2\u012b\u012c\7")
        buf.write("\u0088\2\2\u012c\u013f\5j\66\2\u012d\u012e\7!\2\2\u012e")
        buf.write("\u012f\7\u0088\2\2\u012f\u013f\5j\66\2\u0130\u0131\7\"")
        buf.write("\2\2\u0131\u0132\7\u0088\2\2\u0132\u013f\5j\66\2\u0133")
        buf.write("\u0137\7#\2\2\u0134\u0136\7\u0087\2\2\u0135\u0134\3\2")
        buf.write("\2\2\u0136\u0139\3\2\2\2\u0137\u0138\3\2\2\2\u0137\u0135")
        buf.write("\3\2\2\2\u0138\u013a\3\2\2\2\u0139\u0137\3\2\2\2\u013a")
        buf.write("\u013f\7\4\2\2\u013b\u013c\7$\2\2\u013c\u013d\7\u008d")
        buf.write("\2\2\u013d\u013f\5j\66\2\u013e\u00d0\3\2\2\2\u013e\u00d3")
        buf.write("\3\2\2\2\u013e\u00d4\3\2\2\2\u013e\u00d7\3\2\2\2\u013e")
        buf.write("\u00da\3\2\2\2\u013e\u00dd\3\2\2\2\u013e\u00e0\3\2\2\2")
        buf.write("\u013e\u00e5\3\2\2\2\u013e\u00e7\3\2\2\2\u013e\u00ea\3")
        buf.write("\2\2\2\u013e\u00ec\3\2\2\2\u013e\u00f5\3\2\2\2\u013e\u00fc")
        buf.write("\3\2\2\2\u013e\u0100\3\2\2\2\u013e\u0103\3\2\2\2\u013e")
        buf.write("\u0106\3\2\2\2\u013e\u0109\3\2\2\2\u013e\u010a\3\2\2\2")
        buf.write("\u013e\u010d\3\2\2\2\u013e\u0110\3\2\2\2\u013e\u0114\3")
        buf.write("\2\2\2\u013e\u0118\3\2\2\2\u013e\u0120\3\2\2\2\u013e\u0121")
        buf.write("\3\2\2\2\u013e\u0124\3\2\2\2\u013e\u0127\3\2\2\2\u013e")
        buf.write("\u012a\3\2\2\2\u013e\u012d\3\2\2\2\u013e\u0130\3\2\2\2")
        buf.write("\u013e\u0133\3\2\2\2\u013e\u013b\3\2\2\2\u013f\u0142\3")
        buf.write("\2\2\2\u0140\u013e\3\2\2\2\u0140\u0141\3\2\2\2\u0141\35")
        buf.write("\3\2\2\2\u0142\u0140\3\2\2\2\u0143\u0144\7\7\2\2\u0144")
        buf.write("\u0145\5^\60\2\u0145\u0146\5^\60\2\u0146\u0147\5f\64\2")
        buf.write("\u0147\u0148\5f\64\2\u0148\u014f\5f\64\2\u0149\u014a\7")
        buf.write("~\2\2\u014a\u014b\5^\60\2\u014b\u014c\5^\60\2\u014c\u014e")
        buf.write("\3\2\2\2\u014d\u0149\3\2\2\2\u014e\u0151\3\2\2\2\u014f")
        buf.write("\u014d\3\2\2\2\u014f\u0150\3\2\2\2\u0150\37\3\2\2\2\u0151")
        buf.write("\u014f\3\2\2\2\u0152\u0153\7,\2\2\u0153\u0154\7\u008d")
        buf.write("\2\2\u0154\u015d\5j\66\2\u0155\u0156\7-\2\2\u0156\u0157")
        buf.write("\7\u008d\2\2\u0157\u015d\5j\66\2\u0158\u0159\7.\2\2\u0159")
        buf.write("\u015d\5^\60\2\u015a\u015b\7/\2\2\u015b\u015d\5^\60\2")
        buf.write("\u015c\u0152\3\2\2\2\u015c\u0155\3\2\2\2\u015c\u0158\3")
        buf.write("\2\2\2\u015c\u015a\3\2\2\2\u015d!\3\2\2\2\u015e\u0160")
        buf.write("\5$\23\2\u015f\u015e\3\2\2\2\u0160\u0163\3\2\2\2\u0161")
        buf.write("\u015f\3\2\2\2\u0161\u0162\3\2\2\2\u0162\u0173\3\2\2\2")
        buf.write("\u0163\u0161\3\2\2\2\u0164\u0165\7\16\2\2\u0165\u0166")
        buf.write("\7\u008d\2\2\u0166\u0173\7\u0083\2\2\u0167\u0168\7\62")
        buf.write("\2\2\u0168\u0169\7\u008d\2\2\u0169\u0173\7\u0083\2\2\u016a")
        buf.write("\u016b\7\26\2\2\u016b\u016c\7\u008d\2\2\u016c\u0173\7")
        buf.write("\u0083\2\2\u016d\u0173\7\34\2\2\u016e\u016f\7\36\2\2\u016f")
        buf.write("\u0170\7\u008d\2\2\u0170\u0173\5j\66\2\u0171\u0173\7\63")
        buf.write("\2\2\u0172\u0161\3\2\2\2\u0172\u0164\3\2\2\2\u0172\u0167")
        buf.write("\3\2\2\2\u0172\u016a\3\2\2\2\u0172\u016d\3\2\2\2\u0172")
        buf.write("\u016e\3\2\2\2\u0172\u0171\3\2\2\2\u0173#\3\2\2\2\u0174")
        buf.write("\u0175\7\7\2\2\u0175\u0176\5^\60\2\u0176\u0177\5^\60\2")
        buf.write("\u0177\u0178\5^\60\2\u0178\u0179\5^\60\2\u0179\u017a\5")
        buf.write("f\64\2\u017a\u017b\5f\64\2\u017b\u017c\5f\64\2\u017c\u017d")
        buf.write("\7\u0083\2\2\u017d%\3\2\2\2\u017e\u017f\7\65\2\2\u017f")
        buf.write("\u0183\5(\25\2\u0180\u0183\7&\2\2\u0181\u0183\7\63\2\2")
        buf.write("\u0182\u017e\3\2\2\2\u0182\u0180\3\2\2\2\u0182\u0181\3")
        buf.write("\2\2\2\u0183\'\3\2\2\2\u0184\u0185\7\66\2\2\u0185\u0186")
        buf.write("\7\u008d\2\2\u0186\u018b\5^\60\2\u0187\u0188\7\67\2\2")
        buf.write("\u0188\u0189\7\u008d\2\2\u0189\u018b\5j\66\2\u018a\u0184")
        buf.write("\3\2\2\2\u018a\u0187\3\2\2\2\u018b)\3\2\2\2\u018c\u018d")
        buf.write("\79\2\2\u018d\u018e\7\u008d\2\2\u018e\u01ac\7\u0083\2")
        buf.write("\2\u018f\u0190\7:\2\2\u0190\u0191\7\u008d\2\2\u0191\u01a7")
        buf.write("\7\u008a\2\2\u0192\u0194\5j\66\2\u0193\u0195\7\u0081\2")
        buf.write("\2\u0194\u0193\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0196")
        buf.write("\3\2\2\2\u0196\u0198\5j\66\2\u0197\u0199\7\u0081\2\2\u0198")
        buf.write("\u0197\3\2\2\2\u0198\u0199\3\2\2\2\u0199\u019a\3\2\2\2")
        buf.write("\u019a\u019b\5j\66\2\u019b\u01a8\3\2\2\2\u019c\u019d\7")
        buf.write("|\2\2\u019d\u019e\7\u008d\2\2\u019e\u01a0\5^\60\2\u019f")
        buf.write("\u01a1\7\u0081\2\2\u01a0\u019f\3\2\2\2\u01a0\u01a1\3\2")
        buf.write("\2\2\u01a1\u01a5\3\2\2\2\u01a2\u01a3\7}\2\2\u01a3\u01a4")
        buf.write("\7\u008d\2\2\u01a4\u01a6\5^\60\2\u01a5\u01a2\3\2\2\2\u01a5")
        buf.write("\u01a6\3\2\2\2\u01a6\u01a8\3\2\2\2\u01a7\u0192\3\2\2\2")
        buf.write("\u01a7\u019c\3\2\2\2\u01a8\u01a9\3\2\2\2\u01a9\u01aa\7")
        buf.write("\u008b\2\2\u01aa\u01ac\3\2\2\2\u01ab\u018c\3\2\2\2\u01ab")
        buf.write("\u018f\3\2\2\2\u01ac+\3\2\2\2\u01ad\u01af\5.\30\2\u01ae")
        buf.write("\u01ad\3\2\2\2\u01af\u01b2\3\2\2\2\u01b0\u01ae\3\2\2\2")
        buf.write("\u01b0\u01b1\3\2\2\2\u01b1\u01cb\3\2\2\2\u01b2\u01b0\3")
        buf.write("\2\2\2\u01b3\u01b5\7\f\2\2\u01b4\u01b6\7\u008d\2\2\u01b5")
        buf.write("\u01b4\3\2\2\2\u01b5\u01b6\3\2\2\2\u01b6\u01b7\3\2\2\2")
        buf.write("\u01b7\u01cb\7\u0087\2\2\u01b8\u01b9\7<\2\2\u01b9\u01ba")
        buf.write("\5j\66\2\u01ba\u01bb\5j\66\2\u01bb\u01bc\5j\66\2\u01bc")
        buf.write("\u01cb\3\2\2\2\u01bd\u01be\7=\2\2\u01be\u01bf\7\u008d")
        buf.write("\2\2\u01bf\u01cb\5j\66\2\u01c0\u01c1\7\24\2\2\u01c1\u01c2")
        buf.write("\7\u008d\2\2\u01c2\u01cb\7\u0083\2\2\u01c3\u01c4\7\27")
        buf.write("\2\2\u01c4\u01c5\7\u008d\2\2\u01c5\u01cb\7>\2\2\u01c6")
        buf.write("\u01c7\7\31\2\2\u01c7\u01c8\7\33\2\2\u01c8\u01cb\5j\66")
        buf.write("\2\u01c9\u01cb\7\34\2\2\u01ca\u01b0\3\2\2\2\u01ca\u01b3")
        buf.write("\3\2\2\2\u01ca\u01b8\3\2\2\2\u01ca\u01bd\3\2\2\2\u01ca")
        buf.write("\u01c0\3\2\2\2\u01ca\u01c3\3\2\2\2\u01ca\u01c6\3\2\2\2")
        buf.write("\u01ca\u01c9\3\2\2\2\u01cb-\3\2\2\2\u01cc\u01cd\7\7\2")
        buf.write("\2\u01cd\u01ce\5^\60\2\u01ce\u01cf\5^\60\2\u01cf\u01d0")
        buf.write("\5^\60\2\u01d0\u01d1\5^\60\2\u01d1\u01d2\5^\60\2\u01d2")
        buf.write("\u01d3\5^\60\2\u01d3\u01d4\5f\64\2\u01d4\u01d6\5f\64\2")
        buf.write("\u01d5\u01d7\5f\64\2\u01d6\u01d5\3\2\2\2\u01d6\u01d7\3")
        buf.write("\2\2\2\u01d7/\3\2\2\2\u01d8\u01da\5\62\32\2\u01d9\u01d8")
        buf.write("\3\2\2\2\u01da\u01dd\3\2\2\2\u01db\u01d9\3\2\2\2\u01db")
        buf.write("\u01dc\3\2\2\2\u01dc\u0207\3\2\2\2\u01dd\u01db\3\2\2\2")
        buf.write("\u01de\u01e0\7\f\2\2\u01df\u01e1\7\u008d\2\2\u01e0\u01df")
        buf.write("\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2")
        buf.write("\u0207\7\u0087\2\2\u01e3\u01e4\7<\2\2\u01e4\u01e5\5j\66")
        buf.write("\2\u01e5\u01e6\5j\66\2\u01e6\u01e7\5j\66\2\u01e7\u01e8")
        buf.write("\5j\66\2\u01e8\u0207\3\2\2\2\u01e9\u01ea\7\16\2\2\u01ea")
        buf.write("\u01eb\7\u008d\2\2\u01eb\u0207\7\u0083\2\2\u01ec\u01ed")
        buf.write("\7=\2\2\u01ed\u01ef\5j\66\2\u01ee\u01f0\5j\66\2\u01ef")
        buf.write("\u01ee\3\2\2\2\u01ef\u01f0\3\2\2\2\u01f0\u0207\3\2\2\2")
        buf.write("\u01f1\u01f2\7\24\2\2\u01f2\u01f3\7\u008d\2\2\u01f3\u0207")
        buf.write("\7\u0083\2\2\u01f4\u01f5\7\26\2\2\u01f5\u01f6\7\u008d")
        buf.write("\2\2\u01f6\u0207\7\u0083\2\2\u01f7\u01f8\7\27\2\2\u01f8")
        buf.write("\u01f9\7\u008d\2\2\u01f9\u0207\7@\2\2\u01fa\u01fb\7\31")
        buf.write("\2\2\u01fb\u01fc\7\33\2\2\u01fc\u0203\5j\66\2\u01fd\u0204")
        buf.write("\7[\2\2\u01fe\u0200\7\f\2\2\u01ff\u0201\7\u008d\2\2\u0200")
        buf.write("\u01ff\3\2\2\2\u0200\u0201\3\2\2\2\u0201\u0202\3\2\2\2")
        buf.write("\u0202\u0204\7\u0087\2\2\u0203\u01fd\3\2\2\2\u0203\u01fe")
        buf.write("\3\2\2\2\u0204\u0207\3\2\2\2\u0205\u0207\7\34\2\2\u0206")
        buf.write("\u01db\3\2\2\2\u0206\u01de\3\2\2\2\u0206\u01e3\3\2\2\2")
        buf.write("\u0206\u01e9\3\2\2\2\u0206\u01ec\3\2\2\2\u0206\u01f1\3")
        buf.write("\2\2\2\u0206\u01f4\3\2\2\2\u0206\u01f7\3\2\2\2\u0206\u01fa")
        buf.write("\3\2\2\2\u0206\u0205\3\2\2\2\u0207\61\3\2\2\2\u0208\u0209")
        buf.write("\7\7\2\2\u0209\u020a\5^\60\2\u020a\u020b\5^\60\2\u020b")
        buf.write("\u020c\5^\60\2\u020c\u0212\5^\60\2\u020d\u020e\5^\60\2")
        buf.write("\u020e\u020f\5^\60\2\u020f\u0210\5^\60\2\u0210\u0211\5")
        buf.write("^\60\2\u0211\u0213\3\2\2\2\u0212\u020d\3\2\2\2\u0212\u0213")
        buf.write("\3\2\2\2\u0213\u0214\3\2\2\2\u0214\u0215\5f\64\2\u0215")
        buf.write("\u0219\5f\64\2\u0216\u0217\5f\64\2\u0217\u0218\5f\64\2")
        buf.write("\u0218\u021a\3\2\2\2\u0219\u0216\3\2\2\2\u0219\u021a\3")
        buf.write("\2\2\2\u021a\63\3\2\2\2\u021b\u021d\5\66\34\2\u021c\u021b")
        buf.write("\3\2\2\2\u021d\u0220\3\2\2\2\u021e\u021c\3\2\2\2\u021e")
        buf.write("\u021f\3\2\2\2\u021f\u0248\3\2\2\2\u0220\u021e\3\2\2\2")
        buf.write("\u0221\u0223\7\f\2\2\u0222\u0224\7\u008d\2\2\u0223\u0222")
        buf.write("\3\2\2\2\u0223\u0224\3\2\2\2\u0224\u0225\3\2\2\2\u0225")
        buf.write("\u0248\7\u0087\2\2\u0226\u0227\7B\2\2\u0227\u0228\7\u0083")
        buf.write("\2\2\u0228\u0229\7\u0083\2\2\u0229\u022a\5j\66\2\u022a")
        buf.write("\u022b\5j\66\2\u022b\u022c\5j\66\2\u022c\u0248\3\2\2\2")
        buf.write("\u022d\u022e\7=\2\2\u022e\u022f\7\u008d\2\2\u022f\u0248")
        buf.write("\5j\66\2\u0230\u0231\7\24\2\2\u0231\u0232\7\u008d\2\2")
        buf.write("\u0232\u0248\7\u0083\2\2\u0233\u0234\7C\2\2\u0234\u0235")
        buf.write("\7\u008d\2\2\u0235\u0248\5j\66\2\u0236\u0237\7D\2\2\u0237")
        buf.write("\u0238\7\u008d\2\2\u0238\u0248\5j\66\2\u0239\u023a\7\27")
        buf.write("\2\2\u023a\u023b\7\u008d\2\2\u023b\u0248\7>\2\2\u023c")
        buf.write("\u023d\7\31\2\2\u023d\u023e\7\33\2\2\u023e\u0248\5j\66")
        buf.write("\2\u023f\u0241\58\35\2\u0240\u023f\3\2\2\2\u0241\u0244")
        buf.write("\3\2\2\2\u0242\u0240\3\2\2\2\u0242\u0243\3\2\2\2\u0243")
        buf.write("\u0248\3\2\2\2\u0244\u0242\3\2\2\2\u0245\u0248\7\34\2")
        buf.write("\2\u0246\u0248\7F\2\2\u0247\u021e\3\2\2\2\u0247\u0221")
        buf.write("\3\2\2\2\u0247\u0226\3\2\2\2\u0247\u022d\3\2\2\2\u0247")
        buf.write("\u0230\3\2\2\2\u0247\u0233\3\2\2\2\u0247\u0236\3\2\2\2")
        buf.write("\u0247\u0239\3\2\2\2\u0247\u023c\3\2\2\2\u0247\u0242\3")
        buf.write("\2\2\2\u0247\u0245\3\2\2\2\u0247\u0246\3\2\2\2\u0248\65")
        buf.write("\3\2\2\2\u0249\u024a\7\7\2\2\u024a\u024b\5^\60\2\u024b")
        buf.write("\u024c\5^\60\2\u024c\u024d\5^\60\2\u024d\u024e\5^\60\2")
        buf.write("\u024e\u024f\5^\60\2\u024f\u0250\5f\64\2\u0250\u0251\5")
        buf.write("f\64\2\u0251\67\3\2\2\2\u0252\u0253\7E\2\2\u0253\u0254")
        buf.write("\5^\60\2\u0254\u0255\5j\66\2\u0255\u0256\5j\66\2\u0256")
        buf.write("9\3\2\2\2\u0257\u0259\5<\37\2\u0258\u0257\3\2\2\2\u0259")
        buf.write("\u025c\3\2\2\2\u025a\u0258\3\2\2\2\u025a\u025b\3\2\2\2")
        buf.write("\u025b\u02ad\3\2\2\2\u025c\u025a\3\2\2\2\u025d\u025f\5")
        buf.write("> \2\u025e\u025d\3\2\2\2\u025f\u0262\3\2\2\2\u0260\u025e")
        buf.write("\3\2\2\2\u0260\u0261\3\2\2\2\u0261\u02ad\3\2\2\2\u0262")
        buf.write("\u0260\3\2\2\2\u0263\u0265\5@!\2\u0264\u0263\3\2\2\2\u0265")
        buf.write("\u0268\3\2\2\2\u0266\u0264\3\2\2\2\u0266\u0267\3\2\2\2")
        buf.write("\u0267\u02ad\3\2\2\2\u0268\u0266\3\2\2\2\u0269\u026b\5")
        buf.write("B\"\2\u026a\u0269\3\2\2\2\u026b\u026e\3\2\2\2\u026c\u026a")
        buf.write("\3\2\2\2\u026c\u026d\3\2\2\2\u026d\u02ad\3\2\2\2\u026e")
        buf.write("\u026c\3\2\2\2\u026f\u0271\5D#\2\u0270\u026f\3\2\2\2\u0271")
        buf.write("\u0274\3\2\2\2\u0272\u0270\3\2\2\2\u0272\u0273\3\2\2\2")
        buf.write("\u0273\u02ad\3\2\2\2\u0274\u0272\3\2\2\2\u0275\u0277\5")
        buf.write("F$\2\u0276\u0275\3\2\2\2\u0277\u027a\3\2\2\2\u0278\u0276")
        buf.write("\3\2\2\2\u0278\u0279\3\2\2\2\u0279\u02ad\3\2\2\2\u027a")
        buf.write("\u0278\3\2\2\2\u027b\u027d\5H%\2\u027c\u027b\3\2\2\2\u027d")
        buf.write("\u0280\3\2\2\2\u027e\u027c\3\2\2\2\u027e\u027f\3\2\2\2")
        buf.write("\u027f\u02ad\3\2\2\2\u0280\u027e\3\2\2\2\u0281\u0283\5")
        buf.write("J&\2\u0282\u0281\3\2\2\2\u0283\u0286\3\2\2\2\u0284\u0282")
        buf.write("\3\2\2\2\u0284\u0285\3\2\2\2\u0285\u02ad\3\2\2\2\u0286")
        buf.write("\u0284\3\2\2\2\u0287\u0289\5L\'\2\u0288\u0287\3\2\2\2")
        buf.write("\u0289\u028c\3\2\2\2\u028a\u0288\3\2\2\2\u028a\u028b\3")
        buf.write("\2\2\2\u028b\u02ad\3\2\2\2\u028c\u028a\3\2\2\2\u028d\u028f")
        buf.write("\7\f\2\2\u028e\u0290\7\u008d\2\2\u028f\u028e\3\2\2\2\u028f")
        buf.write("\u0290\3\2\2\2\u0290\u0291\3\2\2\2\u0291\u02ad\7\u0087")
        buf.write("\2\2\u0292\u0294\7P\2\2\u0293\u0295\7\u008d\2\2\u0294")
        buf.write("\u0293\3\2\2\2\u0294\u0295\3\2\2\2\u0295\u0296\3\2\2\2")
        buf.write("\u0296\u02ad\5j\66\2\u0297\u0298\7=\2\2\u0298\u029a\5")
        buf.write("j\66\2\u0299\u029b\5j\66\2\u029a\u0299\3\2\2\2\u029a\u029b")
        buf.write("\3\2\2\2\u029b\u02ad\3\2\2\2\u029c\u029d\7\27\2\2\u029d")
        buf.write("\u02ad\7@\2\2\u029e\u029f\7\31\2\2\u029f\u02a0\7\33\2")
        buf.write("\2\u02a0\u02a7\5j\66\2\u02a1\u02a8\7[\2\2\u02a2\u02a4")
        buf.write("\7\f\2\2\u02a3\u02a5\7\u008d\2\2\u02a4\u02a3\3\2\2\2\u02a4")
        buf.write("\u02a5\3\2\2\2\u02a5\u02a6\3\2\2\2\u02a6\u02a8\7\u0087")
        buf.write("\2\2\u02a7\u02a1\3\2\2\2\u02a7\u02a2\3\2\2\2\u02a8\u02a9")
        buf.write("\3\2\2\2\u02a9\u02aa\7\u0087\2\2\u02aa\u02ad\3\2\2\2\u02ab")
        buf.write("\u02ad\7\34\2\2\u02ac\u025a\3\2\2\2\u02ac\u0260\3\2\2")
        buf.write("\2\u02ac\u0266\3\2\2\2\u02ac\u026c\3\2\2\2\u02ac\u0272")
        buf.write("\3\2\2\2\u02ac\u0278\3\2\2\2\u02ac\u027e\3\2\2\2\u02ac")
        buf.write("\u0284\3\2\2\2\u02ac\u028a\3\2\2\2\u02ac\u028d\3\2\2\2")
        buf.write("\u02ac\u0292\3\2\2\2\u02ac\u0297\3\2\2\2\u02ac\u029c\3")
        buf.write("\2\2\2\u02ac\u029e\3\2\2\2\u02ac\u02ab\3\2\2\2\u02ad;")
        buf.write("\3\2\2\2\u02ae\u02af\7H\2\2\u02af\u02b1\5^\60\2\u02b0")
        buf.write("\u02b2\5^\60\2\u02b1\u02b0\3\2\2\2\u02b1\u02b2\3\2\2\2")
        buf.write("\u02b2\u02b3\3\2\2\2\u02b3\u02b5\5j\66\2\u02b4\u02b6\5")
        buf.write("j\66\2\u02b5\u02b4\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6=")
        buf.write("\3\2\2\2\u02b7\u02b8\7E\2\2\u02b8\u02b9\5^\60\2\u02b9")
        buf.write("\u02ba\5j\66\2\u02ba?\3\2\2\2\u02bb\u02bc\7I\2\2\u02bc")
        buf.write("\u02bd\5^\60\2\u02bd\u02be\5^\60\2\u02be\u02bf\5^\60\2")
        buf.write("\u02bf\u02c1\7\u0087\2\2\u02c0\u02c2\7\u0084\2\2\u02c1")
        buf.write("\u02c0\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2\u02c3\3\2\2\2")
        buf.write("\u02c3\u02c4\7\u0087\2\2\u02c4A\3\2\2\2\u02c5\u02c6\7")
        buf.write("J\2\2\u02c6\u02c7\5^\60\2\u02c7C\3\2\2\2\u02c8\u02c9\7")
        buf.write("K\2\2\u02c9\u02ca\5^\60\2\u02caE\3\2\2\2\u02cb\u02cc\7")
        buf.write("L\2\2\u02cc\u02cd\5^\60\2\u02cdG\3\2\2\2\u02ce\u02cf\7")
        buf.write("M\2\2\u02cf\u02d0\5^\60\2\u02d0I\3\2\2\2\u02d1\u02d2\7")
        buf.write("N\2\2\u02d2\u02d3\7\u0087\2\2\u02d3\u02d4\5^\60\2\u02d4")
        buf.write("\u02d5\5^\60\2\u02d5\u02d6\5^\60\2\u02d6\u02d7\5^\60\2")
        buf.write("\u02d7\u02d9\5^\60\2\u02d8\u02da\5^\60\2\u02d9\u02d8\3")
        buf.write("\2\2\2\u02d9\u02da\3\2\2\2\u02daK\3\2\2\2\u02db\u02dc")
        buf.write("\7O\2\2\u02dc\u02dd\5^\60\2\u02ddM\3\2\2\2\u02de\u02e0")
        buf.write("\5P)\2\u02df\u02de\3\2\2\2\u02e0\u02e3\3\2\2\2\u02e1\u02df")
        buf.write("\3\2\2\2\u02e1\u02e2\3\2\2\2\u02e2\u032f\3\2\2\2\u02e3")
        buf.write("\u02e1\3\2\2\2\u02e4\u02e6\7\f\2\2\u02e5\u02e7\7\u008d")
        buf.write("\2\2\u02e6\u02e5\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7\u02e8")
        buf.write("\3\2\2\2\u02e8\u032f\7\u0087\2\2\u02e9\u032f\7R\2\2\u02ea")
        buf.write("\u02eb\7B\2\2\u02eb\u02ed\7\u0083\2\2\u02ec\u02ee\7\u0083")
        buf.write("\2\2\u02ed\u02ec\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee\u02f0")
        buf.write("\3\2\2\2\u02ef\u02f1\7\u0083\2\2\u02f0\u02ef\3\2\2\2\u02f0")
        buf.write("\u02f1\3\2\2\2\u02f1\u02f3\3\2\2\2\u02f2\u02f4\7\u0083")
        buf.write("\2\2\u02f3\u02f2\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f5")
        buf.write("\3\2\2\2\u02f5\u032f\5j\66\2\u02f6\u02f7\7P\2\2\u02f7")
        buf.write("\u02f8\7\u008d\2\2\u02f8\u032f\5j\66\2\u02f9\u02fa\7=")
        buf.write("\2\2\u02fa\u02fb\7\u008d\2\2\u02fb\u032f\5j\66\2\u02fc")
        buf.write("\u02fd\7\24\2\2\u02fd\u02fe\7\u008d\2\2\u02fe\u032f\7")
        buf.write("\u0083\2\2\u02ff\u0300\7S\2\2\u0300\u0301\7\u0083\2\2")
        buf.write("\u0301\u0302\7\u0083\2\2\u0302\u0306\7\u0083\2\2\u0303")
        buf.write("\u0304\7\u0083\2\2\u0304\u0305\7\u0083\2\2\u0305\u0307")
        buf.write("\7\u0083\2\2\u0306\u0303\3\2\2\2\u0306\u0307\3\2\2\2\u0307")
        buf.write("\u030b\3\2\2\2\u0308\u0309\7\u0083\2\2\u0309\u030a\7\u0083")
        buf.write("\2\2\u030a\u030c\7\u0083\2\2\u030b\u0308\3\2\2\2\u030b")
        buf.write("\u030c\3\2\2\2\u030c\u0310\3\2\2\2\u030d\u030e\7\u0083")
        buf.write("\2\2\u030e\u030f\7\u0083\2\2\u030f\u0311\7\u0083\2\2\u0310")
        buf.write("\u030d\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u032f\3\2\2\2")
        buf.write("\u0312\u0313\7\27\2\2\u0313\u0314\7\u008d\2\2\u0314\u032f")
        buf.write("\7>\2\2\u0315\u0316\7\31\2\2\u0316\u0317\7\33\2\2\u0317")
        buf.write("\u031e\5j\66\2\u0318\u031f\7[\2\2\u0319\u031b\7\f\2\2")
        buf.write("\u031a\u031c\7\u008d\2\2\u031b\u031a\3\2\2\2\u031b\u031c")
        buf.write("\3\2\2\2\u031c\u031d\3\2\2\2\u031d\u031f\7\u0087\2\2\u031e")
        buf.write("\u0318\3\2\2\2\u031e\u0319\3\2\2\2\u031f\u032f\3\2\2\2")
        buf.write("\u0320\u032f\7\34\2\2\u0321\u0322\7T\2\2\u0322\u0323\7")
        buf.write("U\2\2\u0323\u0325\7\u0083\2\2\u0324\u0326\7\u0083\2\2")
        buf.write("\u0325\u0324\3\2\2\2\u0325\u0326\3\2\2\2\u0326\u0328\3")
        buf.write("\2\2\2\u0327\u0329\7\u0083\2\2\u0328\u0327\3\2\2\2\u0328")
        buf.write("\u0329\3\2\2\2\u0329\u032b\3\2\2\2\u032a\u032c\7\u0083")
        buf.write("\2\2\u032b\u032a\3\2\2\2\u032b\u032c\3\2\2\2\u032c\u032f")
        buf.write("\3\2\2\2\u032d\u032f\7F\2\2\u032e\u02e1\3\2\2\2\u032e")
        buf.write("\u02e4\3\2\2\2\u032e\u02e9\3\2\2\2\u032e\u02ea\3\2\2\2")
        buf.write("\u032e\u02f6\3\2\2\2\u032e\u02f9\3\2\2\2\u032e\u02fc\3")
        buf.write("\2\2\2\u032e\u02ff\3\2\2\2\u032e\u0312\3\2\2\2\u032e\u0315")
        buf.write("\3\2\2\2\u032e\u0320\3\2\2\2\u032e\u0321\3\2\2\2\u032e")
        buf.write("\u032d\3\2\2\2\u032fO\3\2\2\2\u0330\u0331\7\7\2\2\u0331")
        buf.write("\u0332\5^\60\2\u0332\u0333\5^\60\2\u0333\u0334\5^\60\2")
        buf.write("\u0334\u033a\5^\60\2\u0335\u0336\5^\60\2\u0336\u0337\5")
        buf.write("^\60\2\u0337\u0338\5^\60\2\u0338\u0339\5^\60\2\u0339\u033b")
        buf.write("\3\2\2\2\u033a\u0335\3\2\2\2\u033a\u033b\3\2\2\2\u033b")
        buf.write("\u0341\3\2\2\2\u033c\u033d\5^\60\2\u033d\u033e\5^\60\2")
        buf.write("\u033e\u033f\5^\60\2\u033f\u0340\5^\60\2\u0340\u0342\3")
        buf.write("\2\2\2\u0341\u033c\3\2\2\2\u0341\u0342\3\2\2\2\u0342\u0348")
        buf.write("\3\2\2\2\u0343\u0344\5^\60\2\u0344\u0345\5^\60\2\u0345")
        buf.write("\u0346\5^\60\2\u0346\u0347\5^\60\2\u0347\u0349\3\2\2\2")
        buf.write("\u0348\u0343\3\2\2\2\u0348\u0349\3\2\2\2\u0349Q\3\2\2")
        buf.write("\2\u034a\u034c\5T+\2\u034b\u034a\3\2\2\2\u034c\u034f\3")
        buf.write("\2\2\2\u034d\u034b\3\2\2\2\u034d\u034e\3\2\2\2\u034e\u036a")
        buf.write("\3\2\2\2\u034f\u034d\3\2\2\2\u0350\u0352\7\f\2\2\u0351")
        buf.write("\u0353\7\u008d\2\2\u0352\u0351\3\2\2\2\u0352\u0353\3\2")
        buf.write("\2\2\u0353\u0354\3\2\2\2\u0354\u036a\7\u0087\2\2\u0355")
        buf.write("\u0356\7<\2\2\u0356\u0357\5j\66\2\u0357\u0358\5j\66\2")
        buf.write("\u0358\u0359\5j\66\2\u0359\u035a\5j\66\2\u035a\u035b\5")
        buf.write("j\66\2\u035b\u036a\3\2\2\2\u035c\u035d\7=\2\2\u035d\u035e")
        buf.write("\7\u008d\2\2\u035e\u036a\5j\66\2\u035f\u0360\7\24\2\2")
        buf.write("\u0360\u0361\7\u008d\2\2\u0361\u036a\7\u0083\2\2\u0362")
        buf.write("\u0363\7\27\2\2\u0363\u0364\7\u008d\2\2\u0364\u036a\7")
        buf.write(">\2\2\u0365\u0366\7\31\2\2\u0366\u0367\7\33\2\2\u0367")
        buf.write("\u036a\5j\66\2\u0368\u036a\7\34\2\2\u0369\u034d\3\2\2")
        buf.write("\2\u0369\u0350\3\2\2\2\u0369\u0355\3\2\2\2\u0369\u035c")
        buf.write("\3\2\2\2\u0369\u035f\3\2\2\2\u0369\u0362\3\2\2\2\u0369")
        buf.write("\u0365\3\2\2\2\u0369\u0368\3\2\2\2\u036aS\3\2\2\2\u036b")
        buf.write("\u036c\7\7\2\2\u036c\u036d\5^\60\2\u036d\u036e\5^\60\2")
        buf.write("\u036e\u036f\5^\60\2\u036f\u0370\5^\60\2\u0370\u0371\5")
        buf.write("^\60\2\u0371\u0372\5^\60\2\u0372\u0373\5f\64\2\u0373\u0374")
        buf.write("\5f\64\2\u0374U\3\2\2\2\u0375\u0377\5X-\2\u0376\u0375")
        buf.write("\3\2\2\2\u0377\u037a\3\2\2\2\u0378\u0376\3\2\2\2\u0378")
        buf.write("\u0379\3\2\2\2\u0379\u0397\3\2\2\2\u037a\u0378\3\2\2\2")
        buf.write("\u037b\u037d\7\f\2\2\u037c\u037e\7\u008d\2\2\u037d\u037c")
        buf.write("\3\2\2\2\u037d\u037e\3\2\2\2\u037e\u037f\3\2\2\2\u037f")
        buf.write("\u0397\7\u0087\2\2\u0380\u0381\7<\2\2\u0381\u0382\5j\66")
        buf.write("\2\u0382\u0383\5j\66\2\u0383\u0384\5j\66\2\u0384\u0385")
        buf.write("\5j\66\2\u0385\u0386\5j\66\2\u0386\u0387\5j\66\2\u0387")
        buf.write("\u0388\5j\66\2\u0388\u0397\3\2\2\2\u0389\u038a\7=\2\2")
        buf.write("\u038a\u038b\7\u008d\2\2\u038b\u0397\5j\66\2\u038c\u038d")
        buf.write("\7\24\2\2\u038d\u038e\7\u008d\2\2\u038e\u0397\7\u0083")
        buf.write("\2\2\u038f\u0390\7\27\2\2\u0390\u0391\7\u008d\2\2\u0391")
        buf.write("\u0397\7>\2\2\u0392\u0393\7\31\2\2\u0393\u0394\7\33\2")
        buf.write("\2\u0394\u0397\5j\66\2\u0395\u0397\7\34\2\2\u0396\u0378")
        buf.write("\3\2\2\2\u0396\u037b\3\2\2\2\u0396\u0380\3\2\2\2\u0396")
        buf.write("\u0389\3\2\2\2\u0396\u038c\3\2\2\2\u0396\u038f\3\2\2\2")
        buf.write("\u0396\u0392\3\2\2\2\u0396\u0395\3\2\2\2\u0397W\3\2\2")
        buf.write("\2\u0398\u0399\7\7\2\2\u0399\u039a\5^\60\2\u039a\u039b")
        buf.write("\5^\60\2\u039b\u039c\5^\60\2\u039c\u039d\5^\60\2\u039d")
        buf.write("\u039e\5^\60\2\u039e\u039f\5^\60\2\u039f\u03a0\5^\60\2")
        buf.write("\u03a0\u03a1\5^\60\2\u03a1\u03a2\5f\64\2\u03a2\u03a3\5")
        buf.write("f\64\2\u03a3Y\3\2\2\2\u03a4\u03a6\5\\/\2\u03a5\u03a4\3")
        buf.write("\2\2\2\u03a6\u03a9\3\2\2\2\u03a7\u03a5\3\2\2\2\u03a7\u03a8")
        buf.write("\3\2\2\2\u03a8\u03d4\3\2\2\2\u03a9\u03a7\3\2\2\2\u03aa")
        buf.write("\u03ac\7\f\2\2\u03ab\u03ad\7\u008d\2\2\u03ac\u03ab\3\2")
        buf.write("\2\2\u03ac\u03ad\3\2\2\2\u03ad\u03ae\3\2\2\2\u03ae\u03d4")
        buf.write("\7\u0087\2\2\u03af\u03b0\7Y\2\2\u03b0\u03b1\7\u008d\2")
        buf.write("\2\u03b1\u03d4\7\u0087\2\2\u03b2\u03b3\7B\2\2\u03b3\u03b4")
        buf.write("\7\u0083\2\2\u03b4\u03b5\7\u0083\2\2\u03b5\u03d4\5j\66")
        buf.write("\2\u03b6\u03b7\7P\2\2\u03b7\u03b8\7\u008d\2\2\u03b8\u03d4")
        buf.write("\5j\66\2\u03b9\u03ba\7=\2\2\u03ba\u03bb\7\u008d\2\2\u03bb")
        buf.write("\u03d4\5j\66\2\u03bc\u03bd\7\24\2\2\u03bd\u03be\7\u008d")
        buf.write("\2\2\u03be\u03d4\7\u0083\2\2\u03bf\u03c0\7\27\2\2\u03c0")
        buf.write("\u03c1\7\u008d\2\2\u03c1\u03d4\7>\2\2\u03c2\u03c3\7\31")
        buf.write("\2\2\u03c3\u03c4\7\33\2\2\u03c4\u03cb\5j\66\2\u03c5\u03cc")
        buf.write("\7[\2\2\u03c6\u03c8\7\f\2\2\u03c7\u03c9\7\u008d\2\2\u03c8")
        buf.write("\u03c7\3\2\2\2\u03c8\u03c9\3\2\2\2\u03c9\u03ca\3\2\2\2")
        buf.write("\u03ca\u03cc\7\u0087\2\2\u03cb\u03c5\3\2\2\2\u03cb\u03c6")
        buf.write("\3\2\2\2\u03cc\u03d4\3\2\2\2\u03cd\u03d4\7\34\2\2\u03ce")
        buf.write("\u03cf\7T\2\2\u03cf\u03d0\7Z\2\2\u03d0\u03d1\7\u0083\2")
        buf.write("\2\u03d1\u03d4\7\u0083\2\2\u03d2\u03d4\7F\2\2\u03d3\u03a7")
        buf.write("\3\2\2\2\u03d3\u03aa\3\2\2\2\u03d3\u03af\3\2\2\2\u03d3")
        buf.write("\u03b2\3\2\2\2\u03d3\u03b6\3\2\2\2\u03d3\u03b9\3\2\2\2")
        buf.write("\u03d3\u03bc\3\2\2\2\u03d3\u03bf\3\2\2\2\u03d3\u03c2\3")
        buf.write("\2\2\2\u03d3\u03cd\3\2\2\2\u03d3\u03ce\3\2\2\2\u03d3\u03d2")
        buf.write("\3\2\2\2\u03d4[\3\2\2\2\u03d5\u03d6\7\7\2\2\u03d6\u03d7")
        buf.write("\5^\60\2\u03d7\u03d8\5^\60\2\u03d8\u03d9\5^\60\2\u03d9")
        buf.write("\u03da\5^\60\2\u03da\u03db\5^\60\2\u03db\u03dc\5^\60\2")
        buf.write("\u03dc\u03dd\5^\60\2\u03dd\u03de\5^\60\2\u03de\u03df\5")
        buf.write("^\60\2\u03df\u03e0\5^\60\2\u03e0\u03e2\5^\60\2\u03e1\u03e3")
        buf.write("\5^\60\2\u03e2\u03e1\3\2\2\2\u03e2\u03e3\3\2\2\2\u03e3")
        buf.write("]\3\2\2\2\u03e4\u03e5\7\u008a\2\2\u03e5\u03e6\5`\61\2")
        buf.write("\u03e6\u03e7\7\u008b\2\2\u03e7_\3\2\2\2\u03e8\u03ed\5")
        buf.write("b\62\2\u03e9\u03ea\7~\2\2\u03ea\u03ec\5b\62\2\u03eb\u03e9")
        buf.write("\3\2\2\2\u03ec\u03ef\3\2\2\2\u03ed\u03eb\3\2\2\2\u03ed")
        buf.write("\u03ee\3\2\2\2\u03eea\3\2\2\2\u03ef\u03ed\3\2\2\2\u03f0")
        buf.write("\u03f5\5d\63\2\u03f1\u03f2\7\177\2\2\u03f2\u03f4\5d\63")
        buf.write("\2\u03f3\u03f1\3\2\2\2\u03f4\u03f7\3\2\2\2\u03f5\u03f3")
        buf.write("\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6c\3\2\2\2\u03f7\u03f5")
        buf.write("\3\2\2\2\u03f8\u03f9\b\63\1\2\u03f9\u03fa\7\u008a\2\2")
        buf.write("\u03fa\u03fb\5`\61\2\u03fb\u03fc\7\u008b\2\2\u03fc\u0485")
        buf.write("\3\2\2\2\u03fd\u0485\7[\2\2\u03fe\u03ff\7]\2\2\u03ff\u0400")
        buf.write("\t\2\2\2\u0400\u0401\t\3\2\2\u0401\u0485\t\2\2\2\u0402")
        buf.write("\u0404\7^\2\2\u0403\u0405\7\u0097\2\2\u0404\u0403\3\2")
        buf.write("\2\2\u0404\u0405\3\2\2\2\u0405\u0406\3\2\2\2\u0406\u0407")
        buf.write("\7\u0098\2\2\u0407\u0408\7\u0099\2\2\u0408\u0485\5h\65")
        buf.write("\2\u0409\u040a\7_\2\2\u040a\u0485\5d\63 \u040b\u040c\7")
        buf.write("`\2\2\u040c\u0485\5d\63\37\u040d\u040e\7a\2\2\u040e\u0485")
        buf.write("\5d\63\36\u040f\u0416\7b\2\2\u0410\u0417\7\u0088\2\2\u0411")
        buf.write("\u0414\7\u0087\2\2\u0412\u0413\7\u008c\2\2\u0413\u0415")
        buf.write("\7\u0087\2\2\u0414\u0412\3\2\2\2\u0414\u0415\3\2\2\2\u0415")
        buf.write("\u0417\3\2\2\2\u0416\u0410\3\2\2\2\u0416\u0411\3\2\2\2")
        buf.write("\u0417\u0485\3\2\2\2\u0418\u0419\7c\2\2\u0419\u041a\5")
        buf.write("h\65\2\u041a\u041b\5h\65\2\u041b\u041c\5h\65\2\u041c\u041d")
        buf.write("\5h\65\2\u041d\u041e\5h\65\2\u041e\u041f\5h\65\2\u041f")
        buf.write("\u0485\3\2\2\2\u0420\u0485\7d\2\2\u0421\u0422\7e\2\2\u0422")
        buf.write("\u0485\7\u0083\2\2\u0423\u0485\7f\2\2\u0424\u042b\7g\2")
        buf.write("\2\u0425\u042c\7\u0088\2\2\u0426\u0429\7\u0087\2\2\u0427")
        buf.write("\u0428\7\u008c\2\2\u0428\u042a\7\u0087\2\2\u0429\u0427")
        buf.write("\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042c\3\2\2\2\u042b")
        buf.write("\u0425\3\2\2\2\u042b\u0426\3\2\2\2\u042c\u0485\3\2\2\2")
        buf.write("\u042d\u0485\7h\2\2\u042e\u042f\7\u0080\2\2\u042f\u0485")
        buf.write("\5d\63\26\u0430\u0431\7i\2\2\u0431\u0432\7\u008a\2\2\u0432")
        buf.write("\u0434\5h\65\2\u0433\u0435\7\u0081\2\2\u0434\u0433\3\2")
        buf.write("\2\2\u0434\u0435\3\2\2\2\u0435\u0436\3\2\2\2\u0436\u0438")
        buf.write("\5h\65\2\u0437\u0439\7\u0081\2\2\u0438\u0437\3\2\2\2\u0438")
        buf.write("\u0439\3\2\2\2\u0439\u043a\3\2\2\2\u043a\u043b\5h\65\2")
        buf.write("\u043b\u043c\7\u008b\2\2\u043c\u043d\7j\2\2\u043d\u043e")
        buf.write("\5h\65\2\u043e\u0485\3\2\2\2\u043f\u0440\7i\2\2\u0440")
        buf.write("\u0441\7\u008a\2\2\u0441\u0442\7|\2\2\u0442\u0443\7\u008d")
        buf.write("\2\2\u0443\u0445\5^\60\2\u0444\u0446\7\u0081\2\2\u0445")
        buf.write("\u0444\3\2\2\2\u0445\u0446\3\2\2\2\u0446\u044a\3\2\2\2")
        buf.write("\u0447\u0448\7}\2\2\u0448\u0449\7\u008d\2\2\u0449\u044b")
        buf.write("\5^\60\2\u044a\u0447\3\2\2\2\u044a\u044b\3\2\2\2\u044b")
        buf.write("\u044c\3\2\2\2\u044c\u044d\7\u008b\2\2\u044d\u044e\7j")
        buf.write("\2\2\u044e\u044f\5h\65\2\u044f\u0485\3\2\2\2\u0450\u0485")
        buf.write("\7k\2\2\u0451\u0485\7l\2\2\u0452\u0459\7m\2\2\u0453\u045a")
        buf.write("\7\u0089\2\2\u0454\u0457\7\u0083\2\2\u0455\u0456\7\u008c")
        buf.write("\2\2\u0456\u0458\7\u0083\2\2\u0457\u0455\3\2\2\2\u0457")
        buf.write("\u0458\3\2\2\2\u0458\u045a\3\2\2\2\u0459\u0453\3\2\2\2")
        buf.write("\u0459\u0454\3\2\2\2\u045a\u0485\3\2\2\2\u045b\u0462\7")
        buf.write("n\2\2\u045c\u0463\7\u0088\2\2\u045d\u0460\7\u0087\2\2")
        buf.write("\u045e\u045f\7\u008c\2\2\u045f\u0461\7\u0087\2\2\u0460")
        buf.write("\u045e\3\2\2\2\u0460\u0461\3\2\2\2\u0461\u0463\3\2\2\2")
        buf.write("\u0462\u045c\3\2\2\2\u0462\u045d\3\2\2\2\u0463\u0485\3")
        buf.write("\2\2\2\u0464\u0470\7p\2\2\u0465\u0471\7\u0088\2\2\u0466")
        buf.write("\u0469\7\u0087\2\2\u0467\u0468\7\u008c\2\2\u0468\u046a")
        buf.write("\7\u0087\2\2\u0469\u0467\3\2\2\2\u0469\u046a\3\2\2\2\u046a")
        buf.write("\u0471\3\2\2\2\u046b\u046e\7\u0086\2\2\u046c\u046d\7\u008c")
        buf.write("\2\2\u046d\u046f\7\u0086\2\2\u046e\u046c\3\2\2\2\u046e")
        buf.write("\u046f\3\2\2\2\u046f\u0471\3\2\2\2\u0470\u0465\3\2\2\2")
        buf.write("\u0470\u0466\3\2\2\2\u0470\u046b\3\2\2\2\u0471\u0485\3")
        buf.write("\2\2\2\u0472\u0473\7q\2\2\u0473\u0474\5h\65\2\u0474\u0475")
        buf.write("\5h\65\2\u0475\u0476\5h\65\2\u0476\u0477\5h\65\2\u0477")
        buf.write("\u0478\5h\65\2\u0478\u0479\5h\65\2\u0479\u0485\3\2\2\2")
        buf.write("\u047a\u0485\7r\2\2\u047b\u0485\7s\2\2\u047c\u0485\7t")
        buf.write("\2\2\u047d\u0485\7u\2\2\u047e\u0485\7v\2\2\u047f\u0485")
        buf.write("\7w\2\2\u0480\u0485\7x\2\2\u0481\u0485\7y\2\2\u0482\u0485")
        buf.write("\7z\2\2\u0483\u0485\7{\2\2\u0484\u03f8\3\2\2\2\u0484\u03fd")
        buf.write("\3\2\2\2\u0484\u03fe\3\2\2\2\u0484\u0402\3\2\2\2\u0484")
        buf.write("\u0409\3\2\2\2\u0484\u040b\3\2\2\2\u0484\u040d\3\2\2\2")
        buf.write("\u0484\u040f\3\2\2\2\u0484\u0418\3\2\2\2\u0484\u0420\3")
        buf.write("\2\2\2\u0484\u0421\3\2\2\2\u0484\u0423\3\2\2\2\u0484\u0424")
        buf.write("\3\2\2\2\u0484\u042d\3\2\2\2\u0484\u042e\3\2\2\2\u0484")
        buf.write("\u0430\3\2\2\2\u0484\u043f\3\2\2\2\u0484\u0450\3\2\2\2")
        buf.write("\u0484\u0451\3\2\2\2\u0484\u0452\3\2\2\2\u0484\u045b\3")
        buf.write("\2\2\2\u0484\u0464\3\2\2\2\u0484\u0472\3\2\2\2\u0484\u047a")
        buf.write("\3\2\2\2\u0484\u047b\3\2\2\2\u0484\u047c\3\2\2\2\u0484")
        buf.write("\u047d\3\2\2\2\u0484\u047e\3\2\2\2\u0484\u047f\3\2\2\2")
        buf.write("\u0484\u0480\3\2\2\2\u0484\u0481\3\2\2\2\u0484\u0482\3")
        buf.write("\2\2\2\u0484\u0483\3\2\2\2\u0485\u048e\3\2\2\2\u0486\u0487")
        buf.write("\f#\2\2\u0487\u0488\7\\\2\2\u0488\u048d\5h\65\2\u0489")
        buf.write("\u048a\f\17\2\2\u048a\u048b\7o\2\2\u048b\u048d\5h\65\2")
        buf.write("\u048c\u0486\3\2\2\2\u048c\u0489\3\2\2\2\u048d\u0490\3")
        buf.write("\2\2\2\u048e\u048c\3\2\2\2\u048e\u048f\3\2\2\2\u048fe")
        buf.write("\3\2\2\2\u0490\u048e\3\2\2\2\u0491\u0492\t\4\2\2\u0492")
        buf.write("g\3\2\2\2\u0493\u0494\t\4\2\2\u0494i\3\2\2\2\u0495\u0496")
        buf.write("\t\4\2\2\u0496k\3\2\2\2pxz\u0080\u0086\u008c\u0092\u0098")
        buf.write("\u00e2\u00fc\u011c\u0137\u013e\u0140\u014f\u015c\u0161")
        buf.write("\u0172\u0182\u018a\u0194\u0198\u01a0\u01a5\u01a7\u01ab")
        buf.write("\u01b0\u01b5\u01ca\u01d6\u01db\u01e0\u01ef\u0200\u0203")
        buf.write("\u0206\u0212\u0219\u021e\u0223\u0242\u0247\u025a\u0260")
        buf.write("\u0266\u026c\u0272\u0278\u027e\u0284\u028a\u028f\u0294")
        buf.write("\u029a\u02a4\u02a7\u02ac\u02b1\u02b5\u02c1\u02d9\u02e1")
        buf.write("\u02e6\u02ed\u02f0\u02f3\u0306\u030b\u0310\u031b\u031e")
        buf.write("\u0325\u0328\u032b\u032e\u033a\u0341\u0348\u034d\u0352")
        buf.write("\u0369\u0378\u037d\u0396\u03a7\u03ac\u03c8\u03cb\u03d3")
        buf.write("\u03e2\u03ed\u03f5\u0404\u0414\u0416\u0429\u042b\u0434")
        buf.write("\u0438\u0445\u044a\u0457\u0459\u0460\u0462\u0469\u046e")
        buf.write("\u0470\u0484\u048c\u048e")
        return buf.getvalue()


class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "','", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'('", "')'", "':'", "'='", 
                     "'<'", "'>'", "'<='", "'>='", "'#'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Averaging", "Bgig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Noe_analysis", "Initialize", "Update", "Gamma", "Kappa", 
                      "Noe_avr_methods", "Noe_potential", "Cutoff", "Cuton", 
                      "From", "To", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Rdc_potential", "Coupling", "Coupling_potential", 
                      "Carbon", "Expectation", "PhiStep", "PsiStep", "Rcoil", 
                      "Zero", "Proton", "Observed", "Anisotropy", "Amides", 
                      "Carbons", "Nitrogens", "Oxygens", "RingAtoms", "AlphasAndAmides", 
                      "Error", "Conformation", "Compressed", "Phase", "Size", 
                      "Dimensions", "Danisotropy", "OneBond", "AngleDb", 
                      "DerivFlag", "Angle_dihedral", "All", "Around", "Atom", 
                      "Attribute", "BondedTo", "ByGroup", "ByRes", "Chemical", 
                      "Fbox", "Hydrogen", "Id", "Known", "Name", "NONE", 
                      "Point", "Cut", "Previous", "Pseudo", "Residue", "Resname", 
                      "Saround", "SegIdentifier", "Sfbox", "Store_1", "Store_2", 
                      "Store_3", "Store_4", "Store_5", "Store_6", "Store_7", 
                      "Store_8", "Store_9", "Tag", "Tail", "Head", "Or_op", 
                      "And_op", "Not_op", "Comma", "Complex", "Integer", 
                      "Logical", "Real", "Double_quote_string", "Simple_name", 
                      "Simple_names", "Integers", "L_paren", "R_paren", 
                      "Colon", "Equ_op", "Lt_op", "Gt_op", "Leq_op", "Geq_op", 
                      "Neq_op", "SPACE", "COMMENT", "LINE_COMMENT", "SET_VARIABLE", 
                      "Abs", "Attr_properties", "Comparison_ops", "SPACE_ATTR" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_dihedral_statement = 16
    RULE_dihedral_assign = 17
    RULE_plane_statement = 18
    RULE_group_statement = 19
    RULE_harmonic_statement = 20
    RULE_sani_statement = 21
    RULE_sani_assign = 22
    RULE_coupling_statement = 23
    RULE_coup_assign = 24
    RULE_carbon_shift_statement = 25
    RULE_carbon_shift_assign = 26
    RULE_carbon_shift_rcoil = 27
    RULE_proton_shift_statement = 28
    RULE_observed = 29
    RULE_proton_shift_rcoil = 30
    RULE_proton_shift_anisotropy = 31
    RULE_proton_shift_amides = 32
    RULE_proton_shift_carbons = 33
    RULE_proton_shift_nitrogens = 34
    RULE_proton_shift_oxygens = 35
    RULE_proton_shift_ring_atoms = 36
    RULE_proton_shift_alphas_and_amides = 37
    RULE_conformation_statement = 38
    RULE_conf_assign = 39
    RULE_diffusion_statement = 40
    RULE_dani_assign = 41
    RULE_one_bond_coupling_statement = 42
    RULE_one_bond_assign = 43
    RULE_angle_db_statement = 44
    RULE_angle_db_assign = 45
    RULE_selection = 46
    RULE_selection_expression = 47
    RULE_term = 48
    RULE_factor = 49
    RULE_number = 50
    RULE_number_f = 51
    RULE_number_s = 52

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "dihedral_statement", 
                   "dihedral_assign", "plane_statement", "group_statement", 
                   "harmonic_statement", "sani_statement", "sani_assign", 
                   "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Averaging=7
    Bgig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Noe_analysis=35
    Initialize=36
    Update=37
    Gamma=38
    Kappa=39
    Noe_avr_methods=40
    Noe_potential=41
    Cutoff=42
    Cuton=43
    From=44
    To=45
    Restraints=46
    Dihedral=47
    Nassign=48
    Print_any=49
    Plane=50
    Group=51
    Selection=52
    Weight=53
    Harmonic=54
    Exponent=55
    Normal=56
    Sanisotropy=57
    Coefficients=58
    ForceConstant=59
    Rdc_potential=60
    Coupling=61
    Coupling_potential=62
    Carbon=63
    Expectation=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Zero=68
    Proton=69
    Observed=70
    Anisotropy=71
    Amides=72
    Carbons=73
    Nitrogens=74
    Oxygens=75
    RingAtoms=76
    AlphasAndAmides=77
    Error=78
    Conformation=79
    Compressed=80
    Phase=81
    Size=82
    Dimensions=83
    Danisotropy=84
    OneBond=85
    AngleDb=86
    DerivFlag=87
    Angle_dihedral=88
    All=89
    Around=90
    Atom=91
    Attribute=92
    BondedTo=93
    ByGroup=94
    ByRes=95
    Chemical=96
    Fbox=97
    Hydrogen=98
    Id=99
    Known=100
    Name=101
    NONE=102
    Point=103
    Cut=104
    Previous=105
    Pseudo=106
    Residue=107
    Resname=108
    Saround=109
    SegIdentifier=110
    Sfbox=111
    Store_1=112
    Store_2=113
    Store_3=114
    Store_4=115
    Store_5=116
    Store_6=117
    Store_7=118
    Store_8=119
    Store_9=120
    Tag=121
    Tail=122
    Head=123
    Or_op=124
    And_op=125
    Not_op=126
    Comma=127
    Complex=128
    Integer=129
    Logical=130
    Real=131
    Double_quote_string=132
    Simple_name=133
    Simple_names=134
    Integers=135
    L_paren=136
    R_paren=137
    Colon=138
    Equ_op=139
    Lt_op=140
    Gt_op=141
    Leq_op=142
    Geq_op=143
    Neq_op=144
    SPACE=145
    COMMENT=146
    LINE_COMMENT=147
    SET_VARIABLE=148
    Abs=149
    Attr_properties=150
    Comparison_ops=151
    SPACE_ATTR=152

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 120
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Sanisotropy) | (1 << CnsMRParser.Coupling) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CnsMRParser.Proton - 69)) | (1 << (CnsMRParser.Conformation - 69)) | (1 << (CnsMRParser.Danisotropy - 69)) | (1 << (CnsMRParser.OneBond - 69)) | (1 << (CnsMRParser.AngleDb - 69)))) != 0):
                self.state = 118
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 106
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 107
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 108
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 109
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 110
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 111
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 112
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 113
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 114
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 115
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 116
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 117
                    self.angle_db_restraint()
                    pass


                self.state = 122
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 126
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 123
                    self.noe_assign() 
                self.state = 128
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 132
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 129
                    self.dihedral_assign() 
                self.state = 134
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 138
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 135
                    self.sani_assign() 
                self.state = 140
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 144
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0):
                self.state = 141
                self.plane_statement()
                self.state = 146
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 150
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign:
                self.state = 147
                self.coup_assign()
                self.state = 152
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 153
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def noe_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 155
            self.match(CnsMRParser.Noe)
            self.state = 156
            self.noe_statement()
            self.state = 157
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def dihedral_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 159
            self.match(CnsMRParser.Restraints)
            self.state = 160
            self.match(CnsMRParser.Dihedral)
            self.state = 161
            self.dihedral_statement()
            self.state = 162
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def plane_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 164
            self.match(CnsMRParser.Restraints)
            self.state = 165
            self.match(CnsMRParser.Plane)
            self.state = 166
            self.plane_statement()
            self.state = 167
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def harmonic_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 169
            self.match(CnsMRParser.Restraints)
            self.state = 170
            self.match(CnsMRParser.Harmonic)
            self.state = 171
            self.harmonic_statement()
            self.state = 172
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def sani_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self.match(CnsMRParser.Sanisotropy)
            self.state = 175
            self.sani_statement()
            self.state = 176
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def coupling_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 178
            self.match(CnsMRParser.Coupling)
            self.state = 179
            self.coupling_statement()
            self.state = 180
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def carbon_shift_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            self.match(CnsMRParser.Carbon)
            self.state = 183
            self.carbon_shift_statement()
            self.state = 184
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def proton_shift_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.match(CnsMRParser.Proton)
            self.state = 187
            self.proton_shift_statement()
            self.state = 188
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def conformation_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self.match(CnsMRParser.Conformation)
            self.state = 191
            self.conformation_statement()
            self.state = 192
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def diffusion_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 194
            self.match(CnsMRParser.Danisotropy)
            self.state = 195
            self.diffusion_statement()
            self.state = 196
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def one_bond_coupling_statement(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self.match(CnsMRParser.OneBond)
            self.state = 199
            self.one_bond_coupling_statement()
            self.state = 200
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def angle_db_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 202
            self.match(CnsMRParser.AngleDb)
            self.state = 203
            self.angle_db_statement()
            self.state = 204
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Analysis)
            else:
                return self.getToken(CnsMRParser.Analysis, i)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Noe_analysis(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Noe_analysis)
            else:
                return self.getToken(CnsMRParser.Noe_analysis, i)

        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def Asymptote(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Asymptote)
            else:
                return self.getToken(CnsMRParser.Asymptote, i)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Averaging(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Averaging)
            else:
                return self.getToken(CnsMRParser.Averaging, i)

        def Noe_avr_methods(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Noe_avr_methods)
            else:
                return self.getToken(CnsMRParser.Noe_avr_methods, i)

        def Bgig(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Bgig)
            else:
                return self.getToken(CnsMRParser.Bgig, i)

        def Ceiling(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ceiling)
            else:
                return self.getToken(CnsMRParser.Ceiling, i)

        def Classification(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Classification)
            else:
                return self.getToken(CnsMRParser.Classification, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def CountViol(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.CountViol)
            else:
                return self.getToken(CnsMRParser.CountViol, i)

        def Cv(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Cv)
            else:
                return self.getToken(CnsMRParser.Cv, i)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Den(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Den)
            else:
                return self.getToken(CnsMRParser.Den, i)

        def Initialize(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Initialize)
            else:
                return self.getToken(CnsMRParser.Initialize, i)

        def Update(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Update)
            else:
                return self.getToken(CnsMRParser.Update, i)

        def Gamma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Gamma)
            else:
                return self.getToken(CnsMRParser.Gamma, i)

        def Kappa(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Kappa)
            else:
                return self.getToken(CnsMRParser.Kappa, i)

        def Distribute(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Distribute)
            else:
                return self.getToken(CnsMRParser.Distribute, i)

        def End(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.End)
            else:
                return self.getToken(CnsMRParser.End, i)

        def Monomers(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Monomers)
            else:
                return self.getToken(CnsMRParser.Monomers, i)

        def Ncount(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ncount)
            else:
                return self.getToken(CnsMRParser.Ncount, i)

        def Nrestraints(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Nrestraints)
            else:
                return self.getToken(CnsMRParser.Nrestraints, i)

        def Outd(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Outd)
            else:
                return self.getToken(CnsMRParser.Outd, i)

        def Partition(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Partition)
            else:
                return self.getToken(CnsMRParser.Partition, i)

        def Potential(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Potential)
            else:
                return self.getToken(CnsMRParser.Potential, i)

        def Noe_potential(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Noe_potential)
            else:
                return self.getToken(CnsMRParser.Noe_potential, i)

        def Predict(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Predict)
            else:
                return self.getToken(CnsMRParser.Predict, i)

        def predict_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Predict_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,i)


        def Print(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Print)
            else:
                return self.getToken(CnsMRParser.Print, i)

        def Threshold(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Threshold)
            else:
                return self.getToken(CnsMRParser.Threshold, i)

        def Raverage(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Raverage)
            else:
                return self.getToken(CnsMRParser.Raverage, i)

        def Reset(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Reset)
            else:
                return self.getToken(CnsMRParser.Reset, i)

        def Rswitch(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Rswitch)
            else:
                return self.getToken(CnsMRParser.Rswitch, i)

        def Scale(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Scale)
            else:
                return self.getToken(CnsMRParser.Scale, i)

        def SoExponent(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.SoExponent)
            else:
                return self.getToken(CnsMRParser.SoExponent, i)

        def SqConstant(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.SqConstant)
            else:
                return self.getToken(CnsMRParser.SqConstant, i)

        def SqExponent(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.SqExponent)
            else:
                return self.getToken(CnsMRParser.SqExponent, i)

        def SqOffset(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.SqOffset)
            else:
                return self.getToken(CnsMRParser.SqOffset, i)

        def Taverage(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Taverage)
            else:
                return self.getToken(CnsMRParser.Taverage, i)

        def Temperature(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Temperature)
            else:
                return self.getToken(CnsMRParser.Temperature, i)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 318
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,12,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 316
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
                    if la_ == 1:
                        self.state = 206
                        self.match(CnsMRParser.Analysis)
                        self.state = 207
                        self.match(CnsMRParser.Equ_op)
                        self.state = 208
                        self.match(CnsMRParser.Noe_analysis)
                        pass

                    elif la_ == 2:
                        self.state = 209
                        self.noe_assign()
                        pass

                    elif la_ == 3:
                        self.state = 210
                        self.match(CnsMRParser.Asymptote)
                        self.state = 211
                        self.match(CnsMRParser.Simple_names)
                        self.state = 212
                        self.number_s()
                        pass

                    elif la_ == 4:
                        self.state = 213
                        self.match(CnsMRParser.Averaging)
                        self.state = 214
                        self.match(CnsMRParser.Simple_names)
                        self.state = 215
                        self.match(CnsMRParser.Noe_avr_methods)
                        pass

                    elif la_ == 5:
                        self.state = 216
                        self.match(CnsMRParser.Bgig)
                        self.state = 217
                        self.match(CnsMRParser.Simple_names)
                        self.state = 218
                        self.number_s()
                        pass

                    elif la_ == 6:
                        self.state = 219
                        self.match(CnsMRParser.Ceiling)
                        self.state = 220
                        self.match(CnsMRParser.Equ_op)
                        self.state = 221
                        self.number_s()
                        pass

                    elif la_ == 7:
                        self.state = 222
                        self.match(CnsMRParser.Classification)
                        self.state = 224
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CnsMRParser.Equ_op:
                            self.state = 223
                            self.match(CnsMRParser.Equ_op)


                        self.state = 226
                        self.match(CnsMRParser.Simple_name)
                        pass

                    elif la_ == 8:
                        self.state = 227
                        self.match(CnsMRParser.CountViol)
                        self.state = 228
                        self.match(CnsMRParser.Simple_name)
                        pass

                    elif la_ == 9:
                        self.state = 229
                        self.match(CnsMRParser.Cv)
                        self.state = 230
                        self.match(CnsMRParser.Equ_op)
                        self.state = 231
                        self.match(CnsMRParser.Integer)
                        pass

                    elif la_ == 10:
                        self.state = 232
                        self.match(CnsMRParser.Den)
                        self.state = 233
                        self.match(CnsMRParser.Initialize)
                        pass

                    elif la_ == 11:
                        self.state = 234
                        self.match(CnsMRParser.Den)
                        self.state = 235
                        self.match(CnsMRParser.Update)
                        self.state = 236
                        self.match(CnsMRParser.Gamma)
                        self.state = 237
                        self.match(CnsMRParser.Equ_op)
                        self.state = 238
                        self.number_s()
                        self.state = 239
                        self.match(CnsMRParser.Kappa)
                        self.state = 240
                        self.match(CnsMRParser.Equ_op)
                        self.state = 241
                        self.number_s()
                        pass

                    elif la_ == 12:
                        self.state = 243
                        self.match(CnsMRParser.Distribute)
                        self.state = 244
                        self.match(CnsMRParser.Simple_name)
                        self.state = 245
                        self.match(CnsMRParser.Simple_name)
                        self.state = 246
                        self.number_s()
                        pass

                    elif la_ == 13:
                        self.state = 250
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                        while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1+1:
                                self.state = 247
                                self.match(CnsMRParser.Ensemble) 
                            self.state = 252
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                        self.state = 253
                        self.match(CnsMRParser.End)
                        pass

                    elif la_ == 14:
                        self.state = 254
                        self.match(CnsMRParser.Monomers)
                        self.state = 255
                        self.match(CnsMRParser.Simple_names)
                        self.state = 256
                        self.match(CnsMRParser.Integer)
                        pass

                    elif la_ == 15:
                        self.state = 257
                        self.match(CnsMRParser.Ncount)
                        self.state = 258
                        self.match(CnsMRParser.Simple_names)
                        self.state = 259
                        self.match(CnsMRParser.Integer)
                        pass

                    elif la_ == 16:
                        self.state = 260
                        self.match(CnsMRParser.Nrestraints)
                        self.state = 261
                        self.match(CnsMRParser.Equ_op)
                        self.state = 262
                        self.match(CnsMRParser.Integer)
                        pass

                    elif la_ == 17:
                        self.state = 263
                        self.match(CnsMRParser.Outd)
                        pass

                    elif la_ == 18:
                        self.state = 264
                        self.match(CnsMRParser.Partition)
                        self.state = 265
                        self.match(CnsMRParser.Equ_op)
                        self.state = 266
                        self.match(CnsMRParser.Integer)
                        pass

                    elif la_ == 19:
                        self.state = 267
                        self.match(CnsMRParser.Potential)
                        self.state = 268
                        self.match(CnsMRParser.Simple_names)
                        self.state = 269
                        self.match(CnsMRParser.Noe_potential)
                        pass

                    elif la_ == 20:
                        self.state = 270
                        self.match(CnsMRParser.Predict)
                        self.state = 271
                        self.predict_statement()
                        self.state = 272
                        self.match(CnsMRParser.End)
                        pass

                    elif la_ == 21:
                        self.state = 274
                        self.match(CnsMRParser.Print)
                        self.state = 275
                        self.match(CnsMRParser.Threshold)
                        self.state = 276
                        self.match(CnsMRParser.Equ_op)
                        self.state = 277
                        self.number_s()
                        pass

                    elif la_ == 22:
                        self.state = 278
                        self.match(CnsMRParser.Raverage)
                        self.state = 282
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                        while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1+1:
                                self.state = 279
                                self.match(CnsMRParser.Simple_name) 
                            self.state = 284
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                        self.state = 285
                        self.match(CnsMRParser.End)
                        pass

                    elif la_ == 23:
                        self.state = 286
                        self.match(CnsMRParser.Reset)
                        pass

                    elif la_ == 24:
                        self.state = 287
                        self.match(CnsMRParser.Rswitch)
                        self.state = 288
                        self.match(CnsMRParser.Simple_names)
                        self.state = 289
                        self.number_s()
                        pass

                    elif la_ == 25:
                        self.state = 290
                        self.match(CnsMRParser.Scale)
                        self.state = 291
                        self.match(CnsMRParser.Simple_names)
                        self.state = 292
                        self.number_s()
                        pass

                    elif la_ == 26:
                        self.state = 293
                        self.match(CnsMRParser.SoExponent)
                        self.state = 294
                        self.match(CnsMRParser.Simple_names)
                        self.state = 295
                        self.number_s()
                        pass

                    elif la_ == 27:
                        self.state = 296
                        self.match(CnsMRParser.SqConstant)
                        self.state = 297
                        self.match(CnsMRParser.Simple_names)
                        self.state = 298
                        self.number_s()
                        pass

                    elif la_ == 28:
                        self.state = 299
                        self.match(CnsMRParser.SqExponent)
                        self.state = 300
                        self.match(CnsMRParser.Simple_names)
                        self.state = 301
                        self.number_s()
                        pass

                    elif la_ == 29:
                        self.state = 302
                        self.match(CnsMRParser.SqOffset)
                        self.state = 303
                        self.match(CnsMRParser.Simple_names)
                        self.state = 304
                        self.number_s()
                        pass

                    elif la_ == 30:
                        self.state = 305
                        self.match(CnsMRParser.Taverage)
                        self.state = 309
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,10,self._ctx)
                        while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1+1:
                                self.state = 306
                                self.match(CnsMRParser.Simple_name) 
                            self.state = 311
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,10,self._ctx)

                        self.state = 312
                        self.match(CnsMRParser.End)
                        pass

                    elif la_ == 31:
                        self.state = 313
                        self.match(CnsMRParser.Temperature)
                        self.state = 314
                        self.match(CnsMRParser.Equ_op)
                        self.state = 315
                        self.number_s()
                        pass

             
                self.state = 320
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,12,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.match(CnsMRParser.Assign)
            self.state = 322
            self.selection()
            self.state = 323
            self.selection()
            self.state = 324
            self.number()
            self.state = 325
            self.number()
            self.state = 326
            self.number()
            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 327
                self.match(CnsMRParser.Or_op)
                self.state = 328
                self.selection()
                self.state = 329
                self.selection()
                self.state = 335
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        try:
            self.state = 346
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 336
                self.match(CnsMRParser.Cutoff)
                self.state = 337
                self.match(CnsMRParser.Equ_op)
                self.state = 338
                self.number_s()
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 339
                self.match(CnsMRParser.Cuton)
                self.state = 340
                self.match(CnsMRParser.Equ_op)
                self.state = 341
                self.number_s()
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 342
                self.match(CnsMRParser.From)
                self.state = 343
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 344
                self.match(CnsMRParser.To)
                self.state = 345
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 368
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.End, CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 348
                    self.dihedral_assign()
                    self.state = 353
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 354
                self.match(CnsMRParser.Cv)
                self.state = 355
                self.match(CnsMRParser.Equ_op)
                self.state = 356
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 357
                self.match(CnsMRParser.Nassign)
                self.state = 358
                self.match(CnsMRParser.Equ_op)
                self.state = 359
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 4)
                self.state = 360
                self.match(CnsMRParser.Partition)
                self.state = 361
                self.match(CnsMRParser.Equ_op)
                self.state = 362
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 363
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 364
                self.match(CnsMRParser.Scale)
                self.state = 365
                self.match(CnsMRParser.Equ_op)
                self.state = 366
                self.number_s()
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 7)
                self.state = 367
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 370
            self.match(CnsMRParser.Assign)
            self.state = 371
            self.selection()
            self.state = 372
            self.selection()
            self.state = 373
            self.selection()
            self.state = 374
            self.selection()
            self.state = 375
            self.number()
            self.state = 376
            self.number()
            self.state = 377
            self.number()
            self.state = 378
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def group_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Group_statementContext,0)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_plane_statement)
        try:
            self.state = 384
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 380
                self.match(CnsMRParser.Group)
                self.state = 381
                self.group_statement()
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 382
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 383
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_group_statement)
        try:
            self.state = 392
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 386
                self.match(CnsMRParser.Selection)
                self.state = 387
                self.match(CnsMRParser.Equ_op)
                self.state = 388
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 389
                self.match(CnsMRParser.Weight)
                self.state = 390
                self.match(CnsMRParser.Equ_op)
                self.state = 391
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 425
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 394
                self.match(CnsMRParser.Exponent)
                self.state = 395
                self.match(CnsMRParser.Equ_op)
                self.state = 396
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 397
                self.match(CnsMRParser.Normal)
                self.state = 398
                self.match(CnsMRParser.Equ_op)
                self.state = 399
                self.match(CnsMRParser.L_paren)
                self.state = 421
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integer, CnsMRParser.Real]:
                    self.state = 400
                    self.number_s()
                    self.state = 402
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 401
                        self.match(CnsMRParser.Comma)


                    self.state = 404
                    self.number_s()
                    self.state = 406
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 405
                        self.match(CnsMRParser.Comma)


                    self.state = 408
                    self.number_s()
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 410
                    self.match(CnsMRParser.Tail)
                    self.state = 411
                    self.match(CnsMRParser.Equ_op)
                    self.state = 412
                    self.selection()
                    self.state = 414
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 413
                        self.match(CnsMRParser.Comma)


                    self.state = 419
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 416
                        self.match(CnsMRParser.Head)
                        self.state = 417
                        self.match(CnsMRParser.Equ_op)
                        self.state = 418
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 423
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 456
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.End, CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 427
                    self.sani_assign()
                    self.state = 432
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 433
                self.match(CnsMRParser.Classification)
                self.state = 435
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 434
                    self.match(CnsMRParser.Equ_op)


                self.state = 437
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 438
                self.match(CnsMRParser.Coefficients)
                self.state = 439
                self.number_s()
                self.state = 440
                self.number_s()
                self.state = 441
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 443
                self.match(CnsMRParser.ForceConstant)
                self.state = 444
                self.match(CnsMRParser.Equ_op)
                self.state = 445
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 446
                self.match(CnsMRParser.Nrestraints)
                self.state = 447
                self.match(CnsMRParser.Equ_op)
                self.state = 448
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 449
                self.match(CnsMRParser.Potential)
                self.state = 450
                self.match(CnsMRParser.Equ_op)
                self.state = 451
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 452
                self.match(CnsMRParser.Print)
                self.state = 453
                self.match(CnsMRParser.Threshold)
                self.state = 454
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 455
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(CnsMRParser.Assign)
            self.state = 459
            self.selection()
            self.state = 460
            self.selection()
            self.state = 461
            self.selection()
            self.state = 462
            self.selection()
            self.state = 463
            self.selection()
            self.state = 464
            self.selection()
            self.state = 465
            self.number()
            self.state = 466
            self.number()
            self.state = 468
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 467
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(CnsMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 516
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.End, CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 473
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 470
                    self.coup_assign()
                    self.state = 475
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 476
                self.match(CnsMRParser.Classification)
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 477
                    self.match(CnsMRParser.Equ_op)


                self.state = 480
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 481
                self.match(CnsMRParser.Coefficients)
                self.state = 482
                self.number_s()
                self.state = 483
                self.number_s()
                self.state = 484
                self.number_s()
                self.state = 485
                self.number_s()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 487
                self.match(CnsMRParser.Cv)
                self.state = 488
                self.match(CnsMRParser.Equ_op)
                self.state = 489
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 490
                self.match(CnsMRParser.ForceConstant)
                self.state = 491
                self.number_s()
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                    self.state = 492
                    self.number_s()


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 495
                self.match(CnsMRParser.Nrestraints)
                self.state = 496
                self.match(CnsMRParser.Equ_op)
                self.state = 497
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 498
                self.match(CnsMRParser.Partition)
                self.state = 499
                self.match(CnsMRParser.Equ_op)
                self.state = 500
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 501
                self.match(CnsMRParser.Potential)
                self.state = 502
                self.match(CnsMRParser.Equ_op)
                self.state = 503
                self.match(CnsMRParser.Coupling_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 504
                self.match(CnsMRParser.Print)
                self.state = 505
                self.match(CnsMRParser.Threshold)
                self.state = 506
                self.number_s()
                self.state = 513
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 507
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 508
                    self.match(CnsMRParser.Classification)
                    self.state = 510
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 509
                        self.match(CnsMRParser.Equ_op)


                    self.state = 512
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 515
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 518
            self.match(CnsMRParser.Assign)
            self.state = 519
            self.selection()
            self.state = 520
            self.selection()
            self.state = 521
            self.selection()
            self.state = 522
            self.selection()
            self.state = 528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 523
                self.selection()
                self.state = 524
                self.selection()
                self.state = 525
                self.selection()
                self.state = 526
                self.selection()


            self.state = 530
            self.number()
            self.state = 531
            self.number()
            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 532
                self.number()
                self.state = 533
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_rcoilContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,i)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 581
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 537
                    self.carbon_shift_assign()
                    self.state = 542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 543
                self.match(CnsMRParser.Classification)
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 544
                    self.match(CnsMRParser.Equ_op)


                self.state = 547
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 548
                self.match(CnsMRParser.Expectation)
                self.state = 549
                self.match(CnsMRParser.Integer)
                self.state = 550
                self.match(CnsMRParser.Integer)
                self.state = 551
                self.number_s()
                self.state = 552
                self.number_s()
                self.state = 553
                self.number_s()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 555
                self.match(CnsMRParser.ForceConstant)
                self.state = 556
                self.match(CnsMRParser.Equ_op)
                self.state = 557
                self.number_s()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 558
                self.match(CnsMRParser.Nrestraints)
                self.state = 559
                self.match(CnsMRParser.Equ_op)
                self.state = 560
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 561
                self.match(CnsMRParser.PhiStep)
                self.state = 562
                self.match(CnsMRParser.Equ_op)
                self.state = 563
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 564
                self.match(CnsMRParser.PsiStep)
                self.state = 565
                self.match(CnsMRParser.Equ_op)
                self.state = 566
                self.number_s()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 567
                self.match(CnsMRParser.Potential)
                self.state = 568
                self.match(CnsMRParser.Equ_op)
                self.state = 569
                self.match(CnsMRParser.Rdc_potential)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 570
                self.match(CnsMRParser.Print)
                self.state = 571
                self.match(CnsMRParser.Threshold)
                self.state = 572
                self.number_s()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Rcoil:
                    self.state = 573
                    self.carbon_shift_rcoil()
                    self.state = 578
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 579
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 580
                self.match(CnsMRParser.Zero)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 583
            self.match(CnsMRParser.Assign)
            self.state = 584
            self.selection()
            self.state = 585
            self.selection()
            self.state = 586
            self.selection()
            self.state = 587
            self.selection()
            self.state = 588
            self.selection()
            self.state = 589
            self.number()
            self.state = 590
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 592
            self.match(CnsMRParser.Rcoil)
            self.state = 593
            self.selection()
            self.state = 594
            self.number_s()
            self.state = 595
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.ObservedContext,i)


        def proton_shift_rcoil(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_rcoilContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,i)


        def proton_shift_anisotropy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_anisotropyContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,i)


        def proton_shift_amides(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_amidesContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,i)


        def proton_shift_carbons(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_carbonsContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,i)


        def proton_shift_nitrogens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_nitrogensContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,i)


        def proton_shift_oxygens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_oxygensContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,i)


        def proton_shift_ring_atoms(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_ring_atomsContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,i)


        def proton_shift_alphas_and_amides(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_alphas_and_amidesContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(CnsMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Observed:
                    self.state = 597
                    self.observed()
                    self.state = 602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Rcoil:
                    self.state = 603
                    self.proton_shift_rcoil()
                    self.state = 608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Anisotropy:
                    self.state = 609
                    self.proton_shift_anisotropy()
                    self.state = 614
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 618
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Amides:
                    self.state = 615
                    self.proton_shift_amides()
                    self.state = 620
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Carbons:
                    self.state = 621
                    self.proton_shift_carbons()
                    self.state = 626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Nitrogens:
                    self.state = 627
                    self.proton_shift_nitrogens()
                    self.state = 632
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 636
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Oxygens:
                    self.state = 633
                    self.proton_shift_oxygens()
                    self.state = 638
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 642
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.RingAtoms:
                    self.state = 639
                    self.proton_shift_ring_atoms()
                    self.state = 644
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.AlphasAndAmides:
                    self.state = 645
                    self.proton_shift_alphas_and_amides()
                    self.state = 650
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 651
                self.match(CnsMRParser.Classification)
                self.state = 653
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 652
                    self.match(CnsMRParser.Equ_op)


                self.state = 655
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 656
                self.match(CnsMRParser.Error)
                self.state = 658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 657
                    self.match(CnsMRParser.Equ_op)


                self.state = 660
                self.number_s()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 661
                self.match(CnsMRParser.ForceConstant)
                self.state = 662
                self.number_s()
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                    self.state = 663
                    self.number_s()


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 666
                self.match(CnsMRParser.Potential)
                self.state = 667
                self.match(CnsMRParser.Coupling_potential)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 668
                self.match(CnsMRParser.Print)
                self.state = 669
                self.match(CnsMRParser.Threshold)
                self.state = 670
                self.number_s()
                self.state = 677
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 671
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 672
                    self.match(CnsMRParser.Classification)
                    self.state = 674
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 673
                        self.match(CnsMRParser.Equ_op)


                    self.state = 676
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 679
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 681
                self.match(CnsMRParser.Reset)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(CnsMRParser.Observed)
            self.state = 685
            self.selection()
            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 686
                self.selection()


            self.state = 689
            self.number_s()
            self.state = 691
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 690
                self.number_s()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 693
            self.match(CnsMRParser.Rcoil)
            self.state = 694
            self.selection()
            self.state = 695
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(CnsMRParser.Anisotropy)
            self.state = 698
            self.selection()
            self.state = 699
            self.selection()
            self.state = 700
            self.selection()
            self.state = 701
            self.match(CnsMRParser.Simple_name)
            self.state = 703
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 702
                self.match(CnsMRParser.Logical)


            self.state = 705
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 707
            self.match(CnsMRParser.Amides)
            self.state = 708
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbons(self):
            return self.getToken(CnsMRParser.Carbons, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 710
            self.match(CnsMRParser.Carbons)
            self.state = 711
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 713
            self.match(CnsMRParser.Nitrogens)
            self.state = 714
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 716
            self.match(CnsMRParser.Oxygens)
            self.state = 717
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 719
            self.match(CnsMRParser.RingAtoms)
            self.state = 720
            self.match(CnsMRParser.Simple_name)
            self.state = 721
            self.selection()
            self.state = 722
            self.selection()
            self.state = 723
            self.selection()
            self.state = 724
            self.selection()
            self.state = 725
            self.selection()
            self.state = 727
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 726
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 729
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 730
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conf_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 812
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.End, CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 732
                    self.conf_assign()
                    self.state = 737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 738
                self.match(CnsMRParser.Classification)
                self.state = 740
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 739
                    self.match(CnsMRParser.Equ_op)


                self.state = 742
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 743
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 744
                self.match(CnsMRParser.Expectation)
                self.state = 745
                self.match(CnsMRParser.Integer)
                self.state = 747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
                if la_ == 1:
                    self.state = 746
                    self.match(CnsMRParser.Integer)


                self.state = 750
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                if la_ == 1:
                    self.state = 749
                    self.match(CnsMRParser.Integer)


                self.state = 753
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 752
                    self.match(CnsMRParser.Integer)


                self.state = 755
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 756
                self.match(CnsMRParser.Error)
                self.state = 757
                self.match(CnsMRParser.Equ_op)
                self.state = 758
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 759
                self.match(CnsMRParser.ForceConstant)
                self.state = 760
                self.match(CnsMRParser.Equ_op)
                self.state = 761
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 762
                self.match(CnsMRParser.Nrestraints)
                self.state = 763
                self.match(CnsMRParser.Equ_op)
                self.state = 764
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 765
                self.match(CnsMRParser.Phase)
                self.state = 766
                self.match(CnsMRParser.Integer)
                self.state = 767
                self.match(CnsMRParser.Integer)
                self.state = 768
                self.match(CnsMRParser.Integer)
                self.state = 772
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 769
                    self.match(CnsMRParser.Integer)
                    self.state = 770
                    self.match(CnsMRParser.Integer)
                    self.state = 771
                    self.match(CnsMRParser.Integer)


                self.state = 777
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
                if la_ == 1:
                    self.state = 774
                    self.match(CnsMRParser.Integer)
                    self.state = 775
                    self.match(CnsMRParser.Integer)
                    self.state = 776
                    self.match(CnsMRParser.Integer)


                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 779
                    self.match(CnsMRParser.Integer)
                    self.state = 780
                    self.match(CnsMRParser.Integer)
                    self.state = 781
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 784
                self.match(CnsMRParser.Potential)
                self.state = 785
                self.match(CnsMRParser.Equ_op)
                self.state = 786
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 787
                self.match(CnsMRParser.Print)
                self.state = 788
                self.match(CnsMRParser.Threshold)
                self.state = 789
                self.number_s()
                self.state = 796
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 790
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 791
                    self.match(CnsMRParser.Classification)
                    self.state = 793
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 792
                        self.match(CnsMRParser.Equ_op)


                    self.state = 795
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 798
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 799
                self.match(CnsMRParser.Size)
                self.state = 800
                self.match(CnsMRParser.Dimensions)
                self.state = 801
                self.match(CnsMRParser.Integer)
                self.state = 803
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                if la_ == 1:
                    self.state = 802
                    self.match(CnsMRParser.Integer)


                self.state = 806
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
                if la_ == 1:
                    self.state = 805
                    self.match(CnsMRParser.Integer)


                self.state = 809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 808
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 811
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(CnsMRParser.Assign)
            self.state = 815
            self.selection()
            self.state = 816
            self.selection()
            self.state = 817
            self.selection()
            self.state = 818
            self.selection()
            self.state = 824
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,74,self._ctx)
            if la_ == 1:
                self.state = 819
                self.selection()
                self.state = 820
                self.selection()
                self.state = 821
                self.selection()
                self.state = 822
                self.selection()


            self.state = 831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 826
                self.selection()
                self.state = 827
                self.selection()
                self.state = 828
                self.selection()
                self.state = 829
                self.selection()


            self.state = 838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 833
                self.selection()
                self.state = 834
                self.selection()
                self.state = 835
                self.selection()
                self.state = 836
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 871
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.End, CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 840
                    self.dani_assign()
                    self.state = 845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 846
                self.match(CnsMRParser.Classification)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 847
                    self.match(CnsMRParser.Equ_op)


                self.state = 850
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 851
                self.match(CnsMRParser.Coefficients)
                self.state = 852
                self.number_s()
                self.state = 853
                self.number_s()
                self.state = 854
                self.number_s()
                self.state = 855
                self.number_s()
                self.state = 856
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 858
                self.match(CnsMRParser.ForceConstant)
                self.state = 859
                self.match(CnsMRParser.Equ_op)
                self.state = 860
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 861
                self.match(CnsMRParser.Nrestraints)
                self.state = 862
                self.match(CnsMRParser.Equ_op)
                self.state = 863
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 864
                self.match(CnsMRParser.Potential)
                self.state = 865
                self.match(CnsMRParser.Equ_op)
                self.state = 866
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 867
                self.match(CnsMRParser.Print)
                self.state = 868
                self.match(CnsMRParser.Threshold)
                self.state = 869
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 870
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(CnsMRParser.Assign)
            self.state = 874
            self.selection()
            self.state = 875
            self.selection()
            self.state = 876
            self.selection()
            self.state = 877
            self.selection()
            self.state = 878
            self.selection()
            self.state = 879
            self.selection()
            self.state = 880
            self.number()
            self.state = 881
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 916
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.End, CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 886
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 883
                    self.one_bond_assign()
                    self.state = 888
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 889
                self.match(CnsMRParser.Classification)
                self.state = 891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 890
                    self.match(CnsMRParser.Equ_op)


                self.state = 893
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 894
                self.match(CnsMRParser.Coefficients)
                self.state = 895
                self.number_s()
                self.state = 896
                self.number_s()
                self.state = 897
                self.number_s()
                self.state = 898
                self.number_s()
                self.state = 899
                self.number_s()
                self.state = 900
                self.number_s()
                self.state = 901
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 903
                self.match(CnsMRParser.ForceConstant)
                self.state = 904
                self.match(CnsMRParser.Equ_op)
                self.state = 905
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 906
                self.match(CnsMRParser.Nrestraints)
                self.state = 907
                self.match(CnsMRParser.Equ_op)
                self.state = 908
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 909
                self.match(CnsMRParser.Potential)
                self.state = 910
                self.match(CnsMRParser.Equ_op)
                self.state = 911
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 912
                self.match(CnsMRParser.Print)
                self.state = 913
                self.match(CnsMRParser.Threshold)
                self.state = 914
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 915
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 918
            self.match(CnsMRParser.Assign)
            self.state = 919
            self.selection()
            self.state = 920
            self.selection()
            self.state = 921
            self.selection()
            self.state = 922
            self.selection()
            self.state = 923
            self.selection()
            self.state = 924
            self.selection()
            self.state = 925
            self.selection()
            self.state = 926
            self.selection()
            self.state = 927
            self.number()
            self.state = 928
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Angle_dihedral(self):
            return self.getToken(CnsMRParser.Angle_dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 977
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.End, CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 930
                    self.angle_db_assign()
                    self.state = 935
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 936
                self.match(CnsMRParser.Classification)
                self.state = 938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 937
                    self.match(CnsMRParser.Equ_op)


                self.state = 940
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 941
                self.match(CnsMRParser.DerivFlag)
                self.state = 942
                self.match(CnsMRParser.Equ_op)
                self.state = 943
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 944
                self.match(CnsMRParser.Expectation)
                self.state = 945
                self.match(CnsMRParser.Integer)
                self.state = 946
                self.match(CnsMRParser.Integer)
                self.state = 947
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 948
                self.match(CnsMRParser.Error)
                self.state = 949
                self.match(CnsMRParser.Equ_op)
                self.state = 950
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 951
                self.match(CnsMRParser.ForceConstant)
                self.state = 952
                self.match(CnsMRParser.Equ_op)
                self.state = 953
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 954
                self.match(CnsMRParser.Nrestraints)
                self.state = 955
                self.match(CnsMRParser.Equ_op)
                self.state = 956
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 957
                self.match(CnsMRParser.Potential)
                self.state = 958
                self.match(CnsMRParser.Equ_op)
                self.state = 959
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 960
                self.match(CnsMRParser.Print)
                self.state = 961
                self.match(CnsMRParser.Threshold)
                self.state = 962
                self.number_s()
                self.state = 969
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 963
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 964
                    self.match(CnsMRParser.Classification)
                    self.state = 966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 965
                        self.match(CnsMRParser.Equ_op)


                    self.state = 968
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 971
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 972
                self.match(CnsMRParser.Size)
                self.state = 973
                self.match(CnsMRParser.Angle_dihedral)
                self.state = 974
                self.match(CnsMRParser.Integer)
                self.state = 975
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 976
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(CnsMRParser.Assign)
            self.state = 980
            self.selection()
            self.state = 981
            self.selection()
            self.state = 982
            self.selection()
            self.state = 983
            self.selection()
            self.state = 984
            self.selection()
            self.state = 985
            self.selection()
            self.state = 986
            self.selection()
            self.state = 987
            self.selection()
            self.state = 988
            self.selection()
            self.state = 989
            self.selection()
            self.state = 990
            self.selection()
            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 991
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(CnsMRParser.L_paren)
            self.state = 995
            self.selection_expression()
            self.state = 996
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 998
            self.term()
            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 999
                self.match(CnsMRParser.Or_op)
                self.state = 1000
                self.term()
                self.state = 1005
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1006
            self.factor(0)
            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1007
                self.match(CnsMRParser.And_op)
                self.state = 1008
                self.factor(0)
                self.state = 1013
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store_1(self):
            return self.getToken(CnsMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(CnsMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(CnsMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(CnsMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(CnsMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(CnsMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(CnsMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(CnsMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(CnsMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1154
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 1015
                self.match(CnsMRParser.L_paren)
                self.state = 1016
                self.selection_expression()
                self.state = 1017
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1019
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1020
                self.match(CnsMRParser.Atom)
                self.state = 1021
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1022
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1023
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1024
                self.match(CnsMRParser.Attribute)
                self.state = 1026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1025
                    self.match(CnsMRParser.Abs)


                self.state = 1028
                self.match(CnsMRParser.Attr_properties)
                self.state = 1029
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1030
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1031
                self.match(CnsMRParser.BondedTo)
                self.state = 1032
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1033
                self.match(CnsMRParser.ByGroup)
                self.state = 1034
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1035
                self.match(CnsMRParser.ByRes)
                self.state = 1036
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1037
                self.match(CnsMRParser.Chemical)
                self.state = 1044
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1038
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1039
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1042
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                    if la_ == 1:
                        self.state = 1040
                        self.match(CnsMRParser.Colon)
                        self.state = 1041
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1046
                self.match(CnsMRParser.Fbox)
                self.state = 1047
                self.number_f()
                self.state = 1048
                self.number_f()
                self.state = 1049
                self.number_f()
                self.state = 1050
                self.number_f()
                self.state = 1051
                self.number_f()
                self.state = 1052
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1054
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1055
                self.match(CnsMRParser.Id)
                self.state = 1056
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1057
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1058
                self.match(CnsMRParser.Name)
                self.state = 1065
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1059
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1060
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1063
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                    if la_ == 1:
                        self.state = 1061
                        self.match(CnsMRParser.Colon)
                        self.state = 1062
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1067
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1068
                self.match(CnsMRParser.Not_op)
                self.state = 1069
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1070
                self.match(CnsMRParser.Point)
                self.state = 1071
                self.match(CnsMRParser.L_paren)
                self.state = 1072
                self.number_f()
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1073
                    self.match(CnsMRParser.Comma)


                self.state = 1076
                self.number_f()
                self.state = 1078
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1077
                    self.match(CnsMRParser.Comma)


                self.state = 1080
                self.number_f()
                self.state = 1081
                self.match(CnsMRParser.R_paren)
                self.state = 1082
                self.match(CnsMRParser.Cut)
                self.state = 1083
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1085
                self.match(CnsMRParser.Point)
                self.state = 1086
                self.match(CnsMRParser.L_paren)
                self.state = 1087
                self.match(CnsMRParser.Tail)
                self.state = 1088
                self.match(CnsMRParser.Equ_op)
                self.state = 1089
                self.selection()
                self.state = 1091
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1090
                    self.match(CnsMRParser.Comma)


                self.state = 1096
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1093
                    self.match(CnsMRParser.Head)
                    self.state = 1094
                    self.match(CnsMRParser.Equ_op)
                    self.state = 1095
                    self.selection()


                self.state = 1098
                self.match(CnsMRParser.R_paren)
                self.state = 1099
                self.match(CnsMRParser.Cut)
                self.state = 1100
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1102
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1103
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1104
                self.match(CnsMRParser.Residue)
                self.state = 1111
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1105
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1106
                    self.match(CnsMRParser.Integer)
                    self.state = 1109
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
                    if la_ == 1:
                        self.state = 1107
                        self.match(CnsMRParser.Colon)
                        self.state = 1108
                        self.match(CnsMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1113
                self.match(CnsMRParser.Resname)
                self.state = 1120
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1114
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1115
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1118
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                    if la_ == 1:
                        self.state = 1116
                        self.match(CnsMRParser.Colon)
                        self.state = 1117
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1122
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1134
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1123
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1124
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1127
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                    if la_ == 1:
                        self.state = 1125
                        self.match(CnsMRParser.Colon)
                        self.state = 1126
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1129
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1132
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                    if la_ == 1:
                        self.state = 1130
                        self.match(CnsMRParser.Colon)
                        self.state = 1131
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1136
                self.match(CnsMRParser.Sfbox)
                self.state = 1137
                self.number_f()
                self.state = 1138
                self.number_f()
                self.state = 1139
                self.number_f()
                self.state = 1140
                self.number_f()
                self.state = 1141
                self.number_f()
                self.state = 1142
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1144
                self.match(CnsMRParser.Store_1)
                pass

            elif la_ == 25:
                self.state = 1145
                self.match(CnsMRParser.Store_2)
                pass

            elif la_ == 26:
                self.state = 1146
                self.match(CnsMRParser.Store_3)
                pass

            elif la_ == 27:
                self.state = 1147
                self.match(CnsMRParser.Store_4)
                pass

            elif la_ == 28:
                self.state = 1148
                self.match(CnsMRParser.Store_5)
                pass

            elif la_ == 29:
                self.state = 1149
                self.match(CnsMRParser.Store_6)
                pass

            elif la_ == 30:
                self.state = 1150
                self.match(CnsMRParser.Store_7)
                pass

            elif la_ == 31:
                self.state = 1151
                self.match(CnsMRParser.Store_8)
                pass

            elif la_ == 32:
                self.state = 1152
                self.match(CnsMRParser.Store_9)
                pass

            elif la_ == 33:
                self.state = 1153
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1164
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,109,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1162
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1156
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1157
                        self.match(CnsMRParser.Around)
                        self.state = 1158
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1159
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1160
                        self.match(CnsMRParser.Saround)
                        self.state = 1161
                        self.number_f()
                        pass

             
                self.state = 1166
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,109,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1169
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1171
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[49] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




