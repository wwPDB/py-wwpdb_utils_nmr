# Generated from CnsMRParser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0098")
        buf.write("\u0461\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\7\2s\n\2\f\2\16")
        buf.write("\2v\13\2\3\2\7\2y\n\2\f\2\16\2|\13\2\3\2\7\2\177\n\2\f")
        buf.write("\2\16\2\u0082\13\2\3\2\7\2\u0085\n\2\f\2\16\2\u0088\13")
        buf.write("\2\3\2\7\2\u008b\n\2\f\2\16\2\u008e\13\2\3\2\3\2\3\3\3")
        buf.write("\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\6")
        buf.write("\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\t\3")
        buf.write("\t\3\t\3\t\3\n\3\n\3\n\3\n\3\13\3\13\3\13\3\13\3\f\3\f")
        buf.write("\3\f\3\f\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\17\3\17")
        buf.write("\3\17\3\17\7\17\u00c9\n\17\f\17\16\17\u00cc\13\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\7\17\u00f1\n\17\f\17\16\17\u00f4\13\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\7\17\u0111\n\17\f\17\16\17\u0114\13\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\7\17\u012c\n\17\f\17\16\17\u012f\13\17\3\17\3\17\3\17")
        buf.write("\3\17\5\17\u0135\n\17\3\20\3\20\3\20\3\20\3\20\3\20\3")
        buf.write("\20\3\20\3\20\3\20\7\20\u0141\n\20\f\20\16\20\u0144\13")
        buf.write("\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\5\21\u0150\n\21\3\22\7\22\u0153\n\22\f\22\16\22\u0156")
        buf.write("\13\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3")
        buf.write("\22\3\22\3\22\3\22\3\22\5\22\u0166\n\22\3\23\3\23\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24")
        buf.write("\5\24\u0176\n\24\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u017e")
        buf.write("\n\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\5\26\u0188")
        buf.write("\n\26\3\26\3\26\5\26\u018c\n\26\3\26\3\26\3\26\3\26\3")
        buf.write("\26\5\26\u0193\n\26\3\26\3\26\3\26\5\26\u0198\n\26\5\26")
        buf.write("\u019a\n\26\3\26\5\26\u019d\n\26\3\27\7\27\u01a0\n\27")
        buf.write("\f\27\16\27\u01a3\13\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27")
        buf.write("\3\27\3\27\3\27\5\27\u01b9\n\27\3\30\3\30\3\30\3\30\3")
        buf.write("\30\3\30\3\30\3\30\3\30\3\30\5\30\u01c5\n\30\3\31\7\31")
        buf.write("\u01c8\n\31\f\31\16\31\u01cb\13\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31")
        buf.write("\u01db\n\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u01ed\n\31")
        buf.write("\3\31\5\31\u01f0\n\31\3\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\5\32\u01fc\n\32\3\32\3\32\3\32\3\32")
        buf.write("\5\32\u0202\n\32\3\33\7\33\u0205\n\33\f\33\16\33\u0208")
        buf.write("\13\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33")
        buf.write("\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\7\33\u0226\n")
        buf.write("\33\f\33\16\33\u0229\13\33\3\33\3\33\5\33\u022d\n\33\3")
        buf.write("\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35")
        buf.write("\3\35\3\35\3\35\3\36\7\36\u023e\n\36\f\36\16\36\u0241")
        buf.write("\13\36\3\36\7\36\u0244\n\36\f\36\16\36\u0247\13\36\3\36")
        buf.write("\7\36\u024a\n\36\f\36\16\36\u024d\13\36\3\36\7\36\u0250")
        buf.write("\n\36\f\36\16\36\u0253\13\36\3\36\7\36\u0256\n\36\f\36")
        buf.write("\16\36\u0259\13\36\3\36\7\36\u025c\n\36\f\36\16\36\u025f")
        buf.write("\13\36\3\36\7\36\u0262\n\36\f\36\16\36\u0265\13\36\3\36")
        buf.write("\7\36\u0268\n\36\f\36\16\36\u026b\13\36\3\36\7\36\u026e")
        buf.write("\n\36\f\36\16\36\u0271\13\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\5\36\u0278\n\36\3\36\3\36\3\36\3\36\5\36\u027e\n\36\3")
        buf.write("\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u0289")
        buf.write("\n\36\3\36\3\36\5\36\u028d\n\36\3\37\3\37\3\37\5\37\u0292")
        buf.write("\n\37\3\37\3\37\5\37\u0296\n\37\3 \3 \3 \3 \3!\3!\3!\3")
        buf.write("!\3!\3!\5!\u02a2\n!\3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$\3")
        buf.write("$\3%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3&\5&\u02ba\n&\3\'\3\'")
        buf.write("\3\'\3(\7(\u02c0\n(\f(\16(\u02c3\13(\3(\3(\3(\3(\3(\3")
        buf.write("(\3(\5(\u02cc\n(\3(\5(\u02cf\n(\3(\5(\u02d2\n(\3(\3(\3")
        buf.write("(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u02e5\n")
        buf.write("(\3(\3(\3(\5(\u02ea\n(\3(\3(\3(\5(\u02ef\n(\3(\3(\3(\3")
        buf.write("(\3(\3(\3(\3(\3(\3(\5(\u02fb\n(\3(\3(\3(\3(\3(\5(\u0302")
        buf.write("\n(\3(\5(\u0305\n(\3(\5(\u0308\n(\3(\5(\u030b\n(\3)\3")
        buf.write(")\3)\3)\3)\3)\3)\3)\3)\3)\5)\u0317\n)\3)\3)\3)\3)\3)\5")
        buf.write(")\u031e\n)\3)\3)\3)\3)\3)\5)\u0325\n)\3*\7*\u0328\n*\f")
        buf.write("*\16*\u032b\13*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3")
        buf.write("*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0343\n*\3+\3+\3+\3+\3")
        buf.write("+\3+\3+\3+\3+\3+\3,\7,\u0350\n,\f,\16,\u0353\13,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\5,\u036d\n,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3.\7.\u037c\n.\f.\16.\u037f\13.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\5.\u039e\n.\3.\3.\3.\3.\3.\3.\5.\u03a6")
        buf.write("\n.\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5/\u03b5\n")
        buf.write("/\3\60\3\60\3\60\3\60\3\61\3\61\3\61\7\61\u03be\n\61\f")
        buf.write("\61\16\61\u03c1\13\61\3\62\3\62\3\62\7\62\u03c6\n\62\f")
        buf.write("\62\16\62\u03c9\13\62\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\5\63\u03d7\n\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\5\63\u03e7\n\63\5\63\u03e9\n\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\5\63\u03fb\n\63\5\63\u03fd\n\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\5\63\u0406\n\63\3\63\3\63\5\63")
        buf.write("\u040a\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\5\63\u0416\n\63\3\63\3\63\3\63\5\63\u041b\n\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\5\63\u0428\n\63\5\63\u042a\n\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\5\63\u0431\n\63\5\63\u0433\n\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\5\63\u043a\n\63\3\63\3\63\3\63\5\63\u043f\n\63\5")
        buf.write("\63\u0441\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0454")
        buf.write("\n\63\3\63\3\63\3\63\3\63\3\63\3\63\7\63\u045c\n\63\f")
        buf.write("\63\16\63\u045f\13\63\3\63\5\u00f2\u0112\u012d\3d\64\2")
        buf.write("\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62\64")
        buf.write("\668:<>@BDFHJLNPRTVXZ\\^`bd\2\4\3\2\u0086\u0087\4\2\u0082")
        buf.write("\u0082\u0088\u0088\2\u0523\2t\3\2\2\2\4\u0091\3\2\2\2")
        buf.write("\6\u0095\3\2\2\2\b\u009a\3\2\2\2\n\u009f\3\2\2\2\f\u00a4")
        buf.write("\3\2\2\2\16\u00a8\3\2\2\2\20\u00ac\3\2\2\2\22\u00b0\3")
        buf.write("\2\2\2\24\u00b4\3\2\2\2\26\u00b8\3\2\2\2\30\u00bc\3\2")
        buf.write("\2\2\32\u00c0\3\2\2\2\34\u0134\3\2\2\2\36\u0136\3\2\2")
        buf.write("\2 \u014f\3\2\2\2\"\u0165\3\2\2\2$\u0167\3\2\2\2&\u0175")
        buf.write("\3\2\2\2(\u017d\3\2\2\2*\u019c\3\2\2\2,\u01b8\3\2\2\2")
        buf.write(".\u01ba\3\2\2\2\60\u01ef\3\2\2\2\62\u01f1\3\2\2\2\64\u022c")
        buf.write("\3\2\2\2\66\u022e\3\2\2\28\u0237\3\2\2\2:\u028c\3\2\2")
        buf.write("\2<\u028e\3\2\2\2>\u0297\3\2\2\2@\u029b\3\2\2\2B\u02a5")
        buf.write("\3\2\2\2D\u02a8\3\2\2\2F\u02ab\3\2\2\2H\u02ae\3\2\2\2")
        buf.write("J\u02b1\3\2\2\2L\u02bb\3\2\2\2N\u030a\3\2\2\2P\u030c\3")
        buf.write("\2\2\2R\u0342\3\2\2\2T\u0344\3\2\2\2V\u036c\3\2\2\2X\u036e")
        buf.write("\3\2\2\2Z\u03a5\3\2\2\2\\\u03a7\3\2\2\2^\u03b6\3\2\2\2")
        buf.write("`\u03ba\3\2\2\2b\u03c2\3\2\2\2d\u0453\3\2\2\2fs\5\4\3")
        buf.write("\2gs\5\6\4\2hs\5\b\5\2is\5\n\6\2js\5\f\7\2ks\5\16\b\2")
        buf.write("ls\5\20\t\2ms\5\22\n\2ns\5\24\13\2os\5\26\f\2ps\5\30\r")
        buf.write("\2qs\5\32\16\2rf\3\2\2\2rg\3\2\2\2rh\3\2\2\2ri\3\2\2\2")
        buf.write("rj\3\2\2\2rk\3\2\2\2rl\3\2\2\2rm\3\2\2\2rn\3\2\2\2ro\3")
        buf.write("\2\2\2rp\3\2\2\2rq\3\2\2\2sv\3\2\2\2tr\3\2\2\2tu\3\2\2")
        buf.write("\2uz\3\2\2\2vt\3\2\2\2wy\5\36\20\2xw\3\2\2\2y|\3\2\2\2")
        buf.write("zx\3\2\2\2z{\3\2\2\2{\u0080\3\2\2\2|z\3\2\2\2}\177\5$")
        buf.write("\23\2~}\3\2\2\2\177\u0082\3\2\2\2\u0080~\3\2\2\2\u0080")
        buf.write("\u0081\3\2\2\2\u0081\u0086\3\2\2\2\u0082\u0080\3\2\2\2")
        buf.write("\u0083\u0085\5.\30\2\u0084\u0083\3\2\2\2\u0085\u0088\3")
        buf.write("\2\2\2\u0086\u0084\3\2\2\2\u0086\u0087\3\2\2\2\u0087\u008c")
        buf.write("\3\2\2\2\u0088\u0086\3\2\2\2\u0089\u008b\5&\24\2\u008a")
        buf.write("\u0089\3\2\2\2\u008b\u008e\3\2\2\2\u008c\u008a\3\2\2\2")
        buf.write("\u008c\u008d\3\2\2\2\u008d\u008f\3\2\2\2\u008e\u008c\3")
        buf.write("\2\2\2\u008f\u0090\7\2\2\3\u0090\3\3\2\2\2\u0091\u0092")
        buf.write("\7\4\2\2\u0092\u0093\5\34\17\2\u0093\u0094\7\3\2\2\u0094")
        buf.write("\5\3\2\2\2\u0095\u0096\7/\2\2\u0096\u0097\7\60\2\2\u0097")
        buf.write("\u0098\5\"\22\2\u0098\u0099\7\3\2\2\u0099\7\3\2\2\2\u009a")
        buf.write("\u009b\7/\2\2\u009b\u009c\7\63\2\2\u009c\u009d\5&\24\2")
        buf.write("\u009d\u009e\7\3\2\2\u009e\t\3\2\2\2\u009f\u00a0\7/\2")
        buf.write("\2\u00a0\u00a1\7\67\2\2\u00a1\u00a2\5*\26\2\u00a2\u00a3")
        buf.write("\7\3\2\2\u00a3\13\3\2\2\2\u00a4\u00a5\7:\2\2\u00a5\u00a6")
        buf.write("\5,\27\2\u00a6\u00a7\7\3\2\2\u00a7\r\3\2\2\2\u00a8\u00a9")
        buf.write("\7>\2\2\u00a9\u00aa\5\60\31\2\u00aa\u00ab\7\3\2\2\u00ab")
        buf.write("\17\3\2\2\2\u00ac\u00ad\7@\2\2\u00ad\u00ae\5\64\33\2\u00ae")
        buf.write("\u00af\7\3\2\2\u00af\21\3\2\2\2\u00b0\u00b1\7F\2\2\u00b1")
        buf.write("\u00b2\5:\36\2\u00b2\u00b3\7\3\2\2\u00b3\23\3\2\2\2\u00b4")
        buf.write("\u00b5\7P\2\2\u00b5\u00b6\5N(\2\u00b6\u00b7\7\3\2\2\u00b7")
        buf.write("\25\3\2\2\2\u00b8\u00b9\7U\2\2\u00b9\u00ba\5R*\2\u00ba")
        buf.write("\u00bb\7\3\2\2\u00bb\27\3\2\2\2\u00bc\u00bd\7V\2\2\u00bd")
        buf.write("\u00be\5V,\2\u00be\u00bf\7\3\2\2\u00bf\31\3\2\2\2\u00c0")
        buf.write("\u00c1\7W\2\2\u00c1\u00c2\5Z.\2\u00c2\u00c3\7\3\2\2\u00c3")
        buf.write("\33\3\2\2\2\u00c4\u00c5\7\5\2\2\u00c5\u00c6\7\u008c\2")
        buf.write("\2\u00c6\u0135\7$\2\2\u00c7\u00c9\5\36\20\2\u00c8\u00c7")
        buf.write("\3\2\2\2\u00c9\u00cc\3\2\2\2\u00ca\u00c8\3\2\2\2\u00ca")
        buf.write("\u00cb\3\2\2\2\u00cb\u0135\3\2\2\2\u00cc\u00ca\3\2\2\2")
        buf.write("\u00cd\u00ce\7\7\2\2\u00ce\u00cf\7\u0087\2\2\u00cf\u0135")
        buf.write("\7\u0084\2\2\u00d0\u00d1\7\b\2\2\u00d1\u00d2\7\u0087\2")
        buf.write("\2\u00d2\u0135\7)\2\2\u00d3\u00d4\7\t\2\2\u00d4\u00d5")
        buf.write("\7\u0087\2\2\u00d5\u0135\7\u0084\2\2\u00d6\u00d7\7\n\2")
        buf.write("\2\u00d7\u00d8\7\u008c\2\2\u00d8\u0135\7\u0084\2\2\u00d9")
        buf.write("\u00da\7\13\2\2\u00da\u00db\7\u008c\2\2\u00db\u0135\7")
        buf.write("\u0086\2\2\u00dc\u00dd\7\f\2\2\u00dd\u0135\7\u0086\2\2")
        buf.write("\u00de\u00df\7\r\2\2\u00df\u00e0\7\u008c\2\2\u00e0\u0135")
        buf.write("\7\u0082\2\2\u00e1\u00e2\7\16\2\2\u00e2\u0135\7%\2\2\u00e3")
        buf.write("\u00e4\7\16\2\2\u00e4\u00e5\7&\2\2\u00e5\u00e6\7\'\2\2")
        buf.write("\u00e6\u00e7\7\u008c\2\2\u00e7\u00e8\7\u0084\2\2\u00e8")
        buf.write("\u00e9\7(\2\2\u00e9\u00ea\7\u008c\2\2\u00ea\u0135\7\u0084")
        buf.write("\2\2\u00eb\u00ec\7\17\2\2\u00ec\u00ed\7\u0086\2\2\u00ed")
        buf.write("\u00ee\7\u0086\2\2\u00ee\u0135\7\u0084\2\2\u00ef\u00f1")
        buf.write("\7\20\2\2\u00f0\u00ef\3\2\2\2\u00f1\u00f4\3\2\2\2\u00f2")
        buf.write("\u00f3\3\2\2\2\u00f2\u00f0\3\2\2\2\u00f3\u00f5\3\2\2\2")
        buf.write("\u00f4\u00f2\3\2\2\2\u00f5\u0135\7\3\2\2\u00f6\u00f7\7")
        buf.write("\21\2\2\u00f7\u00f8\7\u0087\2\2\u00f8\u0135\7\u0082\2")
        buf.write("\2\u00f9\u00fa\7\22\2\2\u00fa\u00fb\7\u0087\2\2\u00fb")
        buf.write("\u0135\7\u0082\2\2\u00fc\u00fd\7\23\2\2\u00fd\u00fe\7")
        buf.write("\u008c\2\2\u00fe\u0135\7\u0082\2\2\u00ff\u0135\7\24\2")
        buf.write("\2\u0100\u0101\7\25\2\2\u0101\u0102\7\u008c\2\2\u0102")
        buf.write("\u0135\7\u0082\2\2\u0103\u0104\7\26\2\2\u0104\u0105\7")
        buf.write("\u0087\2\2\u0105\u0135\7*\2\2\u0106\u0107\7\27\2\2\u0107")
        buf.write("\u0108\5 \21\2\u0108\u0109\7\3\2\2\u0109\u0135\3\2\2\2")
        buf.write("\u010a\u010b\7\30\2\2\u010b\u010c\7\32\2\2\u010c\u010d")
        buf.write("\7\u008c\2\2\u010d\u0135\7\u0084\2\2\u010e\u0112\7\31")
        buf.write("\2\2\u010f\u0111\7\u0086\2\2\u0110\u010f\3\2\2\2\u0111")
        buf.write("\u0114\3\2\2\2\u0112\u0113\3\2\2\2\u0112\u0110\3\2\2\2")
        buf.write("\u0113\u0115\3\2\2\2\u0114\u0112\3\2\2\2\u0115\u0135\7")
        buf.write("\3\2\2\u0116\u0135\7\33\2\2\u0117\u0118\7\34\2\2\u0118")
        buf.write("\u0119\7\u0087\2\2\u0119\u0135\7\u0084\2\2\u011a\u011b")
        buf.write("\7\35\2\2\u011b\u011c\7\u0087\2\2\u011c\u0135\7\u0084")
        buf.write("\2\2\u011d\u011e\7\36\2\2\u011e\u011f\7\u0087\2\2\u011f")
        buf.write("\u0135\7\u0084\2\2\u0120\u0121\7\37\2\2\u0121\u0122\7")
        buf.write("\u0087\2\2\u0122\u0135\7\u0084\2\2\u0123\u0124\7 \2\2")
        buf.write("\u0124\u0125\7\u0087\2\2\u0125\u0135\7\u0084\2\2\u0126")
        buf.write("\u0127\7!\2\2\u0127\u0128\7\u0087\2\2\u0128\u0135\7\u0084")
        buf.write("\2\2\u0129\u012d\7\"\2\2\u012a\u012c\7\u0086\2\2\u012b")
        buf.write("\u012a\3\2\2\2\u012c\u012f\3\2\2\2\u012d\u012e\3\2\2\2")
        buf.write("\u012d\u012b\3\2\2\2\u012e\u0130\3\2\2\2\u012f\u012d\3")
        buf.write("\2\2\2\u0130\u0135\7\3\2\2\u0131\u0132\7#\2\2\u0132\u0133")
        buf.write("\7\u008c\2\2\u0133\u0135\7\u0084\2\2\u0134\u00c4\3\2\2")
        buf.write("\2\u0134\u00ca\3\2\2\2\u0134\u00cd\3\2\2\2\u0134\u00d0")
        buf.write("\3\2\2\2\u0134\u00d3\3\2\2\2\u0134\u00d6\3\2\2\2\u0134")
        buf.write("\u00d9\3\2\2\2\u0134\u00dc\3\2\2\2\u0134\u00de\3\2\2\2")
        buf.write("\u0134\u00e1\3\2\2\2\u0134\u00e3\3\2\2\2\u0134\u00eb\3")
        buf.write("\2\2\2\u0134\u00f2\3\2\2\2\u0134\u00f6\3\2\2\2\u0134\u00f9")
        buf.write("\3\2\2\2\u0134\u00fc\3\2\2\2\u0134\u00ff\3\2\2\2\u0134")
        buf.write("\u0100\3\2\2\2\u0134\u0103\3\2\2\2\u0134\u0106\3\2\2\2")
        buf.write("\u0134\u010a\3\2\2\2\u0134\u010e\3\2\2\2\u0134\u0116\3")
        buf.write("\2\2\2\u0134\u0117\3\2\2\2\u0134\u011a\3\2\2\2\u0134\u011d")
        buf.write("\3\2\2\2\u0134\u0120\3\2\2\2\u0134\u0123\3\2\2\2\u0134")
        buf.write("\u0126\3\2\2\2\u0134\u0129\3\2\2\2\u0134\u0131\3\2\2\2")
        buf.write("\u0135\35\3\2\2\2\u0136\u0137\7\6\2\2\u0137\u0138\5^\60")
        buf.write("\2\u0138\u0139\5^\60\2\u0139\u013a\7\u0084\2\2\u013a\u013b")
        buf.write("\7\u0084\2\2\u013b\u0142\7\u0084\2\2\u013c\u013d\7}\2")
        buf.write("\2\u013d\u013e\5^\60\2\u013e\u013f\5^\60\2\u013f\u0141")
        buf.write("\3\2\2\2\u0140\u013c\3\2\2\2\u0141\u0144\3\2\2\2\u0142")
        buf.write("\u0140\3\2\2\2\u0142\u0143\3\2\2\2\u0143\37\3\2\2\2\u0144")
        buf.write("\u0142\3\2\2\2\u0145\u0146\7+\2\2\u0146\u0147\7\u008c")
        buf.write("\2\2\u0147\u0150\7\u0084\2\2\u0148\u0149\7,\2\2\u0149")
        buf.write("\u014a\7\u008c\2\2\u014a\u0150\7\u0084\2\2\u014b\u014c")
        buf.write("\7-\2\2\u014c\u0150\5^\60\2\u014d\u014e\7.\2\2\u014e\u0150")
        buf.write("\5^\60\2\u014f\u0145\3\2\2\2\u014f\u0148\3\2\2\2\u014f")
        buf.write("\u014b\3\2\2\2\u014f\u014d\3\2\2\2\u0150!\3\2\2\2\u0151")
        buf.write("\u0153\5$\23\2\u0152\u0151\3\2\2\2\u0153\u0156\3\2\2\2")
        buf.write("\u0154\u0152\3\2\2\2\u0154\u0155\3\2\2\2\u0155\u0166\3")
        buf.write("\2\2\2\u0156\u0154\3\2\2\2\u0157\u0158\7\r\2\2\u0158\u0159")
        buf.write("\7\u008c\2\2\u0159\u0166\7\u0082\2\2\u015a\u015b\7\61")
        buf.write("\2\2\u015b\u015c\7\u008c\2\2\u015c\u0166\7\u0082\2\2\u015d")
        buf.write("\u015e\7\25\2\2\u015e\u015f\7\u008c\2\2\u015f\u0166\7")
        buf.write("\u0082\2\2\u0160\u0166\7\33\2\2\u0161\u0162\7\35\2\2\u0162")
        buf.write("\u0163\7\u008c\2\2\u0163\u0166\7\u0084\2\2\u0164\u0166")
        buf.write("\7\62\2\2\u0165\u0154\3\2\2\2\u0165\u0157\3\2\2\2\u0165")
        buf.write("\u015a\3\2\2\2\u0165\u015d\3\2\2\2\u0165\u0160\3\2\2\2")
        buf.write("\u0165\u0161\3\2\2\2\u0165\u0164\3\2\2\2\u0166#\3\2\2")
        buf.write("\2\u0167\u0168\7\6\2\2\u0168\u0169\5^\60\2\u0169\u016a")
        buf.write("\5^\60\2\u016a\u016b\5^\60\2\u016b\u016c\5^\60\2\u016c")
        buf.write("\u016d\7\u0084\2\2\u016d\u016e\7\u0084\2\2\u016e\u016f")
        buf.write("\7\u0084\2\2\u016f\u0170\7\u0082\2\2\u0170%\3\2\2\2\u0171")
        buf.write("\u0172\7\64\2\2\u0172\u0176\5(\25\2\u0173\u0176\7%\2\2")
        buf.write("\u0174\u0176\7\62\2\2\u0175\u0171\3\2\2\2\u0175\u0173")
        buf.write("\3\2\2\2\u0175\u0174\3\2\2\2\u0176\'\3\2\2\2\u0177\u0178")
        buf.write("\7\65\2\2\u0178\u0179\7\u008c\2\2\u0179\u017e\5^\60\2")
        buf.write("\u017a\u017b\7\66\2\2\u017b\u017c\7\u008c\2\2\u017c\u017e")
        buf.write("\7\u0084\2\2\u017d\u0177\3\2\2\2\u017d\u017a\3\2\2\2\u017e")
        buf.write(")\3\2\2\2\u017f\u0180\78\2\2\u0180\u0181\7\u008c\2\2\u0181")
        buf.write("\u019d\7\u0082\2\2\u0182\u0183\79\2\2\u0183\u0184\7\u008c")
        buf.write("\2\2\u0184\u0199\7\u0089\2\2\u0185\u0187\7\u0084\2\2\u0186")
        buf.write("\u0188\7\u0080\2\2\u0187\u0186\3\2\2\2\u0187\u0188\3\2")
        buf.write("\2\2\u0188\u0189\3\2\2\2\u0189\u018b\7\u0084\2\2\u018a")
        buf.write("\u018c\7\u0080\2\2\u018b\u018a\3\2\2\2\u018b\u018c\3\2")
        buf.write("\2\2\u018c\u018d\3\2\2\2\u018d\u019a\7\u0084\2\2\u018e")
        buf.write("\u018f\7{\2\2\u018f\u0190\7\u008c\2\2\u0190\u0192\5^\60")
        buf.write("\2\u0191\u0193\7\u0080\2\2\u0192\u0191\3\2\2\2\u0192\u0193")
        buf.write("\3\2\2\2\u0193\u0197\3\2\2\2\u0194\u0195\7|\2\2\u0195")
        buf.write("\u0196\7\u008c\2\2\u0196\u0198\5^\60\2\u0197\u0194\3\2")
        buf.write("\2\2\u0197\u0198\3\2\2\2\u0198\u019a\3\2\2\2\u0199\u0185")
        buf.write("\3\2\2\2\u0199\u018e\3\2\2\2\u019a\u019b\3\2\2\2\u019b")
        buf.write("\u019d\7\u008a\2\2\u019c\u017f\3\2\2\2\u019c\u0182\3\2")
        buf.write("\2\2\u019d+\3\2\2\2\u019e\u01a0\5.\30\2\u019f\u019e\3")
        buf.write("\2\2\2\u01a0\u01a3\3\2\2\2\u01a1\u019f\3\2\2\2\u01a1\u01a2")
        buf.write("\3\2\2\2\u01a2\u01b9\3\2\2\2\u01a3\u01a1\3\2\2\2\u01a4")
        buf.write("\u01a5\7\13\2\2\u01a5\u01a6\7\u008c\2\2\u01a6\u01b9\7")
        buf.write("\u0086\2\2\u01a7\u01a8\7;\2\2\u01a8\u01a9\7\u0084\2\2")
        buf.write("\u01a9\u01aa\7\u0084\2\2\u01aa\u01b9\7\u0084\2\2\u01ab")
        buf.write("\u01ac\7<\2\2\u01ac\u01ad\7\u008c\2\2\u01ad\u01b9\7\u0084")
        buf.write("\2\2\u01ae\u01af\7\23\2\2\u01af\u01b0\7\u008c\2\2\u01b0")
        buf.write("\u01b9\7\u0082\2\2\u01b1\u01b2\7\26\2\2\u01b2\u01b3\7")
        buf.write("\u008c\2\2\u01b3\u01b9\7=\2\2\u01b4\u01b5\7\30\2\2\u01b5")
        buf.write("\u01b6\7\32\2\2\u01b6\u01b9\7\u0084\2\2\u01b7\u01b9\7")
        buf.write("\33\2\2\u01b8\u01a1\3\2\2\2\u01b8\u01a4\3\2\2\2\u01b8")
        buf.write("\u01a7\3\2\2\2\u01b8\u01ab\3\2\2\2\u01b8\u01ae\3\2\2\2")
        buf.write("\u01b8\u01b1\3\2\2\2\u01b8\u01b4\3\2\2\2\u01b8\u01b7\3")
        buf.write("\2\2\2\u01b9-\3\2\2\2\u01ba\u01bb\7\6\2\2\u01bb\u01bc")
        buf.write("\5^\60\2\u01bc\u01bd\5^\60\2\u01bd\u01be\5^\60\2\u01be")
        buf.write("\u01bf\5^\60\2\u01bf\u01c0\5^\60\2\u01c0\u01c1\5^\60\2")
        buf.write("\u01c1\u01c2\7\u0084\2\2\u01c2\u01c4\7\u0084\2\2\u01c3")
        buf.write("\u01c5\7\u0084\2\2\u01c4\u01c3\3\2\2\2\u01c4\u01c5\3\2")
        buf.write("\2\2\u01c5/\3\2\2\2\u01c6\u01c8\5\62\32\2\u01c7\u01c6")
        buf.write("\3\2\2\2\u01c8\u01cb\3\2\2\2\u01c9\u01c7\3\2\2\2\u01c9")
        buf.write("\u01ca\3\2\2\2\u01ca\u01f0\3\2\2\2\u01cb\u01c9\3\2\2\2")
        buf.write("\u01cc\u01cd\7\13\2\2\u01cd\u01ce\7\u008c\2\2\u01ce\u01f0")
        buf.write("\7\u0086\2\2\u01cf\u01d0\7;\2\2\u01d0\u01d1\7\u0084\2")
        buf.write("\2\u01d1\u01d2\7\u0084\2\2\u01d2\u01d3\7\u0084\2\2\u01d3")
        buf.write("\u01f0\7\u0084\2\2\u01d4\u01d5\7\r\2\2\u01d5\u01d6\7\u008c")
        buf.write("\2\2\u01d6\u01f0\7\u0082\2\2\u01d7\u01d8\7<\2\2\u01d8")
        buf.write("\u01da\7\u0084\2\2\u01d9\u01db\7\u0084\2\2\u01da\u01d9")
        buf.write("\3\2\2\2\u01da\u01db\3\2\2\2\u01db\u01f0\3\2\2\2\u01dc")
        buf.write("\u01dd\7\23\2\2\u01dd\u01de\7\u008c\2\2\u01de\u01f0\7")
        buf.write("\u0082\2\2\u01df\u01e0\7\25\2\2\u01e0\u01e1\7\u008c\2")
        buf.write("\2\u01e1\u01f0\7\u0082\2\2\u01e2\u01e3\7\26\2\2\u01e3")
        buf.write("\u01e4\7\u008c\2\2\u01e4\u01f0\7?\2\2\u01e5\u01e6\7\30")
        buf.write("\2\2\u01e6\u01e7\7\32\2\2\u01e7\u01ec\7\u0084\2\2\u01e8")
        buf.write("\u01ed\7Z\2\2\u01e9\u01ea\7\13\2\2\u01ea\u01eb\7\u008c")
        buf.write("\2\2\u01eb\u01ed\7\u0086\2\2\u01ec\u01e8\3\2\2\2\u01ec")
        buf.write("\u01e9\3\2\2\2\u01ed\u01f0\3\2\2\2\u01ee\u01f0\7\33\2")
        buf.write("\2\u01ef\u01c9\3\2\2\2\u01ef\u01cc\3\2\2\2\u01ef\u01cf")
        buf.write("\3\2\2\2\u01ef\u01d4\3\2\2\2\u01ef\u01d7\3\2\2\2\u01ef")
        buf.write("\u01dc\3\2\2\2\u01ef\u01df\3\2\2\2\u01ef\u01e2\3\2\2\2")
        buf.write("\u01ef\u01e5\3\2\2\2\u01ef\u01ee\3\2\2\2\u01f0\61\3\2")
        buf.write("\2\2\u01f1\u01f2\7\6\2\2\u01f2\u01f3\5^\60\2\u01f3\u01f4")
        buf.write("\5^\60\2\u01f4\u01f5\5^\60\2\u01f5\u01fb\5^\60\2\u01f6")
        buf.write("\u01f7\5^\60\2\u01f7\u01f8\5^\60\2\u01f8\u01f9\5^\60\2")
        buf.write("\u01f9\u01fa\5^\60\2\u01fa\u01fc\3\2\2\2\u01fb\u01f6\3")
        buf.write("\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\u01fd\3\2\2\2\u01fd\u01fe")
        buf.write("\7\u0084\2\2\u01fe\u0201\7\u0084\2\2\u01ff\u0200\7\u0084")
        buf.write("\2\2\u0200\u0202\7\u0084\2\2\u0201\u01ff\3\2\2\2\u0201")
        buf.write("\u0202\3\2\2\2\u0202\63\3\2\2\2\u0203\u0205\5\66\34\2")
        buf.write("\u0204\u0203\3\2\2\2\u0205\u0208\3\2\2\2\u0206\u0204\3")
        buf.write("\2\2\2\u0206\u0207\3\2\2\2\u0207\u022d\3\2\2\2\u0208\u0206")
        buf.write("\3\2\2\2\u0209\u020a\7\13\2\2\u020a\u020b\7\u008c\2\2")
        buf.write("\u020b\u022d\7\u0086\2\2\u020c\u020d\7A\2\2\u020d\u020e")
        buf.write("\7\u0082\2\2\u020e\u020f\7\u0082\2\2\u020f\u0210\7\u0084")
        buf.write("\2\2\u0210\u0211\7\u0084\2\2\u0211\u022d\7\u0084\2\2\u0212")
        buf.write("\u0213\7<\2\2\u0213\u0214\7\u008c\2\2\u0214\u022d\7\u0084")
        buf.write("\2\2\u0215\u0216\7\23\2\2\u0216\u0217\7\u008c\2\2\u0217")
        buf.write("\u022d\7\u0082\2\2\u0218\u0219\7B\2\2\u0219\u021a\7\u008c")
        buf.write("\2\2\u021a\u022d\7\u0084\2\2\u021b\u021c\7C\2\2\u021c")
        buf.write("\u021d\7\u008c\2\2\u021d\u022d\7\u0084\2\2\u021e\u021f")
        buf.write("\7\26\2\2\u021f\u0220\7\u008c\2\2\u0220\u022d\7=\2\2\u0221")
        buf.write("\u0222\7\30\2\2\u0222\u0223\7\32\2\2\u0223\u022d\7\u0084")
        buf.write("\2\2\u0224\u0226\58\35\2\u0225\u0224\3\2\2\2\u0226\u0229")
        buf.write("\3\2\2\2\u0227\u0225\3\2\2\2\u0227\u0228\3\2\2\2\u0228")
        buf.write("\u022d\3\2\2\2\u0229\u0227\3\2\2\2\u022a\u022d\7\33\2")
        buf.write("\2\u022b\u022d\7E\2\2\u022c\u0206\3\2\2\2\u022c\u0209")
        buf.write("\3\2\2\2\u022c\u020c\3\2\2\2\u022c\u0212\3\2\2\2\u022c")
        buf.write("\u0215\3\2\2\2\u022c\u0218\3\2\2\2\u022c\u021b\3\2\2\2")
        buf.write("\u022c\u021e\3\2\2\2\u022c\u0221\3\2\2\2\u022c\u0227\3")
        buf.write("\2\2\2\u022c\u022a\3\2\2\2\u022c\u022b\3\2\2\2\u022d\65")
        buf.write("\3\2\2\2\u022e\u022f\7\6\2\2\u022f\u0230\5^\60\2\u0230")
        buf.write("\u0231\5^\60\2\u0231\u0232\5^\60\2\u0232\u0233\5^\60\2")
        buf.write("\u0233\u0234\5^\60\2\u0234\u0235\7\u0084\2\2\u0235\u0236")
        buf.write("\7\u0084\2\2\u0236\67\3\2\2\2\u0237\u0238\7D\2\2\u0238")
        buf.write("\u0239\5^\60\2\u0239\u023a\7\u0084\2\2\u023a\u023b\7\u0084")
        buf.write("\2\2\u023b9\3\2\2\2\u023c\u023e\5<\37\2\u023d\u023c\3")
        buf.write("\2\2\2\u023e\u0241\3\2\2\2\u023f\u023d\3\2\2\2\u023f\u0240")
        buf.write("\3\2\2\2\u0240\u028d\3\2\2\2\u0241\u023f\3\2\2\2\u0242")
        buf.write("\u0244\5> \2\u0243\u0242\3\2\2\2\u0244\u0247\3\2\2\2\u0245")
        buf.write("\u0243\3\2\2\2\u0245\u0246\3\2\2\2\u0246\u028d\3\2\2\2")
        buf.write("\u0247\u0245\3\2\2\2\u0248\u024a\5@!\2\u0249\u0248\3\2")
        buf.write("\2\2\u024a\u024d\3\2\2\2\u024b\u0249\3\2\2\2\u024b\u024c")
        buf.write("\3\2\2\2\u024c\u028d\3\2\2\2\u024d\u024b\3\2\2\2\u024e")
        buf.write("\u0250\5B\"\2\u024f\u024e\3\2\2\2\u0250\u0253\3\2\2\2")
        buf.write("\u0251\u024f\3\2\2\2\u0251\u0252\3\2\2\2\u0252\u028d\3")
        buf.write("\2\2\2\u0253\u0251\3\2\2\2\u0254\u0256\5D#\2\u0255\u0254")
        buf.write("\3\2\2\2\u0256\u0259\3\2\2\2\u0257\u0255\3\2\2\2\u0257")
        buf.write("\u0258\3\2\2\2\u0258\u028d\3\2\2\2\u0259\u0257\3\2\2\2")
        buf.write("\u025a\u025c\5F$\2\u025b\u025a\3\2\2\2\u025c\u025f\3\2")
        buf.write("\2\2\u025d\u025b\3\2\2\2\u025d\u025e\3\2\2\2\u025e\u028d")
        buf.write("\3\2\2\2\u025f\u025d\3\2\2\2\u0260\u0262\5H%\2\u0261\u0260")
        buf.write("\3\2\2\2\u0262\u0265\3\2\2\2\u0263\u0261\3\2\2\2\u0263")
        buf.write("\u0264\3\2\2\2\u0264\u028d\3\2\2\2\u0265\u0263\3\2\2\2")
        buf.write("\u0266\u0268\5J&\2\u0267\u0266\3\2\2\2\u0268\u026b\3\2")
        buf.write("\2\2\u0269\u0267\3\2\2\2\u0269\u026a\3\2\2\2\u026a\u028d")
        buf.write("\3\2\2\2\u026b\u0269\3\2\2\2\u026c\u026e\5L\'\2\u026d")
        buf.write("\u026c\3\2\2\2\u026e\u0271\3\2\2\2\u026f\u026d\3\2\2\2")
        buf.write("\u026f\u0270\3\2\2\2\u0270\u028d\3\2\2\2\u0271\u026f\3")
        buf.write("\2\2\2\u0272\u0273\7\13\2\2\u0273\u0274\7\u008c\2\2\u0274")
        buf.write("\u028d\7\u0086\2\2\u0275\u0277\7O\2\2\u0276\u0278\7\u008c")
        buf.write("\2\2\u0277\u0276\3\2\2\2\u0277\u0278\3\2\2\2\u0278\u0279")
        buf.write("\3\2\2\2\u0279\u028d\7\u0084\2\2\u027a\u027b\7<\2\2\u027b")
        buf.write("\u027d\7\u0084\2\2\u027c\u027e\7\u0084\2\2\u027d\u027c")
        buf.write("\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u028d\3\2\2\2\u027f")
        buf.write("\u0280\7\26\2\2\u0280\u028d\7?\2\2\u0281\u0282\7\30\2")
        buf.write("\2\u0282\u0283\7\32\2\2\u0283\u0288\7\u0084\2\2\u0284")
        buf.write("\u0289\7Z\2\2\u0285\u0286\7\13\2\2\u0286\u0287\7\u008c")
        buf.write("\2\2\u0287\u0289\7\u0086\2\2\u0288\u0284\3\2\2\2\u0288")
        buf.write("\u0285\3\2\2\2\u0289\u028a\3\2\2\2\u028a\u028d\7\u0086")
        buf.write("\2\2\u028b\u028d\7\33\2\2\u028c\u023f\3\2\2\2\u028c\u0245")
        buf.write("\3\2\2\2\u028c\u024b\3\2\2\2\u028c\u0251\3\2\2\2\u028c")
        buf.write("\u0257\3\2\2\2\u028c\u025d\3\2\2\2\u028c\u0263\3\2\2\2")
        buf.write("\u028c\u0269\3\2\2\2\u028c\u026f\3\2\2\2\u028c\u0272\3")
        buf.write("\2\2\2\u028c\u0275\3\2\2\2\u028c\u027a\3\2\2\2\u028c\u027f")
        buf.write("\3\2\2\2\u028c\u0281\3\2\2\2\u028c\u028b\3\2\2\2\u028d")
        buf.write(";\3\2\2\2\u028e\u028f\7G\2\2\u028f\u0291\5^\60\2\u0290")
        buf.write("\u0292\5^\60\2\u0291\u0290\3\2\2\2\u0291\u0292\3\2\2\2")
        buf.write("\u0292\u0293\3\2\2\2\u0293\u0295\7\u0084\2\2\u0294\u0296")
        buf.write("\7\u0084\2\2\u0295\u0294\3\2\2\2\u0295\u0296\3\2\2\2\u0296")
        buf.write("=\3\2\2\2\u0297\u0298\7D\2\2\u0298\u0299\5^\60\2\u0299")
        buf.write("\u029a\7\u0084\2\2\u029a?\3\2\2\2\u029b\u029c\7H\2\2\u029c")
        buf.write("\u029d\5^\60\2\u029d\u029e\5^\60\2\u029e\u029f\5^\60\2")
        buf.write("\u029f\u02a1\7\u0086\2\2\u02a0\u02a2\7\u0083\2\2\u02a1")
        buf.write("\u02a0\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a3\3\2\2\2")
        buf.write("\u02a3\u02a4\7\u0086\2\2\u02a4A\3\2\2\2\u02a5\u02a6\7")
        buf.write("I\2\2\u02a6\u02a7\5^\60\2\u02a7C\3\2\2\2\u02a8\u02a9\7")
        buf.write("J\2\2\u02a9\u02aa\5^\60\2\u02aaE\3\2\2\2\u02ab\u02ac\7")
        buf.write("K\2\2\u02ac\u02ad\5^\60\2\u02adG\3\2\2\2\u02ae\u02af\7")
        buf.write("L\2\2\u02af\u02b0\5^\60\2\u02b0I\3\2\2\2\u02b1\u02b2\7")
        buf.write("M\2\2\u02b2\u02b3\7\u0086\2\2\u02b3\u02b4\5^\60\2\u02b4")
        buf.write("\u02b5\5^\60\2\u02b5\u02b6\5^\60\2\u02b6\u02b7\5^\60\2")
        buf.write("\u02b7\u02b9\5^\60\2\u02b8\u02ba\5^\60\2\u02b9\u02b8\3")
        buf.write("\2\2\2\u02b9\u02ba\3\2\2\2\u02baK\3\2\2\2\u02bb\u02bc")
        buf.write("\7N\2\2\u02bc\u02bd\5^\60\2\u02bdM\3\2\2\2\u02be\u02c0")
        buf.write("\5P)\2\u02bf\u02be\3\2\2\2\u02c0\u02c3\3\2\2\2\u02c1\u02bf")
        buf.write("\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2\u030b\3\2\2\2\u02c3")
        buf.write("\u02c1\3\2\2\2\u02c4\u02c5\7\13\2\2\u02c5\u02c6\7\u008c")
        buf.write("\2\2\u02c6\u030b\7\u0086\2\2\u02c7\u030b\7Q\2\2\u02c8")
        buf.write("\u02c9\7A\2\2\u02c9\u02cb\7\u0082\2\2\u02ca\u02cc\7\u0082")
        buf.write("\2\2\u02cb\u02ca\3\2\2\2\u02cb\u02cc\3\2\2\2\u02cc\u02ce")
        buf.write("\3\2\2\2\u02cd\u02cf\7\u0082\2\2\u02ce\u02cd\3\2\2\2\u02ce")
        buf.write("\u02cf\3\2\2\2\u02cf\u02d1\3\2\2\2\u02d0\u02d2\7\u0082")
        buf.write("\2\2\u02d1\u02d0\3\2\2\2\u02d1\u02d2\3\2\2\2\u02d2\u02d3")
        buf.write("\3\2\2\2\u02d3\u030b\7\u0084\2\2\u02d4\u02d5\7O\2\2\u02d5")
        buf.write("\u02d6\7\u008c\2\2\u02d6\u030b\7\u0084\2\2\u02d7\u02d8")
        buf.write("\7<\2\2\u02d8\u02d9\7\u008c\2\2\u02d9\u030b\7\u0084\2")
        buf.write("\2\u02da\u02db\7\23\2\2\u02db\u02dc\7\u008c\2\2\u02dc")
        buf.write("\u030b\7\u0082\2\2\u02dd\u02de\7R\2\2\u02de\u02df\7\u0082")
        buf.write("\2\2\u02df\u02e0\7\u0082\2\2\u02e0\u02e4\7\u0082\2\2\u02e1")
        buf.write("\u02e2\7\u0082\2\2\u02e2\u02e3\7\u0082\2\2\u02e3\u02e5")
        buf.write("\7\u0082\2\2\u02e4\u02e1\3\2\2\2\u02e4\u02e5\3\2\2\2\u02e5")
        buf.write("\u02e9\3\2\2\2\u02e6\u02e7\7\u0082\2\2\u02e7\u02e8\7\u0082")
        buf.write("\2\2\u02e8\u02ea\7\u0082\2\2\u02e9\u02e6\3\2\2\2\u02e9")
        buf.write("\u02ea\3\2\2\2\u02ea\u02ee\3\2\2\2\u02eb\u02ec\7\u0082")
        buf.write("\2\2\u02ec\u02ed\7\u0082\2\2\u02ed\u02ef\7\u0082\2\2\u02ee")
        buf.write("\u02eb\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u030b\3\2\2\2")
        buf.write("\u02f0\u02f1\7\26\2\2\u02f1\u02f2\7\u008c\2\2\u02f2\u030b")
        buf.write("\7=\2\2\u02f3\u02f4\7\30\2\2\u02f4\u02f5\7\32\2\2\u02f5")
        buf.write("\u02fa\7\u0084\2\2\u02f6\u02fb\7Z\2\2\u02f7\u02f8\7\13")
        buf.write("\2\2\u02f8\u02f9\7\u008c\2\2\u02f9\u02fb\7\u0086\2\2\u02fa")
        buf.write("\u02f6\3\2\2\2\u02fa\u02f7\3\2\2\2\u02fb\u030b\3\2\2\2")
        buf.write("\u02fc\u030b\7\33\2\2\u02fd\u02fe\7S\2\2\u02fe\u02ff\7")
        buf.write("T\2\2\u02ff\u0301\7\u0082\2\2\u0300\u0302\7\u0082\2\2")
        buf.write("\u0301\u0300\3\2\2\2\u0301\u0302\3\2\2\2\u0302\u0304\3")
        buf.write("\2\2\2\u0303\u0305\7\u0082\2\2\u0304\u0303\3\2\2\2\u0304")
        buf.write("\u0305\3\2\2\2\u0305\u0307\3\2\2\2\u0306\u0308\7\u0082")
        buf.write("\2\2\u0307\u0306\3\2\2\2\u0307\u0308\3\2\2\2\u0308\u030b")
        buf.write("\3\2\2\2\u0309\u030b\7E\2\2\u030a\u02c1\3\2\2\2\u030a")
        buf.write("\u02c4\3\2\2\2\u030a\u02c7\3\2\2\2\u030a\u02c8\3\2\2\2")
        buf.write("\u030a\u02d4\3\2\2\2\u030a\u02d7\3\2\2\2\u030a\u02da\3")
        buf.write("\2\2\2\u030a\u02dd\3\2\2\2\u030a\u02f0\3\2\2\2\u030a\u02f3")
        buf.write("\3\2\2\2\u030a\u02fc\3\2\2\2\u030a\u02fd\3\2\2\2\u030a")
        buf.write("\u0309\3\2\2\2\u030bO\3\2\2\2\u030c\u030d\7\6\2\2\u030d")
        buf.write("\u030e\5^\60\2\u030e\u030f\5^\60\2\u030f\u0310\5^\60\2")
        buf.write("\u0310\u0316\5^\60\2\u0311\u0312\5^\60\2\u0312\u0313\5")
        buf.write("^\60\2\u0313\u0314\5^\60\2\u0314\u0315\5^\60\2\u0315\u0317")
        buf.write("\3\2\2\2\u0316\u0311\3\2\2\2\u0316\u0317\3\2\2\2\u0317")
        buf.write("\u031d\3\2\2\2\u0318\u0319\5^\60\2\u0319\u031a\5^\60\2")
        buf.write("\u031a\u031b\5^\60\2\u031b\u031c\5^\60\2\u031c\u031e\3")
        buf.write("\2\2\2\u031d\u0318\3\2\2\2\u031d\u031e\3\2\2\2\u031e\u0324")
        buf.write("\3\2\2\2\u031f\u0320\5^\60\2\u0320\u0321\5^\60\2\u0321")
        buf.write("\u0322\5^\60\2\u0322\u0323\5^\60\2\u0323\u0325\3\2\2\2")
        buf.write("\u0324\u031f\3\2\2\2\u0324\u0325\3\2\2\2\u0325Q\3\2\2")
        buf.write("\2\u0326\u0328\5T+\2\u0327\u0326\3\2\2\2\u0328\u032b\3")
        buf.write("\2\2\2\u0329\u0327\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u0343")
        buf.write("\3\2\2\2\u032b\u0329\3\2\2\2\u032c\u032d\7\13\2\2\u032d")
        buf.write("\u032e\7\u008c\2\2\u032e\u0343\7\u0086\2\2\u032f\u0330")
        buf.write("\7;\2\2\u0330\u0331\7\u0084\2\2\u0331\u0332\7\u0084\2")
        buf.write("\2\u0332\u0333\7\u0084\2\2\u0333\u0334\7\u0084\2\2\u0334")
        buf.write("\u0343\7\u0084\2\2\u0335\u0336\7<\2\2\u0336\u0337\7\u008c")
        buf.write("\2\2\u0337\u0343\7\u0084\2\2\u0338\u0339\7\23\2\2\u0339")
        buf.write("\u033a\7\u008c\2\2\u033a\u0343\7\u0082\2\2\u033b\u033c")
        buf.write("\7\26\2\2\u033c\u033d\7\u008c\2\2\u033d\u0343\7=\2\2\u033e")
        buf.write("\u033f\7\30\2\2\u033f\u0340\7\32\2\2\u0340\u0343\7\u0084")
        buf.write("\2\2\u0341\u0343\7\33\2\2\u0342\u0329\3\2\2\2\u0342\u032c")
        buf.write("\3\2\2\2\u0342\u032f\3\2\2\2\u0342\u0335\3\2\2\2\u0342")
        buf.write("\u0338\3\2\2\2\u0342\u033b\3\2\2\2\u0342\u033e\3\2\2\2")
        buf.write("\u0342\u0341\3\2\2\2\u0343S\3\2\2\2\u0344\u0345\7\6\2")
        buf.write("\2\u0345\u0346\5^\60\2\u0346\u0347\5^\60\2\u0347\u0348")
        buf.write("\5^\60\2\u0348\u0349\5^\60\2\u0349\u034a\5^\60\2\u034a")
        buf.write("\u034b\5^\60\2\u034b\u034c\7\u0084\2\2\u034c\u034d\7\u0084")
        buf.write("\2\2\u034dU\3\2\2\2\u034e\u0350\5X-\2\u034f\u034e\3\2")
        buf.write("\2\2\u0350\u0353\3\2\2\2\u0351\u034f\3\2\2\2\u0351\u0352")
        buf.write("\3\2\2\2\u0352\u036d\3\2\2\2\u0353\u0351\3\2\2\2\u0354")
        buf.write("\u0355\7\13\2\2\u0355\u0356\7\u008c\2\2\u0356\u036d\7")
        buf.write("\u0086\2\2\u0357\u0358\7;\2\2\u0358\u0359\7\u0084\2\2")
        buf.write("\u0359\u035a\7\u0084\2\2\u035a\u035b\7\u0084\2\2\u035b")
        buf.write("\u035c\7\u0084\2\2\u035c\u035d\7\u0084\2\2\u035d\u035e")
        buf.write("\7\u0084\2\2\u035e\u036d\7\u0084\2\2\u035f\u0360\7<\2")
        buf.write("\2\u0360\u0361\7\u008c\2\2\u0361\u036d\7\u0084\2\2\u0362")
        buf.write("\u0363\7\23\2\2\u0363\u0364\7\u008c\2\2\u0364\u036d\7")
        buf.write("\u0082\2\2\u0365\u0366\7\26\2\2\u0366\u0367\7\u008c\2")
        buf.write("\2\u0367\u036d\7=\2\2\u0368\u0369\7\30\2\2\u0369\u036a")
        buf.write("\7\32\2\2\u036a\u036d\7\u0084\2\2\u036b\u036d\7\33\2\2")
        buf.write("\u036c\u0351\3\2\2\2\u036c\u0354\3\2\2\2\u036c\u0357\3")
        buf.write("\2\2\2\u036c\u035f\3\2\2\2\u036c\u0362\3\2\2\2\u036c\u0365")
        buf.write("\3\2\2\2\u036c\u0368\3\2\2\2\u036c\u036b\3\2\2\2\u036d")
        buf.write("W\3\2\2\2\u036e\u036f\7\6\2\2\u036f\u0370\5^\60\2\u0370")
        buf.write("\u0371\5^\60\2\u0371\u0372\5^\60\2\u0372\u0373\5^\60\2")
        buf.write("\u0373\u0374\5^\60\2\u0374\u0375\5^\60\2\u0375\u0376\5")
        buf.write("^\60\2\u0376\u0377\5^\60\2\u0377\u0378\7\u0084\2\2\u0378")
        buf.write("\u0379\7\u0084\2\2\u0379Y\3\2\2\2\u037a\u037c\5\\/\2\u037b")
        buf.write("\u037a\3\2\2\2\u037c\u037f\3\2\2\2\u037d\u037b\3\2\2\2")
        buf.write("\u037d\u037e\3\2\2\2\u037e\u03a6\3\2\2\2\u037f\u037d\3")
        buf.write("\2\2\2\u0380\u0381\7\13\2\2\u0381\u0382\7\u008c\2\2\u0382")
        buf.write("\u03a6\7\u0086\2\2\u0383\u0384\7X\2\2\u0384\u0385\7\u008c")
        buf.write("\2\2\u0385\u03a6\7\u0086\2\2\u0386\u0387\7A\2\2\u0387")
        buf.write("\u0388\7\u0082\2\2\u0388\u0389\7\u0082\2\2\u0389\u03a6")
        buf.write("\7\u0084\2\2\u038a\u038b\7O\2\2\u038b\u038c\7\u008c\2")
        buf.write("\2\u038c\u03a6\7\u0084\2\2\u038d\u038e\7<\2\2\u038e\u038f")
        buf.write("\7\u008c\2\2\u038f\u03a6\7\u0084\2\2\u0390\u0391\7\23")
        buf.write("\2\2\u0391\u0392\7\u008c\2\2\u0392\u03a6\7\u0082\2\2\u0393")
        buf.write("\u0394\7\26\2\2\u0394\u0395\7\u008c\2\2\u0395\u03a6\7")
        buf.write("=\2\2\u0396\u0397\7\30\2\2\u0397\u0398\7\32\2\2\u0398")
        buf.write("\u039d\7\u0084\2\2\u0399\u039e\7Z\2\2\u039a\u039b\7\13")
        buf.write("\2\2\u039b\u039c\7\u008c\2\2\u039c\u039e\7\u0086\2\2\u039d")
        buf.write("\u0399\3\2\2\2\u039d\u039a\3\2\2\2\u039e\u03a6\3\2\2\2")
        buf.write("\u039f\u03a6\7\33\2\2\u03a0\u03a1\7S\2\2\u03a1\u03a2\7")
        buf.write("Y\2\2\u03a2\u03a3\7\u0082\2\2\u03a3\u03a6\7\u0082\2\2")
        buf.write("\u03a4\u03a6\7E\2\2\u03a5\u037d\3\2\2\2\u03a5\u0380\3")
        buf.write("\2\2\2\u03a5\u0383\3\2\2\2\u03a5\u0386\3\2\2\2\u03a5\u038a")
        buf.write("\3\2\2\2\u03a5\u038d\3\2\2\2\u03a5\u0390\3\2\2\2\u03a5")
        buf.write("\u0393\3\2\2\2\u03a5\u0396\3\2\2\2\u03a5\u039f\3\2\2\2")
        buf.write("\u03a5\u03a0\3\2\2\2\u03a5\u03a4\3\2\2\2\u03a6[\3\2\2")
        buf.write("\2\u03a7\u03a8\7\6\2\2\u03a8\u03a9\5^\60\2\u03a9\u03aa")
        buf.write("\5^\60\2\u03aa\u03ab\5^\60\2\u03ab\u03ac\5^\60\2\u03ac")
        buf.write("\u03ad\5^\60\2\u03ad\u03ae\5^\60\2\u03ae\u03af\5^\60\2")
        buf.write("\u03af\u03b0\5^\60\2\u03b0\u03b1\5^\60\2\u03b1\u03b2\5")
        buf.write("^\60\2\u03b2\u03b4\5^\60\2\u03b3\u03b5\5^\60\2\u03b4\u03b3")
        buf.write("\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5]\3\2\2\2\u03b6\u03b7")
        buf.write("\7\u0089\2\2\u03b7\u03b8\5`\61\2\u03b8\u03b9\7\u008a\2")
        buf.write("\2\u03b9_\3\2\2\2\u03ba\u03bf\5b\62\2\u03bb\u03bc\7}\2")
        buf.write("\2\u03bc\u03be\5b\62\2\u03bd\u03bb\3\2\2\2\u03be\u03c1")
        buf.write("\3\2\2\2\u03bf\u03bd\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0")
        buf.write("a\3\2\2\2\u03c1\u03bf\3\2\2\2\u03c2\u03c7\5d\63\2\u03c3")
        buf.write("\u03c4\7~\2\2\u03c4\u03c6\5d\63\2\u03c5\u03c3\3\2\2\2")
        buf.write("\u03c6\u03c9\3\2\2\2\u03c7\u03c5\3\2\2\2\u03c7\u03c8\3")
        buf.write("\2\2\2\u03c8c\3\2\2\2\u03c9\u03c7\3\2\2\2\u03ca\u03cb")
        buf.write("\b\63\1\2\u03cb\u03cc\7\u0089\2\2\u03cc\u03cd\5`\61\2")
        buf.write("\u03cd\u03ce\7\u008a\2\2\u03ce\u0454\3\2\2\2\u03cf\u0454")
        buf.write("\7Z\2\2\u03d0\u03d1\7\\\2\2\u03d1\u03d2\t\2\2\2\u03d2")
        buf.write("\u03d3\t\3\2\2\u03d3\u0454\t\2\2\2\u03d4\u03d6\7]\2\2")
        buf.write("\u03d5\u03d7\7\u0095\2\2\u03d6\u03d5\3\2\2\2\u03d6\u03d7")
        buf.write("\3\2\2\2\u03d7\u03d8\3\2\2\2\u03d8\u03d9\7\u0096\2\2\u03d9")
        buf.write("\u03da\7\u0097\2\2\u03da\u0454\7\u0084\2\2\u03db\u03dc")
        buf.write("\7^\2\2\u03dc\u0454\5d\63 \u03dd\u03de\7_\2\2\u03de\u0454")
        buf.write("\5d\63\37\u03df\u03e0\7`\2\2\u03e0\u0454\5d\63\36\u03e1")
        buf.write("\u03e8\7a\2\2\u03e2\u03e9\7\u0087\2\2\u03e3\u03e6\7\u0086")
        buf.write("\2\2\u03e4\u03e5\7\u008b\2\2\u03e5\u03e7\7\u0086\2\2\u03e6")
        buf.write("\u03e4\3\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e9\3\2\2\2")
        buf.write("\u03e8\u03e2\3\2\2\2\u03e8\u03e3\3\2\2\2\u03e9\u0454\3")
        buf.write("\2\2\2\u03ea\u03eb\7b\2\2\u03eb\u03ec\7\u0084\2\2\u03ec")
        buf.write("\u03ed\7\u0084\2\2\u03ed\u03ee\7\u0084\2\2\u03ee\u03ef")
        buf.write("\7\u0084\2\2\u03ef\u03f0\7\u0084\2\2\u03f0\u0454\7\u0084")
        buf.write("\2\2\u03f1\u0454\7c\2\2\u03f2\u03f3\7d\2\2\u03f3\u0454")
        buf.write("\7\u0082\2\2\u03f4\u0454\7e\2\2\u03f5\u03fc\7f\2\2\u03f6")
        buf.write("\u03fd\7\u0087\2\2\u03f7\u03fa\7\u0086\2\2\u03f8\u03f9")
        buf.write("\7\u008b\2\2\u03f9\u03fb\7\u0086\2\2\u03fa\u03f8\3\2\2")
        buf.write("\2\u03fa\u03fb\3\2\2\2\u03fb\u03fd\3\2\2\2\u03fc\u03f6")
        buf.write("\3\2\2\2\u03fc\u03f7\3\2\2\2\u03fd\u0454\3\2\2\2\u03fe")
        buf.write("\u0454\7g\2\2\u03ff\u0400\7\177\2\2\u0400\u0454\5d\63")
        buf.write("\26\u0401\u0402\7h\2\2\u0402\u0403\7\u0089\2\2\u0403\u0405")
        buf.write("\7\u0084\2\2\u0404\u0406\7\u0080\2\2\u0405\u0404\3\2\2")
        buf.write("\2\u0405\u0406\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u0409")
        buf.write("\7\u0084\2\2\u0408\u040a\7\u0080\2\2\u0409\u0408\3\2\2")
        buf.write("\2\u0409\u040a\3\2\2\2\u040a\u040b\3\2\2\2\u040b\u040c")
        buf.write("\7\u0084\2\2\u040c\u040d\7\u008a\2\2\u040d\u040e\7i\2")
        buf.write("\2\u040e\u0454\7\u0084\2\2\u040f\u0410\7h\2\2\u0410\u0411")
        buf.write("\7\u0089\2\2\u0411\u0412\7{\2\2\u0412\u0413\7\u008c\2")
        buf.write("\2\u0413\u0415\5^\60\2\u0414\u0416\7\u0080\2\2\u0415\u0414")
        buf.write("\3\2\2\2\u0415\u0416\3\2\2\2\u0416\u041a\3\2\2\2\u0417")
        buf.write("\u0418\7|\2\2\u0418\u0419\7\u008c\2\2\u0419\u041b\5^\60")
        buf.write("\2\u041a\u0417\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u041c")
        buf.write("\3\2\2\2\u041c\u041d\7\u008a\2\2\u041d\u041e\7i\2\2\u041e")
        buf.write("\u041f\7\u0084\2\2\u041f\u0454\3\2\2\2\u0420\u0454\7j")
        buf.write("\2\2\u0421\u0454\7k\2\2\u0422\u0429\7l\2\2\u0423\u042a")
        buf.write("\7\u0088\2\2\u0424\u0427\7\u0082\2\2\u0425\u0426\7\u008b")
        buf.write("\2\2\u0426\u0428\7\u0082\2\2\u0427\u0425\3\2\2\2\u0427")
        buf.write("\u0428\3\2\2\2\u0428\u042a\3\2\2\2\u0429\u0423\3\2\2\2")
        buf.write("\u0429\u0424\3\2\2\2\u042a\u0454\3\2\2\2\u042b\u0432\7")
        buf.write("m\2\2\u042c\u0433\7\u0087\2\2\u042d\u0430\7\u0086\2\2")
        buf.write("\u042e\u042f\7\u008b\2\2\u042f\u0431\7\u0086\2\2\u0430")
        buf.write("\u042e\3\2\2\2\u0430\u0431\3\2\2\2\u0431\u0433\3\2\2\2")
        buf.write("\u0432\u042c\3\2\2\2\u0432\u042d\3\2\2\2\u0433\u0454\3")
        buf.write("\2\2\2\u0434\u0440\7o\2\2\u0435\u0441\7\u0087\2\2\u0436")
        buf.write("\u0439\7\u0086\2\2\u0437\u0438\7\u008b\2\2\u0438\u043a")
        buf.write("\7\u0086\2\2\u0439\u0437\3\2\2\2\u0439\u043a\3\2\2\2\u043a")
        buf.write("\u0441\3\2\2\2\u043b\u043e\7\u0085\2\2\u043c\u043d\7\u008b")
        buf.write("\2\2\u043d\u043f\7\u0085\2\2\u043e\u043c\3\2\2\2\u043e")
        buf.write("\u043f\3\2\2\2\u043f\u0441\3\2\2\2\u0440\u0435\3\2\2\2")
        buf.write("\u0440\u0436\3\2\2\2\u0440\u043b\3\2\2\2\u0441\u0454\3")
        buf.write("\2\2\2\u0442\u0443\7p\2\2\u0443\u0444\7\u0084\2\2\u0444")
        buf.write("\u0445\7\u0084\2\2\u0445\u0446\7\u0084\2\2\u0446\u0447")
        buf.write("\7\u0084\2\2\u0447\u0448\7\u0084\2\2\u0448\u0454\7\u0084")
        buf.write("\2\2\u0449\u0454\7q\2\2\u044a\u0454\7r\2\2\u044b\u0454")
        buf.write("\7s\2\2\u044c\u0454\7t\2\2\u044d\u0454\7u\2\2\u044e\u0454")
        buf.write("\7v\2\2\u044f\u0454\7w\2\2\u0450\u0454\7x\2\2\u0451\u0454")
        buf.write("\7y\2\2\u0452\u0454\7z\2\2\u0453\u03ca\3\2\2\2\u0453\u03cf")
        buf.write("\3\2\2\2\u0453\u03d0\3\2\2\2\u0453\u03d4\3\2\2\2\u0453")
        buf.write("\u03db\3\2\2\2\u0453\u03dd\3\2\2\2\u0453\u03df\3\2\2\2")
        buf.write("\u0453\u03e1\3\2\2\2\u0453\u03ea\3\2\2\2\u0453\u03f1\3")
        buf.write("\2\2\2\u0453\u03f2\3\2\2\2\u0453\u03f4\3\2\2\2\u0453\u03f5")
        buf.write("\3\2\2\2\u0453\u03fe\3\2\2\2\u0453\u03ff\3\2\2\2\u0453")
        buf.write("\u0401\3\2\2\2\u0453\u040f\3\2\2\2\u0453\u0420\3\2\2\2")
        buf.write("\u0453\u0421\3\2\2\2\u0453\u0422\3\2\2\2\u0453\u042b\3")
        buf.write("\2\2\2\u0453\u0434\3\2\2\2\u0453\u0442\3\2\2\2\u0453\u0449")
        buf.write("\3\2\2\2\u0453\u044a\3\2\2\2\u0453\u044b\3\2\2\2\u0453")
        buf.write("\u044c\3\2\2\2\u0453\u044d\3\2\2\2\u0453\u044e\3\2\2\2")
        buf.write("\u0453\u044f\3\2\2\2\u0453\u0450\3\2\2\2\u0453\u0451\3")
        buf.write("\2\2\2\u0453\u0452\3\2\2\2\u0454\u045d\3\2\2\2\u0455\u0456")
        buf.write("\f#\2\2\u0456\u0457\7[\2\2\u0457\u045c\7\u0084\2\2\u0458")
        buf.write("\u0459\f\17\2\2\u0459\u045a\7n\2\2\u045a\u045c\7\u0084")
        buf.write("\2\2\u045b\u0455\3\2\2\2\u045b\u0458\3\2\2\2\u045c\u045f")
        buf.write("\3\2\2\2\u045d\u045b\3\2\2\2\u045d\u045e\3\2\2\2\u045e")
        buf.write("e\3\2\2\2\u045f\u045d\3\2\2\2brtz\u0080\u0086\u008c\u00ca")
        buf.write("\u00f2\u0112\u012d\u0134\u0142\u014f\u0154\u0165\u0175")
        buf.write("\u017d\u0187\u018b\u0192\u0197\u0199\u019c\u01a1\u01b8")
        buf.write("\u01c4\u01c9\u01da\u01ec\u01ef\u01fb\u0201\u0206\u0227")
        buf.write("\u022c\u023f\u0245\u024b\u0251\u0257\u025d\u0263\u0269")
        buf.write("\u026f\u0277\u027d\u0288\u028c\u0291\u0295\u02a1\u02b9")
        buf.write("\u02c1\u02cb\u02ce\u02d1\u02e4\u02e9\u02ee\u02fa\u0301")
        buf.write("\u0304\u0307\u030a\u0316\u031d\u0324\u0329\u0342\u0351")
        buf.write("\u036c\u037d\u039d\u03a5\u03b4\u03bf\u03c7\u03d6\u03e6")
        buf.write("\u03e8\u03fa\u03fc\u0405\u0409\u0415\u041a\u0427\u0429")
        buf.write("\u0430\u0432\u0439\u043e\u0440\u0453\u045b\u045d")
        return buf.getvalue()


class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'?'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "','", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'('", "')'", "':'", "'='", "'<'", "'>'", 
                     "'<='", "'>='", "'#'" ]

    symbolicNames = [ "<INVALID>", "End", "Noe", "Analysis", "Assign", "Asymptote", 
                      "Averaging", "Bgig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Noe_analysis", "Initialize", "Update", "Gamma", "Kappa", 
                      "Noe_avr_methods", "Noe_potential", "Cutoff", "Cuton", 
                      "From", "To", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Rdc_potential", "Coupling", "Coupling_potential", 
                      "Carbon", "Expectation", "PhiStep", "PsiStep", "Rcoil", 
                      "Zero", "Proton", "Observed", "Anisotropy", "Amides", 
                      "Carbons", "Nitrogens", "Oxygens", "RingAtoms", "AlphasAndAmides", 
                      "Error", "Conformation", "Compressed", "Phase", "Size", 
                      "Dimensions", "Danisotropy", "OneBond", "AngleDb", 
                      "DerivFlag", "Angle_dihedral", "All", "Around", "Atom", 
                      "Attribute", "BondedTo", "ByGroup", "ByRes", "Chemical", 
                      "Fbox", "Hydrogen", "Id", "Known", "Name", "NONE", 
                      "Point", "Cut", "Previous", "Pseudo", "Residue", "Resname", 
                      "Saround", "SegIdentifier", "Sfbox", "Store_1", "Store_2", 
                      "Store_3", "Store_4", "Store_5", "Store_6", "Store_7", 
                      "Store_8", "Store_9", "Tag", "Tail", "Head", "Or_op", 
                      "And_op", "Not_op", "Comma", "Complex", "Integer", 
                      "Logical", "Real", "Double_quote_string", "Simple_name", 
                      "Simple_names", "Integers", "L_paren", "R_paren", 
                      "Colon", "Equ_op", "Lt_op", "Gt_op", "Leq_op", "Geq_op", 
                      "Neq_op", "SPACE", "COMMENT", "LINE_COMMENT", "Abs", 
                      "Attr_properties", "Comparison_ops", "WS" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_dihedral_statement = 16
    RULE_dihedral_assign = 17
    RULE_plane_statement = 18
    RULE_group_statement = 19
    RULE_harmonic_statement = 20
    RULE_sani_statement = 21
    RULE_sani_assign = 22
    RULE_coupling_statement = 23
    RULE_coup_assign = 24
    RULE_carbon_shift_statement = 25
    RULE_carbon_shift_assign = 26
    RULE_carbon_shift_rcoil = 27
    RULE_proton_shift_statement = 28
    RULE_observed = 29
    RULE_proton_shift_rcoil = 30
    RULE_proton_shift_anisotropy = 31
    RULE_proton_shift_amides = 32
    RULE_proton_shift_carbons = 33
    RULE_proton_shift_nitrogens = 34
    RULE_proton_shift_oxygens = 35
    RULE_proton_shift_ring_atoms = 36
    RULE_proton_shift_alphas_and_amides = 37
    RULE_conformation_statement = 38
    RULE_conf_assign = 39
    RULE_diffusion_statement = 40
    RULE_dani_assign = 41
    RULE_one_bond_coupling_statement = 42
    RULE_one_bond_assign = 43
    RULE_angle_db_statement = 44
    RULE_angle_db_assign = 45
    RULE_selection = 46
    RULE_selection_expression = 47
    RULE_term = 48
    RULE_factor = 49

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "dihedral_statement", 
                   "dihedral_assign", "plane_statement", "group_statement", 
                   "harmonic_statement", "sani_statement", "sani_assign", 
                   "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor" ]

    EOF = Token.EOF
    End=1
    Noe=2
    Analysis=3
    Assign=4
    Asymptote=5
    Averaging=6
    Bgig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Cv=11
    Den=12
    Distribute=13
    Ensemble=14
    Monomers=15
    Ncount=16
    Nrestraints=17
    Outd=18
    Partition=19
    Potential=20
    Predict=21
    Print=22
    Raverage=23
    Threshold=24
    Reset=25
    Rswitch=26
    Scale=27
    SoExponent=28
    SqConstant=29
    SqExponent=30
    SqOffset=31
    Taverage=32
    Temperature=33
    Noe_analysis=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Noe_avr_methods=39
    Noe_potential=40
    Cutoff=41
    Cuton=42
    From=43
    To=44
    Restraints=45
    Dihedral=46
    Nassign=47
    Print_any=48
    Plane=49
    Group=50
    Selection=51
    Weight=52
    Harmonic=53
    Exponent=54
    Normal=55
    Sanisotropy=56
    Coefficients=57
    ForceConstant=58
    Rdc_potential=59
    Coupling=60
    Coupling_potential=61
    Carbon=62
    Expectation=63
    PhiStep=64
    PsiStep=65
    Rcoil=66
    Zero=67
    Proton=68
    Observed=69
    Anisotropy=70
    Amides=71
    Carbons=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Conformation=78
    Compressed=79
    Phase=80
    Size=81
    Dimensions=82
    Danisotropy=83
    OneBond=84
    AngleDb=85
    DerivFlag=86
    Angle_dihedral=87
    All=88
    Around=89
    Atom=90
    Attribute=91
    BondedTo=92
    ByGroup=93
    ByRes=94
    Chemical=95
    Fbox=96
    Hydrogen=97
    Id=98
    Known=99
    Name=100
    NONE=101
    Point=102
    Cut=103
    Previous=104
    Pseudo=105
    Residue=106
    Resname=107
    Saround=108
    SegIdentifier=109
    Sfbox=110
    Store_1=111
    Store_2=112
    Store_3=113
    Store_4=114
    Store_5=115
    Store_6=116
    Store_7=117
    Store_8=118
    Store_9=119
    Tag=120
    Tail=121
    Head=122
    Or_op=123
    And_op=124
    Not_op=125
    Comma=126
    Complex=127
    Integer=128
    Logical=129
    Real=130
    Double_quote_string=131
    Simple_name=132
    Simple_names=133
    Integers=134
    L_paren=135
    R_paren=136
    Colon=137
    Equ_op=138
    Lt_op=139
    Gt_op=140
    Leq_op=141
    Geq_op=142
    Neq_op=143
    SPACE=144
    COMMENT=145
    LINE_COMMENT=146
    Abs=147
    Attr_properties=148
    Comparison_ops=149
    WS=150

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Sanisotropy) | (1 << CnsMRParser.Coupling) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (CnsMRParser.Proton - 68)) | (1 << (CnsMRParser.Conformation - 68)) | (1 << (CnsMRParser.Danisotropy - 68)) | (1 << (CnsMRParser.OneBond - 68)) | (1 << (CnsMRParser.AngleDb - 68)))) != 0):
                self.state = 112
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 100
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 101
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 102
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 103
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 104
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 105
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 106
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 107
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 108
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 109
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 110
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 111
                    self.angle_db_restraint()
                    pass


                self.state = 116
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 120
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 117
                    self.noe_assign() 
                self.state = 122
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 126
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 123
                    self.dihedral_assign() 
                self.state = 128
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign:
                self.state = 129
                self.sani_assign()
                self.state = 134
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 138
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0):
                self.state = 135
                self.plane_statement()
                self.state = 140
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 141
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def noe_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 143
            self.match(CnsMRParser.Noe)
            self.state = 144
            self.noe_statement()
            self.state = 145
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def dihedral_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 147
            self.match(CnsMRParser.Restraints)
            self.state = 148
            self.match(CnsMRParser.Dihedral)
            self.state = 149
            self.dihedral_statement()
            self.state = 150
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def plane_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 152
            self.match(CnsMRParser.Restraints)
            self.state = 153
            self.match(CnsMRParser.Plane)
            self.state = 154
            self.plane_statement()
            self.state = 155
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def harmonic_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 157
            self.match(CnsMRParser.Restraints)
            self.state = 158
            self.match(CnsMRParser.Harmonic)
            self.state = 159
            self.harmonic_statement()
            self.state = 160
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def sani_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 162
            self.match(CnsMRParser.Sanisotropy)
            self.state = 163
            self.sani_statement()
            self.state = 164
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def coupling_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 166
            self.match(CnsMRParser.Coupling)
            self.state = 167
            self.coupling_statement()
            self.state = 168
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def carbon_shift_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 170
            self.match(CnsMRParser.Carbon)
            self.state = 171
            self.carbon_shift_statement()
            self.state = 172
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def proton_shift_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self.match(CnsMRParser.Proton)
            self.state = 175
            self.proton_shift_statement()
            self.state = 176
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def conformation_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 178
            self.match(CnsMRParser.Conformation)
            self.state = 179
            self.conformation_statement()
            self.state = 180
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def diffusion_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            self.match(CnsMRParser.Danisotropy)
            self.state = 183
            self.diffusion_statement()
            self.state = 184
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def one_bond_coupling_statement(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.match(CnsMRParser.OneBond)
            self.state = 187
            self.one_bond_coupling_statement()
            self.state = 188
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def angle_db_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,0)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 190
            self.match(CnsMRParser.AngleDb)
            self.state = 191
            self.angle_db_statement()
            self.state = 192
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_names(self):
            return self.getToken(CnsMRParser.Simple_names, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def Averaging(self):
            return self.getToken(CnsMRParser.Averaging, 0)

        def Noe_avr_methods(self):
            return self.getToken(CnsMRParser.Noe_avr_methods, 0)

        def Bgig(self):
            return self.getToken(CnsMRParser.Bgig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Noe_potential(self):
            return self.getToken(CnsMRParser.Noe_potential, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 306
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 194
                self.match(CnsMRParser.Analysis)
                self.state = 195
                self.match(CnsMRParser.Equ_op)
                self.state = 196
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 200
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 197
                    self.noe_assign()
                    self.state = 202
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 203
                self.match(CnsMRParser.Asymptote)
                self.state = 204
                self.match(CnsMRParser.Simple_names)
                self.state = 205
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 206
                self.match(CnsMRParser.Averaging)
                self.state = 207
                self.match(CnsMRParser.Simple_names)
                self.state = 208
                self.match(CnsMRParser.Noe_avr_methods)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 209
                self.match(CnsMRParser.Bgig)
                self.state = 210
                self.match(CnsMRParser.Simple_names)
                self.state = 211
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 212
                self.match(CnsMRParser.Ceiling)
                self.state = 213
                self.match(CnsMRParser.Equ_op)
                self.state = 214
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 215
                self.match(CnsMRParser.Classification)
                self.state = 216
                self.match(CnsMRParser.Equ_op)
                self.state = 217
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 218
                self.match(CnsMRParser.CountViol)
                self.state = 219
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 220
                self.match(CnsMRParser.Cv)
                self.state = 221
                self.match(CnsMRParser.Equ_op)
                self.state = 222
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 223
                self.match(CnsMRParser.Den)
                self.state = 224
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 225
                self.match(CnsMRParser.Den)
                self.state = 226
                self.match(CnsMRParser.Update)
                self.state = 227
                self.match(CnsMRParser.Gamma)
                self.state = 228
                self.match(CnsMRParser.Equ_op)
                self.state = 229
                self.match(CnsMRParser.Real)
                self.state = 230
                self.match(CnsMRParser.Kappa)
                self.state = 231
                self.match(CnsMRParser.Equ_op)
                self.state = 232
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 233
                self.match(CnsMRParser.Distribute)
                self.state = 234
                self.match(CnsMRParser.Simple_name)
                self.state = 235
                self.match(CnsMRParser.Simple_name)
                self.state = 236
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 240
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,7,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 237
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 242
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,7,self._ctx)

                self.state = 243
                self.match(CnsMRParser.End)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 244
                self.match(CnsMRParser.Monomers)
                self.state = 245
                self.match(CnsMRParser.Simple_names)
                self.state = 246
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 247
                self.match(CnsMRParser.Ncount)
                self.state = 248
                self.match(CnsMRParser.Simple_names)
                self.state = 249
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 250
                self.match(CnsMRParser.Nrestraints)
                self.state = 251
                self.match(CnsMRParser.Equ_op)
                self.state = 252
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 253
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 254
                self.match(CnsMRParser.Partition)
                self.state = 255
                self.match(CnsMRParser.Equ_op)
                self.state = 256
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 257
                self.match(CnsMRParser.Potential)
                self.state = 258
                self.match(CnsMRParser.Simple_names)
                self.state = 259
                self.match(CnsMRParser.Noe_potential)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 260
                self.match(CnsMRParser.Predict)
                self.state = 261
                self.predict_statement()
                self.state = 262
                self.match(CnsMRParser.End)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 264
                self.match(CnsMRParser.Print)
                self.state = 265
                self.match(CnsMRParser.Threshold)
                self.state = 266
                self.match(CnsMRParser.Equ_op)
                self.state = 267
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 268
                self.match(CnsMRParser.Raverage)
                self.state = 272
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 269
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 274
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

                self.state = 275
                self.match(CnsMRParser.End)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 276
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 277
                self.match(CnsMRParser.Rswitch)
                self.state = 278
                self.match(CnsMRParser.Simple_names)
                self.state = 279
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 280
                self.match(CnsMRParser.Scale)
                self.state = 281
                self.match(CnsMRParser.Simple_names)
                self.state = 282
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 283
                self.match(CnsMRParser.SoExponent)
                self.state = 284
                self.match(CnsMRParser.Simple_names)
                self.state = 285
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 286
                self.match(CnsMRParser.SqConstant)
                self.state = 287
                self.match(CnsMRParser.Simple_names)
                self.state = 288
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 289
                self.match(CnsMRParser.SqExponent)
                self.state = 290
                self.match(CnsMRParser.Simple_names)
                self.state = 291
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 292
                self.match(CnsMRParser.SqOffset)
                self.state = 293
                self.match(CnsMRParser.Simple_names)
                self.state = 294
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 295
                self.match(CnsMRParser.Taverage)
                self.state = 299
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 296
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 301
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

                self.state = 302
                self.match(CnsMRParser.End)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 303
                self.match(CnsMRParser.Temperature)
                self.state = 304
                self.match(CnsMRParser.Equ_op)
                self.state = 305
                self.match(CnsMRParser.Real)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 308
            self.match(CnsMRParser.Assign)
            self.state = 309
            self.selection()
            self.state = 310
            self.selection()
            self.state = 311
            self.match(CnsMRParser.Real)
            self.state = 312
            self.match(CnsMRParser.Real)
            self.state = 313
            self.match(CnsMRParser.Real)
            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 314
                self.match(CnsMRParser.Or_op)
                self.state = 315
                self.selection()
                self.state = 316
                self.selection()
                self.state = 322
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        try:
            self.state = 333
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 323
                self.match(CnsMRParser.Cutoff)
                self.state = 324
                self.match(CnsMRParser.Equ_op)
                self.state = 325
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 326
                self.match(CnsMRParser.Cuton)
                self.state = 327
                self.match(CnsMRParser.Equ_op)
                self.state = 328
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 329
                self.match(CnsMRParser.From)
                self.state = 330
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 331
                self.match(CnsMRParser.To)
                self.state = 332
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 355
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.End, CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 338
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 335
                    self.dihedral_assign()
                    self.state = 340
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 341
                self.match(CnsMRParser.Cv)
                self.state = 342
                self.match(CnsMRParser.Equ_op)
                self.state = 343
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 344
                self.match(CnsMRParser.Nassign)
                self.state = 345
                self.match(CnsMRParser.Equ_op)
                self.state = 346
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 4)
                self.state = 347
                self.match(CnsMRParser.Partition)
                self.state = 348
                self.match(CnsMRParser.Equ_op)
                self.state = 349
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 350
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 351
                self.match(CnsMRParser.Scale)
                self.state = 352
                self.match(CnsMRParser.Equ_op)
                self.state = 353
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 7)
                self.state = 354
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(CnsMRParser.Assign)
            self.state = 358
            self.selection()
            self.state = 359
            self.selection()
            self.state = 360
            self.selection()
            self.state = 361
            self.selection()
            self.state = 362
            self.match(CnsMRParser.Real)
            self.state = 363
            self.match(CnsMRParser.Real)
            self.state = 364
            self.match(CnsMRParser.Real)
            self.state = 365
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def group_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Group_statementContext,0)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_plane_statement)
        try:
            self.state = 371
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 367
                self.match(CnsMRParser.Group)
                self.state = 368
                self.group_statement()
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 369
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 370
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_group_statement)
        try:
            self.state = 379
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 373
                self.match(CnsMRParser.Selection)
                self.state = 374
                self.match(CnsMRParser.Equ_op)
                self.state = 375
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 376
                self.match(CnsMRParser.Weight)
                self.state = 377
                self.match(CnsMRParser.Equ_op)
                self.state = 378
                self.match(CnsMRParser.Real)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 410
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 381
                self.match(CnsMRParser.Exponent)
                self.state = 382
                self.match(CnsMRParser.Equ_op)
                self.state = 383
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 384
                self.match(CnsMRParser.Normal)
                self.state = 385
                self.match(CnsMRParser.Equ_op)
                self.state = 386
                self.match(CnsMRParser.L_paren)
                self.state = 407
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Real]:
                    self.state = 387
                    self.match(CnsMRParser.Real)
                    self.state = 389
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 388
                        self.match(CnsMRParser.Comma)


                    self.state = 391
                    self.match(CnsMRParser.Real)
                    self.state = 393
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 392
                        self.match(CnsMRParser.Comma)


                    self.state = 395
                    self.match(CnsMRParser.Real)
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 396
                    self.match(CnsMRParser.Tail)
                    self.state = 397
                    self.match(CnsMRParser.Equ_op)
                    self.state = 398
                    self.selection()
                    self.state = 400
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 399
                        self.match(CnsMRParser.Comma)


                    self.state = 405
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 402
                        self.match(CnsMRParser.Head)
                        self.state = 403
                        self.match(CnsMRParser.Equ_op)
                        self.state = 404
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 409
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 438
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.End, CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 412
                    self.sani_assign()
                    self.state = 417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.match(CnsMRParser.Classification)
                self.state = 419
                self.match(CnsMRParser.Equ_op)
                self.state = 420
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 421
                self.match(CnsMRParser.Coefficients)
                self.state = 422
                self.match(CnsMRParser.Real)
                self.state = 423
                self.match(CnsMRParser.Real)
                self.state = 424
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 425
                self.match(CnsMRParser.ForceConstant)
                self.state = 426
                self.match(CnsMRParser.Equ_op)
                self.state = 427
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 428
                self.match(CnsMRParser.Nrestraints)
                self.state = 429
                self.match(CnsMRParser.Equ_op)
                self.state = 430
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 431
                self.match(CnsMRParser.Potential)
                self.state = 432
                self.match(CnsMRParser.Equ_op)
                self.state = 433
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 434
                self.match(CnsMRParser.Print)
                self.state = 435
                self.match(CnsMRParser.Threshold)
                self.state = 436
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 437
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.match(CnsMRParser.Assign)
            self.state = 441
            self.selection()
            self.state = 442
            self.selection()
            self.state = 443
            self.selection()
            self.state = 444
            self.selection()
            self.state = 445
            self.selection()
            self.state = 446
            self.selection()
            self.state = 447
            self.match(CnsMRParser.Real)
            self.state = 448
            self.match(CnsMRParser.Real)
            self.state = 450
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Real:
                self.state = 449
                self.match(CnsMRParser.Real)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(CnsMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 493
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.End, CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 455
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 452
                    self.coup_assign()
                    self.state = 457
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 458
                self.match(CnsMRParser.Classification)
                self.state = 459
                self.match(CnsMRParser.Equ_op)
                self.state = 460
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 461
                self.match(CnsMRParser.Coefficients)
                self.state = 462
                self.match(CnsMRParser.Real)
                self.state = 463
                self.match(CnsMRParser.Real)
                self.state = 464
                self.match(CnsMRParser.Real)
                self.state = 465
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 466
                self.match(CnsMRParser.Cv)
                self.state = 467
                self.match(CnsMRParser.Equ_op)
                self.state = 468
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 469
                self.match(CnsMRParser.ForceConstant)
                self.state = 470
                self.match(CnsMRParser.Real)
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Real:
                    self.state = 471
                    self.match(CnsMRParser.Real)


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 474
                self.match(CnsMRParser.Nrestraints)
                self.state = 475
                self.match(CnsMRParser.Equ_op)
                self.state = 476
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 477
                self.match(CnsMRParser.Partition)
                self.state = 478
                self.match(CnsMRParser.Equ_op)
                self.state = 479
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 480
                self.match(CnsMRParser.Potential)
                self.state = 481
                self.match(CnsMRParser.Equ_op)
                self.state = 482
                self.match(CnsMRParser.Coupling_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 483
                self.match(CnsMRParser.Print)
                self.state = 484
                self.match(CnsMRParser.Threshold)
                self.state = 485
                self.match(CnsMRParser.Real)
                self.state = 490
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 486
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 487
                    self.match(CnsMRParser.Classification)
                    self.state = 488
                    self.match(CnsMRParser.Equ_op)
                    self.state = 489
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 492
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 495
            self.match(CnsMRParser.Assign)
            self.state = 496
            self.selection()
            self.state = 497
            self.selection()
            self.state = 498
            self.selection()
            self.state = 499
            self.selection()
            self.state = 505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 500
                self.selection()
                self.state = 501
                self.selection()
                self.state = 502
                self.selection()
                self.state = 503
                self.selection()


            self.state = 507
            self.match(CnsMRParser.Real)
            self.state = 508
            self.match(CnsMRParser.Real)
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Real:
                self.state = 509
                self.match(CnsMRParser.Real)
                self.state = 510
                self.match(CnsMRParser.Real)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_rcoilContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,i)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 554
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 516
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 513
                    self.carbon_shift_assign()
                    self.state = 518
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 519
                self.match(CnsMRParser.Classification)
                self.state = 520
                self.match(CnsMRParser.Equ_op)
                self.state = 521
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 522
                self.match(CnsMRParser.Expectation)
                self.state = 523
                self.match(CnsMRParser.Integer)
                self.state = 524
                self.match(CnsMRParser.Integer)
                self.state = 525
                self.match(CnsMRParser.Real)
                self.state = 526
                self.match(CnsMRParser.Real)
                self.state = 527
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 528
                self.match(CnsMRParser.ForceConstant)
                self.state = 529
                self.match(CnsMRParser.Equ_op)
                self.state = 530
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 531
                self.match(CnsMRParser.Nrestraints)
                self.state = 532
                self.match(CnsMRParser.Equ_op)
                self.state = 533
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 534
                self.match(CnsMRParser.PhiStep)
                self.state = 535
                self.match(CnsMRParser.Equ_op)
                self.state = 536
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 537
                self.match(CnsMRParser.PsiStep)
                self.state = 538
                self.match(CnsMRParser.Equ_op)
                self.state = 539
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 540
                self.match(CnsMRParser.Potential)
                self.state = 541
                self.match(CnsMRParser.Equ_op)
                self.state = 542
                self.match(CnsMRParser.Rdc_potential)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 543
                self.match(CnsMRParser.Print)
                self.state = 544
                self.match(CnsMRParser.Threshold)
                self.state = 545
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Rcoil:
                    self.state = 546
                    self.carbon_shift_rcoil()
                    self.state = 551
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 552
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 553
                self.match(CnsMRParser.Zero)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(CnsMRParser.Assign)
            self.state = 557
            self.selection()
            self.state = 558
            self.selection()
            self.state = 559
            self.selection()
            self.state = 560
            self.selection()
            self.state = 561
            self.selection()
            self.state = 562
            self.match(CnsMRParser.Real)
            self.state = 563
            self.match(CnsMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(CnsMRParser.Rcoil)
            self.state = 566
            self.selection()
            self.state = 567
            self.match(CnsMRParser.Real)
            self.state = 568
            self.match(CnsMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.ObservedContext,i)


        def proton_shift_rcoil(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_rcoilContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,i)


        def proton_shift_anisotropy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_anisotropyContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,i)


        def proton_shift_amides(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_amidesContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,i)


        def proton_shift_carbons(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_carbonsContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,i)


        def proton_shift_nitrogens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_nitrogensContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,i)


        def proton_shift_oxygens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_oxygensContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,i)


        def proton_shift_ring_atoms(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_ring_atomsContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,i)


        def proton_shift_alphas_and_amides(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_alphas_and_amidesContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(CnsMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 650
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,47,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Observed:
                    self.state = 570
                    self.observed()
                    self.state = 575
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 579
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Rcoil:
                    self.state = 576
                    self.proton_shift_rcoil()
                    self.state = 581
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Anisotropy:
                    self.state = 582
                    self.proton_shift_anisotropy()
                    self.state = 587
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Amides:
                    self.state = 588
                    self.proton_shift_amides()
                    self.state = 593
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Carbons:
                    self.state = 594
                    self.proton_shift_carbons()
                    self.state = 599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 603
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Nitrogens:
                    self.state = 600
                    self.proton_shift_nitrogens()
                    self.state = 605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 609
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Oxygens:
                    self.state = 606
                    self.proton_shift_oxygens()
                    self.state = 611
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.RingAtoms:
                    self.state = 612
                    self.proton_shift_ring_atoms()
                    self.state = 617
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.AlphasAndAmides:
                    self.state = 618
                    self.proton_shift_alphas_and_amides()
                    self.state = 623
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 624
                self.match(CnsMRParser.Classification)
                self.state = 625
                self.match(CnsMRParser.Equ_op)
                self.state = 626
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 627
                self.match(CnsMRParser.Error)
                self.state = 629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 628
                    self.match(CnsMRParser.Equ_op)


                self.state = 631
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 632
                self.match(CnsMRParser.ForceConstant)
                self.state = 633
                self.match(CnsMRParser.Real)
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Real:
                    self.state = 634
                    self.match(CnsMRParser.Real)


                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 637
                self.match(CnsMRParser.Potential)
                self.state = 638
                self.match(CnsMRParser.Coupling_potential)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 639
                self.match(CnsMRParser.Print)
                self.state = 640
                self.match(CnsMRParser.Threshold)
                self.state = 641
                self.match(CnsMRParser.Real)
                self.state = 646
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 642
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 643
                    self.match(CnsMRParser.Classification)
                    self.state = 644
                    self.match(CnsMRParser.Equ_op)
                    self.state = 645
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 648
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 649
                self.match(CnsMRParser.Reset)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 652
            self.match(CnsMRParser.Observed)
            self.state = 653
            self.selection()
            self.state = 655
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 654
                self.selection()


            self.state = 657
            self.match(CnsMRParser.Real)
            self.state = 659
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Real:
                self.state = 658
                self.match(CnsMRParser.Real)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            self.match(CnsMRParser.Rcoil)
            self.state = 662
            self.selection()
            self.state = 663
            self.match(CnsMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(CnsMRParser.Anisotropy)
            self.state = 666
            self.selection()
            self.state = 667
            self.selection()
            self.state = 668
            self.selection()
            self.state = 669
            self.match(CnsMRParser.Simple_name)
            self.state = 671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 670
                self.match(CnsMRParser.Logical)


            self.state = 673
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 675
            self.match(CnsMRParser.Amides)
            self.state = 676
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbons(self):
            return self.getToken(CnsMRParser.Carbons, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 678
            self.match(CnsMRParser.Carbons)
            self.state = 679
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 681
            self.match(CnsMRParser.Nitrogens)
            self.state = 682
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 684
            self.match(CnsMRParser.Oxygens)
            self.state = 685
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(CnsMRParser.RingAtoms)
            self.state = 688
            self.match(CnsMRParser.Simple_name)
            self.state = 689
            self.selection()
            self.state = 690
            self.selection()
            self.state = 691
            self.selection()
            self.state = 692
            self.selection()
            self.state = 693
            self.selection()
            self.state = 695
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 694
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 697
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 698
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conf_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.End, CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 700
                    self.conf_assign()
                    self.state = 705
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 706
                self.match(CnsMRParser.Classification)
                self.state = 707
                self.match(CnsMRParser.Equ_op)
                self.state = 708
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 709
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 710
                self.match(CnsMRParser.Expectation)
                self.state = 711
                self.match(CnsMRParser.Integer)
                self.state = 713
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
                if la_ == 1:
                    self.state = 712
                    self.match(CnsMRParser.Integer)


                self.state = 716
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                if la_ == 1:
                    self.state = 715
                    self.match(CnsMRParser.Integer)


                self.state = 719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 718
                    self.match(CnsMRParser.Integer)


                self.state = 721
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 722
                self.match(CnsMRParser.Error)
                self.state = 723
                self.match(CnsMRParser.Equ_op)
                self.state = 724
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 725
                self.match(CnsMRParser.ForceConstant)
                self.state = 726
                self.match(CnsMRParser.Equ_op)
                self.state = 727
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 728
                self.match(CnsMRParser.Nrestraints)
                self.state = 729
                self.match(CnsMRParser.Equ_op)
                self.state = 730
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 731
                self.match(CnsMRParser.Phase)
                self.state = 732
                self.match(CnsMRParser.Integer)
                self.state = 733
                self.match(CnsMRParser.Integer)
                self.state = 734
                self.match(CnsMRParser.Integer)
                self.state = 738
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                if la_ == 1:
                    self.state = 735
                    self.match(CnsMRParser.Integer)
                    self.state = 736
                    self.match(CnsMRParser.Integer)
                    self.state = 737
                    self.match(CnsMRParser.Integer)


                self.state = 743
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 740
                    self.match(CnsMRParser.Integer)
                    self.state = 741
                    self.match(CnsMRParser.Integer)
                    self.state = 742
                    self.match(CnsMRParser.Integer)


                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 745
                    self.match(CnsMRParser.Integer)
                    self.state = 746
                    self.match(CnsMRParser.Integer)
                    self.state = 747
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 750
                self.match(CnsMRParser.Potential)
                self.state = 751
                self.match(CnsMRParser.Equ_op)
                self.state = 752
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 753
                self.match(CnsMRParser.Print)
                self.state = 754
                self.match(CnsMRParser.Threshold)
                self.state = 755
                self.match(CnsMRParser.Real)
                self.state = 760
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 756
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 757
                    self.match(CnsMRParser.Classification)
                    self.state = 758
                    self.match(CnsMRParser.Equ_op)
                    self.state = 759
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 762
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 763
                self.match(CnsMRParser.Size)
                self.state = 764
                self.match(CnsMRParser.Dimensions)
                self.state = 765
                self.match(CnsMRParser.Integer)
                self.state = 767
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 766
                    self.match(CnsMRParser.Integer)


                self.state = 770
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 769
                    self.match(CnsMRParser.Integer)


                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 772
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 775
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(CnsMRParser.Assign)
            self.state = 779
            self.selection()
            self.state = 780
            self.selection()
            self.state = 781
            self.selection()
            self.state = 782
            self.selection()
            self.state = 788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
            if la_ == 1:
                self.state = 783
                self.selection()
                self.state = 784
                self.selection()
                self.state = 785
                self.selection()
                self.state = 786
                self.selection()


            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
            if la_ == 1:
                self.state = 790
                self.selection()
                self.state = 791
                self.selection()
                self.state = 792
                self.selection()
                self.state = 793
                self.selection()


            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 797
                self.selection()
                self.state = 798
                self.selection()
                self.state = 799
                self.selection()
                self.state = 800
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 832
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.End, CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 804
                    self.dani_assign()
                    self.state = 809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self.match(CnsMRParser.Classification)
                self.state = 811
                self.match(CnsMRParser.Equ_op)
                self.state = 812
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 813
                self.match(CnsMRParser.Coefficients)
                self.state = 814
                self.match(CnsMRParser.Real)
                self.state = 815
                self.match(CnsMRParser.Real)
                self.state = 816
                self.match(CnsMRParser.Real)
                self.state = 817
                self.match(CnsMRParser.Real)
                self.state = 818
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 819
                self.match(CnsMRParser.ForceConstant)
                self.state = 820
                self.match(CnsMRParser.Equ_op)
                self.state = 821
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 822
                self.match(CnsMRParser.Nrestraints)
                self.state = 823
                self.match(CnsMRParser.Equ_op)
                self.state = 824
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 825
                self.match(CnsMRParser.Potential)
                self.state = 826
                self.match(CnsMRParser.Equ_op)
                self.state = 827
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 828
                self.match(CnsMRParser.Print)
                self.state = 829
                self.match(CnsMRParser.Threshold)
                self.state = 830
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 831
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(CnsMRParser.Assign)
            self.state = 835
            self.selection()
            self.state = 836
            self.selection()
            self.state = 837
            self.selection()
            self.state = 838
            self.selection()
            self.state = 839
            self.selection()
            self.state = 840
            self.selection()
            self.state = 841
            self.match(CnsMRParser.Real)
            self.state = 842
            self.match(CnsMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 874
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.End, CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 844
                    self.one_bond_assign()
                    self.state = 849
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 850
                self.match(CnsMRParser.Classification)
                self.state = 851
                self.match(CnsMRParser.Equ_op)
                self.state = 852
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 853
                self.match(CnsMRParser.Coefficients)
                self.state = 854
                self.match(CnsMRParser.Real)
                self.state = 855
                self.match(CnsMRParser.Real)
                self.state = 856
                self.match(CnsMRParser.Real)
                self.state = 857
                self.match(CnsMRParser.Real)
                self.state = 858
                self.match(CnsMRParser.Real)
                self.state = 859
                self.match(CnsMRParser.Real)
                self.state = 860
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 861
                self.match(CnsMRParser.ForceConstant)
                self.state = 862
                self.match(CnsMRParser.Equ_op)
                self.state = 863
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 864
                self.match(CnsMRParser.Nrestraints)
                self.state = 865
                self.match(CnsMRParser.Equ_op)
                self.state = 866
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 867
                self.match(CnsMRParser.Potential)
                self.state = 868
                self.match(CnsMRParser.Equ_op)
                self.state = 869
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 870
                self.match(CnsMRParser.Print)
                self.state = 871
                self.match(CnsMRParser.Threshold)
                self.state = 872
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 873
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 876
            self.match(CnsMRParser.Assign)
            self.state = 877
            self.selection()
            self.state = 878
            self.selection()
            self.state = 879
            self.selection()
            self.state = 880
            self.selection()
            self.state = 881
            self.selection()
            self.state = 882
            self.selection()
            self.state = 883
            self.selection()
            self.state = 884
            self.selection()
            self.state = 885
            self.match(CnsMRParser.Real)
            self.state = 886
            self.match(CnsMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,i)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Angle_dihedral(self):
            return self.getToken(CnsMRParser.Angle_dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 931
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.End, CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Assign:
                    self.state = 888
                    self.angle_db_assign()
                    self.state = 893
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 894
                self.match(CnsMRParser.Classification)
                self.state = 895
                self.match(CnsMRParser.Equ_op)
                self.state = 896
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 897
                self.match(CnsMRParser.DerivFlag)
                self.state = 898
                self.match(CnsMRParser.Equ_op)
                self.state = 899
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 900
                self.match(CnsMRParser.Expectation)
                self.state = 901
                self.match(CnsMRParser.Integer)
                self.state = 902
                self.match(CnsMRParser.Integer)
                self.state = 903
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 904
                self.match(CnsMRParser.Error)
                self.state = 905
                self.match(CnsMRParser.Equ_op)
                self.state = 906
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 907
                self.match(CnsMRParser.ForceConstant)
                self.state = 908
                self.match(CnsMRParser.Equ_op)
                self.state = 909
                self.match(CnsMRParser.Real)
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 910
                self.match(CnsMRParser.Nrestraints)
                self.state = 911
                self.match(CnsMRParser.Equ_op)
                self.state = 912
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 913
                self.match(CnsMRParser.Potential)
                self.state = 914
                self.match(CnsMRParser.Equ_op)
                self.state = 915
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 916
                self.match(CnsMRParser.Print)
                self.state = 917
                self.match(CnsMRParser.Threshold)
                self.state = 918
                self.match(CnsMRParser.Real)
                self.state = 923
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 919
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 920
                    self.match(CnsMRParser.Classification)
                    self.state = 921
                    self.match(CnsMRParser.Equ_op)
                    self.state = 922
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 925
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 926
                self.match(CnsMRParser.Size)
                self.state = 927
                self.match(CnsMRParser.Angle_dihedral)
                self.state = 928
                self.match(CnsMRParser.Integer)
                self.state = 929
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 930
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(CnsMRParser.Assign)
            self.state = 934
            self.selection()
            self.state = 935
            self.selection()
            self.state = 936
            self.selection()
            self.state = 937
            self.selection()
            self.state = 938
            self.selection()
            self.state = 939
            self.selection()
            self.state = 940
            self.selection()
            self.state = 941
            self.selection()
            self.state = 942
            self.selection()
            self.state = 943
            self.selection()
            self.state = 944
            self.selection()
            self.state = 946
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 945
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 948
            self.match(CnsMRParser.L_paren)
            self.state = 949
            self.selection_expression()
            self.state = 950
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.term()
            self.state = 957
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 953
                self.match(CnsMRParser.Or_op)
                self.state = 954
                self.term()
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.factor(0)
            self.state = 965
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 961
                self.match(CnsMRParser.And_op)
                self.state = 962
                self.factor(0)
                self.state = 967
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real)
            else:
                return self.getToken(CnsMRParser.Real, i)

        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store_1(self):
            return self.getToken(CnsMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(CnsMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(CnsMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(CnsMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(CnsMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(CnsMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(CnsMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(CnsMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(CnsMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1105
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
            if la_ == 1:
                self.state = 969
                self.match(CnsMRParser.L_paren)
                self.state = 970
                self.selection_expression()
                self.state = 971
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 973
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 974
                self.match(CnsMRParser.Atom)
                self.state = 975
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 976
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 977
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 978
                self.match(CnsMRParser.Attribute)
                self.state = 980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 979
                    self.match(CnsMRParser.Abs)


                self.state = 982
                self.match(CnsMRParser.Attr_properties)
                self.state = 983
                self.match(CnsMRParser.Comparison_ops)
                self.state = 984
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 5:
                self.state = 985
                self.match(CnsMRParser.BondedTo)
                self.state = 986
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 987
                self.match(CnsMRParser.ByGroup)
                self.state = 988
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 989
                self.match(CnsMRParser.ByRes)
                self.state = 990
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 991
                self.match(CnsMRParser.Chemical)
                self.state = 998
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 992
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 993
                    self.match(CnsMRParser.Simple_name)
                    self.state = 996
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
                    if la_ == 1:
                        self.state = 994
                        self.match(CnsMRParser.Colon)
                        self.state = 995
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1000
                self.match(CnsMRParser.Fbox)
                self.state = 1001
                self.match(CnsMRParser.Real)
                self.state = 1002
                self.match(CnsMRParser.Real)
                self.state = 1003
                self.match(CnsMRParser.Real)
                self.state = 1004
                self.match(CnsMRParser.Real)
                self.state = 1005
                self.match(CnsMRParser.Real)
                self.state = 1006
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 10:
                self.state = 1007
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1008
                self.match(CnsMRParser.Id)
                self.state = 1009
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1010
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1011
                self.match(CnsMRParser.Name)
                self.state = 1018
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1012
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1013
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1016
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,80,self._ctx)
                    if la_ == 1:
                        self.state = 1014
                        self.match(CnsMRParser.Colon)
                        self.state = 1015
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1020
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1021
                self.match(CnsMRParser.Not_op)
                self.state = 1022
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1023
                self.match(CnsMRParser.Point)
                self.state = 1024
                self.match(CnsMRParser.L_paren)
                self.state = 1025
                self.match(CnsMRParser.Real)
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1026
                    self.match(CnsMRParser.Comma)


                self.state = 1029
                self.match(CnsMRParser.Real)
                self.state = 1031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1030
                    self.match(CnsMRParser.Comma)


                self.state = 1033
                self.match(CnsMRParser.Real)
                self.state = 1034
                self.match(CnsMRParser.R_paren)
                self.state = 1035
                self.match(CnsMRParser.Cut)
                self.state = 1036
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 17:
                self.state = 1037
                self.match(CnsMRParser.Point)
                self.state = 1038
                self.match(CnsMRParser.L_paren)
                self.state = 1039
                self.match(CnsMRParser.Tail)
                self.state = 1040
                self.match(CnsMRParser.Equ_op)
                self.state = 1041
                self.selection()
                self.state = 1043
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1042
                    self.match(CnsMRParser.Comma)


                self.state = 1048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1045
                    self.match(CnsMRParser.Head)
                    self.state = 1046
                    self.match(CnsMRParser.Equ_op)
                    self.state = 1047
                    self.selection()


                self.state = 1050
                self.match(CnsMRParser.R_paren)
                self.state = 1051
                self.match(CnsMRParser.Cut)
                self.state = 1052
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 18:
                self.state = 1054
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1055
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1056
                self.match(CnsMRParser.Residue)
                self.state = 1063
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1057
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1058
                    self.match(CnsMRParser.Integer)
                    self.state = 1061
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                    if la_ == 1:
                        self.state = 1059
                        self.match(CnsMRParser.Colon)
                        self.state = 1060
                        self.match(CnsMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1065
                self.match(CnsMRParser.Resname)
                self.state = 1072
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1066
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1067
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1070
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
                    if la_ == 1:
                        self.state = 1068
                        self.match(CnsMRParser.Colon)
                        self.state = 1069
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1074
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1086
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1075
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1076
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1079
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                    if la_ == 1:
                        self.state = 1077
                        self.match(CnsMRParser.Colon)
                        self.state = 1078
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1081
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1084
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                    if la_ == 1:
                        self.state = 1082
                        self.match(CnsMRParser.Colon)
                        self.state = 1083
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1088
                self.match(CnsMRParser.Sfbox)
                self.state = 1089
                self.match(CnsMRParser.Real)
                self.state = 1090
                self.match(CnsMRParser.Real)
                self.state = 1091
                self.match(CnsMRParser.Real)
                self.state = 1092
                self.match(CnsMRParser.Real)
                self.state = 1093
                self.match(CnsMRParser.Real)
                self.state = 1094
                self.match(CnsMRParser.Real)
                pass

            elif la_ == 24:
                self.state = 1095
                self.match(CnsMRParser.Store_1)
                pass

            elif la_ == 25:
                self.state = 1096
                self.match(CnsMRParser.Store_2)
                pass

            elif la_ == 26:
                self.state = 1097
                self.match(CnsMRParser.Store_3)
                pass

            elif la_ == 27:
                self.state = 1098
                self.match(CnsMRParser.Store_4)
                pass

            elif la_ == 28:
                self.state = 1099
                self.match(CnsMRParser.Store_5)
                pass

            elif la_ == 29:
                self.state = 1100
                self.match(CnsMRParser.Store_6)
                pass

            elif la_ == 30:
                self.state = 1101
                self.match(CnsMRParser.Store_7)
                pass

            elif la_ == 31:
                self.state = 1102
                self.match(CnsMRParser.Store_8)
                pass

            elif la_ == 32:
                self.state = 1103
                self.match(CnsMRParser.Store_9)
                pass

            elif la_ == 33:
                self.state = 1104
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1115
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,95,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1113
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1107
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1108
                        self.match(CnsMRParser.Around)
                        self.state = 1109
                        self.match(CnsMRParser.Real)
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1110
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1111
                        self.match(CnsMRParser.Saround)
                        self.state = 1112
                        self.match(CnsMRParser.Real)
                        pass

             
                self.state = 1117
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,95,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[49] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




