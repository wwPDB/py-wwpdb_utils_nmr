# Generated from CnsMRParser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00a1")
        buf.write("\u04ed\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\7\2|\n\2\f\2\16\2\177\13")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\7\2\u0086\n\2\f\2\16\2\u0089\13")
        buf.write("\2\3\2\3\2\3\3\3\3\7\3\u008f\n\3\f\3\16\3\u0092\13\3\3")
        buf.write("\3\3\3\3\4\3\4\3\4\7\4\u0099\n\4\f\4\16\4\u009c\13\4\3")
        buf.write("\4\3\4\3\5\3\5\3\5\7\5\u00a3\n\5\f\5\16\5\u00a6\13\5\3")
        buf.write("\5\3\5\3\6\3\6\3\6\7\6\u00ad\n\6\f\6\16\6\u00b0\13\6\3")
        buf.write("\6\3\6\3\7\3\7\7\7\u00b6\n\7\f\7\16\7\u00b9\13\7\3\7\3")
        buf.write("\7\3\b\3\b\7\b\u00bf\n\b\f\b\16\b\u00c2\13\b\3\b\3\b\3")
        buf.write("\t\3\t\7\t\u00c8\n\t\f\t\16\t\u00cb\13\t\3\t\3\t\3\n\3")
        buf.write("\n\7\n\u00d1\n\n\f\n\16\n\u00d4\13\n\3\n\3\n\3\13\3\13")
        buf.write("\7\13\u00da\n\13\f\13\16\13\u00dd\13\13\3\13\3\13\3\f")
        buf.write("\3\f\7\f\u00e3\n\f\f\f\16\f\u00e6\13\f\3\f\3\f\3\r\3\r")
        buf.write("\7\r\u00ec\n\r\f\r\16\r\u00ef\13\r\3\r\3\r\3\16\3\16\7")
        buf.write("\16\u00f5\n\16\f\16\16\16\u00f8\13\16\3\16\3\16\3\17\3")
        buf.write("\17\5\17\u00fe\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u010d\n\17\3\17\3")
        buf.write("\17\3\17\5\17\u0112\n\17\3\17\3\17\3\17\3\17\3\17\5\17")
        buf.write("\u0119\n\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17\u0122")
        buf.write("\n\17\3\17\3\17\3\17\5\17\u0127\n\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\7\17\u0130\n\17\f\17\16\17\u0133\13")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17")
        buf.write("\u013e\n\17\3\17\3\17\3\17\3\17\5\17\u0144\n\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\5\17")
        buf.write("\u0151\n\17\3\17\3\17\3\17\7\17\u0156\n\17\f\17\16\17")
        buf.write("\u0159\13\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3")
        buf.write("\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\7\17\u0171\n\17\f\17\16\17\u0174\13\17")
        buf.write("\3\17\3\17\3\17\5\17\u0179\n\17\3\17\5\17\u017c\n\17\3")
        buf.write("\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\5\20\u0186\n\20")
        buf.write("\3\20\5\20\u0189\n\20\3\20\3\20\3\20\3\20\7\20\u018f\n")
        buf.write("\20\f\20\16\20\u0192\13\20\3\21\3\21\5\21\u0196\n\21\3")
        buf.write("\21\3\21\3\21\5\21\u019b\n\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\5\21\u01a2\n\21\3\22\3\22\3\22\5\22\u01a7\n\22\3\22\3")
        buf.write("\22\3\22\5\22\u01ac\n\22\3\22\3\22\3\22\5\22\u01b1\n\22")
        buf.write("\3\22\3\22\3\22\3\22\5\22\u01b7\n\22\3\22\3\22\5\22\u01bb")
        buf.write("\n\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23")
        buf.write("\3\24\3\24\7\24\u01c9\n\24\f\24\16\24\u01cc\13\24\3\24")
        buf.write("\3\24\3\24\5\24\u01d1\n\24\3\25\3\25\5\25\u01d5\n\25\3")
        buf.write("\25\3\25\3\25\5\25\u01da\n\25\3\25\5\25\u01dd\n\25\3\26")
        buf.write("\3\26\5\26\u01e1\n\26\3\26\3\26\3\26\5\26\u01e6\n\26\3")
        buf.write("\26\3\26\3\26\5\26\u01eb\n\26\3\26\3\26\5\26\u01ef\n\26")
        buf.write("\3\26\3\26\3\26\3\26\5\26\u01f5\n\26\3\26\3\26\5\26\u01f9")
        buf.write("\n\26\3\26\3\26\5\26\u01fd\n\26\3\26\5\26\u0200\n\26\5")
        buf.write("\26\u0202\n\26\3\26\3\26\5\26\u0206\n\26\3\27\3\27\3\27")
        buf.write("\5\27\u020b\n\27\3\27\3\27\3\27\3\27\3\27\3\27\3\27\3")
        buf.write("\27\5\27\u0215\n\27\3\27\3\27\3\27\5\27\u021a\n\27\3\27")
        buf.write("\3\27\3\27\5\27\u021f\n\27\3\27\3\27\3\27\3\27\3\27\5")
        buf.write("\27\u0226\n\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\5\30\u0232\n\30\3\31\3\31\3\31\5\31\u0237\n")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31")
        buf.write("\u0242\n\31\3\31\3\31\3\31\3\31\5\31\u0248\n\31\3\31\3")
        buf.write("\31\5\31\u024c\n\31\3\31\3\31\3\31\5\31\u0251\n\31\3\31")
        buf.write("\3\31\3\31\5\31\u0256\n\31\3\31\3\31\3\31\3\31\3\31\3")
        buf.write("\31\3\31\5\31\u025f\n\31\3\31\5\31\u0262\n\31\3\31\5\31")
        buf.write("\u0265\n\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\5\32\u0271\n\32\3\32\3\32\3\32\3\32\3\32\5\32")
        buf.write("\u0278\n\32\3\33\3\33\3\33\5\33\u027d\n\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33\u0289\n\33")
        buf.write("\3\33\3\33\3\33\5\33\u028e\n\33\3\33\3\33\3\33\5\33\u0293")
        buf.write("\n\33\3\33\3\33\3\33\5\33\u0298\n\33\3\33\3\33\3\33\5")
        buf.write("\33\u029d\n\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\5\33")
        buf.write("\u02a6\n\33\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3")
        buf.write("\34\3\35\3\35\3\35\3\35\3\35\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u02c1\n\36\3\36\3")
        buf.write("\36\3\36\5\36\u02c6\n\36\3\36\3\36\3\36\3\36\5\36\u02cc")
        buf.write("\n\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\5\36\u02d6")
        buf.write("\n\36\3\36\5\36\u02d9\n\36\3\36\3\36\3\36\5\36\u02de\n")
        buf.write("\36\3\37\3\37\3\37\5\37\u02e3\n\37\3\37\3\37\5\37\u02e7")
        buf.write("\n\37\3 \3 \3 \3 \3!\3!\3!\3!\3!\3!\5!\u02f3\n!\3!\3!")
        buf.write("\3\"\3\"\3\"\3#\3#\3#\3$\3$\3$\3%\3%\3%\3&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\5&\u030b\n&\3\'\3\'\3\'\3(\3(\3(\5(\u0313\n")
        buf.write("(\3(\3(\3(\3(\3(\5(\u031a\n(\3(\5(\u031d\n(\3(\5(\u0320")
        buf.write("\n(\3(\3(\3(\5(\u0325\n(\3(\3(\3(\5(\u032a\n(\3(\3(\3")
        buf.write("(\5(\u032f\n(\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0339\n(\3(\3")
        buf.write("(\3(\5(\u033e\n(\3(\3(\3(\5(\u0343\n(\3(\3(\5(\u0347\n")
        buf.write("(\3(\3(\3(\3(\3(\3(\3(\5(\u0350\n(\3(\5(\u0353\n(\3(\3")
        buf.write("(\3(\3(\3(\5(\u035a\n(\3(\5(\u035d\n(\3(\5(\u0360\n(\3")
        buf.write("(\5(\u0363\n(\3)\3)\3)\3)\3)\3)\3)\3)\3)\3)\5)\u036f\n")
        buf.write(")\3)\3)\3)\3)\3)\5)\u0376\n)\3)\3)\3)\3)\3)\5)\u037d\n")
        buf.write(")\3*\3*\3*\5*\u0382\n*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5")
        buf.write("*\u038e\n*\3*\3*\3*\5*\u0393\n*\3*\3*\3*\5*\u0398\n*\3")
        buf.write("*\3*\3*\3*\3*\5*\u039f\n*\3+\3+\3+\3+\3+\3+\3+\3+\3+\3")
        buf.write("+\3,\3,\3,\5,\u03ae\n,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3")
        buf.write(",\3,\5,\u03bc\n,\3,\3,\3,\5,\u03c1\n,\3,\3,\3,\5,\u03c6")
        buf.write("\n,\3,\3,\3,\3,\3,\5,\u03cd\n,\3-\3-\3-\3-\3-\3-\3-\3")
        buf.write("-\3-\3-\3-\3-\3.\3.\3.\5.\u03de\n.\3.\3.\3.\5.\u03e3\n")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\5.\u03ec\n.\3.\3.\3.\5.\u03f1\n")
        buf.write(".\3.\3.\3.\5.\u03f6\n.\3.\3.\3.\5.\u03fb\n.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\5.\u0404\n.\3.\5.\u0407\n.\3.\3.\3.\3.\3.\3")
        buf.write(".\5.\u040f\n.\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\3/\5")
        buf.write("/\u041e\n/\3\60\3\60\3\60\3\60\3\61\3\61\3\61\7\61\u0427")
        buf.write("\n\61\f\61\16\61\u042a\13\61\3\62\3\62\3\62\7\62\u042f")
        buf.write("\n\62\f\62\16\62\u0432\13\62\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0440\n\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\5\63\u0450\n\63\5\63\u0452\n\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\5\63\u0465\n\63\5\63\u0467\n")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u0470\n\63")
        buf.write("\3\63\3\63\5\63\u0474\n\63\3\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\3\63\3\63\3\63\5\63\u047f\n\63\3\63\3\63\5\63\u0483")
        buf.write("\n\63\3\63\3\63\5\63\u0487\n\63\3\63\5\63\u048a\n\63\3")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\5\63\u0497\n\63\5\63\u0499\n\63\3\63\3\63\3\63\3\63\3")
        buf.write("\63\5\63\u04a0\n\63\5\63\u04a2\n\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\5\63\u04a9\n\63\3\63\3\63\3\63\5\63\u04ae\n\63\5")
        buf.write("\63\u04b0\n\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63")
        buf.write("\u04c4\n\63\3\63\3\63\3\63\3\63\3\63\3\63\7\63\u04cc\n")
        buf.write("\63\f\63\16\63\u04cf\13\63\3\64\3\64\3\65\3\65\3\66\3")
        buf.write("\66\3\67\3\67\3\67\7\67\u04da\n\67\f\67\16\67\u04dd\13")
        buf.write("\67\3\67\5\67\u04e0\n\67\5\67\u04e2\n\67\3\67\3\67\7\67")
        buf.write("\u04e6\n\67\f\67\16\67\u04e9\13\67\3\67\3\67\3\67\5\u0131")
        buf.write("\u0157\u0172\3d8\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36")
        buf.write(" \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjl\2\5")
        buf.write("\3\2\u0088\u0089\4\2\u0084\u0084\u008a\u008a\4\2\u0084")
        buf.write("\u0084\u0086\u0086\2\u05ec\2}\3\2\2\2\4\u008c\3\2\2\2")
        buf.write("\6\u0095\3\2\2\2\b\u009f\3\2\2\2\n\u00a9\3\2\2\2\f\u00b3")
        buf.write("\3\2\2\2\16\u00bc\3\2\2\2\20\u00c5\3\2\2\2\22\u00ce\3")
        buf.write("\2\2\2\24\u00d7\3\2\2\2\26\u00e0\3\2\2\2\30\u00e9\3\2")
        buf.write("\2\2\32\u00f2\3\2\2\2\34\u017b\3\2\2\2\36\u017d\3\2\2")
        buf.write("\2 \u01a1\3\2\2\2\"\u01ba\3\2\2\2$\u01bc\3\2\2\2&\u01d0")
        buf.write("\3\2\2\2(\u01dc\3\2\2\2*\u0205\3\2\2\2,\u0225\3\2\2\2")
        buf.write(".\u0227\3\2\2\2\60\u0264\3\2\2\2\62\u0266\3\2\2\2\64\u02a5")
        buf.write("\3\2\2\2\66\u02a7\3\2\2\28\u02b0\3\2\2\2:\u02dd\3\2\2")
        buf.write("\2<\u02df\3\2\2\2>\u02e8\3\2\2\2@\u02ec\3\2\2\2B\u02f6")
        buf.write("\3\2\2\2D\u02f9\3\2\2\2F\u02fc\3\2\2\2H\u02ff\3\2\2\2")
        buf.write("J\u0302\3\2\2\2L\u030c\3\2\2\2N\u0362\3\2\2\2P\u0364\3")
        buf.write("\2\2\2R\u039e\3\2\2\2T\u03a0\3\2\2\2V\u03cc\3\2\2\2X\u03ce")
        buf.write("\3\2\2\2Z\u040e\3\2\2\2\\\u0410\3\2\2\2^\u041f\3\2\2\2")
        buf.write("`\u0423\3\2\2\2b\u042b\3\2\2\2d\u04c3\3\2\2\2f\u04d0\3")
        buf.write("\2\2\2h\u04d2\3\2\2\2j\u04d4\3\2\2\2l\u04d6\3\2\2\2n|")
        buf.write("\5\4\3\2o|\5\6\4\2p|\5\b\5\2q|\5\n\6\2r|\5\f\7\2s|\5\16")
        buf.write("\b\2t|\5\20\t\2u|\5\22\n\2v|\5\24\13\2w|\5\26\f\2x|\5")
        buf.write("\30\r\2y|\5\32\16\2z|\5l\67\2{n\3\2\2\2{o\3\2\2\2{p\3")
        buf.write("\2\2\2{q\3\2\2\2{r\3\2\2\2{s\3\2\2\2{t\3\2\2\2{u\3\2\2")
        buf.write("\2{v\3\2\2\2{w\3\2\2\2{x\3\2\2\2{y\3\2\2\2{z\3\2\2\2|")
        buf.write("\177\3\2\2\2}{\3\2\2\2}~\3\2\2\2~\u0087\3\2\2\2\177}\3")
        buf.write("\2\2\2\u0080\u0086\5\36\20\2\u0081\u0086\5$\23\2\u0082")
        buf.write("\u0086\5.\30\2\u0083\u0086\5&\24\2\u0084\u0086\5\62\32")
        buf.write("\2\u0085\u0080\3\2\2\2\u0085\u0081\3\2\2\2\u0085\u0082")
        buf.write("\3\2\2\2\u0085\u0083\3\2\2\2\u0085\u0084\3\2\2\2\u0086")
        buf.write("\u0089\3\2\2\2\u0087\u0085\3\2\2\2\u0087\u0088\3\2\2\2")
        buf.write("\u0088\u008a\3\2\2\2\u0089\u0087\3\2\2\2\u008a\u008b\7")
        buf.write("\2\2\3\u008b\3\3\2\2\2\u008c\u0090\7\5\2\2\u008d\u008f")
        buf.write("\5\34\17\2\u008e\u008d\3\2\2\2\u008f\u0092\3\2\2\2\u0090")
        buf.write("\u008e\3\2\2\2\u0090\u0091\3\2\2\2\u0091\u0093\3\2\2\2")
        buf.write("\u0092\u0090\3\2\2\2\u0093\u0094\7\4\2\2\u0094\5\3\2\2")
        buf.write("\2\u0095\u0096\7\60\2\2\u0096\u009a\7\61\2\2\u0097\u0099")
        buf.write("\5\"\22\2\u0098\u0097\3\2\2\2\u0099\u009c\3\2\2\2\u009a")
        buf.write("\u0098\3\2\2\2\u009a\u009b\3\2\2\2\u009b\u009d\3\2\2\2")
        buf.write("\u009c\u009a\3\2\2\2\u009d\u009e\7\4\2\2\u009e\7\3\2\2")
        buf.write("\2\u009f\u00a0\7\60\2\2\u00a0\u00a4\7\64\2\2\u00a1\u00a3")
        buf.write("\5&\24\2\u00a2\u00a1\3\2\2\2\u00a3\u00a6\3\2\2\2\u00a4")
        buf.write("\u00a2\3\2\2\2\u00a4\u00a5\3\2\2\2\u00a5\u00a7\3\2\2\2")
        buf.write("\u00a6\u00a4\3\2\2\2\u00a7\u00a8\7\4\2\2\u00a8\t\3\2\2")
        buf.write("\2\u00a9\u00aa\7\60\2\2\u00aa\u00ae\78\2\2\u00ab\u00ad")
        buf.write("\5*\26\2\u00ac\u00ab\3\2\2\2\u00ad\u00b0\3\2\2\2\u00ae")
        buf.write("\u00ac\3\2\2\2\u00ae\u00af\3\2\2\2\u00af\u00b1\3\2\2\2")
        buf.write("\u00b0\u00ae\3\2\2\2\u00b1\u00b2\7\4\2\2\u00b2\13\3\2")
        buf.write("\2\2\u00b3\u00b7\7;\2\2\u00b4\u00b6\5,\27\2\u00b5\u00b4")
        buf.write("\3\2\2\2\u00b6\u00b9\3\2\2\2\u00b7\u00b5\3\2\2\2\u00b7")
        buf.write("\u00b8\3\2\2\2\u00b8\u00ba\3\2\2\2\u00b9\u00b7\3\2\2\2")
        buf.write("\u00ba\u00bb\7\4\2\2\u00bb\r\3\2\2\2\u00bc\u00c0\7?\2")
        buf.write("\2\u00bd\u00bf\5\60\31\2\u00be\u00bd\3\2\2\2\u00bf\u00c2")
        buf.write("\3\2\2\2\u00c0\u00be\3\2\2\2\u00c0\u00c1\3\2\2\2\u00c1")
        buf.write("\u00c3\3\2\2\2\u00c2\u00c0\3\2\2\2\u00c3\u00c4\7\4\2\2")
        buf.write("\u00c4\17\3\2\2\2\u00c5\u00c9\7A\2\2\u00c6\u00c8\5\64")
        buf.write("\33\2\u00c7\u00c6\3\2\2\2\u00c8\u00cb\3\2\2\2\u00c9\u00c7")
        buf.write("\3\2\2\2\u00c9\u00ca\3\2\2\2\u00ca\u00cc\3\2\2\2\u00cb")
        buf.write("\u00c9\3\2\2\2\u00cc\u00cd\7\4\2\2\u00cd\21\3\2\2\2\u00ce")
        buf.write("\u00d2\7G\2\2\u00cf\u00d1\5:\36\2\u00d0\u00cf\3\2\2\2")
        buf.write("\u00d1\u00d4\3\2\2\2\u00d2\u00d0\3\2\2\2\u00d2\u00d3\3")
        buf.write("\2\2\2\u00d3\u00d5\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d5\u00d6")
        buf.write("\7\4\2\2\u00d6\23\3\2\2\2\u00d7\u00db\7Q\2\2\u00d8\u00da")
        buf.write("\5N(\2\u00d9\u00d8\3\2\2\2\u00da\u00dd\3\2\2\2\u00db\u00d9")
        buf.write("\3\2\2\2\u00db\u00dc\3\2\2\2\u00dc\u00de\3\2\2\2\u00dd")
        buf.write("\u00db\3\2\2\2\u00de\u00df\7\4\2\2\u00df\25\3\2\2\2\u00e0")
        buf.write("\u00e4\7V\2\2\u00e1\u00e3\5R*\2\u00e2\u00e1\3\2\2\2\u00e3")
        buf.write("\u00e6\3\2\2\2\u00e4\u00e2\3\2\2\2\u00e4\u00e5\3\2\2\2")
        buf.write("\u00e5\u00e7\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e7\u00e8\7")
        buf.write("\4\2\2\u00e8\27\3\2\2\2\u00e9\u00ed\7W\2\2\u00ea\u00ec")
        buf.write("\5V,\2\u00eb\u00ea\3\2\2\2\u00ec\u00ef\3\2\2\2\u00ed\u00eb")
        buf.write("\3\2\2\2\u00ed\u00ee\3\2\2\2\u00ee\u00f0\3\2\2\2\u00ef")
        buf.write("\u00ed\3\2\2\2\u00f0\u00f1\7\4\2\2\u00f1\31\3\2\2\2\u00f2")
        buf.write("\u00f6\7X\2\2\u00f3\u00f5\5Z.\2\u00f4\u00f3\3\2\2\2\u00f5")
        buf.write("\u00f8\3\2\2\2\u00f6\u00f4\3\2\2\2\u00f6\u00f7\3\2\2\2")
        buf.write("\u00f7\u00f9\3\2\2\2\u00f8\u00f6\3\2\2\2\u00f9\u00fa\7")
        buf.write("\4\2\2\u00fa\33\3\2\2\2\u00fb\u00fd\7\6\2\2\u00fc\u00fe")
        buf.write("\7\u008e\2\2\u00fd\u00fc\3\2\2\2\u00fd\u00fe\3\2\2\2\u00fe")
        buf.write("\u00ff\3\2\2\2\u00ff\u017c\7%\2\2\u0100\u017c\5\36\20")
        buf.write("\2\u0101\u0102\7\b\2\2\u0102\u0103\7\u0088\2\2\u0103\u017c")
        buf.write("\5j\66\2\u0104\u0105\7\t\2\2\u0105\u0106\7\u0088\2\2\u0106")
        buf.write("\u017c\7*\2\2\u0107\u0108\7\n\2\2\u0108\u0109\7\u0088")
        buf.write("\2\2\u0109\u017c\5j\66\2\u010a\u010c\7\13\2\2\u010b\u010d")
        buf.write("\7\u008e\2\2\u010c\u010b\3\2\2\2\u010c\u010d\3\2\2\2\u010d")
        buf.write("\u010e\3\2\2\2\u010e\u017c\5j\66\2\u010f\u0111\7\f\2\2")
        buf.write("\u0110\u0112\7\u008e\2\2\u0111\u0110\3\2\2\2\u0111\u0112")
        buf.write("\3\2\2\2\u0112\u0113\3\2\2\2\u0113\u017c\7\u0088\2\2\u0114")
        buf.write("\u0115\7\r\2\2\u0115\u017c\7\u0088\2\2\u0116\u0118\7\16")
        buf.write("\2\2\u0117\u0119\7\u008e\2\2\u0118\u0117\3\2\2\2\u0118")
        buf.write("\u0119\3\2\2\2\u0119\u011a\3\2\2\2\u011a\u017c\7\u0084")
        buf.write("\2\2\u011b\u011c\7\17\2\2\u011c\u017c\7&\2\2\u011d\u011e")
        buf.write("\7\17\2\2\u011e\u011f\7\'\2\2\u011f\u0121\7(\2\2\u0120")
        buf.write("\u0122\7\u008e\2\2\u0121\u0120\3\2\2\2\u0121\u0122\3\2")
        buf.write("\2\2\u0122\u0123\3\2\2\2\u0123\u0124\5j\66\2\u0124\u0126")
        buf.write("\7)\2\2\u0125\u0127\7\u008e\2\2\u0126\u0125\3\2\2\2\u0126")
        buf.write("\u0127\3\2\2\2\u0127\u0128\3\2\2\2\u0128\u0129\5j\66\2")
        buf.write("\u0129\u017c\3\2\2\2\u012a\u012b\7\20\2\2\u012b\u012c")
        buf.write("\7\u0088\2\2\u012c\u012d\7\u0088\2\2\u012d\u017c\5j\66")
        buf.write("\2\u012e\u0130\7\21\2\2\u012f\u012e\3\2\2\2\u0130\u0133")
        buf.write("\3\2\2\2\u0131\u0132\3\2\2\2\u0131\u012f\3\2\2\2\u0132")
        buf.write("\u0134\3\2\2\2\u0133\u0131\3\2\2\2\u0134\u017c\7\4\2\2")
        buf.write("\u0135\u0136\7\22\2\2\u0136\u0137\7\u0088\2\2\u0137\u017c")
        buf.write("\7\u0084\2\2\u0138\u0139\7\23\2\2\u0139\u013a\7\u0088")
        buf.write("\2\2\u013a\u017c\7\u0084\2\2\u013b\u013d\7\24\2\2\u013c")
        buf.write("\u013e\7\u008e\2\2\u013d\u013c\3\2\2\2\u013d\u013e\3\2")
        buf.write("\2\2\u013e\u013f\3\2\2\2\u013f\u017c\7\u0084\2\2\u0140")
        buf.write("\u017c\7\25\2\2\u0141\u0143\7\26\2\2\u0142\u0144\7\u008e")
        buf.write("\2\2\u0143\u0142\3\2\2\2\u0143\u0144\3\2\2\2\u0144\u0145")
        buf.write("\3\2\2\2\u0145\u017c\7\u0084\2\2\u0146\u0147\7\27\2\2")
        buf.write("\u0147\u0148\7\u0088\2\2\u0148\u017c\7+\2\2\u0149\u014a")
        buf.write("\7\30\2\2\u014a\u014b\5 \21\2\u014b\u014c\7\4\2\2\u014c")
        buf.write("\u017c\3\2\2\2\u014d\u014e\7\31\2\2\u014e\u0150\7\33\2")
        buf.write("\2\u014f\u0151\7\u008e\2\2\u0150\u014f\3\2\2\2\u0150\u0151")
        buf.write("\3\2\2\2\u0151\u0152\3\2\2\2\u0152\u017c\5j\66\2\u0153")
        buf.write("\u0157\7\32\2\2\u0154\u0156\7\u0088\2\2\u0155\u0154\3")
        buf.write("\2\2\2\u0156\u0159\3\2\2\2\u0157\u0158\3\2\2\2\u0157\u0155")
        buf.write("\3\2\2\2\u0158\u015a\3\2\2\2\u0159\u0157\3\2\2\2\u015a")
        buf.write("\u017c\7\4\2\2\u015b\u017c\7\34\2\2\u015c\u015d\7\35\2")
        buf.write("\2\u015d\u015e\7\u0088\2\2\u015e\u017c\5j\66\2\u015f\u0160")
        buf.write("\7\36\2\2\u0160\u0161\7\u0088\2\2\u0161\u017c\5j\66\2")
        buf.write("\u0162\u0163\7\37\2\2\u0163\u0164\7\u0088\2\2\u0164\u017c")
        buf.write("\5j\66\2\u0165\u0166\7 \2\2\u0166\u0167\7\u0088\2\2\u0167")
        buf.write("\u017c\5j\66\2\u0168\u0169\7!\2\2\u0169\u016a\7\u0088")
        buf.write("\2\2\u016a\u017c\5j\66\2\u016b\u016c\7\"\2\2\u016c\u016d")
        buf.write("\7\u0088\2\2\u016d\u017c\5j\66\2\u016e\u0172\7#\2\2\u016f")
        buf.write("\u0171\7\u0088\2\2\u0170\u016f\3\2\2\2\u0171\u0174\3\2")
        buf.write("\2\2\u0172\u0173\3\2\2\2\u0172\u0170\3\2\2\2\u0173\u0175")
        buf.write("\3\2\2\2\u0174\u0172\3\2\2\2\u0175\u017c\7\4\2\2\u0176")
        buf.write("\u0178\7$\2\2\u0177\u0179\7\u008e\2\2\u0178\u0177\3\2")
        buf.write("\2\2\u0178\u0179\3\2\2\2\u0179\u017a\3\2\2\2\u017a\u017c")
        buf.write("\5j\66\2\u017b\u00fb\3\2\2\2\u017b\u0100\3\2\2\2\u017b")
        buf.write("\u0101\3\2\2\2\u017b\u0104\3\2\2\2\u017b\u0107\3\2\2\2")
        buf.write("\u017b\u010a\3\2\2\2\u017b\u010f\3\2\2\2\u017b\u0114\3")
        buf.write("\2\2\2\u017b\u0116\3\2\2\2\u017b\u011b\3\2\2\2\u017b\u011d")
        buf.write("\3\2\2\2\u017b\u012a\3\2\2\2\u017b\u0131\3\2\2\2\u017b")
        buf.write("\u0135\3\2\2\2\u017b\u0138\3\2\2\2\u017b\u013b\3\2\2\2")
        buf.write("\u017b\u0140\3\2\2\2\u017b\u0141\3\2\2\2\u017b\u0146\3")
        buf.write("\2\2\2\u017b\u0149\3\2\2\2\u017b\u014d\3\2\2\2\u017b\u0153")
        buf.write("\3\2\2\2\u017b\u015b\3\2\2\2\u017b\u015c\3\2\2\2\u017b")
        buf.write("\u015f\3\2\2\2\u017b\u0162\3\2\2\2\u017b\u0165\3\2\2\2")
        buf.write("\u017b\u0168\3\2\2\2\u017b\u016b\3\2\2\2\u017b\u016e\3")
        buf.write("\2\2\2\u017b\u0176\3\2\2\2\u017c\35\3\2\2\2\u017d\u017e")
        buf.write("\7\7\2\2\u017e\u017f\5^\60\2\u017f\u0180\5^\60\2\u0180")
        buf.write("\u0181\5f\64\2\u0181\u0182\5f\64\2\u0182\u0188\5f\64\2")
        buf.write("\u0183\u0185\7\67\2\2\u0184\u0186\7\u008e\2\2\u0185\u0184")
        buf.write("\3\2\2\2\u0185\u0186\3\2\2\2\u0186\u0187\3\2\2\2\u0187")
        buf.write("\u0189\5f\64\2\u0188\u0183\3\2\2\2\u0188\u0189\3\2\2\2")
        buf.write("\u0189\u0190\3\2\2\2\u018a\u018b\7\177\2\2\u018b\u018c")
        buf.write("\5^\60\2\u018c\u018d\5^\60\2\u018d\u018f\3\2\2\2\u018e")
        buf.write("\u018a\3\2\2\2\u018f\u0192\3\2\2\2\u0190\u018e\3\2\2\2")
        buf.write("\u0190\u0191\3\2\2\2\u0191\37\3\2\2\2\u0192\u0190\3\2")
        buf.write("\2\2\u0193\u0195\7,\2\2\u0194\u0196\7\u008e\2\2\u0195")
        buf.write("\u0194\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0197\3\2\2\2")
        buf.write("\u0197\u01a2\5j\66\2\u0198\u019a\7-\2\2\u0199\u019b\7")
        buf.write("\u008e\2\2\u019a\u0199\3\2\2\2\u019a\u019b\3\2\2\2\u019b")
        buf.write("\u019c\3\2\2\2\u019c\u01a2\5j\66\2\u019d\u019e\7.\2\2")
        buf.write("\u019e\u01a2\5^\60\2\u019f\u01a0\7/\2\2\u01a0\u01a2\5")
        buf.write("^\60\2\u01a1\u0193\3\2\2\2\u01a1\u0198\3\2\2\2\u01a1\u019d")
        buf.write("\3\2\2\2\u01a1\u019f\3\2\2\2\u01a2!\3\2\2\2\u01a3\u01bb")
        buf.write("\5$\23\2\u01a4\u01a6\7\16\2\2\u01a5\u01a7\7\u008e\2\2")
        buf.write("\u01a6\u01a5\3\2\2\2\u01a6\u01a7\3\2\2\2\u01a7\u01a8\3")
        buf.write("\2\2\2\u01a8\u01bb\7\u0084\2\2\u01a9\u01ab\7\62\2\2\u01aa")
        buf.write("\u01ac\7\u008e\2\2\u01ab\u01aa\3\2\2\2\u01ab\u01ac\3\2")
        buf.write("\2\2\u01ac\u01ad\3\2\2\2\u01ad\u01bb\7\u0084\2\2\u01ae")
        buf.write("\u01b0\7\26\2\2\u01af\u01b1\7\u008e\2\2\u01b0\u01af\3")
        buf.write("\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b2\3\2\2\2\u01b2\u01bb")
        buf.write("\7\u0084\2\2\u01b3\u01bb\7\34\2\2\u01b4\u01b6\7\36\2\2")
        buf.write("\u01b5\u01b7\7\u008e\2\2\u01b6\u01b5\3\2\2\2\u01b6\u01b7")
        buf.write("\3\2\2\2\u01b7\u01b8\3\2\2\2\u01b8\u01bb\5j\66\2\u01b9")
        buf.write("\u01bb\7\63\2\2\u01ba\u01a3\3\2\2\2\u01ba\u01a4\3\2\2")
        buf.write("\2\u01ba\u01a9\3\2\2\2\u01ba\u01ae\3\2\2\2\u01ba\u01b3")
        buf.write("\3\2\2\2\u01ba\u01b4\3\2\2\2\u01ba\u01b9\3\2\2\2\u01bb")
        buf.write("#\3\2\2\2\u01bc\u01bd\7\7\2\2\u01bd\u01be\5^\60\2\u01be")
        buf.write("\u01bf\5^\60\2\u01bf\u01c0\5^\60\2\u01c0\u01c1\5^\60\2")
        buf.write("\u01c1\u01c2\5f\64\2\u01c2\u01c3\5f\64\2\u01c3\u01c4\5")
        buf.write("f\64\2\u01c4\u01c5\7\u0084\2\2\u01c5%\3\2\2\2\u01c6\u01ca")
        buf.write("\7\65\2\2\u01c7\u01c9\5(\25\2\u01c8\u01c7\3\2\2\2\u01c9")
        buf.write("\u01cc\3\2\2\2\u01ca\u01c8\3\2\2\2\u01ca\u01cb\3\2\2\2")
        buf.write("\u01cb\u01cd\3\2\2\2\u01cc\u01ca\3\2\2\2\u01cd\u01d1\7")
        buf.write("\4\2\2\u01ce\u01d1\7&\2\2\u01cf\u01d1\7\63\2\2\u01d0\u01c6")
        buf.write("\3\2\2\2\u01d0\u01ce\3\2\2\2\u01d0\u01cf\3\2\2\2\u01d1")
        buf.write("\'\3\2\2\2\u01d2\u01d4\7\66\2\2\u01d3\u01d5\7\u008e\2")
        buf.write("\2\u01d4\u01d3\3\2\2\2\u01d4\u01d5\3\2\2\2\u01d5\u01d6")
        buf.write("\3\2\2\2\u01d6\u01dd\5^\60\2\u01d7\u01d9\7\67\2\2\u01d8")
        buf.write("\u01da\7\u008e\2\2\u01d9\u01d8\3\2\2\2\u01d9\u01da\3\2")
        buf.write("\2\2\u01da\u01db\3\2\2\2\u01db\u01dd\5j\66\2\u01dc\u01d2")
        buf.write("\3\2\2\2\u01dc\u01d7\3\2\2\2\u01dd)\3\2\2\2\u01de\u01e0")
        buf.write("\79\2\2\u01df\u01e1\7\u008e\2\2\u01e0\u01df\3\2\2\2\u01e0")
        buf.write("\u01e1\3\2\2\2\u01e1\u01e2\3\2\2\2\u01e2\u0206\7\u0084")
        buf.write("\2\2\u01e3\u01e5\7:\2\2\u01e4\u01e6\7\u008e\2\2\u01e5")
        buf.write("\u01e4\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e7\3\2\2\2")
        buf.write("\u01e7\u0201\7\u008b\2\2\u01e8\u01ea\5j\66\2\u01e9\u01eb")
        buf.write("\7\u0082\2\2\u01ea\u01e9\3\2\2\2\u01ea\u01eb\3\2\2\2\u01eb")
        buf.write("\u01ec\3\2\2\2\u01ec\u01ee\5j\66\2\u01ed\u01ef\7\u0082")
        buf.write("\2\2\u01ee\u01ed\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f0")
        buf.write("\3\2\2\2\u01f0\u01f1\5j\66\2\u01f1\u0202\3\2\2\2\u01f2")
        buf.write("\u01f4\7}\2\2\u01f3\u01f5\7\u008e\2\2\u01f4\u01f3\3\2")
        buf.write("\2\2\u01f4\u01f5\3\2\2\2\u01f5\u01f6\3\2\2\2\u01f6\u01f8")
        buf.write("\5^\60\2\u01f7\u01f9\7\u0082\2\2\u01f8\u01f7\3\2\2\2\u01f8")
        buf.write("\u01f9\3\2\2\2\u01f9\u01ff\3\2\2\2\u01fa\u01fc\7~\2\2")
        buf.write("\u01fb\u01fd\7\u008e\2\2\u01fc\u01fb\3\2\2\2\u01fc\u01fd")
        buf.write("\3\2\2\2\u01fd\u01fe\3\2\2\2\u01fe\u0200\5^\60\2\u01ff")
        buf.write("\u01fa\3\2\2\2\u01ff\u0200\3\2\2\2\u0200\u0202\3\2\2\2")
        buf.write("\u0201\u01e8\3\2\2\2\u0201\u01f2\3\2\2\2\u0202\u0203\3")
        buf.write("\2\2\2\u0203\u0204\7\u008c\2\2\u0204\u0206\3\2\2\2\u0205")
        buf.write("\u01de\3\2\2\2\u0205\u01e3\3\2\2\2\u0206+\3\2\2\2\u0207")
        buf.write("\u0226\5.\30\2\u0208\u020a\7\f\2\2\u0209\u020b\7\u008e")
        buf.write("\2\2\u020a\u0209\3\2\2\2\u020a\u020b\3\2\2\2\u020b\u020c")
        buf.write("\3\2\2\2\u020c\u0226\7\u0088\2\2\u020d\u020e\7<\2\2\u020e")
        buf.write("\u020f\5j\66\2\u020f\u0210\5j\66\2\u0210\u0211\5j\66\2")
        buf.write("\u0211\u0226\3\2\2\2\u0212\u0214\7=\2\2\u0213\u0215\7")
        buf.write("\u008e\2\2\u0214\u0213\3\2\2\2\u0214\u0215\3\2\2\2\u0215")
        buf.write("\u0216\3\2\2\2\u0216\u0226\5j\66\2\u0217\u0219\7\24\2")
        buf.write("\2\u0218\u021a\7\u008e\2\2\u0219\u0218\3\2\2\2\u0219\u021a")
        buf.write("\3\2\2\2\u021a\u021b\3\2\2\2\u021b\u0226\7\u0084\2\2\u021c")
        buf.write("\u021e\7\27\2\2\u021d\u021f\7\u008e\2\2\u021e\u021d\3")
        buf.write("\2\2\2\u021e\u021f\3\2\2\2\u021f\u0220\3\2\2\2\u0220\u0226")
        buf.write("\7>\2\2\u0221\u0222\7\31\2\2\u0222\u0223\7\33\2\2\u0223")
        buf.write("\u0226\5j\66\2\u0224\u0226\7\34\2\2\u0225\u0207\3\2\2")
        buf.write("\2\u0225\u0208\3\2\2\2\u0225\u020d\3\2\2\2\u0225\u0212")
        buf.write("\3\2\2\2\u0225\u0217\3\2\2\2\u0225\u021c\3\2\2\2\u0225")
        buf.write("\u0221\3\2\2\2\u0225\u0224\3\2\2\2\u0226-\3\2\2\2\u0227")
        buf.write("\u0228\7\7\2\2\u0228\u0229\5^\60\2\u0229\u022a\5^\60\2")
        buf.write("\u022a\u022b\5^\60\2\u022b\u022c\5^\60\2\u022c\u022d\5")
        buf.write("^\60\2\u022d\u022e\5^\60\2\u022e\u022f\5f\64\2\u022f\u0231")
        buf.write("\5f\64\2\u0230\u0232\5f\64\2\u0231\u0230\3\2\2\2\u0231")
        buf.write("\u0232\3\2\2\2\u0232/\3\2\2\2\u0233\u0265\5\62\32\2\u0234")
        buf.write("\u0236\7\f\2\2\u0235\u0237\7\u008e\2\2\u0236\u0235\3\2")
        buf.write("\2\2\u0236\u0237\3\2\2\2\u0237\u0238\3\2\2\2\u0238\u0265")
        buf.write("\7\u0088\2\2\u0239\u023a\7<\2\2\u023a\u023b\5j\66\2\u023b")
        buf.write("\u023c\5j\66\2\u023c\u023d\5j\66\2\u023d\u023e\5j\66\2")
        buf.write("\u023e\u0265\3\2\2\2\u023f\u0241\7\16\2\2\u0240\u0242")
        buf.write("\7\u008e\2\2\u0241\u0240\3\2\2\2\u0241\u0242\3\2\2\2\u0242")
        buf.write("\u0243\3\2\2\2\u0243\u0265\7\u0084\2\2\u0244\u0245\7=")
        buf.write("\2\2\u0245\u0247\5j\66\2\u0246\u0248\5j\66\2\u0247\u0246")
        buf.write("\3\2\2\2\u0247\u0248\3\2\2\2\u0248\u0265\3\2\2\2\u0249")
        buf.write("\u024b\7\24\2\2\u024a\u024c\7\u008e\2\2\u024b\u024a\3")
        buf.write("\2\2\2\u024b\u024c\3\2\2\2\u024c\u024d\3\2\2\2\u024d\u0265")
        buf.write("\7\u0084\2\2\u024e\u0250\7\26\2\2\u024f\u0251\7\u008e")
        buf.write("\2\2\u0250\u024f\3\2\2\2\u0250\u0251\3\2\2\2\u0251\u0252")
        buf.write("\3\2\2\2\u0252\u0265\7\u0084\2\2\u0253\u0255\7\27\2\2")
        buf.write("\u0254\u0256\7\u008e\2\2\u0255\u0254\3\2\2\2\u0255\u0256")
        buf.write("\3\2\2\2\u0256\u0257\3\2\2\2\u0257\u0265\7@\2\2\u0258")
        buf.write("\u0259\7\31\2\2\u0259\u025a\7\33\2\2\u025a\u0261\5j\66")
        buf.write("\2\u025b\u0262\7\\\2\2\u025c\u025e\7\f\2\2\u025d\u025f")
        buf.write("\7\u008e\2\2\u025e\u025d\3\2\2\2\u025e\u025f\3\2\2\2\u025f")
        buf.write("\u0260\3\2\2\2\u0260\u0262\7\u0088\2\2\u0261\u025b\3\2")
        buf.write("\2\2\u0261\u025c\3\2\2\2\u0262\u0265\3\2\2\2\u0263\u0265")
        buf.write("\7\34\2\2\u0264\u0233\3\2\2\2\u0264\u0234\3\2\2\2\u0264")
        buf.write("\u0239\3\2\2\2\u0264\u023f\3\2\2\2\u0264\u0244\3\2\2\2")
        buf.write("\u0264\u0249\3\2\2\2\u0264\u024e\3\2\2\2\u0264\u0253\3")
        buf.write("\2\2\2\u0264\u0258\3\2\2\2\u0264\u0263\3\2\2\2\u0265\61")
        buf.write("\3\2\2\2\u0266\u0267\7\7\2\2\u0267\u0268\5^\60\2\u0268")
        buf.write("\u0269\5^\60\2\u0269\u026a\5^\60\2\u026a\u0270\5^\60\2")
        buf.write("\u026b\u026c\5^\60\2\u026c\u026d\5^\60\2\u026d\u026e\5")
        buf.write("^\60\2\u026e\u026f\5^\60\2\u026f\u0271\3\2\2\2\u0270\u026b")
        buf.write("\3\2\2\2\u0270\u0271\3\2\2\2\u0271\u0272\3\2\2\2\u0272")
        buf.write("\u0273\5f\64\2\u0273\u0277\5f\64\2\u0274\u0275\5f\64\2")
        buf.write("\u0275\u0276\5f\64\2\u0276\u0278\3\2\2\2\u0277\u0274\3")
        buf.write("\2\2\2\u0277\u0278\3\2\2\2\u0278\63\3\2\2\2\u0279\u02a6")
        buf.write("\5\66\34\2\u027a\u027c\7\f\2\2\u027b\u027d\7\u008e\2\2")
        buf.write("\u027c\u027b\3\2\2\2\u027c\u027d\3\2\2\2\u027d\u027e\3")
        buf.write("\2\2\2\u027e\u02a6\7\u0088\2\2\u027f\u0280\7B\2\2\u0280")
        buf.write("\u0281\7\u0084\2\2\u0281\u0282\7\u0084\2\2\u0282\u0283")
        buf.write("\5j\66\2\u0283\u0284\5j\66\2\u0284\u0285\5j\66\2\u0285")
        buf.write("\u02a6\3\2\2\2\u0286\u0288\7=\2\2\u0287\u0289\7\u008e")
        buf.write("\2\2\u0288\u0287\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u028a")
        buf.write("\3\2\2\2\u028a\u02a6\5j\66\2\u028b\u028d\7\24\2\2\u028c")
        buf.write("\u028e\7\u008e\2\2\u028d\u028c\3\2\2\2\u028d\u028e\3\2")
        buf.write("\2\2\u028e\u028f\3\2\2\2\u028f\u02a6\7\u0084\2\2\u0290")
        buf.write("\u0292\7C\2\2\u0291\u0293\7\u008e\2\2\u0292\u0291\3\2")
        buf.write("\2\2\u0292\u0293\3\2\2\2\u0293\u0294\3\2\2\2\u0294\u02a6")
        buf.write("\5j\66\2\u0295\u0297\7D\2\2\u0296\u0298\7\u008e\2\2\u0297")
        buf.write("\u0296\3\2\2\2\u0297\u0298\3\2\2\2\u0298\u0299\3\2\2\2")
        buf.write("\u0299\u02a6\5j\66\2\u029a\u029c\7\27\2\2\u029b\u029d")
        buf.write("\7\u008e\2\2\u029c\u029b\3\2\2\2\u029c\u029d\3\2\2\2\u029d")
        buf.write("\u029e\3\2\2\2\u029e\u02a6\7>\2\2\u029f\u02a0\7\31\2\2")
        buf.write("\u02a0\u02a1\7\33\2\2\u02a1\u02a6\5j\66\2\u02a2\u02a6")
        buf.write("\58\35\2\u02a3\u02a6\7\34\2\2\u02a4\u02a6\7F\2\2\u02a5")
        buf.write("\u0279\3\2\2\2\u02a5\u027a\3\2\2\2\u02a5\u027f\3\2\2\2")
        buf.write("\u02a5\u0286\3\2\2\2\u02a5\u028b\3\2\2\2\u02a5\u0290\3")
        buf.write("\2\2\2\u02a5\u0295\3\2\2\2\u02a5\u029a\3\2\2\2\u02a5\u029f")
        buf.write("\3\2\2\2\u02a5\u02a2\3\2\2\2\u02a5\u02a3\3\2\2\2\u02a5")
        buf.write("\u02a4\3\2\2\2\u02a6\65\3\2\2\2\u02a7\u02a8\7\7\2\2\u02a8")
        buf.write("\u02a9\5^\60\2\u02a9\u02aa\5^\60\2\u02aa\u02ab\5^\60\2")
        buf.write("\u02ab\u02ac\5^\60\2\u02ac\u02ad\5^\60\2\u02ad\u02ae\5")
        buf.write("f\64\2\u02ae\u02af\5f\64\2\u02af\67\3\2\2\2\u02b0\u02b1")
        buf.write("\7E\2\2\u02b1\u02b2\5^\60\2\u02b2\u02b3\5j\66\2\u02b3")
        buf.write("\u02b4\5j\66\2\u02b49\3\2\2\2\u02b5\u02de\5<\37\2\u02b6")
        buf.write("\u02de\5> \2\u02b7\u02de\5@!\2\u02b8\u02de\5B\"\2\u02b9")
        buf.write("\u02de\5D#\2\u02ba\u02de\5F$\2\u02bb\u02de\5H%\2\u02bc")
        buf.write("\u02de\5J&\2\u02bd\u02de\5L\'\2\u02be\u02c0\7\f\2\2\u02bf")
        buf.write("\u02c1\7\u008e\2\2\u02c0\u02bf\3\2\2\2\u02c0\u02c1\3\2")
        buf.write("\2\2\u02c1\u02c2\3\2\2\2\u02c2\u02de\7\u0088\2\2\u02c3")
        buf.write("\u02c5\7P\2\2\u02c4\u02c6\7\u008e\2\2\u02c5\u02c4\3\2")
        buf.write("\2\2\u02c5\u02c6\3\2\2\2\u02c6\u02c7\3\2\2\2\u02c7\u02de")
        buf.write("\5j\66\2\u02c8\u02c9\7=\2\2\u02c9\u02cb\5j\66\2\u02ca")
        buf.write("\u02cc\5j\66\2\u02cb\u02ca\3\2\2\2\u02cb\u02cc\3\2\2\2")
        buf.write("\u02cc\u02de\3\2\2\2\u02cd\u02ce\7\27\2\2\u02ce\u02de")
        buf.write("\7@\2\2\u02cf\u02d0\7\31\2\2\u02d0\u02d1\7\33\2\2\u02d1")
        buf.write("\u02d8\5j\66\2\u02d2\u02d9\7\\\2\2\u02d3\u02d5\7\f\2\2")
        buf.write("\u02d4\u02d6\7\u008e\2\2\u02d5\u02d4\3\2\2\2\u02d5\u02d6")
        buf.write("\3\2\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d9\7\u0088\2\2\u02d8")
        buf.write("\u02d2\3\2\2\2\u02d8\u02d3\3\2\2\2\u02d9\u02da\3\2\2\2")
        buf.write("\u02da\u02db\7\u0088\2\2\u02db\u02de\3\2\2\2\u02dc\u02de")
        buf.write("\7\34\2\2\u02dd\u02b5\3\2\2\2\u02dd\u02b6\3\2\2\2\u02dd")
        buf.write("\u02b7\3\2\2\2\u02dd\u02b8\3\2\2\2\u02dd\u02b9\3\2\2\2")
        buf.write("\u02dd\u02ba\3\2\2\2\u02dd\u02bb\3\2\2\2\u02dd\u02bc\3")
        buf.write("\2\2\2\u02dd\u02bd\3\2\2\2\u02dd\u02be\3\2\2\2\u02dd\u02c3")
        buf.write("\3\2\2\2\u02dd\u02c8\3\2\2\2\u02dd\u02cd\3\2\2\2\u02dd")
        buf.write("\u02cf\3\2\2\2\u02dd\u02dc\3\2\2\2\u02de;\3\2\2\2\u02df")
        buf.write("\u02e0\7H\2\2\u02e0\u02e2\5^\60\2\u02e1\u02e3\5^\60\2")
        buf.write("\u02e2\u02e1\3\2\2\2\u02e2\u02e3\3\2\2\2\u02e3\u02e4\3")
        buf.write("\2\2\2\u02e4\u02e6\5j\66\2\u02e5\u02e7\5j\66\2\u02e6\u02e5")
        buf.write("\3\2\2\2\u02e6\u02e7\3\2\2\2\u02e7=\3\2\2\2\u02e8\u02e9")
        buf.write("\7E\2\2\u02e9\u02ea\5^\60\2\u02ea\u02eb\5j\66\2\u02eb")
        buf.write("?\3\2\2\2\u02ec\u02ed\7I\2\2\u02ed\u02ee\5^\60\2\u02ee")
        buf.write("\u02ef\5^\60\2\u02ef\u02f0\5^\60\2\u02f0\u02f2\7\u0088")
        buf.write("\2\2\u02f1\u02f3\7\u0085\2\2\u02f2\u02f1\3\2\2\2\u02f2")
        buf.write("\u02f3\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4\u02f5\7\u0088")
        buf.write("\2\2\u02f5A\3\2\2\2\u02f6\u02f7\7J\2\2\u02f7\u02f8\5^")
        buf.write("\60\2\u02f8C\3\2\2\2\u02f9\u02fa\7K\2\2\u02fa\u02fb\5")
        buf.write("^\60\2\u02fbE\3\2\2\2\u02fc\u02fd\7L\2\2\u02fd\u02fe\5")
        buf.write("^\60\2\u02feG\3\2\2\2\u02ff\u0300\7M\2\2\u0300\u0301\5")
        buf.write("^\60\2\u0301I\3\2\2\2\u0302\u0303\7N\2\2\u0303\u0304\7")
        buf.write("\u0088\2\2\u0304\u0305\5^\60\2\u0305\u0306\5^\60\2\u0306")
        buf.write("\u0307\5^\60\2\u0307\u0308\5^\60\2\u0308\u030a\5^\60\2")
        buf.write("\u0309\u030b\5^\60\2\u030a\u0309\3\2\2\2\u030a\u030b\3")
        buf.write("\2\2\2\u030bK\3\2\2\2\u030c\u030d\7O\2\2\u030d\u030e\5")
        buf.write("^\60\2\u030eM\3\2\2\2\u030f\u0363\5P)\2\u0310\u0312\7")
        buf.write("\f\2\2\u0311\u0313\7\u008e\2\2\u0312\u0311\3\2\2\2\u0312")
        buf.write("\u0313\3\2\2\2\u0313\u0314\3\2\2\2\u0314\u0363\7\u0088")
        buf.write("\2\2\u0315\u0363\7R\2\2\u0316\u0317\7B\2\2\u0317\u0319")
        buf.write("\7\u0084\2\2\u0318\u031a\7\u0084\2\2\u0319\u0318\3\2\2")
        buf.write("\2\u0319\u031a\3\2\2\2\u031a\u031c\3\2\2\2\u031b\u031d")
        buf.write("\7\u0084\2\2\u031c\u031b\3\2\2\2\u031c\u031d\3\2\2\2\u031d")
        buf.write("\u031f\3\2\2\2\u031e\u0320\7\u0084\2\2\u031f\u031e\3\2")
        buf.write("\2\2\u031f\u0320\3\2\2\2\u0320\u0321\3\2\2\2\u0321\u0363")
        buf.write("\5j\66\2\u0322\u0324\7P\2\2\u0323\u0325\7\u008e\2\2\u0324")
        buf.write("\u0323\3\2\2\2\u0324\u0325\3\2\2\2\u0325\u0326\3\2\2\2")
        buf.write("\u0326\u0363\5j\66\2\u0327\u0329\7=\2\2\u0328\u032a\7")
        buf.write("\u008e\2\2\u0329\u0328\3\2\2\2\u0329\u032a\3\2\2\2\u032a")
        buf.write("\u032b\3\2\2\2\u032b\u0363\5j\66\2\u032c\u032e\7\24\2")
        buf.write("\2\u032d\u032f\7\u008e\2\2\u032e\u032d\3\2\2\2\u032e\u032f")
        buf.write("\3\2\2\2\u032f\u0330\3\2\2\2\u0330\u0363\7\u0084\2\2\u0331")
        buf.write("\u0332\7S\2\2\u0332\u0333\7\u0084\2\2\u0333\u0334\7\u0084")
        buf.write("\2\2\u0334\u0338\7\u0084\2\2\u0335\u0336\7\u0084\2\2\u0336")
        buf.write("\u0337\7\u0084\2\2\u0337\u0339\7\u0084\2\2\u0338\u0335")
        buf.write("\3\2\2\2\u0338\u0339\3\2\2\2\u0339\u033d\3\2\2\2\u033a")
        buf.write("\u033b\7\u0084\2\2\u033b\u033c\7\u0084\2\2\u033c\u033e")
        buf.write("\7\u0084\2\2\u033d\u033a\3\2\2\2\u033d\u033e\3\2\2\2\u033e")
        buf.write("\u0342\3\2\2\2\u033f\u0340\7\u0084\2\2\u0340\u0341\7\u0084")
        buf.write("\2\2\u0341\u0343\7\u0084\2\2\u0342\u033f\3\2\2\2\u0342")
        buf.write("\u0343\3\2\2\2\u0343\u0363\3\2\2\2\u0344\u0346\7\27\2")
        buf.write("\2\u0345\u0347\7\u008e\2\2\u0346\u0345\3\2\2\2\u0346\u0347")
        buf.write("\3\2\2\2\u0347\u0348\3\2\2\2\u0348\u0363\7>\2\2\u0349")
        buf.write("\u034a\7\31\2\2\u034a\u034b\7\33\2\2\u034b\u0352\5j\66")
        buf.write("\2\u034c\u0353\7\\\2\2\u034d\u034f\7\f\2\2\u034e\u0350")
        buf.write("\7\u008e\2\2\u034f\u034e\3\2\2\2\u034f\u0350\3\2\2\2\u0350")
        buf.write("\u0351\3\2\2\2\u0351\u0353\7\u0088\2\2\u0352\u034c\3\2")
        buf.write("\2\2\u0352\u034d\3\2\2\2\u0353\u0363\3\2\2\2\u0354\u0363")
        buf.write("\7\34\2\2\u0355\u0356\7T\2\2\u0356\u0357\7U\2\2\u0357")
        buf.write("\u0359\7\u0084\2\2\u0358\u035a\7\u0084\2\2\u0359\u0358")
        buf.write("\3\2\2\2\u0359\u035a\3\2\2\2\u035a\u035c\3\2\2\2\u035b")
        buf.write("\u035d\7\u0084\2\2\u035c\u035b\3\2\2\2\u035c\u035d\3\2")
        buf.write("\2\2\u035d\u035f\3\2\2\2\u035e\u0360\7\u0084\2\2\u035f")
        buf.write("\u035e\3\2\2\2\u035f\u0360\3\2\2\2\u0360\u0363\3\2\2\2")
        buf.write("\u0361\u0363\7F\2\2\u0362\u030f\3\2\2\2\u0362\u0310\3")
        buf.write("\2\2\2\u0362\u0315\3\2\2\2\u0362\u0316\3\2\2\2\u0362\u0322")
        buf.write("\3\2\2\2\u0362\u0327\3\2\2\2\u0362\u032c\3\2\2\2\u0362")
        buf.write("\u0331\3\2\2\2\u0362\u0344\3\2\2\2\u0362\u0349\3\2\2\2")
        buf.write("\u0362\u0354\3\2\2\2\u0362\u0355\3\2\2\2\u0362\u0361\3")
        buf.write("\2\2\2\u0363O\3\2\2\2\u0364\u0365\7\7\2\2\u0365\u0366")
        buf.write("\5^\60\2\u0366\u0367\5^\60\2\u0367\u0368\5^\60\2\u0368")
        buf.write("\u036e\5^\60\2\u0369\u036a\5^\60\2\u036a\u036b\5^\60\2")
        buf.write("\u036b\u036c\5^\60\2\u036c\u036d\5^\60\2\u036d\u036f\3")
        buf.write("\2\2\2\u036e\u0369\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u0375")
        buf.write("\3\2\2\2\u0370\u0371\5^\60\2\u0371\u0372\5^\60\2\u0372")
        buf.write("\u0373\5^\60\2\u0373\u0374\5^\60\2\u0374\u0376\3\2\2\2")
        buf.write("\u0375\u0370\3\2\2\2\u0375\u0376\3\2\2\2\u0376\u037c\3")
        buf.write("\2\2\2\u0377\u0378\5^\60\2\u0378\u0379\5^\60\2\u0379\u037a")
        buf.write("\5^\60\2\u037a\u037b\5^\60\2\u037b\u037d\3\2\2\2\u037c")
        buf.write("\u0377\3\2\2\2\u037c\u037d\3\2\2\2\u037dQ\3\2\2\2\u037e")
        buf.write("\u039f\5T+\2\u037f\u0381\7\f\2\2\u0380\u0382\7\u008e\2")
        buf.write("\2\u0381\u0380\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u0383")
        buf.write("\3\2\2\2\u0383\u039f\7\u0088\2\2\u0384\u0385\7<\2\2\u0385")
        buf.write("\u0386\5j\66\2\u0386\u0387\5j\66\2\u0387\u0388\5j\66\2")
        buf.write("\u0388\u0389\5j\66\2\u0389\u038a\5j\66\2\u038a\u039f\3")
        buf.write("\2\2\2\u038b\u038d\7=\2\2\u038c\u038e\7\u008e\2\2\u038d")
        buf.write("\u038c\3\2\2\2\u038d\u038e\3\2\2\2\u038e\u038f\3\2\2\2")
        buf.write("\u038f\u039f\5j\66\2\u0390\u0392\7\24\2\2\u0391\u0393")
        buf.write("\7\u008e\2\2\u0392\u0391\3\2\2\2\u0392\u0393\3\2\2\2\u0393")
        buf.write("\u0394\3\2\2\2\u0394\u039f\7\u0084\2\2\u0395\u0397\7\27")
        buf.write("\2\2\u0396\u0398\7\u008e\2\2\u0397\u0396\3\2\2\2\u0397")
        buf.write("\u0398\3\2\2\2\u0398\u0399\3\2\2\2\u0399\u039f\7>\2\2")
        buf.write("\u039a\u039b\7\31\2\2\u039b\u039c\7\33\2\2\u039c\u039f")
        buf.write("\5j\66\2\u039d\u039f\7\34\2\2\u039e\u037e\3\2\2\2\u039e")
        buf.write("\u037f\3\2\2\2\u039e\u0384\3\2\2\2\u039e\u038b\3\2\2\2")
        buf.write("\u039e\u0390\3\2\2\2\u039e\u0395\3\2\2\2\u039e\u039a\3")
        buf.write("\2\2\2\u039e\u039d\3\2\2\2\u039fS\3\2\2\2\u03a0\u03a1")
        buf.write("\7\7\2\2\u03a1\u03a2\5^\60\2\u03a2\u03a3\5^\60\2\u03a3")
        buf.write("\u03a4\5^\60\2\u03a4\u03a5\5^\60\2\u03a5\u03a6\5^\60\2")
        buf.write("\u03a6\u03a7\5^\60\2\u03a7\u03a8\5f\64\2\u03a8\u03a9\5")
        buf.write("f\64\2\u03a9U\3\2\2\2\u03aa\u03cd\5X-\2\u03ab\u03ad\7")
        buf.write("\f\2\2\u03ac\u03ae\7\u008e\2\2\u03ad\u03ac\3\2\2\2\u03ad")
        buf.write("\u03ae\3\2\2\2\u03ae\u03af\3\2\2\2\u03af\u03cd\7\u0088")
        buf.write("\2\2\u03b0\u03b1\7<\2\2\u03b1\u03b2\5j\66\2\u03b2\u03b3")
        buf.write("\5j\66\2\u03b3\u03b4\5j\66\2\u03b4\u03b5\5j\66\2\u03b5")
        buf.write("\u03b6\5j\66\2\u03b6\u03b7\5j\66\2\u03b7\u03b8\5j\66\2")
        buf.write("\u03b8\u03cd\3\2\2\2\u03b9\u03bb\7=\2\2\u03ba\u03bc\7")
        buf.write("\u008e\2\2\u03bb\u03ba\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc")
        buf.write("\u03bd\3\2\2\2\u03bd\u03cd\5j\66\2\u03be\u03c0\7\24\2")
        buf.write("\2\u03bf\u03c1\7\u008e\2\2\u03c0\u03bf\3\2\2\2\u03c0\u03c1")
        buf.write("\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03cd\7\u0084\2\2\u03c3")
        buf.write("\u03c5\7\27\2\2\u03c4\u03c6\7\u008e\2\2\u03c5\u03c4\3")
        buf.write("\2\2\2\u03c5\u03c6\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7\u03cd")
        buf.write("\7>\2\2\u03c8\u03c9\7\31\2\2\u03c9\u03ca\7\33\2\2\u03ca")
        buf.write("\u03cd\5j\66\2\u03cb\u03cd\7\34\2\2\u03cc\u03aa\3\2\2")
        buf.write("\2\u03cc\u03ab\3\2\2\2\u03cc\u03b0\3\2\2\2\u03cc\u03b9")
        buf.write("\3\2\2\2\u03cc\u03be\3\2\2\2\u03cc\u03c3\3\2\2\2\u03cc")
        buf.write("\u03c8\3\2\2\2\u03cc\u03cb\3\2\2\2\u03cdW\3\2\2\2\u03ce")
        buf.write("\u03cf\7\7\2\2\u03cf\u03d0\5^\60\2\u03d0\u03d1\5^\60\2")
        buf.write("\u03d1\u03d2\5^\60\2\u03d2\u03d3\5^\60\2\u03d3\u03d4\5")
        buf.write("^\60\2\u03d4\u03d5\5^\60\2\u03d5\u03d6\5^\60\2\u03d6\u03d7")
        buf.write("\5^\60\2\u03d7\u03d8\5f\64\2\u03d8\u03d9\5f\64\2\u03d9")
        buf.write("Y\3\2\2\2\u03da\u040f\5\\/\2\u03db\u03dd\7\f\2\2\u03dc")
        buf.write("\u03de\7\u008e\2\2\u03dd\u03dc\3\2\2\2\u03dd\u03de\3\2")
        buf.write("\2\2\u03de\u03df\3\2\2\2\u03df\u040f\7\u0088\2\2\u03e0")
        buf.write("\u03e2\7Y\2\2\u03e1\u03e3\7\u008e\2\2\u03e2\u03e1\3\2")
        buf.write("\2\2\u03e2\u03e3\3\2\2\2\u03e3\u03e4\3\2\2\2\u03e4\u040f")
        buf.write("\7\u0088\2\2\u03e5\u03e6\7B\2\2\u03e6\u03e7\7\u0084\2")
        buf.write("\2\u03e7\u03e8\7\u0084\2\2\u03e8\u040f\5j\66\2\u03e9\u03eb")
        buf.write("\7P\2\2\u03ea\u03ec\7\u008e\2\2\u03eb\u03ea\3\2\2\2\u03eb")
        buf.write("\u03ec\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u040f\5j\66\2")
        buf.write("\u03ee\u03f0\7=\2\2\u03ef\u03f1\7\u008e\2\2\u03f0\u03ef")
        buf.write("\3\2\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2")
        buf.write("\u040f\5j\66\2\u03f3\u03f5\7\24\2\2\u03f4\u03f6\7\u008e")
        buf.write("\2\2\u03f5\u03f4\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03f7")
        buf.write("\3\2\2\2\u03f7\u040f\7\u0084\2\2\u03f8\u03fa\7\27\2\2")
        buf.write("\u03f9\u03fb\7\u008e\2\2\u03fa\u03f9\3\2\2\2\u03fa\u03fb")
        buf.write("\3\2\2\2\u03fb\u03fc\3\2\2\2\u03fc\u040f\7>\2\2\u03fd")
        buf.write("\u03fe\7\31\2\2\u03fe\u03ff\7\33\2\2\u03ff\u0406\5j\66")
        buf.write("\2\u0400\u0407\7\\\2\2\u0401\u0403\7\f\2\2\u0402\u0404")
        buf.write("\7\u008e\2\2\u0403\u0402\3\2\2\2\u0403\u0404\3\2\2\2\u0404")
        buf.write("\u0405\3\2\2\2\u0405\u0407\7\u0088\2\2\u0406\u0400\3\2")
        buf.write("\2\2\u0406\u0401\3\2\2\2\u0407\u040f\3\2\2\2\u0408\u040f")
        buf.write("\7\34\2\2\u0409\u040a\7T\2\2\u040a\u040b\7Z\2\2\u040b")
        buf.write("\u040c\7\u0084\2\2\u040c\u040f\7\u0084\2\2\u040d\u040f")
        buf.write("\7F\2\2\u040e\u03da\3\2\2\2\u040e\u03db\3\2\2\2\u040e")
        buf.write("\u03e0\3\2\2\2\u040e\u03e5\3\2\2\2\u040e\u03e9\3\2\2\2")
        buf.write("\u040e\u03ee\3\2\2\2\u040e\u03f3\3\2\2\2\u040e\u03f8\3")
        buf.write("\2\2\2\u040e\u03fd\3\2\2\2\u040e\u0408\3\2\2\2\u040e\u0409")
        buf.write("\3\2\2\2\u040e\u040d\3\2\2\2\u040f[\3\2\2\2\u0410\u0411")
        buf.write("\7\7\2\2\u0411\u0412\5^\60\2\u0412\u0413\5^\60\2\u0413")
        buf.write("\u0414\5^\60\2\u0414\u0415\5^\60\2\u0415\u0416\5^\60\2")
        buf.write("\u0416\u0417\5^\60\2\u0417\u0418\5^\60\2\u0418\u0419\5")
        buf.write("^\60\2\u0419\u041a\5^\60\2\u041a\u041b\5^\60\2\u041b\u041d")
        buf.write("\5^\60\2\u041c\u041e\5^\60\2\u041d\u041c\3\2\2\2\u041d")
        buf.write("\u041e\3\2\2\2\u041e]\3\2\2\2\u041f\u0420\7\u008b\2\2")
        buf.write("\u0420\u0421\5`\61\2\u0421\u0422\7\u008c\2\2\u0422_\3")
        buf.write("\2\2\2\u0423\u0428\5b\62\2\u0424\u0425\7\177\2\2\u0425")
        buf.write("\u0427\5b\62\2\u0426\u0424\3\2\2\2\u0427\u042a\3\2\2\2")
        buf.write("\u0428\u0426\3\2\2\2\u0428\u0429\3\2\2\2\u0429a\3\2\2")
        buf.write("\2\u042a\u0428\3\2\2\2\u042b\u0430\5d\63\2\u042c\u042d")
        buf.write("\7\u0080\2\2\u042d\u042f\5d\63\2\u042e\u042c\3\2\2\2\u042f")
        buf.write("\u0432\3\2\2\2\u0430\u042e\3\2\2\2\u0430\u0431\3\2\2\2")
        buf.write("\u0431c\3\2\2\2\u0432\u0430\3\2\2\2\u0433\u0434\b\63\1")
        buf.write("\2\u0434\u0435\7\u008b\2\2\u0435\u0436\5`\61\2\u0436\u0437")
        buf.write("\7\u008c\2\2\u0437\u04c4\3\2\2\2\u0438\u04c4\7\\\2\2\u0439")
        buf.write("\u043a\7^\2\2\u043a\u043b\t\2\2\2\u043b\u043c\t\3\2\2")
        buf.write("\u043c\u04c4\t\2\2\2\u043d\u043f\7_\2\2\u043e\u0440\7")
        buf.write("\u0098\2\2\u043f\u043e\3\2\2\2\u043f\u0440\3\2\2\2\u0440")
        buf.write("\u0441\3\2\2\2\u0441\u0442\7\u0099\2\2\u0442\u0443\7\u009a")
        buf.write("\2\2\u0443\u04c4\5h\65\2\u0444\u0445\7`\2\2\u0445\u04c4")
        buf.write("\5d\63 \u0446\u0447\7a\2\2\u0447\u04c4\5d\63\37\u0448")
        buf.write("\u0449\7b\2\2\u0449\u04c4\5d\63\36\u044a\u0451\7c\2\2")
        buf.write("\u044b\u0452\7\u0089\2\2\u044c\u044f\7\u0088\2\2\u044d")
        buf.write("\u044e\7\u008d\2\2\u044e\u0450\7\u0088\2\2\u044f\u044d")
        buf.write("\3\2\2\2\u044f\u0450\3\2\2\2\u0450\u0452\3\2\2\2\u0451")
        buf.write("\u044b\3\2\2\2\u0451\u044c\3\2\2\2\u0452\u04c4\3\2\2\2")
        buf.write("\u0453\u0454\7d\2\2\u0454\u0455\5h\65\2\u0455\u0456\5")
        buf.write("h\65\2\u0456\u0457\5h\65\2\u0457\u0458\5h\65\2\u0458\u0459")
        buf.write("\5h\65\2\u0459\u045a\5h\65\2\u045a\u04c4\3\2\2\2\u045b")
        buf.write("\u04c4\7e\2\2\u045c\u045d\7f\2\2\u045d\u04c4\7\u0084\2")
        buf.write("\2\u045e\u04c4\7g\2\2\u045f\u0466\7h\2\2\u0460\u0467\7")
        buf.write("\u0089\2\2\u0461\u0464\7\u0088\2\2\u0462\u0463\7\u008d")
        buf.write("\2\2\u0463\u0465\7\u0088\2\2\u0464\u0462\3\2\2\2\u0464")
        buf.write("\u0465\3\2\2\2\u0465\u0467\3\2\2\2\u0466\u0460\3\2\2\2")
        buf.write("\u0466\u0461\3\2\2\2\u0467\u04c4\3\2\2\2\u0468\u04c4\7")
        buf.write("i\2\2\u0469\u046a\7\u0081\2\2\u046a\u04c4\5d\63\26\u046b")
        buf.write("\u046c\7j\2\2\u046c\u046d\7\u008b\2\2\u046d\u046f\5h\65")
        buf.write("\2\u046e\u0470\7\u0082\2\2\u046f\u046e\3\2\2\2\u046f\u0470")
        buf.write("\3\2\2\2\u0470\u0471\3\2\2\2\u0471\u0473\5h\65\2\u0472")
        buf.write("\u0474\7\u0082\2\2\u0473\u0472\3\2\2\2\u0473\u0474\3\2")
        buf.write("\2\2\u0474\u0475\3\2\2\2\u0475\u0476\5h\65\2\u0476\u0477")
        buf.write("\7\u008c\2\2\u0477\u0478\7k\2\2\u0478\u0479\5h\65\2\u0479")
        buf.write("\u04c4\3\2\2\2\u047a\u047b\7j\2\2\u047b\u047c\7\u008b")
        buf.write("\2\2\u047c\u047e\7}\2\2\u047d\u047f\7\u008e\2\2\u047e")
        buf.write("\u047d\3\2\2\2\u047e\u047f\3\2\2\2\u047f\u0480\3\2\2\2")
        buf.write("\u0480\u0482\5^\60\2\u0481\u0483\7\u0082\2\2\u0482\u0481")
        buf.write("\3\2\2\2\u0482\u0483\3\2\2\2\u0483\u0489\3\2\2\2\u0484")
        buf.write("\u0486\7~\2\2\u0485\u0487\7\u008e\2\2\u0486\u0485\3\2")
        buf.write("\2\2\u0486\u0487\3\2\2\2\u0487\u0488\3\2\2\2\u0488\u048a")
        buf.write("\5^\60\2\u0489\u0484\3\2\2\2\u0489\u048a\3\2\2\2\u048a")
        buf.write("\u048b\3\2\2\2\u048b\u048c\7\u008c\2\2\u048c\u048d\7k")
        buf.write("\2\2\u048d\u048e\5h\65\2\u048e\u04c4\3\2\2\2\u048f\u04c4")
        buf.write("\7l\2\2\u0490\u04c4\7m\2\2\u0491\u0498\7n\2\2\u0492\u0499")
        buf.write("\7\u008a\2\2\u0493\u0496\7\u0084\2\2\u0494\u0495\7\u008d")
        buf.write("\2\2\u0495\u0497\7\u0084\2\2\u0496\u0494\3\2\2\2\u0496")
        buf.write("\u0497\3\2\2\2\u0497\u0499\3\2\2\2\u0498\u0492\3\2\2\2")
        buf.write("\u0498\u0493\3\2\2\2\u0499\u04c4\3\2\2\2\u049a\u04a1\7")
        buf.write("o\2\2\u049b\u04a2\7\u0089\2\2\u049c\u049f\7\u0088\2\2")
        buf.write("\u049d\u049e\7\u008d\2\2\u049e\u04a0\7\u0088\2\2\u049f")
        buf.write("\u049d\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0\u04a2\3\2\2\2")
        buf.write("\u04a1\u049b\3\2\2\2\u04a1\u049c\3\2\2\2\u04a2\u04c4\3")
        buf.write("\2\2\2\u04a3\u04af\7q\2\2\u04a4\u04b0\7\u0089\2\2\u04a5")
        buf.write("\u04a8\7\u0088\2\2\u04a6\u04a7\7\u008d\2\2\u04a7\u04a9")
        buf.write("\7\u0088\2\2\u04a8\u04a6\3\2\2\2\u04a8\u04a9\3\2\2\2\u04a9")
        buf.write("\u04b0\3\2\2\2\u04aa\u04ad\7\u0087\2\2\u04ab\u04ac\7\u008d")
        buf.write("\2\2\u04ac\u04ae\7\u0087\2\2\u04ad\u04ab\3\2\2\2\u04ad")
        buf.write("\u04ae\3\2\2\2\u04ae\u04b0\3\2\2\2\u04af\u04a4\3\2\2\2")
        buf.write("\u04af\u04a5\3\2\2\2\u04af\u04aa\3\2\2\2\u04b0\u04c4\3")
        buf.write("\2\2\2\u04b1\u04b2\7r\2\2\u04b2\u04b3\5h\65\2\u04b3\u04b4")
        buf.write("\5h\65\2\u04b4\u04b5\5h\65\2\u04b5\u04b6\5h\65\2\u04b6")
        buf.write("\u04b7\5h\65\2\u04b7\u04b8\5h\65\2\u04b8\u04c4\3\2\2\2")
        buf.write("\u04b9\u04c4\7s\2\2\u04ba\u04c4\7t\2\2\u04bb\u04c4\7u")
        buf.write("\2\2\u04bc\u04c4\7v\2\2\u04bd\u04c4\7w\2\2\u04be\u04c4")
        buf.write("\7x\2\2\u04bf\u04c4\7y\2\2\u04c0\u04c4\7z\2\2\u04c1\u04c4")
        buf.write("\7{\2\2\u04c2\u04c4\7|\2\2\u04c3\u0433\3\2\2\2\u04c3\u0438")
        buf.write("\3\2\2\2\u04c3\u0439\3\2\2\2\u04c3\u043d\3\2\2\2\u04c3")
        buf.write("\u0444\3\2\2\2\u04c3\u0446\3\2\2\2\u04c3\u0448\3\2\2\2")
        buf.write("\u04c3\u044a\3\2\2\2\u04c3\u0453\3\2\2\2\u04c3\u045b\3")
        buf.write("\2\2\2\u04c3\u045c\3\2\2\2\u04c3\u045e\3\2\2\2\u04c3\u045f")
        buf.write("\3\2\2\2\u04c3\u0468\3\2\2\2\u04c3\u0469\3\2\2\2\u04c3")
        buf.write("\u046b\3\2\2\2\u04c3\u047a\3\2\2\2\u04c3\u048f\3\2\2\2")
        buf.write("\u04c3\u0490\3\2\2\2\u04c3\u0491\3\2\2\2\u04c3\u049a\3")
        buf.write("\2\2\2\u04c3\u04a3\3\2\2\2\u04c3\u04b1\3\2\2\2\u04c3\u04b9")
        buf.write("\3\2\2\2\u04c3\u04ba\3\2\2\2\u04c3\u04bb\3\2\2\2\u04c3")
        buf.write("\u04bc\3\2\2\2\u04c3\u04bd\3\2\2\2\u04c3\u04be\3\2\2\2")
        buf.write("\u04c3\u04bf\3\2\2\2\u04c3\u04c0\3\2\2\2\u04c3\u04c1\3")
        buf.write("\2\2\2\u04c3\u04c2\3\2\2\2\u04c4\u04cd\3\2\2\2\u04c5\u04c6")
        buf.write("\f#\2\2\u04c6\u04c7\7]\2\2\u04c7\u04cc\5h\65\2\u04c8\u04c9")
        buf.write("\f\17\2\2\u04c9\u04ca\7p\2\2\u04ca\u04cc\5h\65\2\u04cb")
        buf.write("\u04c5\3\2\2\2\u04cb\u04c8\3\2\2\2\u04cc\u04cf\3\2\2\2")
        buf.write("\u04cd\u04cb\3\2\2\2\u04cd\u04ce\3\2\2\2\u04cee\3\2\2")
        buf.write("\2\u04cf\u04cd\3\2\2\2\u04d0\u04d1\t\4\2\2\u04d1g\3\2")
        buf.write("\2\2\u04d2\u04d3\t\4\2\2\u04d3i\3\2\2\2\u04d4\u04d5\t")
        buf.write("\4\2\2\u04d5k\3\2\2\2\u04d6\u04e1\7[\2\2\u04d7\u04df\7")
        buf.write("\u009c\2\2\u04d8\u04da\7\u009f\2\2\u04d9\u04d8\3\2\2\2")
        buf.write("\u04da\u04dd\3\2\2\2\u04db\u04d9\3\2\2\2\u04db\u04dc\3")
        buf.write("\2\2\2\u04dc\u04e0\3\2\2\2\u04dd\u04db\3\2\2\2\u04de\u04e0")
        buf.write("\7\u00a0\2\2\u04df\u04db\3\2\2\2\u04df\u04de\3\2\2\2\u04e0")
        buf.write("\u04e2\3\2\2\2\u04e1\u04d7\3\2\2\2\u04e1\u04e2\3\2\2\2")
        buf.write("\u04e2\u04e3\3\2\2\2\u04e3\u04e7\7\u009d\2\2\u04e4\u04e6")
        buf.write("\7\u009f\2\2\u04e5\u04e4\3\2\2\2\u04e6\u04e9\3\2\2\2\u04e7")
        buf.write("\u04e5\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04ea\3\2\2\2")
        buf.write("\u04e9\u04e7\3\2\2\2\u04ea\u04eb\7\u009e\2\2\u04ebm\3")
        buf.write("\2\2\2\u009f{}\u0085\u0087\u0090\u009a\u00a4\u00ae\u00b7")
        buf.write("\u00c0\u00c9\u00d2\u00db\u00e4\u00ed\u00f6\u00fd\u010c")
        buf.write("\u0111\u0118\u0121\u0126\u0131\u013d\u0143\u0150\u0157")
        buf.write("\u0172\u0178\u017b\u0185\u0188\u0190\u0195\u019a\u01a1")
        buf.write("\u01a6\u01ab\u01b0\u01b6\u01ba\u01ca\u01d0\u01d4\u01d9")
        buf.write("\u01dc\u01e0\u01e5\u01ea\u01ee\u01f4\u01f8\u01fc\u01ff")
        buf.write("\u0201\u0205\u020a\u0214\u0219\u021e\u0225\u0231\u0236")
        buf.write("\u0241\u0247\u024b\u0250\u0255\u025e\u0261\u0264\u0270")
        buf.write("\u0277\u027c\u0288\u028d\u0292\u0297\u029c\u02a5\u02c0")
        buf.write("\u02c5\u02cb\u02d5\u02d8\u02dd\u02e2\u02e6\u02f2\u030a")
        buf.write("\u0312\u0319\u031c\u031f\u0324\u0329\u032e\u0338\u033d")
        buf.write("\u0342\u0346\u034f\u0352\u0359\u035c\u035f\u0362\u036e")
        buf.write("\u0375\u037c\u0381\u038d\u0392\u0397\u039e\u03ad\u03bb")
        buf.write("\u03c0\u03c5\u03cc\u03dd\u03e2\u03eb\u03f0\u03f5\u03fa")
        buf.write("\u0403\u0406\u040e\u041d\u0428\u0430\u043f\u044f\u0451")
        buf.write("\u0464\u0466\u046f\u0473\u047e\u0482\u0486\u0489\u0496")
        buf.write("\u0498\u049f\u04a1\u04a8\u04ad\u04af\u04c3\u04cb\u04cd")
        buf.write("\u04db\u04df\u04e1\u04e7")
        return buf.getvalue()


class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "','", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'('", "')'", 
                     "':'", "'='", "'<'", "'>'", "'<='", "'>='", "'#'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'*'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Averaging", "Bgig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Noe_analysis", "Initialize", "Update", "Gamma", "Kappa", 
                      "Noe_avr_methods", "Noe_potential", "Cutoff", "Cuton", 
                      "From", "To", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Rdc_potential", "Coupling", "Coupling_potential", 
                      "Carbon", "Expectation", "PhiStep", "PsiStep", "Rcoil", 
                      "Zero", "Proton", "Observed", "Anisotropy", "Amides", 
                      "Carbons", "Nitrogens", "Oxygens", "RingAtoms", "AlphasAndAmides", 
                      "Error", "Conformation", "Compressed", "Phase", "Size", 
                      "Dimensions", "Danisotropy", "OneBond", "AngleDb", 
                      "DerivFlag", "Angle_dihedral", "Flags", "All", "Around", 
                      "Atom", "Attribute", "BondedTo", "ByGroup", "ByRes", 
                      "Chemical", "Fbox", "Hydrogen", "Id", "Known", "Name", 
                      "NONE", "Point", "Cut", "Previous", "Pseudo", "Residue", 
                      "Resname", "Saround", "SegIdentifier", "Sfbox", "Store_1", 
                      "Store_2", "Store_3", "Store_4", "Store_5", "Store_6", 
                      "Store_7", "Store_8", "Store_9", "Tag", "Tail", "Head", 
                      "Or_op", "And_op", "Not_op", "Comma", "Complex", "Integer", 
                      "Logical", "Real", "Double_quote_string", "Simple_name", 
                      "Simple_names", "Integers", "L_paren", "R_paren", 
                      "Colon", "Equ_op", "Lt_op", "Gt_op", "Leq_op", "Geq_op", 
                      "Neq_op", "SPACE", "COMMENT", "LINE_COMMENT", "SET_VARIABLE", 
                      "Abs", "Attr_properties", "Comparison_ops", "SPACE_ATTR", 
                      "Exclude", "Include", "End_flag", "Class_name", "Any_class", 
                      "SPACE_FLAG" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_dihedral_statement = 16
    RULE_dihedral_assign = 17
    RULE_plane_statement = 18
    RULE_group_statement = 19
    RULE_harmonic_statement = 20
    RULE_sani_statement = 21
    RULE_sani_assign = 22
    RULE_coupling_statement = 23
    RULE_coup_assign = 24
    RULE_carbon_shift_statement = 25
    RULE_carbon_shift_assign = 26
    RULE_carbon_shift_rcoil = 27
    RULE_proton_shift_statement = 28
    RULE_observed = 29
    RULE_proton_shift_rcoil = 30
    RULE_proton_shift_anisotropy = 31
    RULE_proton_shift_amides = 32
    RULE_proton_shift_carbons = 33
    RULE_proton_shift_nitrogens = 34
    RULE_proton_shift_oxygens = 35
    RULE_proton_shift_ring_atoms = 36
    RULE_proton_shift_alphas_and_amides = 37
    RULE_conformation_statement = 38
    RULE_conf_assign = 39
    RULE_diffusion_statement = 40
    RULE_dani_assign = 41
    RULE_one_bond_coupling_statement = 42
    RULE_one_bond_assign = 43
    RULE_angle_db_statement = 44
    RULE_angle_db_assign = 45
    RULE_selection = 46
    RULE_selection_expression = 47
    RULE_term = 48
    RULE_factor = 49
    RULE_number = 50
    RULE_number_f = 51
    RULE_number_s = 52
    RULE_flag_statement = 53

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "dihedral_statement", 
                   "dihedral_assign", "plane_statement", "group_statement", 
                   "harmonic_statement", "sani_statement", "sani_assign", 
                   "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s", "flag_statement" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Averaging=7
    Bgig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Noe_analysis=35
    Initialize=36
    Update=37
    Gamma=38
    Kappa=39
    Noe_avr_methods=40
    Noe_potential=41
    Cutoff=42
    Cuton=43
    From=44
    To=45
    Restraints=46
    Dihedral=47
    Nassign=48
    Print_any=49
    Plane=50
    Group=51
    Selection=52
    Weight=53
    Harmonic=54
    Exponent=55
    Normal=56
    Sanisotropy=57
    Coefficients=58
    ForceConstant=59
    Rdc_potential=60
    Coupling=61
    Coupling_potential=62
    Carbon=63
    Expectation=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Zero=68
    Proton=69
    Observed=70
    Anisotropy=71
    Amides=72
    Carbons=73
    Nitrogens=74
    Oxygens=75
    RingAtoms=76
    AlphasAndAmides=77
    Error=78
    Conformation=79
    Compressed=80
    Phase=81
    Size=82
    Dimensions=83
    Danisotropy=84
    OneBond=85
    AngleDb=86
    DerivFlag=87
    Angle_dihedral=88
    Flags=89
    All=90
    Around=91
    Atom=92
    Attribute=93
    BondedTo=94
    ByGroup=95
    ByRes=96
    Chemical=97
    Fbox=98
    Hydrogen=99
    Id=100
    Known=101
    Name=102
    NONE=103
    Point=104
    Cut=105
    Previous=106
    Pseudo=107
    Residue=108
    Resname=109
    Saround=110
    SegIdentifier=111
    Sfbox=112
    Store_1=113
    Store_2=114
    Store_3=115
    Store_4=116
    Store_5=117
    Store_6=118
    Store_7=119
    Store_8=120
    Store_9=121
    Tag=122
    Tail=123
    Head=124
    Or_op=125
    And_op=126
    Not_op=127
    Comma=128
    Complex=129
    Integer=130
    Logical=131
    Real=132
    Double_quote_string=133
    Simple_name=134
    Simple_names=135
    Integers=136
    L_paren=137
    R_paren=138
    Colon=139
    Equ_op=140
    Lt_op=141
    Gt_op=142
    Leq_op=143
    Geq_op=144
    Neq_op=145
    SPACE=146
    COMMENT=147
    LINE_COMMENT=148
    SET_VARIABLE=149
    Abs=150
    Attr_properties=151
    Comparison_ops=152
    SPACE_ATTR=153
    Exclude=154
    Include=155
    End_flag=156
    Class_name=157
    Any_class=158
    SPACE_FLAG=159

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Flag_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 123
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Sanisotropy) | (1 << CnsMRParser.Coupling) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CnsMRParser.Proton - 69)) | (1 << (CnsMRParser.Conformation - 69)) | (1 << (CnsMRParser.Danisotropy - 69)) | (1 << (CnsMRParser.OneBond - 69)) | (1 << (CnsMRParser.AngleDb - 69)) | (1 << (CnsMRParser.Flags - 69)))) != 0):
                self.state = 121
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 108
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 109
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 110
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 111
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 112
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 113
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 114
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 115
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 116
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 117
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 118
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 119
                    self.angle_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 120
                    self.flag_statement()
                    pass


                self.state = 125
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 133
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0):
                self.state = 131
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,2,self._ctx)
                if la_ == 1:
                    self.state = 126
                    self.noe_assign()
                    pass

                elif la_ == 2:
                    self.state = 127
                    self.dihedral_assign()
                    pass

                elif la_ == 3:
                    self.state = 128
                    self.sani_assign()
                    pass

                elif la_ == 4:
                    self.state = 129
                    self.plane_statement()
                    pass

                elif la_ == 5:
                    self.state = 130
                    self.coup_assign()
                    pass


                self.state = 135
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 136
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 138
            self.match(CnsMRParser.Noe)
            self.state = 142
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 139
                    self.noe_statement() 
                self.state = 144
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 145
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 147
            self.match(CnsMRParser.Restraints)
            self.state = 148
            self.match(CnsMRParser.Dihedral)
            self.state = 152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Scale) | (1 << CnsMRParser.Nassign) | (1 << CnsMRParser.Print_any))) != 0):
                self.state = 149
                self.dihedral_statement()
                self.state = 154
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 155
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 157
            self.match(CnsMRParser.Restraints)
            self.state = 158
            self.match(CnsMRParser.Plane)
            self.state = 162
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0):
                self.state = 159
                self.plane_statement()
                self.state = 164
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 165
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 167
            self.match(CnsMRParser.Restraints)
            self.state = 168
            self.match(CnsMRParser.Harmonic)
            self.state = 172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Exponent or _la==CnsMRParser.Normal:
                self.state = 169
                self.harmonic_statement()
                self.state = 174
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 175
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 177
            self.match(CnsMRParser.Sanisotropy)
            self.state = 181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 178
                self.sani_statement()
                self.state = 183
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 184
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.match(CnsMRParser.Coupling)
            self.state = 190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 187
                self.coupling_statement()
                self.state = 192
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 193
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.match(CnsMRParser.Carbon)
            self.state = 199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.ForceConstant - 5)) | (1 << (CnsMRParser.Expectation - 5)) | (1 << (CnsMRParser.PhiStep - 5)) | (1 << (CnsMRParser.PsiStep - 5)) | (1 << (CnsMRParser.Rcoil - 5)) | (1 << (CnsMRParser.Zero - 5)))) != 0):
                self.state = 196
                self.carbon_shift_statement()
                self.state = 201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 202
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(CnsMRParser.Proton)
            self.state = 208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Classification) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CnsMRParser.Rcoil - 67)) | (1 << (CnsMRParser.Observed - 67)) | (1 << (CnsMRParser.Anisotropy - 67)) | (1 << (CnsMRParser.Amides - 67)) | (1 << (CnsMRParser.Carbons - 67)) | (1 << (CnsMRParser.Nitrogens - 67)) | (1 << (CnsMRParser.Oxygens - 67)) | (1 << (CnsMRParser.RingAtoms - 67)) | (1 << (CnsMRParser.AlphasAndAmides - 67)) | (1 << (CnsMRParser.Error - 67)))) != 0):
                self.state = 205
                self.proton_shift_statement()
                self.state = 210
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 211
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def conformation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 213
            self.match(CnsMRParser.Conformation)
            self.state = 217
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Compressed - 64)) | (1 << (CnsMRParser.Phase - 64)) | (1 << (CnsMRParser.Size - 64)))) != 0):
                self.state = 214
                self.conformation_statement()
                self.state = 219
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 220
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 222
            self.match(CnsMRParser.Danisotropy)
            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 223
                self.diffusion_statement()
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 229
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.match(CnsMRParser.OneBond)
            self.state = 235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 232
                self.one_bond_coupling_statement()
                self.state = 237
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 238
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(CnsMRParser.AngleDb)
            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Size - 64)) | (1 << (CnsMRParser.DerivFlag - 64)))) != 0):
                self.state = 241
                self.angle_db_statement()
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 247
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def noe_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Averaging(self):
            return self.getToken(CnsMRParser.Averaging, 0)

        def Noe_avr_methods(self):
            return self.getToken(CnsMRParser.Noe_avr_methods, 0)

        def Bgig(self):
            return self.getToken(CnsMRParser.Bgig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Noe_potential(self):
            return self.getToken(CnsMRParser.Noe_potential, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 377
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 249
                self.match(CnsMRParser.Analysis)
                self.state = 251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 250
                    self.match(CnsMRParser.Equ_op)


                self.state = 253
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 254
                self.noe_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 255
                self.match(CnsMRParser.Asymptote)
                self.state = 256
                self.match(CnsMRParser.Simple_name)
                self.state = 257
                self.number_s()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 258
                self.match(CnsMRParser.Averaging)
                self.state = 259
                self.match(CnsMRParser.Simple_name)
                self.state = 260
                self.match(CnsMRParser.Noe_avr_methods)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 261
                self.match(CnsMRParser.Bgig)
                self.state = 262
                self.match(CnsMRParser.Simple_name)
                self.state = 263
                self.number_s()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 264
                self.match(CnsMRParser.Ceiling)
                self.state = 266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 265
                    self.match(CnsMRParser.Equ_op)


                self.state = 268
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 269
                self.match(CnsMRParser.Classification)
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 270
                    self.match(CnsMRParser.Equ_op)


                self.state = 273
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 274
                self.match(CnsMRParser.CountViol)
                self.state = 275
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 276
                self.match(CnsMRParser.Cv)
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 277
                    self.match(CnsMRParser.Equ_op)


                self.state = 280
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 281
                self.match(CnsMRParser.Den)
                self.state = 282
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 283
                self.match(CnsMRParser.Den)
                self.state = 284
                self.match(CnsMRParser.Update)
                self.state = 285
                self.match(CnsMRParser.Gamma)
                self.state = 287
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 286
                    self.match(CnsMRParser.Equ_op)


                self.state = 289
                self.number_s()
                self.state = 290
                self.match(CnsMRParser.Kappa)
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 291
                    self.match(CnsMRParser.Equ_op)


                self.state = 294
                self.number_s()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 296
                self.match(CnsMRParser.Distribute)
                self.state = 297
                self.match(CnsMRParser.Simple_name)
                self.state = 298
                self.match(CnsMRParser.Simple_name)
                self.state = 299
                self.number_s()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 300
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 305
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

                self.state = 306
                self.match(CnsMRParser.End)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 307
                self.match(CnsMRParser.Monomers)
                self.state = 308
                self.match(CnsMRParser.Simple_name)
                self.state = 309
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 310
                self.match(CnsMRParser.Ncount)
                self.state = 311
                self.match(CnsMRParser.Simple_name)
                self.state = 312
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 313
                self.match(CnsMRParser.Nrestraints)
                self.state = 315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 314
                    self.match(CnsMRParser.Equ_op)


                self.state = 317
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 318
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 319
                self.match(CnsMRParser.Partition)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 320
                    self.match(CnsMRParser.Equ_op)


                self.state = 323
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 324
                self.match(CnsMRParser.Potential)
                self.state = 325
                self.match(CnsMRParser.Simple_name)
                self.state = 326
                self.match(CnsMRParser.Noe_potential)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 327
                self.match(CnsMRParser.Predict)
                self.state = 328
                self.predict_statement()
                self.state = 329
                self.match(CnsMRParser.End)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 331
                self.match(CnsMRParser.Print)
                self.state = 332
                self.match(CnsMRParser.Threshold)
                self.state = 334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 333
                    self.match(CnsMRParser.Equ_op)


                self.state = 336
                self.number_s()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 337
                self.match(CnsMRParser.Raverage)
                self.state = 341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 338
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 343
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

                self.state = 344
                self.match(CnsMRParser.End)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 345
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 346
                self.match(CnsMRParser.Rswitch)
                self.state = 347
                self.match(CnsMRParser.Simple_name)
                self.state = 348
                self.number_s()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 349
                self.match(CnsMRParser.Scale)
                self.state = 350
                self.match(CnsMRParser.Simple_name)
                self.state = 351
                self.number_s()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 352
                self.match(CnsMRParser.SoExponent)
                self.state = 353
                self.match(CnsMRParser.Simple_name)
                self.state = 354
                self.number_s()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 355
                self.match(CnsMRParser.SqConstant)
                self.state = 356
                self.match(CnsMRParser.Simple_name)
                self.state = 357
                self.number_s()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 358
                self.match(CnsMRParser.SqExponent)
                self.state = 359
                self.match(CnsMRParser.Simple_name)
                self.state = 360
                self.number_s()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 361
                self.match(CnsMRParser.SqOffset)
                self.state = 362
                self.match(CnsMRParser.Simple_name)
                self.state = 363
                self.number_s()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 364
                self.match(CnsMRParser.Taverage)
                self.state = 368
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 365
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 370
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 371
                self.match(CnsMRParser.End)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 372
                self.match(CnsMRParser.Temperature)
                self.state = 374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 373
                    self.match(CnsMRParser.Equ_op)


                self.state = 376
                self.number_s()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 379
            self.match(CnsMRParser.Assign)
            self.state = 380
            self.selection()
            self.state = 381
            self.selection()
            self.state = 382
            self.number()
            self.state = 383
            self.number()
            self.state = 384
            self.number()
            self.state = 390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Weight:
                self.state = 385
                self.match(CnsMRParser.Weight)
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 386
                    self.match(CnsMRParser.Equ_op)


                self.state = 389
                self.number()


            self.state = 398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 392
                self.match(CnsMRParser.Or_op)
                self.state = 393
                self.selection()
                self.state = 394
                self.selection()
                self.state = 400
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 415
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 401
                self.match(CnsMRParser.Cutoff)
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 402
                    self.match(CnsMRParser.Equ_op)


                self.state = 405
                self.number_s()
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 406
                self.match(CnsMRParser.Cuton)
                self.state = 408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 407
                    self.match(CnsMRParser.Equ_op)


                self.state = 410
                self.number_s()
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 411
                self.match(CnsMRParser.From)
                self.state = 412
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 413
                self.match(CnsMRParser.To)
                self.state = 414
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,0)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 440
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 417
                self.dihedral_assign()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 418
                self.match(CnsMRParser.Cv)
                self.state = 420
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 419
                    self.match(CnsMRParser.Equ_op)


                self.state = 422
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 423
                self.match(CnsMRParser.Nassign)
                self.state = 425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 424
                    self.match(CnsMRParser.Equ_op)


                self.state = 427
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 4)
                self.state = 428
                self.match(CnsMRParser.Partition)
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 429
                    self.match(CnsMRParser.Equ_op)


                self.state = 432
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 433
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 434
                self.match(CnsMRParser.Scale)
                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 435
                    self.match(CnsMRParser.Equ_op)


                self.state = 438
                self.number_s()
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 7)
                self.state = 439
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(CnsMRParser.Assign)
            self.state = 443
            self.selection()
            self.state = 444
            self.selection()
            self.state = 445
            self.selection()
            self.state = 446
            self.selection()
            self.state = 447
            self.number()
            self.state = 448
            self.number()
            self.state = 449
            self.number()
            self.state = 450
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_plane_statement)
        self._la = 0 # Token type
        try:
            self.state = 462
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 452
                self.match(CnsMRParser.Group)
                self.state = 456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Selection or _la==CnsMRParser.Weight:
                    self.state = 453
                    self.group_statement()
                    self.state = 458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 459
                self.match(CnsMRParser.End)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 460
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 461
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 474
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 464
                self.match(CnsMRParser.Selection)
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 465
                    self.match(CnsMRParser.Equ_op)


                self.state = 468
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 469
                self.match(CnsMRParser.Weight)
                self.state = 471
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 470
                    self.match(CnsMRParser.Equ_op)


                self.state = 473
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 476
                self.match(CnsMRParser.Exponent)
                self.state = 478
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 477
                    self.match(CnsMRParser.Equ_op)


                self.state = 480
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 481
                self.match(CnsMRParser.Normal)
                self.state = 483
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 482
                    self.match(CnsMRParser.Equ_op)


                self.state = 485
                self.match(CnsMRParser.L_paren)
                self.state = 511
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integer, CnsMRParser.Real]:
                    self.state = 486
                    self.number_s()
                    self.state = 488
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 487
                        self.match(CnsMRParser.Comma)


                    self.state = 490
                    self.number_s()
                    self.state = 492
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 491
                        self.match(CnsMRParser.Comma)


                    self.state = 494
                    self.number_s()
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 496
                    self.match(CnsMRParser.Tail)
                    self.state = 498
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 497
                        self.match(CnsMRParser.Equ_op)


                    self.state = 500
                    self.selection()
                    self.state = 502
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 501
                        self.match(CnsMRParser.Comma)


                    self.state = 509
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 504
                        self.match(CnsMRParser.Head)
                        self.state = 506
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CnsMRParser.Equ_op:
                            self.state = 505
                            self.match(CnsMRParser.Equ_op)


                        self.state = 508
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 513
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 547
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 517
                self.sani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 518
                self.match(CnsMRParser.Classification)
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 519
                    self.match(CnsMRParser.Equ_op)


                self.state = 522
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 523
                self.match(CnsMRParser.Coefficients)
                self.state = 524
                self.number_s()
                self.state = 525
                self.number_s()
                self.state = 526
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 528
                self.match(CnsMRParser.ForceConstant)
                self.state = 530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 529
                    self.match(CnsMRParser.Equ_op)


                self.state = 532
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 533
                self.match(CnsMRParser.Nrestraints)
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 534
                    self.match(CnsMRParser.Equ_op)


                self.state = 537
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 538
                self.match(CnsMRParser.Potential)
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 539
                    self.match(CnsMRParser.Equ_op)


                self.state = 542
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 543
                self.match(CnsMRParser.Print)
                self.state = 544
                self.match(CnsMRParser.Threshold)
                self.state = 545
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 546
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 549
            self.match(CnsMRParser.Assign)
            self.state = 550
            self.selection()
            self.state = 551
            self.selection()
            self.state = 552
            self.selection()
            self.state = 553
            self.selection()
            self.state = 554
            self.selection()
            self.state = 555
            self.selection()
            self.state = 556
            self.number()
            self.state = 557
            self.number()
            self.state = 559
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 558
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(CnsMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 610
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 561
                self.coup_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 562
                self.match(CnsMRParser.Classification)
                self.state = 564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 563
                    self.match(CnsMRParser.Equ_op)


                self.state = 566
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 567
                self.match(CnsMRParser.Coefficients)
                self.state = 568
                self.number_s()
                self.state = 569
                self.number_s()
                self.state = 570
                self.number_s()
                self.state = 571
                self.number_s()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 573
                self.match(CnsMRParser.Cv)
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 574
                    self.match(CnsMRParser.Equ_op)


                self.state = 577
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 578
                self.match(CnsMRParser.ForceConstant)
                self.state = 579
                self.number_s()
                self.state = 581
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                    self.state = 580
                    self.number_s()


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 583
                self.match(CnsMRParser.Nrestraints)
                self.state = 585
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 584
                    self.match(CnsMRParser.Equ_op)


                self.state = 587
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 7)
                self.state = 588
                self.match(CnsMRParser.Partition)
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 589
                    self.match(CnsMRParser.Equ_op)


                self.state = 592
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 593
                self.match(CnsMRParser.Potential)
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 594
                    self.match(CnsMRParser.Equ_op)


                self.state = 597
                self.match(CnsMRParser.Coupling_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 598
                self.match(CnsMRParser.Print)
                self.state = 599
                self.match(CnsMRParser.Threshold)
                self.state = 600
                self.number_s()
                self.state = 607
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 601
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 602
                    self.match(CnsMRParser.Classification)
                    self.state = 604
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 603
                        self.match(CnsMRParser.Equ_op)


                    self.state = 606
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 609
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 612
            self.match(CnsMRParser.Assign)
            self.state = 613
            self.selection()
            self.state = 614
            self.selection()
            self.state = 615
            self.selection()
            self.state = 616
            self.selection()
            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 617
                self.selection()
                self.state = 618
                self.selection()
                self.state = 619
                self.selection()
                self.state = 620
                self.selection()


            self.state = 624
            self.number()
            self.state = 625
            self.number()
            self.state = 629
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 626
                self.number()
                self.state = 627
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 675
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 631
                self.carbon_shift_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 632
                self.match(CnsMRParser.Classification)
                self.state = 634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 633
                    self.match(CnsMRParser.Equ_op)


                self.state = 636
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 637
                self.match(CnsMRParser.Expectation)
                self.state = 638
                self.match(CnsMRParser.Integer)
                self.state = 639
                self.match(CnsMRParser.Integer)
                self.state = 640
                self.number_s()
                self.state = 641
                self.number_s()
                self.state = 642
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 644
                self.match(CnsMRParser.ForceConstant)
                self.state = 646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 645
                    self.match(CnsMRParser.Equ_op)


                self.state = 648
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 649
                self.match(CnsMRParser.Nrestraints)
                self.state = 651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 650
                    self.match(CnsMRParser.Equ_op)


                self.state = 653
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 654
                self.match(CnsMRParser.PhiStep)
                self.state = 656
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 655
                    self.match(CnsMRParser.Equ_op)


                self.state = 658
                self.number_s()
                pass
            elif token in [CnsMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 659
                self.match(CnsMRParser.PsiStep)
                self.state = 661
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 660
                    self.match(CnsMRParser.Equ_op)


                self.state = 663
                self.number_s()
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 664
                self.match(CnsMRParser.Potential)
                self.state = 666
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 665
                    self.match(CnsMRParser.Equ_op)


                self.state = 668
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 669
                self.match(CnsMRParser.Print)
                self.state = 670
                self.match(CnsMRParser.Threshold)
                self.state = 671
                self.number_s()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 672
                self.carbon_shift_rcoil()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 673
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 674
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 677
            self.match(CnsMRParser.Assign)
            self.state = 678
            self.selection()
            self.state = 679
            self.selection()
            self.state = 680
            self.selection()
            self.state = 681
            self.selection()
            self.state = 682
            self.selection()
            self.state = 683
            self.number()
            self.state = 684
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(CnsMRParser.Rcoil)
            self.state = 687
            self.selection()
            self.state = 688
            self.number_s()
            self.state = 689
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(CnsMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(CnsMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 731
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 691
                self.observed()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 692
                self.proton_shift_rcoil()
                pass
            elif token in [CnsMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 693
                self.proton_shift_anisotropy()
                pass
            elif token in [CnsMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 694
                self.proton_shift_amides()
                pass
            elif token in [CnsMRParser.Carbons]:
                self.enterOuterAlt(localctx, 5)
                self.state = 695
                self.proton_shift_carbons()
                pass
            elif token in [CnsMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 696
                self.proton_shift_nitrogens()
                pass
            elif token in [CnsMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 697
                self.proton_shift_oxygens()
                pass
            elif token in [CnsMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 698
                self.proton_shift_ring_atoms()
                pass
            elif token in [CnsMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 699
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 700
                self.match(CnsMRParser.Classification)
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 701
                    self.match(CnsMRParser.Equ_op)


                self.state = 704
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 705
                self.match(CnsMRParser.Error)
                self.state = 707
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 706
                    self.match(CnsMRParser.Equ_op)


                self.state = 709
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 12)
                self.state = 710
                self.match(CnsMRParser.ForceConstant)
                self.state = 711
                self.number_s()
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                    self.state = 712
                    self.number_s()


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 715
                self.match(CnsMRParser.Potential)
                self.state = 716
                self.match(CnsMRParser.Coupling_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 717
                self.match(CnsMRParser.Print)
                self.state = 718
                self.match(CnsMRParser.Threshold)
                self.state = 719
                self.number_s()
                self.state = 726
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 720
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 721
                    self.match(CnsMRParser.Classification)
                    self.state = 723
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 722
                        self.match(CnsMRParser.Equ_op)


                    self.state = 725
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 728
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 730
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 733
            self.match(CnsMRParser.Observed)
            self.state = 734
            self.selection()
            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 735
                self.selection()


            self.state = 738
            self.number_s()
            self.state = 740
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Integer or _la==CnsMRParser.Real:
                self.state = 739
                self.number_s()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.match(CnsMRParser.Rcoil)
            self.state = 743
            self.selection()
            self.state = 744
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 746
            self.match(CnsMRParser.Anisotropy)
            self.state = 747
            self.selection()
            self.state = 748
            self.selection()
            self.state = 749
            self.selection()
            self.state = 750
            self.match(CnsMRParser.Simple_name)
            self.state = 752
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 751
                self.match(CnsMRParser.Logical)


            self.state = 754
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 756
            self.match(CnsMRParser.Amides)
            self.state = 757
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbons(self):
            return self.getToken(CnsMRParser.Carbons, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 759
            self.match(CnsMRParser.Carbons)
            self.state = 760
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 762
            self.match(CnsMRParser.Nitrogens)
            self.state = 763
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 765
            self.match(CnsMRParser.Oxygens)
            self.state = 766
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(CnsMRParser.RingAtoms)
            self.state = 769
            self.match(CnsMRParser.Simple_name)
            self.state = 770
            self.selection()
            self.state = 771
            self.selection()
            self.state = 772
            self.selection()
            self.state = 773
            self.selection()
            self.state = 774
            self.selection()
            self.state = 776
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 775
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 778
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 779
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 864
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 781
                self.conf_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 782
                self.match(CnsMRParser.Classification)
                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 783
                    self.match(CnsMRParser.Equ_op)


                self.state = 786
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 787
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 788
                self.match(CnsMRParser.Expectation)
                self.state = 789
                self.match(CnsMRParser.Integer)
                self.state = 791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 790
                    self.match(CnsMRParser.Integer)


                self.state = 794
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
                if la_ == 1:
                    self.state = 793
                    self.match(CnsMRParser.Integer)


                self.state = 797
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 796
                    self.match(CnsMRParser.Integer)


                self.state = 799
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 800
                self.match(CnsMRParser.Error)
                self.state = 802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 801
                    self.match(CnsMRParser.Equ_op)


                self.state = 804
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 805
                self.match(CnsMRParser.ForceConstant)
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 806
                    self.match(CnsMRParser.Equ_op)


                self.state = 809
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 810
                self.match(CnsMRParser.Nrestraints)
                self.state = 812
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 811
                    self.match(CnsMRParser.Equ_op)


                self.state = 814
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 815
                self.match(CnsMRParser.Phase)
                self.state = 816
                self.match(CnsMRParser.Integer)
                self.state = 817
                self.match(CnsMRParser.Integer)
                self.state = 818
                self.match(CnsMRParser.Integer)
                self.state = 822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
                if la_ == 1:
                    self.state = 819
                    self.match(CnsMRParser.Integer)
                    self.state = 820
                    self.match(CnsMRParser.Integer)
                    self.state = 821
                    self.match(CnsMRParser.Integer)


                self.state = 827
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
                if la_ == 1:
                    self.state = 824
                    self.match(CnsMRParser.Integer)
                    self.state = 825
                    self.match(CnsMRParser.Integer)
                    self.state = 826
                    self.match(CnsMRParser.Integer)


                self.state = 832
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 829
                    self.match(CnsMRParser.Integer)
                    self.state = 830
                    self.match(CnsMRParser.Integer)
                    self.state = 831
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 834
                self.match(CnsMRParser.Potential)
                self.state = 836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 835
                    self.match(CnsMRParser.Equ_op)


                self.state = 838
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 839
                self.match(CnsMRParser.Print)
                self.state = 840
                self.match(CnsMRParser.Threshold)
                self.state = 841
                self.number_s()
                self.state = 848
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 842
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 843
                    self.match(CnsMRParser.Classification)
                    self.state = 845
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 844
                        self.match(CnsMRParser.Equ_op)


                    self.state = 847
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 850
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 851
                self.match(CnsMRParser.Size)
                self.state = 852
                self.match(CnsMRParser.Dimensions)
                self.state = 853
                self.match(CnsMRParser.Integer)
                self.state = 855
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 854
                    self.match(CnsMRParser.Integer)


                self.state = 858
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 857
                    self.match(CnsMRParser.Integer)


                self.state = 861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 860
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 863
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.match(CnsMRParser.Assign)
            self.state = 867
            self.selection()
            self.state = 868
            self.selection()
            self.state = 869
            self.selection()
            self.state = 870
            self.selection()
            self.state = 876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.state = 871
                self.selection()
                self.state = 872
                self.selection()
                self.state = 873
                self.selection()
                self.state = 874
                self.selection()


            self.state = 883
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
            if la_ == 1:
                self.state = 878
                self.selection()
                self.state = 879
                self.selection()
                self.state = 880
                self.selection()
                self.state = 881
                self.selection()


            self.state = 890
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 885
                self.selection()
                self.state = 886
                self.selection()
                self.state = 887
                self.selection()
                self.state = 888
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 924
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 892
                self.dani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 893
                self.match(CnsMRParser.Classification)
                self.state = 895
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 894
                    self.match(CnsMRParser.Equ_op)


                self.state = 897
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 898
                self.match(CnsMRParser.Coefficients)
                self.state = 899
                self.number_s()
                self.state = 900
                self.number_s()
                self.state = 901
                self.number_s()
                self.state = 902
                self.number_s()
                self.state = 903
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 905
                self.match(CnsMRParser.ForceConstant)
                self.state = 907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 906
                    self.match(CnsMRParser.Equ_op)


                self.state = 909
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 910
                self.match(CnsMRParser.Nrestraints)
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 911
                    self.match(CnsMRParser.Equ_op)


                self.state = 914
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 915
                self.match(CnsMRParser.Potential)
                self.state = 917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 916
                    self.match(CnsMRParser.Equ_op)


                self.state = 919
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 920
                self.match(CnsMRParser.Print)
                self.state = 921
                self.match(CnsMRParser.Threshold)
                self.state = 922
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 923
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 926
            self.match(CnsMRParser.Assign)
            self.state = 927
            self.selection()
            self.state = 928
            self.selection()
            self.state = 929
            self.selection()
            self.state = 930
            self.selection()
            self.state = 931
            self.selection()
            self.state = 932
            self.selection()
            self.state = 933
            self.number()
            self.state = 934
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 970
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 936
                self.one_bond_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 937
                self.match(CnsMRParser.Classification)
                self.state = 939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 938
                    self.match(CnsMRParser.Equ_op)


                self.state = 941
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 942
                self.match(CnsMRParser.Coefficients)
                self.state = 943
                self.number_s()
                self.state = 944
                self.number_s()
                self.state = 945
                self.number_s()
                self.state = 946
                self.number_s()
                self.state = 947
                self.number_s()
                self.state = 948
                self.number_s()
                self.state = 949
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 951
                self.match(CnsMRParser.ForceConstant)
                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 952
                    self.match(CnsMRParser.Equ_op)


                self.state = 955
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 956
                self.match(CnsMRParser.Nrestraints)
                self.state = 958
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 957
                    self.match(CnsMRParser.Equ_op)


                self.state = 960
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 961
                self.match(CnsMRParser.Potential)
                self.state = 963
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 962
                    self.match(CnsMRParser.Equ_op)


                self.state = 965
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 966
                self.match(CnsMRParser.Print)
                self.state = 967
                self.match(CnsMRParser.Threshold)
                self.state = 968
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 969
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.match(CnsMRParser.Assign)
            self.state = 973
            self.selection()
            self.state = 974
            self.selection()
            self.state = 975
            self.selection()
            self.state = 976
            self.selection()
            self.state = 977
            self.selection()
            self.state = 978
            self.selection()
            self.state = 979
            self.selection()
            self.state = 980
            self.selection()
            self.state = 981
            self.number()
            self.state = 982
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(CnsMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Angle_dihedral(self):
            return self.getToken(CnsMRParser.Angle_dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1036
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 984
                self.angle_db_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 985
                self.match(CnsMRParser.Classification)
                self.state = 987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 986
                    self.match(CnsMRParser.Equ_op)


                self.state = 989
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 990
                self.match(CnsMRParser.DerivFlag)
                self.state = 992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 991
                    self.match(CnsMRParser.Equ_op)


                self.state = 994
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 995
                self.match(CnsMRParser.Expectation)
                self.state = 996
                self.match(CnsMRParser.Integer)
                self.state = 997
                self.match(CnsMRParser.Integer)
                self.state = 998
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 999
                self.match(CnsMRParser.Error)
                self.state = 1001
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1000
                    self.match(CnsMRParser.Equ_op)


                self.state = 1003
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1004
                self.match(CnsMRParser.ForceConstant)
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1005
                    self.match(CnsMRParser.Equ_op)


                self.state = 1008
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1009
                self.match(CnsMRParser.Nrestraints)
                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1010
                    self.match(CnsMRParser.Equ_op)


                self.state = 1013
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1014
                self.match(CnsMRParser.Potential)
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1015
                    self.match(CnsMRParser.Equ_op)


                self.state = 1018
                self.match(CnsMRParser.Rdc_potential)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1019
                self.match(CnsMRParser.Print)
                self.state = 1020
                self.match(CnsMRParser.Threshold)
                self.state = 1021
                self.number_s()
                self.state = 1028
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 1022
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 1023
                    self.match(CnsMRParser.Classification)
                    self.state = 1025
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1024
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1027
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1030
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1031
                self.match(CnsMRParser.Size)
                self.state = 1032
                self.match(CnsMRParser.Angle_dihedral)
                self.state = 1033
                self.match(CnsMRParser.Integer)
                self.state = 1034
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1035
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1038
            self.match(CnsMRParser.Assign)
            self.state = 1039
            self.selection()
            self.state = 1040
            self.selection()
            self.state = 1041
            self.selection()
            self.state = 1042
            self.selection()
            self.state = 1043
            self.selection()
            self.state = 1044
            self.selection()
            self.state = 1045
            self.selection()
            self.state = 1046
            self.selection()
            self.state = 1047
            self.selection()
            self.state = 1048
            self.selection()
            self.state = 1049
            self.selection()
            self.state = 1051
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1050
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1053
            self.match(CnsMRParser.L_paren)
            self.state = 1054
            self.selection_expression()
            self.state = 1055
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1057
            self.term()
            self.state = 1062
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 1058
                self.match(CnsMRParser.Or_op)
                self.state = 1059
                self.term()
                self.state = 1064
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.factor(0)
            self.state = 1070
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1066
                self.match(CnsMRParser.And_op)
                self.state = 1067
                self.factor(0)
                self.state = 1072
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store_1(self):
            return self.getToken(CnsMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(CnsMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(CnsMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(CnsMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(CnsMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(CnsMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(CnsMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(CnsMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(CnsMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 98
        self.enterRecursionRule(localctx, 98, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
            if la_ == 1:
                self.state = 1074
                self.match(CnsMRParser.L_paren)
                self.state = 1075
                self.selection_expression()
                self.state = 1076
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1078
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1079
                self.match(CnsMRParser.Atom)
                self.state = 1080
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1081
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1082
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1083
                self.match(CnsMRParser.Attribute)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1084
                    self.match(CnsMRParser.Abs)


                self.state = 1087
                self.match(CnsMRParser.Attr_properties)
                self.state = 1088
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1089
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1090
                self.match(CnsMRParser.BondedTo)
                self.state = 1091
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1092
                self.match(CnsMRParser.ByGroup)
                self.state = 1093
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1094
                self.match(CnsMRParser.ByRes)
                self.state = 1095
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1096
                self.match(CnsMRParser.Chemical)
                self.state = 1103
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1097
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1098
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1101
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,133,self._ctx)
                    if la_ == 1:
                        self.state = 1099
                        self.match(CnsMRParser.Colon)
                        self.state = 1100
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1105
                self.match(CnsMRParser.Fbox)
                self.state = 1106
                self.number_f()
                self.state = 1107
                self.number_f()
                self.state = 1108
                self.number_f()
                self.state = 1109
                self.number_f()
                self.state = 1110
                self.number_f()
                self.state = 1111
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1113
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1114
                self.match(CnsMRParser.Id)
                self.state = 1115
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1116
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1117
                self.match(CnsMRParser.Name)
                self.state = 1124
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1118
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1119
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1122
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,135,self._ctx)
                    if la_ == 1:
                        self.state = 1120
                        self.match(CnsMRParser.Colon)
                        self.state = 1121
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1126
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1127
                self.match(CnsMRParser.Not_op)
                self.state = 1128
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1129
                self.match(CnsMRParser.Point)
                self.state = 1130
                self.match(CnsMRParser.L_paren)
                self.state = 1131
                self.number_f()
                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1132
                    self.match(CnsMRParser.Comma)


                self.state = 1135
                self.number_f()
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1136
                    self.match(CnsMRParser.Comma)


                self.state = 1139
                self.number_f()
                self.state = 1140
                self.match(CnsMRParser.R_paren)
                self.state = 1141
                self.match(CnsMRParser.Cut)
                self.state = 1142
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1144
                self.match(CnsMRParser.Point)
                self.state = 1145
                self.match(CnsMRParser.L_paren)
                self.state = 1146
                self.match(CnsMRParser.Tail)
                self.state = 1148
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1147
                    self.match(CnsMRParser.Equ_op)


                self.state = 1150
                self.selection()
                self.state = 1152
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1151
                    self.match(CnsMRParser.Comma)


                self.state = 1159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1154
                    self.match(CnsMRParser.Head)
                    self.state = 1156
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1155
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1158
                    self.selection()


                self.state = 1161
                self.match(CnsMRParser.R_paren)
                self.state = 1162
                self.match(CnsMRParser.Cut)
                self.state = 1163
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1165
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1166
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1167
                self.match(CnsMRParser.Residue)
                self.state = 1174
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1168
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1169
                    self.match(CnsMRParser.Integer)
                    self.state = 1172
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,143,self._ctx)
                    if la_ == 1:
                        self.state = 1170
                        self.match(CnsMRParser.Colon)
                        self.state = 1171
                        self.match(CnsMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1176
                self.match(CnsMRParser.Resname)
                self.state = 1183
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1177
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1178
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1181
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                    if la_ == 1:
                        self.state = 1179
                        self.match(CnsMRParser.Colon)
                        self.state = 1180
                        self.match(CnsMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1185
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1197
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1186
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1187
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1190
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
                    if la_ == 1:
                        self.state = 1188
                        self.match(CnsMRParser.Colon)
                        self.state = 1189
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1192
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1195
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,148,self._ctx)
                    if la_ == 1:
                        self.state = 1193
                        self.match(CnsMRParser.Colon)
                        self.state = 1194
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1199
                self.match(CnsMRParser.Sfbox)
                self.state = 1200
                self.number_f()
                self.state = 1201
                self.number_f()
                self.state = 1202
                self.number_f()
                self.state = 1203
                self.number_f()
                self.state = 1204
                self.number_f()
                self.state = 1205
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1207
                self.match(CnsMRParser.Store_1)
                pass

            elif la_ == 25:
                self.state = 1208
                self.match(CnsMRParser.Store_2)
                pass

            elif la_ == 26:
                self.state = 1209
                self.match(CnsMRParser.Store_3)
                pass

            elif la_ == 27:
                self.state = 1210
                self.match(CnsMRParser.Store_4)
                pass

            elif la_ == 28:
                self.state = 1211
                self.match(CnsMRParser.Store_5)
                pass

            elif la_ == 29:
                self.state = 1212
                self.match(CnsMRParser.Store_6)
                pass

            elif la_ == 30:
                self.state = 1213
                self.match(CnsMRParser.Store_7)
                pass

            elif la_ == 31:
                self.state = 1214
                self.match(CnsMRParser.Store_8)
                pass

            elif la_ == 32:
                self.state = 1215
                self.match(CnsMRParser.Store_9)
                pass

            elif la_ == 33:
                self.state = 1216
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1227
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,152,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1225
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1219
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1220
                        self.match(CnsMRParser.Around)
                        self.state = 1221
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1222
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1223
                        self.match(CnsMRParser.Saround)
                        self.state = 1224
                        self.number_f()
                        pass

             
                self.state = 1229
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,152,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1232
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CnsMRParser.Flags, 0)

        def Include(self):
            return self.getToken(CnsMRParser.Include, 0)

        def End_flag(self):
            return self.getToken(CnsMRParser.End_flag, 0)

        def Exclude(self):
            return self.getToken(CnsMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Class_name)
            else:
                return self.getToken(CnsMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(CnsMRParser.Any_class, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = CnsMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1236
            self.match(CnsMRParser.Flags)
            self.state = 1247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Exclude:
                self.state = 1237
                self.match(CnsMRParser.Exclude)
                self.state = 1245
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Include, CnsMRParser.Class_name]:
                    self.state = 1241
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CnsMRParser.Class_name:
                        self.state = 1238
                        self.match(CnsMRParser.Class_name)
                        self.state = 1243
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CnsMRParser.Any_class]:
                    self.state = 1244
                    self.match(CnsMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1249
            self.match(CnsMRParser.Include)
            self.state = 1253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Class_name:
                self.state = 1250
                self.match(CnsMRParser.Class_name)
                self.state = 1255
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1256
            self.match(CnsMRParser.End_flag)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[49] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




