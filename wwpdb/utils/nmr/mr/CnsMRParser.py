# Generated from CnsMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,254,1881,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,187,8,0,10,0,
        12,0,190,9,0,1,0,1,0,1,1,1,1,5,1,196,8,1,10,1,12,1,199,9,1,1,1,1,
        1,1,2,3,2,204,8,2,1,2,1,2,5,2,208,8,2,10,2,12,2,211,9,2,1,2,1,2,
        1,3,3,3,216,8,3,1,3,1,3,5,3,220,8,3,10,3,12,3,223,9,3,1,3,1,3,1,
        4,3,4,228,8,4,1,4,1,4,5,4,232,8,4,10,4,12,4,235,9,4,1,4,1,4,1,5,
        1,5,5,5,241,8,5,10,5,12,5,244,9,5,1,5,1,5,1,6,1,6,5,6,250,8,6,10,
        6,12,6,253,9,6,1,6,1,6,1,7,1,7,5,7,259,8,7,10,7,12,7,262,9,7,1,7,
        1,7,1,8,1,8,5,8,268,8,8,10,8,12,8,271,9,8,1,8,1,8,1,9,1,9,5,9,277,
        8,9,10,9,12,9,280,9,9,1,9,1,9,1,10,1,10,5,10,286,8,10,10,10,12,10,
        289,9,10,1,10,1,10,1,11,1,11,5,11,295,8,11,10,11,12,11,298,9,11,
        1,11,1,11,1,12,1,12,5,12,304,8,12,10,12,12,12,307,9,12,1,12,1,12,
        1,13,1,13,3,13,313,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,3,13,329,8,13,1,13,1,13,1,13,3,13,
        334,8,13,1,13,1,13,1,13,1,13,1,13,3,13,341,8,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,3,13,350,8,13,1,13,1,13,1,13,3,13,355,8,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,5,13,364,8,13,10,13,12,13,367,9,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,378,8,13,1,13,
        1,13,1,13,1,13,3,13,384,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,3,13,397,8,13,1,13,1,13,1,13,5,13,402,8,13,10,
        13,12,13,405,9,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,5,
        13,429,8,13,10,13,12,13,432,9,13,1,13,1,13,1,13,3,13,437,8,13,1,
        13,3,13,440,8,13,1,14,1,14,1,14,1,14,1,14,3,14,447,8,14,1,14,3,14,
        450,8,14,1,14,5,14,453,8,14,10,14,12,14,456,9,14,1,14,1,14,3,14,
        460,8,14,1,14,1,14,1,14,3,14,465,8,14,1,14,3,14,468,8,14,1,14,3,
        14,471,8,14,5,14,473,8,14,10,14,12,14,476,9,14,1,15,1,15,3,15,480,
        8,15,1,15,1,15,1,15,3,15,485,8,15,1,15,1,15,1,15,1,15,1,15,3,15,
        492,8,15,1,16,1,16,3,16,496,8,16,1,16,1,16,1,16,3,16,501,8,16,1,
        16,1,16,1,16,3,16,506,8,16,1,16,1,16,1,16,3,16,511,8,16,1,16,1,16,
        1,16,3,16,516,8,16,1,16,1,16,1,16,3,16,521,8,16,1,16,1,16,1,16,3,
        16,526,8,16,1,16,3,16,529,8,16,1,17,1,17,1,17,1,17,1,17,3,17,536,
        8,17,1,17,1,17,1,17,3,17,541,8,17,1,17,1,17,1,17,3,17,546,8,17,1,
        17,1,17,1,17,1,17,3,17,552,8,17,1,17,1,17,3,17,556,8,17,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,5,19,571,
        8,19,10,19,12,19,574,9,19,1,19,1,19,1,19,3,19,579,8,19,1,20,1,20,
        3,20,583,8,20,1,20,1,20,1,20,3,20,588,8,20,1,20,3,20,591,8,20,1,
        21,1,21,1,21,3,21,596,8,21,1,21,1,21,1,21,3,21,601,8,21,1,21,1,21,
        1,21,3,21,606,8,21,1,21,1,21,3,21,610,8,21,1,21,1,21,1,21,1,21,3,
        21,616,8,21,1,21,1,21,3,21,620,8,21,1,21,1,21,3,21,624,8,21,1,21,
        3,21,627,8,21,3,21,629,8,21,1,21,1,21,3,21,633,8,21,1,22,1,22,1,
        22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,3,23,645,8,23,1,23,1,23,1,
        23,1,23,1,23,1,23,1,23,1,23,3,23,655,8,23,1,23,1,23,1,23,3,23,660,
        8,23,1,23,1,23,1,23,3,23,665,8,23,1,23,1,23,1,23,1,23,1,23,3,23,
        672,8,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,3,24,683,8,
        24,1,24,3,24,686,8,24,1,25,1,25,1,25,1,25,3,25,692,8,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,703,8,25,1,25,1,25,1,25,
        1,25,3,25,709,8,25,1,25,1,25,3,25,713,8,25,1,25,1,25,1,25,3,25,718,
        8,25,1,25,1,25,1,25,3,25,723,8,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,3,25,732,8,25,1,25,3,25,735,8,25,1,25,3,25,738,8,25,1,26,1,
        26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,3,26,750,8,26,1,26,1,
        26,1,26,1,26,1,26,3,26,757,8,26,1,27,1,27,1,27,1,27,3,27,763,8,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,775,8,27,
        1,27,1,27,1,27,3,27,780,8,27,1,27,1,27,1,27,3,27,785,8,27,1,27,1,
        27,1,27,3,27,790,8,27,1,27,1,27,1,27,3,27,795,8,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,3,27,804,8,27,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,
        1,30,1,30,1,30,1,30,1,30,1,30,3,30,831,8,30,1,30,1,30,1,30,3,30,
        836,8,30,1,30,1,30,1,30,1,30,3,30,842,8,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,3,30,852,8,30,1,30,3,30,855,8,30,1,30,1,30,1,30,
        3,30,860,8,30,1,31,1,31,1,31,3,31,865,8,31,1,31,1,31,3,31,869,8,
        31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,3,33,881,8,
        33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,
        37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,3,38,905,8,38,1,
        39,1,39,1,39,1,40,1,40,1,40,3,40,913,8,40,1,40,1,40,1,40,1,40,1,
        40,3,40,920,8,40,1,40,3,40,923,8,40,1,40,3,40,926,8,40,1,40,1,40,
        1,40,3,40,931,8,40,1,40,1,40,1,40,3,40,936,8,40,1,40,1,40,1,40,3,
        40,941,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,951,8,40,
        1,40,1,40,1,40,3,40,956,8,40,1,40,1,40,1,40,3,40,961,8,40,1,40,1,
        40,3,40,965,8,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,3,40,974,8,40,
        1,40,3,40,977,8,40,1,40,1,40,1,40,1,40,1,40,3,40,984,8,40,1,40,3,
        40,987,8,40,1,40,3,40,990,8,40,1,40,3,40,993,8,40,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1005,8,41,1,41,1,41,1,41,
        1,41,1,41,3,41,1012,8,41,1,41,1,41,1,41,1,41,1,41,3,41,1019,8,41,
        1,42,1,42,1,42,3,42,1024,8,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,42,1,42,3,42,1036,8,42,1,42,1,42,1,42,3,42,1041,8,42,1,42,
        1,42,1,42,3,42,1046,8,42,1,42,1,42,1,42,1,42,1,42,3,42,1053,8,42,
        1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,43,1064,8,43,1,44,
        1,44,1,44,3,44,1069,8,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,3,44,1083,8,44,1,44,1,44,1,44,3,44,1088,8,44,
        1,44,1,44,1,44,3,44,1093,8,44,1,44,1,44,1,44,1,44,1,44,3,44,1100,
        8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,46,1,46,1,46,3,46,1117,8,46,1,46,1,46,1,46,3,46,1122,8,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,3,46,1131,8,46,1,46,1,46,1,46,3,46,
        1136,8,46,1,46,1,46,1,46,3,46,1141,8,46,1,46,1,46,1,46,3,46,1146,
        8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1155,8,46,1,46,3,46,
        1158,8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1166,8,46,1,47,1,47,
        1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,1181,
        8,47,1,48,1,48,1,48,5,48,1186,8,48,10,48,12,48,1189,9,48,1,48,1,
        48,1,49,1,49,5,49,1195,8,49,10,49,12,49,1198,9,49,1,49,1,49,1,49,
        3,49,1203,8,49,1,50,1,50,3,50,1207,8,50,1,50,1,50,1,50,3,50,1212,
        8,50,1,50,1,50,1,50,3,50,1217,8,50,1,50,3,50,1220,8,50,1,51,1,51,
        1,51,1,51,1,52,1,52,1,52,5,52,1229,8,52,10,52,12,52,1232,9,52,1,
        53,1,53,1,53,5,53,1237,8,53,10,53,12,53,1240,9,53,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1254,8,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        3,54,1270,8,54,1,54,3,54,1273,8,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1292,
        8,54,1,54,1,54,1,54,3,54,1297,8,54,1,54,3,54,1300,8,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,3,54,1309,8,54,1,54,1,54,3,54,1313,8,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1324,8,54,1,54,
        1,54,3,54,1328,8,54,1,54,1,54,3,54,1332,8,54,1,54,3,54,1335,8,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,1348,
        8,54,1,54,3,54,1351,8,54,1,54,1,54,1,54,1,54,1,54,3,54,1358,8,54,
        1,54,3,54,1361,8,54,1,54,1,54,1,54,1,54,1,54,3,54,1368,8,54,1,54,
        1,54,1,54,3,54,1373,8,54,1,54,3,54,1376,8,54,1,54,1,54,1,54,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,
        1,54,3,54,1396,8,54,1,54,1,54,1,54,1,54,1,54,1,54,5,54,1404,8,54,
        10,54,12,54,1407,9,54,1,55,1,55,1,56,1,56,1,57,1,57,1,58,1,58,1,
        59,1,59,1,59,5,59,1420,8,59,10,59,12,59,1423,9,59,1,59,3,59,1426,
        8,59,3,59,1428,8,59,1,59,1,59,5,59,1432,8,59,10,59,12,59,1435,9,
        59,1,59,1,59,1,60,1,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,3,
        61,1449,8,61,1,62,1,62,1,62,3,62,1454,8,62,1,63,1,63,1,63,3,63,1459,
        8,63,1,64,1,64,1,64,1,64,1,64,1,64,1,64,3,64,1468,8,64,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,5,65,1530,8,65,10,65,12,65,1533,9,
        65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,5,
        65,1547,8,65,10,65,12,65,1550,9,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,1,65,
        1,65,1,65,1,65,1,65,1,65,3,65,1589,8,65,1,66,1,66,1,66,1,66,1,66,
        1,67,1,67,1,67,1,67,1,67,1,67,1,68,1,68,1,68,3,68,1605,8,68,1,69,
        1,69,3,69,1609,8,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        1,69,3,69,1621,8,69,1,69,1,69,1,70,1,70,5,70,1627,8,70,10,70,12,
        70,1630,9,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
        71,1,71,3,71,1644,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
        71,1,71,1,71,1,71,1,71,3,71,1659,8,71,1,71,1,71,1,71,1,71,1,71,1,
        71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
        71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1689,8,71,1,
        72,1,72,1,72,1,72,1,72,5,72,1696,8,72,10,72,12,72,1699,9,72,1,72,
        5,72,1702,8,72,10,72,12,72,1705,9,72,1,72,5,72,1708,8,72,10,72,12,
        72,1711,9,72,3,72,1713,8,72,1,72,1,72,1,72,1,72,1,72,5,72,1720,8,
        72,10,72,12,72,1723,9,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,
        1,73,5,73,1734,8,73,10,73,12,73,1737,9,73,1,73,5,73,1740,8,73,10,
        73,12,73,1743,9,73,1,73,5,73,1746,8,73,10,73,12,73,1749,9,73,3,73,
        1751,8,73,1,73,1,73,1,73,1,73,1,73,5,73,1758,8,73,10,73,12,73,1761,
        9,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,5,74,1772,8,74,
        10,74,12,74,1775,9,74,1,74,5,74,1778,8,74,10,74,12,74,1781,9,74,
        1,74,5,74,1784,8,74,10,74,12,74,1787,9,74,3,74,1789,8,74,1,74,1,
        74,1,74,1,74,1,74,5,74,1796,8,74,10,74,12,74,1799,9,74,1,74,1,74,
        1,74,1,74,1,75,1,75,1,75,1,75,1,75,5,75,1810,8,75,10,75,12,75,1813,
        9,75,1,75,5,75,1816,8,75,10,75,12,75,1819,9,75,1,75,5,75,1822,8,
        75,10,75,12,75,1825,9,75,3,75,1827,8,75,1,75,1,75,1,75,1,75,1,75,
        5,75,1834,8,75,10,75,12,75,1837,9,75,1,75,1,75,1,75,1,75,1,76,1,
        76,1,76,1,76,1,76,5,76,1848,8,76,10,76,12,76,1851,9,76,1,76,5,76,
        1854,8,76,10,76,12,76,1857,9,76,1,76,5,76,1860,8,76,10,76,12,76,
        1863,9,76,3,76,1865,8,76,1,76,1,76,1,76,1,76,1,76,5,76,1872,8,76,
        10,76,12,76,1875,9,76,1,76,1,76,1,76,1,76,1,76,3,365,403,430,1,108,
        77,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,
        44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
        88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,
        124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,0,12,
        2,0,49,49,85,85,1,0,157,158,2,0,150,150,159,159,3,0,150,150,152,
        152,169,169,2,0,150,150,152,152,1,0,125,126,1,0,196,200,1,0,235,
        241,4,0,49,49,85,85,135,136,157,157,2,0,131,131,150,150,2,0,49,49,
        136,136,2,0,26,26,139,139,2253,0,188,1,0,0,0,2,193,1,0,0,0,4,203,
        1,0,0,0,6,215,1,0,0,0,8,227,1,0,0,0,10,238,1,0,0,0,12,247,1,0,0,
        0,14,256,1,0,0,0,16,265,1,0,0,0,18,274,1,0,0,0,20,283,1,0,0,0,22,
        292,1,0,0,0,24,301,1,0,0,0,26,439,1,0,0,0,28,441,1,0,0,0,30,491,
        1,0,0,0,32,528,1,0,0,0,34,555,1,0,0,0,36,557,1,0,0,0,38,578,1,0,
        0,0,40,590,1,0,0,0,42,632,1,0,0,0,44,634,1,0,0,0,46,671,1,0,0,0,
        48,673,1,0,0,0,50,737,1,0,0,0,52,739,1,0,0,0,54,803,1,0,0,0,56,805,
        1,0,0,0,58,814,1,0,0,0,60,859,1,0,0,0,62,861,1,0,0,0,64,870,1,0,
        0,0,66,874,1,0,0,0,68,884,1,0,0,0,70,887,1,0,0,0,72,890,1,0,0,0,
        74,893,1,0,0,0,76,896,1,0,0,0,78,906,1,0,0,0,80,992,1,0,0,0,82,994,
        1,0,0,0,84,1052,1,0,0,0,86,1054,1,0,0,0,88,1099,1,0,0,0,90,1101,
        1,0,0,0,92,1165,1,0,0,0,94,1167,1,0,0,0,96,1182,1,0,0,0,98,1202,
        1,0,0,0,100,1219,1,0,0,0,102,1221,1,0,0,0,104,1225,1,0,0,0,106,1233,
        1,0,0,0,108,1395,1,0,0,0,110,1408,1,0,0,0,112,1410,1,0,0,0,114,1412,
        1,0,0,0,116,1414,1,0,0,0,118,1416,1,0,0,0,120,1438,1,0,0,0,122,1448,
        1,0,0,0,124,1450,1,0,0,0,126,1455,1,0,0,0,128,1467,1,0,0,0,130,1588,
        1,0,0,0,132,1590,1,0,0,0,134,1595,1,0,0,0,136,1601,1,0,0,0,138,1606,
        1,0,0,0,140,1624,1,0,0,0,142,1688,1,0,0,0,144,1690,1,0,0,0,146,1728,
        1,0,0,0,148,1766,1,0,0,0,150,1804,1,0,0,0,152,1842,1,0,0,0,154,187,
        3,2,1,0,155,187,3,4,2,0,156,187,3,6,3,0,157,187,3,8,4,0,158,187,
        3,10,5,0,159,187,3,12,6,0,160,187,3,14,7,0,161,187,3,16,8,0,162,
        187,3,18,9,0,163,187,3,20,10,0,164,187,3,22,11,0,165,187,3,24,12,
        0,166,187,3,96,48,0,167,187,3,118,59,0,168,187,3,120,60,0,169,187,
        3,134,67,0,170,187,3,138,69,0,171,187,3,140,70,0,172,187,3,144,72,
        0,173,187,3,146,73,0,174,187,3,148,74,0,175,187,3,150,75,0,176,187,
        3,152,76,0,177,187,3,28,14,0,178,187,3,36,18,0,179,187,3,48,24,0,
        180,187,3,38,19,0,181,187,3,44,22,0,182,187,3,52,26,0,183,187,3,
        56,28,0,184,187,3,62,31,0,185,187,3,142,71,0,186,154,1,0,0,0,186,
        155,1,0,0,0,186,156,1,0,0,0,186,157,1,0,0,0,186,158,1,0,0,0,186,
        159,1,0,0,0,186,160,1,0,0,0,186,161,1,0,0,0,186,162,1,0,0,0,186,
        163,1,0,0,0,186,164,1,0,0,0,186,165,1,0,0,0,186,166,1,0,0,0,186,
        167,1,0,0,0,186,168,1,0,0,0,186,169,1,0,0,0,186,170,1,0,0,0,186,
        171,1,0,0,0,186,172,1,0,0,0,186,173,1,0,0,0,186,174,1,0,0,0,186,
        175,1,0,0,0,186,176,1,0,0,0,186,177,1,0,0,0,186,178,1,0,0,0,186,
        179,1,0,0,0,186,180,1,0,0,0,186,181,1,0,0,0,186,182,1,0,0,0,186,
        183,1,0,0,0,186,184,1,0,0,0,186,185,1,0,0,0,187,190,1,0,0,0,188,
        186,1,0,0,0,188,189,1,0,0,0,189,191,1,0,0,0,190,188,1,0,0,0,191,
        192,5,0,0,1,192,1,1,0,0,0,193,197,5,3,0,0,194,196,3,26,13,0,195,
        194,1,0,0,0,196,199,1,0,0,0,197,195,1,0,0,0,197,198,1,0,0,0,198,
        200,1,0,0,0,199,197,1,0,0,0,200,201,5,2,0,0,201,3,1,0,0,0,202,204,
        5,48,0,0,203,202,1,0,0,0,203,204,1,0,0,0,204,205,1,0,0,0,205,209,
        5,49,0,0,206,208,3,34,17,0,207,206,1,0,0,0,208,211,1,0,0,0,209,207,
        1,0,0,0,209,210,1,0,0,0,210,212,1,0,0,0,211,209,1,0,0,0,212,213,
        5,2,0,0,213,5,1,0,0,0,214,216,5,48,0,0,215,214,1,0,0,0,215,216,1,
        0,0,0,216,217,1,0,0,0,217,221,5,52,0,0,218,220,3,38,19,0,219,218,
        1,0,0,0,220,223,1,0,0,0,221,219,1,0,0,0,221,222,1,0,0,0,222,224,
        1,0,0,0,223,221,1,0,0,0,224,225,5,2,0,0,225,7,1,0,0,0,226,228,5,
        48,0,0,227,226,1,0,0,0,227,228,1,0,0,0,228,229,1,0,0,0,229,233,5,
        56,0,0,230,232,3,42,21,0,231,230,1,0,0,0,232,235,1,0,0,0,233,231,
        1,0,0,0,233,234,1,0,0,0,234,236,1,0,0,0,235,233,1,0,0,0,236,237,
        5,2,0,0,237,9,1,0,0,0,238,242,5,59,0,0,239,241,3,46,23,0,240,239,
        1,0,0,0,241,244,1,0,0,0,242,240,1,0,0,0,242,243,1,0,0,0,243,245,
        1,0,0,0,244,242,1,0,0,0,245,246,5,2,0,0,246,11,1,0,0,0,247,251,5,
        62,0,0,248,250,3,50,25,0,249,248,1,0,0,0,250,253,1,0,0,0,251,249,
        1,0,0,0,251,252,1,0,0,0,252,254,1,0,0,0,253,251,1,0,0,0,254,255,
        5,2,0,0,255,13,1,0,0,0,256,260,5,63,0,0,257,259,3,54,27,0,258,257,
        1,0,0,0,259,262,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,263,
        1,0,0,0,262,260,1,0,0,0,263,264,5,2,0,0,264,15,1,0,0,0,265,269,5,
        69,0,0,266,268,3,60,30,0,267,266,1,0,0,0,268,271,1,0,0,0,269,267,
        1,0,0,0,269,270,1,0,0,0,270,272,1,0,0,0,271,269,1,0,0,0,272,273,
        5,2,0,0,273,17,1,0,0,0,274,278,5,78,0,0,275,277,3,80,40,0,276,275,
        1,0,0,0,277,280,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,281,
        1,0,0,0,280,278,1,0,0,0,281,282,5,2,0,0,282,19,1,0,0,0,283,287,5,
        83,0,0,284,286,3,84,42,0,285,284,1,0,0,0,286,289,1,0,0,0,287,285,
        1,0,0,0,287,288,1,0,0,0,288,290,1,0,0,0,289,287,1,0,0,0,290,291,
        5,2,0,0,291,21,1,0,0,0,292,296,5,84,0,0,293,295,3,88,44,0,294,293,
        1,0,0,0,295,298,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,299,
        1,0,0,0,298,296,1,0,0,0,299,300,5,2,0,0,300,23,1,0,0,0,301,305,5,
        85,0,0,302,304,3,92,46,0,303,302,1,0,0,0,304,307,1,0,0,0,305,303,
        1,0,0,0,305,306,1,0,0,0,306,308,1,0,0,0,307,305,1,0,0,0,308,309,
        5,2,0,0,309,25,1,0,0,0,310,312,5,4,0,0,311,313,5,163,0,0,312,311,
        1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,440,5,186,0,0,315,440,
        3,28,14,0,316,440,3,144,72,0,317,318,5,6,0,0,318,319,5,157,0,0,319,
        440,3,114,57,0,320,321,5,7,0,0,321,322,5,180,0,0,322,440,5,179,0,
        0,323,324,5,8,0,0,324,325,5,157,0,0,325,440,3,114,57,0,326,328,5,
        9,0,0,327,329,5,163,0,0,328,327,1,0,0,0,328,329,1,0,0,0,329,330,
        1,0,0,0,330,440,3,114,57,0,331,333,5,10,0,0,332,334,5,163,0,0,333,
        332,1,0,0,0,333,334,1,0,0,0,334,335,1,0,0,0,335,440,5,157,0,0,336,
        337,5,11,0,0,337,440,5,157,0,0,338,340,5,12,0,0,339,341,5,163,0,
        0,340,339,1,0,0,0,340,341,1,0,0,0,341,342,1,0,0,0,342,440,5,150,
        0,0,343,344,5,13,0,0,344,440,5,35,0,0,345,346,5,13,0,0,346,347,5,
        36,0,0,347,349,5,37,0,0,348,350,5,163,0,0,349,348,1,0,0,0,349,350,
        1,0,0,0,350,351,1,0,0,0,351,352,3,114,57,0,352,354,5,38,0,0,353,
        355,5,163,0,0,354,353,1,0,0,0,354,355,1,0,0,0,355,356,1,0,0,0,356,
        357,3,114,57,0,357,440,1,0,0,0,358,359,5,14,0,0,359,360,5,157,0,
        0,360,361,5,157,0,0,361,440,3,114,57,0,362,364,5,15,0,0,363,362,
        1,0,0,0,364,367,1,0,0,0,365,366,1,0,0,0,365,363,1,0,0,0,366,368,
        1,0,0,0,367,365,1,0,0,0,368,440,5,2,0,0,369,370,5,16,0,0,370,371,
        5,157,0,0,371,440,5,150,0,0,372,373,5,17,0,0,373,374,5,157,0,0,374,
        440,5,150,0,0,375,377,5,18,0,0,376,378,5,163,0,0,377,376,1,0,0,0,
        377,378,1,0,0,0,378,379,1,0,0,0,379,440,5,150,0,0,380,440,5,19,0,
        0,381,383,5,20,0,0,382,384,5,163,0,0,383,382,1,0,0,0,383,384,1,0,
        0,0,384,385,1,0,0,0,385,440,5,150,0,0,386,387,5,21,0,0,387,388,5,
        184,0,0,388,440,5,183,0,0,389,390,5,22,0,0,390,391,3,30,15,0,391,
        392,5,2,0,0,392,440,1,0,0,0,393,394,5,23,0,0,394,396,5,25,0,0,395,
        397,5,163,0,0,396,395,1,0,0,0,396,397,1,0,0,0,397,398,1,0,0,0,398,
        440,3,114,57,0,399,403,5,24,0,0,400,402,5,157,0,0,401,400,1,0,0,
        0,402,405,1,0,0,0,403,404,1,0,0,0,403,401,1,0,0,0,404,406,1,0,0,
        0,405,403,1,0,0,0,406,440,5,2,0,0,407,440,5,26,0,0,408,409,5,27,
        0,0,409,410,5,157,0,0,410,440,3,114,57,0,411,412,5,28,0,0,412,413,
        5,157,0,0,413,440,3,114,57,0,414,415,5,29,0,0,415,416,5,157,0,0,
        416,440,3,114,57,0,417,418,5,30,0,0,418,419,5,157,0,0,419,440,3,
        114,57,0,420,421,5,31,0,0,421,422,5,157,0,0,422,440,3,114,57,0,423,
        424,5,32,0,0,424,425,5,157,0,0,425,440,3,114,57,0,426,430,5,33,0,
        0,427,429,5,157,0,0,428,427,1,0,0,0,429,432,1,0,0,0,430,431,1,0,
        0,0,430,428,1,0,0,0,431,433,1,0,0,0,432,430,1,0,0,0,433,440,5,2,
        0,0,434,436,5,34,0,0,435,437,5,163,0,0,436,435,1,0,0,0,436,437,1,
        0,0,0,437,438,1,0,0,0,438,440,3,114,57,0,439,310,1,0,0,0,439,315,
        1,0,0,0,439,316,1,0,0,0,439,317,1,0,0,0,439,320,1,0,0,0,439,323,
        1,0,0,0,439,326,1,0,0,0,439,331,1,0,0,0,439,336,1,0,0,0,439,338,
        1,0,0,0,439,343,1,0,0,0,439,345,1,0,0,0,439,358,1,0,0,0,439,365,
        1,0,0,0,439,369,1,0,0,0,439,372,1,0,0,0,439,375,1,0,0,0,439,380,
        1,0,0,0,439,381,1,0,0,0,439,386,1,0,0,0,439,389,1,0,0,0,439,393,
        1,0,0,0,439,399,1,0,0,0,439,407,1,0,0,0,439,408,1,0,0,0,439,411,
        1,0,0,0,439,414,1,0,0,0,439,417,1,0,0,0,439,420,1,0,0,0,439,423,
        1,0,0,0,439,426,1,0,0,0,439,434,1,0,0,0,440,27,1,0,0,0,441,442,5,
        5,0,0,442,443,3,102,51,0,443,444,3,102,51,0,444,446,3,110,55,0,445,
        447,3,110,55,0,446,445,1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,
        450,3,110,55,0,449,448,1,0,0,0,449,450,1,0,0,0,450,454,1,0,0,0,451,
        453,3,32,16,0,452,451,1,0,0,0,453,456,1,0,0,0,454,452,1,0,0,0,454,
        455,1,0,0,0,455,474,1,0,0,0,456,454,1,0,0,0,457,459,5,145,0,0,458,
        460,5,5,0,0,459,458,1,0,0,0,459,460,1,0,0,0,460,461,1,0,0,0,461,
        462,3,102,51,0,462,464,3,102,51,0,463,465,3,110,55,0,464,463,1,0,
        0,0,464,465,1,0,0,0,465,467,1,0,0,0,466,468,3,110,55,0,467,466,1,
        0,0,0,467,468,1,0,0,0,468,470,1,0,0,0,469,471,3,110,55,0,470,469,
        1,0,0,0,470,471,1,0,0,0,471,473,1,0,0,0,472,457,1,0,0,0,473,476,
        1,0,0,0,474,472,1,0,0,0,474,475,1,0,0,0,475,29,1,0,0,0,476,474,1,
        0,0,0,477,479,5,39,0,0,478,480,5,163,0,0,479,478,1,0,0,0,479,480,
        1,0,0,0,480,481,1,0,0,0,481,492,3,114,57,0,482,484,5,40,0,0,483,
        485,5,163,0,0,484,483,1,0,0,0,484,485,1,0,0,0,485,486,1,0,0,0,486,
        492,3,114,57,0,487,488,5,41,0,0,488,492,3,102,51,0,489,490,5,42,
        0,0,490,492,3,102,51,0,491,477,1,0,0,0,491,482,1,0,0,0,491,487,1,
        0,0,0,491,489,1,0,0,0,492,31,1,0,0,0,493,495,5,43,0,0,494,496,5,
        163,0,0,495,494,1,0,0,0,495,496,1,0,0,0,496,497,1,0,0,0,497,529,
        3,116,58,0,498,500,5,44,0,0,499,501,5,163,0,0,500,499,1,0,0,0,500,
        501,1,0,0,0,501,502,1,0,0,0,502,529,3,116,58,0,503,505,5,55,0,0,
        504,506,5,163,0,0,505,504,1,0,0,0,505,506,1,0,0,0,506,507,1,0,0,
        0,507,529,3,116,58,0,508,510,5,45,0,0,509,511,5,163,0,0,510,509,
        1,0,0,0,510,511,1,0,0,0,511,512,1,0,0,0,512,529,3,116,58,0,513,515,
        5,46,0,0,514,516,5,163,0,0,515,514,1,0,0,0,515,516,1,0,0,0,516,517,
        1,0,0,0,517,529,3,116,58,0,518,520,5,47,0,0,519,521,5,163,0,0,520,
        519,1,0,0,0,520,521,1,0,0,0,521,522,1,0,0,0,522,529,3,116,58,0,523,
        525,5,12,0,0,524,526,5,163,0,0,525,524,1,0,0,0,525,526,1,0,0,0,526,
        527,1,0,0,0,527,529,3,116,58,0,528,493,1,0,0,0,528,498,1,0,0,0,528,
        503,1,0,0,0,528,508,1,0,0,0,528,513,1,0,0,0,528,518,1,0,0,0,528,
        523,1,0,0,0,529,33,1,0,0,0,530,556,3,120,60,0,531,556,3,36,18,0,
        532,556,3,146,73,0,533,535,5,12,0,0,534,536,5,163,0,0,535,534,1,
        0,0,0,535,536,1,0,0,0,536,537,1,0,0,0,537,556,5,150,0,0,538,540,
        5,50,0,0,539,541,5,163,0,0,540,539,1,0,0,0,540,541,1,0,0,0,541,542,
        1,0,0,0,542,556,5,150,0,0,543,545,5,20,0,0,544,546,5,163,0,0,545,
        544,1,0,0,0,545,546,1,0,0,0,546,547,1,0,0,0,547,556,5,150,0,0,548,
        556,5,26,0,0,549,551,5,28,0,0,550,552,5,163,0,0,551,550,1,0,0,0,
        551,552,1,0,0,0,552,553,1,0,0,0,553,556,3,114,57,0,554,556,5,51,
        0,0,555,530,1,0,0,0,555,531,1,0,0,0,555,532,1,0,0,0,555,533,1,0,
        0,0,555,538,1,0,0,0,555,543,1,0,0,0,555,548,1,0,0,0,555,549,1,0,
        0,0,555,554,1,0,0,0,556,35,1,0,0,0,557,558,5,5,0,0,558,559,3,102,
        51,0,559,560,3,102,51,0,560,561,3,102,51,0,561,562,3,102,51,0,562,
        563,3,110,55,0,563,564,3,110,55,0,564,565,3,110,55,0,565,566,5,150,
        0,0,566,37,1,0,0,0,567,579,3,120,60,0,568,572,5,53,0,0,569,571,3,
        40,20,0,570,569,1,0,0,0,571,574,1,0,0,0,572,570,1,0,0,0,572,573,
        1,0,0,0,573,575,1,0,0,0,574,572,1,0,0,0,575,579,5,2,0,0,576,579,
        5,35,0,0,577,579,5,51,0,0,578,567,1,0,0,0,578,568,1,0,0,0,578,576,
        1,0,0,0,578,577,1,0,0,0,579,39,1,0,0,0,580,582,5,54,0,0,581,583,
        5,163,0,0,582,581,1,0,0,0,582,583,1,0,0,0,583,584,1,0,0,0,584,591,
        3,102,51,0,585,587,5,55,0,0,586,588,5,163,0,0,587,586,1,0,0,0,587,
        588,1,0,0,0,588,589,1,0,0,0,589,591,3,114,57,0,590,580,1,0,0,0,590,
        585,1,0,0,0,591,41,1,0,0,0,592,633,3,120,60,0,593,595,5,57,0,0,594,
        596,5,163,0,0,595,594,1,0,0,0,595,596,1,0,0,0,596,597,1,0,0,0,597,
        633,5,150,0,0,598,600,5,58,0,0,599,601,5,163,0,0,600,599,1,0,0,0,
        600,601,1,0,0,0,601,602,1,0,0,0,602,628,5,160,0,0,603,605,3,114,
        57,0,604,606,5,148,0,0,605,604,1,0,0,0,605,606,1,0,0,0,606,607,1,
        0,0,0,607,609,3,114,57,0,608,610,5,148,0,0,609,608,1,0,0,0,609,610,
        1,0,0,0,610,611,1,0,0,0,611,612,3,114,57,0,612,629,1,0,0,0,613,615,
        5,143,0,0,614,616,5,163,0,0,615,614,1,0,0,0,615,616,1,0,0,0,616,
        617,1,0,0,0,617,619,3,102,51,0,618,620,5,148,0,0,619,618,1,0,0,0,
        619,620,1,0,0,0,620,626,1,0,0,0,621,623,5,144,0,0,622,624,5,163,
        0,0,623,622,1,0,0,0,623,624,1,0,0,0,624,625,1,0,0,0,625,627,3,102,
        51,0,626,621,1,0,0,0,626,627,1,0,0,0,627,629,1,0,0,0,628,603,1,0,
        0,0,628,613,1,0,0,0,629,630,1,0,0,0,630,631,5,161,0,0,631,633,1,
        0,0,0,632,592,1,0,0,0,632,593,1,0,0,0,632,598,1,0,0,0,633,43,1,0,
        0,0,634,635,5,5,0,0,635,636,3,102,51,0,636,637,3,110,55,0,637,638,
        3,110,55,0,638,639,3,110,55,0,639,45,1,0,0,0,640,672,3,48,24,0,641,
        672,3,148,74,0,642,644,5,10,0,0,643,645,5,163,0,0,644,643,1,0,0,
        0,644,645,1,0,0,0,645,646,1,0,0,0,646,672,5,157,0,0,647,648,5,60,
        0,0,648,649,3,114,57,0,649,650,3,114,57,0,650,651,3,114,57,0,651,
        672,1,0,0,0,652,654,5,61,0,0,653,655,5,163,0,0,654,653,1,0,0,0,654,
        655,1,0,0,0,655,656,1,0,0,0,656,672,3,114,57,0,657,659,5,18,0,0,
        658,660,5,163,0,0,659,658,1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,
        0,661,672,5,150,0,0,662,664,5,21,0,0,663,665,5,182,0,0,664,663,1,
        0,0,0,664,665,1,0,0,0,665,666,1,0,0,0,666,672,5,183,0,0,667,668,
        5,23,0,0,668,669,5,25,0,0,669,672,3,114,57,0,670,672,5,26,0,0,671,
        640,1,0,0,0,671,641,1,0,0,0,671,642,1,0,0,0,671,647,1,0,0,0,671,
        652,1,0,0,0,671,657,1,0,0,0,671,662,1,0,0,0,671,667,1,0,0,0,671,
        670,1,0,0,0,672,47,1,0,0,0,673,674,5,5,0,0,674,675,3,102,51,0,675,
        676,3,102,51,0,676,677,3,102,51,0,677,678,3,102,51,0,678,679,3,102,
        51,0,679,680,3,102,51,0,680,682,3,110,55,0,681,683,3,110,55,0,682,
        681,1,0,0,0,682,683,1,0,0,0,683,685,1,0,0,0,684,686,3,110,55,0,685,
        684,1,0,0,0,685,686,1,0,0,0,686,49,1,0,0,0,687,738,3,52,26,0,688,
        738,3,150,75,0,689,691,5,10,0,0,690,692,5,163,0,0,691,690,1,0,0,
        0,691,692,1,0,0,0,692,693,1,0,0,0,693,738,5,157,0,0,694,695,5,60,
        0,0,695,696,3,114,57,0,696,697,3,114,57,0,697,698,3,114,57,0,698,
        699,3,114,57,0,699,738,1,0,0,0,700,702,5,12,0,0,701,703,5,163,0,
        0,702,701,1,0,0,0,702,703,1,0,0,0,703,704,1,0,0,0,704,738,5,150,
        0,0,705,706,5,61,0,0,706,708,3,114,57,0,707,709,3,114,57,0,708,707,
        1,0,0,0,708,709,1,0,0,0,709,738,1,0,0,0,710,712,5,18,0,0,711,713,
        5,163,0,0,712,711,1,0,0,0,712,713,1,0,0,0,713,714,1,0,0,0,714,738,
        5,150,0,0,715,717,5,20,0,0,716,718,5,163,0,0,717,716,1,0,0,0,717,
        718,1,0,0,0,718,719,1,0,0,0,719,738,5,150,0,0,720,722,5,21,0,0,721,
        723,5,182,0,0,722,721,1,0,0,0,722,723,1,0,0,0,723,724,1,0,0,0,724,
        738,5,183,0,0,725,726,5,23,0,0,726,727,5,25,0,0,727,734,3,114,57,
        0,728,735,5,91,0,0,729,731,5,10,0,0,730,732,5,163,0,0,731,730,1,
        0,0,0,731,732,1,0,0,0,732,733,1,0,0,0,733,735,5,157,0,0,734,728,
        1,0,0,0,734,729,1,0,0,0,735,738,1,0,0,0,736,738,5,26,0,0,737,687,
        1,0,0,0,737,688,1,0,0,0,737,689,1,0,0,0,737,694,1,0,0,0,737,700,
        1,0,0,0,737,705,1,0,0,0,737,710,1,0,0,0,737,715,1,0,0,0,737,720,
        1,0,0,0,737,725,1,0,0,0,737,736,1,0,0,0,738,51,1,0,0,0,739,740,5,
        5,0,0,740,741,3,102,51,0,741,742,3,102,51,0,742,743,3,102,51,0,743,
        749,3,102,51,0,744,745,3,102,51,0,745,746,3,102,51,0,746,747,3,102,
        51,0,747,748,3,102,51,0,748,750,1,0,0,0,749,744,1,0,0,0,749,750,
        1,0,0,0,750,751,1,0,0,0,751,752,3,110,55,0,752,756,3,110,55,0,753,
        754,3,110,55,0,754,755,3,110,55,0,755,757,1,0,0,0,756,753,1,0,0,
        0,756,757,1,0,0,0,757,53,1,0,0,0,758,804,3,56,28,0,759,804,3,152,
        76,0,760,762,5,10,0,0,761,763,5,163,0,0,762,761,1,0,0,0,762,763,
        1,0,0,0,763,764,1,0,0,0,764,804,5,157,0,0,765,766,5,64,0,0,766,767,
        5,150,0,0,767,768,5,150,0,0,768,769,3,114,57,0,769,770,3,114,57,
        0,770,771,3,114,57,0,771,804,1,0,0,0,772,774,5,61,0,0,773,775,5,
        163,0,0,774,773,1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,0,776,804,
        3,114,57,0,777,779,5,18,0,0,778,780,5,163,0,0,779,778,1,0,0,0,779,
        780,1,0,0,0,780,781,1,0,0,0,781,804,5,150,0,0,782,784,5,65,0,0,783,
        785,5,163,0,0,784,783,1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,0,786,
        804,3,114,57,0,787,789,5,66,0,0,788,790,5,163,0,0,789,788,1,0,0,
        0,789,790,1,0,0,0,790,791,1,0,0,0,791,804,3,114,57,0,792,794,5,21,
        0,0,793,795,5,182,0,0,794,793,1,0,0,0,794,795,1,0,0,0,795,796,1,
        0,0,0,796,804,5,183,0,0,797,798,5,23,0,0,798,799,5,25,0,0,799,804,
        3,114,57,0,800,804,3,58,29,0,801,804,5,26,0,0,802,804,5,68,0,0,803,
        758,1,0,0,0,803,759,1,0,0,0,803,760,1,0,0,0,803,765,1,0,0,0,803,
        772,1,0,0,0,803,777,1,0,0,0,803,782,1,0,0,0,803,787,1,0,0,0,803,
        792,1,0,0,0,803,797,1,0,0,0,803,800,1,0,0,0,803,801,1,0,0,0,803,
        802,1,0,0,0,804,55,1,0,0,0,805,806,5,5,0,0,806,807,3,102,51,0,807,
        808,3,102,51,0,808,809,3,102,51,0,809,810,3,102,51,0,810,811,3,102,
        51,0,811,812,3,110,55,0,812,813,3,110,55,0,813,57,1,0,0,0,814,815,
        5,67,0,0,815,816,3,102,51,0,816,817,3,110,55,0,817,818,3,110,55,
        0,818,59,1,0,0,0,819,860,3,62,31,0,820,860,3,64,32,0,821,860,3,66,
        33,0,822,860,3,68,34,0,823,860,3,70,35,0,824,860,3,72,36,0,825,860,
        3,74,37,0,826,860,3,76,38,0,827,860,3,78,39,0,828,830,5,10,0,0,829,
        831,5,163,0,0,830,829,1,0,0,0,830,831,1,0,0,0,831,832,1,0,0,0,832,
        860,5,157,0,0,833,835,5,77,0,0,834,836,5,163,0,0,835,834,1,0,0,0,
        835,836,1,0,0,0,836,837,1,0,0,0,837,860,3,114,57,0,838,839,5,61,
        0,0,839,841,3,114,57,0,840,842,3,114,57,0,841,840,1,0,0,0,841,842,
        1,0,0,0,842,860,1,0,0,0,843,844,5,21,0,0,844,860,5,183,0,0,845,846,
        5,23,0,0,846,847,5,25,0,0,847,854,3,114,57,0,848,855,5,91,0,0,849,
        851,5,10,0,0,850,852,5,163,0,0,851,850,1,0,0,0,851,852,1,0,0,0,852,
        853,1,0,0,0,853,855,5,157,0,0,854,848,1,0,0,0,854,849,1,0,0,0,855,
        856,1,0,0,0,856,857,5,157,0,0,857,860,1,0,0,0,858,860,5,26,0,0,859,
        819,1,0,0,0,859,820,1,0,0,0,859,821,1,0,0,0,859,822,1,0,0,0,859,
        823,1,0,0,0,859,824,1,0,0,0,859,825,1,0,0,0,859,826,1,0,0,0,859,
        827,1,0,0,0,859,828,1,0,0,0,859,833,1,0,0,0,859,838,1,0,0,0,859,
        843,1,0,0,0,859,845,1,0,0,0,859,858,1,0,0,0,860,61,1,0,0,0,861,862,
        5,70,0,0,862,864,3,102,51,0,863,865,3,102,51,0,864,863,1,0,0,0,864,
        865,1,0,0,0,865,866,1,0,0,0,866,868,3,110,55,0,867,869,3,110,55,
        0,868,867,1,0,0,0,868,869,1,0,0,0,869,63,1,0,0,0,870,871,5,67,0,
        0,871,872,3,102,51,0,872,873,3,110,55,0,873,65,1,0,0,0,874,875,5,
        71,0,0,875,876,3,102,51,0,876,877,3,102,51,0,877,878,3,102,51,0,
        878,880,5,157,0,0,879,881,5,151,0,0,880,879,1,0,0,0,880,881,1,0,
        0,0,881,882,1,0,0,0,882,883,5,157,0,0,883,67,1,0,0,0,884,885,5,72,
        0,0,885,886,3,102,51,0,886,69,1,0,0,0,887,888,5,63,0,0,888,889,3,
        102,51,0,889,71,1,0,0,0,890,891,5,73,0,0,891,892,3,102,51,0,892,
        73,1,0,0,0,893,894,5,74,0,0,894,895,3,102,51,0,895,75,1,0,0,0,896,
        897,5,75,0,0,897,898,5,157,0,0,898,899,3,102,51,0,899,900,3,102,
        51,0,900,901,3,102,51,0,901,902,3,102,51,0,902,904,3,102,51,0,903,
        905,3,102,51,0,904,903,1,0,0,0,904,905,1,0,0,0,905,77,1,0,0,0,906,
        907,5,76,0,0,907,908,3,102,51,0,908,79,1,0,0,0,909,993,3,82,41,0,
        910,912,5,10,0,0,911,913,5,163,0,0,912,911,1,0,0,0,912,913,1,0,0,
        0,913,914,1,0,0,0,914,993,5,157,0,0,915,993,5,79,0,0,916,917,5,64,
        0,0,917,919,5,150,0,0,918,920,5,150,0,0,919,918,1,0,0,0,919,920,
        1,0,0,0,920,922,1,0,0,0,921,923,5,150,0,0,922,921,1,0,0,0,922,923,
        1,0,0,0,923,925,1,0,0,0,924,926,5,150,0,0,925,924,1,0,0,0,925,926,
        1,0,0,0,926,927,1,0,0,0,927,993,3,114,57,0,928,930,5,77,0,0,929,
        931,5,163,0,0,930,929,1,0,0,0,930,931,1,0,0,0,931,932,1,0,0,0,932,
        993,3,114,57,0,933,935,5,61,0,0,934,936,5,163,0,0,935,934,1,0,0,
        0,935,936,1,0,0,0,936,937,1,0,0,0,937,993,3,114,57,0,938,940,5,18,
        0,0,939,941,5,163,0,0,940,939,1,0,0,0,940,941,1,0,0,0,941,942,1,
        0,0,0,942,993,5,150,0,0,943,944,5,80,0,0,944,945,5,150,0,0,945,946,
        5,150,0,0,946,950,5,150,0,0,947,948,5,150,0,0,948,949,5,150,0,0,
        949,951,5,150,0,0,950,947,1,0,0,0,950,951,1,0,0,0,951,955,1,0,0,
        0,952,953,5,150,0,0,953,954,5,150,0,0,954,956,5,150,0,0,955,952,
        1,0,0,0,955,956,1,0,0,0,956,960,1,0,0,0,957,958,5,150,0,0,958,959,
        5,150,0,0,959,961,5,150,0,0,960,957,1,0,0,0,960,961,1,0,0,0,961,
        993,1,0,0,0,962,964,5,21,0,0,963,965,5,182,0,0,964,963,1,0,0,0,964,
        965,1,0,0,0,965,966,1,0,0,0,966,993,5,183,0,0,967,968,5,23,0,0,968,
        969,5,25,0,0,969,976,3,114,57,0,970,977,5,91,0,0,971,973,5,10,0,
        0,972,974,5,163,0,0,973,972,1,0,0,0,973,974,1,0,0,0,974,975,1,0,
        0,0,975,977,5,157,0,0,976,970,1,0,0,0,976,971,1,0,0,0,977,993,1,
        0,0,0,978,993,5,26,0,0,979,980,5,81,0,0,980,981,5,82,0,0,981,983,
        5,150,0,0,982,984,5,150,0,0,983,982,1,0,0,0,983,984,1,0,0,0,984,
        986,1,0,0,0,985,987,5,150,0,0,986,985,1,0,0,0,986,987,1,0,0,0,987,
        989,1,0,0,0,988,990,5,150,0,0,989,988,1,0,0,0,989,990,1,0,0,0,990,
        993,1,0,0,0,991,993,5,68,0,0,992,909,1,0,0,0,992,910,1,0,0,0,992,
        915,1,0,0,0,992,916,1,0,0,0,992,928,1,0,0,0,992,933,1,0,0,0,992,
        938,1,0,0,0,992,943,1,0,0,0,992,962,1,0,0,0,992,967,1,0,0,0,992,
        978,1,0,0,0,992,979,1,0,0,0,992,991,1,0,0,0,993,81,1,0,0,0,994,995,
        5,5,0,0,995,996,3,102,51,0,996,997,3,102,51,0,997,998,3,102,51,0,
        998,1004,3,102,51,0,999,1000,3,102,51,0,1000,1001,3,102,51,0,1001,
        1002,3,102,51,0,1002,1003,3,102,51,0,1003,1005,1,0,0,0,1004,999,
        1,0,0,0,1004,1005,1,0,0,0,1005,1011,1,0,0,0,1006,1007,3,102,51,0,
        1007,1008,3,102,51,0,1008,1009,3,102,51,0,1009,1010,3,102,51,0,1010,
        1012,1,0,0,0,1011,1006,1,0,0,0,1011,1012,1,0,0,0,1012,1018,1,0,0,
        0,1013,1014,3,102,51,0,1014,1015,3,102,51,0,1015,1016,3,102,51,0,
        1016,1017,3,102,51,0,1017,1019,1,0,0,0,1018,1013,1,0,0,0,1018,1019,
        1,0,0,0,1019,83,1,0,0,0,1020,1053,3,86,43,0,1021,1023,5,10,0,0,1022,
        1024,5,163,0,0,1023,1022,1,0,0,0,1023,1024,1,0,0,0,1024,1025,1,0,
        0,0,1025,1053,5,157,0,0,1026,1027,5,60,0,0,1027,1028,3,114,57,0,
        1028,1029,3,114,57,0,1029,1030,3,114,57,0,1030,1031,3,114,57,0,1031,
        1032,3,114,57,0,1032,1053,1,0,0,0,1033,1035,5,61,0,0,1034,1036,5,
        163,0,0,1035,1034,1,0,0,0,1035,1036,1,0,0,0,1036,1037,1,0,0,0,1037,
        1053,3,114,57,0,1038,1040,5,18,0,0,1039,1041,5,163,0,0,1040,1039,
        1,0,0,0,1040,1041,1,0,0,0,1041,1042,1,0,0,0,1042,1053,5,150,0,0,
        1043,1045,5,21,0,0,1044,1046,5,182,0,0,1045,1044,1,0,0,0,1045,1046,
        1,0,0,0,1046,1047,1,0,0,0,1047,1053,5,183,0,0,1048,1049,5,23,0,0,
        1049,1050,5,25,0,0,1050,1053,3,114,57,0,1051,1053,5,26,0,0,1052,
        1020,1,0,0,0,1052,1021,1,0,0,0,1052,1026,1,0,0,0,1052,1033,1,0,0,
        0,1052,1038,1,0,0,0,1052,1043,1,0,0,0,1052,1048,1,0,0,0,1052,1051,
        1,0,0,0,1053,85,1,0,0,0,1054,1055,5,5,0,0,1055,1056,3,102,51,0,1056,
        1057,3,102,51,0,1057,1058,3,102,51,0,1058,1059,3,102,51,0,1059,1060,
        3,102,51,0,1060,1061,3,102,51,0,1061,1063,3,110,55,0,1062,1064,3,
        110,55,0,1063,1062,1,0,0,0,1063,1064,1,0,0,0,1064,87,1,0,0,0,1065,
        1100,3,90,45,0,1066,1068,5,10,0,0,1067,1069,5,163,0,0,1068,1067,
        1,0,0,0,1068,1069,1,0,0,0,1069,1070,1,0,0,0,1070,1100,5,157,0,0,
        1071,1072,5,60,0,0,1072,1073,3,114,57,0,1073,1074,3,114,57,0,1074,
        1075,3,114,57,0,1075,1076,3,114,57,0,1076,1077,3,114,57,0,1077,1078,
        3,114,57,0,1078,1079,3,114,57,0,1079,1100,1,0,0,0,1080,1082,5,61,
        0,0,1081,1083,5,163,0,0,1082,1081,1,0,0,0,1082,1083,1,0,0,0,1083,
        1084,1,0,0,0,1084,1100,3,114,57,0,1085,1087,5,18,0,0,1086,1088,5,
        163,0,0,1087,1086,1,0,0,0,1087,1088,1,0,0,0,1088,1089,1,0,0,0,1089,
        1100,5,150,0,0,1090,1092,5,21,0,0,1091,1093,5,182,0,0,1092,1091,
        1,0,0,0,1092,1093,1,0,0,0,1093,1094,1,0,0,0,1094,1100,5,183,0,0,
        1095,1096,5,23,0,0,1096,1097,5,25,0,0,1097,1100,3,114,57,0,1098,
        1100,5,26,0,0,1099,1065,1,0,0,0,1099,1066,1,0,0,0,1099,1071,1,0,
        0,0,1099,1080,1,0,0,0,1099,1085,1,0,0,0,1099,1090,1,0,0,0,1099,1095,
        1,0,0,0,1099,1098,1,0,0,0,1100,89,1,0,0,0,1101,1102,5,5,0,0,1102,
        1103,3,102,51,0,1103,1104,3,102,51,0,1104,1105,3,102,51,0,1105,1106,
        3,102,51,0,1106,1107,3,102,51,0,1107,1108,3,102,51,0,1108,1109,3,
        102,51,0,1109,1110,3,102,51,0,1110,1111,3,110,55,0,1111,1112,3,110,
        55,0,1112,91,1,0,0,0,1113,1166,3,94,47,0,1114,1116,5,10,0,0,1115,
        1117,5,163,0,0,1116,1115,1,0,0,0,1116,1117,1,0,0,0,1117,1118,1,0,
        0,0,1118,1166,5,157,0,0,1119,1121,5,86,0,0,1120,1122,5,163,0,0,1121,
        1120,1,0,0,0,1121,1122,1,0,0,0,1122,1123,1,0,0,0,1123,1166,5,157,
        0,0,1124,1125,5,64,0,0,1125,1126,5,150,0,0,1126,1127,5,150,0,0,1127,
        1166,3,114,57,0,1128,1130,5,77,0,0,1129,1131,5,163,0,0,1130,1129,
        1,0,0,0,1130,1131,1,0,0,0,1131,1132,1,0,0,0,1132,1166,3,114,57,0,
        1133,1135,5,61,0,0,1134,1136,5,163,0,0,1135,1134,1,0,0,0,1135,1136,
        1,0,0,0,1136,1137,1,0,0,0,1137,1166,3,114,57,0,1138,1140,5,18,0,
        0,1139,1141,5,163,0,0,1140,1139,1,0,0,0,1140,1141,1,0,0,0,1141,1142,
        1,0,0,0,1142,1166,5,150,0,0,1143,1145,5,21,0,0,1144,1146,5,182,0,
        0,1145,1144,1,0,0,0,1145,1146,1,0,0,0,1146,1147,1,0,0,0,1147,1166,
        5,183,0,0,1148,1149,5,23,0,0,1149,1150,5,25,0,0,1150,1157,3,114,
        57,0,1151,1158,5,91,0,0,1152,1154,5,10,0,0,1153,1155,5,163,0,0,1154,
        1153,1,0,0,0,1154,1155,1,0,0,0,1155,1156,1,0,0,0,1156,1158,5,157,
        0,0,1157,1151,1,0,0,0,1157,1152,1,0,0,0,1158,1166,1,0,0,0,1159,1166,
        5,26,0,0,1160,1161,5,81,0,0,1161,1162,7,0,0,0,1162,1163,5,150,0,
        0,1163,1166,5,150,0,0,1164,1166,5,68,0,0,1165,1113,1,0,0,0,1165,
        1114,1,0,0,0,1165,1119,1,0,0,0,1165,1124,1,0,0,0,1165,1128,1,0,0,
        0,1165,1133,1,0,0,0,1165,1138,1,0,0,0,1165,1143,1,0,0,0,1165,1148,
        1,0,0,0,1165,1159,1,0,0,0,1165,1160,1,0,0,0,1165,1164,1,0,0,0,1166,
        93,1,0,0,0,1167,1168,5,5,0,0,1168,1169,3,102,51,0,1169,1170,3,102,
        51,0,1170,1171,3,102,51,0,1171,1172,3,102,51,0,1172,1173,3,102,51,
        0,1173,1174,3,102,51,0,1174,1175,3,102,51,0,1175,1176,3,102,51,0,
        1176,1177,3,102,51,0,1177,1178,3,102,51,0,1178,1180,3,102,51,0,1179,
        1181,3,102,51,0,1180,1179,1,0,0,0,1180,1181,1,0,0,0,1181,95,1,0,
        0,0,1182,1183,5,87,0,0,1183,1187,5,48,0,0,1184,1186,3,98,49,0,1185,
        1184,1,0,0,0,1186,1189,1,0,0,0,1187,1185,1,0,0,0,1187,1188,1,0,0,
        0,1188,1190,1,0,0,0,1189,1187,1,0,0,0,1190,1191,5,2,0,0,1191,97,
        1,0,0,0,1192,1196,5,53,0,0,1193,1195,3,100,50,0,1194,1193,1,0,0,
        0,1195,1198,1,0,0,0,1196,1194,1,0,0,0,1196,1197,1,0,0,0,1197,1199,
        1,0,0,0,1198,1196,1,0,0,0,1199,1203,5,2,0,0,1200,1203,5,35,0,0,1201,
        1203,5,51,0,0,1202,1192,1,0,0,0,1202,1200,1,0,0,0,1202,1201,1,0,
        0,0,1203,99,1,0,0,0,1204,1206,5,88,0,0,1205,1207,5,163,0,0,1206,
        1205,1,0,0,0,1206,1207,1,0,0,0,1207,1208,1,0,0,0,1208,1220,3,102,
        51,0,1209,1211,5,89,0,0,1210,1212,5,163,0,0,1211,1210,1,0,0,0,1211,
        1212,1,0,0,0,1212,1213,1,0,0,0,1213,1220,3,114,57,0,1214,1216,5,
        55,0,0,1215,1217,5,163,0,0,1216,1215,1,0,0,0,1216,1217,1,0,0,0,1217,
        1218,1,0,0,0,1218,1220,3,114,57,0,1219,1204,1,0,0,0,1219,1209,1,
        0,0,0,1219,1214,1,0,0,0,1220,101,1,0,0,0,1221,1222,5,160,0,0,1222,
        1223,3,104,52,0,1223,1224,5,161,0,0,1224,103,1,0,0,0,1225,1230,3,
        106,53,0,1226,1227,5,145,0,0,1227,1229,3,106,53,0,1228,1226,1,0,
        0,0,1229,1232,1,0,0,0,1230,1228,1,0,0,0,1230,1231,1,0,0,0,1231,105,
        1,0,0,0,1232,1230,1,0,0,0,1233,1238,3,108,54,0,1234,1235,5,146,0,
        0,1235,1237,3,108,54,0,1236,1234,1,0,0,0,1237,1240,1,0,0,0,1238,
        1236,1,0,0,0,1238,1239,1,0,0,0,1239,107,1,0,0,0,1240,1238,1,0,0,
        0,1241,1242,6,54,-1,0,1242,1243,5,160,0,0,1243,1244,3,104,52,0,1244,
        1245,5,161,0,0,1245,1396,1,0,0,0,1246,1396,5,91,0,0,1247,1248,5,
        93,0,0,1248,1249,7,1,0,0,1249,1250,7,2,0,0,1250,1396,7,1,0,0,1251,
        1253,5,94,0,0,1252,1254,5,175,0,0,1253,1252,1,0,0,0,1253,1254,1,
        0,0,0,1254,1255,1,0,0,0,1255,1256,5,176,0,0,1256,1257,5,177,0,0,
        1257,1396,3,112,56,0,1258,1259,5,95,0,0,1259,1396,3,108,54,30,1260,
        1261,5,96,0,0,1261,1396,3,108,54,29,1262,1263,5,97,0,0,1263,1396,
        3,108,54,28,1264,1272,5,98,0,0,1265,1273,5,158,0,0,1266,1269,5,157,
        0,0,1267,1268,5,162,0,0,1268,1270,5,157,0,0,1269,1267,1,0,0,0,1269,
        1270,1,0,0,0,1270,1273,1,0,0,0,1271,1273,5,169,0,0,1272,1265,1,0,
        0,0,1272,1266,1,0,0,0,1272,1271,1,0,0,0,1273,1396,1,0,0,0,1274,1275,
        5,99,0,0,1275,1276,3,112,56,0,1276,1277,3,112,56,0,1277,1278,3,112,
        56,0,1278,1279,3,112,56,0,1279,1280,3,112,56,0,1280,1281,3,112,56,
        0,1281,1396,1,0,0,0,1282,1396,5,100,0,0,1283,1284,5,101,0,0,1284,
        1396,5,150,0,0,1285,1396,5,102,0,0,1286,1299,5,103,0,0,1287,1300,
        5,158,0,0,1288,1291,5,157,0,0,1289,1290,5,162,0,0,1290,1292,5,157,
        0,0,1291,1289,1,0,0,0,1291,1292,1,0,0,0,1292,1300,1,0,0,0,1293,1296,
        5,153,0,0,1294,1295,5,162,0,0,1295,1297,5,153,0,0,1296,1294,1,0,
        0,0,1296,1297,1,0,0,0,1297,1300,1,0,0,0,1298,1300,5,169,0,0,1299,
        1287,1,0,0,0,1299,1288,1,0,0,0,1299,1293,1,0,0,0,1299,1298,1,0,0,
        0,1300,1396,1,0,0,0,1301,1396,5,104,0,0,1302,1303,5,147,0,0,1303,
        1396,3,108,54,20,1304,1305,5,105,0,0,1305,1306,5,160,0,0,1306,1308,
        3,112,56,0,1307,1309,5,148,0,0,1308,1307,1,0,0,0,1308,1309,1,0,0,
        0,1309,1310,1,0,0,0,1310,1312,3,112,56,0,1311,1313,5,148,0,0,1312,
        1311,1,0,0,0,1312,1313,1,0,0,0,1313,1314,1,0,0,0,1314,1315,3,112,
        56,0,1315,1316,5,161,0,0,1316,1317,5,106,0,0,1317,1318,3,112,56,
        0,1318,1396,1,0,0,0,1319,1320,5,105,0,0,1320,1321,5,160,0,0,1321,
        1323,5,143,0,0,1322,1324,5,163,0,0,1323,1322,1,0,0,0,1323,1324,1,
        0,0,0,1324,1325,1,0,0,0,1325,1327,3,102,51,0,1326,1328,5,148,0,0,
        1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1334,1,0,0,0,1329,1331,
        5,144,0,0,1330,1332,5,163,0,0,1331,1330,1,0,0,0,1331,1332,1,0,0,
        0,1332,1333,1,0,0,0,1333,1335,3,102,51,0,1334,1329,1,0,0,0,1334,
        1335,1,0,0,0,1335,1336,1,0,0,0,1336,1337,5,161,0,0,1337,1338,5,106,
        0,0,1338,1339,3,112,56,0,1339,1396,1,0,0,0,1340,1396,5,107,0,0,1341,
        1396,5,108,0,0,1342,1350,5,109,0,0,1343,1351,5,159,0,0,1344,1347,
        5,150,0,0,1345,1346,5,162,0,0,1346,1348,5,150,0,0,1347,1345,1,0,
        0,0,1347,1348,1,0,0,0,1348,1351,1,0,0,0,1349,1351,5,169,0,0,1350,
        1343,1,0,0,0,1350,1344,1,0,0,0,1350,1349,1,0,0,0,1351,1396,1,0,0,
        0,1352,1360,5,110,0,0,1353,1361,5,158,0,0,1354,1357,5,157,0,0,1355,
        1356,5,162,0,0,1356,1358,5,157,0,0,1357,1355,1,0,0,0,1357,1358,1,
        0,0,0,1358,1361,1,0,0,0,1359,1361,5,169,0,0,1360,1353,1,0,0,0,1360,
        1354,1,0,0,0,1360,1359,1,0,0,0,1361,1396,1,0,0,0,1362,1375,5,112,
        0,0,1363,1376,5,158,0,0,1364,1367,5,157,0,0,1365,1366,5,162,0,0,
        1366,1368,5,157,0,0,1367,1365,1,0,0,0,1367,1368,1,0,0,0,1368,1376,
        1,0,0,0,1369,1372,5,153,0,0,1370,1371,5,162,0,0,1371,1373,5,153,
        0,0,1372,1370,1,0,0,0,1372,1373,1,0,0,0,1373,1376,1,0,0,0,1374,1376,
        5,169,0,0,1375,1363,1,0,0,0,1375,1364,1,0,0,0,1375,1369,1,0,0,0,
        1375,1374,1,0,0,0,1376,1396,1,0,0,0,1377,1378,5,113,0,0,1378,1379,
        3,112,56,0,1379,1380,3,112,56,0,1380,1381,3,112,56,0,1381,1382,3,
        112,56,0,1382,1383,3,112,56,0,1383,1384,3,112,56,0,1384,1396,1,0,
        0,0,1385,1396,5,114,0,0,1386,1396,5,115,0,0,1387,1396,5,116,0,0,
        1388,1396,5,117,0,0,1389,1396,5,118,0,0,1390,1396,5,119,0,0,1391,
        1396,5,120,0,0,1392,1396,5,121,0,0,1393,1396,5,122,0,0,1394,1396,
        5,123,0,0,1395,1241,1,0,0,0,1395,1246,1,0,0,0,1395,1247,1,0,0,0,
        1395,1251,1,0,0,0,1395,1258,1,0,0,0,1395,1260,1,0,0,0,1395,1262,
        1,0,0,0,1395,1264,1,0,0,0,1395,1274,1,0,0,0,1395,1282,1,0,0,0,1395,
        1283,1,0,0,0,1395,1285,1,0,0,0,1395,1286,1,0,0,0,1395,1301,1,0,0,
        0,1395,1302,1,0,0,0,1395,1304,1,0,0,0,1395,1319,1,0,0,0,1395,1340,
        1,0,0,0,1395,1341,1,0,0,0,1395,1342,1,0,0,0,1395,1352,1,0,0,0,1395,
        1362,1,0,0,0,1395,1377,1,0,0,0,1395,1385,1,0,0,0,1395,1386,1,0,0,
        0,1395,1387,1,0,0,0,1395,1388,1,0,0,0,1395,1389,1,0,0,0,1395,1390,
        1,0,0,0,1395,1391,1,0,0,0,1395,1392,1,0,0,0,1395,1393,1,0,0,0,1395,
        1394,1,0,0,0,1396,1405,1,0,0,0,1397,1398,10,33,0,0,1398,1399,5,92,
        0,0,1399,1404,3,112,56,0,1400,1401,10,13,0,0,1401,1402,5,111,0,0,
        1402,1404,3,112,56,0,1403,1397,1,0,0,0,1403,1400,1,0,0,0,1404,1407,
        1,0,0,0,1405,1403,1,0,0,0,1405,1406,1,0,0,0,1406,109,1,0,0,0,1407,
        1405,1,0,0,0,1408,1409,7,3,0,0,1409,111,1,0,0,0,1410,1411,7,4,0,
        0,1411,113,1,0,0,0,1412,1413,7,3,0,0,1413,115,1,0,0,0,1414,1415,
        7,4,0,0,1415,117,1,0,0,0,1416,1427,5,90,0,0,1417,1425,5,188,0,0,
        1418,1420,5,191,0,0,1419,1418,1,0,0,0,1420,1423,1,0,0,0,1421,1419,
        1,0,0,0,1421,1422,1,0,0,0,1422,1426,1,0,0,0,1423,1421,1,0,0,0,1424,
        1426,5,192,0,0,1425,1421,1,0,0,0,1425,1424,1,0,0,0,1426,1428,1,0,
        0,0,1427,1417,1,0,0,0,1427,1428,1,0,0,0,1428,1429,1,0,0,0,1429,1433,
        5,189,0,0,1430,1432,5,191,0,0,1431,1430,1,0,0,0,1432,1435,1,0,0,
        0,1433,1431,1,0,0,0,1433,1434,1,0,0,0,1434,1436,1,0,0,0,1435,1433,
        1,0,0,0,1436,1437,5,190,0,0,1437,119,1,0,0,0,1438,1439,5,124,0,0,
        1439,1440,3,122,61,0,1440,1441,3,102,51,0,1441,121,1,0,0,0,1442,
        1443,7,5,0,0,1443,1444,3,124,62,0,1444,1445,5,194,0,0,1445,1449,
        1,0,0,0,1446,1447,5,127,0,0,1447,1449,3,132,66,0,1448,1442,1,0,0,
        0,1448,1446,1,0,0,0,1449,123,1,0,0,0,1450,1453,5,204,0,0,1451,1452,
        5,195,0,0,1452,1454,3,126,63,0,1453,1451,1,0,0,0,1453,1454,1,0,0,
        0,1454,125,1,0,0,0,1455,1458,3,128,64,0,1456,1457,7,6,0,0,1457,1459,
        3,126,63,0,1458,1456,1,0,0,0,1458,1459,1,0,0,0,1459,127,1,0,0,0,
        1460,1468,5,204,0,0,1461,1468,3,130,65,0,1462,1468,5,202,0,0,1463,
        1468,5,203,0,0,1464,1468,5,228,0,0,1465,1468,5,227,0,0,1466,1468,
        5,229,0,0,1467,1460,1,0,0,0,1467,1461,1,0,0,0,1467,1462,1,0,0,0,
        1467,1463,1,0,0,0,1467,1464,1,0,0,0,1467,1465,1,0,0,0,1467,1466,
        1,0,0,0,1468,129,1,0,0,0,1469,1470,5,205,0,0,1470,1471,5,231,0,0,
        1471,1472,3,128,64,0,1472,1473,5,194,0,0,1473,1589,1,0,0,0,1474,
        1475,5,206,0,0,1475,1476,5,231,0,0,1476,1477,3,128,64,0,1477,1478,
        5,194,0,0,1478,1589,1,0,0,0,1479,1480,5,208,0,0,1480,1481,5,231,
        0,0,1481,1482,3,128,64,0,1482,1483,5,194,0,0,1483,1589,1,0,0,0,1484,
        1485,5,209,0,0,1485,1486,5,231,0,0,1486,1487,3,128,64,0,1487,1488,
        5,194,0,0,1488,1589,1,0,0,0,1489,1490,5,210,0,0,1490,1491,5,231,
        0,0,1491,1492,3,128,64,0,1492,1493,5,194,0,0,1493,1589,1,0,0,0,1494,
        1495,5,211,0,0,1495,1496,5,231,0,0,1496,1497,3,128,64,0,1497,1498,
        5,194,0,0,1498,1589,1,0,0,0,1499,1500,5,212,0,0,1500,1501,5,231,
        0,0,1501,1502,3,128,64,0,1502,1503,5,194,0,0,1503,1589,1,0,0,0,1504,
        1505,5,213,0,0,1505,1506,5,231,0,0,1506,1507,3,128,64,0,1507,1508,
        5,194,0,0,1508,1589,1,0,0,0,1509,1510,5,214,0,0,1510,1511,5,231,
        0,0,1511,1512,3,128,64,0,1512,1513,5,194,0,0,1513,1589,1,0,0,0,1514,
        1515,5,215,0,0,1515,1516,5,231,0,0,1516,1517,3,128,64,0,1517,1518,
        5,194,0,0,1518,1589,1,0,0,0,1519,1520,5,216,0,0,1520,1521,5,231,
        0,0,1521,1522,3,128,64,0,1522,1523,5,194,0,0,1523,1589,1,0,0,0,1524,
        1525,5,217,0,0,1525,1526,5,231,0,0,1526,1531,3,128,64,0,1527,1528,
        5,201,0,0,1528,1530,3,128,64,0,1529,1527,1,0,0,0,1530,1533,1,0,0,
        0,1531,1529,1,0,0,0,1531,1532,1,0,0,0,1532,1534,1,0,0,0,1533,1531,
        1,0,0,0,1534,1535,5,194,0,0,1535,1589,1,0,0,0,1536,1537,5,218,0,
        0,1537,1538,5,231,0,0,1538,1539,3,128,64,0,1539,1540,5,194,0,0,1540,
        1589,1,0,0,0,1541,1542,5,219,0,0,1542,1543,5,231,0,0,1543,1548,3,
        128,64,0,1544,1545,5,201,0,0,1545,1547,3,128,64,0,1546,1544,1,0,
        0,0,1547,1550,1,0,0,0,1548,1546,1,0,0,0,1548,1549,1,0,0,0,1549,1551,
        1,0,0,0,1550,1548,1,0,0,0,1551,1552,5,194,0,0,1552,1589,1,0,0,0,
        1553,1554,5,220,0,0,1554,1555,5,231,0,0,1555,1556,3,128,64,0,1556,
        1557,5,201,0,0,1557,1558,3,128,64,0,1558,1559,5,194,0,0,1559,1589,
        1,0,0,0,1560,1561,5,221,0,0,1561,1562,5,231,0,0,1562,1563,3,128,
        64,0,1563,1564,5,194,0,0,1564,1589,1,0,0,0,1565,1566,5,222,0,0,1566,
        1567,5,231,0,0,1567,1589,5,194,0,0,1568,1569,5,223,0,0,1569,1570,
        5,231,0,0,1570,1571,3,128,64,0,1571,1572,5,194,0,0,1572,1589,1,0,
        0,0,1573,1574,5,224,0,0,1574,1575,5,231,0,0,1575,1576,3,128,64,0,
        1576,1577,5,194,0,0,1577,1589,1,0,0,0,1578,1579,5,225,0,0,1579,1580,
        5,231,0,0,1580,1581,3,128,64,0,1581,1582,5,194,0,0,1582,1589,1,0,
        0,0,1583,1584,5,226,0,0,1584,1585,5,231,0,0,1585,1586,3,128,64,0,
        1586,1587,5,194,0,0,1587,1589,1,0,0,0,1588,1469,1,0,0,0,1588,1474,
        1,0,0,0,1588,1479,1,0,0,0,1588,1484,1,0,0,0,1588,1489,1,0,0,0,1588,
        1494,1,0,0,0,1588,1499,1,0,0,0,1588,1504,1,0,0,0,1588,1509,1,0,0,
        0,1588,1514,1,0,0,0,1588,1519,1,0,0,0,1588,1524,1,0,0,0,1588,1536,
        1,0,0,0,1588,1541,1,0,0,0,1588,1553,1,0,0,0,1588,1560,1,0,0,0,1588,
        1565,1,0,0,0,1588,1568,1,0,0,0,1588,1573,1,0,0,0,1588,1578,1,0,0,
        0,1588,1583,1,0,0,0,1589,131,1,0,0,0,1590,1591,7,7,0,0,1591,1592,
        5,233,0,0,1592,1593,5,242,0,0,1593,1594,5,234,0,0,1594,133,1,0,0,
        0,1595,1596,5,128,0,0,1596,1597,5,227,0,0,1597,1598,5,195,0,0,1598,
        1599,3,136,68,0,1599,1600,5,194,0,0,1600,135,1,0,0,0,1601,1604,3,
        128,64,0,1602,1603,7,6,0,0,1603,1605,3,136,68,0,1604,1602,1,0,0,
        0,1604,1605,1,0,0,0,1605,137,1,0,0,0,1606,1608,5,129,0,0,1607,1609,
        7,8,0,0,1608,1607,1,0,0,0,1608,1609,1,0,0,0,1609,1610,1,0,0,0,1610,
        1611,5,130,0,0,1611,1612,5,163,0,0,1612,1613,7,9,0,0,1613,1614,5,
        163,0,0,1614,1620,3,102,51,0,1615,1616,5,130,0,0,1616,1617,5,163,
        0,0,1617,1618,7,9,0,0,1618,1619,5,163,0,0,1619,1621,3,102,51,0,1620,
        1615,1,0,0,0,1620,1621,1,0,0,0,1621,1622,1,0,0,0,1622,1623,5,2,0,
        0,1623,139,1,0,0,0,1624,1628,5,132,0,0,1625,1627,3,142,71,0,1626,
        1625,1,0,0,0,1627,1630,1,0,0,0,1628,1626,1,0,0,0,1628,1629,1,0,0,
        0,1629,1631,1,0,0,0,1630,1628,1,0,0,0,1631,1632,5,2,0,0,1632,141,
        1,0,0,0,1633,1634,5,85,0,0,1634,1635,5,157,0,0,1635,1636,5,157,0,
        0,1636,1637,5,157,0,0,1637,1638,3,114,57,0,1638,1643,3,114,57,0,
        1639,1640,5,133,0,0,1640,1641,3,114,57,0,1641,1642,3,114,57,0,1642,
        1644,1,0,0,0,1643,1639,1,0,0,0,1643,1644,1,0,0,0,1644,1689,1,0,0,
        0,1645,1646,5,95,0,0,1646,1647,5,157,0,0,1647,1648,5,157,0,0,1648,
        1649,3,114,57,0,1649,1650,3,114,57,0,1650,1689,1,0,0,0,1651,1652,
        7,10,0,0,1652,1653,5,157,0,0,1653,1654,5,157,0,0,1654,1655,5,157,
        0,0,1655,1658,5,157,0,0,1656,1657,5,134,0,0,1657,1659,5,150,0,0,
        1658,1656,1,0,0,0,1658,1659,1,0,0,0,1659,1660,1,0,0,0,1660,1661,
        3,114,57,0,1661,1662,5,150,0,0,1662,1663,3,114,57,0,1663,1689,1,
        0,0,0,1664,1665,5,135,0,0,1665,1666,5,158,0,0,1666,1667,5,158,0,
        0,1667,1668,3,114,57,0,1668,1669,3,114,57,0,1669,1689,1,0,0,0,1670,
        1671,5,137,0,0,1671,1672,5,157,0,0,1672,1673,5,157,0,0,1673,1674,
        3,114,57,0,1674,1675,3,114,57,0,1675,1676,3,114,57,0,1676,1677,3,
        114,57,0,1677,1689,1,0,0,0,1678,1679,5,138,0,0,1679,1680,5,157,0,
        0,1680,1681,3,114,57,0,1681,1682,3,114,57,0,1682,1683,3,114,57,0,
        1683,1684,3,114,57,0,1684,1689,1,0,0,0,1685,1686,7,11,0,0,1686,1689,
        5,157,0,0,1687,1689,5,140,0,0,1688,1633,1,0,0,0,1688,1645,1,0,0,
        0,1688,1651,1,0,0,0,1688,1664,1,0,0,0,1688,1670,1,0,0,0,1688,1678,
        1,0,0,0,1688,1685,1,0,0,0,1688,1687,1,0,0,0,1689,143,1,0,0,0,1690,
        1691,5,141,0,0,1691,1692,5,249,0,0,1692,1693,5,246,0,0,1693,1712,
        5,244,0,0,1694,1696,5,247,0,0,1695,1694,1,0,0,0,1696,1699,1,0,0,
        0,1697,1695,1,0,0,0,1697,1698,1,0,0,0,1698,1713,1,0,0,0,1699,1697,
        1,0,0,0,1700,1702,5,248,0,0,1701,1700,1,0,0,0,1702,1705,1,0,0,0,
        1703,1701,1,0,0,0,1703,1704,1,0,0,0,1704,1713,1,0,0,0,1705,1703,
        1,0,0,0,1706,1708,5,250,0,0,1707,1706,1,0,0,0,1708,1711,1,0,0,0,
        1709,1707,1,0,0,0,1709,1710,1,0,0,0,1710,1713,1,0,0,0,1711,1709,
        1,0,0,0,1712,1697,1,0,0,0,1712,1703,1,0,0,0,1712,1709,1,0,0,0,1713,
        1714,1,0,0,0,1714,1715,5,245,0,0,1715,1716,5,142,0,0,1716,1721,5,
        253,0,0,1717,1720,3,134,67,0,1718,1720,3,28,14,0,1719,1717,1,0,0,
        0,1719,1718,1,0,0,0,1720,1723,1,0,0,0,1721,1719,1,0,0,0,1721,1722,
        1,0,0,0,1722,1724,1,0,0,0,1723,1721,1,0,0,0,1724,1725,5,2,0,0,1725,
        1726,5,142,0,0,1726,1727,5,253,0,0,1727,145,1,0,0,0,1728,1729,5,
        141,0,0,1729,1730,5,249,0,0,1730,1731,5,246,0,0,1731,1750,5,244,
        0,0,1732,1734,5,247,0,0,1733,1732,1,0,0,0,1734,1737,1,0,0,0,1735,
        1733,1,0,0,0,1735,1736,1,0,0,0,1736,1751,1,0,0,0,1737,1735,1,0,0,
        0,1738,1740,5,248,0,0,1739,1738,1,0,0,0,1740,1743,1,0,0,0,1741,1739,
        1,0,0,0,1741,1742,1,0,0,0,1742,1751,1,0,0,0,1743,1741,1,0,0,0,1744,
        1746,5,250,0,0,1745,1744,1,0,0,0,1746,1749,1,0,0,0,1747,1745,1,0,
        0,0,1747,1748,1,0,0,0,1748,1751,1,0,0,0,1749,1747,1,0,0,0,1750,1735,
        1,0,0,0,1750,1741,1,0,0,0,1750,1747,1,0,0,0,1751,1752,1,0,0,0,1752,
        1753,5,245,0,0,1753,1754,5,142,0,0,1754,1759,5,253,0,0,1755,1758,
        3,134,67,0,1756,1758,3,36,18,0,1757,1755,1,0,0,0,1757,1756,1,0,0,
        0,1758,1761,1,0,0,0,1759,1757,1,0,0,0,1759,1760,1,0,0,0,1760,1762,
        1,0,0,0,1761,1759,1,0,0,0,1762,1763,5,2,0,0,1763,1764,5,142,0,0,
        1764,1765,5,253,0,0,1765,147,1,0,0,0,1766,1767,5,141,0,0,1767,1768,
        5,249,0,0,1768,1769,5,246,0,0,1769,1788,5,244,0,0,1770,1772,5,247,
        0,0,1771,1770,1,0,0,0,1772,1775,1,0,0,0,1773,1771,1,0,0,0,1773,1774,
        1,0,0,0,1774,1789,1,0,0,0,1775,1773,1,0,0,0,1776,1778,5,248,0,0,
        1777,1776,1,0,0,0,1778,1781,1,0,0,0,1779,1777,1,0,0,0,1779,1780,
        1,0,0,0,1780,1789,1,0,0,0,1781,1779,1,0,0,0,1782,1784,5,250,0,0,
        1783,1782,1,0,0,0,1784,1787,1,0,0,0,1785,1783,1,0,0,0,1785,1786,
        1,0,0,0,1786,1789,1,0,0,0,1787,1785,1,0,0,0,1788,1773,1,0,0,0,1788,
        1779,1,0,0,0,1788,1785,1,0,0,0,1789,1790,1,0,0,0,1790,1791,5,245,
        0,0,1791,1792,5,142,0,0,1792,1797,5,253,0,0,1793,1796,3,134,67,0,
        1794,1796,3,48,24,0,1795,1793,1,0,0,0,1795,1794,1,0,0,0,1796,1799,
        1,0,0,0,1797,1795,1,0,0,0,1797,1798,1,0,0,0,1798,1800,1,0,0,0,1799,
        1797,1,0,0,0,1800,1801,5,2,0,0,1801,1802,5,142,0,0,1802,1803,5,253,
        0,0,1803,149,1,0,0,0,1804,1805,5,141,0,0,1805,1806,5,249,0,0,1806,
        1807,5,246,0,0,1807,1826,5,244,0,0,1808,1810,5,247,0,0,1809,1808,
        1,0,0,0,1810,1813,1,0,0,0,1811,1809,1,0,0,0,1811,1812,1,0,0,0,1812,
        1827,1,0,0,0,1813,1811,1,0,0,0,1814,1816,5,248,0,0,1815,1814,1,0,
        0,0,1816,1819,1,0,0,0,1817,1815,1,0,0,0,1817,1818,1,0,0,0,1818,1827,
        1,0,0,0,1819,1817,1,0,0,0,1820,1822,5,250,0,0,1821,1820,1,0,0,0,
        1822,1825,1,0,0,0,1823,1821,1,0,0,0,1823,1824,1,0,0,0,1824,1827,
        1,0,0,0,1825,1823,1,0,0,0,1826,1811,1,0,0,0,1826,1817,1,0,0,0,1826,
        1823,1,0,0,0,1827,1828,1,0,0,0,1828,1829,5,245,0,0,1829,1830,5,142,
        0,0,1830,1835,5,253,0,0,1831,1834,3,134,67,0,1832,1834,3,52,26,0,
        1833,1831,1,0,0,0,1833,1832,1,0,0,0,1834,1837,1,0,0,0,1835,1833,
        1,0,0,0,1835,1836,1,0,0,0,1836,1838,1,0,0,0,1837,1835,1,0,0,0,1838,
        1839,5,2,0,0,1839,1840,5,142,0,0,1840,1841,5,253,0,0,1841,151,1,
        0,0,0,1842,1843,5,141,0,0,1843,1844,5,249,0,0,1844,1845,5,246,0,
        0,1845,1864,5,244,0,0,1846,1848,5,247,0,0,1847,1846,1,0,0,0,1848,
        1851,1,0,0,0,1849,1847,1,0,0,0,1849,1850,1,0,0,0,1850,1865,1,0,0,
        0,1851,1849,1,0,0,0,1852,1854,5,248,0,0,1853,1852,1,0,0,0,1854,1857,
        1,0,0,0,1855,1853,1,0,0,0,1855,1856,1,0,0,0,1856,1865,1,0,0,0,1857,
        1855,1,0,0,0,1858,1860,5,250,0,0,1859,1858,1,0,0,0,1860,1863,1,0,
        0,0,1861,1859,1,0,0,0,1861,1862,1,0,0,0,1862,1865,1,0,0,0,1863,1861,
        1,0,0,0,1864,1849,1,0,0,0,1864,1855,1,0,0,0,1864,1861,1,0,0,0,1865,
        1866,1,0,0,0,1866,1867,5,245,0,0,1867,1868,5,142,0,0,1868,1873,5,
        253,0,0,1869,1872,3,134,67,0,1870,1872,3,56,28,0,1871,1869,1,0,0,
        0,1871,1870,1,0,0,0,1872,1875,1,0,0,0,1873,1871,1,0,0,0,1873,1874,
        1,0,0,0,1874,1876,1,0,0,0,1875,1873,1,0,0,0,1876,1877,5,2,0,0,1877,
        1878,5,142,0,0,1878,1879,5,253,0,0,1879,153,1,0,0,0,225,186,188,
        197,203,209,215,221,227,233,242,251,260,269,278,287,296,305,312,
        328,333,340,349,354,365,377,383,396,403,430,436,439,446,449,454,
        459,464,467,470,474,479,484,491,495,500,505,510,515,520,525,528,
        535,540,545,551,555,572,578,582,587,590,595,600,605,609,615,619,
        623,626,628,632,644,654,659,664,671,682,685,691,702,708,712,717,
        722,731,734,737,749,756,762,774,779,784,789,794,803,830,835,841,
        851,854,859,864,868,880,904,912,919,922,925,930,935,940,950,955,
        960,964,973,976,983,986,989,992,1004,1011,1018,1023,1035,1040,1045,
        1052,1063,1068,1082,1087,1092,1099,1116,1121,1130,1135,1140,1145,
        1154,1157,1165,1180,1187,1196,1202,1206,1211,1216,1219,1230,1238,
        1253,1269,1272,1291,1296,1299,1308,1312,1323,1327,1331,1334,1347,
        1350,1357,1360,1367,1372,1375,1395,1403,1405,1421,1425,1427,1433,
        1448,1453,1458,1467,1531,1548,1588,1604,1608,1620,1628,1643,1658,
        1688,1697,1703,1709,1712,1719,1721,1735,1741,1747,1750,1757,1759,
        1773,1779,1785,1788,1795,1797,1811,1817,1823,1826,1833,1835,1849,
        1855,1861,1864,1871,1873
    ]

class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'CV'", "'DEN'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'OUTD'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'CUTOFF'", 
                     "'CUTON'", "'FROM'", "'TO'", "'PEAK'", "'SPECTRUM'", 
                     "'VOLUME'", "'PPM1'", "'PPM2'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SIZE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'NCS'", "<INVALID>", "'SIGB'", 
                     "<INVALID>", "'ALL'", "<INVALID>", "'ATOM'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'FBOX'", "<INVALID>", "'ID'", "<INVALID>", "'NAME'", 
                     "'NONE'", "<INVALID>", "'CUT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'SFBOX'", "'STORE1'", "'STORE2'", "'STORE3'", "'STORE4'", 
                     "'STORE5'", "'STORE6'", "'STORE7'", "'STORE8'", "'STORE9'", 
                     "'TAG'", "<INVALID>", "<INVALID>", "<INVALID>", "'SHOW'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'NIL'", "<INVALID>", 
                     "'UB'", "'MULT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'NONB'", "<INVALID>", "<INVALID>", "'FOR'", "'LOOP'", 
                     "'TAIL'", "'HEAD'", "'OR'", "'AND'", "'NOT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "':'", "<INVALID>", "'<'", "'>'", "'<='", 
                     "'>='", "'#'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", "'ENCODE'", 
                     "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", "'LOG10'", 
                     "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", "'MOD'", 
                     "<INVALID>", "<INVALID>", "'SIGN'", "'SIN'", "'SQRT'", 
                     "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'RMS'", "'SUM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Average", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Initialize", "Update", "Gamma", "Kappa", "Cutoff", 
                      "Cuton", "From", "To", "Peak", "Spectrum", "Volume", 
                      "Ppm1", "Ppm2", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Coupling", "Carbon", "Expectation", 
                      "PhiStep", "PsiStep", "Rcoil", "Zero", "Proton", "Observed", 
                      "Anisotropy", "Amides", "Nitrogens", "Oxygens", "RingAtoms", 
                      "AlphasAndAmides", "Error", "Conformation", "Compressed", 
                      "Phase", "Size", "Dimensions", "Danisotropy", "OneBond", 
                      "AngleDb", "DerivFlag", "Ncs", "Equivalence", "Sigb", 
                      "Flags", "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Fbox", "Hydrogen", 
                      "Id", "Known", "Name", "NONE", "Point", "Cut", "Previous", 
                      "Pseudo", "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Sfbox", "Store1", "Store2", "Store3", "Store4", "Store5", 
                      "Store6", "Store7", "Store8", "Store9", "Tag", "Vector", 
                      "Do_Lp", "Identity_Lp", "Show", "Evaluate_Lp", "Patch", 
                      "Reference", "Nil", "Parameter", "UB", "Mult", "HBonded", 
                      "Improper", "NBFix", "NonB", "VDWOff", "Verbose", 
                      "For", "Loop", "Tail", "Head", "Or_op", "And_op", 
                      "Not_op", "Comma", "Complex", "Integer", "Logical", 
                      "Real", "Double_quote_string", "SHARP_COMMENT", "EXCLM_COMMENT", 
                      "SMCLN_COMMENT", "Simple_name", "Simple_names", "Integers", 
                      "L_paren", "R_paren", "Colon", "Equ_op", "Lt_op", 
                      "Gt_op", "Leq_op", "Geq_op", "Neq_op", "Symbol_name", 
                      "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT", 
                      "SET_VARIABLE", "Abs", "Attr_properties", "Comparison_ops", 
                      "SPACE_AP", "Averaging_methods", "Simple_name_AM", 
                      "SPACE_AM", "Equ_op_PT", "Potential_types", "Simple_name_PT", 
                      "SPACE_PT", "Noe_analysis", "SPACE_NA", "Exclude", 
                      "Include", "End_FL", "Class_name", "Any_class", "SPACE_FL", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Symbol_name_VE", "Simple_name_VE", "Double_quote_string_VE", 
                      "SPACE_VE", "L_paren_VF", "SPACE_VF", "L_paren_VS", 
                      "R_paren_VS", "Average_VS", "Element_VS", "Max_VS", 
                      "Min_VS", "Norm_VS", "Rms_VS", "Sum_VS", "Atom_properties_VS", 
                      "SPACE_VS", "L_paren_CF", "R_paren_CF", "In_CF", "Integer_CF", 
                      "Real_CF", "Symbol_name_CF", "Simple_name_CF", "SPACE_CF", 
                      "COMMENT_CF", "Simple_name_LL", "SPACE_LL" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_noe_annotation = 16
    RULE_dihedral_statement = 17
    RULE_dihedral_assign = 18
    RULE_plane_statement = 19
    RULE_group_statement = 20
    RULE_harmonic_statement = 21
    RULE_harmonic_assign = 22
    RULE_sani_statement = 23
    RULE_sani_assign = 24
    RULE_coupling_statement = 25
    RULE_coup_assign = 26
    RULE_carbon_shift_statement = 27
    RULE_carbon_shift_assign = 28
    RULE_carbon_shift_rcoil = 29
    RULE_proton_shift_statement = 30
    RULE_observed = 31
    RULE_proton_shift_rcoil = 32
    RULE_proton_shift_anisotropy = 33
    RULE_proton_shift_amides = 34
    RULE_proton_shift_carbons = 35
    RULE_proton_shift_nitrogens = 36
    RULE_proton_shift_oxygens = 37
    RULE_proton_shift_ring_atoms = 38
    RULE_proton_shift_alphas_and_amides = 39
    RULE_conformation_statement = 40
    RULE_conf_assign = 41
    RULE_diffusion_statement = 42
    RULE_dani_assign = 43
    RULE_one_bond_coupling_statement = 44
    RULE_one_bond_assign = 45
    RULE_angle_db_statement = 46
    RULE_angle_db_assign = 47
    RULE_ncs_restraint = 48
    RULE_ncs_statement = 49
    RULE_ncs_group_statement = 50
    RULE_selection = 51
    RULE_selection_expression = 52
    RULE_term = 53
    RULE_factor = 54
    RULE_number = 55
    RULE_number_f = 56
    RULE_number_s = 57
    RULE_number_a = 58
    RULE_flag_statement = 59
    RULE_vector_statement = 60
    RULE_vector_mode = 61
    RULE_vector_expression = 62
    RULE_vector_operation = 63
    RULE_vflc = 64
    RULE_vector_func_call = 65
    RULE_vector_show_property = 66
    RULE_evaluate_statement = 67
    RULE_evaluate_operation = 68
    RULE_patch_statement = 69
    RULE_parameter_setting = 70
    RULE_parameter_statement = 71
    RULE_noe_assign_loop = 72
    RULE_dihedral_assign_loop = 73
    RULE_sani_assign_loop = 74
    RULE_coup_assign_loop = 75
    RULE_carbon_shift_assign_loop = 76

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "plane_statement", 
                   "group_statement", "harmonic_statement", "harmonic_assign", 
                   "sani_statement", "sani_assign", "coupling_statement", 
                   "coup_assign", "carbon_shift_statement", "carbon_shift_assign", 
                   "carbon_shift_rcoil", "proton_shift_statement", "observed", 
                   "proton_shift_rcoil", "proton_shift_anisotropy", "proton_shift_amides", 
                   "proton_shift_carbons", "proton_shift_nitrogens", "proton_shift_oxygens", 
                   "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "ncs_restraint", 
                   "ncs_statement", "ncs_group_statement", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s", "number_a", "flag_statement", "vector_statement", 
                   "vector_mode", "vector_expression", "vector_operation", 
                   "vflc", "vector_func_call", "vector_show_property", "evaluate_statement", 
                   "evaluate_operation", "patch_statement", "parameter_setting", 
                   "parameter_statement", "noe_assign_loop", "dihedral_assign_loop", 
                   "sani_assign_loop", "coup_assign_loop", "carbon_shift_assign_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Average=7
    Bhig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Cutoff=39
    Cuton=40
    From=41
    To=42
    Peak=43
    Spectrum=44
    Volume=45
    Ppm1=46
    Ppm2=47
    Restraints=48
    Dihedral=49
    Nassign=50
    Print_any=51
    Plane=52
    Group=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Sanisotropy=59
    Coefficients=60
    ForceConstant=61
    Coupling=62
    Carbon=63
    Expectation=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Zero=68
    Proton=69
    Observed=70
    Anisotropy=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Conformation=78
    Compressed=79
    Phase=80
    Size=81
    Dimensions=82
    Danisotropy=83
    OneBond=84
    AngleDb=85
    DerivFlag=86
    Ncs=87
    Equivalence=88
    Sigb=89
    Flags=90
    All=91
    Around=92
    Atom=93
    Attribute=94
    BondedTo=95
    ByGroup=96
    ByRes=97
    Chemical=98
    Fbox=99
    Hydrogen=100
    Id=101
    Known=102
    Name=103
    NONE=104
    Point=105
    Cut=106
    Previous=107
    Pseudo=108
    Residue=109
    Resname=110
    Saround=111
    SegIdentifier=112
    Sfbox=113
    Store1=114
    Store2=115
    Store3=116
    Store4=117
    Store5=118
    Store6=119
    Store7=120
    Store8=121
    Store9=122
    Tag=123
    Vector=124
    Do_Lp=125
    Identity_Lp=126
    Show=127
    Evaluate_Lp=128
    Patch=129
    Reference=130
    Nil=131
    Parameter=132
    UB=133
    Mult=134
    HBonded=135
    Improper=136
    NBFix=137
    NonB=138
    VDWOff=139
    Verbose=140
    For=141
    Loop=142
    Tail=143
    Head=144
    Or_op=145
    And_op=146
    Not_op=147
    Comma=148
    Complex=149
    Integer=150
    Logical=151
    Real=152
    Double_quote_string=153
    SHARP_COMMENT=154
    EXCLM_COMMENT=155
    SMCLN_COMMENT=156
    Simple_name=157
    Simple_names=158
    Integers=159
    L_paren=160
    R_paren=161
    Colon=162
    Equ_op=163
    Lt_op=164
    Gt_op=165
    Leq_op=166
    Geq_op=167
    Neq_op=168
    Symbol_name=169
    SPACE=170
    COMMENT=171
    SECTION_COMMENT=172
    LINE_COMMENT=173
    SET_VARIABLE=174
    Abs=175
    Attr_properties=176
    Comparison_ops=177
    SPACE_AP=178
    Averaging_methods=179
    Simple_name_AM=180
    SPACE_AM=181
    Equ_op_PT=182
    Potential_types=183
    Simple_name_PT=184
    SPACE_PT=185
    Noe_analysis=186
    SPACE_NA=187
    Exclude=188
    Include=189
    End_FL=190
    Class_name=191
    Any_class=192
    SPACE_FL=193
    R_paren_VE=194
    Equ_op_VE=195
    Add_op_VE=196
    Sub_op_VE=197
    Mul_op_VE=198
    Div_op_VE=199
    Exp_op_VE=200
    Comma_VE=201
    Integer_VE=202
    Real_VE=203
    Atom_properties_VE=204
    Abs_VE=205
    Acos_VE=206
    Asin_VE=207
    Cos_VE=208
    Decode_VE=209
    Encode_VE=210
    Exp_VE=211
    Gauss_VE=212
    Heavy_VE=213
    Int_VE=214
    Log10_VE=215
    Log_VE=216
    Max_VE=217
    Maxw_VE=218
    Min_VE=219
    Mod_VE=220
    Norm_VE=221
    Random_VE=222
    Sign_VE=223
    Sin_VE=224
    Sqrt_VE=225
    Tan_VE=226
    Symbol_name_VE=227
    Simple_name_VE=228
    Double_quote_string_VE=229
    SPACE_VE=230
    L_paren_VF=231
    SPACE_VF=232
    L_paren_VS=233
    R_paren_VS=234
    Average_VS=235
    Element_VS=236
    Max_VS=237
    Min_VS=238
    Norm_VS=239
    Rms_VS=240
    Sum_VS=241
    Atom_properties_VS=242
    SPACE_VS=243
    L_paren_CF=244
    R_paren_CF=245
    In_CF=246
    Integer_CF=247
    Real_CF=248
    Symbol_name_CF=249
    Simple_name_CF=250
    SPACE_CF=251
    COMMENT_CF=252
    Simple_name_LL=253
    SPACE_LL=254

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def ncs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Ncs_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Ncs_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def patch_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Patch_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Patch_statementContext,i)


        def parameter_setting(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Parameter_settingContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Parameter_settingContext,i)


        def noe_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assign_loopContext,i)


        def dihedral_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assign_loopContext,i)


        def sani_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assign_loopContext,i)


        def coup_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assign_loopContext,i)


        def carbon_shift_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assign_loopContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.ObservedContext,i)


        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Assign) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Dihedral) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Plane) | (1 << CnsMRParser.Group) | (1 << CnsMRParser.Harmonic) | (1 << CnsMRParser.Sanisotropy) | (1 << CnsMRParser.Coupling) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CnsMRParser.Proton - 69)) | (1 << (CnsMRParser.Observed - 69)) | (1 << (CnsMRParser.Conformation - 69)) | (1 << (CnsMRParser.Danisotropy - 69)) | (1 << (CnsMRParser.OneBond - 69)) | (1 << (CnsMRParser.AngleDb - 69)) | (1 << (CnsMRParser.Ncs - 69)) | (1 << (CnsMRParser.Flags - 69)) | (1 << (CnsMRParser.BondedTo - 69)) | (1 << (CnsMRParser.Vector - 69)) | (1 << (CnsMRParser.Evaluate_Lp - 69)) | (1 << (CnsMRParser.Patch - 69)) | (1 << (CnsMRParser.Parameter - 69)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (CnsMRParser.HBonded - 135)) | (1 << (CnsMRParser.Improper - 135)) | (1 << (CnsMRParser.NBFix - 135)) | (1 << (CnsMRParser.NonB - 135)) | (1 << (CnsMRParser.VDWOff - 135)) | (1 << (CnsMRParser.Verbose - 135)) | (1 << (CnsMRParser.For - 135)))) != 0):
                self.state = 186
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 154
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 155
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 156
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 157
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 158
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 159
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 160
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 161
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 162
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 163
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 164
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 165
                    self.angle_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 166
                    self.ncs_restraint()
                    pass

                elif la_ == 14:
                    self.state = 167
                    self.flag_statement()
                    pass

                elif la_ == 15:
                    self.state = 168
                    self.vector_statement()
                    pass

                elif la_ == 16:
                    self.state = 169
                    self.evaluate_statement()
                    pass

                elif la_ == 17:
                    self.state = 170
                    self.patch_statement()
                    pass

                elif la_ == 18:
                    self.state = 171
                    self.parameter_setting()
                    pass

                elif la_ == 19:
                    self.state = 172
                    self.noe_assign_loop()
                    pass

                elif la_ == 20:
                    self.state = 173
                    self.dihedral_assign_loop()
                    pass

                elif la_ == 21:
                    self.state = 174
                    self.sani_assign_loop()
                    pass

                elif la_ == 22:
                    self.state = 175
                    self.coup_assign_loop()
                    pass

                elif la_ == 23:
                    self.state = 176
                    self.carbon_shift_assign_loop()
                    pass

                elif la_ == 24:
                    self.state = 177
                    self.noe_assign()
                    pass

                elif la_ == 25:
                    self.state = 178
                    self.dihedral_assign()
                    pass

                elif la_ == 26:
                    self.state = 179
                    self.sani_assign()
                    pass

                elif la_ == 27:
                    self.state = 180
                    self.plane_statement()
                    pass

                elif la_ == 28:
                    self.state = 181
                    self.harmonic_assign()
                    pass

                elif la_ == 29:
                    self.state = 182
                    self.coup_assign()
                    pass

                elif la_ == 30:
                    self.state = 183
                    self.carbon_shift_assign()
                    pass

                elif la_ == 31:
                    self.state = 184
                    self.observed()
                    pass

                elif la_ == 32:
                    self.state = 185
                    self.parameter_statement()
                    pass


                self.state = 190
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 191
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self.match(CnsMRParser.Noe)
            self.state = 197
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 194
                    self.noe_statement() 
                self.state = 199
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 200
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 203
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 202
                self.match(CnsMRParser.Restraints)


            self.state = 205
            self.match(CnsMRParser.Dihedral)
            self.state = 209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Scale) | (1 << CnsMRParser.Nassign) | (1 << CnsMRParser.Print_any))) != 0) or _la==CnsMRParser.Vector or _la==CnsMRParser.For:
                self.state = 206
                self.dihedral_statement()
                self.state = 211
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 212
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 214
                self.match(CnsMRParser.Restraints)


            self.state = 217
            self.match(CnsMRParser.Plane)
            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0) or _la==CnsMRParser.Vector:
                self.state = 218
                self.plane_statement()
                self.state = 223
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 224
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 226
                self.match(CnsMRParser.Restraints)


            self.state = 229
            self.match(CnsMRParser.Harmonic)
            self.state = 233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Exponent or _la==CnsMRParser.Normal or _la==CnsMRParser.Vector:
                self.state = 230
                self.harmonic_statement()
                self.state = 235
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 236
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 238
            self.match(CnsMRParser.Sanisotropy)
            self.state = 242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0) or _la==CnsMRParser.For:
                self.state = 239
                self.sani_statement()
                self.state = 244
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 245
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self.match(CnsMRParser.Coupling)
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0) or _la==CnsMRParser.For:
                self.state = 248
                self.coupling_statement()
                self.state = 253
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 254
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 256
            self.match(CnsMRParser.Carbon)
            self.state = 260
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.ForceConstant - 5)) | (1 << (CnsMRParser.Expectation - 5)) | (1 << (CnsMRParser.PhiStep - 5)) | (1 << (CnsMRParser.PsiStep - 5)) | (1 << (CnsMRParser.Rcoil - 5)) | (1 << (CnsMRParser.Zero - 5)))) != 0) or _la==CnsMRParser.For:
                self.state = 257
                self.carbon_shift_statement()
                self.state = 262
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 263
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(CnsMRParser.Proton)
            self.state = 269
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Classification) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CnsMRParser.Rcoil - 67)) | (1 << (CnsMRParser.Observed - 67)) | (1 << (CnsMRParser.Anisotropy - 67)) | (1 << (CnsMRParser.Amides - 67)) | (1 << (CnsMRParser.Nitrogens - 67)) | (1 << (CnsMRParser.Oxygens - 67)) | (1 << (CnsMRParser.RingAtoms - 67)) | (1 << (CnsMRParser.AlphasAndAmides - 67)) | (1 << (CnsMRParser.Error - 67)))) != 0):
                self.state = 266
                self.proton_shift_statement()
                self.state = 271
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 272
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def conformation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 274
            self.match(CnsMRParser.Conformation)
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Compressed - 64)) | (1 << (CnsMRParser.Phase - 64)) | (1 << (CnsMRParser.Size - 64)))) != 0):
                self.state = 275
                self.conformation_statement()
                self.state = 280
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 281
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(CnsMRParser.Danisotropy)
            self.state = 287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 284
                self.diffusion_statement()
                self.state = 289
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 290
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 292
            self.match(CnsMRParser.OneBond)
            self.state = 296
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 293
                self.one_bond_coupling_statement()
                self.state = 298
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 299
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 301
            self.match(CnsMRParser.AngleDb)
            self.state = 305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Size - 64)) | (1 << (CnsMRParser.DerivFlag - 64)))) != 0):
                self.state = 302
                self.angle_db_statement()
                self.state = 307
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 308
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def noe_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,0)


        def noe_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assign_loopContext,0)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Average(self):
            return self.getToken(CnsMRParser.Average, 0)

        def Simple_name_AM(self):
            return self.getToken(CnsMRParser.Simple_name_AM, 0)

        def Averaging_methods(self):
            return self.getToken(CnsMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(CnsMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Simple_name_PT(self):
            return self.getToken(CnsMRParser.Simple_name_PT, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 310
                self.match(CnsMRParser.Analysis)
                self.state = 312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 311
                    self.match(CnsMRParser.Equ_op)


                self.state = 314
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 315
                self.noe_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 316
                self.noe_assign_loop()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 317
                self.match(CnsMRParser.Asymptote)
                self.state = 318
                self.match(CnsMRParser.Simple_name)
                self.state = 319
                self.number_s()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 320
                self.match(CnsMRParser.Average)
                self.state = 321
                self.match(CnsMRParser.Simple_name_AM)
                self.state = 322
                self.match(CnsMRParser.Averaging_methods)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 323
                self.match(CnsMRParser.Bhig)
                self.state = 324
                self.match(CnsMRParser.Simple_name)
                self.state = 325
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 326
                self.match(CnsMRParser.Ceiling)
                self.state = 328
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 327
                    self.match(CnsMRParser.Equ_op)


                self.state = 330
                self.number_s()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 331
                self.match(CnsMRParser.Classification)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 332
                    self.match(CnsMRParser.Equ_op)


                self.state = 335
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 336
                self.match(CnsMRParser.CountViol)
                self.state = 337
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 338
                self.match(CnsMRParser.Cv)
                self.state = 340
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 339
                    self.match(CnsMRParser.Equ_op)


                self.state = 342
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 343
                self.match(CnsMRParser.Den)
                self.state = 344
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 345
                self.match(CnsMRParser.Den)
                self.state = 346
                self.match(CnsMRParser.Update)
                self.state = 347
                self.match(CnsMRParser.Gamma)
                self.state = 349
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 348
                    self.match(CnsMRParser.Equ_op)


                self.state = 351
                self.number_s()
                self.state = 352
                self.match(CnsMRParser.Kappa)
                self.state = 354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 353
                    self.match(CnsMRParser.Equ_op)


                self.state = 356
                self.number_s()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 358
                self.match(CnsMRParser.Distribute)
                self.state = 359
                self.match(CnsMRParser.Simple_name)
                self.state = 360
                self.match(CnsMRParser.Simple_name)
                self.state = 361
                self.number_s()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 365
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 362
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 367
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 368
                self.match(CnsMRParser.End)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 369
                self.match(CnsMRParser.Monomers)
                self.state = 370
                self.match(CnsMRParser.Simple_name)
                self.state = 371
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 372
                self.match(CnsMRParser.Ncount)
                self.state = 373
                self.match(CnsMRParser.Simple_name)
                self.state = 374
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 375
                self.match(CnsMRParser.Nrestraints)
                self.state = 377
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 376
                    self.match(CnsMRParser.Equ_op)


                self.state = 379
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 380
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 381
                self.match(CnsMRParser.Partition)
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 382
                    self.match(CnsMRParser.Equ_op)


                self.state = 385
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 386
                self.match(CnsMRParser.Potential)
                self.state = 387
                self.match(CnsMRParser.Simple_name_PT)
                self.state = 388
                self.match(CnsMRParser.Potential_types)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 389
                self.match(CnsMRParser.Predict)
                self.state = 390
                self.predict_statement()
                self.state = 391
                self.match(CnsMRParser.End)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 393
                self.match(CnsMRParser.Print)
                self.state = 394
                self.match(CnsMRParser.Threshold)
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 395
                    self.match(CnsMRParser.Equ_op)


                self.state = 398
                self.number_s()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 399
                self.match(CnsMRParser.Raverage)
                self.state = 403
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 400
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 405
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 406
                self.match(CnsMRParser.End)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 407
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 408
                self.match(CnsMRParser.Rswitch)
                self.state = 409
                self.match(CnsMRParser.Simple_name)
                self.state = 410
                self.number_s()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 411
                self.match(CnsMRParser.Scale)
                self.state = 412
                self.match(CnsMRParser.Simple_name)
                self.state = 413
                self.number_s()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 414
                self.match(CnsMRParser.SoExponent)
                self.state = 415
                self.match(CnsMRParser.Simple_name)
                self.state = 416
                self.number_s()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 417
                self.match(CnsMRParser.SqConstant)
                self.state = 418
                self.match(CnsMRParser.Simple_name)
                self.state = 419
                self.number_s()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 420
                self.match(CnsMRParser.SqExponent)
                self.state = 421
                self.match(CnsMRParser.Simple_name)
                self.state = 422
                self.number_s()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 423
                self.match(CnsMRParser.SqOffset)
                self.state = 424
                self.match(CnsMRParser.Simple_name)
                self.state = 425
                self.number_s()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 426
                self.match(CnsMRParser.Taverage)
                self.state = 430
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 427
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 432
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                self.state = 433
                self.match(CnsMRParser.End)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 434
                self.match(CnsMRParser.Temperature)
                self.state = 436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 435
                    self.match(CnsMRParser.Equ_op)


                self.state = 438
                self.number_s()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Assign)
            else:
                return self.getToken(CnsMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 441
            self.match(CnsMRParser.Assign)
            self.state = 442
            self.selection()
            self.state = 443
            self.selection()
            self.state = 444
            self.number()
            self.state = 446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 445
                self.number()


            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                self.state = 448
                self.number()


            self.state = 454
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 451
                    self.noe_annotation() 
                self.state = 456
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 457
                self.match(CnsMRParser.Or_op)
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Assign:
                    self.state = 458
                    self.match(CnsMRParser.Assign)


                self.state = 461
                self.selection()
                self.state = 462
                self.selection()
                self.state = 464
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 463
                    self.number()


                self.state = 467
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 466
                    self.number()


                self.state = 470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                    self.state = 469
                    self.number()


                self.state = 476
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 491
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 477
                self.match(CnsMRParser.Cutoff)
                self.state = 479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 478
                    self.match(CnsMRParser.Equ_op)


                self.state = 481
                self.number_s()
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 482
                self.match(CnsMRParser.Cuton)
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 483
                    self.match(CnsMRParser.Equ_op)


                self.state = 486
                self.number_s()
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 487
                self.match(CnsMRParser.From)
                self.state = 488
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 489
                self.match(CnsMRParser.To)
                self.state = 490
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(CnsMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(CnsMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(CnsMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(CnsMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(CnsMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(CnsMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = CnsMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 528
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 493
                self.match(CnsMRParser.Peak)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 494
                    self.match(CnsMRParser.Equ_op)


                self.state = 497
                self.number_a()
                pass
            elif token in [CnsMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 498
                self.match(CnsMRParser.Spectrum)
                self.state = 500
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 499
                    self.match(CnsMRParser.Equ_op)


                self.state = 502
                self.number_a()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 503
                self.match(CnsMRParser.Weight)
                self.state = 505
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 504
                    self.match(CnsMRParser.Equ_op)


                self.state = 507
                self.number_a()
                pass
            elif token in [CnsMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 508
                self.match(CnsMRParser.Volume)
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 509
                    self.match(CnsMRParser.Equ_op)


                self.state = 512
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 513
                self.match(CnsMRParser.Ppm1)
                self.state = 515
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 514
                    self.match(CnsMRParser.Equ_op)


                self.state = 517
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 518
                self.match(CnsMRParser.Ppm2)
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 519
                    self.match(CnsMRParser.Equ_op)


                self.state = 522
                self.number_a()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 523
                self.match(CnsMRParser.Cv)
                self.state = 525
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 524
                    self.match(CnsMRParser.Equ_op)


                self.state = 527
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def dihedral_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assign_loopContext,0)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 555
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 530
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 531
                self.dihedral_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 532
                self.dihedral_assign_loop()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 533
                self.match(CnsMRParser.Cv)
                self.state = 535
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 534
                    self.match(CnsMRParser.Equ_op)


                self.state = 537
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 538
                self.match(CnsMRParser.Nassign)
                self.state = 540
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 539
                    self.match(CnsMRParser.Equ_op)


                self.state = 542
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 543
                self.match(CnsMRParser.Partition)
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 544
                    self.match(CnsMRParser.Equ_op)


                self.state = 547
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 548
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 8)
                self.state = 549
                self.match(CnsMRParser.Scale)
                self.state = 551
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 550
                    self.match(CnsMRParser.Equ_op)


                self.state = 553
                self.number_s()
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 9)
                self.state = 554
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 557
            self.match(CnsMRParser.Assign)
            self.state = 558
            self.selection()
            self.state = 559
            self.selection()
            self.state = 560
            self.selection()
            self.state = 561
            self.selection()
            self.state = 562
            self.number()
            self.state = 563
            self.number()
            self.state = 564
            self.number()
            self.state = 565
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_plane_statement)
        self._la = 0 # Token type
        try:
            self.state = 578
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 567
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 2)
                self.state = 568
                self.match(CnsMRParser.Group)
                self.state = 572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Selection or _la==CnsMRParser.Weight:
                    self.state = 569
                    self.group_statement()
                    self.state = 574
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 575
                self.match(CnsMRParser.End)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 3)
                self.state = 576
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 4)
                self.state = 577
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 590
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 580
                self.match(CnsMRParser.Selection)
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 581
                    self.match(CnsMRParser.Equ_op)


                self.state = 584
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 585
                self.match(CnsMRParser.Weight)
                self.state = 587
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 586
                    self.match(CnsMRParser.Equ_op)


                self.state = 589
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 632
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 2)
                self.state = 593
                self.match(CnsMRParser.Exponent)
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 594
                    self.match(CnsMRParser.Equ_op)


                self.state = 597
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 598
                self.match(CnsMRParser.Normal)
                self.state = 600
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 599
                    self.match(CnsMRParser.Equ_op)


                self.state = 602
                self.match(CnsMRParser.L_paren)
                self.state = 628
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integer, CnsMRParser.Real, CnsMRParser.Symbol_name]:
                    self.state = 603
                    self.number_s()
                    self.state = 605
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 604
                        self.match(CnsMRParser.Comma)


                    self.state = 607
                    self.number_s()
                    self.state = 609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 608
                        self.match(CnsMRParser.Comma)


                    self.state = 611
                    self.number_s()
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 613
                    self.match(CnsMRParser.Tail)
                    self.state = 615
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 614
                        self.match(CnsMRParser.Equ_op)


                    self.state = 617
                    self.selection()
                    self.state = 619
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 618
                        self.match(CnsMRParser.Comma)


                    self.state = 626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 621
                        self.match(CnsMRParser.Head)
                        self.state = 623
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CnsMRParser.Equ_op:
                            self.state = 622
                            self.match(CnsMRParser.Equ_op)


                        self.state = 625
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 630
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = CnsMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 634
            self.match(CnsMRParser.Assign)
            self.state = 635
            self.selection()
            self.state = 636
            self.number()
            self.state = 637
            self.number()
            self.state = 638
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,0)


        def sani_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 671
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 640
                self.sani_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 641
                self.sani_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 642
                self.match(CnsMRParser.Classification)
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 643
                    self.match(CnsMRParser.Equ_op)


                self.state = 646
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 647
                self.match(CnsMRParser.Coefficients)
                self.state = 648
                self.number_s()
                self.state = 649
                self.number_s()
                self.state = 650
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 652
                self.match(CnsMRParser.ForceConstant)
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 653
                    self.match(CnsMRParser.Equ_op)


                self.state = 656
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 657
                self.match(CnsMRParser.Nrestraints)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 658
                    self.match(CnsMRParser.Equ_op)


                self.state = 661
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 7)
                self.state = 662
                self.match(CnsMRParser.Potential)
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 663
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 666
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 667
                self.match(CnsMRParser.Print)
                self.state = 668
                self.match(CnsMRParser.Threshold)
                self.state = 669
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 670
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 673
            self.match(CnsMRParser.Assign)
            self.state = 674
            self.selection()
            self.state = 675
            self.selection()
            self.state = 676
            self.selection()
            self.state = 677
            self.selection()
            self.state = 678
            self.selection()
            self.state = 679
            self.selection()
            self.state = 680
            self.number()
            self.state = 682
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 681
                self.number()


            self.state = 685
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                self.state = 684
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,0)


        def coup_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 687
                self.coup_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 688
                self.coup_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 689
                self.match(CnsMRParser.Classification)
                self.state = 691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 690
                    self.match(CnsMRParser.Equ_op)


                self.state = 693
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 694
                self.match(CnsMRParser.Coefficients)
                self.state = 695
                self.number_s()
                self.state = 696
                self.number_s()
                self.state = 697
                self.number_s()
                self.state = 698
                self.number_s()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 5)
                self.state = 700
                self.match(CnsMRParser.Cv)
                self.state = 702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 701
                    self.match(CnsMRParser.Equ_op)


                self.state = 704
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 705
                self.match(CnsMRParser.ForceConstant)
                self.state = 706
                self.number_s()
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                    self.state = 707
                    self.number_s()


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 710
                self.match(CnsMRParser.Nrestraints)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 711
                    self.match(CnsMRParser.Equ_op)


                self.state = 714
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 8)
                self.state = 715
                self.match(CnsMRParser.Partition)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 716
                    self.match(CnsMRParser.Equ_op)


                self.state = 719
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 720
                self.match(CnsMRParser.Potential)
                self.state = 722
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 721
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 724
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 725
                self.match(CnsMRParser.Print)
                self.state = 726
                self.match(CnsMRParser.Threshold)
                self.state = 727
                self.number_s()
                self.state = 734
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 728
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 729
                    self.match(CnsMRParser.Classification)
                    self.state = 731
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 730
                        self.match(CnsMRParser.Equ_op)


                    self.state = 733
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 736
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 739
            self.match(CnsMRParser.Assign)
            self.state = 740
            self.selection()
            self.state = 741
            self.selection()
            self.state = 742
            self.selection()
            self.state = 743
            self.selection()
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 744
                self.selection()
                self.state = 745
                self.selection()
                self.state = 746
                self.selection()
                self.state = 747
                self.selection()


            self.state = 751
            self.number()
            self.state = 752
            self.number()
            self.state = 756
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                self.state = 753
                self.number()
                self.state = 754
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,0)


        def carbon_shift_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 803
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 758
                self.carbon_shift_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 759
                self.carbon_shift_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 760
                self.match(CnsMRParser.Classification)
                self.state = 762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 761
                    self.match(CnsMRParser.Equ_op)


                self.state = 764
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 765
                self.match(CnsMRParser.Expectation)
                self.state = 766
                self.match(CnsMRParser.Integer)
                self.state = 767
                self.match(CnsMRParser.Integer)
                self.state = 768
                self.number_s()
                self.state = 769
                self.number_s()
                self.state = 770
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 772
                self.match(CnsMRParser.ForceConstant)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 773
                    self.match(CnsMRParser.Equ_op)


                self.state = 776
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 777
                self.match(CnsMRParser.Nrestraints)
                self.state = 779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 778
                    self.match(CnsMRParser.Equ_op)


                self.state = 781
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 782
                self.match(CnsMRParser.PhiStep)
                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 783
                    self.match(CnsMRParser.Equ_op)


                self.state = 786
                self.number_s()
                pass
            elif token in [CnsMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 8)
                self.state = 787
                self.match(CnsMRParser.PsiStep)
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 788
                    self.match(CnsMRParser.Equ_op)


                self.state = 791
                self.number_s()
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 792
                self.match(CnsMRParser.Potential)
                self.state = 794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 793
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 796
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 797
                self.match(CnsMRParser.Print)
                self.state = 798
                self.match(CnsMRParser.Threshold)
                self.state = 799
                self.number_s()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 11)
                self.state = 800
                self.carbon_shift_rcoil()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 801
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 802
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 805
            self.match(CnsMRParser.Assign)
            self.state = 806
            self.selection()
            self.state = 807
            self.selection()
            self.state = 808
            self.selection()
            self.state = 809
            self.selection()
            self.state = 810
            self.selection()
            self.state = 811
            self.number()
            self.state = 812
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 814
            self.match(CnsMRParser.Rcoil)
            self.state = 815
            self.selection()
            self.state = 816
            self.number()
            self.state = 817
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(CnsMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 859
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 819
                self.observed()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 820
                self.proton_shift_rcoil()
                pass
            elif token in [CnsMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 821
                self.proton_shift_anisotropy()
                pass
            elif token in [CnsMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 822
                self.proton_shift_amides()
                pass
            elif token in [CnsMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 823
                self.proton_shift_carbons()
                pass
            elif token in [CnsMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 824
                self.proton_shift_nitrogens()
                pass
            elif token in [CnsMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 825
                self.proton_shift_oxygens()
                pass
            elif token in [CnsMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 826
                self.proton_shift_ring_atoms()
                pass
            elif token in [CnsMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 827
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 828
                self.match(CnsMRParser.Classification)
                self.state = 830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 829
                    self.match(CnsMRParser.Equ_op)


                self.state = 832
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 833
                self.match(CnsMRParser.Error)
                self.state = 835
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 834
                    self.match(CnsMRParser.Equ_op)


                self.state = 837
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 12)
                self.state = 838
                self.match(CnsMRParser.ForceConstant)
                self.state = 839
                self.number_s()
                self.state = 841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                    self.state = 840
                    self.number_s()


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 843
                self.match(CnsMRParser.Potential)
                self.state = 844
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 845
                self.match(CnsMRParser.Print)
                self.state = 846
                self.match(CnsMRParser.Threshold)
                self.state = 847
                self.number_s()
                self.state = 854
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 848
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 849
                    self.match(CnsMRParser.Classification)
                    self.state = 851
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 850
                        self.match(CnsMRParser.Equ_op)


                    self.state = 853
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 856
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 858
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 861
            self.match(CnsMRParser.Observed)
            self.state = 862
            self.selection()
            self.state = 864
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 863
                self.selection()


            self.state = 866
            self.number()
            self.state = 868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                self.state = 867
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self):
            return self.getTypedRuleContext(CnsMRParser.NumberContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 870
            self.match(CnsMRParser.Rcoil)
            self.state = 871
            self.selection()
            self.state = 872
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 874
            self.match(CnsMRParser.Anisotropy)
            self.state = 875
            self.selection()
            self.state = 876
            self.selection()
            self.state = 877
            self.selection()
            self.state = 878
            self.match(CnsMRParser.Simple_name)
            self.state = 880
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 879
                self.match(CnsMRParser.Logical)


            self.state = 882
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 884
            self.match(CnsMRParser.Amides)
            self.state = 885
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 887
            self.match(CnsMRParser.Carbon)
            self.state = 888
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(CnsMRParser.Nitrogens)
            self.state = 891
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 893
            self.match(CnsMRParser.Oxygens)
            self.state = 894
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 896
            self.match(CnsMRParser.RingAtoms)
            self.state = 897
            self.match(CnsMRParser.Simple_name)
            self.state = 898
            self.selection()
            self.state = 899
            self.selection()
            self.state = 900
            self.selection()
            self.state = 901
            self.selection()
            self.state = 902
            self.selection()
            self.state = 904
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 903
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 906
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 907
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 992
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 909
                self.conf_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 910
                self.match(CnsMRParser.Classification)
                self.state = 912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 911
                    self.match(CnsMRParser.Equ_op)


                self.state = 914
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 915
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 916
                self.match(CnsMRParser.Expectation)
                self.state = 917
                self.match(CnsMRParser.Integer)
                self.state = 919
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 918
                    self.match(CnsMRParser.Integer)


                self.state = 922
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 921
                    self.match(CnsMRParser.Integer)


                self.state = 925
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 924
                    self.match(CnsMRParser.Integer)


                self.state = 927
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 928
                self.match(CnsMRParser.Error)
                self.state = 930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 929
                    self.match(CnsMRParser.Equ_op)


                self.state = 932
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 933
                self.match(CnsMRParser.ForceConstant)
                self.state = 935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 934
                    self.match(CnsMRParser.Equ_op)


                self.state = 937
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 938
                self.match(CnsMRParser.Nrestraints)
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 939
                    self.match(CnsMRParser.Equ_op)


                self.state = 942
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 943
                self.match(CnsMRParser.Phase)
                self.state = 944
                self.match(CnsMRParser.Integer)
                self.state = 945
                self.match(CnsMRParser.Integer)
                self.state = 946
                self.match(CnsMRParser.Integer)
                self.state = 950
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 947
                    self.match(CnsMRParser.Integer)
                    self.state = 948
                    self.match(CnsMRParser.Integer)
                    self.state = 949
                    self.match(CnsMRParser.Integer)


                self.state = 955
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 952
                    self.match(CnsMRParser.Integer)
                    self.state = 953
                    self.match(CnsMRParser.Integer)
                    self.state = 954
                    self.match(CnsMRParser.Integer)


                self.state = 960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 957
                    self.match(CnsMRParser.Integer)
                    self.state = 958
                    self.match(CnsMRParser.Integer)
                    self.state = 959
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 962
                self.match(CnsMRParser.Potential)
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 963
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 966
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 967
                self.match(CnsMRParser.Print)
                self.state = 968
                self.match(CnsMRParser.Threshold)
                self.state = 969
                self.number_s()
                self.state = 976
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 970
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 971
                    self.match(CnsMRParser.Classification)
                    self.state = 973
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 972
                        self.match(CnsMRParser.Equ_op)


                    self.state = 975
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 978
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 979
                self.match(CnsMRParser.Size)
                self.state = 980
                self.match(CnsMRParser.Dimensions)
                self.state = 981
                self.match(CnsMRParser.Integer)
                self.state = 983
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 982
                    self.match(CnsMRParser.Integer)


                self.state = 986
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 985
                    self.match(CnsMRParser.Integer)


                self.state = 989
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 988
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 991
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 994
            self.match(CnsMRParser.Assign)
            self.state = 995
            self.selection()
            self.state = 996
            self.selection()
            self.state = 997
            self.selection()
            self.state = 998
            self.selection()
            self.state = 1004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 999
                self.selection()
                self.state = 1000
                self.selection()
                self.state = 1001
                self.selection()
                self.state = 1002
                self.selection()


            self.state = 1011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1006
                self.selection()
                self.state = 1007
                self.selection()
                self.state = 1008
                self.selection()
                self.state = 1009
                self.selection()


            self.state = 1018
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1013
                self.selection()
                self.state = 1014
                self.selection()
                self.state = 1015
                self.selection()
                self.state = 1016
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1052
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1020
                self.dani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1021
                self.match(CnsMRParser.Classification)
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1022
                    self.match(CnsMRParser.Equ_op)


                self.state = 1025
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1026
                self.match(CnsMRParser.Coefficients)
                self.state = 1027
                self.number_s()
                self.state = 1028
                self.number_s()
                self.state = 1029
                self.number_s()
                self.state = 1030
                self.number_s()
                self.state = 1031
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1033
                self.match(CnsMRParser.ForceConstant)
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1034
                    self.match(CnsMRParser.Equ_op)


                self.state = 1037
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1038
                self.match(CnsMRParser.Nrestraints)
                self.state = 1040
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1039
                    self.match(CnsMRParser.Equ_op)


                self.state = 1042
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1043
                self.match(CnsMRParser.Potential)
                self.state = 1045
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 1044
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 1047
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1048
                self.match(CnsMRParser.Print)
                self.state = 1049
                self.match(CnsMRParser.Threshold)
                self.state = 1050
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1051
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.match(CnsMRParser.Assign)
            self.state = 1055
            self.selection()
            self.state = 1056
            self.selection()
            self.state = 1057
            self.selection()
            self.state = 1058
            self.selection()
            self.state = 1059
            self.selection()
            self.state = 1060
            self.selection()
            self.state = 1061
            self.number()
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0):
                self.state = 1062
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1099
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1065
                self.one_bond_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1066
                self.match(CnsMRParser.Classification)
                self.state = 1068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1067
                    self.match(CnsMRParser.Equ_op)


                self.state = 1070
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1071
                self.match(CnsMRParser.Coefficients)
                self.state = 1072
                self.number_s()
                self.state = 1073
                self.number_s()
                self.state = 1074
                self.number_s()
                self.state = 1075
                self.number_s()
                self.state = 1076
                self.number_s()
                self.state = 1077
                self.number_s()
                self.state = 1078
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1080
                self.match(CnsMRParser.ForceConstant)
                self.state = 1082
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1081
                    self.match(CnsMRParser.Equ_op)


                self.state = 1084
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1085
                self.match(CnsMRParser.Nrestraints)
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1086
                    self.match(CnsMRParser.Equ_op)


                self.state = 1089
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1090
                self.match(CnsMRParser.Potential)
                self.state = 1092
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 1091
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 1094
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1095
                self.match(CnsMRParser.Print)
                self.state = 1096
                self.match(CnsMRParser.Threshold)
                self.state = 1097
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1098
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(CnsMRParser.Assign)
            self.state = 1102
            self.selection()
            self.state = 1103
            self.selection()
            self.state = 1104
            self.selection()
            self.state = 1105
            self.selection()
            self.state = 1106
            self.selection()
            self.state = 1107
            self.selection()
            self.state = 1108
            self.selection()
            self.state = 1109
            self.selection()
            self.state = 1110
            self.number()
            self.state = 1111
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1165
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1113
                self.angle_db_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1114
                self.match(CnsMRParser.Classification)
                self.state = 1116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1115
                    self.match(CnsMRParser.Equ_op)


                self.state = 1118
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1119
                self.match(CnsMRParser.DerivFlag)
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1120
                    self.match(CnsMRParser.Equ_op)


                self.state = 1123
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1124
                self.match(CnsMRParser.Expectation)
                self.state = 1125
                self.match(CnsMRParser.Integer)
                self.state = 1126
                self.match(CnsMRParser.Integer)
                self.state = 1127
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1128
                self.match(CnsMRParser.Error)
                self.state = 1130
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1129
                    self.match(CnsMRParser.Equ_op)


                self.state = 1132
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1133
                self.match(CnsMRParser.ForceConstant)
                self.state = 1135
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1134
                    self.match(CnsMRParser.Equ_op)


                self.state = 1137
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1138
                self.match(CnsMRParser.Nrestraints)
                self.state = 1140
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1139
                    self.match(CnsMRParser.Equ_op)


                self.state = 1142
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1143
                self.match(CnsMRParser.Potential)
                self.state = 1145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 1144
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 1147
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1148
                self.match(CnsMRParser.Print)
                self.state = 1149
                self.match(CnsMRParser.Threshold)
                self.state = 1150
                self.number_s()
                self.state = 1157
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 1151
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 1152
                    self.match(CnsMRParser.Classification)
                    self.state = 1154
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1153
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1156
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1159
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1160
                self.match(CnsMRParser.Size)
                self.state = 1161
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Dihedral or _la==CnsMRParser.AngleDb):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1162
                self.match(CnsMRParser.Integer)
                self.state = 1163
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1164
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1167
            self.match(CnsMRParser.Assign)
            self.state = 1168
            self.selection()
            self.state = 1169
            self.selection()
            self.state = 1170
            self.selection()
            self.state = 1171
            self.selection()
            self.state = 1172
            self.selection()
            self.state = 1173
            self.selection()
            self.state = 1174
            self.selection()
            self.state = 1175
            self.selection()
            self.state = 1176
            self.selection()
            self.state = 1177
            self.selection()
            self.state = 1178
            self.selection()
            self.state = 1180
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1179
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ncs(self):
            return self.getToken(CnsMRParser.Ncs, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def ncs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Ncs_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Ncs_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_ncs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_restraint" ):
                listener.enterNcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_restraint" ):
                listener.exitNcs_restraint(self)




    def ncs_restraint(self):

        localctx = CnsMRParser.Ncs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_ncs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1182
            self.match(CnsMRParser.Ncs)
            self.state = 1183
            self.match(CnsMRParser.Restraints)
            self.state = 1187
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0):
                self.state = 1184
                self.ncs_statement()
                self.state = 1189
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1190
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def ncs_group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Ncs_group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Ncs_group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_ncs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_statement" ):
                listener.enterNcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_statement" ):
                listener.exitNcs_statement(self)




    def ncs_statement(self):

        localctx = CnsMRParser.Ncs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_ncs_statement)
        self._la = 0 # Token type
        try:
            self.state = 1202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1192
                self.match(CnsMRParser.Group)
                self.state = 1196
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while ((((_la - 55)) & ~0x3f) == 0 and ((1 << (_la - 55)) & ((1 << (CnsMRParser.Weight - 55)) | (1 << (CnsMRParser.Equivalence - 55)) | (1 << (CnsMRParser.Sigb - 55)))) != 0):
                    self.state = 1193
                    self.ncs_group_statement()
                    self.state = 1198
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1199
                self.match(CnsMRParser.End)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1200
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1201
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equivalence(self):
            return self.getToken(CnsMRParser.Equivalence, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Sigb(self):
            return self.getToken(CnsMRParser.Sigb, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_ncs_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_group_statement" ):
                listener.enterNcs_group_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_group_statement" ):
                listener.exitNcs_group_statement(self)




    def ncs_group_statement(self):

        localctx = CnsMRParser.Ncs_group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_ncs_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 1219
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Equivalence]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1204
                self.match(CnsMRParser.Equivalence)
                self.state = 1206
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1205
                    self.match(CnsMRParser.Equ_op)


                self.state = 1208
                self.selection()
                pass
            elif token in [CnsMRParser.Sigb]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1209
                self.match(CnsMRParser.Sigb)
                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1210
                    self.match(CnsMRParser.Equ_op)


                self.state = 1213
                self.number_s()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1214
                self.match(CnsMRParser.Weight)
                self.state = 1216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1215
                    self.match(CnsMRParser.Equ_op)


                self.state = 1218
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.match(CnsMRParser.L_paren)
            self.state = 1222
            self.selection_expression()
            self.state = 1223
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1225
            self.term()
            self.state = 1230
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 1226
                self.match(CnsMRParser.Or_op)
                self.state = 1227
                self.term()
                self.state = 1232
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1233
            self.factor(0)
            self.state = 1238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1234
                self.match(CnsMRParser.And_op)
                self.state = 1235
                self.factor(0)
                self.state = 1240
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store1(self):
            return self.getToken(CnsMRParser.Store1, 0)

        def Store2(self):
            return self.getToken(CnsMRParser.Store2, 0)

        def Store3(self):
            return self.getToken(CnsMRParser.Store3, 0)

        def Store4(self):
            return self.getToken(CnsMRParser.Store4, 0)

        def Store5(self):
            return self.getToken(CnsMRParser.Store5, 0)

        def Store6(self):
            return self.getToken(CnsMRParser.Store6, 0)

        def Store7(self):
            return self.getToken(CnsMRParser.Store7, 0)

        def Store8(self):
            return self.getToken(CnsMRParser.Store8, 0)

        def Store9(self):
            return self.getToken(CnsMRParser.Store9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 108
        self.enterRecursionRule(localctx, 108, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1242
                self.match(CnsMRParser.L_paren)
                self.state = 1243
                self.selection_expression()
                self.state = 1244
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1246
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1247
                self.match(CnsMRParser.Atom)
                self.state = 1248
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1249
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1250
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1251
                self.match(CnsMRParser.Attribute)
                self.state = 1253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1252
                    self.match(CnsMRParser.Abs)


                self.state = 1255
                self.match(CnsMRParser.Attr_properties)
                self.state = 1256
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1257
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1258
                self.match(CnsMRParser.BondedTo)
                self.state = 1259
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1260
                self.match(CnsMRParser.ByGroup)
                self.state = 1261
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1262
                self.match(CnsMRParser.ByRes)
                self.state = 1263
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1264
                self.match(CnsMRParser.Chemical)
                self.state = 1272
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1265
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1266
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1269
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1267
                        self.match(CnsMRParser.Colon)
                        self.state = 1268
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1271
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1274
                self.match(CnsMRParser.Fbox)
                self.state = 1275
                self.number_f()
                self.state = 1276
                self.number_f()
                self.state = 1277
                self.number_f()
                self.state = 1278
                self.number_f()
                self.state = 1279
                self.number_f()
                self.state = 1280
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1282
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1283
                self.match(CnsMRParser.Id)
                self.state = 1284
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1285
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1286
                self.match(CnsMRParser.Name)
                self.state = 1299
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1287
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1288
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1291
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
                    if la_ == 1:
                        self.state = 1289
                        self.match(CnsMRParser.Colon)
                        self.state = 1290
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1293
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1296
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                    if la_ == 1:
                        self.state = 1294
                        self.match(CnsMRParser.Colon)
                        self.state = 1295
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1298
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1301
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1302
                self.match(CnsMRParser.Not_op)
                self.state = 1303
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1304
                self.match(CnsMRParser.Point)
                self.state = 1305
                self.match(CnsMRParser.L_paren)
                self.state = 1306
                self.number_f()
                self.state = 1308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1307
                    self.match(CnsMRParser.Comma)


                self.state = 1310
                self.number_f()
                self.state = 1312
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1311
                    self.match(CnsMRParser.Comma)


                self.state = 1314
                self.number_f()
                self.state = 1315
                self.match(CnsMRParser.R_paren)
                self.state = 1316
                self.match(CnsMRParser.Cut)
                self.state = 1317
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1319
                self.match(CnsMRParser.Point)
                self.state = 1320
                self.match(CnsMRParser.L_paren)
                self.state = 1321
                self.match(CnsMRParser.Tail)
                self.state = 1323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1322
                    self.match(CnsMRParser.Equ_op)


                self.state = 1325
                self.selection()
                self.state = 1327
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1326
                    self.match(CnsMRParser.Comma)


                self.state = 1334
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1329
                    self.match(CnsMRParser.Head)
                    self.state = 1331
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1330
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1333
                    self.selection()


                self.state = 1336
                self.match(CnsMRParser.R_paren)
                self.state = 1337
                self.match(CnsMRParser.Cut)
                self.state = 1338
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1340
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1341
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1342
                self.match(CnsMRParser.Residue)
                self.state = 1350
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1343
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1344
                    self.match(CnsMRParser.Integer)
                    self.state = 1347
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
                    if la_ == 1:
                        self.state = 1345
                        self.match(CnsMRParser.Colon)
                        self.state = 1346
                        self.match(CnsMRParser.Integer)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1349
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1352
                self.match(CnsMRParser.Resname)
                self.state = 1360
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1353
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1354
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1357
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                    if la_ == 1:
                        self.state = 1355
                        self.match(CnsMRParser.Colon)
                        self.state = 1356
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1359
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1362
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1375
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1363
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1364
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1367
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                    if la_ == 1:
                        self.state = 1365
                        self.match(CnsMRParser.Colon)
                        self.state = 1366
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1369
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1372
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                    if la_ == 1:
                        self.state = 1370
                        self.match(CnsMRParser.Colon)
                        self.state = 1371
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1374
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1377
                self.match(CnsMRParser.Sfbox)
                self.state = 1378
                self.number_f()
                self.state = 1379
                self.number_f()
                self.state = 1380
                self.number_f()
                self.state = 1381
                self.number_f()
                self.state = 1382
                self.number_f()
                self.state = 1383
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1385
                self.match(CnsMRParser.Store1)
                pass

            elif la_ == 25:
                self.state = 1386
                self.match(CnsMRParser.Store2)
                pass

            elif la_ == 26:
                self.state = 1387
                self.match(CnsMRParser.Store3)
                pass

            elif la_ == 27:
                self.state = 1388
                self.match(CnsMRParser.Store4)
                pass

            elif la_ == 28:
                self.state = 1389
                self.match(CnsMRParser.Store5)
                pass

            elif la_ == 29:
                self.state = 1390
                self.match(CnsMRParser.Store6)
                pass

            elif la_ == 30:
                self.state = 1391
                self.match(CnsMRParser.Store7)
                pass

            elif la_ == 31:
                self.state = 1392
                self.match(CnsMRParser.Store8)
                pass

            elif la_ == 32:
                self.state = 1393
                self.match(CnsMRParser.Store9)
                pass

            elif la_ == 33:
                self.state = 1394
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1405
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,176,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1403
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1397
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1398
                        self.match(CnsMRParser.Around)
                        self.state = 1399
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1400
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1401
                        self.match(CnsMRParser.Saround)
                        self.state = 1402
                        self.number_f()
                        pass

             
                self.state = 1407
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,176,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1408
            _la = self._input.LA(1)
            if not(((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1410
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1412
            _la = self._input.LA(1)
            if not(((((_la - 150)) & ~0x3f) == 0 and ((1 << (_la - 150)) & ((1 << (CnsMRParser.Integer - 150)) | (1 << (CnsMRParser.Real - 150)) | (1 << (CnsMRParser.Symbol_name - 150)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = CnsMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1414
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CnsMRParser.Flags, 0)

        def Include(self):
            return self.getToken(CnsMRParser.Include, 0)

        def End_FL(self):
            return self.getToken(CnsMRParser.End_FL, 0)

        def Exclude(self):
            return self.getToken(CnsMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Class_name)
            else:
                return self.getToken(CnsMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(CnsMRParser.Any_class, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = CnsMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1416
            self.match(CnsMRParser.Flags)
            self.state = 1427
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Exclude:
                self.state = 1417
                self.match(CnsMRParser.Exclude)
                self.state = 1425
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Include, CnsMRParser.Class_name]:
                    self.state = 1421
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CnsMRParser.Class_name:
                        self.state = 1418
                        self.match(CnsMRParser.Class_name)
                        self.state = 1423
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CnsMRParser.Any_class]:
                    self.state = 1424
                    self.match(CnsMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1429
            self.match(CnsMRParser.Include)
            self.state = 1433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Class_name:
                self.state = 1430
                self.match(CnsMRParser.Class_name)
                self.state = 1435
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1436
            self.match(CnsMRParser.End_FL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(CnsMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = CnsMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1438
            self.match(CnsMRParser.Vector)
            self.state = 1439
            self.vector_mode()
            self.state = 1440
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(CnsMRParser.Do_Lp, 0)

        def Identity_Lp(self):
            return self.getToken(CnsMRParser.Identity_Lp, 0)

        def Show(self):
            return self.getToken(CnsMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = CnsMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 1448
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Do_Lp, CnsMRParser.Identity_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1442
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Do_Lp or _la==CnsMRParser.Identity_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1443
                self.vector_expression()
                self.state = 1444
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1446
                self.match(CnsMRParser.Show)
                self.state = 1447
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = CnsMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1450
            self.match(CnsMRParser.Atom_properties_VE)
            self.state = 1453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Equ_op_VE:
                self.state = 1451
                self.match(CnsMRParser.Equ_op_VE)
                self.state = 1452
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = CnsMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1455
            self.vflc()
            self.state = 1458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (CnsMRParser.Add_op_VE - 196)) | (1 << (CnsMRParser.Sub_op_VE - 196)) | (1 << (CnsMRParser.Mul_op_VE - 196)) | (1 << (CnsMRParser.Div_op_VE - 196)) | (1 << (CnsMRParser.Exp_op_VE - 196)))) != 0):
                self.state = 1456
                _la = self._input.LA(1)
                if not(((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (CnsMRParser.Add_op_VE - 196)) | (1 << (CnsMRParser.Sub_op_VE - 196)) | (1 << (CnsMRParser.Mul_op_VE - 196)) | (1 << (CnsMRParser.Div_op_VE - 196)) | (1 << (CnsMRParser.Exp_op_VE - 196)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1457
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(CnsMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(CnsMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(CnsMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(CnsMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = CnsMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_vflc)
        try:
            self.state = 1467
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1460
                self.match(CnsMRParser.Atom_properties_VE)
                pass
            elif token in [CnsMRParser.Abs_VE, CnsMRParser.Acos_VE, CnsMRParser.Cos_VE, CnsMRParser.Decode_VE, CnsMRParser.Encode_VE, CnsMRParser.Exp_VE, CnsMRParser.Gauss_VE, CnsMRParser.Heavy_VE, CnsMRParser.Int_VE, CnsMRParser.Log10_VE, CnsMRParser.Log_VE, CnsMRParser.Max_VE, CnsMRParser.Maxw_VE, CnsMRParser.Min_VE, CnsMRParser.Mod_VE, CnsMRParser.Norm_VE, CnsMRParser.Random_VE, CnsMRParser.Sign_VE, CnsMRParser.Sin_VE, CnsMRParser.Sqrt_VE, CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1461
                self.vector_func_call()
                pass
            elif token in [CnsMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1462
                self.match(CnsMRParser.Integer_VE)
                pass
            elif token in [CnsMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1463
                self.match(CnsMRParser.Real_VE)
                pass
            elif token in [CnsMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1464
                self.match(CnsMRParser.Simple_name_VE)
                pass
            elif token in [CnsMRParser.Symbol_name_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1465
                self.match(CnsMRParser.Symbol_name_VE)
                pass
            elif token in [CnsMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1466
                self.match(CnsMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(CnsMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(CnsMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(CnsMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(CnsMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(CnsMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(CnsMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(CnsMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(CnsMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(CnsMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(CnsMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(CnsMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(CnsMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(CnsMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma_VE)
            else:
                return self.getToken(CnsMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(CnsMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(CnsMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(CnsMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(CnsMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(CnsMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(CnsMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(CnsMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(CnsMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(CnsMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = CnsMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1588
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1469
                self.match(CnsMRParser.Abs_VE)
                self.state = 1470
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1471
                self.vflc()
                self.state = 1472
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1474
                self.match(CnsMRParser.Acos_VE)
                self.state = 1475
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1476
                self.vflc()
                self.state = 1477
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1479
                self.match(CnsMRParser.Cos_VE)
                self.state = 1480
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1481
                self.vflc()
                self.state = 1482
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1484
                self.match(CnsMRParser.Decode_VE)
                self.state = 1485
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1486
                self.vflc()
                self.state = 1487
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1489
                self.match(CnsMRParser.Encode_VE)
                self.state = 1490
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1491
                self.vflc()
                self.state = 1492
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1494
                self.match(CnsMRParser.Exp_VE)
                self.state = 1495
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1496
                self.vflc()
                self.state = 1497
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1499
                self.match(CnsMRParser.Gauss_VE)
                self.state = 1500
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1501
                self.vflc()
                self.state = 1502
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1504
                self.match(CnsMRParser.Heavy_VE)
                self.state = 1505
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1506
                self.vflc()
                self.state = 1507
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1509
                self.match(CnsMRParser.Int_VE)
                self.state = 1510
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1511
                self.vflc()
                self.state = 1512
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1514
                self.match(CnsMRParser.Log10_VE)
                self.state = 1515
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1516
                self.vflc()
                self.state = 1517
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1519
                self.match(CnsMRParser.Log_VE)
                self.state = 1520
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1521
                self.vflc()
                self.state = 1522
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1524
                self.match(CnsMRParser.Max_VE)
                self.state = 1525
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1526
                self.vflc()
                self.state = 1531
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1527
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1528
                    self.vflc()
                    self.state = 1533
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1534
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1536
                self.match(CnsMRParser.Maxw_VE)
                self.state = 1537
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1538
                self.vflc()
                self.state = 1539
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1541
                self.match(CnsMRParser.Min_VE)
                self.state = 1542
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1543
                self.vflc()
                self.state = 1548
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1544
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1545
                    self.vflc()
                    self.state = 1550
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1551
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1553
                self.match(CnsMRParser.Mod_VE)
                self.state = 1554
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1555
                self.vflc()
                self.state = 1556
                self.match(CnsMRParser.Comma_VE)
                self.state = 1557
                self.vflc()
                self.state = 1558
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1560
                self.match(CnsMRParser.Norm_VE)
                self.state = 1561
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1562
                self.vflc()
                self.state = 1563
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1565
                self.match(CnsMRParser.Random_VE)
                self.state = 1566
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1567
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1568
                self.match(CnsMRParser.Sign_VE)
                self.state = 1569
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1570
                self.vflc()
                self.state = 1571
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1573
                self.match(CnsMRParser.Sin_VE)
                self.state = 1574
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1575
                self.vflc()
                self.state = 1576
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1578
                self.match(CnsMRParser.Sqrt_VE)
                self.state = 1579
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1580
                self.vflc()
                self.state = 1581
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1583
                self.match(CnsMRParser.Tan_VE)
                self.state = 1584
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1585
                self.vflc()
                self.state = 1586
                self.match(CnsMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(CnsMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(CnsMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(CnsMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(CnsMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(CnsMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(CnsMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(CnsMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(CnsMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(CnsMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(CnsMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = CnsMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1590
            _la = self._input.LA(1)
            if not(((((_la - 235)) & ~0x3f) == 0 and ((1 << (_la - 235)) & ((1 << (CnsMRParser.Average_VS - 235)) | (1 << (CnsMRParser.Element_VS - 235)) | (1 << (CnsMRParser.Max_VS - 235)) | (1 << (CnsMRParser.Min_VS - 235)) | (1 << (CnsMRParser.Norm_VS - 235)) | (1 << (CnsMRParser.Rms_VS - 235)) | (1 << (CnsMRParser.Sum_VS - 235)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1591
            self.match(CnsMRParser.L_paren_VS)
            self.state = 1592
            self.match(CnsMRParser.Atom_properties_VS)
            self.state = 1593
            self.match(CnsMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(CnsMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = CnsMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1595
            self.match(CnsMRParser.Evaluate_Lp)
            self.state = 1596
            self.match(CnsMRParser.Symbol_name_VE)
            self.state = 1597
            self.match(CnsMRParser.Equ_op_VE)
            self.state = 1598
            self.evaluate_operation()
            self.state = 1599
            self.match(CnsMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = CnsMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1601
            self.vflc()
            self.state = 1604
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (CnsMRParser.Add_op_VE - 196)) | (1 << (CnsMRParser.Sub_op_VE - 196)) | (1 << (CnsMRParser.Mul_op_VE - 196)) | (1 << (CnsMRParser.Div_op_VE - 196)) | (1 << (CnsMRParser.Exp_op_VE - 196)))) != 0):
                self.state = 1602
                _la = self._input.LA(1)
                if not(((((_la - 196)) & ~0x3f) == 0 and ((1 << (_la - 196)) & ((1 << (CnsMRParser.Add_op_VE - 196)) | (1 << (CnsMRParser.Sub_op_VE - 196)) | (1 << (CnsMRParser.Mul_op_VE - 196)) | (1 << (CnsMRParser.Div_op_VE - 196)) | (1 << (CnsMRParser.Exp_op_VE - 196)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1603
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Patch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Patch(self):
            return self.getToken(CnsMRParser.Patch, 0)

        def Reference(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Reference)
            else:
                return self.getToken(CnsMRParser.Reference, i)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Nil(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Nil)
            else:
                return self.getToken(CnsMRParser.Nil, i)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def HBonded(self):
            return self.getToken(CnsMRParser.HBonded, 0)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(CnsMRParser.Improper, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_patch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatch_statement" ):
                listener.enterPatch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatch_statement" ):
                listener.exitPatch_statement(self)




    def patch_statement(self):

        localctx = CnsMRParser.Patch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_patch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1606
            self.match(CnsMRParser.Patch)
            self.state = 1608
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Dihedral or _la==CnsMRParser.AngleDb or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (CnsMRParser.HBonded - 135)) | (1 << (CnsMRParser.Improper - 135)) | (1 << (CnsMRParser.Simple_name - 135)))) != 0):
                self.state = 1607
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Dihedral or _la==CnsMRParser.AngleDb or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (CnsMRParser.HBonded - 135)) | (1 << (CnsMRParser.Improper - 135)) | (1 << (CnsMRParser.Simple_name - 135)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1610
            self.match(CnsMRParser.Reference)
            self.state = 1611
            self.match(CnsMRParser.Equ_op)
            self.state = 1612
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Nil or _la==CnsMRParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1613
            self.match(CnsMRParser.Equ_op)
            self.state = 1614
            self.selection()
            self.state = 1620
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Reference:
                self.state = 1615
                self.match(CnsMRParser.Reference)
                self.state = 1616
                self.match(CnsMRParser.Equ_op)
                self.state = 1617
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Nil or _la==CnsMRParser.Integer):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1618
                self.match(CnsMRParser.Equ_op)
                self.state = 1619
                self.selection()


            self.state = 1622
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_settingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Parameter(self):
            return self.getToken(CnsMRParser.Parameter, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_parameter_setting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_setting" ):
                listener.enterParameter_setting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_setting" ):
                listener.exitParameter_setting(self)




    def parameter_setting(self):

        localctx = CnsMRParser.Parameter_settingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_parameter_setting)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1624
            self.match(CnsMRParser.Parameter)
            self.state = 1628
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Reset or _la==CnsMRParser.Dihedral or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (CnsMRParser.AngleDb - 85)) | (1 << (CnsMRParser.BondedTo - 85)) | (1 << (CnsMRParser.HBonded - 85)) | (1 << (CnsMRParser.Improper - 85)) | (1 << (CnsMRParser.NBFix - 85)) | (1 << (CnsMRParser.NonB - 85)) | (1 << (CnsMRParser.VDWOff - 85)) | (1 << (CnsMRParser.Verbose - 85)))) != 0):
                self.state = 1625
                self.parameter_statement()
                self.state = 1630
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1631
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def UB(self):
            return self.getToken(CnsMRParser.UB, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(CnsMRParser.Improper, 0)

        def Mult(self):
            return self.getToken(CnsMRParser.Mult, 0)

        def HBonded(self):
            return self.getToken(CnsMRParser.HBonded, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def NBFix(self):
            return self.getToken(CnsMRParser.NBFix, 0)

        def NonB(self):
            return self.getToken(CnsMRParser.NonB, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def VDWOff(self):
            return self.getToken(CnsMRParser.VDWOff, 0)

        def Verbose(self):
            return self.getToken(CnsMRParser.Verbose, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_parameter_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_statement" ):
                listener.enterParameter_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_statement" ):
                listener.exitParameter_statement(self)




    def parameter_statement(self):

        localctx = CnsMRParser.Parameter_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_parameter_statement)
        self._la = 0 # Token type
        try:
            self.state = 1688
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.AngleDb]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1633
                self.match(CnsMRParser.AngleDb)
                self.state = 1634
                self.match(CnsMRParser.Simple_name)
                self.state = 1635
                self.match(CnsMRParser.Simple_name)
                self.state = 1636
                self.match(CnsMRParser.Simple_name)
                self.state = 1637
                self.number_s()
                self.state = 1638
                self.number_s()
                self.state = 1643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.UB:
                    self.state = 1639
                    self.match(CnsMRParser.UB)
                    self.state = 1640
                    self.number_s()
                    self.state = 1641
                    self.number_s()


                pass
            elif token in [CnsMRParser.BondedTo]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1645
                self.match(CnsMRParser.BondedTo)
                self.state = 1646
                self.match(CnsMRParser.Simple_name)
                self.state = 1647
                self.match(CnsMRParser.Simple_name)
                self.state = 1648
                self.number_s()
                self.state = 1649
                self.number_s()
                pass
            elif token in [CnsMRParser.Dihedral, CnsMRParser.Improper]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1651
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Dihedral or _la==CnsMRParser.Improper):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1652
                self.match(CnsMRParser.Simple_name)
                self.state = 1653
                self.match(CnsMRParser.Simple_name)
                self.state = 1654
                self.match(CnsMRParser.Simple_name)
                self.state = 1655
                self.match(CnsMRParser.Simple_name)
                self.state = 1658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Mult:
                    self.state = 1656
                    self.match(CnsMRParser.Mult)
                    self.state = 1657
                    self.match(CnsMRParser.Integer)


                self.state = 1660
                self.number_s()
                self.state = 1661
                self.match(CnsMRParser.Integer)
                self.state = 1662
                self.number_s()
                pass
            elif token in [CnsMRParser.HBonded]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1664
                self.match(CnsMRParser.HBonded)
                self.state = 1665
                self.match(CnsMRParser.Simple_names)
                self.state = 1666
                self.match(CnsMRParser.Simple_names)
                self.state = 1667
                self.number_s()
                self.state = 1668
                self.number_s()
                pass
            elif token in [CnsMRParser.NBFix]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1670
                self.match(CnsMRParser.NBFix)
                self.state = 1671
                self.match(CnsMRParser.Simple_name)
                self.state = 1672
                self.match(CnsMRParser.Simple_name)
                self.state = 1673
                self.number_s()
                self.state = 1674
                self.number_s()
                self.state = 1675
                self.number_s()
                self.state = 1676
                self.number_s()
                pass
            elif token in [CnsMRParser.NonB]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1678
                self.match(CnsMRParser.NonB)
                self.state = 1679
                self.match(CnsMRParser.Simple_name)
                self.state = 1680
                self.number_s()
                self.state = 1681
                self.number_s()
                self.state = 1682
                self.number_s()
                self.state = 1683
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset, CnsMRParser.VDWOff]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1685
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Reset or _la==CnsMRParser.VDWOff):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1686
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Verbose]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1687
                self.match(CnsMRParser.Verbose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign_loop" ):
                listener.enterNoe_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign_loop" ):
                listener.exitNoe_assign_loop(self)




    def noe_assign_loop(self):

        localctx = CnsMRParser.Noe_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_noe_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self.match(CnsMRParser.For)
            self.state = 1691
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1692
            self.match(CnsMRParser.In_CF)
            self.state = 1693
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
            if la_ == 1:
                self.state = 1697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1694
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1700
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1705
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1709
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1706
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1711
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1714
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1715
            self.match(CnsMRParser.Loop)
            self.state = 1716
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1721
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1719
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1717
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1718
                    self.noe_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1723
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1724
            self.match(CnsMRParser.End)
            self.state = 1725
            self.match(CnsMRParser.Loop)
            self.state = 1726
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = CnsMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1728
            self.match(CnsMRParser.For)
            self.state = 1729
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1730
            self.match(CnsMRParser.In_CF)
            self.state = 1731
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1750
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
            if la_ == 1:
                self.state = 1735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1732
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1737
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1741
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1738
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1743
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1747
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1744
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1749
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1752
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1753
            self.match(CnsMRParser.Loop)
            self.state = 1754
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1759
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1757
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1755
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1756
                    self.dihedral_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1761
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1762
            self.match(CnsMRParser.End)
            self.state = 1763
            self.match(CnsMRParser.Loop)
            self.state = 1764
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign_loop" ):
                listener.enterSani_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign_loop" ):
                listener.exitSani_assign_loop(self)




    def sani_assign_loop(self):

        localctx = CnsMRParser.Sani_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_sani_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            self.match(CnsMRParser.For)
            self.state = 1767
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1768
            self.match(CnsMRParser.In_CF)
            self.state = 1769
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1788
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
            if la_ == 1:
                self.state = 1773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1770
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1776
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1781
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1782
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1790
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1791
            self.match(CnsMRParser.Loop)
            self.state = 1792
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1795
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1793
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1794
                    self.sani_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1799
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1800
            self.match(CnsMRParser.End)
            self.state = 1801
            self.match(CnsMRParser.Loop)
            self.state = 1802
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign_loop" ):
                listener.enterCoup_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign_loop" ):
                listener.exitCoup_assign_loop(self)




    def coup_assign_loop(self):

        localctx = CnsMRParser.Coup_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_coup_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1804
            self.match(CnsMRParser.For)
            self.state = 1805
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1806
            self.match(CnsMRParser.In_CF)
            self.state = 1807
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1826
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,216,self._ctx)
            if la_ == 1:
                self.state = 1811
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1808
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1813
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1814
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1819
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1820
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1825
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1828
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1829
            self.match(CnsMRParser.Loop)
            self.state = 1830
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1835
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1833
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1831
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1832
                    self.coup_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1837
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1838
            self.match(CnsMRParser.End)
            self.state = 1839
            self.match(CnsMRParser.Loop)
            self.state = 1840
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign_loop" ):
                listener.enterCarbon_shift_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign_loop" ):
                listener.exitCarbon_shift_assign_loop(self)




    def carbon_shift_assign_loop(self):

        localctx = CnsMRParser.Carbon_shift_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_carbon_shift_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1842
            self.match(CnsMRParser.For)
            self.state = 1843
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1844
            self.match(CnsMRParser.In_CF)
            self.state = 1845
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1864
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.state = 1849
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1846
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1851
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1855
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1852
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1857
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1858
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1863
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1866
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1867
            self.match(CnsMRParser.Loop)
            self.state = 1868
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1871
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1869
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1870
                    self.carbon_shift_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1875
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1876
            self.match(CnsMRParser.End)
            self.state = 1877
            self.match(CnsMRParser.Loop)
            self.state = 1878
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[54] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




