# Generated from CnsMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,251,1835,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,5,0,180,8,0,10,0,12,0,183,9,0,1,0,1,0,1,1,1,1,5,1,
        189,8,1,10,1,12,1,192,9,1,1,1,1,1,1,2,3,2,197,8,2,1,2,1,2,5,2,201,
        8,2,10,2,12,2,204,9,2,1,2,1,2,1,3,3,3,209,8,3,1,3,1,3,5,3,213,8,
        3,10,3,12,3,216,9,3,1,3,1,3,1,4,3,4,221,8,4,1,4,1,4,5,4,225,8,4,
        10,4,12,4,228,9,4,1,4,1,4,1,5,1,5,5,5,234,8,5,10,5,12,5,237,9,5,
        1,5,1,5,1,6,1,6,5,6,243,8,6,10,6,12,6,246,9,6,1,6,1,6,1,7,1,7,5,
        7,252,8,7,10,7,12,7,255,9,7,1,7,1,7,1,8,1,8,5,8,261,8,8,10,8,12,
        8,264,9,8,1,8,1,8,1,9,1,9,5,9,270,8,9,10,9,12,9,273,9,9,1,9,1,9,
        1,10,1,10,5,10,279,8,10,10,10,12,10,282,9,10,1,10,1,10,1,11,1,11,
        5,11,288,8,11,10,11,12,11,291,9,11,1,11,1,11,1,12,1,12,5,12,297,
        8,12,10,12,12,12,300,9,12,1,12,1,12,1,13,1,13,3,13,306,8,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        3,13,322,8,13,1,13,1,13,1,13,3,13,327,8,13,1,13,1,13,1,13,1,13,1,
        13,3,13,334,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,343,8,13,
        1,13,1,13,1,13,3,13,348,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        5,13,357,8,13,10,13,12,13,360,9,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,3,13,371,8,13,1,13,1,13,1,13,1,13,3,13,377,8,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,390,8,
        13,1,13,1,13,1,13,5,13,395,8,13,10,13,12,13,398,9,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,13,1,13,1,13,1,13,1,13,5,13,422,8,13,10,13,12,13,425,9,
        13,1,13,1,13,1,13,3,13,430,8,13,1,13,3,13,433,8,13,1,14,1,14,1,14,
        1,14,1,14,3,14,440,8,14,1,14,3,14,443,8,14,1,14,5,14,446,8,14,10,
        14,12,14,449,9,14,1,14,1,14,3,14,453,8,14,1,14,1,14,1,14,3,14,458,
        8,14,1,14,3,14,461,8,14,1,14,3,14,464,8,14,5,14,466,8,14,10,14,12,
        14,469,9,14,1,15,1,15,3,15,473,8,15,1,15,1,15,1,15,3,15,478,8,15,
        1,15,1,15,1,15,1,15,1,15,3,15,485,8,15,1,16,1,16,3,16,489,8,16,1,
        16,1,16,1,16,3,16,494,8,16,1,16,1,16,1,16,3,16,499,8,16,1,16,1,16,
        1,16,3,16,504,8,16,1,16,1,16,1,16,3,16,509,8,16,1,16,1,16,1,16,3,
        16,514,8,16,1,16,1,16,1,16,3,16,519,8,16,1,16,3,16,522,8,16,1,17,
        1,17,1,17,1,17,1,17,3,17,529,8,17,1,17,1,17,1,17,3,17,534,8,17,1,
        17,1,17,1,17,3,17,539,8,17,1,17,1,17,1,17,1,17,3,17,545,8,17,1,17,
        1,17,3,17,549,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,5,19,564,8,19,10,19,12,19,567,9,19,1,19,1,19,
        1,19,3,19,572,8,19,1,20,1,20,3,20,576,8,20,1,20,1,20,1,20,3,20,581,
        8,20,1,20,3,20,584,8,20,1,21,1,21,1,21,3,21,589,8,21,1,21,1,21,1,
        21,3,21,594,8,21,1,21,1,21,1,21,3,21,599,8,21,1,21,1,21,3,21,603,
        8,21,1,21,1,21,1,21,1,21,3,21,609,8,21,1,21,1,21,3,21,613,8,21,1,
        21,1,21,3,21,617,8,21,1,21,3,21,620,8,21,3,21,622,8,21,1,21,1,21,
        3,21,626,8,21,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,
        3,23,638,8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,648,8,
        23,1,23,1,23,1,23,3,23,653,8,23,1,23,1,23,1,23,3,23,658,8,23,1,23,
        1,23,1,23,1,23,1,23,3,23,665,8,23,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,3,24,676,8,24,1,24,3,24,679,8,24,1,25,1,25,1,25,1,
        25,3,25,685,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,
        25,696,8,25,1,25,1,25,1,25,1,25,3,25,702,8,25,1,25,1,25,3,25,706,
        8,25,1,25,1,25,1,25,3,25,711,8,25,1,25,1,25,1,25,3,25,716,8,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,725,8,25,1,25,3,25,728,8,25,
        1,25,3,25,731,8,25,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,3,26,743,8,26,1,26,1,26,1,26,1,26,1,26,3,26,750,8,26,1,27,1,
        27,1,27,1,27,3,27,756,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,
        27,1,27,1,27,3,27,768,8,27,1,27,1,27,1,27,3,27,773,8,27,1,27,1,27,
        1,27,3,27,778,8,27,1,27,1,27,1,27,3,27,783,8,27,1,27,1,27,1,27,3,
        27,788,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,3,27,797,8,27,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,824,
        8,30,1,30,1,30,1,30,3,30,829,8,30,1,30,1,30,1,30,1,30,3,30,835,8,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,3,30,845,8,30,1,30,3,
        30,848,8,30,1,30,1,30,1,30,3,30,853,8,30,1,31,1,31,1,31,3,31,858,
        8,31,1,31,1,31,3,31,862,8,31,1,32,1,32,1,32,1,32,1,33,1,33,1,33,
        1,33,1,33,1,33,3,33,874,8,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,
        1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,3,38,898,8,38,1,39,1,39,1,39,1,40,1,40,1,40,3,40,906,8,
        40,1,40,1,40,1,40,1,40,1,40,3,40,913,8,40,1,40,3,40,916,8,40,1,40,
        3,40,919,8,40,1,40,1,40,1,40,3,40,924,8,40,1,40,1,40,1,40,3,40,929,
        8,40,1,40,1,40,1,40,3,40,934,8,40,1,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,3,40,944,8,40,1,40,1,40,1,40,3,40,949,8,40,1,40,1,40,1,
        40,3,40,954,8,40,1,40,1,40,3,40,958,8,40,1,40,1,40,1,40,1,40,1,40,
        1,40,1,40,3,40,967,8,40,1,40,3,40,970,8,40,1,40,1,40,1,40,1,40,1,
        40,3,40,977,8,40,1,40,3,40,980,8,40,1,40,3,40,983,8,40,1,40,3,40,
        986,8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,
        998,8,41,1,41,1,41,1,41,1,41,1,41,3,41,1005,8,41,1,41,1,41,1,41,
        1,41,1,41,3,41,1012,8,41,1,42,1,42,1,42,3,42,1017,8,42,1,42,1,42,
        1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,3,42,1029,8,42,1,42,1,42,
        1,42,3,42,1034,8,42,1,42,1,42,1,42,3,42,1039,8,42,1,42,1,42,1,42,
        1,42,1,42,3,42,1046,8,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
        1,43,3,43,1057,8,43,1,44,1,44,1,44,3,44,1062,8,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,3,44,1076,8,44,1,44,
        1,44,1,44,3,44,1081,8,44,1,44,1,44,1,44,3,44,1086,8,44,1,44,1,44,
        1,44,1,44,1,44,3,44,1093,8,44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,3,46,1110,8,46,1,46,1,46,
        1,46,3,46,1115,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1124,
        8,46,1,46,1,46,1,46,3,46,1129,8,46,1,46,1,46,1,46,3,46,1134,8,46,
        1,46,1,46,1,46,3,46,1139,8,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,
        3,46,1148,8,46,1,46,3,46,1151,8,46,1,46,1,46,1,46,1,46,1,46,1,46,
        3,46,1159,8,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,47,3,47,1174,8,47,1,48,1,48,1,48,1,48,1,49,1,49,1,49,
        5,49,1183,8,49,10,49,12,49,1186,9,49,1,50,1,50,1,50,5,50,1191,8,
        50,10,50,12,50,1194,9,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,3,51,1208,8,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1224,8,51,1,51,3,51,
        1227,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,3,51,1246,8,51,1,51,1,51,1,51,3,51,
        1251,8,51,1,51,3,51,1254,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        3,51,1263,8,51,1,51,1,51,3,51,1267,8,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,3,51,1278,8,51,1,51,1,51,3,51,1282,8,51,1,51,
        1,51,3,51,1286,8,51,1,51,3,51,1289,8,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,3,51,1302,8,51,1,51,3,51,1305,8,51,
        1,51,1,51,1,51,1,51,1,51,3,51,1312,8,51,1,51,3,51,1315,8,51,1,51,
        1,51,1,51,1,51,1,51,3,51,1322,8,51,1,51,1,51,1,51,3,51,1327,8,51,
        1,51,3,51,1330,8,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,1350,8,51,1,51,
        1,51,1,51,1,51,1,51,1,51,5,51,1358,8,51,10,51,12,51,1361,9,51,1,
        52,1,52,1,53,1,53,1,54,1,54,1,55,1,55,1,56,1,56,1,56,5,56,1374,8,
        56,10,56,12,56,1377,9,56,1,56,3,56,1380,8,56,3,56,1382,8,56,1,56,
        1,56,5,56,1386,8,56,10,56,12,56,1389,9,56,1,56,1,56,1,57,1,57,1,
        57,1,57,1,58,1,58,1,58,1,58,1,58,1,58,3,58,1403,8,58,1,59,1,59,1,
        59,3,59,1408,8,59,1,60,1,60,1,60,3,60,1413,8,60,1,61,1,61,1,61,1,
        61,1,61,1,61,1,61,3,61,1422,8,61,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,5,62,1484,8,62,10,62,12,62,1487,9,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,5,62,1501,8,62,10,62,12,
        62,1504,9,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,
        62,3,62,1543,8,62,1,63,1,63,1,63,1,63,1,63,1,64,1,64,1,64,1,64,1,
        64,1,64,1,65,1,65,1,65,3,65,1559,8,65,1,66,1,66,3,66,1563,8,66,1,
        66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1575,8,66,1,
        66,1,66,1,67,1,67,5,67,1581,8,67,10,67,12,67,1584,9,67,1,67,1,67,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1598,8,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        3,68,1613,8,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,3,68,1643,8,68,1,69,1,69,1,69,1,69,1,69,
        5,69,1650,8,69,10,69,12,69,1653,9,69,1,69,5,69,1656,8,69,10,69,12,
        69,1659,9,69,1,69,5,69,1662,8,69,10,69,12,69,1665,9,69,3,69,1667,
        8,69,1,69,1,69,1,69,1,69,1,69,5,69,1674,8,69,10,69,12,69,1677,9,
        69,1,69,1,69,1,69,1,69,1,70,1,70,1,70,1,70,1,70,5,70,1688,8,70,10,
        70,12,70,1691,9,70,1,70,5,70,1694,8,70,10,70,12,70,1697,9,70,1,70,
        5,70,1700,8,70,10,70,12,70,1703,9,70,3,70,1705,8,70,1,70,1,70,1,
        70,1,70,1,70,5,70,1712,8,70,10,70,12,70,1715,9,70,1,70,1,70,1,70,
        1,70,1,71,1,71,1,71,1,71,1,71,5,71,1726,8,71,10,71,12,71,1729,9,
        71,1,71,5,71,1732,8,71,10,71,12,71,1735,9,71,1,71,5,71,1738,8,71,
        10,71,12,71,1741,9,71,3,71,1743,8,71,1,71,1,71,1,71,1,71,1,71,5,
        71,1750,8,71,10,71,12,71,1753,9,71,1,71,1,71,1,71,1,71,1,72,1,72,
        1,72,1,72,1,72,5,72,1764,8,72,10,72,12,72,1767,9,72,1,72,5,72,1770,
        8,72,10,72,12,72,1773,9,72,1,72,5,72,1776,8,72,10,72,12,72,1779,
        9,72,3,72,1781,8,72,1,72,1,72,1,72,1,72,1,72,5,72,1788,8,72,10,72,
        12,72,1791,9,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,1,73,5,73,
        1802,8,73,10,73,12,73,1805,9,73,1,73,5,73,1808,8,73,10,73,12,73,
        1811,9,73,1,73,5,73,1814,8,73,10,73,12,73,1817,9,73,3,73,1819,8,
        73,1,73,1,73,1,73,1,73,1,73,5,73,1826,8,73,10,73,12,73,1829,9,73,
        1,73,1,73,1,73,1,73,1,73,3,358,396,423,1,102,74,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,
        134,136,138,140,142,144,146,0,11,2,0,49,49,85,85,1,0,154,155,2,0,
        147,147,156,156,3,0,147,147,149,149,166,166,2,0,147,147,149,149,
        1,0,122,123,1,0,193,197,1,0,232,238,2,0,128,128,147,147,2,0,49,49,
        133,133,2,0,26,26,136,136,2200,0,181,1,0,0,0,2,186,1,0,0,0,4,196,
        1,0,0,0,6,208,1,0,0,0,8,220,1,0,0,0,10,231,1,0,0,0,12,240,1,0,0,
        0,14,249,1,0,0,0,16,258,1,0,0,0,18,267,1,0,0,0,20,276,1,0,0,0,22,
        285,1,0,0,0,24,294,1,0,0,0,26,432,1,0,0,0,28,434,1,0,0,0,30,484,
        1,0,0,0,32,521,1,0,0,0,34,548,1,0,0,0,36,550,1,0,0,0,38,571,1,0,
        0,0,40,583,1,0,0,0,42,625,1,0,0,0,44,627,1,0,0,0,46,664,1,0,0,0,
        48,666,1,0,0,0,50,730,1,0,0,0,52,732,1,0,0,0,54,796,1,0,0,0,56,798,
        1,0,0,0,58,807,1,0,0,0,60,852,1,0,0,0,62,854,1,0,0,0,64,863,1,0,
        0,0,66,867,1,0,0,0,68,877,1,0,0,0,70,880,1,0,0,0,72,883,1,0,0,0,
        74,886,1,0,0,0,76,889,1,0,0,0,78,899,1,0,0,0,80,985,1,0,0,0,82,987,
        1,0,0,0,84,1045,1,0,0,0,86,1047,1,0,0,0,88,1092,1,0,0,0,90,1094,
        1,0,0,0,92,1158,1,0,0,0,94,1160,1,0,0,0,96,1175,1,0,0,0,98,1179,
        1,0,0,0,100,1187,1,0,0,0,102,1349,1,0,0,0,104,1362,1,0,0,0,106,1364,
        1,0,0,0,108,1366,1,0,0,0,110,1368,1,0,0,0,112,1370,1,0,0,0,114,1392,
        1,0,0,0,116,1402,1,0,0,0,118,1404,1,0,0,0,120,1409,1,0,0,0,122,1421,
        1,0,0,0,124,1542,1,0,0,0,126,1544,1,0,0,0,128,1549,1,0,0,0,130,1555,
        1,0,0,0,132,1560,1,0,0,0,134,1578,1,0,0,0,136,1642,1,0,0,0,138,1644,
        1,0,0,0,140,1682,1,0,0,0,142,1720,1,0,0,0,144,1758,1,0,0,0,146,1796,
        1,0,0,0,148,180,3,2,1,0,149,180,3,4,2,0,150,180,3,6,3,0,151,180,
        3,8,4,0,152,180,3,10,5,0,153,180,3,12,6,0,154,180,3,14,7,0,155,180,
        3,16,8,0,156,180,3,18,9,0,157,180,3,20,10,0,158,180,3,22,11,0,159,
        180,3,24,12,0,160,180,3,112,56,0,161,180,3,114,57,0,162,180,3,128,
        64,0,163,180,3,132,66,0,164,180,3,134,67,0,165,180,3,138,69,0,166,
        180,3,140,70,0,167,180,3,142,71,0,168,180,3,144,72,0,169,180,3,146,
        73,0,170,180,3,28,14,0,171,180,3,36,18,0,172,180,3,48,24,0,173,180,
        3,38,19,0,174,180,3,44,22,0,175,180,3,52,26,0,176,180,3,56,28,0,
        177,180,3,62,31,0,178,180,3,136,68,0,179,148,1,0,0,0,179,149,1,0,
        0,0,179,150,1,0,0,0,179,151,1,0,0,0,179,152,1,0,0,0,179,153,1,0,
        0,0,179,154,1,0,0,0,179,155,1,0,0,0,179,156,1,0,0,0,179,157,1,0,
        0,0,179,158,1,0,0,0,179,159,1,0,0,0,179,160,1,0,0,0,179,161,1,0,
        0,0,179,162,1,0,0,0,179,163,1,0,0,0,179,164,1,0,0,0,179,165,1,0,
        0,0,179,166,1,0,0,0,179,167,1,0,0,0,179,168,1,0,0,0,179,169,1,0,
        0,0,179,170,1,0,0,0,179,171,1,0,0,0,179,172,1,0,0,0,179,173,1,0,
        0,0,179,174,1,0,0,0,179,175,1,0,0,0,179,176,1,0,0,0,179,177,1,0,
        0,0,179,178,1,0,0,0,180,183,1,0,0,0,181,179,1,0,0,0,181,182,1,0,
        0,0,182,184,1,0,0,0,183,181,1,0,0,0,184,185,5,0,0,1,185,1,1,0,0,
        0,186,190,5,3,0,0,187,189,3,26,13,0,188,187,1,0,0,0,189,192,1,0,
        0,0,190,188,1,0,0,0,190,191,1,0,0,0,191,193,1,0,0,0,192,190,1,0,
        0,0,193,194,5,2,0,0,194,3,1,0,0,0,195,197,5,48,0,0,196,195,1,0,0,
        0,196,197,1,0,0,0,197,198,1,0,0,0,198,202,5,49,0,0,199,201,3,34,
        17,0,200,199,1,0,0,0,201,204,1,0,0,0,202,200,1,0,0,0,202,203,1,0,
        0,0,203,205,1,0,0,0,204,202,1,0,0,0,205,206,5,2,0,0,206,5,1,0,0,
        0,207,209,5,48,0,0,208,207,1,0,0,0,208,209,1,0,0,0,209,210,1,0,0,
        0,210,214,5,52,0,0,211,213,3,38,19,0,212,211,1,0,0,0,213,216,1,0,
        0,0,214,212,1,0,0,0,214,215,1,0,0,0,215,217,1,0,0,0,216,214,1,0,
        0,0,217,218,5,2,0,0,218,7,1,0,0,0,219,221,5,48,0,0,220,219,1,0,0,
        0,220,221,1,0,0,0,221,222,1,0,0,0,222,226,5,56,0,0,223,225,3,42,
        21,0,224,223,1,0,0,0,225,228,1,0,0,0,226,224,1,0,0,0,226,227,1,0,
        0,0,227,229,1,0,0,0,228,226,1,0,0,0,229,230,5,2,0,0,230,9,1,0,0,
        0,231,235,5,59,0,0,232,234,3,46,23,0,233,232,1,0,0,0,234,237,1,0,
        0,0,235,233,1,0,0,0,235,236,1,0,0,0,236,238,1,0,0,0,237,235,1,0,
        0,0,238,239,5,2,0,0,239,11,1,0,0,0,240,244,5,62,0,0,241,243,3,50,
        25,0,242,241,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,245,1,0,
        0,0,245,247,1,0,0,0,246,244,1,0,0,0,247,248,5,2,0,0,248,13,1,0,0,
        0,249,253,5,63,0,0,250,252,3,54,27,0,251,250,1,0,0,0,252,255,1,0,
        0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,253,1,0,
        0,0,256,257,5,2,0,0,257,15,1,0,0,0,258,262,5,69,0,0,259,261,3,60,
        30,0,260,259,1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,
        0,0,263,265,1,0,0,0,264,262,1,0,0,0,265,266,5,2,0,0,266,17,1,0,0,
        0,267,271,5,78,0,0,268,270,3,80,40,0,269,268,1,0,0,0,270,273,1,0,
        0,0,271,269,1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,271,1,0,
        0,0,274,275,5,2,0,0,275,19,1,0,0,0,276,280,5,83,0,0,277,279,3,84,
        42,0,278,277,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,1,0,
        0,0,281,283,1,0,0,0,282,280,1,0,0,0,283,284,5,2,0,0,284,21,1,0,0,
        0,285,289,5,84,0,0,286,288,3,88,44,0,287,286,1,0,0,0,288,291,1,0,
        0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,292,1,0,0,0,291,289,1,0,
        0,0,292,293,5,2,0,0,293,23,1,0,0,0,294,298,5,85,0,0,295,297,3,92,
        46,0,296,295,1,0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,
        0,0,299,301,1,0,0,0,300,298,1,0,0,0,301,302,5,2,0,0,302,25,1,0,0,
        0,303,305,5,4,0,0,304,306,5,160,0,0,305,304,1,0,0,0,305,306,1,0,
        0,0,306,307,1,0,0,0,307,433,5,183,0,0,308,433,3,28,14,0,309,433,
        3,138,69,0,310,311,5,6,0,0,311,312,5,154,0,0,312,433,3,108,54,0,
        313,314,5,7,0,0,314,315,5,177,0,0,315,433,5,176,0,0,316,317,5,8,
        0,0,317,318,5,154,0,0,318,433,3,108,54,0,319,321,5,9,0,0,320,322,
        5,160,0,0,321,320,1,0,0,0,321,322,1,0,0,0,322,323,1,0,0,0,323,433,
        3,108,54,0,324,326,5,10,0,0,325,327,5,160,0,0,326,325,1,0,0,0,326,
        327,1,0,0,0,327,328,1,0,0,0,328,433,5,154,0,0,329,330,5,11,0,0,330,
        433,5,154,0,0,331,333,5,12,0,0,332,334,5,160,0,0,333,332,1,0,0,0,
        333,334,1,0,0,0,334,335,1,0,0,0,335,433,5,147,0,0,336,337,5,13,0,
        0,337,433,5,35,0,0,338,339,5,13,0,0,339,340,5,36,0,0,340,342,5,37,
        0,0,341,343,5,160,0,0,342,341,1,0,0,0,342,343,1,0,0,0,343,344,1,
        0,0,0,344,345,3,108,54,0,345,347,5,38,0,0,346,348,5,160,0,0,347,
        346,1,0,0,0,347,348,1,0,0,0,348,349,1,0,0,0,349,350,3,108,54,0,350,
        433,1,0,0,0,351,352,5,14,0,0,352,353,5,154,0,0,353,354,5,154,0,0,
        354,433,3,108,54,0,355,357,5,15,0,0,356,355,1,0,0,0,357,360,1,0,
        0,0,358,359,1,0,0,0,358,356,1,0,0,0,359,361,1,0,0,0,360,358,1,0,
        0,0,361,433,5,2,0,0,362,363,5,16,0,0,363,364,5,154,0,0,364,433,5,
        147,0,0,365,366,5,17,0,0,366,367,5,154,0,0,367,433,5,147,0,0,368,
        370,5,18,0,0,369,371,5,160,0,0,370,369,1,0,0,0,370,371,1,0,0,0,371,
        372,1,0,0,0,372,433,5,147,0,0,373,433,5,19,0,0,374,376,5,20,0,0,
        375,377,5,160,0,0,376,375,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,
        0,378,433,5,147,0,0,379,380,5,21,0,0,380,381,5,181,0,0,381,433,5,
        180,0,0,382,383,5,22,0,0,383,384,3,30,15,0,384,385,5,2,0,0,385,433,
        1,0,0,0,386,387,5,23,0,0,387,389,5,25,0,0,388,390,5,160,0,0,389,
        388,1,0,0,0,389,390,1,0,0,0,390,391,1,0,0,0,391,433,3,108,54,0,392,
        396,5,24,0,0,393,395,5,154,0,0,394,393,1,0,0,0,395,398,1,0,0,0,396,
        397,1,0,0,0,396,394,1,0,0,0,397,399,1,0,0,0,398,396,1,0,0,0,399,
        433,5,2,0,0,400,433,5,26,0,0,401,402,5,27,0,0,402,403,5,154,0,0,
        403,433,3,108,54,0,404,405,5,28,0,0,405,406,5,154,0,0,406,433,3,
        108,54,0,407,408,5,29,0,0,408,409,5,154,0,0,409,433,3,108,54,0,410,
        411,5,30,0,0,411,412,5,154,0,0,412,433,3,108,54,0,413,414,5,31,0,
        0,414,415,5,154,0,0,415,433,3,108,54,0,416,417,5,32,0,0,417,418,
        5,154,0,0,418,433,3,108,54,0,419,423,5,33,0,0,420,422,5,154,0,0,
        421,420,1,0,0,0,422,425,1,0,0,0,423,424,1,0,0,0,423,421,1,0,0,0,
        424,426,1,0,0,0,425,423,1,0,0,0,426,433,5,2,0,0,427,429,5,34,0,0,
        428,430,5,160,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,1,0,0,
        0,431,433,3,108,54,0,432,303,1,0,0,0,432,308,1,0,0,0,432,309,1,0,
        0,0,432,310,1,0,0,0,432,313,1,0,0,0,432,316,1,0,0,0,432,319,1,0,
        0,0,432,324,1,0,0,0,432,329,1,0,0,0,432,331,1,0,0,0,432,336,1,0,
        0,0,432,338,1,0,0,0,432,351,1,0,0,0,432,358,1,0,0,0,432,362,1,0,
        0,0,432,365,1,0,0,0,432,368,1,0,0,0,432,373,1,0,0,0,432,374,1,0,
        0,0,432,379,1,0,0,0,432,382,1,0,0,0,432,386,1,0,0,0,432,392,1,0,
        0,0,432,400,1,0,0,0,432,401,1,0,0,0,432,404,1,0,0,0,432,407,1,0,
        0,0,432,410,1,0,0,0,432,413,1,0,0,0,432,416,1,0,0,0,432,419,1,0,
        0,0,432,427,1,0,0,0,433,27,1,0,0,0,434,435,5,5,0,0,435,436,3,96,
        48,0,436,437,3,96,48,0,437,439,3,104,52,0,438,440,3,104,52,0,439,
        438,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,443,3,104,52,0,442,
        441,1,0,0,0,442,443,1,0,0,0,443,447,1,0,0,0,444,446,3,32,16,0,445,
        444,1,0,0,0,446,449,1,0,0,0,447,445,1,0,0,0,447,448,1,0,0,0,448,
        467,1,0,0,0,449,447,1,0,0,0,450,452,5,142,0,0,451,453,5,5,0,0,452,
        451,1,0,0,0,452,453,1,0,0,0,453,454,1,0,0,0,454,455,3,96,48,0,455,
        457,3,96,48,0,456,458,3,104,52,0,457,456,1,0,0,0,457,458,1,0,0,0,
        458,460,1,0,0,0,459,461,3,104,52,0,460,459,1,0,0,0,460,461,1,0,0,
        0,461,463,1,0,0,0,462,464,3,104,52,0,463,462,1,0,0,0,463,464,1,0,
        0,0,464,466,1,0,0,0,465,450,1,0,0,0,466,469,1,0,0,0,467,465,1,0,
        0,0,467,468,1,0,0,0,468,29,1,0,0,0,469,467,1,0,0,0,470,472,5,39,
        0,0,471,473,5,160,0,0,472,471,1,0,0,0,472,473,1,0,0,0,473,474,1,
        0,0,0,474,485,3,108,54,0,475,477,5,40,0,0,476,478,5,160,0,0,477,
        476,1,0,0,0,477,478,1,0,0,0,478,479,1,0,0,0,479,485,3,108,54,0,480,
        481,5,41,0,0,481,485,3,96,48,0,482,483,5,42,0,0,483,485,3,96,48,
        0,484,470,1,0,0,0,484,475,1,0,0,0,484,480,1,0,0,0,484,482,1,0,0,
        0,485,31,1,0,0,0,486,488,5,43,0,0,487,489,5,160,0,0,488,487,1,0,
        0,0,488,489,1,0,0,0,489,490,1,0,0,0,490,522,3,110,55,0,491,493,5,
        44,0,0,492,494,5,160,0,0,493,492,1,0,0,0,493,494,1,0,0,0,494,495,
        1,0,0,0,495,522,3,110,55,0,496,498,5,55,0,0,497,499,5,160,0,0,498,
        497,1,0,0,0,498,499,1,0,0,0,499,500,1,0,0,0,500,522,3,110,55,0,501,
        503,5,45,0,0,502,504,5,160,0,0,503,502,1,0,0,0,503,504,1,0,0,0,504,
        505,1,0,0,0,505,522,3,110,55,0,506,508,5,46,0,0,507,509,5,160,0,
        0,508,507,1,0,0,0,508,509,1,0,0,0,509,510,1,0,0,0,510,522,3,110,
        55,0,511,513,5,47,0,0,512,514,5,160,0,0,513,512,1,0,0,0,513,514,
        1,0,0,0,514,515,1,0,0,0,515,522,3,110,55,0,516,518,5,12,0,0,517,
        519,5,160,0,0,518,517,1,0,0,0,518,519,1,0,0,0,519,520,1,0,0,0,520,
        522,3,110,55,0,521,486,1,0,0,0,521,491,1,0,0,0,521,496,1,0,0,0,521,
        501,1,0,0,0,521,506,1,0,0,0,521,511,1,0,0,0,521,516,1,0,0,0,522,
        33,1,0,0,0,523,549,3,114,57,0,524,549,3,36,18,0,525,549,3,140,70,
        0,526,528,5,12,0,0,527,529,5,160,0,0,528,527,1,0,0,0,528,529,1,0,
        0,0,529,530,1,0,0,0,530,549,5,147,0,0,531,533,5,50,0,0,532,534,5,
        160,0,0,533,532,1,0,0,0,533,534,1,0,0,0,534,535,1,0,0,0,535,549,
        5,147,0,0,536,538,5,20,0,0,537,539,5,160,0,0,538,537,1,0,0,0,538,
        539,1,0,0,0,539,540,1,0,0,0,540,549,5,147,0,0,541,549,5,26,0,0,542,
        544,5,28,0,0,543,545,5,160,0,0,544,543,1,0,0,0,544,545,1,0,0,0,545,
        546,1,0,0,0,546,549,3,108,54,0,547,549,5,51,0,0,548,523,1,0,0,0,
        548,524,1,0,0,0,548,525,1,0,0,0,548,526,1,0,0,0,548,531,1,0,0,0,
        548,536,1,0,0,0,548,541,1,0,0,0,548,542,1,0,0,0,548,547,1,0,0,0,
        549,35,1,0,0,0,550,551,5,5,0,0,551,552,3,96,48,0,552,553,3,96,48,
        0,553,554,3,96,48,0,554,555,3,96,48,0,555,556,3,104,52,0,556,557,
        3,104,52,0,557,558,3,104,52,0,558,559,5,147,0,0,559,37,1,0,0,0,560,
        572,3,114,57,0,561,565,5,53,0,0,562,564,3,40,20,0,563,562,1,0,0,
        0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,0,0,566,568,1,0,0,
        0,567,565,1,0,0,0,568,572,5,2,0,0,569,572,5,35,0,0,570,572,5,51,
        0,0,571,560,1,0,0,0,571,561,1,0,0,0,571,569,1,0,0,0,571,570,1,0,
        0,0,572,39,1,0,0,0,573,575,5,54,0,0,574,576,5,160,0,0,575,574,1,
        0,0,0,575,576,1,0,0,0,576,577,1,0,0,0,577,584,3,96,48,0,578,580,
        5,55,0,0,579,581,5,160,0,0,580,579,1,0,0,0,580,581,1,0,0,0,581,582,
        1,0,0,0,582,584,3,108,54,0,583,573,1,0,0,0,583,578,1,0,0,0,584,41,
        1,0,0,0,585,626,3,114,57,0,586,588,5,57,0,0,587,589,5,160,0,0,588,
        587,1,0,0,0,588,589,1,0,0,0,589,590,1,0,0,0,590,626,5,147,0,0,591,
        593,5,58,0,0,592,594,5,160,0,0,593,592,1,0,0,0,593,594,1,0,0,0,594,
        595,1,0,0,0,595,621,5,157,0,0,596,598,3,108,54,0,597,599,5,145,0,
        0,598,597,1,0,0,0,598,599,1,0,0,0,599,600,1,0,0,0,600,602,3,108,
        54,0,601,603,5,145,0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,604,1,
        0,0,0,604,605,3,108,54,0,605,622,1,0,0,0,606,608,5,140,0,0,607,609,
        5,160,0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,610,1,0,0,0,610,612,
        3,96,48,0,611,613,5,145,0,0,612,611,1,0,0,0,612,613,1,0,0,0,613,
        619,1,0,0,0,614,616,5,141,0,0,615,617,5,160,0,0,616,615,1,0,0,0,
        616,617,1,0,0,0,617,618,1,0,0,0,618,620,3,96,48,0,619,614,1,0,0,
        0,619,620,1,0,0,0,620,622,1,0,0,0,621,596,1,0,0,0,621,606,1,0,0,
        0,622,623,1,0,0,0,623,624,5,158,0,0,624,626,1,0,0,0,625,585,1,0,
        0,0,625,586,1,0,0,0,625,591,1,0,0,0,626,43,1,0,0,0,627,628,5,5,0,
        0,628,629,3,96,48,0,629,630,3,104,52,0,630,631,3,104,52,0,631,632,
        3,104,52,0,632,45,1,0,0,0,633,665,3,48,24,0,634,665,3,142,71,0,635,
        637,5,10,0,0,636,638,5,160,0,0,637,636,1,0,0,0,637,638,1,0,0,0,638,
        639,1,0,0,0,639,665,5,154,0,0,640,641,5,60,0,0,641,642,3,108,54,
        0,642,643,3,108,54,0,643,644,3,108,54,0,644,665,1,0,0,0,645,647,
        5,61,0,0,646,648,5,160,0,0,647,646,1,0,0,0,647,648,1,0,0,0,648,649,
        1,0,0,0,649,665,3,108,54,0,650,652,5,18,0,0,651,653,5,160,0,0,652,
        651,1,0,0,0,652,653,1,0,0,0,653,654,1,0,0,0,654,665,5,147,0,0,655,
        657,5,21,0,0,656,658,5,179,0,0,657,656,1,0,0,0,657,658,1,0,0,0,658,
        659,1,0,0,0,659,665,5,180,0,0,660,661,5,23,0,0,661,662,5,25,0,0,
        662,665,3,108,54,0,663,665,5,26,0,0,664,633,1,0,0,0,664,634,1,0,
        0,0,664,635,1,0,0,0,664,640,1,0,0,0,664,645,1,0,0,0,664,650,1,0,
        0,0,664,655,1,0,0,0,664,660,1,0,0,0,664,663,1,0,0,0,665,47,1,0,0,
        0,666,667,5,5,0,0,667,668,3,96,48,0,668,669,3,96,48,0,669,670,3,
        96,48,0,670,671,3,96,48,0,671,672,3,96,48,0,672,673,3,96,48,0,673,
        675,3,104,52,0,674,676,3,104,52,0,675,674,1,0,0,0,675,676,1,0,0,
        0,676,678,1,0,0,0,677,679,3,104,52,0,678,677,1,0,0,0,678,679,1,0,
        0,0,679,49,1,0,0,0,680,731,3,52,26,0,681,731,3,144,72,0,682,684,
        5,10,0,0,683,685,5,160,0,0,684,683,1,0,0,0,684,685,1,0,0,0,685,686,
        1,0,0,0,686,731,5,154,0,0,687,688,5,60,0,0,688,689,3,108,54,0,689,
        690,3,108,54,0,690,691,3,108,54,0,691,692,3,108,54,0,692,731,1,0,
        0,0,693,695,5,12,0,0,694,696,5,160,0,0,695,694,1,0,0,0,695,696,1,
        0,0,0,696,697,1,0,0,0,697,731,5,147,0,0,698,699,5,61,0,0,699,701,
        3,108,54,0,700,702,3,108,54,0,701,700,1,0,0,0,701,702,1,0,0,0,702,
        731,1,0,0,0,703,705,5,18,0,0,704,706,5,160,0,0,705,704,1,0,0,0,705,
        706,1,0,0,0,706,707,1,0,0,0,707,731,5,147,0,0,708,710,5,20,0,0,709,
        711,5,160,0,0,710,709,1,0,0,0,710,711,1,0,0,0,711,712,1,0,0,0,712,
        731,5,147,0,0,713,715,5,21,0,0,714,716,5,179,0,0,715,714,1,0,0,0,
        715,716,1,0,0,0,716,717,1,0,0,0,717,731,5,180,0,0,718,719,5,23,0,
        0,719,720,5,25,0,0,720,727,3,108,54,0,721,728,5,88,0,0,722,724,5,
        10,0,0,723,725,5,160,0,0,724,723,1,0,0,0,724,725,1,0,0,0,725,726,
        1,0,0,0,726,728,5,154,0,0,727,721,1,0,0,0,727,722,1,0,0,0,728,731,
        1,0,0,0,729,731,5,26,0,0,730,680,1,0,0,0,730,681,1,0,0,0,730,682,
        1,0,0,0,730,687,1,0,0,0,730,693,1,0,0,0,730,698,1,0,0,0,730,703,
        1,0,0,0,730,708,1,0,0,0,730,713,1,0,0,0,730,718,1,0,0,0,730,729,
        1,0,0,0,731,51,1,0,0,0,732,733,5,5,0,0,733,734,3,96,48,0,734,735,
        3,96,48,0,735,736,3,96,48,0,736,742,3,96,48,0,737,738,3,96,48,0,
        738,739,3,96,48,0,739,740,3,96,48,0,740,741,3,96,48,0,741,743,1,
        0,0,0,742,737,1,0,0,0,742,743,1,0,0,0,743,744,1,0,0,0,744,745,3,
        104,52,0,745,749,3,104,52,0,746,747,3,104,52,0,747,748,3,104,52,
        0,748,750,1,0,0,0,749,746,1,0,0,0,749,750,1,0,0,0,750,53,1,0,0,0,
        751,797,3,56,28,0,752,797,3,146,73,0,753,755,5,10,0,0,754,756,5,
        160,0,0,755,754,1,0,0,0,755,756,1,0,0,0,756,757,1,0,0,0,757,797,
        5,154,0,0,758,759,5,64,0,0,759,760,5,147,0,0,760,761,5,147,0,0,761,
        762,3,108,54,0,762,763,3,108,54,0,763,764,3,108,54,0,764,797,1,0,
        0,0,765,767,5,61,0,0,766,768,5,160,0,0,767,766,1,0,0,0,767,768,1,
        0,0,0,768,769,1,0,0,0,769,797,3,108,54,0,770,772,5,18,0,0,771,773,
        5,160,0,0,772,771,1,0,0,0,772,773,1,0,0,0,773,774,1,0,0,0,774,797,
        5,147,0,0,775,777,5,65,0,0,776,778,5,160,0,0,777,776,1,0,0,0,777,
        778,1,0,0,0,778,779,1,0,0,0,779,797,3,108,54,0,780,782,5,66,0,0,
        781,783,5,160,0,0,782,781,1,0,0,0,782,783,1,0,0,0,783,784,1,0,0,
        0,784,797,3,108,54,0,785,787,5,21,0,0,786,788,5,179,0,0,787,786,
        1,0,0,0,787,788,1,0,0,0,788,789,1,0,0,0,789,797,5,180,0,0,790,791,
        5,23,0,0,791,792,5,25,0,0,792,797,3,108,54,0,793,797,3,58,29,0,794,
        797,5,26,0,0,795,797,5,68,0,0,796,751,1,0,0,0,796,752,1,0,0,0,796,
        753,1,0,0,0,796,758,1,0,0,0,796,765,1,0,0,0,796,770,1,0,0,0,796,
        775,1,0,0,0,796,780,1,0,0,0,796,785,1,0,0,0,796,790,1,0,0,0,796,
        793,1,0,0,0,796,794,1,0,0,0,796,795,1,0,0,0,797,55,1,0,0,0,798,799,
        5,5,0,0,799,800,3,96,48,0,800,801,3,96,48,0,801,802,3,96,48,0,802,
        803,3,96,48,0,803,804,3,96,48,0,804,805,3,104,52,0,805,806,3,104,
        52,0,806,57,1,0,0,0,807,808,5,67,0,0,808,809,3,96,48,0,809,810,3,
        104,52,0,810,811,3,104,52,0,811,59,1,0,0,0,812,853,3,62,31,0,813,
        853,3,64,32,0,814,853,3,66,33,0,815,853,3,68,34,0,816,853,3,70,35,
        0,817,853,3,72,36,0,818,853,3,74,37,0,819,853,3,76,38,0,820,853,
        3,78,39,0,821,823,5,10,0,0,822,824,5,160,0,0,823,822,1,0,0,0,823,
        824,1,0,0,0,824,825,1,0,0,0,825,853,5,154,0,0,826,828,5,77,0,0,827,
        829,5,160,0,0,828,827,1,0,0,0,828,829,1,0,0,0,829,830,1,0,0,0,830,
        853,3,108,54,0,831,832,5,61,0,0,832,834,3,108,54,0,833,835,3,108,
        54,0,834,833,1,0,0,0,834,835,1,0,0,0,835,853,1,0,0,0,836,837,5,21,
        0,0,837,853,5,180,0,0,838,839,5,23,0,0,839,840,5,25,0,0,840,847,
        3,108,54,0,841,848,5,88,0,0,842,844,5,10,0,0,843,845,5,160,0,0,844,
        843,1,0,0,0,844,845,1,0,0,0,845,846,1,0,0,0,846,848,5,154,0,0,847,
        841,1,0,0,0,847,842,1,0,0,0,848,849,1,0,0,0,849,850,5,154,0,0,850,
        853,1,0,0,0,851,853,5,26,0,0,852,812,1,0,0,0,852,813,1,0,0,0,852,
        814,1,0,0,0,852,815,1,0,0,0,852,816,1,0,0,0,852,817,1,0,0,0,852,
        818,1,0,0,0,852,819,1,0,0,0,852,820,1,0,0,0,852,821,1,0,0,0,852,
        826,1,0,0,0,852,831,1,0,0,0,852,836,1,0,0,0,852,838,1,0,0,0,852,
        851,1,0,0,0,853,61,1,0,0,0,854,855,5,70,0,0,855,857,3,96,48,0,856,
        858,3,96,48,0,857,856,1,0,0,0,857,858,1,0,0,0,858,859,1,0,0,0,859,
        861,3,104,52,0,860,862,3,104,52,0,861,860,1,0,0,0,861,862,1,0,0,
        0,862,63,1,0,0,0,863,864,5,67,0,0,864,865,3,96,48,0,865,866,3,104,
        52,0,866,65,1,0,0,0,867,868,5,71,0,0,868,869,3,96,48,0,869,870,3,
        96,48,0,870,871,3,96,48,0,871,873,5,154,0,0,872,874,5,148,0,0,873,
        872,1,0,0,0,873,874,1,0,0,0,874,875,1,0,0,0,875,876,5,154,0,0,876,
        67,1,0,0,0,877,878,5,72,0,0,878,879,3,96,48,0,879,69,1,0,0,0,880,
        881,5,63,0,0,881,882,3,96,48,0,882,71,1,0,0,0,883,884,5,73,0,0,884,
        885,3,96,48,0,885,73,1,0,0,0,886,887,5,74,0,0,887,888,3,96,48,0,
        888,75,1,0,0,0,889,890,5,75,0,0,890,891,5,154,0,0,891,892,3,96,48,
        0,892,893,3,96,48,0,893,894,3,96,48,0,894,895,3,96,48,0,895,897,
        3,96,48,0,896,898,3,96,48,0,897,896,1,0,0,0,897,898,1,0,0,0,898,
        77,1,0,0,0,899,900,5,76,0,0,900,901,3,96,48,0,901,79,1,0,0,0,902,
        986,3,82,41,0,903,905,5,10,0,0,904,906,5,160,0,0,905,904,1,0,0,0,
        905,906,1,0,0,0,906,907,1,0,0,0,907,986,5,154,0,0,908,986,5,79,0,
        0,909,910,5,64,0,0,910,912,5,147,0,0,911,913,5,147,0,0,912,911,1,
        0,0,0,912,913,1,0,0,0,913,915,1,0,0,0,914,916,5,147,0,0,915,914,
        1,0,0,0,915,916,1,0,0,0,916,918,1,0,0,0,917,919,5,147,0,0,918,917,
        1,0,0,0,918,919,1,0,0,0,919,920,1,0,0,0,920,986,3,108,54,0,921,923,
        5,77,0,0,922,924,5,160,0,0,923,922,1,0,0,0,923,924,1,0,0,0,924,925,
        1,0,0,0,925,986,3,108,54,0,926,928,5,61,0,0,927,929,5,160,0,0,928,
        927,1,0,0,0,928,929,1,0,0,0,929,930,1,0,0,0,930,986,3,108,54,0,931,
        933,5,18,0,0,932,934,5,160,0,0,933,932,1,0,0,0,933,934,1,0,0,0,934,
        935,1,0,0,0,935,986,5,147,0,0,936,937,5,80,0,0,937,938,5,147,0,0,
        938,939,5,147,0,0,939,943,5,147,0,0,940,941,5,147,0,0,941,942,5,
        147,0,0,942,944,5,147,0,0,943,940,1,0,0,0,943,944,1,0,0,0,944,948,
        1,0,0,0,945,946,5,147,0,0,946,947,5,147,0,0,947,949,5,147,0,0,948,
        945,1,0,0,0,948,949,1,0,0,0,949,953,1,0,0,0,950,951,5,147,0,0,951,
        952,5,147,0,0,952,954,5,147,0,0,953,950,1,0,0,0,953,954,1,0,0,0,
        954,986,1,0,0,0,955,957,5,21,0,0,956,958,5,179,0,0,957,956,1,0,0,
        0,957,958,1,0,0,0,958,959,1,0,0,0,959,986,5,180,0,0,960,961,5,23,
        0,0,961,962,5,25,0,0,962,969,3,108,54,0,963,970,5,88,0,0,964,966,
        5,10,0,0,965,967,5,160,0,0,966,965,1,0,0,0,966,967,1,0,0,0,967,968,
        1,0,0,0,968,970,5,154,0,0,969,963,1,0,0,0,969,964,1,0,0,0,970,986,
        1,0,0,0,971,986,5,26,0,0,972,973,5,81,0,0,973,974,5,82,0,0,974,976,
        5,147,0,0,975,977,5,147,0,0,976,975,1,0,0,0,976,977,1,0,0,0,977,
        979,1,0,0,0,978,980,5,147,0,0,979,978,1,0,0,0,979,980,1,0,0,0,980,
        982,1,0,0,0,981,983,5,147,0,0,982,981,1,0,0,0,982,983,1,0,0,0,983,
        986,1,0,0,0,984,986,5,68,0,0,985,902,1,0,0,0,985,903,1,0,0,0,985,
        908,1,0,0,0,985,909,1,0,0,0,985,921,1,0,0,0,985,926,1,0,0,0,985,
        931,1,0,0,0,985,936,1,0,0,0,985,955,1,0,0,0,985,960,1,0,0,0,985,
        971,1,0,0,0,985,972,1,0,0,0,985,984,1,0,0,0,986,81,1,0,0,0,987,988,
        5,5,0,0,988,989,3,96,48,0,989,990,3,96,48,0,990,991,3,96,48,0,991,
        997,3,96,48,0,992,993,3,96,48,0,993,994,3,96,48,0,994,995,3,96,48,
        0,995,996,3,96,48,0,996,998,1,0,0,0,997,992,1,0,0,0,997,998,1,0,
        0,0,998,1004,1,0,0,0,999,1000,3,96,48,0,1000,1001,3,96,48,0,1001,
        1002,3,96,48,0,1002,1003,3,96,48,0,1003,1005,1,0,0,0,1004,999,1,
        0,0,0,1004,1005,1,0,0,0,1005,1011,1,0,0,0,1006,1007,3,96,48,0,1007,
        1008,3,96,48,0,1008,1009,3,96,48,0,1009,1010,3,96,48,0,1010,1012,
        1,0,0,0,1011,1006,1,0,0,0,1011,1012,1,0,0,0,1012,83,1,0,0,0,1013,
        1046,3,86,43,0,1014,1016,5,10,0,0,1015,1017,5,160,0,0,1016,1015,
        1,0,0,0,1016,1017,1,0,0,0,1017,1018,1,0,0,0,1018,1046,5,154,0,0,
        1019,1020,5,60,0,0,1020,1021,3,108,54,0,1021,1022,3,108,54,0,1022,
        1023,3,108,54,0,1023,1024,3,108,54,0,1024,1025,3,108,54,0,1025,1046,
        1,0,0,0,1026,1028,5,61,0,0,1027,1029,5,160,0,0,1028,1027,1,0,0,0,
        1028,1029,1,0,0,0,1029,1030,1,0,0,0,1030,1046,3,108,54,0,1031,1033,
        5,18,0,0,1032,1034,5,160,0,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,
        1034,1035,1,0,0,0,1035,1046,5,147,0,0,1036,1038,5,21,0,0,1037,1039,
        5,179,0,0,1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1040,1,0,0,0,
        1040,1046,5,180,0,0,1041,1042,5,23,0,0,1042,1043,5,25,0,0,1043,1046,
        3,108,54,0,1044,1046,5,26,0,0,1045,1013,1,0,0,0,1045,1014,1,0,0,
        0,1045,1019,1,0,0,0,1045,1026,1,0,0,0,1045,1031,1,0,0,0,1045,1036,
        1,0,0,0,1045,1041,1,0,0,0,1045,1044,1,0,0,0,1046,85,1,0,0,0,1047,
        1048,5,5,0,0,1048,1049,3,96,48,0,1049,1050,3,96,48,0,1050,1051,3,
        96,48,0,1051,1052,3,96,48,0,1052,1053,3,96,48,0,1053,1054,3,96,48,
        0,1054,1056,3,104,52,0,1055,1057,3,104,52,0,1056,1055,1,0,0,0,1056,
        1057,1,0,0,0,1057,87,1,0,0,0,1058,1093,3,90,45,0,1059,1061,5,10,
        0,0,1060,1062,5,160,0,0,1061,1060,1,0,0,0,1061,1062,1,0,0,0,1062,
        1063,1,0,0,0,1063,1093,5,154,0,0,1064,1065,5,60,0,0,1065,1066,3,
        108,54,0,1066,1067,3,108,54,0,1067,1068,3,108,54,0,1068,1069,3,108,
        54,0,1069,1070,3,108,54,0,1070,1071,3,108,54,0,1071,1072,3,108,54,
        0,1072,1093,1,0,0,0,1073,1075,5,61,0,0,1074,1076,5,160,0,0,1075,
        1074,1,0,0,0,1075,1076,1,0,0,0,1076,1077,1,0,0,0,1077,1093,3,108,
        54,0,1078,1080,5,18,0,0,1079,1081,5,160,0,0,1080,1079,1,0,0,0,1080,
        1081,1,0,0,0,1081,1082,1,0,0,0,1082,1093,5,147,0,0,1083,1085,5,21,
        0,0,1084,1086,5,179,0,0,1085,1084,1,0,0,0,1085,1086,1,0,0,0,1086,
        1087,1,0,0,0,1087,1093,5,180,0,0,1088,1089,5,23,0,0,1089,1090,5,
        25,0,0,1090,1093,3,108,54,0,1091,1093,5,26,0,0,1092,1058,1,0,0,0,
        1092,1059,1,0,0,0,1092,1064,1,0,0,0,1092,1073,1,0,0,0,1092,1078,
        1,0,0,0,1092,1083,1,0,0,0,1092,1088,1,0,0,0,1092,1091,1,0,0,0,1093,
        89,1,0,0,0,1094,1095,5,5,0,0,1095,1096,3,96,48,0,1096,1097,3,96,
        48,0,1097,1098,3,96,48,0,1098,1099,3,96,48,0,1099,1100,3,96,48,0,
        1100,1101,3,96,48,0,1101,1102,3,96,48,0,1102,1103,3,96,48,0,1103,
        1104,3,104,52,0,1104,1105,3,104,52,0,1105,91,1,0,0,0,1106,1159,3,
        94,47,0,1107,1109,5,10,0,0,1108,1110,5,160,0,0,1109,1108,1,0,0,0,
        1109,1110,1,0,0,0,1110,1111,1,0,0,0,1111,1159,5,154,0,0,1112,1114,
        5,86,0,0,1113,1115,5,160,0,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,
        1115,1116,1,0,0,0,1116,1159,5,154,0,0,1117,1118,5,64,0,0,1118,1119,
        5,147,0,0,1119,1120,5,147,0,0,1120,1159,3,108,54,0,1121,1123,5,77,
        0,0,1122,1124,5,160,0,0,1123,1122,1,0,0,0,1123,1124,1,0,0,0,1124,
        1125,1,0,0,0,1125,1159,3,108,54,0,1126,1128,5,61,0,0,1127,1129,5,
        160,0,0,1128,1127,1,0,0,0,1128,1129,1,0,0,0,1129,1130,1,0,0,0,1130,
        1159,3,108,54,0,1131,1133,5,18,0,0,1132,1134,5,160,0,0,1133,1132,
        1,0,0,0,1133,1134,1,0,0,0,1134,1135,1,0,0,0,1135,1159,5,147,0,0,
        1136,1138,5,21,0,0,1137,1139,5,179,0,0,1138,1137,1,0,0,0,1138,1139,
        1,0,0,0,1139,1140,1,0,0,0,1140,1159,5,180,0,0,1141,1142,5,23,0,0,
        1142,1143,5,25,0,0,1143,1150,3,108,54,0,1144,1151,5,88,0,0,1145,
        1147,5,10,0,0,1146,1148,5,160,0,0,1147,1146,1,0,0,0,1147,1148,1,
        0,0,0,1148,1149,1,0,0,0,1149,1151,5,154,0,0,1150,1144,1,0,0,0,1150,
        1145,1,0,0,0,1151,1159,1,0,0,0,1152,1159,5,26,0,0,1153,1154,5,81,
        0,0,1154,1155,7,0,0,0,1155,1156,5,147,0,0,1156,1159,5,147,0,0,1157,
        1159,5,68,0,0,1158,1106,1,0,0,0,1158,1107,1,0,0,0,1158,1112,1,0,
        0,0,1158,1117,1,0,0,0,1158,1121,1,0,0,0,1158,1126,1,0,0,0,1158,1131,
        1,0,0,0,1158,1136,1,0,0,0,1158,1141,1,0,0,0,1158,1152,1,0,0,0,1158,
        1153,1,0,0,0,1158,1157,1,0,0,0,1159,93,1,0,0,0,1160,1161,5,5,0,0,
        1161,1162,3,96,48,0,1162,1163,3,96,48,0,1163,1164,3,96,48,0,1164,
        1165,3,96,48,0,1165,1166,3,96,48,0,1166,1167,3,96,48,0,1167,1168,
        3,96,48,0,1168,1169,3,96,48,0,1169,1170,3,96,48,0,1170,1171,3,96,
        48,0,1171,1173,3,96,48,0,1172,1174,3,96,48,0,1173,1172,1,0,0,0,1173,
        1174,1,0,0,0,1174,95,1,0,0,0,1175,1176,5,157,0,0,1176,1177,3,98,
        49,0,1177,1178,5,158,0,0,1178,97,1,0,0,0,1179,1184,3,100,50,0,1180,
        1181,5,142,0,0,1181,1183,3,100,50,0,1182,1180,1,0,0,0,1183,1186,
        1,0,0,0,1184,1182,1,0,0,0,1184,1185,1,0,0,0,1185,99,1,0,0,0,1186,
        1184,1,0,0,0,1187,1192,3,102,51,0,1188,1189,5,143,0,0,1189,1191,
        3,102,51,0,1190,1188,1,0,0,0,1191,1194,1,0,0,0,1192,1190,1,0,0,0,
        1192,1193,1,0,0,0,1193,101,1,0,0,0,1194,1192,1,0,0,0,1195,1196,6,
        51,-1,0,1196,1197,5,157,0,0,1197,1198,3,98,49,0,1198,1199,5,158,
        0,0,1199,1350,1,0,0,0,1200,1350,5,88,0,0,1201,1202,5,90,0,0,1202,
        1203,7,1,0,0,1203,1204,7,2,0,0,1204,1350,7,1,0,0,1205,1207,5,91,
        0,0,1206,1208,5,172,0,0,1207,1206,1,0,0,0,1207,1208,1,0,0,0,1208,
        1209,1,0,0,0,1209,1210,5,173,0,0,1210,1211,5,174,0,0,1211,1350,3,
        106,53,0,1212,1213,5,92,0,0,1213,1350,3,102,51,30,1214,1215,5,93,
        0,0,1215,1350,3,102,51,29,1216,1217,5,94,0,0,1217,1350,3,102,51,
        28,1218,1226,5,95,0,0,1219,1227,5,155,0,0,1220,1223,5,154,0,0,1221,
        1222,5,159,0,0,1222,1224,5,154,0,0,1223,1221,1,0,0,0,1223,1224,1,
        0,0,0,1224,1227,1,0,0,0,1225,1227,5,166,0,0,1226,1219,1,0,0,0,1226,
        1220,1,0,0,0,1226,1225,1,0,0,0,1227,1350,1,0,0,0,1228,1229,5,96,
        0,0,1229,1230,3,106,53,0,1230,1231,3,106,53,0,1231,1232,3,106,53,
        0,1232,1233,3,106,53,0,1233,1234,3,106,53,0,1234,1235,3,106,53,0,
        1235,1350,1,0,0,0,1236,1350,5,97,0,0,1237,1238,5,98,0,0,1238,1350,
        5,147,0,0,1239,1350,5,99,0,0,1240,1253,5,100,0,0,1241,1254,5,155,
        0,0,1242,1245,5,154,0,0,1243,1244,5,159,0,0,1244,1246,5,154,0,0,
        1245,1243,1,0,0,0,1245,1246,1,0,0,0,1246,1254,1,0,0,0,1247,1250,
        5,150,0,0,1248,1249,5,159,0,0,1249,1251,5,150,0,0,1250,1248,1,0,
        0,0,1250,1251,1,0,0,0,1251,1254,1,0,0,0,1252,1254,5,166,0,0,1253,
        1241,1,0,0,0,1253,1242,1,0,0,0,1253,1247,1,0,0,0,1253,1252,1,0,0,
        0,1254,1350,1,0,0,0,1255,1350,5,101,0,0,1256,1257,5,144,0,0,1257,
        1350,3,102,51,20,1258,1259,5,102,0,0,1259,1260,5,157,0,0,1260,1262,
        3,106,53,0,1261,1263,5,145,0,0,1262,1261,1,0,0,0,1262,1263,1,0,0,
        0,1263,1264,1,0,0,0,1264,1266,3,106,53,0,1265,1267,5,145,0,0,1266,
        1265,1,0,0,0,1266,1267,1,0,0,0,1267,1268,1,0,0,0,1268,1269,3,106,
        53,0,1269,1270,5,158,0,0,1270,1271,5,103,0,0,1271,1272,3,106,53,
        0,1272,1350,1,0,0,0,1273,1274,5,102,0,0,1274,1275,5,157,0,0,1275,
        1277,5,140,0,0,1276,1278,5,160,0,0,1277,1276,1,0,0,0,1277,1278,1,
        0,0,0,1278,1279,1,0,0,0,1279,1281,3,96,48,0,1280,1282,5,145,0,0,
        1281,1280,1,0,0,0,1281,1282,1,0,0,0,1282,1288,1,0,0,0,1283,1285,
        5,141,0,0,1284,1286,5,160,0,0,1285,1284,1,0,0,0,1285,1286,1,0,0,
        0,1286,1287,1,0,0,0,1287,1289,3,96,48,0,1288,1283,1,0,0,0,1288,1289,
        1,0,0,0,1289,1290,1,0,0,0,1290,1291,5,158,0,0,1291,1292,5,103,0,
        0,1292,1293,3,106,53,0,1293,1350,1,0,0,0,1294,1350,5,104,0,0,1295,
        1350,5,105,0,0,1296,1304,5,106,0,0,1297,1305,5,156,0,0,1298,1301,
        5,147,0,0,1299,1300,5,159,0,0,1300,1302,5,147,0,0,1301,1299,1,0,
        0,0,1301,1302,1,0,0,0,1302,1305,1,0,0,0,1303,1305,5,166,0,0,1304,
        1297,1,0,0,0,1304,1298,1,0,0,0,1304,1303,1,0,0,0,1305,1350,1,0,0,
        0,1306,1314,5,107,0,0,1307,1315,5,155,0,0,1308,1311,5,154,0,0,1309,
        1310,5,159,0,0,1310,1312,5,154,0,0,1311,1309,1,0,0,0,1311,1312,1,
        0,0,0,1312,1315,1,0,0,0,1313,1315,5,166,0,0,1314,1307,1,0,0,0,1314,
        1308,1,0,0,0,1314,1313,1,0,0,0,1315,1350,1,0,0,0,1316,1329,5,109,
        0,0,1317,1330,5,155,0,0,1318,1321,5,154,0,0,1319,1320,5,159,0,0,
        1320,1322,5,154,0,0,1321,1319,1,0,0,0,1321,1322,1,0,0,0,1322,1330,
        1,0,0,0,1323,1326,5,150,0,0,1324,1325,5,159,0,0,1325,1327,5,150,
        0,0,1326,1324,1,0,0,0,1326,1327,1,0,0,0,1327,1330,1,0,0,0,1328,1330,
        5,166,0,0,1329,1317,1,0,0,0,1329,1318,1,0,0,0,1329,1323,1,0,0,0,
        1329,1328,1,0,0,0,1330,1350,1,0,0,0,1331,1332,5,110,0,0,1332,1333,
        3,106,53,0,1333,1334,3,106,53,0,1334,1335,3,106,53,0,1335,1336,3,
        106,53,0,1336,1337,3,106,53,0,1337,1338,3,106,53,0,1338,1350,1,0,
        0,0,1339,1350,5,111,0,0,1340,1350,5,112,0,0,1341,1350,5,113,0,0,
        1342,1350,5,114,0,0,1343,1350,5,115,0,0,1344,1350,5,116,0,0,1345,
        1350,5,117,0,0,1346,1350,5,118,0,0,1347,1350,5,119,0,0,1348,1350,
        5,120,0,0,1349,1195,1,0,0,0,1349,1200,1,0,0,0,1349,1201,1,0,0,0,
        1349,1205,1,0,0,0,1349,1212,1,0,0,0,1349,1214,1,0,0,0,1349,1216,
        1,0,0,0,1349,1218,1,0,0,0,1349,1228,1,0,0,0,1349,1236,1,0,0,0,1349,
        1237,1,0,0,0,1349,1239,1,0,0,0,1349,1240,1,0,0,0,1349,1255,1,0,0,
        0,1349,1256,1,0,0,0,1349,1258,1,0,0,0,1349,1273,1,0,0,0,1349,1294,
        1,0,0,0,1349,1295,1,0,0,0,1349,1296,1,0,0,0,1349,1306,1,0,0,0,1349,
        1316,1,0,0,0,1349,1331,1,0,0,0,1349,1339,1,0,0,0,1349,1340,1,0,0,
        0,1349,1341,1,0,0,0,1349,1342,1,0,0,0,1349,1343,1,0,0,0,1349,1344,
        1,0,0,0,1349,1345,1,0,0,0,1349,1346,1,0,0,0,1349,1347,1,0,0,0,1349,
        1348,1,0,0,0,1350,1359,1,0,0,0,1351,1352,10,33,0,0,1352,1353,5,89,
        0,0,1353,1358,3,106,53,0,1354,1355,10,13,0,0,1355,1356,5,108,0,0,
        1356,1358,3,106,53,0,1357,1351,1,0,0,0,1357,1354,1,0,0,0,1358,1361,
        1,0,0,0,1359,1357,1,0,0,0,1359,1360,1,0,0,0,1360,103,1,0,0,0,1361,
        1359,1,0,0,0,1362,1363,7,3,0,0,1363,105,1,0,0,0,1364,1365,7,4,0,
        0,1365,107,1,0,0,0,1366,1367,7,3,0,0,1367,109,1,0,0,0,1368,1369,
        7,4,0,0,1369,111,1,0,0,0,1370,1381,5,87,0,0,1371,1379,5,185,0,0,
        1372,1374,5,188,0,0,1373,1372,1,0,0,0,1374,1377,1,0,0,0,1375,1373,
        1,0,0,0,1375,1376,1,0,0,0,1376,1380,1,0,0,0,1377,1375,1,0,0,0,1378,
        1380,5,189,0,0,1379,1375,1,0,0,0,1379,1378,1,0,0,0,1380,1382,1,0,
        0,0,1381,1371,1,0,0,0,1381,1382,1,0,0,0,1382,1383,1,0,0,0,1383,1387,
        5,186,0,0,1384,1386,5,188,0,0,1385,1384,1,0,0,0,1386,1389,1,0,0,
        0,1387,1385,1,0,0,0,1387,1388,1,0,0,0,1388,1390,1,0,0,0,1389,1387,
        1,0,0,0,1390,1391,5,187,0,0,1391,113,1,0,0,0,1392,1393,5,121,0,0,
        1393,1394,3,116,58,0,1394,1395,3,96,48,0,1395,115,1,0,0,0,1396,1397,
        7,5,0,0,1397,1398,3,118,59,0,1398,1399,5,191,0,0,1399,1403,1,0,0,
        0,1400,1401,5,124,0,0,1401,1403,3,126,63,0,1402,1396,1,0,0,0,1402,
        1400,1,0,0,0,1403,117,1,0,0,0,1404,1407,5,201,0,0,1405,1406,5,192,
        0,0,1406,1408,3,120,60,0,1407,1405,1,0,0,0,1407,1408,1,0,0,0,1408,
        119,1,0,0,0,1409,1412,3,122,61,0,1410,1411,7,6,0,0,1411,1413,3,120,
        60,0,1412,1410,1,0,0,0,1412,1413,1,0,0,0,1413,121,1,0,0,0,1414,1422,
        5,201,0,0,1415,1422,3,124,62,0,1416,1422,5,199,0,0,1417,1422,5,200,
        0,0,1418,1422,5,225,0,0,1419,1422,5,224,0,0,1420,1422,5,226,0,0,
        1421,1414,1,0,0,0,1421,1415,1,0,0,0,1421,1416,1,0,0,0,1421,1417,
        1,0,0,0,1421,1418,1,0,0,0,1421,1419,1,0,0,0,1421,1420,1,0,0,0,1422,
        123,1,0,0,0,1423,1424,5,202,0,0,1424,1425,5,228,0,0,1425,1426,3,
        122,61,0,1426,1427,5,191,0,0,1427,1543,1,0,0,0,1428,1429,5,203,0,
        0,1429,1430,5,228,0,0,1430,1431,3,122,61,0,1431,1432,5,191,0,0,1432,
        1543,1,0,0,0,1433,1434,5,205,0,0,1434,1435,5,228,0,0,1435,1436,3,
        122,61,0,1436,1437,5,191,0,0,1437,1543,1,0,0,0,1438,1439,5,206,0,
        0,1439,1440,5,228,0,0,1440,1441,3,122,61,0,1441,1442,5,191,0,0,1442,
        1543,1,0,0,0,1443,1444,5,207,0,0,1444,1445,5,228,0,0,1445,1446,3,
        122,61,0,1446,1447,5,191,0,0,1447,1543,1,0,0,0,1448,1449,5,208,0,
        0,1449,1450,5,228,0,0,1450,1451,3,122,61,0,1451,1452,5,191,0,0,1452,
        1543,1,0,0,0,1453,1454,5,209,0,0,1454,1455,5,228,0,0,1455,1456,3,
        122,61,0,1456,1457,5,191,0,0,1457,1543,1,0,0,0,1458,1459,5,210,0,
        0,1459,1460,5,228,0,0,1460,1461,3,122,61,0,1461,1462,5,191,0,0,1462,
        1543,1,0,0,0,1463,1464,5,211,0,0,1464,1465,5,228,0,0,1465,1466,3,
        122,61,0,1466,1467,5,191,0,0,1467,1543,1,0,0,0,1468,1469,5,212,0,
        0,1469,1470,5,228,0,0,1470,1471,3,122,61,0,1471,1472,5,191,0,0,1472,
        1543,1,0,0,0,1473,1474,5,213,0,0,1474,1475,5,228,0,0,1475,1476,3,
        122,61,0,1476,1477,5,191,0,0,1477,1543,1,0,0,0,1478,1479,5,214,0,
        0,1479,1480,5,228,0,0,1480,1485,3,122,61,0,1481,1482,5,198,0,0,1482,
        1484,3,122,61,0,1483,1481,1,0,0,0,1484,1487,1,0,0,0,1485,1483,1,
        0,0,0,1485,1486,1,0,0,0,1486,1488,1,0,0,0,1487,1485,1,0,0,0,1488,
        1489,5,191,0,0,1489,1543,1,0,0,0,1490,1491,5,215,0,0,1491,1492,5,
        228,0,0,1492,1493,3,122,61,0,1493,1494,5,191,0,0,1494,1543,1,0,0,
        0,1495,1496,5,216,0,0,1496,1497,5,228,0,0,1497,1502,3,122,61,0,1498,
        1499,5,198,0,0,1499,1501,3,122,61,0,1500,1498,1,0,0,0,1501,1504,
        1,0,0,0,1502,1500,1,0,0,0,1502,1503,1,0,0,0,1503,1505,1,0,0,0,1504,
        1502,1,0,0,0,1505,1506,5,191,0,0,1506,1543,1,0,0,0,1507,1508,5,217,
        0,0,1508,1509,5,228,0,0,1509,1510,3,122,61,0,1510,1511,5,198,0,0,
        1511,1512,3,122,61,0,1512,1513,5,191,0,0,1513,1543,1,0,0,0,1514,
        1515,5,218,0,0,1515,1516,5,228,0,0,1516,1517,3,122,61,0,1517,1518,
        5,191,0,0,1518,1543,1,0,0,0,1519,1520,5,219,0,0,1520,1521,5,228,
        0,0,1521,1543,5,191,0,0,1522,1523,5,220,0,0,1523,1524,5,228,0,0,
        1524,1525,3,122,61,0,1525,1526,5,191,0,0,1526,1543,1,0,0,0,1527,
        1528,5,221,0,0,1528,1529,5,228,0,0,1529,1530,3,122,61,0,1530,1531,
        5,191,0,0,1531,1543,1,0,0,0,1532,1533,5,222,0,0,1533,1534,5,228,
        0,0,1534,1535,3,122,61,0,1535,1536,5,191,0,0,1536,1543,1,0,0,0,1537,
        1538,5,223,0,0,1538,1539,5,228,0,0,1539,1540,3,122,61,0,1540,1541,
        5,191,0,0,1541,1543,1,0,0,0,1542,1423,1,0,0,0,1542,1428,1,0,0,0,
        1542,1433,1,0,0,0,1542,1438,1,0,0,0,1542,1443,1,0,0,0,1542,1448,
        1,0,0,0,1542,1453,1,0,0,0,1542,1458,1,0,0,0,1542,1463,1,0,0,0,1542,
        1468,1,0,0,0,1542,1473,1,0,0,0,1542,1478,1,0,0,0,1542,1490,1,0,0,
        0,1542,1495,1,0,0,0,1542,1507,1,0,0,0,1542,1514,1,0,0,0,1542,1519,
        1,0,0,0,1542,1522,1,0,0,0,1542,1527,1,0,0,0,1542,1532,1,0,0,0,1542,
        1537,1,0,0,0,1543,125,1,0,0,0,1544,1545,7,7,0,0,1545,1546,5,230,
        0,0,1546,1547,5,239,0,0,1547,1548,5,231,0,0,1548,127,1,0,0,0,1549,
        1550,5,125,0,0,1550,1551,5,224,0,0,1551,1552,5,192,0,0,1552,1553,
        3,130,65,0,1553,1554,5,191,0,0,1554,129,1,0,0,0,1555,1558,3,122,
        61,0,1556,1557,7,6,0,0,1557,1559,3,130,65,0,1558,1556,1,0,0,0,1558,
        1559,1,0,0,0,1559,131,1,0,0,0,1560,1562,5,126,0,0,1561,1563,5,154,
        0,0,1562,1561,1,0,0,0,1562,1563,1,0,0,0,1563,1564,1,0,0,0,1564,1565,
        5,127,0,0,1565,1566,5,160,0,0,1566,1567,7,8,0,0,1567,1568,5,160,
        0,0,1568,1574,3,96,48,0,1569,1570,5,127,0,0,1570,1571,5,160,0,0,
        1571,1572,7,8,0,0,1572,1573,5,160,0,0,1573,1575,3,96,48,0,1574,1569,
        1,0,0,0,1574,1575,1,0,0,0,1575,1576,1,0,0,0,1576,1577,5,2,0,0,1577,
        133,1,0,0,0,1578,1582,5,129,0,0,1579,1581,3,136,68,0,1580,1579,1,
        0,0,0,1581,1584,1,0,0,0,1582,1580,1,0,0,0,1582,1583,1,0,0,0,1583,
        1585,1,0,0,0,1584,1582,1,0,0,0,1585,1586,5,2,0,0,1586,135,1,0,0,
        0,1587,1588,5,85,0,0,1588,1589,5,154,0,0,1589,1590,5,154,0,0,1590,
        1591,5,154,0,0,1591,1592,3,108,54,0,1592,1597,3,108,54,0,1593,1594,
        5,130,0,0,1594,1595,3,108,54,0,1595,1596,3,108,54,0,1596,1598,1,
        0,0,0,1597,1593,1,0,0,0,1597,1598,1,0,0,0,1598,1643,1,0,0,0,1599,
        1600,5,92,0,0,1600,1601,5,154,0,0,1601,1602,5,154,0,0,1602,1603,
        3,108,54,0,1603,1604,3,108,54,0,1604,1643,1,0,0,0,1605,1606,7,9,
        0,0,1606,1607,5,154,0,0,1607,1608,5,154,0,0,1608,1609,5,154,0,0,
        1609,1612,5,154,0,0,1610,1611,5,131,0,0,1611,1613,5,147,0,0,1612,
        1610,1,0,0,0,1612,1613,1,0,0,0,1613,1614,1,0,0,0,1614,1615,3,108,
        54,0,1615,1616,5,147,0,0,1616,1617,3,108,54,0,1617,1643,1,0,0,0,
        1618,1619,5,132,0,0,1619,1620,5,155,0,0,1620,1621,5,155,0,0,1621,
        1622,3,108,54,0,1622,1623,3,108,54,0,1623,1643,1,0,0,0,1624,1625,
        5,134,0,0,1625,1626,5,154,0,0,1626,1627,5,154,0,0,1627,1628,3,108,
        54,0,1628,1629,3,108,54,0,1629,1630,3,108,54,0,1630,1631,3,108,54,
        0,1631,1643,1,0,0,0,1632,1633,5,135,0,0,1633,1634,5,154,0,0,1634,
        1635,3,108,54,0,1635,1636,3,108,54,0,1636,1637,3,108,54,0,1637,1638,
        3,108,54,0,1638,1643,1,0,0,0,1639,1640,7,10,0,0,1640,1643,5,154,
        0,0,1641,1643,5,137,0,0,1642,1587,1,0,0,0,1642,1599,1,0,0,0,1642,
        1605,1,0,0,0,1642,1618,1,0,0,0,1642,1624,1,0,0,0,1642,1632,1,0,0,
        0,1642,1639,1,0,0,0,1642,1641,1,0,0,0,1643,137,1,0,0,0,1644,1645,
        5,138,0,0,1645,1646,5,246,0,0,1646,1647,5,243,0,0,1647,1666,5,241,
        0,0,1648,1650,5,244,0,0,1649,1648,1,0,0,0,1650,1653,1,0,0,0,1651,
        1649,1,0,0,0,1651,1652,1,0,0,0,1652,1667,1,0,0,0,1653,1651,1,0,0,
        0,1654,1656,5,245,0,0,1655,1654,1,0,0,0,1656,1659,1,0,0,0,1657,1655,
        1,0,0,0,1657,1658,1,0,0,0,1658,1667,1,0,0,0,1659,1657,1,0,0,0,1660,
        1662,5,247,0,0,1661,1660,1,0,0,0,1662,1665,1,0,0,0,1663,1661,1,0,
        0,0,1663,1664,1,0,0,0,1664,1667,1,0,0,0,1665,1663,1,0,0,0,1666,1651,
        1,0,0,0,1666,1657,1,0,0,0,1666,1663,1,0,0,0,1667,1668,1,0,0,0,1668,
        1669,5,242,0,0,1669,1670,5,139,0,0,1670,1675,5,250,0,0,1671,1674,
        3,128,64,0,1672,1674,3,28,14,0,1673,1671,1,0,0,0,1673,1672,1,0,0,
        0,1674,1677,1,0,0,0,1675,1673,1,0,0,0,1675,1676,1,0,0,0,1676,1678,
        1,0,0,0,1677,1675,1,0,0,0,1678,1679,5,2,0,0,1679,1680,5,139,0,0,
        1680,1681,5,250,0,0,1681,139,1,0,0,0,1682,1683,5,138,0,0,1683,1684,
        5,246,0,0,1684,1685,5,243,0,0,1685,1704,5,241,0,0,1686,1688,5,244,
        0,0,1687,1686,1,0,0,0,1688,1691,1,0,0,0,1689,1687,1,0,0,0,1689,1690,
        1,0,0,0,1690,1705,1,0,0,0,1691,1689,1,0,0,0,1692,1694,5,245,0,0,
        1693,1692,1,0,0,0,1694,1697,1,0,0,0,1695,1693,1,0,0,0,1695,1696,
        1,0,0,0,1696,1705,1,0,0,0,1697,1695,1,0,0,0,1698,1700,5,247,0,0,
        1699,1698,1,0,0,0,1700,1703,1,0,0,0,1701,1699,1,0,0,0,1701,1702,
        1,0,0,0,1702,1705,1,0,0,0,1703,1701,1,0,0,0,1704,1689,1,0,0,0,1704,
        1695,1,0,0,0,1704,1701,1,0,0,0,1705,1706,1,0,0,0,1706,1707,5,242,
        0,0,1707,1708,5,139,0,0,1708,1713,5,250,0,0,1709,1712,3,128,64,0,
        1710,1712,3,36,18,0,1711,1709,1,0,0,0,1711,1710,1,0,0,0,1712,1715,
        1,0,0,0,1713,1711,1,0,0,0,1713,1714,1,0,0,0,1714,1716,1,0,0,0,1715,
        1713,1,0,0,0,1716,1717,5,2,0,0,1717,1718,5,139,0,0,1718,1719,5,250,
        0,0,1719,141,1,0,0,0,1720,1721,5,138,0,0,1721,1722,5,246,0,0,1722,
        1723,5,243,0,0,1723,1742,5,241,0,0,1724,1726,5,244,0,0,1725,1724,
        1,0,0,0,1726,1729,1,0,0,0,1727,1725,1,0,0,0,1727,1728,1,0,0,0,1728,
        1743,1,0,0,0,1729,1727,1,0,0,0,1730,1732,5,245,0,0,1731,1730,1,0,
        0,0,1732,1735,1,0,0,0,1733,1731,1,0,0,0,1733,1734,1,0,0,0,1734,1743,
        1,0,0,0,1735,1733,1,0,0,0,1736,1738,5,247,0,0,1737,1736,1,0,0,0,
        1738,1741,1,0,0,0,1739,1737,1,0,0,0,1739,1740,1,0,0,0,1740,1743,
        1,0,0,0,1741,1739,1,0,0,0,1742,1727,1,0,0,0,1742,1733,1,0,0,0,1742,
        1739,1,0,0,0,1743,1744,1,0,0,0,1744,1745,5,242,0,0,1745,1746,5,139,
        0,0,1746,1751,5,250,0,0,1747,1750,3,128,64,0,1748,1750,3,48,24,0,
        1749,1747,1,0,0,0,1749,1748,1,0,0,0,1750,1753,1,0,0,0,1751,1749,
        1,0,0,0,1751,1752,1,0,0,0,1752,1754,1,0,0,0,1753,1751,1,0,0,0,1754,
        1755,5,2,0,0,1755,1756,5,139,0,0,1756,1757,5,250,0,0,1757,143,1,
        0,0,0,1758,1759,5,138,0,0,1759,1760,5,246,0,0,1760,1761,5,243,0,
        0,1761,1780,5,241,0,0,1762,1764,5,244,0,0,1763,1762,1,0,0,0,1764,
        1767,1,0,0,0,1765,1763,1,0,0,0,1765,1766,1,0,0,0,1766,1781,1,0,0,
        0,1767,1765,1,0,0,0,1768,1770,5,245,0,0,1769,1768,1,0,0,0,1770,1773,
        1,0,0,0,1771,1769,1,0,0,0,1771,1772,1,0,0,0,1772,1781,1,0,0,0,1773,
        1771,1,0,0,0,1774,1776,5,247,0,0,1775,1774,1,0,0,0,1776,1779,1,0,
        0,0,1777,1775,1,0,0,0,1777,1778,1,0,0,0,1778,1781,1,0,0,0,1779,1777,
        1,0,0,0,1780,1765,1,0,0,0,1780,1771,1,0,0,0,1780,1777,1,0,0,0,1781,
        1782,1,0,0,0,1782,1783,5,242,0,0,1783,1784,5,139,0,0,1784,1789,5,
        250,0,0,1785,1788,3,128,64,0,1786,1788,3,52,26,0,1787,1785,1,0,0,
        0,1787,1786,1,0,0,0,1788,1791,1,0,0,0,1789,1787,1,0,0,0,1789,1790,
        1,0,0,0,1790,1792,1,0,0,0,1791,1789,1,0,0,0,1792,1793,5,2,0,0,1793,
        1794,5,139,0,0,1794,1795,5,250,0,0,1795,145,1,0,0,0,1796,1797,5,
        138,0,0,1797,1798,5,246,0,0,1798,1799,5,243,0,0,1799,1818,5,241,
        0,0,1800,1802,5,244,0,0,1801,1800,1,0,0,0,1802,1805,1,0,0,0,1803,
        1801,1,0,0,0,1803,1804,1,0,0,0,1804,1819,1,0,0,0,1805,1803,1,0,0,
        0,1806,1808,5,245,0,0,1807,1806,1,0,0,0,1808,1811,1,0,0,0,1809,1807,
        1,0,0,0,1809,1810,1,0,0,0,1810,1819,1,0,0,0,1811,1809,1,0,0,0,1812,
        1814,5,247,0,0,1813,1812,1,0,0,0,1814,1817,1,0,0,0,1815,1813,1,0,
        0,0,1815,1816,1,0,0,0,1816,1819,1,0,0,0,1817,1815,1,0,0,0,1818,1803,
        1,0,0,0,1818,1809,1,0,0,0,1818,1815,1,0,0,0,1819,1820,1,0,0,0,1820,
        1821,5,242,0,0,1821,1822,5,139,0,0,1822,1827,5,250,0,0,1823,1826,
        3,128,64,0,1824,1826,3,56,28,0,1825,1823,1,0,0,0,1825,1824,1,0,0,
        0,1826,1829,1,0,0,0,1827,1825,1,0,0,0,1827,1828,1,0,0,0,1828,1830,
        1,0,0,0,1829,1827,1,0,0,0,1830,1831,5,2,0,0,1831,1832,5,139,0,0,
        1832,1833,5,250,0,0,1833,147,1,0,0,0,218,179,181,190,196,202,208,
        214,220,226,235,244,253,262,271,280,289,298,305,321,326,333,342,
        347,358,370,376,389,396,423,429,432,439,442,447,452,457,460,463,
        467,472,477,484,488,493,498,503,508,513,518,521,528,533,538,544,
        548,565,571,575,580,583,588,593,598,602,608,612,616,619,621,625,
        637,647,652,657,664,675,678,684,695,701,705,710,715,724,727,730,
        742,749,755,767,772,777,782,787,796,823,828,834,844,847,852,857,
        861,873,897,905,912,915,918,923,928,933,943,948,953,957,966,969,
        976,979,982,985,997,1004,1011,1016,1028,1033,1038,1045,1056,1061,
        1075,1080,1085,1092,1109,1114,1123,1128,1133,1138,1147,1150,1158,
        1173,1184,1192,1207,1223,1226,1245,1250,1253,1262,1266,1277,1281,
        1285,1288,1301,1304,1311,1314,1321,1326,1329,1349,1357,1359,1375,
        1379,1381,1387,1402,1407,1412,1421,1485,1502,1542,1558,1562,1574,
        1582,1597,1612,1642,1651,1657,1663,1666,1673,1675,1689,1695,1701,
        1704,1711,1713,1727,1733,1739,1742,1749,1751,1765,1771,1777,1780,
        1787,1789,1803,1809,1815,1818,1825,1827
    ]

class CnsMRParser ( Parser ):

    grammarFileName = "CnsMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'CV'", "'DEN'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'OUTD'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'CUTOFF'", 
                     "'CUTON'", "'FROM'", "'TO'", "'PEAK'", "'SPECTRUM'", 
                     "'VOLUME'", "'PPM1'", "'PPM2'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SIZE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'ALL'", "<INVALID>", 
                     "'ATOM'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'FBOX'", "<INVALID>", "'ID'", "<INVALID>", 
                     "'NAME'", "'NONE'", "<INVALID>", "'CUT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SFBOX'", "'STORE1'", "'STORE2'", "'STORE3'", 
                     "'STORE4'", "'STORE5'", "'STORE6'", "'STORE7'", "'STORE8'", 
                     "'STORE9'", "'TAG'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'SHOW'", "<INVALID>", "<INVALID>", "<INVALID>", "'NIL'", 
                     "<INVALID>", "'UB'", "'MULT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'NONB'", "<INVALID>", "<INVALID>", "'FOR'", 
                     "'LOOP'", "'TAIL'", "'HEAD'", "'OR'", "'AND'", "'NOT'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "':'", "<INVALID>", "'<'", 
                     "'>'", "'<='", "'>='", "'#'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", 
                     "'ENCODE'", "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", 
                     "'LOG10'", "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", 
                     "'MOD'", "<INVALID>", "<INVALID>", "'SIGN'", "'SIN'", 
                     "'SQRT'", "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'RMS'", "'SUM'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Analysis", "Assign", 
                      "Asymptote", "Average", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Cv", "Den", "Distribute", "Ensemble", 
                      "Monomers", "Ncount", "Nrestraints", "Outd", "Partition", 
                      "Potential", "Predict", "Print", "Raverage", "Threshold", 
                      "Reset", "Rswitch", "Scale", "SoExponent", "SqConstant", 
                      "SqExponent", "SqOffset", "Taverage", "Temperature", 
                      "Initialize", "Update", "Gamma", "Kappa", "Cutoff", 
                      "Cuton", "From", "To", "Peak", "Spectrum", "Volume", 
                      "Ppm1", "Ppm2", "Restraints", "Dihedral", "Nassign", 
                      "Print_any", "Plane", "Group", "Selection", "Weight", 
                      "Harmonic", "Exponent", "Normal", "Sanisotropy", "Coefficients", 
                      "ForceConstant", "Coupling", "Carbon", "Expectation", 
                      "PhiStep", "PsiStep", "Rcoil", "Zero", "Proton", "Observed", 
                      "Anisotropy", "Amides", "Nitrogens", "Oxygens", "RingAtoms", 
                      "AlphasAndAmides", "Error", "Conformation", "Compressed", 
                      "Phase", "Size", "Dimensions", "Danisotropy", "OneBond", 
                      "AngleDb", "DerivFlag", "Flags", "All", "Around", 
                      "Atom", "Attribute", "BondedTo", "ByGroup", "ByRes", 
                      "Chemical", "Fbox", "Hydrogen", "Id", "Known", "Name", 
                      "NONE", "Point", "Cut", "Previous", "Pseudo", "Residue", 
                      "Resname", "Saround", "SegIdentifier", "Sfbox", "Store1", 
                      "Store2", "Store3", "Store4", "Store5", "Store6", 
                      "Store7", "Store8", "Store9", "Tag", "Vector", "Do_Lp", 
                      "Identify_Lp", "Show", "Evaluate_Lp", "Patch", "Reference", 
                      "Nil", "Parameter", "UB", "Mult", "HBonded", "Improper", 
                      "NBFix", "NonB", "VDWOff", "Verbose", "For", "Loop", 
                      "Tail", "Head", "Or_op", "And_op", "Not_op", "Comma", 
                      "Complex", "Integer", "Logical", "Real", "Double_quote_string", 
                      "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", 
                      "Simple_name", "Simple_names", "Integers", "L_paren", 
                      "R_paren", "Colon", "Equ_op", "Lt_op", "Gt_op", "Leq_op", 
                      "Geq_op", "Neq_op", "Symbol_name", "SPACE", "COMMENT", 
                      "SECTION_COMMENT", "LINE_COMMENT", "SET_VARIABLE", 
                      "Abs", "Attr_properties", "Comparison_ops", "SPACE_AP", 
                      "Averaging_methods", "Simple_name_AM", "SPACE_AM", 
                      "Equ_op_PT", "Potential_types", "Simple_name_PT", 
                      "SPACE_PT", "Noe_analysis", "SPACE_NA", "Exclude", 
                      "Include", "End_FL", "Class_name", "Any_class", "SPACE_FL", 
                      "R_paren_VE", "Equ_op_VE", "Add_op_VE", "Sub_op_VE", 
                      "Mul_op_VE", "Div_op_VE", "Exp_op_VE", "Comma_VE", 
                      "Integer_VE", "Real_VE", "Atom_properties_VE", "Abs_VE", 
                      "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", "Encode_VE", 
                      "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", "Log10_VE", 
                      "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", "Mod_VE", 
                      "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", "Sqrt_VE", 
                      "Tan_VE", "Symbol_name_VE", "Simple_name_VE", "Double_quote_string_VE", 
                      "SPACE_VE", "L_paren_VF", "SPACE_VF", "L_paren_VS", 
                      "R_paren_VS", "Average_VS", "Element_VS", "Max_VS", 
                      "Min_VS", "Norm_VS", "Rms_VS", "Sum_VS", "Atom_properties_VS", 
                      "SPACE_VS", "L_paren_CF", "R_paren_CF", "In_CF", "Integer_CF", 
                      "Real_CF", "Symbol_name_CF", "Simple_name_CF", "SPACE_CF", 
                      "COMMENT_CF", "Simple_name_LL", "SPACE_LL" ]

    RULE_cns_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_plane_restraint = 3
    RULE_harmonic_restraint = 4
    RULE_rdc_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_conformation_db_restraint = 9
    RULE_diffusion_anisotropy_restraint = 10
    RULE_one_bond_coupling_restraint = 11
    RULE_angle_db_restraint = 12
    RULE_noe_statement = 13
    RULE_noe_assign = 14
    RULE_predict_statement = 15
    RULE_noe_annotation = 16
    RULE_dihedral_statement = 17
    RULE_dihedral_assign = 18
    RULE_plane_statement = 19
    RULE_group_statement = 20
    RULE_harmonic_statement = 21
    RULE_harmonic_assign = 22
    RULE_sani_statement = 23
    RULE_sani_assign = 24
    RULE_coupling_statement = 25
    RULE_coup_assign = 26
    RULE_carbon_shift_statement = 27
    RULE_carbon_shift_assign = 28
    RULE_carbon_shift_rcoil = 29
    RULE_proton_shift_statement = 30
    RULE_observed = 31
    RULE_proton_shift_rcoil = 32
    RULE_proton_shift_anisotropy = 33
    RULE_proton_shift_amides = 34
    RULE_proton_shift_carbons = 35
    RULE_proton_shift_nitrogens = 36
    RULE_proton_shift_oxygens = 37
    RULE_proton_shift_ring_atoms = 38
    RULE_proton_shift_alphas_and_amides = 39
    RULE_conformation_statement = 40
    RULE_conf_assign = 41
    RULE_diffusion_statement = 42
    RULE_dani_assign = 43
    RULE_one_bond_coupling_statement = 44
    RULE_one_bond_assign = 45
    RULE_angle_db_statement = 46
    RULE_angle_db_assign = 47
    RULE_selection = 48
    RULE_selection_expression = 49
    RULE_term = 50
    RULE_factor = 51
    RULE_number = 52
    RULE_number_f = 53
    RULE_number_s = 54
    RULE_number_a = 55
    RULE_flag_statement = 56
    RULE_vector_statement = 57
    RULE_vector_mode = 58
    RULE_vector_expression = 59
    RULE_vector_operation = 60
    RULE_vflc = 61
    RULE_vector_func_call = 62
    RULE_vector_show_property = 63
    RULE_evaluate_statement = 64
    RULE_evaluate_operation = 65
    RULE_patch_statement = 66
    RULE_parameter_setting = 67
    RULE_parameter_statement = 68
    RULE_noe_assign_loop = 69
    RULE_dihedral_assign_loop = 70
    RULE_sani_assign_loop = 71
    RULE_coup_assign_loop = 72
    RULE_carbon_shift_assign_loop = 73

    ruleNames =  [ "cns_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "plane_restraint", "harmonic_restraint", "rdc_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "conformation_db_restraint", "diffusion_anisotropy_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "plane_statement", 
                   "group_statement", "harmonic_statement", "harmonic_assign", 
                   "sani_statement", "sani_assign", "coupling_statement", 
                   "coup_assign", "carbon_shift_statement", "carbon_shift_assign", 
                   "carbon_shift_rcoil", "proton_shift_statement", "observed", 
                   "proton_shift_rcoil", "proton_shift_anisotropy", "proton_shift_amides", 
                   "proton_shift_carbons", "proton_shift_nitrogens", "proton_shift_oxygens", 
                   "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "conformation_statement", "conf_assign", "diffusion_statement", 
                   "dani_assign", "one_bond_coupling_statement", "one_bond_assign", 
                   "angle_db_statement", "angle_db_assign", "selection", 
                   "selection_expression", "term", "factor", "number", "number_f", 
                   "number_s", "number_a", "flag_statement", "vector_statement", 
                   "vector_mode", "vector_expression", "vector_operation", 
                   "vflc", "vector_func_call", "vector_show_property", "evaluate_statement", 
                   "evaluate_operation", "patch_statement", "parameter_setting", 
                   "parameter_statement", "noe_assign_loop", "dihedral_assign_loop", 
                   "sani_assign_loop", "coup_assign_loop", "carbon_shift_assign_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Analysis=4
    Assign=5
    Asymptote=6
    Average=7
    Bhig=8
    Ceiling=9
    Classification=10
    CountViol=11
    Cv=12
    Den=13
    Distribute=14
    Ensemble=15
    Monomers=16
    Ncount=17
    Nrestraints=18
    Outd=19
    Partition=20
    Potential=21
    Predict=22
    Print=23
    Raverage=24
    Threshold=25
    Reset=26
    Rswitch=27
    Scale=28
    SoExponent=29
    SqConstant=30
    SqExponent=31
    SqOffset=32
    Taverage=33
    Temperature=34
    Initialize=35
    Update=36
    Gamma=37
    Kappa=38
    Cutoff=39
    Cuton=40
    From=41
    To=42
    Peak=43
    Spectrum=44
    Volume=45
    Ppm1=46
    Ppm2=47
    Restraints=48
    Dihedral=49
    Nassign=50
    Print_any=51
    Plane=52
    Group=53
    Selection=54
    Weight=55
    Harmonic=56
    Exponent=57
    Normal=58
    Sanisotropy=59
    Coefficients=60
    ForceConstant=61
    Coupling=62
    Carbon=63
    Expectation=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Zero=68
    Proton=69
    Observed=70
    Anisotropy=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Conformation=78
    Compressed=79
    Phase=80
    Size=81
    Dimensions=82
    Danisotropy=83
    OneBond=84
    AngleDb=85
    DerivFlag=86
    Flags=87
    All=88
    Around=89
    Atom=90
    Attribute=91
    BondedTo=92
    ByGroup=93
    ByRes=94
    Chemical=95
    Fbox=96
    Hydrogen=97
    Id=98
    Known=99
    Name=100
    NONE=101
    Point=102
    Cut=103
    Previous=104
    Pseudo=105
    Residue=106
    Resname=107
    Saround=108
    SegIdentifier=109
    Sfbox=110
    Store1=111
    Store2=112
    Store3=113
    Store4=114
    Store5=115
    Store6=116
    Store7=117
    Store8=118
    Store9=119
    Tag=120
    Vector=121
    Do_Lp=122
    Identify_Lp=123
    Show=124
    Evaluate_Lp=125
    Patch=126
    Reference=127
    Nil=128
    Parameter=129
    UB=130
    Mult=131
    HBonded=132
    Improper=133
    NBFix=134
    NonB=135
    VDWOff=136
    Verbose=137
    For=138
    Loop=139
    Tail=140
    Head=141
    Or_op=142
    And_op=143
    Not_op=144
    Comma=145
    Complex=146
    Integer=147
    Logical=148
    Real=149
    Double_quote_string=150
    SHARP_COMMENT=151
    EXCLM_COMMENT=152
    SMCLN_COMMENT=153
    Simple_name=154
    Simple_names=155
    Integers=156
    L_paren=157
    R_paren=158
    Colon=159
    Equ_op=160
    Lt_op=161
    Gt_op=162
    Leq_op=163
    Geq_op=164
    Neq_op=165
    Symbol_name=166
    SPACE=167
    COMMENT=168
    SECTION_COMMENT=169
    LINE_COMMENT=170
    SET_VARIABLE=171
    Abs=172
    Attr_properties=173
    Comparison_ops=174
    SPACE_AP=175
    Averaging_methods=176
    Simple_name_AM=177
    SPACE_AM=178
    Equ_op_PT=179
    Potential_types=180
    Simple_name_PT=181
    SPACE_PT=182
    Noe_analysis=183
    SPACE_NA=184
    Exclude=185
    Include=186
    End_FL=187
    Class_name=188
    Any_class=189
    SPACE_FL=190
    R_paren_VE=191
    Equ_op_VE=192
    Add_op_VE=193
    Sub_op_VE=194
    Mul_op_VE=195
    Div_op_VE=196
    Exp_op_VE=197
    Comma_VE=198
    Integer_VE=199
    Real_VE=200
    Atom_properties_VE=201
    Abs_VE=202
    Acos_VE=203
    Asin_VE=204
    Cos_VE=205
    Decode_VE=206
    Encode_VE=207
    Exp_VE=208
    Gauss_VE=209
    Heavy_VE=210
    Int_VE=211
    Log10_VE=212
    Log_VE=213
    Max_VE=214
    Maxw_VE=215
    Min_VE=216
    Mod_VE=217
    Norm_VE=218
    Random_VE=219
    Sign_VE=220
    Sin_VE=221
    Sqrt_VE=222
    Tan_VE=223
    Symbol_name_VE=224
    Simple_name_VE=225
    Double_quote_string_VE=226
    SPACE_VE=227
    L_paren_VF=228
    SPACE_VF=229
    L_paren_VS=230
    R_paren_VS=231
    Average_VS=232
    Element_VS=233
    Max_VS=234
    Min_VS=235
    Norm_VS=236
    Rms_VS=237
    Sum_VS=238
    Atom_properties_VS=239
    SPACE_VS=240
    L_paren_CF=241
    R_paren_CF=242
    In_CF=243
    Integer_CF=244
    Real_CF=245
    Symbol_name_CF=246
    Simple_name_CF=247
    SPACE_CF=248
    COMMENT_CF=249
    Simple_name_LL=250
    SPACE_LL=251

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Cns_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CnsMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_angle_restraintContext,i)


        def plane_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Rdc_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_restraintContext,i)


        def conformation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_db_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_anisotropy_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def patch_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Patch_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Patch_statementContext,i)


        def parameter_setting(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Parameter_settingContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Parameter_settingContext,i)


        def noe_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assign_loopContext,i)


        def dihedral_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assign_loopContext,i)


        def sani_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assign_loopContext,i)


        def coup_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assign_loopContext,i)


        def carbon_shift_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assign_loopContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assign_loopContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.ObservedContext,i)


        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_cns_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCns_mr" ):
                listener.enterCns_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCns_mr" ):
                listener.exitCns_mr(self)




    def cns_mr(self):

        localctx = CnsMRParser.Cns_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_cns_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 181
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Noe) | (1 << CnsMRParser.Assign) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Restraints) | (1 << CnsMRParser.Dihedral) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Plane) | (1 << CnsMRParser.Group) | (1 << CnsMRParser.Harmonic) | (1 << CnsMRParser.Sanisotropy) | (1 << CnsMRParser.Coupling) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & ((1 << (CnsMRParser.Proton - 69)) | (1 << (CnsMRParser.Observed - 69)) | (1 << (CnsMRParser.Conformation - 69)) | (1 << (CnsMRParser.Danisotropy - 69)) | (1 << (CnsMRParser.OneBond - 69)) | (1 << (CnsMRParser.AngleDb - 69)) | (1 << (CnsMRParser.Flags - 69)) | (1 << (CnsMRParser.BondedTo - 69)) | (1 << (CnsMRParser.Vector - 69)) | (1 << (CnsMRParser.Evaluate_Lp - 69)) | (1 << (CnsMRParser.Patch - 69)) | (1 << (CnsMRParser.Parameter - 69)) | (1 << (CnsMRParser.HBonded - 69)))) != 0) or ((((_la - 133)) & ~0x3f) == 0 and ((1 << (_la - 133)) & ((1 << (CnsMRParser.Improper - 133)) | (1 << (CnsMRParser.NBFix - 133)) | (1 << (CnsMRParser.NonB - 133)) | (1 << (CnsMRParser.VDWOff - 133)) | (1 << (CnsMRParser.Verbose - 133)) | (1 << (CnsMRParser.For - 133)))) != 0):
                self.state = 179
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 148
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 149
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 150
                    self.plane_restraint()
                    pass

                elif la_ == 4:
                    self.state = 151
                    self.harmonic_restraint()
                    pass

                elif la_ == 5:
                    self.state = 152
                    self.rdc_restraint()
                    pass

                elif la_ == 6:
                    self.state = 153
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 154
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 155
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 156
                    self.conformation_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 157
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 11:
                    self.state = 158
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 12:
                    self.state = 159
                    self.angle_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 160
                    self.flag_statement()
                    pass

                elif la_ == 14:
                    self.state = 161
                    self.vector_statement()
                    pass

                elif la_ == 15:
                    self.state = 162
                    self.evaluate_statement()
                    pass

                elif la_ == 16:
                    self.state = 163
                    self.patch_statement()
                    pass

                elif la_ == 17:
                    self.state = 164
                    self.parameter_setting()
                    pass

                elif la_ == 18:
                    self.state = 165
                    self.noe_assign_loop()
                    pass

                elif la_ == 19:
                    self.state = 166
                    self.dihedral_assign_loop()
                    pass

                elif la_ == 20:
                    self.state = 167
                    self.sani_assign_loop()
                    pass

                elif la_ == 21:
                    self.state = 168
                    self.coup_assign_loop()
                    pass

                elif la_ == 22:
                    self.state = 169
                    self.carbon_shift_assign_loop()
                    pass

                elif la_ == 23:
                    self.state = 170
                    self.noe_assign()
                    pass

                elif la_ == 24:
                    self.state = 171
                    self.dihedral_assign()
                    pass

                elif la_ == 25:
                    self.state = 172
                    self.sani_assign()
                    pass

                elif la_ == 26:
                    self.state = 173
                    self.plane_statement()
                    pass

                elif la_ == 27:
                    self.state = 174
                    self.harmonic_assign()
                    pass

                elif la_ == 28:
                    self.state = 175
                    self.coup_assign()
                    pass

                elif la_ == 29:
                    self.state = 176
                    self.carbon_shift_assign()
                    pass

                elif la_ == 30:
                    self.state = 177
                    self.observed()
                    pass

                elif la_ == 31:
                    self.state = 178
                    self.parameter_statement()
                    pass


                self.state = 183
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 184
            self.match(CnsMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(CnsMRParser.Noe, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = CnsMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 186
            self.match(CnsMRParser.Noe)
            self.state = 190
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 187
                    self.noe_statement() 
                self.state = 192
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 193
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = CnsMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 195
                self.match(CnsMRParser.Restraints)


            self.state = 198
            self.match(CnsMRParser.Dihedral)
            self.state = 202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Scale) | (1 << CnsMRParser.Nassign) | (1 << CnsMRParser.Print_any))) != 0) or _la==CnsMRParser.Vector or _la==CnsMRParser.For:
                self.state = 199
                self.dihedral_statement()
                self.state = 204
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 205
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Plane(self):
            return self.getToken(CnsMRParser.Plane, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def plane_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Plane_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Plane_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_restraint" ):
                listener.enterPlane_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_restraint" ):
                listener.exitPlane_restraint(self)




    def plane_restraint(self):

        localctx = CnsMRParser.Plane_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_plane_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 207
                self.match(CnsMRParser.Restraints)


            self.state = 210
            self.match(CnsMRParser.Plane)
            self.state = 214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Initialize) | (1 << CnsMRParser.Print_any) | (1 << CnsMRParser.Group))) != 0) or _la==CnsMRParser.Vector:
                self.state = 211
                self.plane_statement()
                self.state = 216
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 217
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(CnsMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Restraints(self):
            return self.getToken(CnsMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = CnsMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Restraints:
                self.state = 219
                self.match(CnsMRParser.Restraints)


            self.state = 222
            self.match(CnsMRParser.Harmonic)
            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Exponent or _la==CnsMRParser.Normal or _la==CnsMRParser.Vector:
                self.state = 223
                self.harmonic_statement()
                self.state = 228
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 229
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(CnsMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = CnsMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 231
            self.match(CnsMRParser.Sanisotropy)
            self.state = 235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0) or _la==CnsMRParser.For:
                self.state = 232
                self.sani_statement()
                self.state = 237
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 238
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(CnsMRParser.Coupling, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = CnsMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 240
            self.match(CnsMRParser.Coupling)
            self.state = 244
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Cv) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Partition) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0) or _la==CnsMRParser.For:
                self.state = 241
                self.coupling_statement()
                self.state = 246
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 247
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = CnsMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 249
            self.match(CnsMRParser.Carbon)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 5)) & ~0x3f) == 0 and ((1 << (_la - 5)) & ((1 << (CnsMRParser.Assign - 5)) | (1 << (CnsMRParser.Classification - 5)) | (1 << (CnsMRParser.Nrestraints - 5)) | (1 << (CnsMRParser.Potential - 5)) | (1 << (CnsMRParser.Print - 5)) | (1 << (CnsMRParser.Reset - 5)) | (1 << (CnsMRParser.ForceConstant - 5)) | (1 << (CnsMRParser.Expectation - 5)) | (1 << (CnsMRParser.PhiStep - 5)) | (1 << (CnsMRParser.PsiStep - 5)) | (1 << (CnsMRParser.Rcoil - 5)) | (1 << (CnsMRParser.Zero - 5)))) != 0) or _la==CnsMRParser.For:
                self.state = 250
                self.carbon_shift_statement()
                self.state = 255
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 256
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(CnsMRParser.Proton, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = CnsMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.match(CnsMRParser.Proton)
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Classification) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant) | (1 << CnsMRParser.Carbon))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (CnsMRParser.Rcoil - 67)) | (1 << (CnsMRParser.Observed - 67)) | (1 << (CnsMRParser.Anisotropy - 67)) | (1 << (CnsMRParser.Amides - 67)) | (1 << (CnsMRParser.Nitrogens - 67)) | (1 << (CnsMRParser.Oxygens - 67)) | (1 << (CnsMRParser.RingAtoms - 67)) | (1 << (CnsMRParser.AlphasAndAmides - 67)) | (1 << (CnsMRParser.Error - 67)))) != 0):
                self.state = 259
                self.proton_shift_statement()
                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 265
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Conformation(self):
            return self.getToken(CnsMRParser.Conformation, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def conformation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Conformation_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Conformation_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_db_restraint" ):
                listener.enterConformation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_db_restraint" ):
                listener.exitConformation_db_restraint(self)




    def conformation_db_restraint(self):

        localctx = CnsMRParser.Conformation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_conformation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(CnsMRParser.Conformation)
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Compressed - 64)) | (1 << (CnsMRParser.Phase - 64)) | (1 << (CnsMRParser.Size - 64)))) != 0):
                self.state = 268
                self.conformation_statement()
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 274
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(CnsMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = CnsMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 276
            self.match(CnsMRParser.Danisotropy)
            self.state = 280
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 277
                self.diffusion_statement()
                self.state = 282
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 283
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(CnsMRParser.OneBond, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = CnsMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(CnsMRParser.OneBond)
            self.state = 289
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.Coefficients) | (1 << CnsMRParser.ForceConstant))) != 0):
                self.state = 286
                self.one_bond_coupling_statement()
                self.state = 291
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 292
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = CnsMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 294
            self.match(CnsMRParser.AngleDb)
            self.state = 298
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CnsMRParser.Assign) | (1 << CnsMRParser.Classification) | (1 << CnsMRParser.Nrestraints) | (1 << CnsMRParser.Potential) | (1 << CnsMRParser.Print) | (1 << CnsMRParser.Reset) | (1 << CnsMRParser.ForceConstant))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CnsMRParser.Expectation - 64)) | (1 << (CnsMRParser.Zero - 64)) | (1 << (CnsMRParser.Error - 64)) | (1 << (CnsMRParser.Size - 64)) | (1 << (CnsMRParser.DerivFlag - 64)))) != 0):
                self.state = 295
                self.angle_db_statement()
                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 301
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Analysis(self):
            return self.getToken(CnsMRParser.Analysis, 0)

        def Noe_analysis(self):
            return self.getToken(CnsMRParser.Noe_analysis, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def noe_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,0)


        def noe_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Noe_assign_loopContext,0)


        def Asymptote(self):
            return self.getToken(CnsMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Average(self):
            return self.getToken(CnsMRParser.Average, 0)

        def Simple_name_AM(self):
            return self.getToken(CnsMRParser.Simple_name_AM, 0)

        def Averaging_methods(self):
            return self.getToken(CnsMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(CnsMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(CnsMRParser.Ceiling, 0)

        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(CnsMRParser.CountViol, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Den(self):
            return self.getToken(CnsMRParser.Den, 0)

        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Update(self):
            return self.getToken(CnsMRParser.Update, 0)

        def Gamma(self):
            return self.getToken(CnsMRParser.Gamma, 0)

        def Kappa(self):
            return self.getToken(CnsMRParser.Kappa, 0)

        def Distribute(self):
            return self.getToken(CnsMRParser.Distribute, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Ensemble(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Ensemble)
            else:
                return self.getToken(CnsMRParser.Ensemble, i)

        def Monomers(self):
            return self.getToken(CnsMRParser.Monomers, 0)

        def Ncount(self):
            return self.getToken(CnsMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Outd(self):
            return self.getToken(CnsMRParser.Outd, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Simple_name_PT(self):
            return self.getToken(CnsMRParser.Simple_name_PT, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(CnsMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Predict_statementContext,0)


        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Raverage(self):
            return self.getToken(CnsMRParser.Raverage, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(CnsMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(CnsMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(CnsMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(CnsMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(CnsMRParser.SqOffset, 0)

        def Taverage(self):
            return self.getToken(CnsMRParser.Taverage, 0)

        def Temperature(self):
            return self.getToken(CnsMRParser.Temperature, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = CnsMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 432
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,30,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 303
                self.match(CnsMRParser.Analysis)
                self.state = 305
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 304
                    self.match(CnsMRParser.Equ_op)


                self.state = 307
                self.match(CnsMRParser.Noe_analysis)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 308
                self.noe_assign()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 309
                self.noe_assign_loop()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 310
                self.match(CnsMRParser.Asymptote)
                self.state = 311
                self.match(CnsMRParser.Simple_name)
                self.state = 312
                self.number_s()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 313
                self.match(CnsMRParser.Average)
                self.state = 314
                self.match(CnsMRParser.Simple_name_AM)
                self.state = 315
                self.match(CnsMRParser.Averaging_methods)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 316
                self.match(CnsMRParser.Bhig)
                self.state = 317
                self.match(CnsMRParser.Simple_name)
                self.state = 318
                self.number_s()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 319
                self.match(CnsMRParser.Ceiling)
                self.state = 321
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 320
                    self.match(CnsMRParser.Equ_op)


                self.state = 323
                self.number_s()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 324
                self.match(CnsMRParser.Classification)
                self.state = 326
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 325
                    self.match(CnsMRParser.Equ_op)


                self.state = 328
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 329
                self.match(CnsMRParser.CountViol)
                self.state = 330
                self.match(CnsMRParser.Simple_name)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 331
                self.match(CnsMRParser.Cv)
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 332
                    self.match(CnsMRParser.Equ_op)


                self.state = 335
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 336
                self.match(CnsMRParser.Den)
                self.state = 337
                self.match(CnsMRParser.Initialize)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 338
                self.match(CnsMRParser.Den)
                self.state = 339
                self.match(CnsMRParser.Update)
                self.state = 340
                self.match(CnsMRParser.Gamma)
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 341
                    self.match(CnsMRParser.Equ_op)


                self.state = 344
                self.number_s()
                self.state = 345
                self.match(CnsMRParser.Kappa)
                self.state = 347
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 346
                    self.match(CnsMRParser.Equ_op)


                self.state = 349
                self.number_s()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 351
                self.match(CnsMRParser.Distribute)
                self.state = 352
                self.match(CnsMRParser.Simple_name)
                self.state = 353
                self.match(CnsMRParser.Simple_name)
                self.state = 354
                self.number_s()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 358
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 355
                        self.match(CnsMRParser.Ensemble) 
                    self.state = 360
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

                self.state = 361
                self.match(CnsMRParser.End)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 362
                self.match(CnsMRParser.Monomers)
                self.state = 363
                self.match(CnsMRParser.Simple_name)
                self.state = 364
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 365
                self.match(CnsMRParser.Ncount)
                self.state = 366
                self.match(CnsMRParser.Simple_name)
                self.state = 367
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 368
                self.match(CnsMRParser.Nrestraints)
                self.state = 370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 369
                    self.match(CnsMRParser.Equ_op)


                self.state = 372
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 373
                self.match(CnsMRParser.Outd)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 374
                self.match(CnsMRParser.Partition)
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 375
                    self.match(CnsMRParser.Equ_op)


                self.state = 378
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 379
                self.match(CnsMRParser.Potential)
                self.state = 380
                self.match(CnsMRParser.Simple_name_PT)
                self.state = 381
                self.match(CnsMRParser.Potential_types)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 382
                self.match(CnsMRParser.Predict)
                self.state = 383
                self.predict_statement()
                self.state = 384
                self.match(CnsMRParser.End)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 386
                self.match(CnsMRParser.Print)
                self.state = 387
                self.match(CnsMRParser.Threshold)
                self.state = 389
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 388
                    self.match(CnsMRParser.Equ_op)


                self.state = 391
                self.number_s()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 392
                self.match(CnsMRParser.Raverage)
                self.state = 396
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 393
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 398
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

                self.state = 399
                self.match(CnsMRParser.End)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 400
                self.match(CnsMRParser.Reset)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 401
                self.match(CnsMRParser.Rswitch)
                self.state = 402
                self.match(CnsMRParser.Simple_name)
                self.state = 403
                self.number_s()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 404
                self.match(CnsMRParser.Scale)
                self.state = 405
                self.match(CnsMRParser.Simple_name)
                self.state = 406
                self.number_s()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 407
                self.match(CnsMRParser.SoExponent)
                self.state = 408
                self.match(CnsMRParser.Simple_name)
                self.state = 409
                self.number_s()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 410
                self.match(CnsMRParser.SqConstant)
                self.state = 411
                self.match(CnsMRParser.Simple_name)
                self.state = 412
                self.number_s()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 413
                self.match(CnsMRParser.SqExponent)
                self.state = 414
                self.match(CnsMRParser.Simple_name)
                self.state = 415
                self.number_s()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 416
                self.match(CnsMRParser.SqOffset)
                self.state = 417
                self.match(CnsMRParser.Simple_name)
                self.state = 418
                self.number_s()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 419
                self.match(CnsMRParser.Taverage)
                self.state = 423
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,28,self._ctx)
                while _alt!=1 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1+1:
                        self.state = 420
                        self.match(CnsMRParser.Simple_name) 
                    self.state = 425
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,28,self._ctx)

                self.state = 426
                self.match(CnsMRParser.End)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 427
                self.match(CnsMRParser.Temperature)
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 428
                    self.match(CnsMRParser.Equ_op)


                self.state = 431
                self.number_s()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Assign)
            else:
                return self.getToken(CnsMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = CnsMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 434
            self.match(CnsMRParser.Assign)
            self.state = 435
            self.selection()
            self.state = 436
            self.selection()
            self.state = 437
            self.number()
            self.state = 439
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
            if la_ == 1:
                self.state = 438
                self.number()


            self.state = 442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (CnsMRParser.Integer - 147)) | (1 << (CnsMRParser.Real - 147)) | (1 << (CnsMRParser.Symbol_name - 147)))) != 0):
                self.state = 441
                self.number()


            self.state = 447
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 444
                    self.noe_annotation() 
                self.state = 449
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

            self.state = 467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 450
                self.match(CnsMRParser.Or_op)
                self.state = 452
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Assign:
                    self.state = 451
                    self.match(CnsMRParser.Assign)


                self.state = 454
                self.selection()
                self.state = 455
                self.selection()
                self.state = 457
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,35,self._ctx)
                if la_ == 1:
                    self.state = 456
                    self.number()


                self.state = 460
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
                if la_ == 1:
                    self.state = 459
                    self.number()


                self.state = 463
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (CnsMRParser.Integer - 147)) | (1 << (CnsMRParser.Real - 147)) | (1 << (CnsMRParser.Symbol_name - 147)))) != 0):
                    self.state = 462
                    self.number()


                self.state = 469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(CnsMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(CnsMRParser.Cuton, 0)

        def From(self):
            return self.getToken(CnsMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(CnsMRParser.To, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = CnsMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 470
                self.match(CnsMRParser.Cutoff)
                self.state = 472
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 471
                    self.match(CnsMRParser.Equ_op)


                self.state = 474
                self.number_s()
                pass
            elif token in [CnsMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 475
                self.match(CnsMRParser.Cuton)
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 476
                    self.match(CnsMRParser.Equ_op)


                self.state = 479
                self.number_s()
                pass
            elif token in [CnsMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 480
                self.match(CnsMRParser.From)
                self.state = 481
                self.selection()
                pass
            elif token in [CnsMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 482
                self.match(CnsMRParser.To)
                self.state = 483
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(CnsMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(CnsMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(CnsMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(CnsMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(CnsMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(CnsMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = CnsMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 521
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 486
                self.match(CnsMRParser.Peak)
                self.state = 488
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 487
                    self.match(CnsMRParser.Equ_op)


                self.state = 490
                self.number_a()
                pass
            elif token in [CnsMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 491
                self.match(CnsMRParser.Spectrum)
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 492
                    self.match(CnsMRParser.Equ_op)


                self.state = 495
                self.number_a()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 496
                self.match(CnsMRParser.Weight)
                self.state = 498
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 497
                    self.match(CnsMRParser.Equ_op)


                self.state = 500
                self.number_a()
                pass
            elif token in [CnsMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 501
                self.match(CnsMRParser.Volume)
                self.state = 503
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 502
                    self.match(CnsMRParser.Equ_op)


                self.state = 505
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 506
                self.match(CnsMRParser.Ppm1)
                self.state = 508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 507
                    self.match(CnsMRParser.Equ_op)


                self.state = 510
                self.number_a()
                pass
            elif token in [CnsMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 511
                self.match(CnsMRParser.Ppm2)
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 512
                    self.match(CnsMRParser.Equ_op)


                self.state = 515
                self.number_a()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 516
                self.match(CnsMRParser.Cv)
                self.state = 518
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 517
                    self.match(CnsMRParser.Equ_op)


                self.state = 520
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def dihedral_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Dihedral_assign_loopContext,0)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Nassign(self):
            return self.getToken(CnsMRParser.Nassign, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(CnsMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = CnsMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 548
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 523
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 524
                self.dihedral_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 525
                self.dihedral_assign_loop()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 526
                self.match(CnsMRParser.Cv)
                self.state = 528
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 527
                    self.match(CnsMRParser.Equ_op)


                self.state = 530
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Nassign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 531
                self.match(CnsMRParser.Nassign)
                self.state = 533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 532
                    self.match(CnsMRParser.Equ_op)


                self.state = 535
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 536
                self.match(CnsMRParser.Partition)
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 537
                    self.match(CnsMRParser.Equ_op)


                self.state = 540
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 541
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Scale]:
                self.enterOuterAlt(localctx, 8)
                self.state = 542
                self.match(CnsMRParser.Scale)
                self.state = 544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 543
                    self.match(CnsMRParser.Equ_op)


                self.state = 546
                self.number_s()
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 9)
                self.state = 547
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = CnsMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.match(CnsMRParser.Assign)
            self.state = 551
            self.selection()
            self.state = 552
            self.selection()
            self.state = 553
            self.selection()
            self.state = 554
            self.selection()
            self.state = 555
            self.number()
            self.state = 556
            self.number()
            self.state = 557
            self.number()
            self.state = 558
            self.match(CnsMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Plane_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def Group(self):
            return self.getToken(CnsMRParser.Group, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(CnsMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(CnsMRParser.Print_any, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_plane_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlane_statement" ):
                listener.enterPlane_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlane_statement" ):
                listener.exitPlane_statement(self)




    def plane_statement(self):

        localctx = CnsMRParser.Plane_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_plane_statement)
        self._la = 0 # Token type
        try:
            self.state = 571
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 560
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Group]:
                self.enterOuterAlt(localctx, 2)
                self.state = 561
                self.match(CnsMRParser.Group)
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Selection or _la==CnsMRParser.Weight:
                    self.state = 562
                    self.group_statement()
                    self.state = 567
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 568
                self.match(CnsMRParser.End)
                pass
            elif token in [CnsMRParser.Initialize]:
                self.enterOuterAlt(localctx, 3)
                self.state = 569
                self.match(CnsMRParser.Initialize)
                pass
            elif token in [CnsMRParser.Print_any]:
                self.enterOuterAlt(localctx, 4)
                self.state = 570
                self.match(CnsMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(CnsMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(CnsMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = CnsMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 583
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 573
                self.match(CnsMRParser.Selection)
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 574
                    self.match(CnsMRParser.Equ_op)


                self.state = 577
                self.selection()
                pass
            elif token in [CnsMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 578
                self.match(CnsMRParser.Weight)
                self.state = 580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 579
                    self.match(CnsMRParser.Equ_op)


                self.state = 582
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_statementContext,0)


        def Exponent(self):
            return self.getToken(CnsMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(CnsMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = CnsMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 625
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 585
                self.vector_statement()
                pass
            elif token in [CnsMRParser.Exponent]:
                self.enterOuterAlt(localctx, 2)
                self.state = 586
                self.match(CnsMRParser.Exponent)
                self.state = 588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 587
                    self.match(CnsMRParser.Equ_op)


                self.state = 590
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Normal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 591
                self.match(CnsMRParser.Normal)
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 592
                    self.match(CnsMRParser.Equ_op)


                self.state = 595
                self.match(CnsMRParser.L_paren)
                self.state = 621
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integer, CnsMRParser.Real, CnsMRParser.Symbol_name]:
                    self.state = 596
                    self.number_s()
                    self.state = 598
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 597
                        self.match(CnsMRParser.Comma)


                    self.state = 600
                    self.number_s()
                    self.state = 602
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 601
                        self.match(CnsMRParser.Comma)


                    self.state = 604
                    self.number_s()
                    pass
                elif token in [CnsMRParser.Tail]:
                    self.state = 606
                    self.match(CnsMRParser.Tail)
                    self.state = 608
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 607
                        self.match(CnsMRParser.Equ_op)


                    self.state = 610
                    self.selection()
                    self.state = 612
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Comma:
                        self.state = 611
                        self.match(CnsMRParser.Comma)


                    self.state = 619
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Head:
                        self.state = 614
                        self.match(CnsMRParser.Head)
                        self.state = 616
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CnsMRParser.Equ_op:
                            self.state = 615
                            self.match(CnsMRParser.Equ_op)


                        self.state = 618
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 623
                self.match(CnsMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = CnsMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.match(CnsMRParser.Assign)
            self.state = 628
            self.selection()
            self.state = 629
            self.number()
            self.state = 630
            self.number()
            self.state = 631
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,0)


        def sani_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Sani_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = CnsMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 664
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 633
                self.sani_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 634
                self.sani_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 635
                self.match(CnsMRParser.Classification)
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 636
                    self.match(CnsMRParser.Equ_op)


                self.state = 639
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 640
                self.match(CnsMRParser.Coefficients)
                self.state = 641
                self.number_s()
                self.state = 642
                self.number_s()
                self.state = 643
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 645
                self.match(CnsMRParser.ForceConstant)
                self.state = 647
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 646
                    self.match(CnsMRParser.Equ_op)


                self.state = 649
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 650
                self.match(CnsMRParser.Nrestraints)
                self.state = 652
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 651
                    self.match(CnsMRParser.Equ_op)


                self.state = 654
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 7)
                self.state = 655
                self.match(CnsMRParser.Potential)
                self.state = 657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 656
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 659
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 660
                self.match(CnsMRParser.Print)
                self.state = 661
                self.match(CnsMRParser.Threshold)
                self.state = 662
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 663
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = CnsMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 666
            self.match(CnsMRParser.Assign)
            self.state = 667
            self.selection()
            self.state = 668
            self.selection()
            self.state = 669
            self.selection()
            self.state = 670
            self.selection()
            self.state = 671
            self.selection()
            self.state = 672
            self.selection()
            self.state = 673
            self.number()
            self.state = 675
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
            if la_ == 1:
                self.state = 674
                self.number()


            self.state = 678
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (CnsMRParser.Integer - 147)) | (1 << (CnsMRParser.Real - 147)) | (1 << (CnsMRParser.Symbol_name - 147)))) != 0):
                self.state = 677
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,0)


        def coup_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Coup_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(CnsMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(CnsMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = CnsMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 730
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 680
                self.coup_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 681
                self.coup_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 682
                self.match(CnsMRParser.Classification)
                self.state = 684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 683
                    self.match(CnsMRParser.Equ_op)


                self.state = 686
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 687
                self.match(CnsMRParser.Coefficients)
                self.state = 688
                self.number_s()
                self.state = 689
                self.number_s()
                self.state = 690
                self.number_s()
                self.state = 691
                self.number_s()
                pass
            elif token in [CnsMRParser.Cv]:
                self.enterOuterAlt(localctx, 5)
                self.state = 693
                self.match(CnsMRParser.Cv)
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 694
                    self.match(CnsMRParser.Equ_op)


                self.state = 697
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 698
                self.match(CnsMRParser.ForceConstant)
                self.state = 699
                self.number_s()
                self.state = 701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (CnsMRParser.Integer - 147)) | (1 << (CnsMRParser.Real - 147)) | (1 << (CnsMRParser.Symbol_name - 147)))) != 0):
                    self.state = 700
                    self.number_s()


                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 703
                self.match(CnsMRParser.Nrestraints)
                self.state = 705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 704
                    self.match(CnsMRParser.Equ_op)


                self.state = 707
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Partition]:
                self.enterOuterAlt(localctx, 8)
                self.state = 708
                self.match(CnsMRParser.Partition)
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 709
                    self.match(CnsMRParser.Equ_op)


                self.state = 712
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 713
                self.match(CnsMRParser.Potential)
                self.state = 715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 714
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 717
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 718
                self.match(CnsMRParser.Print)
                self.state = 719
                self.match(CnsMRParser.Threshold)
                self.state = 720
                self.number_s()
                self.state = 727
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 721
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 722
                    self.match(CnsMRParser.Classification)
                    self.state = 724
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 723
                        self.match(CnsMRParser.Equ_op)


                    self.state = 726
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 729
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = CnsMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 732
            self.match(CnsMRParser.Assign)
            self.state = 733
            self.selection()
            self.state = 734
            self.selection()
            self.state = 735
            self.selection()
            self.state = 736
            self.selection()
            self.state = 742
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 737
                self.selection()
                self.state = 738
                self.selection()
                self.state = 739
                self.selection()
                self.state = 740
                self.selection()


            self.state = 744
            self.number()
            self.state = 745
            self.number()
            self.state = 749
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (CnsMRParser.Integer - 147)) | (1 << (CnsMRParser.Real - 147)) | (1 << (CnsMRParser.Symbol_name - 147)))) != 0):
                self.state = 746
                self.number()
                self.state = 747
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,0)


        def carbon_shift_assign_loop(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assign_loopContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(CnsMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(CnsMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = CnsMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 796
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 751
                self.carbon_shift_assign()
                pass
            elif token in [CnsMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 752
                self.carbon_shift_assign_loop()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 753
                self.match(CnsMRParser.Classification)
                self.state = 755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 754
                    self.match(CnsMRParser.Equ_op)


                self.state = 757
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 758
                self.match(CnsMRParser.Expectation)
                self.state = 759
                self.match(CnsMRParser.Integer)
                self.state = 760
                self.match(CnsMRParser.Integer)
                self.state = 761
                self.number_s()
                self.state = 762
                self.number_s()
                self.state = 763
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 765
                self.match(CnsMRParser.ForceConstant)
                self.state = 767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 766
                    self.match(CnsMRParser.Equ_op)


                self.state = 769
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 770
                self.match(CnsMRParser.Nrestraints)
                self.state = 772
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 771
                    self.match(CnsMRParser.Equ_op)


                self.state = 774
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 775
                self.match(CnsMRParser.PhiStep)
                self.state = 777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 776
                    self.match(CnsMRParser.Equ_op)


                self.state = 779
                self.number_s()
                pass
            elif token in [CnsMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 8)
                self.state = 780
                self.match(CnsMRParser.PsiStep)
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 781
                    self.match(CnsMRParser.Equ_op)


                self.state = 784
                self.number_s()
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 785
                self.match(CnsMRParser.Potential)
                self.state = 787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 786
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 789
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 790
                self.match(CnsMRParser.Print)
                self.state = 791
                self.match(CnsMRParser.Threshold)
                self.state = 792
                self.number_s()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 11)
                self.state = 793
                self.carbon_shift_rcoil()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 794
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 795
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = CnsMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 798
            self.match(CnsMRParser.Assign)
            self.state = 799
            self.selection()
            self.state = 800
            self.selection()
            self.state = 801
            self.selection()
            self.state = 802
            self.selection()
            self.state = 803
            self.selection()
            self.state = 804
            self.number()
            self.state = 805
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = CnsMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.match(CnsMRParser.Rcoil)
            self.state = 808
            self.selection()
            self.state = 809
            self.number()
            self.state = 810
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(CnsMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(CnsMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = CnsMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 812
                self.observed()
                pass
            elif token in [CnsMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 813
                self.proton_shift_rcoil()
                pass
            elif token in [CnsMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 814
                self.proton_shift_anisotropy()
                pass
            elif token in [CnsMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 815
                self.proton_shift_amides()
                pass
            elif token in [CnsMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 816
                self.proton_shift_carbons()
                pass
            elif token in [CnsMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 817
                self.proton_shift_nitrogens()
                pass
            elif token in [CnsMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 818
                self.proton_shift_oxygens()
                pass
            elif token in [CnsMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 819
                self.proton_shift_ring_atoms()
                pass
            elif token in [CnsMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 820
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 821
                self.match(CnsMRParser.Classification)
                self.state = 823
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 822
                    self.match(CnsMRParser.Equ_op)


                self.state = 825
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 826
                self.match(CnsMRParser.Error)
                self.state = 828
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 827
                    self.match(CnsMRParser.Equ_op)


                self.state = 830
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 12)
                self.state = 831
                self.match(CnsMRParser.ForceConstant)
                self.state = 832
                self.number_s()
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (CnsMRParser.Integer - 147)) | (1 << (CnsMRParser.Real - 147)) | (1 << (CnsMRParser.Symbol_name - 147)))) != 0):
                    self.state = 833
                    self.number_s()


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 836
                self.match(CnsMRParser.Potential)
                self.state = 837
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 838
                self.match(CnsMRParser.Print)
                self.state = 839
                self.match(CnsMRParser.Threshold)
                self.state = 840
                self.number_s()
                self.state = 847
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 841
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 842
                    self.match(CnsMRParser.Classification)
                    self.state = 844
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 843
                        self.match(CnsMRParser.Equ_op)


                    self.state = 846
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 849
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 851
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(CnsMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = CnsMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(CnsMRParser.Observed)
            self.state = 855
            self.selection()
            self.state = 857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 856
                self.selection()


            self.state = 859
            self.number()
            self.state = 861
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (CnsMRParser.Integer - 147)) | (1 << (CnsMRParser.Real - 147)) | (1 << (CnsMRParser.Symbol_name - 147)))) != 0):
                self.state = 860
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(CnsMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def number(self):
            return self.getTypedRuleContext(CnsMRParser.NumberContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = CnsMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            self.match(CnsMRParser.Rcoil)
            self.state = 864
            self.selection()
            self.state = 865
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(CnsMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(CnsMRParser.Logical, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = CnsMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 867
            self.match(CnsMRParser.Anisotropy)
            self.state = 868
            self.selection()
            self.state = 869
            self.selection()
            self.state = 870
            self.selection()
            self.state = 871
            self.match(CnsMRParser.Simple_name)
            self.state = 873
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Logical:
                self.state = 872
                self.match(CnsMRParser.Logical)


            self.state = 875
            self.match(CnsMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(CnsMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = CnsMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 877
            self.match(CnsMRParser.Amides)
            self.state = 878
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(CnsMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = CnsMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 880
            self.match(CnsMRParser.Carbon)
            self.state = 881
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(CnsMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = CnsMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 883
            self.match(CnsMRParser.Nitrogens)
            self.state = 884
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(CnsMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = CnsMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.match(CnsMRParser.Oxygens)
            self.state = 887
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(CnsMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = CnsMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 889
            self.match(CnsMRParser.RingAtoms)
            self.state = 890
            self.match(CnsMRParser.Simple_name)
            self.state = 891
            self.selection()
            self.state = 892
            self.selection()
            self.state = 893
            self.selection()
            self.state = 894
            self.selection()
            self.state = 895
            self.selection()
            self.state = 897
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 896
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(CnsMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = CnsMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 899
            self.match(CnsMRParser.AlphasAndAmides)
            self.state = 900
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conformation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conf_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Conf_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Compressed(self):
            return self.getToken(CnsMRParser.Compressed, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Phase(self):
            return self.getToken(CnsMRParser.Phase, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(CnsMRParser.Dimensions, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_conformation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConformation_statement" ):
                listener.enterConformation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConformation_statement" ):
                listener.exitConformation_statement(self)




    def conformation_statement(self):

        localctx = CnsMRParser.Conformation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_conformation_statement)
        self._la = 0 # Token type
        try:
            self.state = 985
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 902
                self.conf_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 903
                self.match(CnsMRParser.Classification)
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 904
                    self.match(CnsMRParser.Equ_op)


                self.state = 907
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Compressed]:
                self.enterOuterAlt(localctx, 3)
                self.state = 908
                self.match(CnsMRParser.Compressed)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 909
                self.match(CnsMRParser.Expectation)
                self.state = 910
                self.match(CnsMRParser.Integer)
                self.state = 912
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 911
                    self.match(CnsMRParser.Integer)


                self.state = 915
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 914
                    self.match(CnsMRParser.Integer)


                self.state = 918
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,108,self._ctx)
                if la_ == 1:
                    self.state = 917
                    self.match(CnsMRParser.Integer)


                self.state = 920
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 921
                self.match(CnsMRParser.Error)
                self.state = 923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 922
                    self.match(CnsMRParser.Equ_op)


                self.state = 925
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 926
                self.match(CnsMRParser.ForceConstant)
                self.state = 928
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 927
                    self.match(CnsMRParser.Equ_op)


                self.state = 930
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 931
                self.match(CnsMRParser.Nrestraints)
                self.state = 933
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 932
                    self.match(CnsMRParser.Equ_op)


                self.state = 935
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Phase]:
                self.enterOuterAlt(localctx, 8)
                self.state = 936
                self.match(CnsMRParser.Phase)
                self.state = 937
                self.match(CnsMRParser.Integer)
                self.state = 938
                self.match(CnsMRParser.Integer)
                self.state = 939
                self.match(CnsMRParser.Integer)
                self.state = 943
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
                if la_ == 1:
                    self.state = 940
                    self.match(CnsMRParser.Integer)
                    self.state = 941
                    self.match(CnsMRParser.Integer)
                    self.state = 942
                    self.match(CnsMRParser.Integer)


                self.state = 948
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 945
                    self.match(CnsMRParser.Integer)
                    self.state = 946
                    self.match(CnsMRParser.Integer)
                    self.state = 947
                    self.match(CnsMRParser.Integer)


                self.state = 953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 950
                    self.match(CnsMRParser.Integer)
                    self.state = 951
                    self.match(CnsMRParser.Integer)
                    self.state = 952
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 955
                self.match(CnsMRParser.Potential)
                self.state = 957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 956
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 959
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 960
                self.match(CnsMRParser.Print)
                self.state = 961
                self.match(CnsMRParser.Threshold)
                self.state = 962
                self.number_s()
                self.state = 969
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 963
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 964
                    self.match(CnsMRParser.Classification)
                    self.state = 966
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 965
                        self.match(CnsMRParser.Equ_op)


                    self.state = 968
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 971
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 12)
                self.state = 972
                self.match(CnsMRParser.Size)
                self.state = 973
                self.match(CnsMRParser.Dimensions)
                self.state = 974
                self.match(CnsMRParser.Integer)
                self.state = 976
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 975
                    self.match(CnsMRParser.Integer)


                self.state = 979
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                if la_ == 1:
                    self.state = 978
                    self.match(CnsMRParser.Integer)


                self.state = 982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Integer:
                    self.state = 981
                    self.match(CnsMRParser.Integer)


                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 13)
                self.state = 984
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Conf_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_conf_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConf_assign" ):
                listener.enterConf_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConf_assign" ):
                listener.exitConf_assign(self)




    def conf_assign(self):

        localctx = CnsMRParser.Conf_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_conf_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 987
            self.match(CnsMRParser.Assign)
            self.state = 988
            self.selection()
            self.state = 989
            self.selection()
            self.state = 990
            self.selection()
            self.state = 991
            self.selection()
            self.state = 997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 992
                self.selection()
                self.state = 993
                self.selection()
                self.state = 994
                self.selection()
                self.state = 995
                self.selection()


            self.state = 1004
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 999
                self.selection()
                self.state = 1000
                self.selection()
                self.state = 1001
                self.selection()
                self.state = 1002
                self.selection()


            self.state = 1011
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1006
                self.selection()
                self.state = 1007
                self.selection()
                self.state = 1008
                self.selection()
                self.state = 1009
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = CnsMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1045
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1013
                self.dani_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1014
                self.match(CnsMRParser.Classification)
                self.state = 1016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1015
                    self.match(CnsMRParser.Equ_op)


                self.state = 1018
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1019
                self.match(CnsMRParser.Coefficients)
                self.state = 1020
                self.number_s()
                self.state = 1021
                self.number_s()
                self.state = 1022
                self.number_s()
                self.state = 1023
                self.number_s()
                self.state = 1024
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1026
                self.match(CnsMRParser.ForceConstant)
                self.state = 1028
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1027
                    self.match(CnsMRParser.Equ_op)


                self.state = 1030
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1031
                self.match(CnsMRParser.Nrestraints)
                self.state = 1033
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1032
                    self.match(CnsMRParser.Equ_op)


                self.state = 1035
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1036
                self.match(CnsMRParser.Potential)
                self.state = 1038
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 1037
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 1040
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1041
                self.match(CnsMRParser.Print)
                self.state = 1042
                self.match(CnsMRParser.Threshold)
                self.state = 1043
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1044
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = CnsMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(CnsMRParser.Assign)
            self.state = 1048
            self.selection()
            self.state = 1049
            self.selection()
            self.state = 1050
            self.selection()
            self.state = 1051
            self.selection()
            self.state = 1052
            self.selection()
            self.state = 1053
            self.selection()
            self.state = 1054
            self.number()
            self.state = 1056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (CnsMRParser.Integer - 147)) | (1 << (CnsMRParser.Real - 147)) | (1 << (CnsMRParser.Symbol_name - 147)))) != 0):
                self.state = 1055
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(CnsMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(CnsMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = CnsMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1092
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1058
                self.one_bond_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1059
                self.match(CnsMRParser.Classification)
                self.state = 1061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1060
                    self.match(CnsMRParser.Equ_op)


                self.state = 1063
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1064
                self.match(CnsMRParser.Coefficients)
                self.state = 1065
                self.number_s()
                self.state = 1066
                self.number_s()
                self.state = 1067
                self.number_s()
                self.state = 1068
                self.number_s()
                self.state = 1069
                self.number_s()
                self.state = 1070
                self.number_s()
                self.state = 1071
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1073
                self.match(CnsMRParser.ForceConstant)
                self.state = 1075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1074
                    self.match(CnsMRParser.Equ_op)


                self.state = 1077
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1078
                self.match(CnsMRParser.Nrestraints)
                self.state = 1080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1079
                    self.match(CnsMRParser.Equ_op)


                self.state = 1082
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1083
                self.match(CnsMRParser.Potential)
                self.state = 1085
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 1084
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 1087
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1088
                self.match(CnsMRParser.Print)
                self.state = 1089
                self.match(CnsMRParser.Threshold)
                self.state = 1090
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1091
                self.match(CnsMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.NumberContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = CnsMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1094
            self.match(CnsMRParser.Assign)
            self.state = 1095
            self.selection()
            self.state = 1096
            self.selection()
            self.state = 1097
            self.selection()
            self.state = 1098
            self.selection()
            self.state = 1099
            self.selection()
            self.state = 1100
            self.selection()
            self.state = 1101
            self.selection()
            self.state = 1102
            self.selection()
            self.state = 1103
            self.number()
            self.state = 1104
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(CnsMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(CnsMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(CnsMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(CnsMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(CnsMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(CnsMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(CnsMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(CnsMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(CnsMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(CnsMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(CnsMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(CnsMRParser.Equ_op_PT, 0)

        def Print(self):
            return self.getToken(CnsMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(CnsMRParser.Threshold, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def Size(self):
            return self.getToken(CnsMRParser.Size, 0)

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def Zero(self):
            return self.getToken(CnsMRParser.Zero, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = CnsMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1158
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1106
                self.angle_db_assign()
                pass
            elif token in [CnsMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1107
                self.match(CnsMRParser.Classification)
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1108
                    self.match(CnsMRParser.Equ_op)


                self.state = 1111
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1112
                self.match(CnsMRParser.DerivFlag)
                self.state = 1114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1113
                    self.match(CnsMRParser.Equ_op)


                self.state = 1116
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1117
                self.match(CnsMRParser.Expectation)
                self.state = 1118
                self.match(CnsMRParser.Integer)
                self.state = 1119
                self.match(CnsMRParser.Integer)
                self.state = 1120
                self.number_s()
                pass
            elif token in [CnsMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1121
                self.match(CnsMRParser.Error)
                self.state = 1123
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1122
                    self.match(CnsMRParser.Equ_op)


                self.state = 1125
                self.number_s()
                pass
            elif token in [CnsMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1126
                self.match(CnsMRParser.ForceConstant)
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1127
                    self.match(CnsMRParser.Equ_op)


                self.state = 1130
                self.number_s()
                pass
            elif token in [CnsMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1131
                self.match(CnsMRParser.Nrestraints)
                self.state = 1133
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1132
                    self.match(CnsMRParser.Equ_op)


                self.state = 1135
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1136
                self.match(CnsMRParser.Potential)
                self.state = 1138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op_PT:
                    self.state = 1137
                    self.match(CnsMRParser.Equ_op_PT)


                self.state = 1140
                self.match(CnsMRParser.Potential_types)
                pass
            elif token in [CnsMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1141
                self.match(CnsMRParser.Print)
                self.state = 1142
                self.match(CnsMRParser.Threshold)
                self.state = 1143
                self.number_s()
                self.state = 1150
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.All]:
                    self.state = 1144
                    self.match(CnsMRParser.All)
                    pass
                elif token in [CnsMRParser.Classification]:
                    self.state = 1145
                    self.match(CnsMRParser.Classification)
                    self.state = 1147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1146
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1149
                    self.match(CnsMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [CnsMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1152
                self.match(CnsMRParser.Reset)
                pass
            elif token in [CnsMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1153
                self.match(CnsMRParser.Size)
                self.state = 1154
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Dihedral or _la==CnsMRParser.AngleDb):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1155
                self.match(CnsMRParser.Integer)
                self.state = 1156
                self.match(CnsMRParser.Integer)
                pass
            elif token in [CnsMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1157
                self.match(CnsMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CnsMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = CnsMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1160
            self.match(CnsMRParser.Assign)
            self.state = 1161
            self.selection()
            self.state = 1162
            self.selection()
            self.state = 1163
            self.selection()
            self.state = 1164
            self.selection()
            self.state = 1165
            self.selection()
            self.state = 1166
            self.selection()
            self.state = 1167
            self.selection()
            self.state = 1168
            self.selection()
            self.state = 1169
            self.selection()
            self.state = 1170
            self.selection()
            self.state = 1171
            self.selection()
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.L_paren:
                self.state = 1172
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = CnsMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.match(CnsMRParser.L_paren)
            self.state = 1176
            self.selection_expression()
            self.state = 1177
            self.match(CnsMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.TermContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Or_op)
            else:
                return self.getToken(CnsMRParser.Or_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = CnsMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1179
            self.term()
            self.state = 1184
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Or_op:
                self.state = 1180
                self.match(CnsMRParser.Or_op)
                self.state = 1181
                self.term()
                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.And_op)
            else:
                return self.getToken(CnsMRParser.And_op, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = CnsMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1187
            self.factor(0)
            self.state = 1192
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.And_op:
                self.state = 1188
                self.match(CnsMRParser.And_op)
                self.state = 1189
                self.factor(0)
                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(CnsMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(CnsMRParser.R_paren, 0)

        def All(self):
            return self.getToken(CnsMRParser.All, 0)

        def Atom(self):
            return self.getToken(CnsMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(CnsMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(CnsMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(CnsMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(CnsMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(CnsMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(CnsMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(CnsMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(CnsMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(CnsMRParser.Chemical, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def Colon(self):
            return self.getToken(CnsMRParser.Colon, 0)

        def Fbox(self):
            return self.getToken(CnsMRParser.Fbox, 0)

        def Hydrogen(self):
            return self.getToken(CnsMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(CnsMRParser.Id, 0)

        def Known(self):
            return self.getToken(CnsMRParser.Known, 0)

        def Name(self):
            return self.getToken(CnsMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Double_quote_string)
            else:
                return self.getToken(CnsMRParser.Double_quote_string, i)

        def NONE(self):
            return self.getToken(CnsMRParser.NONE, 0)

        def Not_op(self):
            return self.getToken(CnsMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(CnsMRParser.Point, 0)

        def Cut(self):
            return self.getToken(CnsMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma)
            else:
                return self.getToken(CnsMRParser.Comma, i)

        def Tail(self):
            return self.getToken(CnsMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(CnsMRParser.Head, 0)

        def Previous(self):
            return self.getToken(CnsMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(CnsMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(CnsMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(CnsMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(CnsMRParser.SegIdentifier, 0)

        def Sfbox(self):
            return self.getToken(CnsMRParser.Sfbox, 0)

        def Store1(self):
            return self.getToken(CnsMRParser.Store1, 0)

        def Store2(self):
            return self.getToken(CnsMRParser.Store2, 0)

        def Store3(self):
            return self.getToken(CnsMRParser.Store3, 0)

        def Store4(self):
            return self.getToken(CnsMRParser.Store4, 0)

        def Store5(self):
            return self.getToken(CnsMRParser.Store5, 0)

        def Store6(self):
            return self.getToken(CnsMRParser.Store6, 0)

        def Store7(self):
            return self.getToken(CnsMRParser.Store7, 0)

        def Store8(self):
            return self.getToken(CnsMRParser.Store8, 0)

        def Store9(self):
            return self.getToken(CnsMRParser.Store9, 0)

        def Tag(self):
            return self.getToken(CnsMRParser.Tag, 0)

        def Around(self):
            return self.getToken(CnsMRParser.Around, 0)

        def Saround(self):
            return self.getToken(CnsMRParser.Saround, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CnsMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 102
        self.enterRecursionRule(localctx, 102, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,167,self._ctx)
            if la_ == 1:
                self.state = 1196
                self.match(CnsMRParser.L_paren)
                self.state = 1197
                self.selection_expression()
                self.state = 1198
                self.match(CnsMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1200
                self.match(CnsMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1201
                self.match(CnsMRParser.Atom)
                self.state = 1202
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1203
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1204
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Simple_name or _la==CnsMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1205
                self.match(CnsMRParser.Attribute)
                self.state = 1207
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Abs:
                    self.state = 1206
                    self.match(CnsMRParser.Abs)


                self.state = 1209
                self.match(CnsMRParser.Attr_properties)
                self.state = 1210
                self.match(CnsMRParser.Comparison_ops)
                self.state = 1211
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1212
                self.match(CnsMRParser.BondedTo)
                self.state = 1213
                self.factor(30)
                pass

            elif la_ == 6:
                self.state = 1214
                self.match(CnsMRParser.ByGroup)
                self.state = 1215
                self.factor(29)
                pass

            elif la_ == 7:
                self.state = 1216
                self.match(CnsMRParser.ByRes)
                self.state = 1217
                self.factor(28)
                pass

            elif la_ == 8:
                self.state = 1218
                self.match(CnsMRParser.Chemical)
                self.state = 1226
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1219
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1220
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1223
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                    if la_ == 1:
                        self.state = 1221
                        self.match(CnsMRParser.Colon)
                        self.state = 1222
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1225
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1228
                self.match(CnsMRParser.Fbox)
                self.state = 1229
                self.number_f()
                self.state = 1230
                self.number_f()
                self.state = 1231
                self.number_f()
                self.state = 1232
                self.number_f()
                self.state = 1233
                self.number_f()
                self.state = 1234
                self.number_f()
                pass

            elif la_ == 10:
                self.state = 1236
                self.match(CnsMRParser.Hydrogen)
                pass

            elif la_ == 11:
                self.state = 1237
                self.match(CnsMRParser.Id)
                self.state = 1238
                self.match(CnsMRParser.Integer)
                pass

            elif la_ == 12:
                self.state = 1239
                self.match(CnsMRParser.Known)
                pass

            elif la_ == 13:
                self.state = 1240
                self.match(CnsMRParser.Name)
                self.state = 1253
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1241
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1242
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1245
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
                    if la_ == 1:
                        self.state = 1243
                        self.match(CnsMRParser.Colon)
                        self.state = 1244
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1247
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1250
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                    if la_ == 1:
                        self.state = 1248
                        self.match(CnsMRParser.Colon)
                        self.state = 1249
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1252
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 14:
                self.state = 1255
                self.match(CnsMRParser.NONE)
                pass

            elif la_ == 15:
                self.state = 1256
                self.match(CnsMRParser.Not_op)
                self.state = 1257
                self.factor(20)
                pass

            elif la_ == 16:
                self.state = 1258
                self.match(CnsMRParser.Point)
                self.state = 1259
                self.match(CnsMRParser.L_paren)
                self.state = 1260
                self.number_f()
                self.state = 1262
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1261
                    self.match(CnsMRParser.Comma)


                self.state = 1264
                self.number_f()
                self.state = 1266
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1265
                    self.match(CnsMRParser.Comma)


                self.state = 1268
                self.number_f()
                self.state = 1269
                self.match(CnsMRParser.R_paren)
                self.state = 1270
                self.match(CnsMRParser.Cut)
                self.state = 1271
                self.number_f()
                pass

            elif la_ == 17:
                self.state = 1273
                self.match(CnsMRParser.Point)
                self.state = 1274
                self.match(CnsMRParser.L_paren)
                self.state = 1275
                self.match(CnsMRParser.Tail)
                self.state = 1277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Equ_op:
                    self.state = 1276
                    self.match(CnsMRParser.Equ_op)


                self.state = 1279
                self.selection()
                self.state = 1281
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Comma:
                    self.state = 1280
                    self.match(CnsMRParser.Comma)


                self.state = 1288
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Head:
                    self.state = 1283
                    self.match(CnsMRParser.Head)
                    self.state = 1285
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==CnsMRParser.Equ_op:
                        self.state = 1284
                        self.match(CnsMRParser.Equ_op)


                    self.state = 1287
                    self.selection()


                self.state = 1290
                self.match(CnsMRParser.R_paren)
                self.state = 1291
                self.match(CnsMRParser.Cut)
                self.state = 1292
                self.number_f()
                pass

            elif la_ == 18:
                self.state = 1294
                self.match(CnsMRParser.Previous)
                pass

            elif la_ == 19:
                self.state = 1295
                self.match(CnsMRParser.Pseudo)
                pass

            elif la_ == 20:
                self.state = 1296
                self.match(CnsMRParser.Residue)
                self.state = 1304
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Integers]:
                    self.state = 1297
                    self.match(CnsMRParser.Integers)
                    pass
                elif token in [CnsMRParser.Integer]:
                    self.state = 1298
                    self.match(CnsMRParser.Integer)
                    self.state = 1301
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                    if la_ == 1:
                        self.state = 1299
                        self.match(CnsMRParser.Colon)
                        self.state = 1300
                        self.match(CnsMRParser.Integer)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1303
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1306
                self.match(CnsMRParser.Resname)
                self.state = 1314
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1307
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1308
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1311
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                    if la_ == 1:
                        self.state = 1309
                        self.match(CnsMRParser.Colon)
                        self.state = 1310
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1313
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 22:
                self.state = 1316
                self.match(CnsMRParser.SegIdentifier)
                self.state = 1329
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Simple_names]:
                    self.state = 1317
                    self.match(CnsMRParser.Simple_names)
                    pass
                elif token in [CnsMRParser.Simple_name]:
                    self.state = 1318
                    self.match(CnsMRParser.Simple_name)
                    self.state = 1321
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
                    if la_ == 1:
                        self.state = 1319
                        self.match(CnsMRParser.Colon)
                        self.state = 1320
                        self.match(CnsMRParser.Simple_name)


                    pass
                elif token in [CnsMRParser.Double_quote_string]:
                    self.state = 1323
                    self.match(CnsMRParser.Double_quote_string)
                    self.state = 1326
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
                    if la_ == 1:
                        self.state = 1324
                        self.match(CnsMRParser.Colon)
                        self.state = 1325
                        self.match(CnsMRParser.Double_quote_string)


                    pass
                elif token in [CnsMRParser.Symbol_name]:
                    self.state = 1328
                    self.match(CnsMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 23:
                self.state = 1331
                self.match(CnsMRParser.Sfbox)
                self.state = 1332
                self.number_f()
                self.state = 1333
                self.number_f()
                self.state = 1334
                self.number_f()
                self.state = 1335
                self.number_f()
                self.state = 1336
                self.number_f()
                self.state = 1337
                self.number_f()
                pass

            elif la_ == 24:
                self.state = 1339
                self.match(CnsMRParser.Store1)
                pass

            elif la_ == 25:
                self.state = 1340
                self.match(CnsMRParser.Store2)
                pass

            elif la_ == 26:
                self.state = 1341
                self.match(CnsMRParser.Store3)
                pass

            elif la_ == 27:
                self.state = 1342
                self.match(CnsMRParser.Store4)
                pass

            elif la_ == 28:
                self.state = 1343
                self.match(CnsMRParser.Store5)
                pass

            elif la_ == 29:
                self.state = 1344
                self.match(CnsMRParser.Store6)
                pass

            elif la_ == 30:
                self.state = 1345
                self.match(CnsMRParser.Store7)
                pass

            elif la_ == 31:
                self.state = 1346
                self.match(CnsMRParser.Store8)
                pass

            elif la_ == 32:
                self.state = 1347
                self.match(CnsMRParser.Store9)
                pass

            elif la_ == 33:
                self.state = 1348
                self.match(CnsMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1359
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,169,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1357
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,168,self._ctx)
                    if la_ == 1:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1351
                        if not self.precpred(self._ctx, 33):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 33)")
                        self.state = 1352
                        self.match(CnsMRParser.Around)
                        self.state = 1353
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = CnsMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1354
                        if not self.precpred(self._ctx, 13):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 13)")
                        self.state = 1355
                        self.match(CnsMRParser.Saround)
                        self.state = 1356
                        self.number_f()
                        pass

             
                self.state = 1361
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,169,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = CnsMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1362
            _la = self._input.LA(1)
            if not(((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (CnsMRParser.Integer - 147)) | (1 << (CnsMRParser.Real - 147)) | (1 << (CnsMRParser.Symbol_name - 147)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = CnsMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1364
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(CnsMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = CnsMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1366
            _la = self._input.LA(1)
            if not(((((_la - 147)) & ~0x3f) == 0 and ((1 << (_la - 147)) & ((1 << (CnsMRParser.Integer - 147)) | (1 << (CnsMRParser.Real - 147)) | (1 << (CnsMRParser.Symbol_name - 147)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(CnsMRParser.Real, 0)

        def Integer(self):
            return self.getToken(CnsMRParser.Integer, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = CnsMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1368
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Integer or _la==CnsMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(CnsMRParser.Flags, 0)

        def Include(self):
            return self.getToken(CnsMRParser.Include, 0)

        def End_FL(self):
            return self.getToken(CnsMRParser.End_FL, 0)

        def Exclude(self):
            return self.getToken(CnsMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Class_name)
            else:
                return self.getToken(CnsMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(CnsMRParser.Any_class, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = CnsMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1370
            self.match(CnsMRParser.Flags)
            self.state = 1381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Exclude:
                self.state = 1371
                self.match(CnsMRParser.Exclude)
                self.state = 1379
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Include, CnsMRParser.Class_name]:
                    self.state = 1375
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CnsMRParser.Class_name:
                        self.state = 1372
                        self.match(CnsMRParser.Class_name)
                        self.state = 1377
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [CnsMRParser.Any_class]:
                    self.state = 1378
                    self.match(CnsMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1383
            self.match(CnsMRParser.Include)
            self.state = 1387
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Class_name:
                self.state = 1384
                self.match(CnsMRParser.Class_name)
                self.state = 1389
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1390
            self.match(CnsMRParser.End_FL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(CnsMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(CnsMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = CnsMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1392
            self.match(CnsMRParser.Vector)
            self.state = 1393
            self.vector_mode()
            self.state = 1394
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(CnsMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(CnsMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(CnsMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = CnsMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 1402
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Do_Lp, CnsMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1396
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Do_Lp or _la==CnsMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1397
                self.vector_expression()
                self.state = 1398
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1400
                self.match(CnsMRParser.Show)
                self.state = 1401
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = CnsMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1404
            self.match(CnsMRParser.Atom_properties_VE)
            self.state = 1407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Equ_op_VE:
                self.state = 1405
                self.match(CnsMRParser.Equ_op_VE)
                self.state = 1406
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = CnsMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1409
            self.vflc()
            self.state = 1412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (CnsMRParser.Add_op_VE - 193)) | (1 << (CnsMRParser.Sub_op_VE - 193)) | (1 << (CnsMRParser.Mul_op_VE - 193)) | (1 << (CnsMRParser.Div_op_VE - 193)) | (1 << (CnsMRParser.Exp_op_VE - 193)))) != 0):
                self.state = 1410
                _la = self._input.LA(1)
                if not(((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (CnsMRParser.Add_op_VE - 193)) | (1 << (CnsMRParser.Sub_op_VE - 193)) | (1 << (CnsMRParser.Mul_op_VE - 193)) | (1 << (CnsMRParser.Div_op_VE - 193)) | (1 << (CnsMRParser.Exp_op_VE - 193)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1411
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(CnsMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(CnsMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(CnsMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(CnsMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(CnsMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(CnsMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = CnsMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_vflc)
        try:
            self.state = 1421
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1414
                self.match(CnsMRParser.Atom_properties_VE)
                pass
            elif token in [CnsMRParser.Abs_VE, CnsMRParser.Acos_VE, CnsMRParser.Cos_VE, CnsMRParser.Decode_VE, CnsMRParser.Encode_VE, CnsMRParser.Exp_VE, CnsMRParser.Gauss_VE, CnsMRParser.Heavy_VE, CnsMRParser.Int_VE, CnsMRParser.Log10_VE, CnsMRParser.Log_VE, CnsMRParser.Max_VE, CnsMRParser.Maxw_VE, CnsMRParser.Min_VE, CnsMRParser.Mod_VE, CnsMRParser.Norm_VE, CnsMRParser.Random_VE, CnsMRParser.Sign_VE, CnsMRParser.Sin_VE, CnsMRParser.Sqrt_VE, CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1415
                self.vector_func_call()
                pass
            elif token in [CnsMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1416
                self.match(CnsMRParser.Integer_VE)
                pass
            elif token in [CnsMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1417
                self.match(CnsMRParser.Real_VE)
                pass
            elif token in [CnsMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1418
                self.match(CnsMRParser.Simple_name_VE)
                pass
            elif token in [CnsMRParser.Symbol_name_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1419
                self.match(CnsMRParser.Symbol_name_VE)
                pass
            elif token in [CnsMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1420
                self.match(CnsMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(CnsMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(CnsMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(CnsMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(CnsMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(CnsMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(CnsMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(CnsMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(CnsMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(CnsMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(CnsMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(CnsMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(CnsMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(CnsMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Comma_VE)
            else:
                return self.getToken(CnsMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(CnsMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(CnsMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(CnsMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(CnsMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(CnsMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(CnsMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(CnsMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(CnsMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(CnsMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = CnsMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 1542
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1423
                self.match(CnsMRParser.Abs_VE)
                self.state = 1424
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1425
                self.vflc()
                self.state = 1426
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1428
                self.match(CnsMRParser.Acos_VE)
                self.state = 1429
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1430
                self.vflc()
                self.state = 1431
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1433
                self.match(CnsMRParser.Cos_VE)
                self.state = 1434
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1435
                self.vflc()
                self.state = 1436
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1438
                self.match(CnsMRParser.Decode_VE)
                self.state = 1439
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1440
                self.vflc()
                self.state = 1441
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1443
                self.match(CnsMRParser.Encode_VE)
                self.state = 1444
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1445
                self.vflc()
                self.state = 1446
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1448
                self.match(CnsMRParser.Exp_VE)
                self.state = 1449
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1450
                self.vflc()
                self.state = 1451
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1453
                self.match(CnsMRParser.Gauss_VE)
                self.state = 1454
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1455
                self.vflc()
                self.state = 1456
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1458
                self.match(CnsMRParser.Heavy_VE)
                self.state = 1459
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1460
                self.vflc()
                self.state = 1461
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1463
                self.match(CnsMRParser.Int_VE)
                self.state = 1464
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1465
                self.vflc()
                self.state = 1466
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1468
                self.match(CnsMRParser.Log10_VE)
                self.state = 1469
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1470
                self.vflc()
                self.state = 1471
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1473
                self.match(CnsMRParser.Log_VE)
                self.state = 1474
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1475
                self.vflc()
                self.state = 1476
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1478
                self.match(CnsMRParser.Max_VE)
                self.state = 1479
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1480
                self.vflc()
                self.state = 1485
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1481
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1482
                    self.vflc()
                    self.state = 1487
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1488
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1490
                self.match(CnsMRParser.Maxw_VE)
                self.state = 1491
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1492
                self.vflc()
                self.state = 1493
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1495
                self.match(CnsMRParser.Min_VE)
                self.state = 1496
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1497
                self.vflc()
                self.state = 1502
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Comma_VE:
                    self.state = 1498
                    self.match(CnsMRParser.Comma_VE)
                    self.state = 1499
                    self.vflc()
                    self.state = 1504
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1505
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1507
                self.match(CnsMRParser.Mod_VE)
                self.state = 1508
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1509
                self.vflc()
                self.state = 1510
                self.match(CnsMRParser.Comma_VE)
                self.state = 1511
                self.vflc()
                self.state = 1512
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1514
                self.match(CnsMRParser.Norm_VE)
                self.state = 1515
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1516
                self.vflc()
                self.state = 1517
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1519
                self.match(CnsMRParser.Random_VE)
                self.state = 1520
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1521
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1522
                self.match(CnsMRParser.Sign_VE)
                self.state = 1523
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1524
                self.vflc()
                self.state = 1525
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 1527
                self.match(CnsMRParser.Sin_VE)
                self.state = 1528
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1529
                self.vflc()
                self.state = 1530
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 1532
                self.match(CnsMRParser.Sqrt_VE)
                self.state = 1533
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1534
                self.vflc()
                self.state = 1535
                self.match(CnsMRParser.R_paren_VE)
                pass
            elif token in [CnsMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 1537
                self.match(CnsMRParser.Tan_VE)
                self.state = 1538
                self.match(CnsMRParser.L_paren_VF)
                self.state = 1539
                self.vflc()
                self.state = 1540
                self.match(CnsMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(CnsMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(CnsMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(CnsMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(CnsMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(CnsMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(CnsMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(CnsMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(CnsMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(CnsMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(CnsMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = CnsMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1544
            _la = self._input.LA(1)
            if not(((((_la - 232)) & ~0x3f) == 0 and ((1 << (_la - 232)) & ((1 << (CnsMRParser.Average_VS - 232)) | (1 << (CnsMRParser.Element_VS - 232)) | (1 << (CnsMRParser.Max_VS - 232)) | (1 << (CnsMRParser.Min_VS - 232)) | (1 << (CnsMRParser.Norm_VS - 232)) | (1 << (CnsMRParser.Rms_VS - 232)) | (1 << (CnsMRParser.Sum_VS - 232)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1545
            self.match(CnsMRParser.L_paren_VS)
            self.state = 1546
            self.match(CnsMRParser.Atom_properties_VS)
            self.state = 1547
            self.match(CnsMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(CnsMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(CnsMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(CnsMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(CnsMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = CnsMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1549
            self.match(CnsMRParser.Evaluate_Lp)
            self.state = 1550
            self.match(CnsMRParser.Symbol_name_VE)
            self.state = 1551
            self.match(CnsMRParser.Equ_op_VE)
            self.state = 1552
            self.evaluate_operation()
            self.state = 1553
            self.match(CnsMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(CnsMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(CnsMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(CnsMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(CnsMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(CnsMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(CnsMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(CnsMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = CnsMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1555
            self.vflc()
            self.state = 1558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (CnsMRParser.Add_op_VE - 193)) | (1 << (CnsMRParser.Sub_op_VE - 193)) | (1 << (CnsMRParser.Mul_op_VE - 193)) | (1 << (CnsMRParser.Div_op_VE - 193)) | (1 << (CnsMRParser.Exp_op_VE - 193)))) != 0):
                self.state = 1556
                _la = self._input.LA(1)
                if not(((((_la - 193)) & ~0x3f) == 0 and ((1 << (_la - 193)) & ((1 << (CnsMRParser.Add_op_VE - 193)) | (1 << (CnsMRParser.Sub_op_VE - 193)) | (1 << (CnsMRParser.Mul_op_VE - 193)) | (1 << (CnsMRParser.Div_op_VE - 193)) | (1 << (CnsMRParser.Exp_op_VE - 193)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1557
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Patch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Patch(self):
            return self.getToken(CnsMRParser.Patch, 0)

        def Reference(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Reference)
            else:
                return self.getToken(CnsMRParser.Reference, i)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Equ_op)
            else:
                return self.getToken(CnsMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.SelectionContext,i)


        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def Nil(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Nil)
            else:
                return self.getToken(CnsMRParser.Nil, i)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Simple_name(self):
            return self.getToken(CnsMRParser.Simple_name, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_patch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatch_statement" ):
                listener.enterPatch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatch_statement" ):
                listener.exitPatch_statement(self)




    def patch_statement(self):

        localctx = CnsMRParser.Patch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_patch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1560
            self.match(CnsMRParser.Patch)
            self.state = 1562
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Simple_name:
                self.state = 1561
                self.match(CnsMRParser.Simple_name)


            self.state = 1564
            self.match(CnsMRParser.Reference)
            self.state = 1565
            self.match(CnsMRParser.Equ_op)
            self.state = 1566
            _la = self._input.LA(1)
            if not(_la==CnsMRParser.Nil or _la==CnsMRParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1567
            self.match(CnsMRParser.Equ_op)
            self.state = 1568
            self.selection()
            self.state = 1574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CnsMRParser.Reference:
                self.state = 1569
                self.match(CnsMRParser.Reference)
                self.state = 1570
                self.match(CnsMRParser.Equ_op)
                self.state = 1571
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Nil or _la==CnsMRParser.Integer):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1572
                self.match(CnsMRParser.Equ_op)
                self.state = 1573
                self.selection()


            self.state = 1576
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_settingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Parameter(self):
            return self.getToken(CnsMRParser.Parameter, 0)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return CnsMRParser.RULE_parameter_setting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_setting" ):
                listener.enterParameter_setting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_setting" ):
                listener.exitParameter_setting(self)




    def parameter_setting(self):

        localctx = CnsMRParser.Parameter_settingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_parameter_setting)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1578
            self.match(CnsMRParser.Parameter)
            self.state = 1582
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Reset or _la==CnsMRParser.Dihedral or ((((_la - 85)) & ~0x3f) == 0 and ((1 << (_la - 85)) & ((1 << (CnsMRParser.AngleDb - 85)) | (1 << (CnsMRParser.BondedTo - 85)) | (1 << (CnsMRParser.HBonded - 85)) | (1 << (CnsMRParser.Improper - 85)) | (1 << (CnsMRParser.NBFix - 85)) | (1 << (CnsMRParser.NonB - 85)) | (1 << (CnsMRParser.VDWOff - 85)) | (1 << (CnsMRParser.Verbose - 85)))) != 0):
                self.state = 1579
                self.parameter_statement()
                self.state = 1584
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1585
            self.match(CnsMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(CnsMRParser.AngleDb, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name)
            else:
                return self.getToken(CnsMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Number_sContext,i)


        def UB(self):
            return self.getToken(CnsMRParser.UB, 0)

        def BondedTo(self):
            return self.getToken(CnsMRParser.BondedTo, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer)
            else:
                return self.getToken(CnsMRParser.Integer, i)

        def Dihedral(self):
            return self.getToken(CnsMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(CnsMRParser.Improper, 0)

        def Mult(self):
            return self.getToken(CnsMRParser.Mult, 0)

        def HBonded(self):
            return self.getToken(CnsMRParser.HBonded, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_names)
            else:
                return self.getToken(CnsMRParser.Simple_names, i)

        def NBFix(self):
            return self.getToken(CnsMRParser.NBFix, 0)

        def NonB(self):
            return self.getToken(CnsMRParser.NonB, 0)

        def Reset(self):
            return self.getToken(CnsMRParser.Reset, 0)

        def VDWOff(self):
            return self.getToken(CnsMRParser.VDWOff, 0)

        def Verbose(self):
            return self.getToken(CnsMRParser.Verbose, 0)

        def getRuleIndex(self):
            return CnsMRParser.RULE_parameter_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_statement" ):
                listener.enterParameter_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_statement" ):
                listener.exitParameter_statement(self)




    def parameter_statement(self):

        localctx = CnsMRParser.Parameter_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_parameter_statement)
        self._la = 0 # Token type
        try:
            self.state = 1642
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CnsMRParser.AngleDb]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1587
                self.match(CnsMRParser.AngleDb)
                self.state = 1588
                self.match(CnsMRParser.Simple_name)
                self.state = 1589
                self.match(CnsMRParser.Simple_name)
                self.state = 1590
                self.match(CnsMRParser.Simple_name)
                self.state = 1591
                self.number_s()
                self.state = 1592
                self.number_s()
                self.state = 1597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.UB:
                    self.state = 1593
                    self.match(CnsMRParser.UB)
                    self.state = 1594
                    self.number_s()
                    self.state = 1595
                    self.number_s()


                pass
            elif token in [CnsMRParser.BondedTo]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1599
                self.match(CnsMRParser.BondedTo)
                self.state = 1600
                self.match(CnsMRParser.Simple_name)
                self.state = 1601
                self.match(CnsMRParser.Simple_name)
                self.state = 1602
                self.number_s()
                self.state = 1603
                self.number_s()
                pass
            elif token in [CnsMRParser.Dihedral, CnsMRParser.Improper]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1605
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Dihedral or _la==CnsMRParser.Improper):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1606
                self.match(CnsMRParser.Simple_name)
                self.state = 1607
                self.match(CnsMRParser.Simple_name)
                self.state = 1608
                self.match(CnsMRParser.Simple_name)
                self.state = 1609
                self.match(CnsMRParser.Simple_name)
                self.state = 1612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CnsMRParser.Mult:
                    self.state = 1610
                    self.match(CnsMRParser.Mult)
                    self.state = 1611
                    self.match(CnsMRParser.Integer)


                self.state = 1614
                self.number_s()
                self.state = 1615
                self.match(CnsMRParser.Integer)
                self.state = 1616
                self.number_s()
                pass
            elif token in [CnsMRParser.HBonded]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1618
                self.match(CnsMRParser.HBonded)
                self.state = 1619
                self.match(CnsMRParser.Simple_names)
                self.state = 1620
                self.match(CnsMRParser.Simple_names)
                self.state = 1621
                self.number_s()
                self.state = 1622
                self.number_s()
                pass
            elif token in [CnsMRParser.NBFix]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1624
                self.match(CnsMRParser.NBFix)
                self.state = 1625
                self.match(CnsMRParser.Simple_name)
                self.state = 1626
                self.match(CnsMRParser.Simple_name)
                self.state = 1627
                self.number_s()
                self.state = 1628
                self.number_s()
                self.state = 1629
                self.number_s()
                self.state = 1630
                self.number_s()
                pass
            elif token in [CnsMRParser.NonB]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1632
                self.match(CnsMRParser.NonB)
                self.state = 1633
                self.match(CnsMRParser.Simple_name)
                self.state = 1634
                self.number_s()
                self.state = 1635
                self.number_s()
                self.state = 1636
                self.number_s()
                self.state = 1637
                self.number_s()
                pass
            elif token in [CnsMRParser.Reset, CnsMRParser.VDWOff]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1639
                _la = self._input.LA(1)
                if not(_la==CnsMRParser.Reset or _la==CnsMRParser.VDWOff):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1640
                self.match(CnsMRParser.Simple_name)
                pass
            elif token in [CnsMRParser.Verbose]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1641
                self.match(CnsMRParser.Verbose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Noe_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_noe_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign_loop" ):
                listener.enterNoe_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign_loop" ):
                listener.exitNoe_assign_loop(self)




    def noe_assign_loop(self):

        localctx = CnsMRParser.Noe_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_noe_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1644
            self.match(CnsMRParser.For)
            self.state = 1645
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1646
            self.match(CnsMRParser.In_CF)
            self.state = 1647
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
            if la_ == 1:
                self.state = 1651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1648
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1653
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1654
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1660
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1668
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1669
            self.match(CnsMRParser.Loop)
            self.state = 1670
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1675
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1673
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1671
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1672
                    self.noe_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1677
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1678
            self.match(CnsMRParser.End)
            self.state = 1679
            self.match(CnsMRParser.Loop)
            self.state = 1680
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Dihedral_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = CnsMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1682
            self.match(CnsMRParser.For)
            self.state = 1683
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1684
            self.match(CnsMRParser.In_CF)
            self.state = 1685
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1704
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.state = 1689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1686
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1691
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1692
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1697
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1698
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1703
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1706
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1707
            self.match(CnsMRParser.Loop)
            self.state = 1708
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1713
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1711
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1709
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1710
                    self.dihedral_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1715
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1716
            self.match(CnsMRParser.End)
            self.state = 1717
            self.match(CnsMRParser.Loop)
            self.state = 1718
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Sani_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_sani_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign_loop" ):
                listener.enterSani_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign_loop" ):
                listener.exitSani_assign_loop(self)




    def sani_assign_loop(self):

        localctx = CnsMRParser.Sani_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_sani_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1720
            self.match(CnsMRParser.For)
            self.state = 1721
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1722
            self.match(CnsMRParser.In_CF)
            self.state = 1723
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1742
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,203,self._ctx)
            if la_ == 1:
                self.state = 1727
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1724
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1729
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1730
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1735
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1739
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1736
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1741
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1744
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1745
            self.match(CnsMRParser.Loop)
            self.state = 1746
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1749
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1747
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1748
                    self.sani_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1753
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1754
            self.match(CnsMRParser.End)
            self.state = 1755
            self.match(CnsMRParser.Loop)
            self.state = 1756
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Coup_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_coup_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign_loop" ):
                listener.enterCoup_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign_loop" ):
                listener.exitCoup_assign_loop(self)




    def coup_assign_loop(self):

        localctx = CnsMRParser.Coup_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_coup_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1758
            self.match(CnsMRParser.For)
            self.state = 1759
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1760
            self.match(CnsMRParser.In_CF)
            self.state = 1761
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1780
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1765
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1762
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1767
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1768
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1773
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1777
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1774
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1779
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1782
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1783
            self.match(CnsMRParser.Loop)
            self.state = 1784
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1789
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1787
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1785
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1786
                    self.coup_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1791
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1792
            self.match(CnsMRParser.End)
            self.state = 1793
            self.match(CnsMRParser.Loop)
            self.state = 1794
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(CnsMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(CnsMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(CnsMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(CnsMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(CnsMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Loop)
            else:
                return self.getToken(CnsMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_LL)
            else:
                return self.getToken(CnsMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(CnsMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Evaluate_statementContext,i)


        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CnsMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(CnsMRParser.Carbon_shift_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Integer_CF)
            else:
                return self.getToken(CnsMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Real_CF)
            else:
                return self.getToken(CnsMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(CnsMRParser.Simple_name_CF)
            else:
                return self.getToken(CnsMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return CnsMRParser.RULE_carbon_shift_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign_loop" ):
                listener.enterCarbon_shift_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign_loop" ):
                listener.exitCarbon_shift_assign_loop(self)




    def carbon_shift_assign_loop(self):

        localctx = CnsMRParser.Carbon_shift_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_carbon_shift_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1796
            self.match(CnsMRParser.For)
            self.state = 1797
            self.match(CnsMRParser.Symbol_name_CF)
            self.state = 1798
            self.match(CnsMRParser.In_CF)
            self.state = 1799
            self.match(CnsMRParser.L_paren_CF)
            self.state = 1818
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,215,self._ctx)
            if la_ == 1:
                self.state = 1803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Integer_CF:
                    self.state = 1800
                    self.match(CnsMRParser.Integer_CF)
                    self.state = 1805
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Real_CF:
                    self.state = 1806
                    self.match(CnsMRParser.Real_CF)
                    self.state = 1811
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CnsMRParser.Simple_name_CF:
                    self.state = 1812
                    self.match(CnsMRParser.Simple_name_CF)
                    self.state = 1817
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 1820
            self.match(CnsMRParser.R_paren_CF)
            self.state = 1821
            self.match(CnsMRParser.Loop)
            self.state = 1822
            self.match(CnsMRParser.Simple_name_LL)
            self.state = 1827
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CnsMRParser.Assign or _la==CnsMRParser.Evaluate_Lp:
                self.state = 1825
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [CnsMRParser.Evaluate_Lp]:
                    self.state = 1823
                    self.evaluate_statement()
                    pass
                elif token in [CnsMRParser.Assign]:
                    self.state = 1824
                    self.carbon_shift_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1829
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1830
            self.match(CnsMRParser.End)
            self.state = 1831
            self.match(CnsMRParser.Loop)
            self.state = 1832
            self.match(CnsMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[51] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 33)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 13)
         




