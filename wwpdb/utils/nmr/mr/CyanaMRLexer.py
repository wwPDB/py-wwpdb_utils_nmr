# Generated from CyanaMRLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,10,199,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,1,0,3,0,43,8,0,1,0,1,0,1,1,3,1,48,8,1,1,1,1,1,3,1,52,8,1,1,1,
        1,1,3,1,56,8,1,1,1,3,1,59,8,1,1,2,1,2,1,2,3,2,64,8,2,1,2,1,2,3,2,
        68,8,2,1,3,1,3,1,4,4,4,73,8,4,11,4,12,4,74,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,3,10,93,8,10,1,11,1,
        11,3,11,97,8,11,1,12,1,12,3,12,101,8,12,1,13,1,13,3,13,105,8,13,
        1,14,1,14,3,14,109,8,14,1,15,1,15,5,15,113,8,15,10,15,12,15,116,
        9,15,1,16,4,16,119,8,16,11,16,12,16,120,1,16,1,16,1,17,1,17,1,17,
        5,17,128,8,17,10,17,12,17,131,9,17,1,17,1,17,1,17,1,17,1,18,1,18,
        1,18,4,18,140,8,18,11,18,12,18,141,1,18,1,18,4,18,146,8,18,11,18,
        12,18,147,1,18,1,18,4,18,152,8,18,11,18,12,18,153,3,18,156,8,18,
        1,18,5,18,159,8,18,10,18,12,18,162,9,18,1,18,4,18,165,8,18,11,18,
        12,18,166,1,18,1,18,1,19,1,19,1,19,4,19,174,8,19,11,19,12,19,175,
        1,19,1,19,4,19,180,8,19,11,19,12,19,181,1,19,1,19,4,19,186,8,19,
        11,19,12,19,187,3,19,190,8,19,1,19,5,19,193,8,19,10,19,12,19,196,
        9,19,1,19,1,19,1,129,0,20,1,1,3,2,5,0,7,0,9,0,11,3,13,4,15,5,17,
        6,19,0,21,0,23,0,25,0,27,0,29,0,31,0,33,7,35,8,37,9,39,10,1,0,13,
        2,0,43,43,45,45,2,0,69,69,101,101,1,0,48,57,2,0,84,84,116,116,2,
        0,89,89,121,121,2,0,80,80,112,112,2,0,79,79,111,111,2,0,82,82,114,
        114,2,0,65,90,97,122,4,0,34,35,39,39,42,43,45,46,3,0,9,10,13,13,
        32,32,4,0,33,33,35,35,47,47,59,59,2,0,10,10,13,13,220,0,1,1,0,0,
        0,0,3,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,1,42,1,0,0,
        0,3,47,1,0,0,0,5,67,1,0,0,0,7,69,1,0,0,0,9,72,1,0,0,0,11,76,1,0,
        0,0,13,81,1,0,0,0,15,83,1,0,0,0,17,86,1,0,0,0,19,88,1,0,0,0,21,92,
        1,0,0,0,23,96,1,0,0,0,25,100,1,0,0,0,27,104,1,0,0,0,29,108,1,0,0,
        0,31,110,1,0,0,0,33,118,1,0,0,0,35,124,1,0,0,0,37,155,1,0,0,0,39,
        189,1,0,0,0,41,43,7,0,0,0,42,41,1,0,0,0,42,43,1,0,0,0,43,44,1,0,
        0,0,44,45,3,9,4,0,45,2,1,0,0,0,46,48,7,0,0,0,47,46,1,0,0,0,47,48,
        1,0,0,0,48,51,1,0,0,0,49,52,3,9,4,0,50,52,3,5,2,0,51,49,1,0,0,0,
        51,50,1,0,0,0,52,58,1,0,0,0,53,55,7,1,0,0,54,56,7,0,0,0,55,54,1,
        0,0,0,55,56,1,0,0,0,56,57,1,0,0,0,57,59,3,9,4,0,58,53,1,0,0,0,58,
        59,1,0,0,0,59,4,1,0,0,0,60,61,3,9,4,0,61,63,5,46,0,0,62,64,3,9,4,
        0,63,62,1,0,0,0,63,64,1,0,0,0,64,68,1,0,0,0,65,66,5,46,0,0,66,68,
        3,9,4,0,67,60,1,0,0,0,67,65,1,0,0,0,68,6,1,0,0,0,69,70,7,2,0,0,70,
        8,1,0,0,0,71,73,3,7,3,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,1,0,0,
        0,74,75,1,0,0,0,75,10,1,0,0,0,76,77,7,3,0,0,77,78,7,4,0,0,78,79,
        7,5,0,0,79,80,7,1,0,0,80,12,1,0,0,0,81,82,5,61,0,0,82,14,1,0,0,0,
        83,84,7,6,0,0,84,85,7,7,0,0,85,16,1,0,0,0,86,87,3,31,15,0,87,18,
        1,0,0,0,88,89,7,8,0,0,89,20,1,0,0,0,90,93,3,19,9,0,91,93,3,7,3,0,
        92,90,1,0,0,0,92,91,1,0,0,0,93,22,1,0,0,0,94,97,3,21,10,0,95,97,
        5,95,0,0,96,94,1,0,0,0,96,95,1,0,0,0,97,24,1,0,0,0,98,101,3,23,11,
        0,99,101,7,9,0,0,100,98,1,0,0,0,100,99,1,0,0,0,101,26,1,0,0,0,102,
        105,3,21,10,0,103,105,5,39,0,0,104,102,1,0,0,0,104,103,1,0,0,0,105,
        28,1,0,0,0,106,109,3,21,10,0,107,109,7,0,0,0,108,106,1,0,0,0,108,
        107,1,0,0,0,109,30,1,0,0,0,110,114,3,23,11,0,111,113,3,25,12,0,112,
        111,1,0,0,0,113,116,1,0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,
        32,1,0,0,0,116,114,1,0,0,0,117,119,7,10,0,0,118,117,1,0,0,0,119,
        120,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,122,1,0,0,0,122,
        123,6,16,0,0,123,34,1,0,0,0,124,129,5,123,0,0,125,128,3,35,17,0,
        126,128,9,0,0,0,127,125,1,0,0,0,127,126,1,0,0,0,128,131,1,0,0,0,
        129,130,1,0,0,0,129,127,1,0,0,0,130,132,1,0,0,0,131,129,1,0,0,0,
        132,133,5,125,0,0,133,134,1,0,0,0,134,135,6,17,1,0,135,36,1,0,0,
        0,136,156,7,11,0,0,137,139,5,42,0,0,138,140,5,42,0,0,139,138,1,0,
        0,0,140,141,1,0,0,0,141,139,1,0,0,0,141,142,1,0,0,0,142,156,1,0,
        0,0,143,145,5,45,0,0,144,146,5,45,0,0,145,144,1,0,0,0,146,147,1,
        0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,156,1,0,0,0,149,151,5,
        43,0,0,150,152,5,43,0,0,151,150,1,0,0,0,152,153,1,0,0,0,153,151,
        1,0,0,0,153,154,1,0,0,0,154,156,1,0,0,0,155,136,1,0,0,0,155,137,
        1,0,0,0,155,143,1,0,0,0,155,149,1,0,0,0,156,160,1,0,0,0,157,159,
        5,32,0,0,158,157,1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,160,161,
        1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,0,163,165,7,12,0,0,164,163,
        1,0,0,0,165,166,1,0,0,0,166,164,1,0,0,0,166,167,1,0,0,0,167,168,
        1,0,0,0,168,169,6,18,1,0,169,38,1,0,0,0,170,190,7,11,0,0,171,173,
        5,42,0,0,172,174,5,42,0,0,173,172,1,0,0,0,174,175,1,0,0,0,175,173,
        1,0,0,0,175,176,1,0,0,0,176,190,1,0,0,0,177,179,5,45,0,0,178,180,
        5,45,0,0,179,178,1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,
        1,0,0,0,182,190,1,0,0,0,183,185,5,43,0,0,184,186,5,43,0,0,185,184,
        1,0,0,0,186,187,1,0,0,0,187,185,1,0,0,0,187,188,1,0,0,0,188,190,
        1,0,0,0,189,170,1,0,0,0,189,171,1,0,0,0,189,177,1,0,0,0,189,183,
        1,0,0,0,190,194,1,0,0,0,191,193,8,12,0,0,192,191,1,0,0,0,193,196,
        1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,197,1,0,0,0,196,194,
        1,0,0,0,197,198,6,19,1,0,198,40,1,0,0,0,29,0,42,47,51,55,58,63,67,
        74,92,96,100,104,108,114,120,127,129,141,147,153,155,160,166,175,
        181,187,189,194,2,6,0,0,0,1,0
    ]

class CyanaMRLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Integer = 1
    Float = 2
    Type = 3
    Equ_op = 4
    Or = 5
    Simple_name = 6
    SPACE = 7
    COMMENT = 8
    SECTION_COMMENT = 9
    LINE_COMMENT = 10

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'TYPE'", "'='", "'OR'" ]

    symbolicNames = [ "<INVALID>",
            "Integer", "Float", "Type", "Equ_op", "Or", "Simple_name", "SPACE", 
            "COMMENT", "SECTION_COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "Integer", "Float", "DEC_DOT_DEC", "DEC_DIGIT", "DECIMAL", 
                  "Type", "Equ_op", "Or", "Simple_name", "ALPHA", "ALPHA_NUM", 
                  "START_CHAR", "NAME_CHAR", "ATM_NAME_CHAR", "ATM_TYPE_CHAR", 
                  "SIMPLE_NAME", "SPACE", "COMMENT", "SECTION_COMMENT", 
                  "LINE_COMMENT" ]

    grammarFileName = "CyanaMRLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


