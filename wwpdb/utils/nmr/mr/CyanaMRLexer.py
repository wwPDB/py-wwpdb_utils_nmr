# Generated from CyanaMRLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,15,331,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,3,0,53,
        8,0,1,0,1,0,1,1,3,1,58,8,1,1,1,1,1,3,1,62,8,1,1,1,1,1,3,1,66,8,1,
        1,1,3,1,69,8,1,1,2,1,2,1,2,3,2,74,8,2,1,2,1,2,3,2,78,8,2,1,3,1,3,
        1,4,4,4,83,8,4,11,4,12,4,84,1,5,4,5,88,8,5,11,5,12,5,89,1,5,5,5,
        93,8,5,10,5,12,5,96,9,5,1,5,5,5,99,8,5,10,5,12,5,102,9,5,1,5,5,5,
        105,8,5,10,5,12,5,108,9,5,1,5,1,5,1,6,4,6,113,8,6,11,6,12,6,114,
        1,6,5,6,118,8,6,10,6,12,6,121,9,6,1,6,5,6,124,8,6,10,6,12,6,127,
        9,6,1,6,5,6,130,8,6,10,6,12,6,133,9,6,1,6,1,6,1,7,4,7,138,8,7,11,
        7,12,7,139,1,7,5,7,143,8,7,10,7,12,7,146,9,7,1,7,5,7,149,8,7,10,
        7,12,7,152,9,7,1,7,5,7,155,8,7,10,7,12,7,158,9,7,1,7,1,7,1,8,1,8,
        1,8,1,8,1,8,1,9,1,9,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,3,15,189,
        8,15,1,16,1,16,3,16,193,8,16,1,17,1,17,3,17,197,8,17,1,18,1,18,3,
        18,201,8,18,1,19,1,19,3,19,205,8,19,1,20,1,20,5,20,209,8,20,10,20,
        12,20,212,9,20,1,21,4,21,215,8,21,11,21,12,21,216,1,21,1,21,1,22,
        1,22,1,22,5,22,224,8,22,10,22,12,22,227,9,22,1,22,1,22,1,22,1,22,
        1,23,1,23,1,23,4,23,236,8,23,11,23,12,23,237,1,23,1,23,4,23,242,
        8,23,11,23,12,23,243,1,23,1,23,4,23,248,8,23,11,23,12,23,249,1,23,
        1,23,4,23,254,8,23,11,23,12,23,255,1,23,1,23,4,23,260,8,23,11,23,
        12,23,261,1,23,1,23,1,23,1,23,1,23,1,23,3,23,270,8,23,1,23,5,23,
        273,8,23,10,23,12,23,276,9,23,1,23,4,23,279,8,23,11,23,12,23,280,
        1,23,1,23,1,24,1,24,1,24,4,24,288,8,24,11,24,12,24,289,1,24,1,24,
        4,24,294,8,24,11,24,12,24,295,1,24,1,24,4,24,300,8,24,11,24,12,24,
        301,1,24,1,24,4,24,306,8,24,11,24,12,24,307,1,24,1,24,4,24,312,8,
        24,11,24,12,24,313,1,24,1,24,1,24,1,24,1,24,1,24,3,24,322,8,24,1,
        24,5,24,325,8,24,10,24,12,24,328,9,24,1,24,1,24,1,225,0,25,1,1,3,
        2,5,0,7,0,9,0,11,3,13,4,15,5,17,6,19,7,21,8,23,9,25,10,27,11,29,
        0,31,0,33,0,35,0,37,0,39,0,41,0,43,12,45,13,47,14,49,15,1,0,20,2,
        0,43,43,45,45,2,0,69,69,101,101,1,0,48,57,2,0,10,10,13,13,2,0,84,
        84,116,116,2,0,89,89,121,121,2,0,80,80,112,112,2,0,79,79,111,111,
        2,0,82,82,114,114,2,0,83,83,115,115,2,0,66,66,98,98,2,0,78,78,110,
        110,2,0,68,68,100,100,2,0,65,90,97,122,4,0,34,35,39,39,42,43,45,
        46,3,0,9,10,13,13,32,32,5,0,33,33,35,35,38,38,59,59,92,92,2,0,77,
        77,109,109,2,0,65,65,97,97,2,0,75,75,107,107,374,0,1,1,0,0,0,0,3,
        1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,
        1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,43,
        1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,1,52,1,0,0,0,3,57,
        1,0,0,0,5,77,1,0,0,0,7,79,1,0,0,0,9,82,1,0,0,0,11,87,1,0,0,0,13,
        112,1,0,0,0,15,137,1,0,0,0,17,161,1,0,0,0,19,166,1,0,0,0,21,168,
        1,0,0,0,23,171,1,0,0,0,25,178,1,0,0,0,27,182,1,0,0,0,29,184,1,0,
        0,0,31,188,1,0,0,0,33,192,1,0,0,0,35,196,1,0,0,0,37,200,1,0,0,0,
        39,204,1,0,0,0,41,206,1,0,0,0,43,214,1,0,0,0,45,220,1,0,0,0,47,269,
        1,0,0,0,49,321,1,0,0,0,51,53,7,0,0,0,52,51,1,0,0,0,52,53,1,0,0,0,
        53,54,1,0,0,0,54,55,3,9,4,0,55,2,1,0,0,0,56,58,7,0,0,0,57,56,1,0,
        0,0,57,58,1,0,0,0,58,61,1,0,0,0,59,62,3,9,4,0,60,62,3,5,2,0,61,59,
        1,0,0,0,61,60,1,0,0,0,62,68,1,0,0,0,63,65,7,1,0,0,64,66,7,0,0,0,
        65,64,1,0,0,0,65,66,1,0,0,0,66,67,1,0,0,0,67,69,3,9,4,0,68,63,1,
        0,0,0,68,69,1,0,0,0,69,4,1,0,0,0,70,71,3,9,4,0,71,73,5,46,0,0,72,
        74,3,9,4,0,73,72,1,0,0,0,73,74,1,0,0,0,74,78,1,0,0,0,75,76,5,46,
        0,0,76,78,3,9,4,0,77,70,1,0,0,0,77,75,1,0,0,0,78,6,1,0,0,0,79,80,
        7,2,0,0,80,8,1,0,0,0,81,83,3,7,3,0,82,81,1,0,0,0,83,84,1,0,0,0,84,
        82,1,0,0,0,84,85,1,0,0,0,85,10,1,0,0,0,86,88,5,35,0,0,87,86,1,0,
        0,0,88,89,1,0,0,0,89,87,1,0,0,0,89,90,1,0,0,0,90,94,1,0,0,0,91,93,
        8,3,0,0,92,91,1,0,0,0,93,96,1,0,0,0,94,92,1,0,0,0,94,95,1,0,0,0,
        95,100,1,0,0,0,96,94,1,0,0,0,97,99,5,35,0,0,98,97,1,0,0,0,99,102,
        1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,106,1,0,0,0,102,100,1,
        0,0,0,103,105,8,3,0,0,104,103,1,0,0,0,105,108,1,0,0,0,106,104,1,
        0,0,0,106,107,1,0,0,0,107,109,1,0,0,0,108,106,1,0,0,0,109,110,6,
        5,0,0,110,12,1,0,0,0,111,113,5,33,0,0,112,111,1,0,0,0,113,114,1,
        0,0,0,114,112,1,0,0,0,114,115,1,0,0,0,115,119,1,0,0,0,116,118,8,
        3,0,0,117,116,1,0,0,0,118,121,1,0,0,0,119,117,1,0,0,0,119,120,1,
        0,0,0,120,125,1,0,0,0,121,119,1,0,0,0,122,124,5,33,0,0,123,122,1,
        0,0,0,124,127,1,0,0,0,125,123,1,0,0,0,125,126,1,0,0,0,126,131,1,
        0,0,0,127,125,1,0,0,0,128,130,8,3,0,0,129,128,1,0,0,0,130,133,1,
        0,0,0,131,129,1,0,0,0,131,132,1,0,0,0,132,134,1,0,0,0,133,131,1,
        0,0,0,134,135,6,6,0,0,135,14,1,0,0,0,136,138,5,59,0,0,137,136,1,
        0,0,0,138,139,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,0,140,144,1,
        0,0,0,141,143,8,3,0,0,142,141,1,0,0,0,143,146,1,0,0,0,144,142,1,
        0,0,0,144,145,1,0,0,0,145,150,1,0,0,0,146,144,1,0,0,0,147,149,5,
        59,0,0,148,147,1,0,0,0,149,152,1,0,0,0,150,148,1,0,0,0,150,151,1,
        0,0,0,151,156,1,0,0,0,152,150,1,0,0,0,153,155,8,3,0,0,154,153,1,
        0,0,0,155,158,1,0,0,0,156,154,1,0,0,0,156,157,1,0,0,0,157,159,1,
        0,0,0,158,156,1,0,0,0,159,160,6,7,0,0,160,16,1,0,0,0,161,162,7,4,
        0,0,162,163,7,5,0,0,163,164,7,6,0,0,164,165,7,1,0,0,165,18,1,0,0,
        0,166,167,5,61,0,0,167,20,1,0,0,0,168,169,7,7,0,0,169,170,7,8,0,
        0,170,22,1,0,0,0,171,172,7,9,0,0,172,173,7,9,0,0,173,174,7,10,0,
        0,174,175,7,7,0,0,175,176,7,11,0,0,176,177,7,12,0,0,177,24,1,0,0,
        0,178,179,3,9,4,0,179,180,5,45,0,0,180,181,3,9,4,0,181,26,1,0,0,
        0,182,183,3,41,20,0,183,28,1,0,0,0,184,185,7,13,0,0,185,30,1,0,0,
        0,186,189,3,29,14,0,187,189,3,7,3,0,188,186,1,0,0,0,188,187,1,0,
        0,0,189,32,1,0,0,0,190,193,3,31,15,0,191,193,5,95,0,0,192,190,1,
        0,0,0,192,191,1,0,0,0,193,34,1,0,0,0,194,197,3,33,16,0,195,197,7,
        14,0,0,196,194,1,0,0,0,196,195,1,0,0,0,197,36,1,0,0,0,198,201,3,
        31,15,0,199,201,5,39,0,0,200,198,1,0,0,0,200,199,1,0,0,0,201,38,
        1,0,0,0,202,205,3,31,15,0,203,205,7,0,0,0,204,202,1,0,0,0,204,203,
        1,0,0,0,205,40,1,0,0,0,206,210,3,33,16,0,207,209,3,35,17,0,208,207,
        1,0,0,0,209,212,1,0,0,0,210,208,1,0,0,0,210,211,1,0,0,0,211,42,1,
        0,0,0,212,210,1,0,0,0,213,215,7,15,0,0,214,213,1,0,0,0,215,216,1,
        0,0,0,216,214,1,0,0,0,216,217,1,0,0,0,217,218,1,0,0,0,218,219,6,
        21,1,0,219,44,1,0,0,0,220,225,5,123,0,0,221,224,3,45,22,0,222,224,
        9,0,0,0,223,221,1,0,0,0,223,222,1,0,0,0,224,227,1,0,0,0,225,226,
        1,0,0,0,225,223,1,0,0,0,226,228,1,0,0,0,227,225,1,0,0,0,228,229,
        5,125,0,0,229,230,1,0,0,0,230,231,6,22,0,0,231,46,1,0,0,0,232,270,
        7,16,0,0,233,235,5,47,0,0,234,236,5,47,0,0,235,234,1,0,0,0,236,237,
        1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,270,1,0,0,0,239,241,
        5,42,0,0,240,242,5,42,0,0,241,240,1,0,0,0,242,243,1,0,0,0,243,241,
        1,0,0,0,243,244,1,0,0,0,244,270,1,0,0,0,245,247,5,45,0,0,246,248,
        5,45,0,0,247,246,1,0,0,0,248,249,1,0,0,0,249,247,1,0,0,0,249,250,
        1,0,0,0,250,270,1,0,0,0,251,253,5,43,0,0,252,254,5,43,0,0,253,252,
        1,0,0,0,254,255,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,0,256,270,
        1,0,0,0,257,259,5,61,0,0,258,260,5,61,0,0,259,258,1,0,0,0,260,261,
        1,0,0,0,261,259,1,0,0,0,261,262,1,0,0,0,262,270,1,0,0,0,263,264,
        7,8,0,0,264,265,7,1,0,0,265,266,7,17,0,0,266,267,7,18,0,0,267,268,
        7,8,0,0,268,270,7,19,0,0,269,232,1,0,0,0,269,233,1,0,0,0,269,239,
        1,0,0,0,269,245,1,0,0,0,269,251,1,0,0,0,269,257,1,0,0,0,269,263,
        1,0,0,0,270,274,1,0,0,0,271,273,5,32,0,0,272,271,1,0,0,0,273,276,
        1,0,0,0,274,272,1,0,0,0,274,275,1,0,0,0,275,278,1,0,0,0,276,274,
        1,0,0,0,277,279,7,3,0,0,278,277,1,0,0,0,279,280,1,0,0,0,280,278,
        1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,283,6,23,0,0,283,48,
        1,0,0,0,284,322,7,16,0,0,285,287,5,47,0,0,286,288,5,47,0,0,287,286,
        1,0,0,0,288,289,1,0,0,0,289,287,1,0,0,0,289,290,1,0,0,0,290,322,
        1,0,0,0,291,293,5,42,0,0,292,294,5,42,0,0,293,292,1,0,0,0,294,295,
        1,0,0,0,295,293,1,0,0,0,295,296,1,0,0,0,296,322,1,0,0,0,297,299,
        5,45,0,0,298,300,5,45,0,0,299,298,1,0,0,0,300,301,1,0,0,0,301,299,
        1,0,0,0,301,302,1,0,0,0,302,322,1,0,0,0,303,305,5,43,0,0,304,306,
        5,43,0,0,305,304,1,0,0,0,306,307,1,0,0,0,307,305,1,0,0,0,307,308,
        1,0,0,0,308,322,1,0,0,0,309,311,5,61,0,0,310,312,5,61,0,0,311,310,
        1,0,0,0,312,313,1,0,0,0,313,311,1,0,0,0,313,314,1,0,0,0,314,322,
        1,0,0,0,315,316,7,8,0,0,316,317,7,1,0,0,317,318,7,17,0,0,318,319,
        7,18,0,0,319,320,7,8,0,0,320,322,7,19,0,0,321,284,1,0,0,0,321,285,
        1,0,0,0,321,291,1,0,0,0,321,297,1,0,0,0,321,303,1,0,0,0,321,309,
        1,0,0,0,321,315,1,0,0,0,322,326,1,0,0,0,323,325,8,3,0,0,324,323,
        1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,329,
        1,0,0,0,328,326,1,0,0,0,329,330,6,24,0,0,330,50,1,0,0,0,45,0,52,
        57,61,65,68,73,77,84,89,94,100,106,114,119,125,131,139,144,150,156,
        188,192,196,200,204,210,216,223,225,237,243,249,255,261,269,274,
        280,289,295,301,307,313,321,326,2,0,1,0,6,0,0
    ]

class CyanaMRLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Integer = 1
    Float = 2
    SHARP_COMMENT = 3
    EXCLM_COMMENT = 4
    SMCLN_COMMENT = 5
    Type = 6
    Equ_op = 7
    Or = 8
    Ssbond = 9
    Ssbond_resids = 10
    Simple_name = 11
    SPACE = 12
    COMMENT = 13
    SECTION_COMMENT = 14
    LINE_COMMENT = 15

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'TYPE'", "'='", "'OR'", "'SSBOND'" ]

    symbolicNames = [ "<INVALID>",
            "Integer", "Float", "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", 
            "Type", "Equ_op", "Or", "Ssbond", "Ssbond_resids", "Simple_name", 
            "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "Integer", "Float", "DEC_DOT_DEC", "DEC_DIGIT", "DECIMAL", 
                  "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", "Type", 
                  "Equ_op", "Or", "Ssbond", "Ssbond_resids", "Simple_name", 
                  "ALPHA", "ALPHA_NUM", "START_CHAR", "NAME_CHAR", "ATM_NAME_CHAR", 
                  "ATM_TYPE_CHAR", "SIMPLE_NAME", "SPACE", "COMMENT", "SECTION_COMMENT", 
                  "LINE_COMMENT" ]

    grammarFileName = "CyanaMRLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


