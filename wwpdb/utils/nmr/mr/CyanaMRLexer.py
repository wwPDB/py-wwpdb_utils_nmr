# Generated from CyanaMRLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,301,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,3,0,49,8,0,1,0,1,0,1,1,3,1,
        54,8,1,1,1,1,1,3,1,58,8,1,1,1,1,1,3,1,62,8,1,1,1,3,1,65,8,1,1,2,
        1,2,1,2,3,2,70,8,2,1,2,1,2,3,2,74,8,2,1,3,1,3,1,4,4,4,79,8,4,11,
        4,12,4,80,1,5,4,5,84,8,5,11,5,12,5,85,1,5,5,5,89,8,5,10,5,12,5,92,
        9,5,1,5,4,5,95,8,5,11,5,12,5,96,1,5,5,5,100,8,5,10,5,12,5,103,9,
        5,1,5,1,5,1,6,4,6,108,8,6,11,6,12,6,109,1,6,5,6,113,8,6,10,6,12,
        6,116,9,6,1,6,4,6,119,8,6,11,6,12,6,120,1,6,5,6,124,8,6,10,6,12,
        6,127,9,6,1,6,1,6,1,7,4,7,132,8,7,11,7,12,7,133,1,7,5,7,137,8,7,
        10,7,12,7,140,9,7,1,7,4,7,143,8,7,11,7,12,7,144,1,7,5,7,148,8,7,
        10,7,12,7,151,9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,10,
        1,10,1,11,1,11,1,12,1,12,1,13,1,13,3,13,171,8,13,1,14,1,14,3,14,
        175,8,14,1,15,1,15,3,15,179,8,15,1,16,1,16,3,16,183,8,16,1,17,1,
        17,3,17,187,8,17,1,18,1,18,5,18,191,8,18,10,18,12,18,194,9,18,1,
        19,4,19,197,8,19,11,19,12,19,198,1,19,1,19,1,20,1,20,1,20,5,20,206,
        8,20,10,20,12,20,209,9,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,4,21,
        218,8,21,11,21,12,21,219,1,21,1,21,4,21,224,8,21,11,21,12,21,225,
        1,21,1,21,4,21,230,8,21,11,21,12,21,231,1,21,1,21,4,21,236,8,21,
        11,21,12,21,237,1,21,1,21,1,21,1,21,1,21,1,21,3,21,246,8,21,1,21,
        5,21,249,8,21,10,21,12,21,252,9,21,1,21,4,21,255,8,21,11,21,12,21,
        256,1,21,1,21,1,22,1,22,1,22,4,22,264,8,22,11,22,12,22,265,1,22,
        1,22,4,22,270,8,22,11,22,12,22,271,1,22,1,22,4,22,276,8,22,11,22,
        12,22,277,1,22,1,22,4,22,282,8,22,11,22,12,22,283,1,22,1,22,1,22,
        1,22,1,22,1,22,3,22,292,8,22,1,22,5,22,295,8,22,10,22,12,22,298,
        9,22,1,22,1,22,1,207,0,23,1,1,3,2,5,0,7,0,9,0,11,3,13,4,15,5,17,
        6,19,7,21,8,23,9,25,0,27,0,29,0,31,0,33,0,35,0,37,0,39,10,41,11,
        43,12,45,13,1,0,16,2,0,43,43,45,45,2,0,69,69,101,101,1,0,48,57,2,
        0,10,10,13,13,2,0,84,84,116,116,2,0,89,89,121,121,2,0,80,80,112,
        112,2,0,79,79,111,111,2,0,82,82,114,114,2,0,65,90,97,122,4,0,34,
        35,39,39,42,43,45,46,3,0,9,10,13,13,32,32,5,0,33,33,35,35,38,38,
        59,59,92,92,2,0,77,77,109,109,2,0,65,65,97,97,2,0,75,75,107,107,
        340,0,1,1,0,0,0,0,3,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,48,1,0,0,0,3,53,1,0,0,
        0,5,73,1,0,0,0,7,75,1,0,0,0,9,78,1,0,0,0,11,83,1,0,0,0,13,107,1,
        0,0,0,15,131,1,0,0,0,17,154,1,0,0,0,19,159,1,0,0,0,21,161,1,0,0,
        0,23,164,1,0,0,0,25,166,1,0,0,0,27,170,1,0,0,0,29,174,1,0,0,0,31,
        178,1,0,0,0,33,182,1,0,0,0,35,186,1,0,0,0,37,188,1,0,0,0,39,196,
        1,0,0,0,41,202,1,0,0,0,43,245,1,0,0,0,45,291,1,0,0,0,47,49,7,0,0,
        0,48,47,1,0,0,0,48,49,1,0,0,0,49,50,1,0,0,0,50,51,3,9,4,0,51,2,1,
        0,0,0,52,54,7,0,0,0,53,52,1,0,0,0,53,54,1,0,0,0,54,57,1,0,0,0,55,
        58,3,9,4,0,56,58,3,5,2,0,57,55,1,0,0,0,57,56,1,0,0,0,58,64,1,0,0,
        0,59,61,7,1,0,0,60,62,7,0,0,0,61,60,1,0,0,0,61,62,1,0,0,0,62,63,
        1,0,0,0,63,65,3,9,4,0,64,59,1,0,0,0,64,65,1,0,0,0,65,4,1,0,0,0,66,
        67,3,9,4,0,67,69,5,46,0,0,68,70,3,9,4,0,69,68,1,0,0,0,69,70,1,0,
        0,0,70,74,1,0,0,0,71,72,5,46,0,0,72,74,3,9,4,0,73,66,1,0,0,0,73,
        71,1,0,0,0,74,6,1,0,0,0,75,76,7,2,0,0,76,8,1,0,0,0,77,79,3,7,3,0,
        78,77,1,0,0,0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,10,1,
        0,0,0,82,84,5,35,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,
        86,1,0,0,0,86,90,1,0,0,0,87,89,8,3,0,0,88,87,1,0,0,0,89,92,1,0,0,
        0,90,88,1,0,0,0,90,91,1,0,0,0,91,94,1,0,0,0,92,90,1,0,0,0,93,95,
        5,35,0,0,94,93,1,0,0,0,95,96,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,
        97,101,1,0,0,0,98,100,8,3,0,0,99,98,1,0,0,0,100,103,1,0,0,0,101,
        99,1,0,0,0,101,102,1,0,0,0,102,104,1,0,0,0,103,101,1,0,0,0,104,105,
        6,5,0,0,105,12,1,0,0,0,106,108,5,33,0,0,107,106,1,0,0,0,108,109,
        1,0,0,0,109,107,1,0,0,0,109,110,1,0,0,0,110,114,1,0,0,0,111,113,
        8,3,0,0,112,111,1,0,0,0,113,116,1,0,0,0,114,112,1,0,0,0,114,115,
        1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,117,119,5,33,0,0,118,117,
        1,0,0,0,119,120,1,0,0,0,120,118,1,0,0,0,120,121,1,0,0,0,121,125,
        1,0,0,0,122,124,8,3,0,0,123,122,1,0,0,0,124,127,1,0,0,0,125,123,
        1,0,0,0,125,126,1,0,0,0,126,128,1,0,0,0,127,125,1,0,0,0,128,129,
        6,6,0,0,129,14,1,0,0,0,130,132,5,59,0,0,131,130,1,0,0,0,132,133,
        1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,138,1,0,0,0,135,137,
        8,3,0,0,136,135,1,0,0,0,137,140,1,0,0,0,138,136,1,0,0,0,138,139,
        1,0,0,0,139,142,1,0,0,0,140,138,1,0,0,0,141,143,5,59,0,0,142,141,
        1,0,0,0,143,144,1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,149,
        1,0,0,0,146,148,8,3,0,0,147,146,1,0,0,0,148,151,1,0,0,0,149,147,
        1,0,0,0,149,150,1,0,0,0,150,152,1,0,0,0,151,149,1,0,0,0,152,153,
        6,7,0,0,153,16,1,0,0,0,154,155,7,4,0,0,155,156,7,5,0,0,156,157,7,
        6,0,0,157,158,7,1,0,0,158,18,1,0,0,0,159,160,5,61,0,0,160,20,1,0,
        0,0,161,162,7,7,0,0,162,163,7,8,0,0,163,22,1,0,0,0,164,165,3,37,
        18,0,165,24,1,0,0,0,166,167,7,9,0,0,167,26,1,0,0,0,168,171,3,25,
        12,0,169,171,3,7,3,0,170,168,1,0,0,0,170,169,1,0,0,0,171,28,1,0,
        0,0,172,175,3,27,13,0,173,175,5,95,0,0,174,172,1,0,0,0,174,173,1,
        0,0,0,175,30,1,0,0,0,176,179,3,29,14,0,177,179,7,10,0,0,178,176,
        1,0,0,0,178,177,1,0,0,0,179,32,1,0,0,0,180,183,3,27,13,0,181,183,
        5,39,0,0,182,180,1,0,0,0,182,181,1,0,0,0,183,34,1,0,0,0,184,187,
        3,27,13,0,185,187,7,0,0,0,186,184,1,0,0,0,186,185,1,0,0,0,187,36,
        1,0,0,0,188,192,3,29,14,0,189,191,3,31,15,0,190,189,1,0,0,0,191,
        194,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,38,1,0,0,0,194,192,
        1,0,0,0,195,197,7,11,0,0,196,195,1,0,0,0,197,198,1,0,0,0,198,196,
        1,0,0,0,198,199,1,0,0,0,199,200,1,0,0,0,200,201,6,19,1,0,201,40,
        1,0,0,0,202,207,5,123,0,0,203,206,3,41,20,0,204,206,9,0,0,0,205,
        203,1,0,0,0,205,204,1,0,0,0,206,209,1,0,0,0,207,208,1,0,0,0,207,
        205,1,0,0,0,208,210,1,0,0,0,209,207,1,0,0,0,210,211,5,125,0,0,211,
        212,1,0,0,0,212,213,6,20,0,0,213,42,1,0,0,0,214,246,7,12,0,0,215,
        217,5,47,0,0,216,218,5,47,0,0,217,216,1,0,0,0,218,219,1,0,0,0,219,
        217,1,0,0,0,219,220,1,0,0,0,220,246,1,0,0,0,221,223,5,42,0,0,222,
        224,5,42,0,0,223,222,1,0,0,0,224,225,1,0,0,0,225,223,1,0,0,0,225,
        226,1,0,0,0,226,246,1,0,0,0,227,229,5,45,0,0,228,230,5,45,0,0,229,
        228,1,0,0,0,230,231,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,
        246,1,0,0,0,233,235,5,43,0,0,234,236,5,43,0,0,235,234,1,0,0,0,236,
        237,1,0,0,0,237,235,1,0,0,0,237,238,1,0,0,0,238,246,1,0,0,0,239,
        240,7,8,0,0,240,241,7,1,0,0,241,242,7,13,0,0,242,243,7,14,0,0,243,
        244,7,8,0,0,244,246,7,15,0,0,245,214,1,0,0,0,245,215,1,0,0,0,245,
        221,1,0,0,0,245,227,1,0,0,0,245,233,1,0,0,0,245,239,1,0,0,0,246,
        250,1,0,0,0,247,249,5,32,0,0,248,247,1,0,0,0,249,252,1,0,0,0,250,
        248,1,0,0,0,250,251,1,0,0,0,251,254,1,0,0,0,252,250,1,0,0,0,253,
        255,7,3,0,0,254,253,1,0,0,0,255,256,1,0,0,0,256,254,1,0,0,0,256,
        257,1,0,0,0,257,258,1,0,0,0,258,259,6,21,0,0,259,44,1,0,0,0,260,
        292,7,12,0,0,261,263,5,47,0,0,262,264,5,47,0,0,263,262,1,0,0,0,264,
        265,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,292,1,0,0,0,267,
        269,5,42,0,0,268,270,5,42,0,0,269,268,1,0,0,0,270,271,1,0,0,0,271,
        269,1,0,0,0,271,272,1,0,0,0,272,292,1,0,0,0,273,275,5,45,0,0,274,
        276,5,45,0,0,275,274,1,0,0,0,276,277,1,0,0,0,277,275,1,0,0,0,277,
        278,1,0,0,0,278,292,1,0,0,0,279,281,5,43,0,0,280,282,5,43,0,0,281,
        280,1,0,0,0,282,283,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,
        292,1,0,0,0,285,286,7,8,0,0,286,287,7,1,0,0,287,288,7,13,0,0,288,
        289,7,14,0,0,289,290,7,8,0,0,290,292,7,15,0,0,291,260,1,0,0,0,291,
        261,1,0,0,0,291,267,1,0,0,0,291,273,1,0,0,0,291,279,1,0,0,0,291,
        285,1,0,0,0,292,296,1,0,0,0,293,295,8,3,0,0,294,293,1,0,0,0,295,
        298,1,0,0,0,296,294,1,0,0,0,296,297,1,0,0,0,297,299,1,0,0,0,298,
        296,1,0,0,0,299,300,6,22,0,0,300,46,1,0,0,0,43,0,48,53,57,61,64,
        69,73,80,85,90,96,101,109,114,120,125,133,138,144,149,170,174,178,
        182,186,192,198,205,207,219,225,231,237,245,250,256,265,271,277,
        283,291,296,2,0,1,0,6,0,0
    ]

class CyanaMRLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Integer = 1
    Float = 2
    SHARP_COMMENT = 3
    EXCLM_COMMENT = 4
    SMCLN_COMMENT = 5
    Type = 6
    Equ_op = 7
    Or = 8
    Simple_name = 9
    SPACE = 10
    COMMENT = 11
    SECTION_COMMENT = 12
    LINE_COMMENT = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'TYPE'", "'='", "'OR'" ]

    symbolicNames = [ "<INVALID>",
            "Integer", "Float", "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", 
            "Type", "Equ_op", "Or", "Simple_name", "SPACE", "COMMENT", "SECTION_COMMENT", 
            "LINE_COMMENT" ]

    ruleNames = [ "Integer", "Float", "DEC_DOT_DEC", "DEC_DIGIT", "DECIMAL", 
                  "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", "Type", 
                  "Equ_op", "Or", "Simple_name", "ALPHA", "ALPHA_NUM", "START_CHAR", 
                  "NAME_CHAR", "ATM_NAME_CHAR", "ATM_TYPE_CHAR", "SIMPLE_NAME", 
                  "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT" ]

    grammarFileName = "CyanaMRLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


