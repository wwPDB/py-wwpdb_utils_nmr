# Generated from CyanaMRLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,13,304,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,1,0,3,0,49,8,0,1,0,1,0,1,1,3,1,
        54,8,1,1,1,1,1,3,1,58,8,1,1,1,1,1,3,1,62,8,1,1,1,3,1,65,8,1,1,2,
        1,2,1,2,3,2,70,8,2,1,2,1,2,3,2,74,8,2,1,3,1,3,1,4,4,4,79,8,4,11,
        4,12,4,80,1,5,4,5,84,8,5,11,5,12,5,85,1,5,5,5,89,8,5,10,5,12,5,92,
        9,5,1,5,5,5,95,8,5,10,5,12,5,98,9,5,1,5,5,5,101,8,5,10,5,12,5,104,
        9,5,1,5,1,5,1,6,4,6,109,8,6,11,6,12,6,110,1,6,5,6,114,8,6,10,6,12,
        6,117,9,6,1,6,5,6,120,8,6,10,6,12,6,123,9,6,1,6,5,6,126,8,6,10,6,
        12,6,129,9,6,1,6,1,6,1,7,4,7,134,8,7,11,7,12,7,135,1,7,5,7,139,8,
        7,10,7,12,7,142,9,7,1,7,5,7,145,8,7,10,7,12,7,148,9,7,1,7,5,7,151,
        8,7,10,7,12,7,154,9,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,10,1,
        10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,3,13,174,8,13,1,14,1,14,3,
        14,178,8,14,1,15,1,15,3,15,182,8,15,1,16,1,16,3,16,186,8,16,1,17,
        1,17,3,17,190,8,17,1,18,1,18,5,18,194,8,18,10,18,12,18,197,9,18,
        1,19,4,19,200,8,19,11,19,12,19,201,1,19,1,19,1,20,1,20,1,20,5,20,
        209,8,20,10,20,12,20,212,9,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,
        4,21,221,8,21,11,21,12,21,222,1,21,1,21,4,21,227,8,21,11,21,12,21,
        228,1,21,1,21,4,21,233,8,21,11,21,12,21,234,1,21,1,21,4,21,239,8,
        21,11,21,12,21,240,1,21,1,21,1,21,1,21,1,21,1,21,3,21,249,8,21,1,
        21,5,21,252,8,21,10,21,12,21,255,9,21,1,21,4,21,258,8,21,11,21,12,
        21,259,1,21,1,21,1,22,1,22,1,22,4,22,267,8,22,11,22,12,22,268,1,
        22,1,22,4,22,273,8,22,11,22,12,22,274,1,22,1,22,4,22,279,8,22,11,
        22,12,22,280,1,22,1,22,4,22,285,8,22,11,22,12,22,286,1,22,1,22,1,
        22,1,22,1,22,1,22,3,22,295,8,22,1,22,5,22,298,8,22,10,22,12,22,301,
        9,22,1,22,1,22,1,210,0,23,1,1,3,2,5,0,7,0,9,0,11,3,13,4,15,5,17,
        6,19,7,21,8,23,9,25,0,27,0,29,0,31,0,33,0,35,0,37,0,39,10,41,11,
        43,12,45,13,1,0,16,2,0,43,43,45,45,2,0,69,69,101,101,1,0,48,57,2,
        0,10,10,13,13,2,0,84,84,116,116,2,0,89,89,121,121,2,0,80,80,112,
        112,2,0,79,79,111,111,2,0,82,82,114,114,2,0,65,90,97,122,4,0,34,
        35,39,39,42,43,45,46,3,0,9,10,13,13,32,32,5,0,33,33,35,35,38,38,
        59,59,92,92,2,0,77,77,109,109,2,0,65,65,97,97,2,0,75,75,107,107,
        343,0,1,1,0,0,0,0,3,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,1,48,1,0,0,0,3,53,1,0,0,
        0,5,73,1,0,0,0,7,75,1,0,0,0,9,78,1,0,0,0,11,83,1,0,0,0,13,108,1,
        0,0,0,15,133,1,0,0,0,17,157,1,0,0,0,19,162,1,0,0,0,21,164,1,0,0,
        0,23,167,1,0,0,0,25,169,1,0,0,0,27,173,1,0,0,0,29,177,1,0,0,0,31,
        181,1,0,0,0,33,185,1,0,0,0,35,189,1,0,0,0,37,191,1,0,0,0,39,199,
        1,0,0,0,41,205,1,0,0,0,43,248,1,0,0,0,45,294,1,0,0,0,47,49,7,0,0,
        0,48,47,1,0,0,0,48,49,1,0,0,0,49,50,1,0,0,0,50,51,3,9,4,0,51,2,1,
        0,0,0,52,54,7,0,0,0,53,52,1,0,0,0,53,54,1,0,0,0,54,57,1,0,0,0,55,
        58,3,9,4,0,56,58,3,5,2,0,57,55,1,0,0,0,57,56,1,0,0,0,58,64,1,0,0,
        0,59,61,7,1,0,0,60,62,7,0,0,0,61,60,1,0,0,0,61,62,1,0,0,0,62,63,
        1,0,0,0,63,65,3,9,4,0,64,59,1,0,0,0,64,65,1,0,0,0,65,4,1,0,0,0,66,
        67,3,9,4,0,67,69,5,46,0,0,68,70,3,9,4,0,69,68,1,0,0,0,69,70,1,0,
        0,0,70,74,1,0,0,0,71,72,5,46,0,0,72,74,3,9,4,0,73,66,1,0,0,0,73,
        71,1,0,0,0,74,6,1,0,0,0,75,76,7,2,0,0,76,8,1,0,0,0,77,79,3,7,3,0,
        78,77,1,0,0,0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,10,1,
        0,0,0,82,84,5,35,0,0,83,82,1,0,0,0,84,85,1,0,0,0,85,83,1,0,0,0,85,
        86,1,0,0,0,86,90,1,0,0,0,87,89,8,3,0,0,88,87,1,0,0,0,89,92,1,0,0,
        0,90,88,1,0,0,0,90,91,1,0,0,0,91,96,1,0,0,0,92,90,1,0,0,0,93,95,
        5,35,0,0,94,93,1,0,0,0,95,98,1,0,0,0,96,94,1,0,0,0,96,97,1,0,0,0,
        97,102,1,0,0,0,98,96,1,0,0,0,99,101,8,3,0,0,100,99,1,0,0,0,101,104,
        1,0,0,0,102,100,1,0,0,0,102,103,1,0,0,0,103,105,1,0,0,0,104,102,
        1,0,0,0,105,106,6,5,0,0,106,12,1,0,0,0,107,109,5,33,0,0,108,107,
        1,0,0,0,109,110,1,0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,115,
        1,0,0,0,112,114,8,3,0,0,113,112,1,0,0,0,114,117,1,0,0,0,115,113,
        1,0,0,0,115,116,1,0,0,0,116,121,1,0,0,0,117,115,1,0,0,0,118,120,
        5,33,0,0,119,118,1,0,0,0,120,123,1,0,0,0,121,119,1,0,0,0,121,122,
        1,0,0,0,122,127,1,0,0,0,123,121,1,0,0,0,124,126,8,3,0,0,125,124,
        1,0,0,0,126,129,1,0,0,0,127,125,1,0,0,0,127,128,1,0,0,0,128,130,
        1,0,0,0,129,127,1,0,0,0,130,131,6,6,0,0,131,14,1,0,0,0,132,134,5,
        59,0,0,133,132,1,0,0,0,134,135,1,0,0,0,135,133,1,0,0,0,135,136,1,
        0,0,0,136,140,1,0,0,0,137,139,8,3,0,0,138,137,1,0,0,0,139,142,1,
        0,0,0,140,138,1,0,0,0,140,141,1,0,0,0,141,146,1,0,0,0,142,140,1,
        0,0,0,143,145,5,59,0,0,144,143,1,0,0,0,145,148,1,0,0,0,146,144,1,
        0,0,0,146,147,1,0,0,0,147,152,1,0,0,0,148,146,1,0,0,0,149,151,8,
        3,0,0,150,149,1,0,0,0,151,154,1,0,0,0,152,150,1,0,0,0,152,153,1,
        0,0,0,153,155,1,0,0,0,154,152,1,0,0,0,155,156,6,7,0,0,156,16,1,0,
        0,0,157,158,7,4,0,0,158,159,7,5,0,0,159,160,7,6,0,0,160,161,7,1,
        0,0,161,18,1,0,0,0,162,163,5,61,0,0,163,20,1,0,0,0,164,165,7,7,0,
        0,165,166,7,8,0,0,166,22,1,0,0,0,167,168,3,37,18,0,168,24,1,0,0,
        0,169,170,7,9,0,0,170,26,1,0,0,0,171,174,3,25,12,0,172,174,3,7,3,
        0,173,171,1,0,0,0,173,172,1,0,0,0,174,28,1,0,0,0,175,178,3,27,13,
        0,176,178,5,95,0,0,177,175,1,0,0,0,177,176,1,0,0,0,178,30,1,0,0,
        0,179,182,3,29,14,0,180,182,7,10,0,0,181,179,1,0,0,0,181,180,1,0,
        0,0,182,32,1,0,0,0,183,186,3,27,13,0,184,186,5,39,0,0,185,183,1,
        0,0,0,185,184,1,0,0,0,186,34,1,0,0,0,187,190,3,27,13,0,188,190,7,
        0,0,0,189,187,1,0,0,0,189,188,1,0,0,0,190,36,1,0,0,0,191,195,3,29,
        14,0,192,194,3,31,15,0,193,192,1,0,0,0,194,197,1,0,0,0,195,193,1,
        0,0,0,195,196,1,0,0,0,196,38,1,0,0,0,197,195,1,0,0,0,198,200,7,11,
        0,0,199,198,1,0,0,0,200,201,1,0,0,0,201,199,1,0,0,0,201,202,1,0,
        0,0,202,203,1,0,0,0,203,204,6,19,1,0,204,40,1,0,0,0,205,210,5,123,
        0,0,206,209,3,41,20,0,207,209,9,0,0,0,208,206,1,0,0,0,208,207,1,
        0,0,0,209,212,1,0,0,0,210,211,1,0,0,0,210,208,1,0,0,0,211,213,1,
        0,0,0,212,210,1,0,0,0,213,214,5,125,0,0,214,215,1,0,0,0,215,216,
        6,20,0,0,216,42,1,0,0,0,217,249,7,12,0,0,218,220,5,47,0,0,219,221,
        5,47,0,0,220,219,1,0,0,0,221,222,1,0,0,0,222,220,1,0,0,0,222,223,
        1,0,0,0,223,249,1,0,0,0,224,226,5,42,0,0,225,227,5,42,0,0,226,225,
        1,0,0,0,227,228,1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,249,
        1,0,0,0,230,232,5,45,0,0,231,233,5,45,0,0,232,231,1,0,0,0,233,234,
        1,0,0,0,234,232,1,0,0,0,234,235,1,0,0,0,235,249,1,0,0,0,236,238,
        5,43,0,0,237,239,5,43,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,
        1,0,0,0,240,241,1,0,0,0,241,249,1,0,0,0,242,243,7,8,0,0,243,244,
        7,1,0,0,244,245,7,13,0,0,245,246,7,14,0,0,246,247,7,8,0,0,247,249,
        7,15,0,0,248,217,1,0,0,0,248,218,1,0,0,0,248,224,1,0,0,0,248,230,
        1,0,0,0,248,236,1,0,0,0,248,242,1,0,0,0,249,253,1,0,0,0,250,252,
        5,32,0,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,
        1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,256,258,7,3,0,0,257,256,
        1,0,0,0,258,259,1,0,0,0,259,257,1,0,0,0,259,260,1,0,0,0,260,261,
        1,0,0,0,261,262,6,21,0,0,262,44,1,0,0,0,263,295,7,12,0,0,264,266,
        5,47,0,0,265,267,5,47,0,0,266,265,1,0,0,0,267,268,1,0,0,0,268,266,
        1,0,0,0,268,269,1,0,0,0,269,295,1,0,0,0,270,272,5,42,0,0,271,273,
        5,42,0,0,272,271,1,0,0,0,273,274,1,0,0,0,274,272,1,0,0,0,274,275,
        1,0,0,0,275,295,1,0,0,0,276,278,5,45,0,0,277,279,5,45,0,0,278,277,
        1,0,0,0,279,280,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,295,
        1,0,0,0,282,284,5,43,0,0,283,285,5,43,0,0,284,283,1,0,0,0,285,286,
        1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,295,1,0,0,0,288,289,
        7,8,0,0,289,290,7,1,0,0,290,291,7,13,0,0,291,292,7,14,0,0,292,293,
        7,8,0,0,293,295,7,15,0,0,294,263,1,0,0,0,294,264,1,0,0,0,294,270,
        1,0,0,0,294,276,1,0,0,0,294,282,1,0,0,0,294,288,1,0,0,0,295,299,
        1,0,0,0,296,298,8,3,0,0,297,296,1,0,0,0,298,301,1,0,0,0,299,297,
        1,0,0,0,299,300,1,0,0,0,300,302,1,0,0,0,301,299,1,0,0,0,302,303,
        6,22,0,0,303,46,1,0,0,0,43,0,48,53,57,61,64,69,73,80,85,90,96,102,
        110,115,121,127,135,140,146,152,173,177,181,185,189,195,201,208,
        210,222,228,234,240,248,253,259,268,274,280,286,294,299,2,0,1,0,
        6,0,0
    ]

class CyanaMRLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Integer = 1
    Float = 2
    SHARP_COMMENT = 3
    EXCLM_COMMENT = 4
    SMCLN_COMMENT = 5
    Type = 6
    Equ_op = 7
    Or = 8
    Simple_name = 9
    SPACE = 10
    COMMENT = 11
    SECTION_COMMENT = 12
    LINE_COMMENT = 13

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'TYPE'", "'='", "'OR'" ]

    symbolicNames = [ "<INVALID>",
            "Integer", "Float", "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", 
            "Type", "Equ_op", "Or", "Simple_name", "SPACE", "COMMENT", "SECTION_COMMENT", 
            "LINE_COMMENT" ]

    ruleNames = [ "Integer", "Float", "DEC_DOT_DEC", "DEC_DIGIT", "DECIMAL", 
                  "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", "Type", 
                  "Equ_op", "Or", "Simple_name", "ALPHA", "ALPHA_NUM", "START_CHAR", 
                  "NAME_CHAR", "ATM_NAME_CHAR", "ATM_TYPE_CHAR", "SIMPLE_NAME", 
                  "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT" ]

    grammarFileName = "CyanaMRLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


