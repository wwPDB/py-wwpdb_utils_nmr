# Generated from DynamoMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,126,1058,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,81,8,0,10,
        0,12,0,84,9,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,4,1,94,8,1,11,1,12,
        1,95,1,1,3,1,99,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,4,2,132,8,2,11,2,12,2,133,1,3,1,3,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,4,4,185,8,4,11,4,12,
        4,186,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,1,6,4,6,240,8,6,11,6,12,6,241,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        4,8,297,8,8,11,8,12,8,298,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,4,10,
        363,8,10,11,10,12,10,364,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,12,1,12,1,12,1,12,1,12,1,12,4,12,433,8,12,11,12,12,12,434,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,4,14,481,8,14,11,14,12,14,482,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,4,16,522,8,16,11,16,12,16,
        523,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,4,18,565,8,18,11,18,12,18,566,1,19,1,19,1,19,1,19,1,19,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        4,20,588,8,20,11,20,12,20,589,1,20,3,20,593,8,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
        636,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,3,20,665,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,694,8,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,721,8,20,1,20,
        1,20,1,20,1,20,3,20,727,8,20,1,20,3,20,730,8,20,1,20,1,20,1,20,1,
        20,1,20,1,20,3,20,738,8,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,
        21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,4,21,771,8,
        21,11,21,12,21,772,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,4,23,831,8,23,11,23,12,23,
        832,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,4,25,906,8,25,11,25,12,25,907,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,4,27,985,8,27,
        11,27,12,27,986,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,
        1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,4,29,1040,8,29,11,29,12,29,1041,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,0,0,32,0,2,
        4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,
        50,52,54,56,58,60,62,0,3,1,0,29,31,1,0,36,41,1,0,4,5,1084,0,82,1,
        0,0,0,2,87,1,0,0,0,4,100,1,0,0,0,6,135,1,0,0,0,8,149,1,0,0,0,10,
        188,1,0,0,0,12,204,1,0,0,0,14,243,1,0,0,0,16,259,1,0,0,0,18,300,
        1,0,0,0,20,317,1,0,0,0,22,366,1,0,0,0,24,387,1,0,0,0,26,436,1,0,
        0,0,28,457,1,0,0,0,30,484,1,0,0,0,32,494,1,0,0,0,34,525,1,0,0,0,
        36,537,1,0,0,0,38,568,1,0,0,0,40,580,1,0,0,0,42,741,1,0,0,0,44,774,
        1,0,0,0,46,787,1,0,0,0,48,834,1,0,0,0,50,854,1,0,0,0,52,909,1,0,
        0,0,54,933,1,0,0,0,56,988,1,0,0,0,58,1012,1,0,0,0,60,1043,1,0,0,
        0,62,1055,1,0,0,0,64,81,3,2,1,0,65,81,3,4,2,0,66,81,3,8,4,0,67,81,
        3,12,6,0,68,81,3,16,8,0,69,81,3,20,10,0,70,81,3,24,12,0,71,81,3,
        28,14,0,72,81,3,32,16,0,73,81,3,36,18,0,74,81,3,40,20,0,75,81,3,
        42,21,0,76,81,3,46,23,0,77,81,3,50,25,0,78,81,3,54,27,0,79,81,3,
        58,29,0,80,64,1,0,0,0,80,65,1,0,0,0,80,66,1,0,0,0,80,67,1,0,0,0,
        80,68,1,0,0,0,80,69,1,0,0,0,80,70,1,0,0,0,80,71,1,0,0,0,80,72,1,
        0,0,0,80,73,1,0,0,0,80,74,1,0,0,0,80,75,1,0,0,0,80,76,1,0,0,0,80,
        77,1,0,0,0,80,78,1,0,0,0,80,79,1,0,0,0,81,84,1,0,0,0,82,80,1,0,0,
        0,82,83,1,0,0,0,83,85,1,0,0,0,84,82,1,0,0,0,85,86,5,0,0,1,86,1,1,
        0,0,0,87,98,5,1,0,0,88,89,5,14,0,0,89,90,5,59,0,0,90,99,5,64,0,0,
        91,93,5,15,0,0,92,94,5,67,0,0,93,92,1,0,0,0,94,95,1,0,0,0,95,93,
        1,0,0,0,95,96,1,0,0,0,96,97,1,0,0,0,97,99,5,69,0,0,98,88,1,0,0,0,
        98,91,1,0,0,0,99,3,1,0,0,0,100,101,5,2,0,0,101,102,5,72,0,0,102,
        103,5,73,0,0,103,104,5,75,0,0,104,105,5,76,0,0,105,106,5,77,0,0,
        106,107,5,79,0,0,107,108,5,80,0,0,108,109,5,81,0,0,109,110,5,103,
        0,0,110,111,5,104,0,0,111,112,5,100,0,0,112,113,5,102,0,0,113,114,
        5,101,0,0,114,115,5,119,0,0,115,116,5,3,0,0,116,117,5,122,0,0,117,
        118,5,122,0,0,118,119,5,122,0,0,119,120,5,122,0,0,120,121,5,122,
        0,0,121,122,5,122,0,0,122,123,5,122,0,0,123,124,5,122,0,0,124,125,
        5,122,0,0,125,126,5,122,0,0,126,127,5,122,0,0,127,128,5,122,0,0,
        128,129,5,122,0,0,129,131,5,124,0,0,130,132,3,6,3,0,131,130,1,0,
        0,0,132,133,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,5,1,0,0,
        0,135,136,5,4,0,0,136,137,5,4,0,0,137,138,5,4,0,0,138,139,5,9,0,
        0,139,140,5,9,0,0,140,141,5,4,0,0,141,142,5,9,0,0,142,143,5,9,0,
        0,143,144,3,62,31,0,144,145,3,62,31,0,145,146,3,62,31,0,146,147,
        3,62,31,0,147,148,3,62,31,0,148,7,1,0,0,0,149,150,5,2,0,0,150,151,
        5,72,0,0,151,152,5,73,0,0,152,153,5,74,0,0,153,154,5,75,0,0,154,
        155,5,76,0,0,155,156,5,77,0,0,156,157,5,78,0,0,157,158,5,79,0,0,
        158,159,5,80,0,0,159,160,5,81,0,0,160,161,5,103,0,0,161,162,5,104,
        0,0,162,163,5,100,0,0,163,164,5,102,0,0,164,165,5,101,0,0,165,166,
        5,119,0,0,166,167,5,3,0,0,167,168,5,122,0,0,168,169,5,122,0,0,169,
        170,5,122,0,0,170,171,5,122,0,0,171,172,5,122,0,0,172,173,5,122,
        0,0,173,174,5,122,0,0,174,175,5,122,0,0,175,176,5,122,0,0,176,177,
        5,122,0,0,177,178,5,122,0,0,178,179,5,122,0,0,179,180,5,122,0,0,
        180,181,5,122,0,0,181,182,5,122,0,0,182,184,5,124,0,0,183,185,3,
        10,5,0,184,183,1,0,0,0,185,186,1,0,0,0,186,184,1,0,0,0,186,187,1,
        0,0,0,187,9,1,0,0,0,188,189,5,4,0,0,189,190,5,4,0,0,190,191,5,9,
        0,0,191,192,5,4,0,0,192,193,5,9,0,0,193,194,5,9,0,0,194,195,5,9,
        0,0,195,196,5,4,0,0,196,197,5,9,0,0,197,198,5,9,0,0,198,199,3,62,
        31,0,199,200,3,62,31,0,200,201,3,62,31,0,201,202,3,62,31,0,202,203,
        3,62,31,0,203,11,1,0,0,0,204,205,5,2,0,0,205,206,5,72,0,0,206,207,
        5,73,0,0,207,208,5,75,0,0,208,209,5,76,0,0,209,210,5,77,0,0,210,
        211,5,74,0,0,211,212,5,79,0,0,212,213,5,80,0,0,213,214,5,81,0,0,
        214,215,5,78,0,0,215,216,5,103,0,0,216,217,5,104,0,0,217,218,5,100,
        0,0,218,219,5,102,0,0,219,220,5,101,0,0,220,221,5,119,0,0,221,222,
        5,3,0,0,222,223,5,122,0,0,223,224,5,122,0,0,224,225,5,122,0,0,225,
        226,5,122,0,0,226,227,5,122,0,0,227,228,5,122,0,0,228,229,5,122,
        0,0,229,230,5,122,0,0,230,231,5,122,0,0,231,232,5,122,0,0,232,233,
        5,122,0,0,233,234,5,122,0,0,234,235,5,122,0,0,235,236,5,122,0,0,
        236,237,5,122,0,0,237,239,5,124,0,0,238,240,3,14,7,0,239,238,1,0,
        0,0,240,241,1,0,0,0,241,239,1,0,0,0,241,242,1,0,0,0,242,13,1,0,0,
        0,243,244,5,4,0,0,244,245,5,4,0,0,245,246,5,4,0,0,246,247,5,9,0,
        0,247,248,5,9,0,0,248,249,5,9,0,0,249,250,5,4,0,0,250,251,5,9,0,
        0,251,252,5,9,0,0,252,253,5,9,0,0,253,254,3,62,31,0,254,255,3,62,
        31,0,255,256,3,62,31,0,256,257,3,62,31,0,257,258,3,62,31,0,258,15,
        1,0,0,0,259,260,5,2,0,0,260,261,5,72,0,0,261,262,5,75,0,0,262,263,
        5,76,0,0,263,264,5,77,0,0,264,265,5,79,0,0,265,266,5,80,0,0,266,
        267,5,81,0,0,267,268,5,83,0,0,268,269,5,84,0,0,269,270,5,85,0,0,
        270,271,5,87,0,0,271,272,5,88,0,0,272,273,5,89,0,0,273,274,5,105,
        0,0,274,275,5,106,0,0,275,276,5,100,0,0,276,277,5,119,0,0,277,278,
        5,3,0,0,278,279,5,122,0,0,279,280,5,122,0,0,280,281,5,122,0,0,281,
        282,5,122,0,0,282,283,5,122,0,0,283,284,5,122,0,0,284,285,5,122,
        0,0,285,286,5,122,0,0,286,287,5,122,0,0,287,288,5,122,0,0,288,289,
        5,122,0,0,289,290,5,122,0,0,290,291,5,122,0,0,291,292,5,122,0,0,
        292,293,5,122,0,0,293,294,5,122,0,0,294,296,5,124,0,0,295,297,3,
        18,9,0,296,295,1,0,0,0,297,298,1,0,0,0,298,296,1,0,0,0,298,299,1,
        0,0,0,299,17,1,0,0,0,300,301,5,4,0,0,301,302,5,4,0,0,302,303,5,9,
        0,0,303,304,5,9,0,0,304,305,5,4,0,0,305,306,5,9,0,0,306,307,5,9,
        0,0,307,308,5,4,0,0,308,309,5,9,0,0,309,310,5,9,0,0,310,311,5,4,
        0,0,311,312,5,9,0,0,312,313,5,9,0,0,313,314,3,62,31,0,314,315,3,
        62,31,0,315,316,3,62,31,0,316,19,1,0,0,0,317,318,5,2,0,0,318,319,
        5,72,0,0,319,320,5,74,0,0,320,321,5,75,0,0,321,322,5,76,0,0,322,
        323,5,77,0,0,323,324,5,78,0,0,324,325,5,79,0,0,325,326,5,80,0,0,
        326,327,5,81,0,0,327,328,5,82,0,0,328,329,5,83,0,0,329,330,5,84,
        0,0,330,331,5,85,0,0,331,332,5,86,0,0,332,333,5,87,0,0,333,334,5,
        88,0,0,334,335,5,89,0,0,335,336,5,105,0,0,336,337,5,106,0,0,337,
        338,5,100,0,0,338,339,5,119,0,0,339,340,5,3,0,0,340,341,5,122,0,
        0,341,342,5,122,0,0,342,343,5,122,0,0,343,344,5,122,0,0,344,345,
        5,122,0,0,345,346,5,122,0,0,346,347,5,122,0,0,347,348,5,122,0,0,
        348,349,5,122,0,0,349,350,5,122,0,0,350,351,5,122,0,0,351,352,5,
        122,0,0,352,353,5,122,0,0,353,354,5,122,0,0,354,355,5,122,0,0,355,
        356,5,122,0,0,356,357,5,122,0,0,357,358,5,122,0,0,358,359,5,122,
        0,0,359,360,5,122,0,0,360,362,5,124,0,0,361,363,3,22,11,0,362,361,
        1,0,0,0,363,364,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,21,1,
        0,0,0,366,367,5,4,0,0,367,368,5,9,0,0,368,369,5,4,0,0,369,370,5,
        9,0,0,370,371,5,9,0,0,371,372,5,9,0,0,372,373,5,4,0,0,373,374,5,
        9,0,0,374,375,5,9,0,0,375,376,5,9,0,0,376,377,5,4,0,0,377,378,5,
        9,0,0,378,379,5,9,0,0,379,380,5,9,0,0,380,381,5,4,0,0,381,382,5,
        9,0,0,382,383,5,9,0,0,383,384,3,62,31,0,384,385,3,62,31,0,385,386,
        3,62,31,0,386,23,1,0,0,0,387,388,5,2,0,0,388,389,5,72,0,0,389,390,
        5,75,0,0,390,391,5,76,0,0,391,392,5,77,0,0,392,393,5,74,0,0,393,
        394,5,79,0,0,394,395,5,80,0,0,395,396,5,81,0,0,396,397,5,78,0,0,
        397,398,5,83,0,0,398,399,5,84,0,0,399,400,5,85,0,0,400,401,5,82,
        0,0,401,402,5,87,0,0,402,403,5,88,0,0,403,404,5,89,0,0,404,405,5,
        86,0,0,405,406,5,105,0,0,406,407,5,106,0,0,407,408,5,100,0,0,408,
        409,5,119,0,0,409,410,5,3,0,0,410,411,5,122,0,0,411,412,5,122,0,
        0,412,413,5,122,0,0,413,414,5,122,0,0,414,415,5,122,0,0,415,416,
        5,122,0,0,416,417,5,122,0,0,417,418,5,122,0,0,418,419,5,122,0,0,
        419,420,5,122,0,0,420,421,5,122,0,0,421,422,5,122,0,0,422,423,5,
        122,0,0,423,424,5,122,0,0,424,425,5,122,0,0,425,426,5,122,0,0,426,
        427,5,122,0,0,427,428,5,122,0,0,428,429,5,122,0,0,429,430,5,122,
        0,0,430,432,5,124,0,0,431,433,3,26,13,0,432,431,1,0,0,0,433,434,
        1,0,0,0,434,432,1,0,0,0,434,435,1,0,0,0,435,25,1,0,0,0,436,437,5,
        4,0,0,437,438,5,4,0,0,438,439,5,9,0,0,439,440,5,9,0,0,440,441,5,
        9,0,0,441,442,5,4,0,0,442,443,5,9,0,0,443,444,5,9,0,0,444,445,5,
        9,0,0,445,446,5,4,0,0,446,447,5,9,0,0,447,448,5,9,0,0,448,449,5,
        9,0,0,449,450,5,4,0,0,450,451,5,9,0,0,451,452,5,9,0,0,452,453,5,
        9,0,0,453,454,3,62,31,0,454,455,3,62,31,0,455,456,3,62,31,0,456,
        27,1,0,0,0,457,458,5,2,0,0,458,459,5,75,0,0,459,460,5,76,0,0,460,
        461,5,77,0,0,461,462,5,79,0,0,462,463,5,80,0,0,463,464,5,81,0,0,
        464,465,5,95,0,0,465,466,5,96,0,0,466,467,5,102,0,0,467,468,5,119,
        0,0,468,469,5,3,0,0,469,470,5,122,0,0,470,471,5,122,0,0,471,472,
        5,122,0,0,472,473,5,122,0,0,473,474,5,122,0,0,474,475,5,122,0,0,
        475,476,5,122,0,0,476,477,5,122,0,0,477,478,5,122,0,0,478,480,5,
        124,0,0,479,481,3,30,15,0,480,479,1,0,0,0,481,482,1,0,0,0,482,480,
        1,0,0,0,482,483,1,0,0,0,483,29,1,0,0,0,484,485,5,4,0,0,485,486,5,
        9,0,0,486,487,5,9,0,0,487,488,5,4,0,0,488,489,5,9,0,0,489,490,5,
        9,0,0,490,491,3,62,31,0,491,492,3,62,31,0,492,493,3,62,31,0,493,
        31,1,0,0,0,494,495,5,2,0,0,495,496,5,74,0,0,496,497,5,75,0,0,497,
        498,5,76,0,0,498,499,5,77,0,0,499,500,5,78,0,0,500,501,5,79,0,0,
        501,502,5,80,0,0,502,503,5,81,0,0,503,504,5,95,0,0,504,505,5,96,
        0,0,505,506,5,102,0,0,506,507,5,119,0,0,507,508,5,3,0,0,508,509,
        5,122,0,0,509,510,5,122,0,0,510,511,5,122,0,0,511,512,5,122,0,0,
        512,513,5,122,0,0,513,514,5,122,0,0,514,515,5,122,0,0,515,516,5,
        122,0,0,516,517,5,122,0,0,517,518,5,122,0,0,518,519,5,122,0,0,519,
        521,5,124,0,0,520,522,3,34,17,0,521,520,1,0,0,0,522,523,1,0,0,0,
        523,521,1,0,0,0,523,524,1,0,0,0,524,33,1,0,0,0,525,526,5,9,0,0,526,
        527,5,4,0,0,527,528,5,9,0,0,528,529,5,9,0,0,529,530,5,9,0,0,530,
        531,5,4,0,0,531,532,5,9,0,0,532,533,5,9,0,0,533,534,3,62,31,0,534,
        535,3,62,31,0,535,536,3,62,31,0,536,35,1,0,0,0,537,538,5,2,0,0,538,
        539,5,75,0,0,539,540,5,76,0,0,540,541,5,77,0,0,541,542,5,74,0,0,
        542,543,5,79,0,0,543,544,5,80,0,0,544,545,5,81,0,0,545,546,5,78,
        0,0,546,547,5,95,0,0,547,548,5,96,0,0,548,549,5,102,0,0,549,550,
        5,119,0,0,550,551,5,3,0,0,551,552,5,122,0,0,552,553,5,122,0,0,553,
        554,5,122,0,0,554,555,5,122,0,0,555,556,5,122,0,0,556,557,5,122,
        0,0,557,558,5,122,0,0,558,559,5,122,0,0,559,560,5,122,0,0,560,561,
        5,122,0,0,561,562,5,122,0,0,562,564,5,124,0,0,563,565,3,38,19,0,
        564,563,1,0,0,0,565,566,1,0,0,0,566,564,1,0,0,0,566,567,1,0,0,0,
        567,37,1,0,0,0,568,569,5,4,0,0,569,570,5,9,0,0,570,571,5,9,0,0,571,
        572,5,9,0,0,572,573,5,4,0,0,573,574,5,9,0,0,574,575,5,9,0,0,575,
        576,5,9,0,0,576,577,3,62,31,0,577,578,3,62,31,0,578,579,3,62,31,
        0,579,39,1,0,0,0,580,737,5,1,0,0,581,582,5,16,0,0,582,738,5,62,0,
        0,583,584,5,17,0,0,584,592,5,62,0,0,585,587,5,55,0,0,586,588,5,62,
        0,0,587,586,1,0,0,0,588,589,1,0,0,0,589,587,1,0,0,0,589,590,1,0,
        0,0,590,591,1,0,0,0,591,593,5,56,0,0,592,585,1,0,0,0,592,593,1,0,
        0,0,593,738,1,0,0,0,594,595,5,18,0,0,595,596,5,19,0,0,596,597,5,
        55,0,0,597,598,5,62,0,0,598,599,5,56,0,0,599,600,5,19,0,0,600,601,
        5,55,0,0,601,602,5,62,0,0,602,603,5,56,0,0,603,604,5,19,0,0,604,
        605,5,55,0,0,605,606,5,62,0,0,606,607,5,56,0,0,607,608,5,19,0,0,
        608,609,5,55,0,0,609,610,5,62,0,0,610,611,5,56,0,0,611,612,5,19,
        0,0,612,613,5,55,0,0,613,614,5,62,0,0,614,738,5,56,0,0,615,616,5,
        20,0,0,616,617,5,61,0,0,617,618,5,61,0,0,618,619,5,61,0,0,619,620,
        5,61,0,0,620,738,5,61,0,0,621,622,5,21,0,0,622,623,5,62,0,0,623,
        624,5,62,0,0,624,625,5,62,0,0,625,626,5,62,0,0,626,738,5,62,0,0,
        627,635,5,22,0,0,628,629,5,61,0,0,629,630,5,61,0,0,630,631,5,61,
        0,0,631,632,5,61,0,0,632,636,5,61,0,0,633,634,5,23,0,0,634,636,5,
        61,0,0,635,628,1,0,0,0,635,633,1,0,0,0,636,738,1,0,0,0,637,638,5,
        24,0,0,638,639,5,62,0,0,639,640,5,55,0,0,640,641,5,62,0,0,641,642,
        5,56,0,0,642,643,5,62,0,0,643,644,5,55,0,0,644,645,5,62,0,0,645,
        646,5,56,0,0,646,647,5,62,0,0,647,648,5,55,0,0,648,649,5,62,0,0,
        649,650,5,56,0,0,650,651,5,62,0,0,651,652,5,55,0,0,652,653,5,62,
        0,0,653,654,5,56,0,0,654,655,5,62,0,0,655,656,5,55,0,0,656,657,5,
        62,0,0,657,658,5,56,0,0,658,659,5,62,0,0,659,660,5,55,0,0,660,661,
        5,62,0,0,661,738,5,56,0,0,662,664,5,25,0,0,663,665,5,26,0,0,664,
        663,1,0,0,0,664,665,1,0,0,0,665,666,1,0,0,0,666,667,5,60,0,0,667,
        668,5,60,0,0,668,669,5,60,0,0,669,670,5,60,0,0,670,671,5,60,0,0,
        671,738,5,60,0,0,672,673,5,27,0,0,673,674,5,55,0,0,674,675,5,62,
        0,0,675,676,5,54,0,0,676,677,5,62,0,0,677,678,5,54,0,0,678,679,5,
        62,0,0,679,680,5,56,0,0,680,681,5,61,0,0,681,682,5,61,0,0,682,738,
        5,61,0,0,683,693,5,28,0,0,684,685,5,55,0,0,685,686,5,62,0,0,686,
        687,5,62,0,0,687,688,5,62,0,0,688,694,5,56,0,0,689,690,7,0,0,0,690,
        691,5,61,0,0,691,692,5,61,0,0,692,694,5,61,0,0,693,684,1,0,0,0,693,
        689,1,0,0,0,694,738,1,0,0,0,695,696,5,32,0,0,696,697,5,62,0,0,697,
        698,5,62,0,0,698,738,5,62,0,0,699,700,5,33,0,0,700,701,5,59,0,0,
        701,702,5,60,0,0,702,703,5,60,0,0,703,738,5,60,0,0,704,705,5,34,
        0,0,705,738,5,59,0,0,706,707,5,35,0,0,707,708,5,60,0,0,708,709,5,
        60,0,0,709,738,5,60,0,0,710,711,7,1,0,0,711,738,5,61,0,0,712,713,
        5,42,0,0,713,738,5,59,0,0,714,721,5,43,0,0,715,721,5,44,0,0,716,
        717,5,45,0,0,717,721,5,46,0,0,718,719,5,47,0,0,719,721,5,20,0,0,
        720,714,1,0,0,0,720,715,1,0,0,0,720,716,1,0,0,0,720,718,1,0,0,0,
        721,722,1,0,0,0,722,738,5,60,0,0,723,729,5,48,0,0,724,730,5,49,0,
        0,725,727,5,51,0,0,726,725,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,
        0,728,730,5,50,0,0,729,724,1,0,0,0,729,726,1,0,0,0,730,731,1,0,0,
        0,731,732,5,60,0,0,732,733,5,52,0,0,733,734,5,60,0,0,734,735,5,57,
        0,0,735,736,5,53,0,0,736,738,5,58,0,0,737,581,1,0,0,0,737,583,1,
        0,0,0,737,594,1,0,0,0,737,615,1,0,0,0,737,621,1,0,0,0,737,627,1,
        0,0,0,737,637,1,0,0,0,737,662,1,0,0,0,737,672,1,0,0,0,737,683,1,
        0,0,0,737,695,1,0,0,0,737,699,1,0,0,0,737,704,1,0,0,0,737,706,1,
        0,0,0,737,710,1,0,0,0,737,712,1,0,0,0,737,720,1,0,0,0,737,723,1,
        0,0,0,738,739,1,0,0,0,739,740,5,64,0,0,740,41,1,0,0,0,741,742,5,
        2,0,0,742,743,5,75,0,0,743,744,5,76,0,0,744,745,5,77,0,0,745,746,
        5,79,0,0,746,747,5,80,0,0,747,748,5,81,0,0,748,749,5,97,0,0,749,
        750,5,99,0,0,750,751,5,95,0,0,751,752,5,98,0,0,752,753,5,96,0,0,
        753,754,5,102,0,0,754,755,5,119,0,0,755,756,5,3,0,0,756,757,5,122,
        0,0,757,758,5,122,0,0,758,759,5,122,0,0,759,760,5,122,0,0,760,761,
        5,122,0,0,761,762,5,122,0,0,762,763,5,122,0,0,763,764,5,122,0,0,
        764,765,5,122,0,0,765,766,5,122,0,0,766,767,5,122,0,0,767,768,5,
        122,0,0,768,770,5,124,0,0,769,771,3,44,22,0,770,769,1,0,0,0,771,
        772,1,0,0,0,772,770,1,0,0,0,772,773,1,0,0,0,773,43,1,0,0,0,774,775,
        5,4,0,0,775,776,5,9,0,0,776,777,5,9,0,0,777,778,5,4,0,0,778,779,
        5,9,0,0,779,780,5,9,0,0,780,781,3,62,31,0,781,782,3,62,31,0,782,
        783,3,62,31,0,783,784,3,62,31,0,784,785,3,62,31,0,785,786,3,62,31,
        0,786,45,1,0,0,0,787,788,5,2,0,0,788,789,5,72,0,0,789,790,5,75,0,
        0,790,791,5,76,0,0,791,792,5,77,0,0,792,793,5,79,0,0,793,794,5,80,
        0,0,794,795,5,81,0,0,795,796,5,83,0,0,796,797,5,84,0,0,797,798,5,
        85,0,0,798,799,5,87,0,0,799,800,5,88,0,0,800,801,5,89,0,0,801,802,
        5,92,0,0,802,803,5,93,0,0,803,804,5,94,0,0,804,805,5,107,0,0,805,
        806,5,108,0,0,806,807,5,100,0,0,807,808,5,119,0,0,808,809,5,3,0,
        0,809,810,5,122,0,0,810,811,5,122,0,0,811,812,5,122,0,0,812,813,
        5,122,0,0,813,814,5,122,0,0,814,815,5,122,0,0,815,816,5,122,0,0,
        816,817,5,122,0,0,817,818,5,122,0,0,818,819,5,122,0,0,819,820,5,
        122,0,0,820,821,5,122,0,0,821,822,5,122,0,0,822,823,5,122,0,0,823,
        824,5,122,0,0,824,825,5,122,0,0,825,826,5,122,0,0,826,827,5,122,
        0,0,827,828,5,122,0,0,828,830,5,124,0,0,829,831,3,48,24,0,830,829,
        1,0,0,0,831,832,1,0,0,0,832,830,1,0,0,0,832,833,1,0,0,0,833,47,1,
        0,0,0,834,835,5,4,0,0,835,836,5,4,0,0,836,837,5,9,0,0,837,838,5,
        9,0,0,838,839,5,4,0,0,839,840,5,9,0,0,840,841,5,9,0,0,841,842,5,
        4,0,0,842,843,5,9,0,0,843,844,5,9,0,0,844,845,5,4,0,0,845,846,5,
        9,0,0,846,847,5,9,0,0,847,848,3,62,31,0,848,849,3,62,31,0,849,850,
        3,62,31,0,850,851,3,62,31,0,851,852,3,62,31,0,852,853,3,62,31,0,
        853,49,1,0,0,0,854,855,5,2,0,0,855,856,5,72,0,0,856,857,5,74,0,0,
        857,858,5,75,0,0,858,859,5,76,0,0,859,860,5,77,0,0,860,861,5,78,
        0,0,861,862,5,79,0,0,862,863,5,80,0,0,863,864,5,81,0,0,864,865,5,
        82,0,0,865,866,5,83,0,0,866,867,5,84,0,0,867,868,5,85,0,0,868,869,
        5,86,0,0,869,870,5,87,0,0,870,871,5,88,0,0,871,872,5,89,0,0,872,
        873,5,92,0,0,873,874,5,93,0,0,874,875,5,94,0,0,875,876,5,107,0,0,
        876,877,5,108,0,0,877,878,5,100,0,0,878,879,5,119,0,0,879,880,5,
        3,0,0,880,881,5,122,0,0,881,882,5,122,0,0,882,883,5,122,0,0,883,
        884,5,122,0,0,884,885,5,122,0,0,885,886,5,122,0,0,886,887,5,122,
        0,0,887,888,5,122,0,0,888,889,5,122,0,0,889,890,5,122,0,0,890,891,
        5,122,0,0,891,892,5,122,0,0,892,893,5,122,0,0,893,894,5,122,0,0,
        894,895,5,122,0,0,895,896,5,122,0,0,896,897,5,122,0,0,897,898,5,
        122,0,0,898,899,5,122,0,0,899,900,5,122,0,0,900,901,5,122,0,0,901,
        902,5,122,0,0,902,903,5,122,0,0,903,905,5,124,0,0,904,906,3,52,26,
        0,905,904,1,0,0,0,906,907,1,0,0,0,907,905,1,0,0,0,907,908,1,0,0,
        0,908,51,1,0,0,0,909,910,5,4,0,0,910,911,5,9,0,0,911,912,5,4,0,0,
        912,913,5,9,0,0,913,914,5,9,0,0,914,915,5,9,0,0,915,916,5,4,0,0,
        916,917,5,9,0,0,917,918,5,9,0,0,918,919,5,9,0,0,919,920,5,4,0,0,
        920,921,5,9,0,0,921,922,5,9,0,0,922,923,5,9,0,0,923,924,5,4,0,0,
        924,925,5,9,0,0,925,926,5,9,0,0,926,927,3,62,31,0,927,928,3,62,31,
        0,928,929,3,62,31,0,929,930,3,62,31,0,930,931,3,62,31,0,931,932,
        3,62,31,0,932,53,1,0,0,0,933,934,5,2,0,0,934,935,5,72,0,0,935,936,
        5,75,0,0,936,937,5,76,0,0,937,938,5,77,0,0,938,939,5,74,0,0,939,
        940,5,79,0,0,940,941,5,80,0,0,941,942,5,81,0,0,942,943,5,78,0,0,
        943,944,5,83,0,0,944,945,5,84,0,0,945,946,5,85,0,0,946,947,5,82,
        0,0,947,948,5,87,0,0,948,949,5,88,0,0,949,950,5,89,0,0,950,951,5,
        86,0,0,951,952,5,92,0,0,952,953,5,93,0,0,953,954,5,94,0,0,954,955,
        5,107,0,0,955,956,5,108,0,0,956,957,5,100,0,0,957,958,5,119,0,0,
        958,959,5,3,0,0,959,960,5,122,0,0,960,961,5,122,0,0,961,962,5,122,
        0,0,962,963,5,122,0,0,963,964,5,122,0,0,964,965,5,122,0,0,965,966,
        5,122,0,0,966,967,5,122,0,0,967,968,5,122,0,0,968,969,5,122,0,0,
        969,970,5,122,0,0,970,971,5,122,0,0,971,972,5,122,0,0,972,973,5,
        122,0,0,973,974,5,122,0,0,974,975,5,122,0,0,975,976,5,122,0,0,976,
        977,5,122,0,0,977,978,5,122,0,0,978,979,5,122,0,0,979,980,5,122,
        0,0,980,981,5,122,0,0,981,982,5,122,0,0,982,984,5,124,0,0,983,985,
        3,56,28,0,984,983,1,0,0,0,985,986,1,0,0,0,986,984,1,0,0,0,986,987,
        1,0,0,0,987,55,1,0,0,0,988,989,5,4,0,0,989,990,5,4,0,0,990,991,5,
        9,0,0,991,992,5,9,0,0,992,993,5,9,0,0,993,994,5,4,0,0,994,995,5,
        9,0,0,995,996,5,9,0,0,996,997,5,9,0,0,997,998,5,4,0,0,998,999,5,
        9,0,0,999,1000,5,9,0,0,1000,1001,5,9,0,0,1001,1002,5,4,0,0,1002,
        1003,5,9,0,0,1003,1004,5,9,0,0,1004,1005,5,9,0,0,1005,1006,3,62,
        31,0,1006,1007,3,62,31,0,1007,1008,3,62,31,0,1008,1009,3,62,31,0,
        1009,1010,3,62,31,0,1010,1011,3,62,31,0,1011,57,1,0,0,0,1012,1013,
        5,2,0,0,1013,1014,5,90,0,0,1014,1015,5,91,0,0,1015,1016,5,109,0,
        0,1016,1017,5,110,0,0,1017,1018,5,111,0,0,1018,1019,5,112,0,0,1019,
        1020,5,113,0,0,1020,1021,5,114,0,0,1021,1022,5,115,0,0,1022,1023,
        5,116,0,0,1023,1024,5,117,0,0,1024,1025,5,119,0,0,1025,1026,5,3,
        0,0,1026,1027,5,122,0,0,1027,1028,5,122,0,0,1028,1029,5,122,0,0,
        1029,1030,5,122,0,0,1030,1031,5,122,0,0,1031,1032,5,122,0,0,1032,
        1033,5,122,0,0,1033,1034,5,122,0,0,1034,1035,5,122,0,0,1035,1036,
        5,122,0,0,1036,1037,5,122,0,0,1037,1039,5,124,0,0,1038,1040,3,60,
        30,0,1039,1038,1,0,0,0,1040,1041,1,0,0,0,1041,1039,1,0,0,0,1041,
        1042,1,0,0,0,1042,59,1,0,0,0,1043,1044,5,4,0,0,1044,1045,5,9,0,0,
        1045,1046,3,62,31,0,1046,1047,3,62,31,0,1047,1048,3,62,31,0,1048,
        1049,3,62,31,0,1049,1050,3,62,31,0,1050,1051,3,62,31,0,1051,1052,
        5,4,0,0,1052,1053,5,4,0,0,1053,1054,5,9,0,0,1054,61,1,0,0,0,1055,
        1056,7,2,0,0,1056,63,1,0,0,0,27,80,82,95,98,133,186,241,298,364,
        434,482,523,566,589,592,635,664,693,720,726,729,737,772,832,907,
        986,1041
    ]

class DynamoMRParser ( Parser ):

    grammarFileName = "DynamoMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'DATA'", "'VARS'", "'FORMAT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'FIRST_RESID'", "'SEQUENCE'", "'PALES_MODE'", 
                     "'TENSOR_MODE'", "'SAUPE_MATRIX'", "'S'", "'SAUPE'", 
                     "'IRREDUCIBLE_REP'", "'IRREDUCIBLE'", "'GENERAL_MAGNITUDE'", 
                     "'MAPPING_COOR'", "'MAPPING'", "'INV'", "'EIGENVALUES'", 
                     "'EIGENVECTORS'", "'X_AXIS'", "'Y_AXIS'", "'Z_AXIS'", 
                     "'Q_EULER_SOLUTIONS'", "'Q_EULER_ANGLES'", "'EULER_SOLUTIONS'", 
                     "'EULER_ANGLES'", "'Da'", "'Dr'", "'Aa'", "'Ar'", "'Da_HN'", 
                     "'Rhombicity'", "'N'", "'RMS'", "'Chi2'", "'CORR'", 
                     "'R'", "'Q'", "'REGRESSION'", "'OFFSET'", "'SLOPE'", 
                     "'BAX'", "'+/-'", "'Hz'", "','", "'('", "')'", "'['", 
                     "']'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'INDEX'", "'GROUP'", "'SEGNAME_I'", "'RESID_I'", 
                     "'RESNAME_I'", "'ATOMNAME_I'", "'SEGNAME_J'", "'RESID_J'", 
                     "'RESNAME_J'", "'ATOMNAME_J'", "'SEGNAME_K'", "'RESID_K'", 
                     "'RESNAME_K'", "'ATOMNAME_K'", "'SEGNAME_L'", "'RESID_L'", 
                     "'RESNAME_L'", "'ATOMNAME_L'", "'RESID'", "'RESNAME'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'D_LO'", "'D_HI'", 
                     "'ANGLE_LO'", "'ANGLE_HI'", "'PHASE'", "'OBSJ'", "'PHI'", 
                     "'PSI'", "'DPHI'", "'DPSI'", "'DIST'", "'S2'", "'COUNT'", 
                     "'CS_COUNT'", "'CLASS'" ]

    symbolicNames = [ "<INVALID>", "Data", "Vars", "Format", "Integer", 
                      "Float", "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", 
                      "Simple_name", "SPACE", "COMMENT", "SECTION_COMMENT", 
                      "LINE_COMMENT", "First_resid", "Sequence", "Pales_mode", 
                      "Tensor_mode", "Saupe_matrix", "S_DA", "Saupe", "Irreducible_rep", 
                      "Irreducible", "General_magnitude", "Mapping_corr", 
                      "Mapping", "Inv", "Eigenvalues", "Eigenvectors", "X_axis", 
                      "Y_axis", "Z_axis", "Q_euler_solutions", "Q_euler_angles", 
                      "Euler_solutions", "Euler_angles", "Da", "Dr", "Aa", 
                      "Ar", "Da_hn", "Rhombicity", "N", "Rms", "Chi2", "Corr", 
                      "R", "Q", "Regression", "Offset", "Slope", "Bax", 
                      "Plus_minus", "Hz", "Comma_DA", "L_paren_DA", "R_paren_DA", 
                      "L_brkt_DA", "R_brkt_DA", "Integer_DA", "Float_DA", 
                      "Real_DA", "Simple_name_DA", "SPACE_DA", "RETURN_DA", 
                      "SECTION_COMMENT_DA", "LINE_COMMENT_DA", "One_letter_code", 
                      "SPACE_SQ", "RETURN_SQ", "SECTION_COMMENT_SQ", "LINE_COMMENT_SQ", 
                      "Index", "Group", "Segname_I", "Resid_I", "Resname_I", 
                      "Atomname_I", "Segname_J", "Resid_J", "Resname_J", 
                      "Atomname_J", "Segname_K", "Resid_K", "Resname_K", 
                      "Atomname_K", "Segname_L", "Resid_L", "Resname_L", 
                      "Atomname_L", "Resid", "Resname", "A", "B", "C", "D", 
                      "DD", "DI", "D_diff", "D_obs", "FC", "S", "W", "D_Lo", 
                      "D_Hi", "Angle_Lo", "Angle_Hi", "Phase", "ObsJ", "Phi", 
                      "Psi", "Dphi", "Dpsi", "Dist", "S2", "Count", "Cs_count", 
                      "Class", "SPACE_VA", "RETURN_VA", "SECTION_COMMENT_VA", 
                      "LINE_COMMENT_VA", "Format_code", "SPACE_FO", "RETURN_FO", 
                      "SECTION_COMMENT_FO", "LINE_COMMENT_FO" ]

    RULE_dynamo_mr = 0
    RULE_sequence = 1
    RULE_distance_restraints = 2
    RULE_distance_restraint = 3
    RULE_distance_restraints_sw_segid = 4
    RULE_distance_restraint_sw_segid = 5
    RULE_distance_restraints_ew_segid = 6
    RULE_distance_restraint_ew_segid = 7
    RULE_torsion_angle_restraints = 8
    RULE_torsion_angle_restraint = 9
    RULE_torsion_angle_restraints_sw_segid = 10
    RULE_torsion_angle_restraint_sw_segid = 11
    RULE_torsion_angle_restraints_ew_segid = 12
    RULE_torsion_angle_restraint_ew_segid = 13
    RULE_rdc_restraints = 14
    RULE_rdc_restraint = 15
    RULE_rdc_restraints_sw_segid = 16
    RULE_rdc_restraint_sw_segid = 17
    RULE_rdc_restraints_ew_segid = 18
    RULE_rdc_restraint_ew_segid = 19
    RULE_pales_meta_outputs = 20
    RULE_pales_rdc_outputs = 21
    RULE_pales_rdc_output = 22
    RULE_coupling_restraints = 23
    RULE_coupling_restraint = 24
    RULE_coupling_restraints_sw_segid = 25
    RULE_coupling_restraint_sw_segid = 26
    RULE_coupling_restraints_ew_segid = 27
    RULE_coupling_restraint_ew_segid = 28
    RULE_talos_restraints = 29
    RULE_talos_restraint = 30
    RULE_number = 31

    ruleNames =  [ "dynamo_mr", "sequence", "distance_restraints", "distance_restraint", 
                   "distance_restraints_sw_segid", "distance_restraint_sw_segid", 
                   "distance_restraints_ew_segid", "distance_restraint_ew_segid", 
                   "torsion_angle_restraints", "torsion_angle_restraint", 
                   "torsion_angle_restraints_sw_segid", "torsion_angle_restraint_sw_segid", 
                   "torsion_angle_restraints_ew_segid", "torsion_angle_restraint_ew_segid", 
                   "rdc_restraints", "rdc_restraint", "rdc_restraints_sw_segid", 
                   "rdc_restraint_sw_segid", "rdc_restraints_ew_segid", 
                   "rdc_restraint_ew_segid", "pales_meta_outputs", "pales_rdc_outputs", 
                   "pales_rdc_output", "coupling_restraints", "coupling_restraint", 
                   "coupling_restraints_sw_segid", "coupling_restraint_sw_segid", 
                   "coupling_restraints_ew_segid", "coupling_restraint_ew_segid", 
                   "talos_restraints", "talos_restraint", "number" ]

    EOF = Token.EOF
    Data=1
    Vars=2
    Format=3
    Integer=4
    Float=5
    SHARP_COMMENT=6
    EXCLM_COMMENT=7
    SMCLN_COMMENT=8
    Simple_name=9
    SPACE=10
    COMMENT=11
    SECTION_COMMENT=12
    LINE_COMMENT=13
    First_resid=14
    Sequence=15
    Pales_mode=16
    Tensor_mode=17
    Saupe_matrix=18
    S_DA=19
    Saupe=20
    Irreducible_rep=21
    Irreducible=22
    General_magnitude=23
    Mapping_corr=24
    Mapping=25
    Inv=26
    Eigenvalues=27
    Eigenvectors=28
    X_axis=29
    Y_axis=30
    Z_axis=31
    Q_euler_solutions=32
    Q_euler_angles=33
    Euler_solutions=34
    Euler_angles=35
    Da=36
    Dr=37
    Aa=38
    Ar=39
    Da_hn=40
    Rhombicity=41
    N=42
    Rms=43
    Chi2=44
    Corr=45
    R=46
    Q=47
    Regression=48
    Offset=49
    Slope=50
    Bax=51
    Plus_minus=52
    Hz=53
    Comma_DA=54
    L_paren_DA=55
    R_paren_DA=56
    L_brkt_DA=57
    R_brkt_DA=58
    Integer_DA=59
    Float_DA=60
    Real_DA=61
    Simple_name_DA=62
    SPACE_DA=63
    RETURN_DA=64
    SECTION_COMMENT_DA=65
    LINE_COMMENT_DA=66
    One_letter_code=67
    SPACE_SQ=68
    RETURN_SQ=69
    SECTION_COMMENT_SQ=70
    LINE_COMMENT_SQ=71
    Index=72
    Group=73
    Segname_I=74
    Resid_I=75
    Resname_I=76
    Atomname_I=77
    Segname_J=78
    Resid_J=79
    Resname_J=80
    Atomname_J=81
    Segname_K=82
    Resid_K=83
    Resname_K=84
    Atomname_K=85
    Segname_L=86
    Resid_L=87
    Resname_L=88
    Atomname_L=89
    Resid=90
    Resname=91
    A=92
    B=93
    C=94
    D=95
    DD=96
    DI=97
    D_diff=98
    D_obs=99
    FC=100
    S=101
    W=102
    D_Lo=103
    D_Hi=104
    Angle_Lo=105
    Angle_Hi=106
    Phase=107
    ObsJ=108
    Phi=109
    Psi=110
    Dphi=111
    Dpsi=112
    Dist=113
    S2=114
    Count=115
    Cs_count=116
    Class=117
    SPACE_VA=118
    RETURN_VA=119
    SECTION_COMMENT_VA=120
    LINE_COMMENT_VA=121
    Format_code=122
    SPACE_FO=123
    RETURN_FO=124
    SECTION_COMMENT_FO=125
    LINE_COMMENT_FO=126

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Dynamo_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(DynamoMRParser.EOF, 0)

        def sequence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.SequenceContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.SequenceContext,i)


        def distance_restraints(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Distance_restraintsContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Distance_restraintsContext,i)


        def distance_restraints_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Distance_restraints_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Distance_restraints_sw_segidContext,i)


        def distance_restraints_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Distance_restraints_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Distance_restraints_ew_segidContext,i)


        def torsion_angle_restraints(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Torsion_angle_restraintsContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Torsion_angle_restraintsContext,i)


        def torsion_angle_restraints_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Torsion_angle_restraints_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Torsion_angle_restraints_sw_segidContext,i)


        def torsion_angle_restraints_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Torsion_angle_restraints_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Torsion_angle_restraints_ew_segidContext,i)


        def rdc_restraints(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Rdc_restraintsContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Rdc_restraintsContext,i)


        def rdc_restraints_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Rdc_restraints_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Rdc_restraints_sw_segidContext,i)


        def rdc_restraints_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Rdc_restraints_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Rdc_restraints_ew_segidContext,i)


        def pales_meta_outputs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Pales_meta_outputsContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Pales_meta_outputsContext,i)


        def pales_rdc_outputs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Pales_rdc_outputsContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Pales_rdc_outputsContext,i)


        def coupling_restraints(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Coupling_restraintsContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Coupling_restraintsContext,i)


        def coupling_restraints_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Coupling_restraints_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Coupling_restraints_sw_segidContext,i)


        def coupling_restraints_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Coupling_restraints_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Coupling_restraints_ew_segidContext,i)


        def talos_restraints(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Talos_restraintsContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Talos_restraintsContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_dynamo_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamo_mr" ):
                listener.enterDynamo_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamo_mr" ):
                listener.exitDynamo_mr(self)




    def dynamo_mr(self):

        localctx = DynamoMRParser.Dynamo_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_dynamo_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 82
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==DynamoMRParser.Data or _la==DynamoMRParser.Vars:
                self.state = 80
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 64
                    self.sequence()
                    pass

                elif la_ == 2:
                    self.state = 65
                    self.distance_restraints()
                    pass

                elif la_ == 3:
                    self.state = 66
                    self.distance_restraints_sw_segid()
                    pass

                elif la_ == 4:
                    self.state = 67
                    self.distance_restraints_ew_segid()
                    pass

                elif la_ == 5:
                    self.state = 68
                    self.torsion_angle_restraints()
                    pass

                elif la_ == 6:
                    self.state = 69
                    self.torsion_angle_restraints_sw_segid()
                    pass

                elif la_ == 7:
                    self.state = 70
                    self.torsion_angle_restraints_ew_segid()
                    pass

                elif la_ == 8:
                    self.state = 71
                    self.rdc_restraints()
                    pass

                elif la_ == 9:
                    self.state = 72
                    self.rdc_restraints_sw_segid()
                    pass

                elif la_ == 10:
                    self.state = 73
                    self.rdc_restraints_ew_segid()
                    pass

                elif la_ == 11:
                    self.state = 74
                    self.pales_meta_outputs()
                    pass

                elif la_ == 12:
                    self.state = 75
                    self.pales_rdc_outputs()
                    pass

                elif la_ == 13:
                    self.state = 76
                    self.coupling_restraints()
                    pass

                elif la_ == 14:
                    self.state = 77
                    self.coupling_restraints_sw_segid()
                    pass

                elif la_ == 15:
                    self.state = 78
                    self.coupling_restraints_ew_segid()
                    pass

                elif la_ == 16:
                    self.state = 79
                    self.talos_restraints()
                    pass


                self.state = 84
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 85
            self.match(DynamoMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Data(self):
            return self.getToken(DynamoMRParser.Data, 0)

        def First_resid(self):
            return self.getToken(DynamoMRParser.First_resid, 0)

        def Integer_DA(self):
            return self.getToken(DynamoMRParser.Integer_DA, 0)

        def RETURN_DA(self):
            return self.getToken(DynamoMRParser.RETURN_DA, 0)

        def Sequence(self):
            return self.getToken(DynamoMRParser.Sequence, 0)

        def RETURN_SQ(self):
            return self.getToken(DynamoMRParser.RETURN_SQ, 0)

        def One_letter_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.One_letter_code)
            else:
                return self.getToken(DynamoMRParser.One_letter_code, i)

        def getRuleIndex(self):
            return DynamoMRParser.RULE_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence" ):
                listener.enterSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence" ):
                listener.exitSequence(self)




    def sequence(self):

        localctx = DynamoMRParser.SequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 87
            self.match(DynamoMRParser.Data)
            self.state = 98
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DynamoMRParser.First_resid]:
                self.state = 88
                self.match(DynamoMRParser.First_resid)
                self.state = 89
                self.match(DynamoMRParser.Integer_DA)
                self.state = 90
                self.match(DynamoMRParser.RETURN_DA)
                pass
            elif token in [DynamoMRParser.Sequence]:
                self.state = 91
                self.match(DynamoMRParser.Sequence)
                self.state = 93 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 92
                    self.match(DynamoMRParser.One_letter_code)
                    self.state = 95 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==DynamoMRParser.One_letter_code):
                        break

                self.state = 97
                self.match(DynamoMRParser.RETURN_SQ)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Group(self):
            return self.getToken(DynamoMRParser.Group, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def D_Lo(self):
            return self.getToken(DynamoMRParser.D_Lo, 0)

        def D_Hi(self):
            return self.getToken(DynamoMRParser.D_Hi, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def W(self):
            return self.getToken(DynamoMRParser.W, 0)

        def S(self):
            return self.getToken(DynamoMRParser.S, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Distance_restraintContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_distance_restraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraints" ):
                listener.enterDistance_restraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraints" ):
                listener.exitDistance_restraints(self)




    def distance_restraints(self):

        localctx = DynamoMRParser.Distance_restraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_distance_restraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 100
            self.match(DynamoMRParser.Vars)
            self.state = 101
            self.match(DynamoMRParser.Index)
            self.state = 102
            self.match(DynamoMRParser.Group)
            self.state = 103
            self.match(DynamoMRParser.Resid_I)
            self.state = 104
            self.match(DynamoMRParser.Resname_I)
            self.state = 105
            self.match(DynamoMRParser.Atomname_I)
            self.state = 106
            self.match(DynamoMRParser.Resid_J)
            self.state = 107
            self.match(DynamoMRParser.Resname_J)
            self.state = 108
            self.match(DynamoMRParser.Atomname_J)
            self.state = 109
            self.match(DynamoMRParser.D_Lo)
            self.state = 110
            self.match(DynamoMRParser.D_Hi)
            self.state = 111
            self.match(DynamoMRParser.FC)
            self.state = 112
            self.match(DynamoMRParser.W)
            self.state = 113
            self.match(DynamoMRParser.S)
            self.state = 114
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 115
            self.match(DynamoMRParser.Format)
            self.state = 116
            self.match(DynamoMRParser.Format_code)
            self.state = 117
            self.match(DynamoMRParser.Format_code)
            self.state = 118
            self.match(DynamoMRParser.Format_code)
            self.state = 119
            self.match(DynamoMRParser.Format_code)
            self.state = 120
            self.match(DynamoMRParser.Format_code)
            self.state = 121
            self.match(DynamoMRParser.Format_code)
            self.state = 122
            self.match(DynamoMRParser.Format_code)
            self.state = 123
            self.match(DynamoMRParser.Format_code)
            self.state = 124
            self.match(DynamoMRParser.Format_code)
            self.state = 125
            self.match(DynamoMRParser.Format_code)
            self.state = 126
            self.match(DynamoMRParser.Format_code)
            self.state = 127
            self.match(DynamoMRParser.Format_code)
            self.state = 128
            self.match(DynamoMRParser.Format_code)
            self.state = 129
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 131 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 130
                self.distance_restraint()
                self.state = 133 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==DynamoMRParser.Integer):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = DynamoMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 135
            self.match(DynamoMRParser.Integer)
            self.state = 136
            self.match(DynamoMRParser.Integer)
            self.state = 137
            self.match(DynamoMRParser.Integer)
            self.state = 138
            self.match(DynamoMRParser.Simple_name)
            self.state = 139
            self.match(DynamoMRParser.Simple_name)
            self.state = 140
            self.match(DynamoMRParser.Integer)
            self.state = 141
            self.match(DynamoMRParser.Simple_name)
            self.state = 142
            self.match(DynamoMRParser.Simple_name)
            self.state = 143
            self.number()
            self.state = 144
            self.number()
            self.state = 145
            self.number()
            self.state = 146
            self.number()
            self.state = 147
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraints_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Group(self):
            return self.getToken(DynamoMRParser.Group, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def D_Lo(self):
            return self.getToken(DynamoMRParser.D_Lo, 0)

        def D_Hi(self):
            return self.getToken(DynamoMRParser.D_Hi, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def W(self):
            return self.getToken(DynamoMRParser.W, 0)

        def S(self):
            return self.getToken(DynamoMRParser.S, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def distance_restraint_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Distance_restraint_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Distance_restraint_sw_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_distance_restraints_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraints_sw_segid" ):
                listener.enterDistance_restraints_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraints_sw_segid" ):
                listener.exitDistance_restraints_sw_segid(self)




    def distance_restraints_sw_segid(self):

        localctx = DynamoMRParser.Distance_restraints_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_distance_restraints_sw_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 149
            self.match(DynamoMRParser.Vars)
            self.state = 150
            self.match(DynamoMRParser.Index)
            self.state = 151
            self.match(DynamoMRParser.Group)
            self.state = 152
            self.match(DynamoMRParser.Segname_I)
            self.state = 153
            self.match(DynamoMRParser.Resid_I)
            self.state = 154
            self.match(DynamoMRParser.Resname_I)
            self.state = 155
            self.match(DynamoMRParser.Atomname_I)
            self.state = 156
            self.match(DynamoMRParser.Segname_J)
            self.state = 157
            self.match(DynamoMRParser.Resid_J)
            self.state = 158
            self.match(DynamoMRParser.Resname_J)
            self.state = 159
            self.match(DynamoMRParser.Atomname_J)
            self.state = 160
            self.match(DynamoMRParser.D_Lo)
            self.state = 161
            self.match(DynamoMRParser.D_Hi)
            self.state = 162
            self.match(DynamoMRParser.FC)
            self.state = 163
            self.match(DynamoMRParser.W)
            self.state = 164
            self.match(DynamoMRParser.S)
            self.state = 165
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 166
            self.match(DynamoMRParser.Format)
            self.state = 167
            self.match(DynamoMRParser.Format_code)
            self.state = 168
            self.match(DynamoMRParser.Format_code)
            self.state = 169
            self.match(DynamoMRParser.Format_code)
            self.state = 170
            self.match(DynamoMRParser.Format_code)
            self.state = 171
            self.match(DynamoMRParser.Format_code)
            self.state = 172
            self.match(DynamoMRParser.Format_code)
            self.state = 173
            self.match(DynamoMRParser.Format_code)
            self.state = 174
            self.match(DynamoMRParser.Format_code)
            self.state = 175
            self.match(DynamoMRParser.Format_code)
            self.state = 176
            self.match(DynamoMRParser.Format_code)
            self.state = 177
            self.match(DynamoMRParser.Format_code)
            self.state = 178
            self.match(DynamoMRParser.Format_code)
            self.state = 179
            self.match(DynamoMRParser.Format_code)
            self.state = 180
            self.match(DynamoMRParser.Format_code)
            self.state = 181
            self.match(DynamoMRParser.Format_code)
            self.state = 182
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 184 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 183
                self.distance_restraint_sw_segid()
                self.state = 186 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==DynamoMRParser.Integer):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraint_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_distance_restraint_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint_sw_segid" ):
                listener.enterDistance_restraint_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint_sw_segid" ):
                listener.exitDistance_restraint_sw_segid(self)




    def distance_restraint_sw_segid(self):

        localctx = DynamoMRParser.Distance_restraint_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_distance_restraint_sw_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 188
            self.match(DynamoMRParser.Integer)
            self.state = 189
            self.match(DynamoMRParser.Integer)
            self.state = 190
            self.match(DynamoMRParser.Simple_name)
            self.state = 191
            self.match(DynamoMRParser.Integer)
            self.state = 192
            self.match(DynamoMRParser.Simple_name)
            self.state = 193
            self.match(DynamoMRParser.Simple_name)
            self.state = 194
            self.match(DynamoMRParser.Simple_name)
            self.state = 195
            self.match(DynamoMRParser.Integer)
            self.state = 196
            self.match(DynamoMRParser.Simple_name)
            self.state = 197
            self.match(DynamoMRParser.Simple_name)
            self.state = 198
            self.number()
            self.state = 199
            self.number()
            self.state = 200
            self.number()
            self.state = 201
            self.number()
            self.state = 202
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraints_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Group(self):
            return self.getToken(DynamoMRParser.Group, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def D_Lo(self):
            return self.getToken(DynamoMRParser.D_Lo, 0)

        def D_Hi(self):
            return self.getToken(DynamoMRParser.D_Hi, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def W(self):
            return self.getToken(DynamoMRParser.W, 0)

        def S(self):
            return self.getToken(DynamoMRParser.S, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def distance_restraint_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Distance_restraint_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Distance_restraint_ew_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_distance_restraints_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraints_ew_segid" ):
                listener.enterDistance_restraints_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraints_ew_segid" ):
                listener.exitDistance_restraints_ew_segid(self)




    def distance_restraints_ew_segid(self):

        localctx = DynamoMRParser.Distance_restraints_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_distance_restraints_ew_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(DynamoMRParser.Vars)
            self.state = 205
            self.match(DynamoMRParser.Index)
            self.state = 206
            self.match(DynamoMRParser.Group)
            self.state = 207
            self.match(DynamoMRParser.Resid_I)
            self.state = 208
            self.match(DynamoMRParser.Resname_I)
            self.state = 209
            self.match(DynamoMRParser.Atomname_I)
            self.state = 210
            self.match(DynamoMRParser.Segname_I)
            self.state = 211
            self.match(DynamoMRParser.Resid_J)
            self.state = 212
            self.match(DynamoMRParser.Resname_J)
            self.state = 213
            self.match(DynamoMRParser.Atomname_J)
            self.state = 214
            self.match(DynamoMRParser.Segname_J)
            self.state = 215
            self.match(DynamoMRParser.D_Lo)
            self.state = 216
            self.match(DynamoMRParser.D_Hi)
            self.state = 217
            self.match(DynamoMRParser.FC)
            self.state = 218
            self.match(DynamoMRParser.W)
            self.state = 219
            self.match(DynamoMRParser.S)
            self.state = 220
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 221
            self.match(DynamoMRParser.Format)
            self.state = 222
            self.match(DynamoMRParser.Format_code)
            self.state = 223
            self.match(DynamoMRParser.Format_code)
            self.state = 224
            self.match(DynamoMRParser.Format_code)
            self.state = 225
            self.match(DynamoMRParser.Format_code)
            self.state = 226
            self.match(DynamoMRParser.Format_code)
            self.state = 227
            self.match(DynamoMRParser.Format_code)
            self.state = 228
            self.match(DynamoMRParser.Format_code)
            self.state = 229
            self.match(DynamoMRParser.Format_code)
            self.state = 230
            self.match(DynamoMRParser.Format_code)
            self.state = 231
            self.match(DynamoMRParser.Format_code)
            self.state = 232
            self.match(DynamoMRParser.Format_code)
            self.state = 233
            self.match(DynamoMRParser.Format_code)
            self.state = 234
            self.match(DynamoMRParser.Format_code)
            self.state = 235
            self.match(DynamoMRParser.Format_code)
            self.state = 236
            self.match(DynamoMRParser.Format_code)
            self.state = 237
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 239 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 238
                self.distance_restraint_ew_segid()
                self.state = 241 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==DynamoMRParser.Integer):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraint_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_distance_restraint_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint_ew_segid" ):
                listener.enterDistance_restraint_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint_ew_segid" ):
                listener.exitDistance_restraint_ew_segid(self)




    def distance_restraint_ew_segid(self):

        localctx = DynamoMRParser.Distance_restraint_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_distance_restraint_ew_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.match(DynamoMRParser.Integer)
            self.state = 244
            self.match(DynamoMRParser.Integer)
            self.state = 245
            self.match(DynamoMRParser.Integer)
            self.state = 246
            self.match(DynamoMRParser.Simple_name)
            self.state = 247
            self.match(DynamoMRParser.Simple_name)
            self.state = 248
            self.match(DynamoMRParser.Simple_name)
            self.state = 249
            self.match(DynamoMRParser.Integer)
            self.state = 250
            self.match(DynamoMRParser.Simple_name)
            self.state = 251
            self.match(DynamoMRParser.Simple_name)
            self.state = 252
            self.match(DynamoMRParser.Simple_name)
            self.state = 253
            self.number()
            self.state = 254
            self.number()
            self.state = 255
            self.number()
            self.state = 256
            self.number()
            self.state = 257
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_angle_restraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Resid_K(self):
            return self.getToken(DynamoMRParser.Resid_K, 0)

        def Resname_K(self):
            return self.getToken(DynamoMRParser.Resname_K, 0)

        def Atomname_K(self):
            return self.getToken(DynamoMRParser.Atomname_K, 0)

        def Resid_L(self):
            return self.getToken(DynamoMRParser.Resid_L, 0)

        def Resname_L(self):
            return self.getToken(DynamoMRParser.Resname_L, 0)

        def Atomname_L(self):
            return self.getToken(DynamoMRParser.Atomname_L, 0)

        def Angle_Lo(self):
            return self.getToken(DynamoMRParser.Angle_Lo, 0)

        def Angle_Hi(self):
            return self.getToken(DynamoMRParser.Angle_Hi, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def torsion_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Torsion_angle_restraintContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Torsion_angle_restraintContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_torsion_angle_restraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_angle_restraints" ):
                listener.enterTorsion_angle_restraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_angle_restraints" ):
                listener.exitTorsion_angle_restraints(self)




    def torsion_angle_restraints(self):

        localctx = DynamoMRParser.Torsion_angle_restraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_torsion_angle_restraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 259
            self.match(DynamoMRParser.Vars)
            self.state = 260
            self.match(DynamoMRParser.Index)
            self.state = 261
            self.match(DynamoMRParser.Resid_I)
            self.state = 262
            self.match(DynamoMRParser.Resname_I)
            self.state = 263
            self.match(DynamoMRParser.Atomname_I)
            self.state = 264
            self.match(DynamoMRParser.Resid_J)
            self.state = 265
            self.match(DynamoMRParser.Resname_J)
            self.state = 266
            self.match(DynamoMRParser.Atomname_J)
            self.state = 267
            self.match(DynamoMRParser.Resid_K)
            self.state = 268
            self.match(DynamoMRParser.Resname_K)
            self.state = 269
            self.match(DynamoMRParser.Atomname_K)
            self.state = 270
            self.match(DynamoMRParser.Resid_L)
            self.state = 271
            self.match(DynamoMRParser.Resname_L)
            self.state = 272
            self.match(DynamoMRParser.Atomname_L)
            self.state = 273
            self.match(DynamoMRParser.Angle_Lo)
            self.state = 274
            self.match(DynamoMRParser.Angle_Hi)
            self.state = 275
            self.match(DynamoMRParser.FC)
            self.state = 276
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 277
            self.match(DynamoMRParser.Format)
            self.state = 278
            self.match(DynamoMRParser.Format_code)
            self.state = 279
            self.match(DynamoMRParser.Format_code)
            self.state = 280
            self.match(DynamoMRParser.Format_code)
            self.state = 281
            self.match(DynamoMRParser.Format_code)
            self.state = 282
            self.match(DynamoMRParser.Format_code)
            self.state = 283
            self.match(DynamoMRParser.Format_code)
            self.state = 284
            self.match(DynamoMRParser.Format_code)
            self.state = 285
            self.match(DynamoMRParser.Format_code)
            self.state = 286
            self.match(DynamoMRParser.Format_code)
            self.state = 287
            self.match(DynamoMRParser.Format_code)
            self.state = 288
            self.match(DynamoMRParser.Format_code)
            self.state = 289
            self.match(DynamoMRParser.Format_code)
            self.state = 290
            self.match(DynamoMRParser.Format_code)
            self.state = 291
            self.match(DynamoMRParser.Format_code)
            self.state = 292
            self.match(DynamoMRParser.Format_code)
            self.state = 293
            self.match(DynamoMRParser.Format_code)
            self.state = 294
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 296 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 295
                self.torsion_angle_restraint()
                self.state = 298 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==DynamoMRParser.Integer):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_torsion_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_angle_restraint" ):
                listener.enterTorsion_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_angle_restraint" ):
                listener.exitTorsion_angle_restraint(self)




    def torsion_angle_restraint(self):

        localctx = DynamoMRParser.Torsion_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_torsion_angle_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 300
            self.match(DynamoMRParser.Integer)
            self.state = 301
            self.match(DynamoMRParser.Integer)
            self.state = 302
            self.match(DynamoMRParser.Simple_name)
            self.state = 303
            self.match(DynamoMRParser.Simple_name)
            self.state = 304
            self.match(DynamoMRParser.Integer)
            self.state = 305
            self.match(DynamoMRParser.Simple_name)
            self.state = 306
            self.match(DynamoMRParser.Simple_name)
            self.state = 307
            self.match(DynamoMRParser.Integer)
            self.state = 308
            self.match(DynamoMRParser.Simple_name)
            self.state = 309
            self.match(DynamoMRParser.Simple_name)
            self.state = 310
            self.match(DynamoMRParser.Integer)
            self.state = 311
            self.match(DynamoMRParser.Simple_name)
            self.state = 312
            self.match(DynamoMRParser.Simple_name)
            self.state = 313
            self.number()
            self.state = 314
            self.number()
            self.state = 315
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_angle_restraints_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Segname_K(self):
            return self.getToken(DynamoMRParser.Segname_K, 0)

        def Resid_K(self):
            return self.getToken(DynamoMRParser.Resid_K, 0)

        def Resname_K(self):
            return self.getToken(DynamoMRParser.Resname_K, 0)

        def Atomname_K(self):
            return self.getToken(DynamoMRParser.Atomname_K, 0)

        def Segname_L(self):
            return self.getToken(DynamoMRParser.Segname_L, 0)

        def Resid_L(self):
            return self.getToken(DynamoMRParser.Resid_L, 0)

        def Resname_L(self):
            return self.getToken(DynamoMRParser.Resname_L, 0)

        def Atomname_L(self):
            return self.getToken(DynamoMRParser.Atomname_L, 0)

        def Angle_Lo(self):
            return self.getToken(DynamoMRParser.Angle_Lo, 0)

        def Angle_Hi(self):
            return self.getToken(DynamoMRParser.Angle_Hi, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def torsion_angle_restraint_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Torsion_angle_restraint_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Torsion_angle_restraint_sw_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_torsion_angle_restraints_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_angle_restraints_sw_segid" ):
                listener.enterTorsion_angle_restraints_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_angle_restraints_sw_segid" ):
                listener.exitTorsion_angle_restraints_sw_segid(self)




    def torsion_angle_restraints_sw_segid(self):

        localctx = DynamoMRParser.Torsion_angle_restraints_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_torsion_angle_restraints_sw_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.match(DynamoMRParser.Vars)
            self.state = 318
            self.match(DynamoMRParser.Index)
            self.state = 319
            self.match(DynamoMRParser.Segname_I)
            self.state = 320
            self.match(DynamoMRParser.Resid_I)
            self.state = 321
            self.match(DynamoMRParser.Resname_I)
            self.state = 322
            self.match(DynamoMRParser.Atomname_I)
            self.state = 323
            self.match(DynamoMRParser.Segname_J)
            self.state = 324
            self.match(DynamoMRParser.Resid_J)
            self.state = 325
            self.match(DynamoMRParser.Resname_J)
            self.state = 326
            self.match(DynamoMRParser.Atomname_J)
            self.state = 327
            self.match(DynamoMRParser.Segname_K)
            self.state = 328
            self.match(DynamoMRParser.Resid_K)
            self.state = 329
            self.match(DynamoMRParser.Resname_K)
            self.state = 330
            self.match(DynamoMRParser.Atomname_K)
            self.state = 331
            self.match(DynamoMRParser.Segname_L)
            self.state = 332
            self.match(DynamoMRParser.Resid_L)
            self.state = 333
            self.match(DynamoMRParser.Resname_L)
            self.state = 334
            self.match(DynamoMRParser.Atomname_L)
            self.state = 335
            self.match(DynamoMRParser.Angle_Lo)
            self.state = 336
            self.match(DynamoMRParser.Angle_Hi)
            self.state = 337
            self.match(DynamoMRParser.FC)
            self.state = 338
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 339
            self.match(DynamoMRParser.Format)
            self.state = 340
            self.match(DynamoMRParser.Format_code)
            self.state = 341
            self.match(DynamoMRParser.Format_code)
            self.state = 342
            self.match(DynamoMRParser.Format_code)
            self.state = 343
            self.match(DynamoMRParser.Format_code)
            self.state = 344
            self.match(DynamoMRParser.Format_code)
            self.state = 345
            self.match(DynamoMRParser.Format_code)
            self.state = 346
            self.match(DynamoMRParser.Format_code)
            self.state = 347
            self.match(DynamoMRParser.Format_code)
            self.state = 348
            self.match(DynamoMRParser.Format_code)
            self.state = 349
            self.match(DynamoMRParser.Format_code)
            self.state = 350
            self.match(DynamoMRParser.Format_code)
            self.state = 351
            self.match(DynamoMRParser.Format_code)
            self.state = 352
            self.match(DynamoMRParser.Format_code)
            self.state = 353
            self.match(DynamoMRParser.Format_code)
            self.state = 354
            self.match(DynamoMRParser.Format_code)
            self.state = 355
            self.match(DynamoMRParser.Format_code)
            self.state = 356
            self.match(DynamoMRParser.Format_code)
            self.state = 357
            self.match(DynamoMRParser.Format_code)
            self.state = 358
            self.match(DynamoMRParser.Format_code)
            self.state = 359
            self.match(DynamoMRParser.Format_code)
            self.state = 360
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 362 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 361
                self.torsion_angle_restraint_sw_segid()
                self.state = 364 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==DynamoMRParser.Integer):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_angle_restraint_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_torsion_angle_restraint_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_angle_restraint_sw_segid" ):
                listener.enterTorsion_angle_restraint_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_angle_restraint_sw_segid" ):
                listener.exitTorsion_angle_restraint_sw_segid(self)




    def torsion_angle_restraint_sw_segid(self):

        localctx = DynamoMRParser.Torsion_angle_restraint_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_torsion_angle_restraint_sw_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 366
            self.match(DynamoMRParser.Integer)
            self.state = 367
            self.match(DynamoMRParser.Simple_name)
            self.state = 368
            self.match(DynamoMRParser.Integer)
            self.state = 369
            self.match(DynamoMRParser.Simple_name)
            self.state = 370
            self.match(DynamoMRParser.Simple_name)
            self.state = 371
            self.match(DynamoMRParser.Simple_name)
            self.state = 372
            self.match(DynamoMRParser.Integer)
            self.state = 373
            self.match(DynamoMRParser.Simple_name)
            self.state = 374
            self.match(DynamoMRParser.Simple_name)
            self.state = 375
            self.match(DynamoMRParser.Simple_name)
            self.state = 376
            self.match(DynamoMRParser.Integer)
            self.state = 377
            self.match(DynamoMRParser.Simple_name)
            self.state = 378
            self.match(DynamoMRParser.Simple_name)
            self.state = 379
            self.match(DynamoMRParser.Simple_name)
            self.state = 380
            self.match(DynamoMRParser.Integer)
            self.state = 381
            self.match(DynamoMRParser.Simple_name)
            self.state = 382
            self.match(DynamoMRParser.Simple_name)
            self.state = 383
            self.number()
            self.state = 384
            self.number()
            self.state = 385
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_angle_restraints_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def Resid_K(self):
            return self.getToken(DynamoMRParser.Resid_K, 0)

        def Resname_K(self):
            return self.getToken(DynamoMRParser.Resname_K, 0)

        def Atomname_K(self):
            return self.getToken(DynamoMRParser.Atomname_K, 0)

        def Segname_K(self):
            return self.getToken(DynamoMRParser.Segname_K, 0)

        def Resid_L(self):
            return self.getToken(DynamoMRParser.Resid_L, 0)

        def Resname_L(self):
            return self.getToken(DynamoMRParser.Resname_L, 0)

        def Atomname_L(self):
            return self.getToken(DynamoMRParser.Atomname_L, 0)

        def Segname_L(self):
            return self.getToken(DynamoMRParser.Segname_L, 0)

        def Angle_Lo(self):
            return self.getToken(DynamoMRParser.Angle_Lo, 0)

        def Angle_Hi(self):
            return self.getToken(DynamoMRParser.Angle_Hi, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def torsion_angle_restraint_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Torsion_angle_restraint_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Torsion_angle_restraint_ew_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_torsion_angle_restraints_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_angle_restraints_ew_segid" ):
                listener.enterTorsion_angle_restraints_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_angle_restraints_ew_segid" ):
                listener.exitTorsion_angle_restraints_ew_segid(self)




    def torsion_angle_restraints_ew_segid(self):

        localctx = DynamoMRParser.Torsion_angle_restraints_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_torsion_angle_restraints_ew_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(DynamoMRParser.Vars)
            self.state = 388
            self.match(DynamoMRParser.Index)
            self.state = 389
            self.match(DynamoMRParser.Resid_I)
            self.state = 390
            self.match(DynamoMRParser.Resname_I)
            self.state = 391
            self.match(DynamoMRParser.Atomname_I)
            self.state = 392
            self.match(DynamoMRParser.Segname_I)
            self.state = 393
            self.match(DynamoMRParser.Resid_J)
            self.state = 394
            self.match(DynamoMRParser.Resname_J)
            self.state = 395
            self.match(DynamoMRParser.Atomname_J)
            self.state = 396
            self.match(DynamoMRParser.Segname_J)
            self.state = 397
            self.match(DynamoMRParser.Resid_K)
            self.state = 398
            self.match(DynamoMRParser.Resname_K)
            self.state = 399
            self.match(DynamoMRParser.Atomname_K)
            self.state = 400
            self.match(DynamoMRParser.Segname_K)
            self.state = 401
            self.match(DynamoMRParser.Resid_L)
            self.state = 402
            self.match(DynamoMRParser.Resname_L)
            self.state = 403
            self.match(DynamoMRParser.Atomname_L)
            self.state = 404
            self.match(DynamoMRParser.Segname_L)
            self.state = 405
            self.match(DynamoMRParser.Angle_Lo)
            self.state = 406
            self.match(DynamoMRParser.Angle_Hi)
            self.state = 407
            self.match(DynamoMRParser.FC)
            self.state = 408
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 409
            self.match(DynamoMRParser.Format)
            self.state = 410
            self.match(DynamoMRParser.Format_code)
            self.state = 411
            self.match(DynamoMRParser.Format_code)
            self.state = 412
            self.match(DynamoMRParser.Format_code)
            self.state = 413
            self.match(DynamoMRParser.Format_code)
            self.state = 414
            self.match(DynamoMRParser.Format_code)
            self.state = 415
            self.match(DynamoMRParser.Format_code)
            self.state = 416
            self.match(DynamoMRParser.Format_code)
            self.state = 417
            self.match(DynamoMRParser.Format_code)
            self.state = 418
            self.match(DynamoMRParser.Format_code)
            self.state = 419
            self.match(DynamoMRParser.Format_code)
            self.state = 420
            self.match(DynamoMRParser.Format_code)
            self.state = 421
            self.match(DynamoMRParser.Format_code)
            self.state = 422
            self.match(DynamoMRParser.Format_code)
            self.state = 423
            self.match(DynamoMRParser.Format_code)
            self.state = 424
            self.match(DynamoMRParser.Format_code)
            self.state = 425
            self.match(DynamoMRParser.Format_code)
            self.state = 426
            self.match(DynamoMRParser.Format_code)
            self.state = 427
            self.match(DynamoMRParser.Format_code)
            self.state = 428
            self.match(DynamoMRParser.Format_code)
            self.state = 429
            self.match(DynamoMRParser.Format_code)
            self.state = 430
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 432 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 431
                self.torsion_angle_restraint_ew_segid()
                self.state = 434 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==DynamoMRParser.Integer):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_angle_restraint_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_torsion_angle_restraint_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_angle_restraint_ew_segid" ):
                listener.enterTorsion_angle_restraint_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_angle_restraint_ew_segid" ):
                listener.exitTorsion_angle_restraint_ew_segid(self)




    def torsion_angle_restraint_ew_segid(self):

        localctx = DynamoMRParser.Torsion_angle_restraint_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_torsion_angle_restraint_ew_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.match(DynamoMRParser.Integer)
            self.state = 437
            self.match(DynamoMRParser.Integer)
            self.state = 438
            self.match(DynamoMRParser.Simple_name)
            self.state = 439
            self.match(DynamoMRParser.Simple_name)
            self.state = 440
            self.match(DynamoMRParser.Simple_name)
            self.state = 441
            self.match(DynamoMRParser.Integer)
            self.state = 442
            self.match(DynamoMRParser.Simple_name)
            self.state = 443
            self.match(DynamoMRParser.Simple_name)
            self.state = 444
            self.match(DynamoMRParser.Simple_name)
            self.state = 445
            self.match(DynamoMRParser.Integer)
            self.state = 446
            self.match(DynamoMRParser.Simple_name)
            self.state = 447
            self.match(DynamoMRParser.Simple_name)
            self.state = 448
            self.match(DynamoMRParser.Simple_name)
            self.state = 449
            self.match(DynamoMRParser.Integer)
            self.state = 450
            self.match(DynamoMRParser.Simple_name)
            self.state = 451
            self.match(DynamoMRParser.Simple_name)
            self.state = 452
            self.match(DynamoMRParser.Simple_name)
            self.state = 453
            self.number()
            self.state = 454
            self.number()
            self.state = 455
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def D(self):
            return self.getToken(DynamoMRParser.D, 0)

        def DD(self):
            return self.getToken(DynamoMRParser.DD, 0)

        def W(self):
            return self.getToken(DynamoMRParser.W, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Rdc_restraintContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_rdc_restraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraints" ):
                listener.enterRdc_restraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraints" ):
                listener.exitRdc_restraints(self)




    def rdc_restraints(self):

        localctx = DynamoMRParser.Rdc_restraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_rdc_restraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 457
            self.match(DynamoMRParser.Vars)
            self.state = 458
            self.match(DynamoMRParser.Resid_I)
            self.state = 459
            self.match(DynamoMRParser.Resname_I)
            self.state = 460
            self.match(DynamoMRParser.Atomname_I)
            self.state = 461
            self.match(DynamoMRParser.Resid_J)
            self.state = 462
            self.match(DynamoMRParser.Resname_J)
            self.state = 463
            self.match(DynamoMRParser.Atomname_J)
            self.state = 464
            self.match(DynamoMRParser.D)
            self.state = 465
            self.match(DynamoMRParser.DD)
            self.state = 466
            self.match(DynamoMRParser.W)
            self.state = 467
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 468
            self.match(DynamoMRParser.Format)
            self.state = 469
            self.match(DynamoMRParser.Format_code)
            self.state = 470
            self.match(DynamoMRParser.Format_code)
            self.state = 471
            self.match(DynamoMRParser.Format_code)
            self.state = 472
            self.match(DynamoMRParser.Format_code)
            self.state = 473
            self.match(DynamoMRParser.Format_code)
            self.state = 474
            self.match(DynamoMRParser.Format_code)
            self.state = 475
            self.match(DynamoMRParser.Format_code)
            self.state = 476
            self.match(DynamoMRParser.Format_code)
            self.state = 477
            self.match(DynamoMRParser.Format_code)
            self.state = 478
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 480 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 479
                self.rdc_restraint()
                self.state = 482 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==DynamoMRParser.Integer):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = DynamoMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_rdc_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.match(DynamoMRParser.Integer)
            self.state = 485
            self.match(DynamoMRParser.Simple_name)
            self.state = 486
            self.match(DynamoMRParser.Simple_name)
            self.state = 487
            self.match(DynamoMRParser.Integer)
            self.state = 488
            self.match(DynamoMRParser.Simple_name)
            self.state = 489
            self.match(DynamoMRParser.Simple_name)
            self.state = 490
            self.number()
            self.state = 491
            self.number()
            self.state = 492
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraints_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def D(self):
            return self.getToken(DynamoMRParser.D, 0)

        def DD(self):
            return self.getToken(DynamoMRParser.DD, 0)

        def W(self):
            return self.getToken(DynamoMRParser.W, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def rdc_restraint_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Rdc_restraint_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Rdc_restraint_sw_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_rdc_restraints_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraints_sw_segid" ):
                listener.enterRdc_restraints_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraints_sw_segid" ):
                listener.exitRdc_restraints_sw_segid(self)




    def rdc_restraints_sw_segid(self):

        localctx = DynamoMRParser.Rdc_restraints_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_rdc_restraints_sw_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 494
            self.match(DynamoMRParser.Vars)
            self.state = 495
            self.match(DynamoMRParser.Segname_I)
            self.state = 496
            self.match(DynamoMRParser.Resid_I)
            self.state = 497
            self.match(DynamoMRParser.Resname_I)
            self.state = 498
            self.match(DynamoMRParser.Atomname_I)
            self.state = 499
            self.match(DynamoMRParser.Segname_J)
            self.state = 500
            self.match(DynamoMRParser.Resid_J)
            self.state = 501
            self.match(DynamoMRParser.Resname_J)
            self.state = 502
            self.match(DynamoMRParser.Atomname_J)
            self.state = 503
            self.match(DynamoMRParser.D)
            self.state = 504
            self.match(DynamoMRParser.DD)
            self.state = 505
            self.match(DynamoMRParser.W)
            self.state = 506
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 507
            self.match(DynamoMRParser.Format)
            self.state = 508
            self.match(DynamoMRParser.Format_code)
            self.state = 509
            self.match(DynamoMRParser.Format_code)
            self.state = 510
            self.match(DynamoMRParser.Format_code)
            self.state = 511
            self.match(DynamoMRParser.Format_code)
            self.state = 512
            self.match(DynamoMRParser.Format_code)
            self.state = 513
            self.match(DynamoMRParser.Format_code)
            self.state = 514
            self.match(DynamoMRParser.Format_code)
            self.state = 515
            self.match(DynamoMRParser.Format_code)
            self.state = 516
            self.match(DynamoMRParser.Format_code)
            self.state = 517
            self.match(DynamoMRParser.Format_code)
            self.state = 518
            self.match(DynamoMRParser.Format_code)
            self.state = 519
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 521 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 520
                self.rdc_restraint_sw_segid()
                self.state = 523 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==DynamoMRParser.Simple_name):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraint_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_rdc_restraint_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint_sw_segid" ):
                listener.enterRdc_restraint_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint_sw_segid" ):
                listener.exitRdc_restraint_sw_segid(self)




    def rdc_restraint_sw_segid(self):

        localctx = DynamoMRParser.Rdc_restraint_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_rdc_restraint_sw_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(DynamoMRParser.Simple_name)
            self.state = 526
            self.match(DynamoMRParser.Integer)
            self.state = 527
            self.match(DynamoMRParser.Simple_name)
            self.state = 528
            self.match(DynamoMRParser.Simple_name)
            self.state = 529
            self.match(DynamoMRParser.Simple_name)
            self.state = 530
            self.match(DynamoMRParser.Integer)
            self.state = 531
            self.match(DynamoMRParser.Simple_name)
            self.state = 532
            self.match(DynamoMRParser.Simple_name)
            self.state = 533
            self.number()
            self.state = 534
            self.number()
            self.state = 535
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraints_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def D(self):
            return self.getToken(DynamoMRParser.D, 0)

        def DD(self):
            return self.getToken(DynamoMRParser.DD, 0)

        def W(self):
            return self.getToken(DynamoMRParser.W, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def rdc_restraint_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Rdc_restraint_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Rdc_restraint_ew_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_rdc_restraints_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraints_ew_segid" ):
                listener.enterRdc_restraints_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraints_ew_segid" ):
                listener.exitRdc_restraints_ew_segid(self)




    def rdc_restraints_ew_segid(self):

        localctx = DynamoMRParser.Rdc_restraints_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_rdc_restraints_ew_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 537
            self.match(DynamoMRParser.Vars)
            self.state = 538
            self.match(DynamoMRParser.Resid_I)
            self.state = 539
            self.match(DynamoMRParser.Resname_I)
            self.state = 540
            self.match(DynamoMRParser.Atomname_I)
            self.state = 541
            self.match(DynamoMRParser.Segname_I)
            self.state = 542
            self.match(DynamoMRParser.Resid_J)
            self.state = 543
            self.match(DynamoMRParser.Resname_J)
            self.state = 544
            self.match(DynamoMRParser.Atomname_J)
            self.state = 545
            self.match(DynamoMRParser.Segname_J)
            self.state = 546
            self.match(DynamoMRParser.D)
            self.state = 547
            self.match(DynamoMRParser.DD)
            self.state = 548
            self.match(DynamoMRParser.W)
            self.state = 549
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 550
            self.match(DynamoMRParser.Format)
            self.state = 551
            self.match(DynamoMRParser.Format_code)
            self.state = 552
            self.match(DynamoMRParser.Format_code)
            self.state = 553
            self.match(DynamoMRParser.Format_code)
            self.state = 554
            self.match(DynamoMRParser.Format_code)
            self.state = 555
            self.match(DynamoMRParser.Format_code)
            self.state = 556
            self.match(DynamoMRParser.Format_code)
            self.state = 557
            self.match(DynamoMRParser.Format_code)
            self.state = 558
            self.match(DynamoMRParser.Format_code)
            self.state = 559
            self.match(DynamoMRParser.Format_code)
            self.state = 560
            self.match(DynamoMRParser.Format_code)
            self.state = 561
            self.match(DynamoMRParser.Format_code)
            self.state = 562
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 564 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 563
                self.rdc_restraint_ew_segid()
                self.state = 566 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==DynamoMRParser.Integer):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraint_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_rdc_restraint_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint_ew_segid" ):
                listener.enterRdc_restraint_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint_ew_segid" ):
                listener.exitRdc_restraint_ew_segid(self)




    def rdc_restraint_ew_segid(self):

        localctx = DynamoMRParser.Rdc_restraint_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_rdc_restraint_ew_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(DynamoMRParser.Integer)
            self.state = 569
            self.match(DynamoMRParser.Simple_name)
            self.state = 570
            self.match(DynamoMRParser.Simple_name)
            self.state = 571
            self.match(DynamoMRParser.Simple_name)
            self.state = 572
            self.match(DynamoMRParser.Integer)
            self.state = 573
            self.match(DynamoMRParser.Simple_name)
            self.state = 574
            self.match(DynamoMRParser.Simple_name)
            self.state = 575
            self.match(DynamoMRParser.Simple_name)
            self.state = 576
            self.number()
            self.state = 577
            self.number()
            self.state = 578
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pales_meta_outputsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Data(self):
            return self.getToken(DynamoMRParser.Data, 0)

        def RETURN_DA(self):
            return self.getToken(DynamoMRParser.RETURN_DA, 0)

        def Pales_mode(self):
            return self.getToken(DynamoMRParser.Pales_mode, 0)

        def Simple_name_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name_DA)
            else:
                return self.getToken(DynamoMRParser.Simple_name_DA, i)

        def Tensor_mode(self):
            return self.getToken(DynamoMRParser.Tensor_mode, 0)

        def Saupe_matrix(self):
            return self.getToken(DynamoMRParser.Saupe_matrix, 0)

        def S_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.S_DA)
            else:
                return self.getToken(DynamoMRParser.S_DA, i)

        def L_paren_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.L_paren_DA)
            else:
                return self.getToken(DynamoMRParser.L_paren_DA, i)

        def R_paren_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.R_paren_DA)
            else:
                return self.getToken(DynamoMRParser.R_paren_DA, i)

        def Saupe(self):
            return self.getToken(DynamoMRParser.Saupe, 0)

        def Real_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Real_DA)
            else:
                return self.getToken(DynamoMRParser.Real_DA, i)

        def Irreducible_rep(self):
            return self.getToken(DynamoMRParser.Irreducible_rep, 0)

        def Irreducible(self):
            return self.getToken(DynamoMRParser.Irreducible, 0)

        def Mapping_corr(self):
            return self.getToken(DynamoMRParser.Mapping_corr, 0)

        def Mapping(self):
            return self.getToken(DynamoMRParser.Mapping, 0)

        def Float_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Float_DA)
            else:
                return self.getToken(DynamoMRParser.Float_DA, i)

        def Eigenvalues(self):
            return self.getToken(DynamoMRParser.Eigenvalues, 0)

        def Comma_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Comma_DA)
            else:
                return self.getToken(DynamoMRParser.Comma_DA, i)

        def Eigenvectors(self):
            return self.getToken(DynamoMRParser.Eigenvectors, 0)

        def Q_euler_solutions(self):
            return self.getToken(DynamoMRParser.Q_euler_solutions, 0)

        def Q_euler_angles(self):
            return self.getToken(DynamoMRParser.Q_euler_angles, 0)

        def Integer_DA(self):
            return self.getToken(DynamoMRParser.Integer_DA, 0)

        def Euler_solutions(self):
            return self.getToken(DynamoMRParser.Euler_solutions, 0)

        def Euler_angles(self):
            return self.getToken(DynamoMRParser.Euler_angles, 0)

        def N(self):
            return self.getToken(DynamoMRParser.N, 0)

        def Regression(self):
            return self.getToken(DynamoMRParser.Regression, 0)

        def Plus_minus(self):
            return self.getToken(DynamoMRParser.Plus_minus, 0)

        def L_brkt_DA(self):
            return self.getToken(DynamoMRParser.L_brkt_DA, 0)

        def Hz(self):
            return self.getToken(DynamoMRParser.Hz, 0)

        def R_brkt_DA(self):
            return self.getToken(DynamoMRParser.R_brkt_DA, 0)

        def Da(self):
            return self.getToken(DynamoMRParser.Da, 0)

        def Dr(self):
            return self.getToken(DynamoMRParser.Dr, 0)

        def Aa(self):
            return self.getToken(DynamoMRParser.Aa, 0)

        def Ar(self):
            return self.getToken(DynamoMRParser.Ar, 0)

        def Da_hn(self):
            return self.getToken(DynamoMRParser.Da_hn, 0)

        def Rhombicity(self):
            return self.getToken(DynamoMRParser.Rhombicity, 0)

        def General_magnitude(self):
            return self.getToken(DynamoMRParser.General_magnitude, 0)

        def Rms(self):
            return self.getToken(DynamoMRParser.Rms, 0)

        def Chi2(self):
            return self.getToken(DynamoMRParser.Chi2, 0)

        def Corr(self):
            return self.getToken(DynamoMRParser.Corr, 0)

        def R(self):
            return self.getToken(DynamoMRParser.R, 0)

        def Q(self):
            return self.getToken(DynamoMRParser.Q, 0)

        def Offset(self):
            return self.getToken(DynamoMRParser.Offset, 0)

        def Slope(self):
            return self.getToken(DynamoMRParser.Slope, 0)

        def Inv(self):
            return self.getToken(DynamoMRParser.Inv, 0)

        def X_axis(self):
            return self.getToken(DynamoMRParser.X_axis, 0)

        def Y_axis(self):
            return self.getToken(DynamoMRParser.Y_axis, 0)

        def Z_axis(self):
            return self.getToken(DynamoMRParser.Z_axis, 0)

        def Bax(self):
            return self.getToken(DynamoMRParser.Bax, 0)

        def getRuleIndex(self):
            return DynamoMRParser.RULE_pales_meta_outputs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPales_meta_outputs" ):
                listener.enterPales_meta_outputs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPales_meta_outputs" ):
                listener.exitPales_meta_outputs(self)




    def pales_meta_outputs(self):

        localctx = DynamoMRParser.Pales_meta_outputsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_pales_meta_outputs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 580
            self.match(DynamoMRParser.Data)
            self.state = 737
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [DynamoMRParser.Pales_mode]:
                self.state = 581
                self.match(DynamoMRParser.Pales_mode)
                self.state = 582
                self.match(DynamoMRParser.Simple_name_DA)
                pass
            elif token in [DynamoMRParser.Tensor_mode]:
                self.state = 583
                self.match(DynamoMRParser.Tensor_mode)
                self.state = 584
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 592
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DynamoMRParser.L_paren_DA:
                    self.state = 585
                    self.match(DynamoMRParser.L_paren_DA)
                    self.state = 587 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 586
                        self.match(DynamoMRParser.Simple_name_DA)
                        self.state = 589 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==DynamoMRParser.Simple_name_DA):
                            break

                    self.state = 591
                    self.match(DynamoMRParser.R_paren_DA)


                pass
            elif token in [DynamoMRParser.Saupe_matrix]:
                self.state = 594
                self.match(DynamoMRParser.Saupe_matrix)
                self.state = 595
                self.match(DynamoMRParser.S_DA)
                self.state = 596
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 597
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 598
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 599
                self.match(DynamoMRParser.S_DA)
                self.state = 600
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 601
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 602
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 603
                self.match(DynamoMRParser.S_DA)
                self.state = 604
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 605
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 606
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 607
                self.match(DynamoMRParser.S_DA)
                self.state = 608
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 609
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 610
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 611
                self.match(DynamoMRParser.S_DA)
                self.state = 612
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 613
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 614
                self.match(DynamoMRParser.R_paren_DA)
                pass
            elif token in [DynamoMRParser.Saupe]:
                self.state = 615
                self.match(DynamoMRParser.Saupe)
                self.state = 616
                self.match(DynamoMRParser.Real_DA)
                self.state = 617
                self.match(DynamoMRParser.Real_DA)
                self.state = 618
                self.match(DynamoMRParser.Real_DA)
                self.state = 619
                self.match(DynamoMRParser.Real_DA)
                self.state = 620
                self.match(DynamoMRParser.Real_DA)
                pass
            elif token in [DynamoMRParser.Irreducible_rep]:
                self.state = 621
                self.match(DynamoMRParser.Irreducible_rep)
                self.state = 622
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 623
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 624
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 625
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 626
                self.match(DynamoMRParser.Simple_name_DA)
                pass
            elif token in [DynamoMRParser.Irreducible]:
                self.state = 627
                self.match(DynamoMRParser.Irreducible)
                self.state = 635
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DynamoMRParser.Real_DA]:
                    self.state = 628
                    self.match(DynamoMRParser.Real_DA)
                    self.state = 629
                    self.match(DynamoMRParser.Real_DA)
                    self.state = 630
                    self.match(DynamoMRParser.Real_DA)
                    self.state = 631
                    self.match(DynamoMRParser.Real_DA)
                    self.state = 632
                    self.match(DynamoMRParser.Real_DA)
                    pass
                elif token in [DynamoMRParser.General_magnitude]:
                    self.state = 633
                    self.match(DynamoMRParser.General_magnitude)
                    self.state = 634
                    self.match(DynamoMRParser.Real_DA)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [DynamoMRParser.Mapping_corr]:
                self.state = 637
                self.match(DynamoMRParser.Mapping_corr)
                self.state = 638
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 639
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 640
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 641
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 642
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 643
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 644
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 645
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 646
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 647
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 648
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 649
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 650
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 651
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 652
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 653
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 654
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 655
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 656
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 657
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 658
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 659
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 660
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 661
                self.match(DynamoMRParser.R_paren_DA)
                pass
            elif token in [DynamoMRParser.Mapping]:
                self.state = 662
                self.match(DynamoMRParser.Mapping)
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==DynamoMRParser.Inv:
                    self.state = 663
                    self.match(DynamoMRParser.Inv)


                self.state = 666
                self.match(DynamoMRParser.Float_DA)
                self.state = 667
                self.match(DynamoMRParser.Float_DA)
                self.state = 668
                self.match(DynamoMRParser.Float_DA)
                self.state = 669
                self.match(DynamoMRParser.Float_DA)
                self.state = 670
                self.match(DynamoMRParser.Float_DA)
                self.state = 671
                self.match(DynamoMRParser.Float_DA)
                pass
            elif token in [DynamoMRParser.Eigenvalues]:
                self.state = 672
                self.match(DynamoMRParser.Eigenvalues)
                self.state = 673
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 674
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 675
                self.match(DynamoMRParser.Comma_DA)
                self.state = 676
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 677
                self.match(DynamoMRParser.Comma_DA)
                self.state = 678
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 679
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 680
                self.match(DynamoMRParser.Real_DA)
                self.state = 681
                self.match(DynamoMRParser.Real_DA)
                self.state = 682
                self.match(DynamoMRParser.Real_DA)
                pass
            elif token in [DynamoMRParser.Eigenvectors]:
                self.state = 683
                self.match(DynamoMRParser.Eigenvectors)
                self.state = 693
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DynamoMRParser.L_paren_DA]:
                    self.state = 684
                    self.match(DynamoMRParser.L_paren_DA)
                    self.state = 685
                    self.match(DynamoMRParser.Simple_name_DA)
                    self.state = 686
                    self.match(DynamoMRParser.Simple_name_DA)
                    self.state = 687
                    self.match(DynamoMRParser.Simple_name_DA)
                    self.state = 688
                    self.match(DynamoMRParser.R_paren_DA)
                    pass
                elif token in [DynamoMRParser.X_axis, DynamoMRParser.Y_axis, DynamoMRParser.Z_axis]:
                    self.state = 689
                    _la = self._input.LA(1)
                    if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DynamoMRParser.X_axis) | (1 << DynamoMRParser.Y_axis) | (1 << DynamoMRParser.Z_axis))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 690
                    self.match(DynamoMRParser.Real_DA)
                    self.state = 691
                    self.match(DynamoMRParser.Real_DA)
                    self.state = 692
                    self.match(DynamoMRParser.Real_DA)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [DynamoMRParser.Q_euler_solutions]:
                self.state = 695
                self.match(DynamoMRParser.Q_euler_solutions)
                self.state = 696
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 697
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 698
                self.match(DynamoMRParser.Simple_name_DA)
                pass
            elif token in [DynamoMRParser.Q_euler_angles]:
                self.state = 699
                self.match(DynamoMRParser.Q_euler_angles)
                self.state = 700
                self.match(DynamoMRParser.Integer_DA)
                self.state = 701
                self.match(DynamoMRParser.Float_DA)
                self.state = 702
                self.match(DynamoMRParser.Float_DA)
                self.state = 703
                self.match(DynamoMRParser.Float_DA)
                pass
            elif token in [DynamoMRParser.Euler_solutions]:
                self.state = 704
                self.match(DynamoMRParser.Euler_solutions)
                self.state = 705
                self.match(DynamoMRParser.Integer_DA)
                pass
            elif token in [DynamoMRParser.Euler_angles]:
                self.state = 706
                self.match(DynamoMRParser.Euler_angles)
                self.state = 707
                self.match(DynamoMRParser.Float_DA)
                self.state = 708
                self.match(DynamoMRParser.Float_DA)
                self.state = 709
                self.match(DynamoMRParser.Float_DA)
                pass
            elif token in [DynamoMRParser.Da, DynamoMRParser.Dr, DynamoMRParser.Aa, DynamoMRParser.Ar, DynamoMRParser.Da_hn, DynamoMRParser.Rhombicity]:
                self.state = 710
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << DynamoMRParser.Da) | (1 << DynamoMRParser.Dr) | (1 << DynamoMRParser.Aa) | (1 << DynamoMRParser.Ar) | (1 << DynamoMRParser.Da_hn) | (1 << DynamoMRParser.Rhombicity))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 711
                self.match(DynamoMRParser.Real_DA)
                pass
            elif token in [DynamoMRParser.N]:
                self.state = 712
                self.match(DynamoMRParser.N)
                self.state = 713
                self.match(DynamoMRParser.Integer_DA)
                pass
            elif token in [DynamoMRParser.Rms, DynamoMRParser.Chi2, DynamoMRParser.Corr, DynamoMRParser.Q]:
                self.state = 720
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DynamoMRParser.Rms]:
                    self.state = 714
                    self.match(DynamoMRParser.Rms)
                    pass
                elif token in [DynamoMRParser.Chi2]:
                    self.state = 715
                    self.match(DynamoMRParser.Chi2)
                    pass
                elif token in [DynamoMRParser.Corr]:
                    self.state = 716
                    self.match(DynamoMRParser.Corr)
                    self.state = 717
                    self.match(DynamoMRParser.R)
                    pass
                elif token in [DynamoMRParser.Q]:
                    self.state = 718
                    self.match(DynamoMRParser.Q)
                    self.state = 719
                    self.match(DynamoMRParser.Saupe)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 722
                self.match(DynamoMRParser.Float_DA)
                pass
            elif token in [DynamoMRParser.Regression]:
                self.state = 723
                self.match(DynamoMRParser.Regression)
                self.state = 729
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [DynamoMRParser.Offset]:
                    self.state = 724
                    self.match(DynamoMRParser.Offset)
                    pass
                elif token in [DynamoMRParser.Slope, DynamoMRParser.Bax]:
                    self.state = 726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==DynamoMRParser.Bax:
                        self.state = 725
                        self.match(DynamoMRParser.Bax)


                    self.state = 728
                    self.match(DynamoMRParser.Slope)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 731
                self.match(DynamoMRParser.Float_DA)
                self.state = 732
                self.match(DynamoMRParser.Plus_minus)
                self.state = 733
                self.match(DynamoMRParser.Float_DA)
                self.state = 734
                self.match(DynamoMRParser.L_brkt_DA)
                self.state = 735
                self.match(DynamoMRParser.Hz)
                self.state = 736
                self.match(DynamoMRParser.R_brkt_DA)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 739
            self.match(DynamoMRParser.RETURN_DA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pales_rdc_outputsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def DI(self):
            return self.getToken(DynamoMRParser.DI, 0)

        def D_obs(self):
            return self.getToken(DynamoMRParser.D_obs, 0)

        def D(self):
            return self.getToken(DynamoMRParser.D, 0)

        def D_diff(self):
            return self.getToken(DynamoMRParser.D_diff, 0)

        def DD(self):
            return self.getToken(DynamoMRParser.DD, 0)

        def W(self):
            return self.getToken(DynamoMRParser.W, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def pales_rdc_output(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Pales_rdc_outputContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Pales_rdc_outputContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_pales_rdc_outputs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPales_rdc_outputs" ):
                listener.enterPales_rdc_outputs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPales_rdc_outputs" ):
                listener.exitPales_rdc_outputs(self)




    def pales_rdc_outputs(self):

        localctx = DynamoMRParser.Pales_rdc_outputsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pales_rdc_outputs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(DynamoMRParser.Vars)
            self.state = 742
            self.match(DynamoMRParser.Resid_I)
            self.state = 743
            self.match(DynamoMRParser.Resname_I)
            self.state = 744
            self.match(DynamoMRParser.Atomname_I)
            self.state = 745
            self.match(DynamoMRParser.Resid_J)
            self.state = 746
            self.match(DynamoMRParser.Resname_J)
            self.state = 747
            self.match(DynamoMRParser.Atomname_J)
            self.state = 748
            self.match(DynamoMRParser.DI)
            self.state = 749
            self.match(DynamoMRParser.D_obs)
            self.state = 750
            self.match(DynamoMRParser.D)
            self.state = 751
            self.match(DynamoMRParser.D_diff)
            self.state = 752
            self.match(DynamoMRParser.DD)
            self.state = 753
            self.match(DynamoMRParser.W)
            self.state = 754
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 755
            self.match(DynamoMRParser.Format)
            self.state = 756
            self.match(DynamoMRParser.Format_code)
            self.state = 757
            self.match(DynamoMRParser.Format_code)
            self.state = 758
            self.match(DynamoMRParser.Format_code)
            self.state = 759
            self.match(DynamoMRParser.Format_code)
            self.state = 760
            self.match(DynamoMRParser.Format_code)
            self.state = 761
            self.match(DynamoMRParser.Format_code)
            self.state = 762
            self.match(DynamoMRParser.Format_code)
            self.state = 763
            self.match(DynamoMRParser.Format_code)
            self.state = 764
            self.match(DynamoMRParser.Format_code)
            self.state = 765
            self.match(DynamoMRParser.Format_code)
            self.state = 766
            self.match(DynamoMRParser.Format_code)
            self.state = 767
            self.match(DynamoMRParser.Format_code)
            self.state = 768
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 770 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 769
                self.pales_rdc_output()
                self.state = 772 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==DynamoMRParser.Integer):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pales_rdc_outputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_pales_rdc_output

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPales_rdc_output" ):
                listener.enterPales_rdc_output(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPales_rdc_output" ):
                listener.exitPales_rdc_output(self)




    def pales_rdc_output(self):

        localctx = DynamoMRParser.Pales_rdc_outputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pales_rdc_output)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 774
            self.match(DynamoMRParser.Integer)
            self.state = 775
            self.match(DynamoMRParser.Simple_name)
            self.state = 776
            self.match(DynamoMRParser.Simple_name)
            self.state = 777
            self.match(DynamoMRParser.Integer)
            self.state = 778
            self.match(DynamoMRParser.Simple_name)
            self.state = 779
            self.match(DynamoMRParser.Simple_name)
            self.state = 780
            self.number()
            self.state = 781
            self.number()
            self.state = 782
            self.number()
            self.state = 783
            self.number()
            self.state = 784
            self.number()
            self.state = 785
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Resid_K(self):
            return self.getToken(DynamoMRParser.Resid_K, 0)

        def Resname_K(self):
            return self.getToken(DynamoMRParser.Resname_K, 0)

        def Atomname_K(self):
            return self.getToken(DynamoMRParser.Atomname_K, 0)

        def Resid_L(self):
            return self.getToken(DynamoMRParser.Resid_L, 0)

        def Resname_L(self):
            return self.getToken(DynamoMRParser.Resname_L, 0)

        def Atomname_L(self):
            return self.getToken(DynamoMRParser.Atomname_L, 0)

        def A(self):
            return self.getToken(DynamoMRParser.A, 0)

        def B(self):
            return self.getToken(DynamoMRParser.B, 0)

        def C(self):
            return self.getToken(DynamoMRParser.C, 0)

        def Phase(self):
            return self.getToken(DynamoMRParser.Phase, 0)

        def ObsJ(self):
            return self.getToken(DynamoMRParser.ObsJ, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Coupling_restraintContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_coupling_restraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraints" ):
                listener.enterCoupling_restraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraints" ):
                listener.exitCoupling_restraints(self)




    def coupling_restraints(self):

        localctx = DynamoMRParser.Coupling_restraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_coupling_restraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 787
            self.match(DynamoMRParser.Vars)
            self.state = 788
            self.match(DynamoMRParser.Index)
            self.state = 789
            self.match(DynamoMRParser.Resid_I)
            self.state = 790
            self.match(DynamoMRParser.Resname_I)
            self.state = 791
            self.match(DynamoMRParser.Atomname_I)
            self.state = 792
            self.match(DynamoMRParser.Resid_J)
            self.state = 793
            self.match(DynamoMRParser.Resname_J)
            self.state = 794
            self.match(DynamoMRParser.Atomname_J)
            self.state = 795
            self.match(DynamoMRParser.Resid_K)
            self.state = 796
            self.match(DynamoMRParser.Resname_K)
            self.state = 797
            self.match(DynamoMRParser.Atomname_K)
            self.state = 798
            self.match(DynamoMRParser.Resid_L)
            self.state = 799
            self.match(DynamoMRParser.Resname_L)
            self.state = 800
            self.match(DynamoMRParser.Atomname_L)
            self.state = 801
            self.match(DynamoMRParser.A)
            self.state = 802
            self.match(DynamoMRParser.B)
            self.state = 803
            self.match(DynamoMRParser.C)
            self.state = 804
            self.match(DynamoMRParser.Phase)
            self.state = 805
            self.match(DynamoMRParser.ObsJ)
            self.state = 806
            self.match(DynamoMRParser.FC)
            self.state = 807
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 808
            self.match(DynamoMRParser.Format)
            self.state = 809
            self.match(DynamoMRParser.Format_code)
            self.state = 810
            self.match(DynamoMRParser.Format_code)
            self.state = 811
            self.match(DynamoMRParser.Format_code)
            self.state = 812
            self.match(DynamoMRParser.Format_code)
            self.state = 813
            self.match(DynamoMRParser.Format_code)
            self.state = 814
            self.match(DynamoMRParser.Format_code)
            self.state = 815
            self.match(DynamoMRParser.Format_code)
            self.state = 816
            self.match(DynamoMRParser.Format_code)
            self.state = 817
            self.match(DynamoMRParser.Format_code)
            self.state = 818
            self.match(DynamoMRParser.Format_code)
            self.state = 819
            self.match(DynamoMRParser.Format_code)
            self.state = 820
            self.match(DynamoMRParser.Format_code)
            self.state = 821
            self.match(DynamoMRParser.Format_code)
            self.state = 822
            self.match(DynamoMRParser.Format_code)
            self.state = 823
            self.match(DynamoMRParser.Format_code)
            self.state = 824
            self.match(DynamoMRParser.Format_code)
            self.state = 825
            self.match(DynamoMRParser.Format_code)
            self.state = 826
            self.match(DynamoMRParser.Format_code)
            self.state = 827
            self.match(DynamoMRParser.Format_code)
            self.state = 828
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 830 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 829
                self.coupling_restraint()
                self.state = 832 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==DynamoMRParser.Integer):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = DynamoMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 834
            self.match(DynamoMRParser.Integer)
            self.state = 835
            self.match(DynamoMRParser.Integer)
            self.state = 836
            self.match(DynamoMRParser.Simple_name)
            self.state = 837
            self.match(DynamoMRParser.Simple_name)
            self.state = 838
            self.match(DynamoMRParser.Integer)
            self.state = 839
            self.match(DynamoMRParser.Simple_name)
            self.state = 840
            self.match(DynamoMRParser.Simple_name)
            self.state = 841
            self.match(DynamoMRParser.Integer)
            self.state = 842
            self.match(DynamoMRParser.Simple_name)
            self.state = 843
            self.match(DynamoMRParser.Simple_name)
            self.state = 844
            self.match(DynamoMRParser.Integer)
            self.state = 845
            self.match(DynamoMRParser.Simple_name)
            self.state = 846
            self.match(DynamoMRParser.Simple_name)
            self.state = 847
            self.number()
            self.state = 848
            self.number()
            self.state = 849
            self.number()
            self.state = 850
            self.number()
            self.state = 851
            self.number()
            self.state = 852
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraints_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Segname_K(self):
            return self.getToken(DynamoMRParser.Segname_K, 0)

        def Resid_K(self):
            return self.getToken(DynamoMRParser.Resid_K, 0)

        def Resname_K(self):
            return self.getToken(DynamoMRParser.Resname_K, 0)

        def Atomname_K(self):
            return self.getToken(DynamoMRParser.Atomname_K, 0)

        def Segname_L(self):
            return self.getToken(DynamoMRParser.Segname_L, 0)

        def Resid_L(self):
            return self.getToken(DynamoMRParser.Resid_L, 0)

        def Resname_L(self):
            return self.getToken(DynamoMRParser.Resname_L, 0)

        def Atomname_L(self):
            return self.getToken(DynamoMRParser.Atomname_L, 0)

        def A(self):
            return self.getToken(DynamoMRParser.A, 0)

        def B(self):
            return self.getToken(DynamoMRParser.B, 0)

        def C(self):
            return self.getToken(DynamoMRParser.C, 0)

        def Phase(self):
            return self.getToken(DynamoMRParser.Phase, 0)

        def ObsJ(self):
            return self.getToken(DynamoMRParser.ObsJ, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def coupling_restraint_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Coupling_restraint_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Coupling_restraint_sw_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_coupling_restraints_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraints_sw_segid" ):
                listener.enterCoupling_restraints_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraints_sw_segid" ):
                listener.exitCoupling_restraints_sw_segid(self)




    def coupling_restraints_sw_segid(self):

        localctx = DynamoMRParser.Coupling_restraints_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coupling_restraints_sw_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(DynamoMRParser.Vars)
            self.state = 855
            self.match(DynamoMRParser.Index)
            self.state = 856
            self.match(DynamoMRParser.Segname_I)
            self.state = 857
            self.match(DynamoMRParser.Resid_I)
            self.state = 858
            self.match(DynamoMRParser.Resname_I)
            self.state = 859
            self.match(DynamoMRParser.Atomname_I)
            self.state = 860
            self.match(DynamoMRParser.Segname_J)
            self.state = 861
            self.match(DynamoMRParser.Resid_J)
            self.state = 862
            self.match(DynamoMRParser.Resname_J)
            self.state = 863
            self.match(DynamoMRParser.Atomname_J)
            self.state = 864
            self.match(DynamoMRParser.Segname_K)
            self.state = 865
            self.match(DynamoMRParser.Resid_K)
            self.state = 866
            self.match(DynamoMRParser.Resname_K)
            self.state = 867
            self.match(DynamoMRParser.Atomname_K)
            self.state = 868
            self.match(DynamoMRParser.Segname_L)
            self.state = 869
            self.match(DynamoMRParser.Resid_L)
            self.state = 870
            self.match(DynamoMRParser.Resname_L)
            self.state = 871
            self.match(DynamoMRParser.Atomname_L)
            self.state = 872
            self.match(DynamoMRParser.A)
            self.state = 873
            self.match(DynamoMRParser.B)
            self.state = 874
            self.match(DynamoMRParser.C)
            self.state = 875
            self.match(DynamoMRParser.Phase)
            self.state = 876
            self.match(DynamoMRParser.ObsJ)
            self.state = 877
            self.match(DynamoMRParser.FC)
            self.state = 878
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 879
            self.match(DynamoMRParser.Format)
            self.state = 880
            self.match(DynamoMRParser.Format_code)
            self.state = 881
            self.match(DynamoMRParser.Format_code)
            self.state = 882
            self.match(DynamoMRParser.Format_code)
            self.state = 883
            self.match(DynamoMRParser.Format_code)
            self.state = 884
            self.match(DynamoMRParser.Format_code)
            self.state = 885
            self.match(DynamoMRParser.Format_code)
            self.state = 886
            self.match(DynamoMRParser.Format_code)
            self.state = 887
            self.match(DynamoMRParser.Format_code)
            self.state = 888
            self.match(DynamoMRParser.Format_code)
            self.state = 889
            self.match(DynamoMRParser.Format_code)
            self.state = 890
            self.match(DynamoMRParser.Format_code)
            self.state = 891
            self.match(DynamoMRParser.Format_code)
            self.state = 892
            self.match(DynamoMRParser.Format_code)
            self.state = 893
            self.match(DynamoMRParser.Format_code)
            self.state = 894
            self.match(DynamoMRParser.Format_code)
            self.state = 895
            self.match(DynamoMRParser.Format_code)
            self.state = 896
            self.match(DynamoMRParser.Format_code)
            self.state = 897
            self.match(DynamoMRParser.Format_code)
            self.state = 898
            self.match(DynamoMRParser.Format_code)
            self.state = 899
            self.match(DynamoMRParser.Format_code)
            self.state = 900
            self.match(DynamoMRParser.Format_code)
            self.state = 901
            self.match(DynamoMRParser.Format_code)
            self.state = 902
            self.match(DynamoMRParser.Format_code)
            self.state = 903
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 905 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 904
                self.coupling_restraint_sw_segid()
                self.state = 907 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==DynamoMRParser.Integer):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraint_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_coupling_restraint_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint_sw_segid" ):
                listener.enterCoupling_restraint_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint_sw_segid" ):
                listener.exitCoupling_restraint_sw_segid(self)




    def coupling_restraint_sw_segid(self):

        localctx = DynamoMRParser.Coupling_restraint_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_coupling_restraint_sw_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 909
            self.match(DynamoMRParser.Integer)
            self.state = 910
            self.match(DynamoMRParser.Simple_name)
            self.state = 911
            self.match(DynamoMRParser.Integer)
            self.state = 912
            self.match(DynamoMRParser.Simple_name)
            self.state = 913
            self.match(DynamoMRParser.Simple_name)
            self.state = 914
            self.match(DynamoMRParser.Simple_name)
            self.state = 915
            self.match(DynamoMRParser.Integer)
            self.state = 916
            self.match(DynamoMRParser.Simple_name)
            self.state = 917
            self.match(DynamoMRParser.Simple_name)
            self.state = 918
            self.match(DynamoMRParser.Simple_name)
            self.state = 919
            self.match(DynamoMRParser.Integer)
            self.state = 920
            self.match(DynamoMRParser.Simple_name)
            self.state = 921
            self.match(DynamoMRParser.Simple_name)
            self.state = 922
            self.match(DynamoMRParser.Simple_name)
            self.state = 923
            self.match(DynamoMRParser.Integer)
            self.state = 924
            self.match(DynamoMRParser.Simple_name)
            self.state = 925
            self.match(DynamoMRParser.Simple_name)
            self.state = 926
            self.number()
            self.state = 927
            self.number()
            self.state = 928
            self.number()
            self.state = 929
            self.number()
            self.state = 930
            self.number()
            self.state = 931
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraints_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def Resid_K(self):
            return self.getToken(DynamoMRParser.Resid_K, 0)

        def Resname_K(self):
            return self.getToken(DynamoMRParser.Resname_K, 0)

        def Atomname_K(self):
            return self.getToken(DynamoMRParser.Atomname_K, 0)

        def Segname_K(self):
            return self.getToken(DynamoMRParser.Segname_K, 0)

        def Resid_L(self):
            return self.getToken(DynamoMRParser.Resid_L, 0)

        def Resname_L(self):
            return self.getToken(DynamoMRParser.Resname_L, 0)

        def Atomname_L(self):
            return self.getToken(DynamoMRParser.Atomname_L, 0)

        def Segname_L(self):
            return self.getToken(DynamoMRParser.Segname_L, 0)

        def A(self):
            return self.getToken(DynamoMRParser.A, 0)

        def B(self):
            return self.getToken(DynamoMRParser.B, 0)

        def C(self):
            return self.getToken(DynamoMRParser.C, 0)

        def Phase(self):
            return self.getToken(DynamoMRParser.Phase, 0)

        def ObsJ(self):
            return self.getToken(DynamoMRParser.ObsJ, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def coupling_restraint_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Coupling_restraint_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Coupling_restraint_ew_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_coupling_restraints_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraints_ew_segid" ):
                listener.enterCoupling_restraints_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraints_ew_segid" ):
                listener.exitCoupling_restraints_ew_segid(self)




    def coupling_restraints_ew_segid(self):

        localctx = DynamoMRParser.Coupling_restraints_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_coupling_restraints_ew_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.match(DynamoMRParser.Vars)
            self.state = 934
            self.match(DynamoMRParser.Index)
            self.state = 935
            self.match(DynamoMRParser.Resid_I)
            self.state = 936
            self.match(DynamoMRParser.Resname_I)
            self.state = 937
            self.match(DynamoMRParser.Atomname_I)
            self.state = 938
            self.match(DynamoMRParser.Segname_I)
            self.state = 939
            self.match(DynamoMRParser.Resid_J)
            self.state = 940
            self.match(DynamoMRParser.Resname_J)
            self.state = 941
            self.match(DynamoMRParser.Atomname_J)
            self.state = 942
            self.match(DynamoMRParser.Segname_J)
            self.state = 943
            self.match(DynamoMRParser.Resid_K)
            self.state = 944
            self.match(DynamoMRParser.Resname_K)
            self.state = 945
            self.match(DynamoMRParser.Atomname_K)
            self.state = 946
            self.match(DynamoMRParser.Segname_K)
            self.state = 947
            self.match(DynamoMRParser.Resid_L)
            self.state = 948
            self.match(DynamoMRParser.Resname_L)
            self.state = 949
            self.match(DynamoMRParser.Atomname_L)
            self.state = 950
            self.match(DynamoMRParser.Segname_L)
            self.state = 951
            self.match(DynamoMRParser.A)
            self.state = 952
            self.match(DynamoMRParser.B)
            self.state = 953
            self.match(DynamoMRParser.C)
            self.state = 954
            self.match(DynamoMRParser.Phase)
            self.state = 955
            self.match(DynamoMRParser.ObsJ)
            self.state = 956
            self.match(DynamoMRParser.FC)
            self.state = 957
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 958
            self.match(DynamoMRParser.Format)
            self.state = 959
            self.match(DynamoMRParser.Format_code)
            self.state = 960
            self.match(DynamoMRParser.Format_code)
            self.state = 961
            self.match(DynamoMRParser.Format_code)
            self.state = 962
            self.match(DynamoMRParser.Format_code)
            self.state = 963
            self.match(DynamoMRParser.Format_code)
            self.state = 964
            self.match(DynamoMRParser.Format_code)
            self.state = 965
            self.match(DynamoMRParser.Format_code)
            self.state = 966
            self.match(DynamoMRParser.Format_code)
            self.state = 967
            self.match(DynamoMRParser.Format_code)
            self.state = 968
            self.match(DynamoMRParser.Format_code)
            self.state = 969
            self.match(DynamoMRParser.Format_code)
            self.state = 970
            self.match(DynamoMRParser.Format_code)
            self.state = 971
            self.match(DynamoMRParser.Format_code)
            self.state = 972
            self.match(DynamoMRParser.Format_code)
            self.state = 973
            self.match(DynamoMRParser.Format_code)
            self.state = 974
            self.match(DynamoMRParser.Format_code)
            self.state = 975
            self.match(DynamoMRParser.Format_code)
            self.state = 976
            self.match(DynamoMRParser.Format_code)
            self.state = 977
            self.match(DynamoMRParser.Format_code)
            self.state = 978
            self.match(DynamoMRParser.Format_code)
            self.state = 979
            self.match(DynamoMRParser.Format_code)
            self.state = 980
            self.match(DynamoMRParser.Format_code)
            self.state = 981
            self.match(DynamoMRParser.Format_code)
            self.state = 982
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 984 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 983
                self.coupling_restraint_ew_segid()
                self.state = 986 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==DynamoMRParser.Integer):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraint_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_coupling_restraint_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint_ew_segid" ):
                listener.enterCoupling_restraint_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint_ew_segid" ):
                listener.exitCoupling_restraint_ew_segid(self)




    def coupling_restraint_ew_segid(self):

        localctx = DynamoMRParser.Coupling_restraint_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_coupling_restraint_ew_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            self.match(DynamoMRParser.Integer)
            self.state = 989
            self.match(DynamoMRParser.Integer)
            self.state = 990
            self.match(DynamoMRParser.Simple_name)
            self.state = 991
            self.match(DynamoMRParser.Simple_name)
            self.state = 992
            self.match(DynamoMRParser.Simple_name)
            self.state = 993
            self.match(DynamoMRParser.Integer)
            self.state = 994
            self.match(DynamoMRParser.Simple_name)
            self.state = 995
            self.match(DynamoMRParser.Simple_name)
            self.state = 996
            self.match(DynamoMRParser.Simple_name)
            self.state = 997
            self.match(DynamoMRParser.Integer)
            self.state = 998
            self.match(DynamoMRParser.Simple_name)
            self.state = 999
            self.match(DynamoMRParser.Simple_name)
            self.state = 1000
            self.match(DynamoMRParser.Simple_name)
            self.state = 1001
            self.match(DynamoMRParser.Integer)
            self.state = 1002
            self.match(DynamoMRParser.Simple_name)
            self.state = 1003
            self.match(DynamoMRParser.Simple_name)
            self.state = 1004
            self.match(DynamoMRParser.Simple_name)
            self.state = 1005
            self.number()
            self.state = 1006
            self.number()
            self.state = 1007
            self.number()
            self.state = 1008
            self.number()
            self.state = 1009
            self.number()
            self.state = 1010
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Talos_restraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Resid(self):
            return self.getToken(DynamoMRParser.Resid, 0)

        def Resname(self):
            return self.getToken(DynamoMRParser.Resname, 0)

        def Phi(self):
            return self.getToken(DynamoMRParser.Phi, 0)

        def Psi(self):
            return self.getToken(DynamoMRParser.Psi, 0)

        def Dphi(self):
            return self.getToken(DynamoMRParser.Dphi, 0)

        def Dpsi(self):
            return self.getToken(DynamoMRParser.Dpsi, 0)

        def Dist(self):
            return self.getToken(DynamoMRParser.Dist, 0)

        def S2(self):
            return self.getToken(DynamoMRParser.S2, 0)

        def Count(self):
            return self.getToken(DynamoMRParser.Count, 0)

        def Cs_count(self):
            return self.getToken(DynamoMRParser.Cs_count, 0)

        def Class(self):
            return self.getToken(DynamoMRParser.Class, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def talos_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Talos_restraintContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Talos_restraintContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_talos_restraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTalos_restraints" ):
                listener.enterTalos_restraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTalos_restraints" ):
                listener.exitTalos_restraints(self)




    def talos_restraints(self):

        localctx = DynamoMRParser.Talos_restraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_talos_restraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1012
            self.match(DynamoMRParser.Vars)
            self.state = 1013
            self.match(DynamoMRParser.Resid)
            self.state = 1014
            self.match(DynamoMRParser.Resname)
            self.state = 1015
            self.match(DynamoMRParser.Phi)
            self.state = 1016
            self.match(DynamoMRParser.Psi)
            self.state = 1017
            self.match(DynamoMRParser.Dphi)
            self.state = 1018
            self.match(DynamoMRParser.Dpsi)
            self.state = 1019
            self.match(DynamoMRParser.Dist)
            self.state = 1020
            self.match(DynamoMRParser.S2)
            self.state = 1021
            self.match(DynamoMRParser.Count)
            self.state = 1022
            self.match(DynamoMRParser.Cs_count)
            self.state = 1023
            self.match(DynamoMRParser.Class)
            self.state = 1024
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 1025
            self.match(DynamoMRParser.Format)
            self.state = 1026
            self.match(DynamoMRParser.Format_code)
            self.state = 1027
            self.match(DynamoMRParser.Format_code)
            self.state = 1028
            self.match(DynamoMRParser.Format_code)
            self.state = 1029
            self.match(DynamoMRParser.Format_code)
            self.state = 1030
            self.match(DynamoMRParser.Format_code)
            self.state = 1031
            self.match(DynamoMRParser.Format_code)
            self.state = 1032
            self.match(DynamoMRParser.Format_code)
            self.state = 1033
            self.match(DynamoMRParser.Format_code)
            self.state = 1034
            self.match(DynamoMRParser.Format_code)
            self.state = 1035
            self.match(DynamoMRParser.Format_code)
            self.state = 1036
            self.match(DynamoMRParser.Format_code)
            self.state = 1037
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 1039 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1038
                self.talos_restraint()
                self.state = 1041 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==DynamoMRParser.Integer):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Talos_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_talos_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTalos_restraint" ):
                listener.enterTalos_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTalos_restraint" ):
                listener.exitTalos_restraint(self)




    def talos_restraint(self):

        localctx = DynamoMRParser.Talos_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_talos_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.match(DynamoMRParser.Integer)
            self.state = 1044
            self.match(DynamoMRParser.Simple_name)
            self.state = 1045
            self.number()
            self.state = 1046
            self.number()
            self.state = 1047
            self.number()
            self.state = 1048
            self.number()
            self.state = 1049
            self.number()
            self.state = 1050
            self.number()
            self.state = 1051
            self.match(DynamoMRParser.Integer)
            self.state = 1052
            self.match(DynamoMRParser.Integer)
            self.state = 1053
            self.match(DynamoMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Float(self):
            return self.getToken(DynamoMRParser.Float, 0)

        def Integer(self):
            return self.getToken(DynamoMRParser.Integer, 0)

        def getRuleIndex(self):
            return DynamoMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = DynamoMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            _la = self._input.LA(1)
            if not(_la==DynamoMRParser.Integer or _la==DynamoMRParser.Float):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





