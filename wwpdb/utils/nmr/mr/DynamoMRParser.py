# Generated from DynamoMRParser.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,125,1114,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,5,0,86,8,0,10,0,12,0,89,9,0,1,0,1,0,1,1,1,1,1,1,1,1,
        1,1,1,1,4,1,99,8,1,11,1,12,1,100,1,1,1,1,1,1,1,1,1,1,1,1,5,1,109,
        8,1,10,1,12,1,112,9,1,1,1,1,1,1,1,1,1,3,1,118,8,1,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,
        2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,4,2,151,8,2,11,2,12,
        2,152,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,4,4,204,8,4,11,4,12,4,205,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,4,6,259,8,6,11,6,
        12,6,260,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,8,1,8,1,8,4,8,316,8,8,11,8,12,8,317,1,9,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,
        10,1,10,1,10,1,10,1,10,4,10,382,8,10,11,10,12,10,383,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,11,1,
        11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,
        12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,4,12,452,
        8,12,11,12,12,12,453,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,
        1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,4,14,500,8,14,11,14,
        12,14,501,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,
        4,16,541,8,16,11,16,12,16,542,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
        1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,4,18,584,8,18,11,18,12,18,585,1,19,
        1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,4,20,607,8,20,11,20,12,20,608,1,20,3,20,
        612,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,3,20,655,8,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,684,8,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
        713,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,3,20,740,8,20,1,20,1,20,1,20,1,20,3,20,746,8,20,1,20,3,20,749,
        8,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,757,8,20,1,20,1,20,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,4,21,790,8,21,11,21,12,21,791,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,4,23,
        850,8,23,11,23,12,23,851,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,
        1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,4,25,925,
        8,25,11,25,12,25,926,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,1,26,
        1,26,1,26,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
        1,27,4,27,1004,8,27,11,27,12,27,1005,1,28,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,28,1,
        28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,
        29,1,29,1,29,1,29,1,29,1,29,1,29,4,29,1059,8,29,11,29,12,29,1060,
        1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,4,31,1098,8,31,11,31,
        12,31,1099,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,33,
        1,33,1,33,0,0,34,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,
        36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,0,3,1,0,32,34,1,
        0,39,44,1,0,4,5,1144,0,87,1,0,0,0,2,92,1,0,0,0,4,119,1,0,0,0,6,154,
        1,0,0,0,8,168,1,0,0,0,10,207,1,0,0,0,12,223,1,0,0,0,14,262,1,0,0,
        0,16,278,1,0,0,0,18,319,1,0,0,0,20,336,1,0,0,0,22,385,1,0,0,0,24,
        406,1,0,0,0,26,455,1,0,0,0,28,476,1,0,0,0,30,503,1,0,0,0,32,513,
        1,0,0,0,34,544,1,0,0,0,36,556,1,0,0,0,38,587,1,0,0,0,40,599,1,0,
        0,0,42,760,1,0,0,0,44,793,1,0,0,0,46,806,1,0,0,0,48,853,1,0,0,0,
        50,873,1,0,0,0,52,928,1,0,0,0,54,952,1,0,0,0,56,1007,1,0,0,0,58,
        1031,1,0,0,0,60,1062,1,0,0,0,62,1074,1,0,0,0,64,1101,1,0,0,0,66,
        1111,1,0,0,0,68,86,3,2,1,0,69,86,3,4,2,0,70,86,3,8,4,0,71,86,3,12,
        6,0,72,86,3,16,8,0,73,86,3,20,10,0,74,86,3,24,12,0,75,86,3,28,14,
        0,76,86,3,32,16,0,77,86,3,36,18,0,78,86,3,40,20,0,79,86,3,42,21,
        0,80,86,3,46,23,0,81,86,3,50,25,0,82,86,3,54,27,0,83,86,3,58,29,
        0,84,86,3,62,31,0,85,68,1,0,0,0,85,69,1,0,0,0,85,70,1,0,0,0,85,71,
        1,0,0,0,85,72,1,0,0,0,85,73,1,0,0,0,85,74,1,0,0,0,85,75,1,0,0,0,
        85,76,1,0,0,0,85,77,1,0,0,0,85,78,1,0,0,0,85,79,1,0,0,0,85,80,1,
        0,0,0,85,81,1,0,0,0,85,82,1,0,0,0,85,83,1,0,0,0,85,84,1,0,0,0,86,
        89,1,0,0,0,87,85,1,0,0,0,87,88,1,0,0,0,88,90,1,0,0,0,89,87,1,0,0,
        0,90,91,5,0,0,1,91,1,1,0,0,0,92,117,5,1,0,0,93,94,5,14,0,0,94,95,
        5,62,0,0,95,118,5,67,0,0,96,98,5,15,0,0,97,99,5,69,0,0,98,97,1,0,
        0,0,99,100,1,0,0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,102,1,0,0,
        0,102,118,5,71,0,0,103,104,5,16,0,0,104,105,5,65,0,0,105,118,5,67,
        0,0,106,110,5,17,0,0,107,109,5,65,0,0,108,107,1,0,0,0,109,112,1,
        0,0,0,110,108,1,0,0,0,110,111,1,0,0,0,111,113,1,0,0,0,112,110,1,
        0,0,0,113,118,5,67,0,0,114,115,5,18,0,0,115,116,5,62,0,0,116,118,
        5,67,0,0,117,93,1,0,0,0,117,96,1,0,0,0,117,103,1,0,0,0,117,106,1,
        0,0,0,117,114,1,0,0,0,118,3,1,0,0,0,119,120,5,2,0,0,120,121,5,73,
        0,0,121,122,5,74,0,0,122,123,5,76,0,0,123,124,5,77,0,0,124,125,5,
        78,0,0,125,126,5,80,0,0,126,127,5,81,0,0,127,128,5,82,0,0,128,129,
        5,104,0,0,129,130,5,105,0,0,130,131,5,101,0,0,131,132,5,103,0,0,
        132,133,5,102,0,0,133,134,5,120,0,0,134,135,5,3,0,0,135,136,5,122,
        0,0,136,137,5,122,0,0,137,138,5,122,0,0,138,139,5,122,0,0,139,140,
        5,122,0,0,140,141,5,122,0,0,141,142,5,122,0,0,142,143,5,122,0,0,
        143,144,5,122,0,0,144,145,5,122,0,0,145,146,5,122,0,0,146,147,5,
        122,0,0,147,148,5,122,0,0,148,150,5,124,0,0,149,151,3,6,3,0,150,
        149,1,0,0,0,151,152,1,0,0,0,152,150,1,0,0,0,152,153,1,0,0,0,153,
        5,1,0,0,0,154,155,5,4,0,0,155,156,5,4,0,0,156,157,5,4,0,0,157,158,
        5,9,0,0,158,159,5,9,0,0,159,160,5,4,0,0,160,161,5,9,0,0,161,162,
        5,9,0,0,162,163,3,66,33,0,163,164,3,66,33,0,164,165,3,66,33,0,165,
        166,3,66,33,0,166,167,3,66,33,0,167,7,1,0,0,0,168,169,5,2,0,0,169,
        170,5,73,0,0,170,171,5,74,0,0,171,172,5,75,0,0,172,173,5,76,0,0,
        173,174,5,77,0,0,174,175,5,78,0,0,175,176,5,79,0,0,176,177,5,80,
        0,0,177,178,5,81,0,0,178,179,5,82,0,0,179,180,5,104,0,0,180,181,
        5,105,0,0,181,182,5,101,0,0,182,183,5,103,0,0,183,184,5,102,0,0,
        184,185,5,120,0,0,185,186,5,3,0,0,186,187,5,122,0,0,187,188,5,122,
        0,0,188,189,5,122,0,0,189,190,5,122,0,0,190,191,5,122,0,0,191,192,
        5,122,0,0,192,193,5,122,0,0,193,194,5,122,0,0,194,195,5,122,0,0,
        195,196,5,122,0,0,196,197,5,122,0,0,197,198,5,122,0,0,198,199,5,
        122,0,0,199,200,5,122,0,0,200,201,5,122,0,0,201,203,5,124,0,0,202,
        204,3,10,5,0,203,202,1,0,0,0,204,205,1,0,0,0,205,203,1,0,0,0,205,
        206,1,0,0,0,206,9,1,0,0,0,207,208,5,4,0,0,208,209,5,4,0,0,209,210,
        5,9,0,0,210,211,5,4,0,0,211,212,5,9,0,0,212,213,5,9,0,0,213,214,
        5,9,0,0,214,215,5,4,0,0,215,216,5,9,0,0,216,217,5,9,0,0,217,218,
        3,66,33,0,218,219,3,66,33,0,219,220,3,66,33,0,220,221,3,66,33,0,
        221,222,3,66,33,0,222,11,1,0,0,0,223,224,5,2,0,0,224,225,5,73,0,
        0,225,226,5,74,0,0,226,227,5,76,0,0,227,228,5,77,0,0,228,229,5,78,
        0,0,229,230,5,75,0,0,230,231,5,80,0,0,231,232,5,81,0,0,232,233,5,
        82,0,0,233,234,5,79,0,0,234,235,5,104,0,0,235,236,5,105,0,0,236,
        237,5,101,0,0,237,238,5,103,0,0,238,239,5,102,0,0,239,240,5,120,
        0,0,240,241,5,3,0,0,241,242,5,122,0,0,242,243,5,122,0,0,243,244,
        5,122,0,0,244,245,5,122,0,0,245,246,5,122,0,0,246,247,5,122,0,0,
        247,248,5,122,0,0,248,249,5,122,0,0,249,250,5,122,0,0,250,251,5,
        122,0,0,251,252,5,122,0,0,252,253,5,122,0,0,253,254,5,122,0,0,254,
        255,5,122,0,0,255,256,5,122,0,0,256,258,5,124,0,0,257,259,3,14,7,
        0,258,257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,
        0,261,13,1,0,0,0,262,263,5,4,0,0,263,264,5,4,0,0,264,265,5,4,0,0,
        265,266,5,9,0,0,266,267,5,9,0,0,267,268,5,9,0,0,268,269,5,4,0,0,
        269,270,5,9,0,0,270,271,5,9,0,0,271,272,5,9,0,0,272,273,3,66,33,
        0,273,274,3,66,33,0,274,275,3,66,33,0,275,276,3,66,33,0,276,277,
        3,66,33,0,277,15,1,0,0,0,278,279,5,2,0,0,279,280,5,73,0,0,280,281,
        5,76,0,0,281,282,5,77,0,0,282,283,5,78,0,0,283,284,5,80,0,0,284,
        285,5,81,0,0,285,286,5,82,0,0,286,287,5,84,0,0,287,288,5,85,0,0,
        288,289,5,86,0,0,289,290,5,88,0,0,290,291,5,89,0,0,291,292,5,90,
        0,0,292,293,5,106,0,0,293,294,5,107,0,0,294,295,5,101,0,0,295,296,
        5,120,0,0,296,297,5,3,0,0,297,298,5,122,0,0,298,299,5,122,0,0,299,
        300,5,122,0,0,300,301,5,122,0,0,301,302,5,122,0,0,302,303,5,122,
        0,0,303,304,5,122,0,0,304,305,5,122,0,0,305,306,5,122,0,0,306,307,
        5,122,0,0,307,308,5,122,0,0,308,309,5,122,0,0,309,310,5,122,0,0,
        310,311,5,122,0,0,311,312,5,122,0,0,312,313,5,122,0,0,313,315,5,
        124,0,0,314,316,3,18,9,0,315,314,1,0,0,0,316,317,1,0,0,0,317,315,
        1,0,0,0,317,318,1,0,0,0,318,17,1,0,0,0,319,320,5,4,0,0,320,321,5,
        4,0,0,321,322,5,9,0,0,322,323,5,9,0,0,323,324,5,4,0,0,324,325,5,
        9,0,0,325,326,5,9,0,0,326,327,5,4,0,0,327,328,5,9,0,0,328,329,5,
        9,0,0,329,330,5,4,0,0,330,331,5,9,0,0,331,332,5,9,0,0,332,333,3,
        66,33,0,333,334,3,66,33,0,334,335,3,66,33,0,335,19,1,0,0,0,336,337,
        5,2,0,0,337,338,5,73,0,0,338,339,5,75,0,0,339,340,5,76,0,0,340,341,
        5,77,0,0,341,342,5,78,0,0,342,343,5,79,0,0,343,344,5,80,0,0,344,
        345,5,81,0,0,345,346,5,82,0,0,346,347,5,83,0,0,347,348,5,84,0,0,
        348,349,5,85,0,0,349,350,5,86,0,0,350,351,5,87,0,0,351,352,5,88,
        0,0,352,353,5,89,0,0,353,354,5,90,0,0,354,355,5,106,0,0,355,356,
        5,107,0,0,356,357,5,101,0,0,357,358,5,120,0,0,358,359,5,3,0,0,359,
        360,5,122,0,0,360,361,5,122,0,0,361,362,5,122,0,0,362,363,5,122,
        0,0,363,364,5,122,0,0,364,365,5,122,0,0,365,366,5,122,0,0,366,367,
        5,122,0,0,367,368,5,122,0,0,368,369,5,122,0,0,369,370,5,122,0,0,
        370,371,5,122,0,0,371,372,5,122,0,0,372,373,5,122,0,0,373,374,5,
        122,0,0,374,375,5,122,0,0,375,376,5,122,0,0,376,377,5,122,0,0,377,
        378,5,122,0,0,378,379,5,122,0,0,379,381,5,124,0,0,380,382,3,22,11,
        0,381,380,1,0,0,0,382,383,1,0,0,0,383,381,1,0,0,0,383,384,1,0,0,
        0,384,21,1,0,0,0,385,386,5,4,0,0,386,387,5,9,0,0,387,388,5,4,0,0,
        388,389,5,9,0,0,389,390,5,9,0,0,390,391,5,9,0,0,391,392,5,4,0,0,
        392,393,5,9,0,0,393,394,5,9,0,0,394,395,5,9,0,0,395,396,5,4,0,0,
        396,397,5,9,0,0,397,398,5,9,0,0,398,399,5,9,0,0,399,400,5,4,0,0,
        400,401,5,9,0,0,401,402,5,9,0,0,402,403,3,66,33,0,403,404,3,66,33,
        0,404,405,3,66,33,0,405,23,1,0,0,0,406,407,5,2,0,0,407,408,5,73,
        0,0,408,409,5,76,0,0,409,410,5,77,0,0,410,411,5,78,0,0,411,412,5,
        75,0,0,412,413,5,80,0,0,413,414,5,81,0,0,414,415,5,82,0,0,415,416,
        5,79,0,0,416,417,5,84,0,0,417,418,5,85,0,0,418,419,5,86,0,0,419,
        420,5,83,0,0,420,421,5,88,0,0,421,422,5,89,0,0,422,423,5,90,0,0,
        423,424,5,87,0,0,424,425,5,106,0,0,425,426,5,107,0,0,426,427,5,101,
        0,0,427,428,5,120,0,0,428,429,5,3,0,0,429,430,5,122,0,0,430,431,
        5,122,0,0,431,432,5,122,0,0,432,433,5,122,0,0,433,434,5,122,0,0,
        434,435,5,122,0,0,435,436,5,122,0,0,436,437,5,122,0,0,437,438,5,
        122,0,0,438,439,5,122,0,0,439,440,5,122,0,0,440,441,5,122,0,0,441,
        442,5,122,0,0,442,443,5,122,0,0,443,444,5,122,0,0,444,445,5,122,
        0,0,445,446,5,122,0,0,446,447,5,122,0,0,447,448,5,122,0,0,448,449,
        5,122,0,0,449,451,5,124,0,0,450,452,3,26,13,0,451,450,1,0,0,0,452,
        453,1,0,0,0,453,451,1,0,0,0,453,454,1,0,0,0,454,25,1,0,0,0,455,456,
        5,4,0,0,456,457,5,4,0,0,457,458,5,9,0,0,458,459,5,9,0,0,459,460,
        5,9,0,0,460,461,5,4,0,0,461,462,5,9,0,0,462,463,5,9,0,0,463,464,
        5,9,0,0,464,465,5,4,0,0,465,466,5,9,0,0,466,467,5,9,0,0,467,468,
        5,9,0,0,468,469,5,4,0,0,469,470,5,9,0,0,470,471,5,9,0,0,471,472,
        5,9,0,0,472,473,3,66,33,0,473,474,3,66,33,0,474,475,3,66,33,0,475,
        27,1,0,0,0,476,477,5,2,0,0,477,478,5,76,0,0,478,479,5,77,0,0,479,
        480,5,78,0,0,480,481,5,80,0,0,481,482,5,81,0,0,482,483,5,82,0,0,
        483,484,5,96,0,0,484,485,5,97,0,0,485,486,5,103,0,0,486,487,5,120,
        0,0,487,488,5,3,0,0,488,489,5,122,0,0,489,490,5,122,0,0,490,491,
        5,122,0,0,491,492,5,122,0,0,492,493,5,122,0,0,493,494,5,122,0,0,
        494,495,5,122,0,0,495,496,5,122,0,0,496,497,5,122,0,0,497,499,5,
        124,0,0,498,500,3,30,15,0,499,498,1,0,0,0,500,501,1,0,0,0,501,499,
        1,0,0,0,501,502,1,0,0,0,502,29,1,0,0,0,503,504,5,4,0,0,504,505,5,
        9,0,0,505,506,5,9,0,0,506,507,5,4,0,0,507,508,5,9,0,0,508,509,5,
        9,0,0,509,510,3,66,33,0,510,511,3,66,33,0,511,512,3,66,33,0,512,
        31,1,0,0,0,513,514,5,2,0,0,514,515,5,75,0,0,515,516,5,76,0,0,516,
        517,5,77,0,0,517,518,5,78,0,0,518,519,5,79,0,0,519,520,5,80,0,0,
        520,521,5,81,0,0,521,522,5,82,0,0,522,523,5,96,0,0,523,524,5,97,
        0,0,524,525,5,103,0,0,525,526,5,120,0,0,526,527,5,3,0,0,527,528,
        5,122,0,0,528,529,5,122,0,0,529,530,5,122,0,0,530,531,5,122,0,0,
        531,532,5,122,0,0,532,533,5,122,0,0,533,534,5,122,0,0,534,535,5,
        122,0,0,535,536,5,122,0,0,536,537,5,122,0,0,537,538,5,122,0,0,538,
        540,5,124,0,0,539,541,3,34,17,0,540,539,1,0,0,0,541,542,1,0,0,0,
        542,540,1,0,0,0,542,543,1,0,0,0,543,33,1,0,0,0,544,545,5,9,0,0,545,
        546,5,4,0,0,546,547,5,9,0,0,547,548,5,9,0,0,548,549,5,9,0,0,549,
        550,5,4,0,0,550,551,5,9,0,0,551,552,5,9,0,0,552,553,3,66,33,0,553,
        554,3,66,33,0,554,555,3,66,33,0,555,35,1,0,0,0,556,557,5,2,0,0,557,
        558,5,76,0,0,558,559,5,77,0,0,559,560,5,78,0,0,560,561,5,75,0,0,
        561,562,5,80,0,0,562,563,5,81,0,0,563,564,5,82,0,0,564,565,5,79,
        0,0,565,566,5,96,0,0,566,567,5,97,0,0,567,568,5,103,0,0,568,569,
        5,120,0,0,569,570,5,3,0,0,570,571,5,122,0,0,571,572,5,122,0,0,572,
        573,5,122,0,0,573,574,5,122,0,0,574,575,5,122,0,0,575,576,5,122,
        0,0,576,577,5,122,0,0,577,578,5,122,0,0,578,579,5,122,0,0,579,580,
        5,122,0,0,580,581,5,122,0,0,581,583,5,124,0,0,582,584,3,38,19,0,
        583,582,1,0,0,0,584,585,1,0,0,0,585,583,1,0,0,0,585,586,1,0,0,0,
        586,37,1,0,0,0,587,588,5,4,0,0,588,589,5,9,0,0,589,590,5,9,0,0,590,
        591,5,9,0,0,591,592,5,4,0,0,592,593,5,9,0,0,593,594,5,9,0,0,594,
        595,5,9,0,0,595,596,3,66,33,0,596,597,3,66,33,0,597,598,3,66,33,
        0,598,39,1,0,0,0,599,756,5,1,0,0,600,601,5,19,0,0,601,757,5,65,0,
        0,602,603,5,20,0,0,603,611,5,65,0,0,604,606,5,58,0,0,605,607,5,65,
        0,0,606,605,1,0,0,0,607,608,1,0,0,0,608,606,1,0,0,0,608,609,1,0,
        0,0,609,610,1,0,0,0,610,612,5,59,0,0,611,604,1,0,0,0,611,612,1,0,
        0,0,612,757,1,0,0,0,613,614,5,21,0,0,614,615,5,22,0,0,615,616,5,
        58,0,0,616,617,5,65,0,0,617,618,5,59,0,0,618,619,5,22,0,0,619,620,
        5,58,0,0,620,621,5,65,0,0,621,622,5,59,0,0,622,623,5,22,0,0,623,
        624,5,58,0,0,624,625,5,65,0,0,625,626,5,59,0,0,626,627,5,22,0,0,
        627,628,5,58,0,0,628,629,5,65,0,0,629,630,5,59,0,0,630,631,5,22,
        0,0,631,632,5,58,0,0,632,633,5,65,0,0,633,757,5,59,0,0,634,635,5,
        23,0,0,635,636,5,64,0,0,636,637,5,64,0,0,637,638,5,64,0,0,638,639,
        5,64,0,0,639,757,5,64,0,0,640,641,5,24,0,0,641,642,5,65,0,0,642,
        643,5,65,0,0,643,644,5,65,0,0,644,645,5,65,0,0,645,757,5,65,0,0,
        646,654,5,25,0,0,647,648,5,64,0,0,648,649,5,64,0,0,649,650,5,64,
        0,0,650,651,5,64,0,0,651,655,5,64,0,0,652,653,5,26,0,0,653,655,5,
        64,0,0,654,647,1,0,0,0,654,652,1,0,0,0,655,757,1,0,0,0,656,657,5,
        27,0,0,657,658,5,65,0,0,658,659,5,58,0,0,659,660,5,65,0,0,660,661,
        5,59,0,0,661,662,5,65,0,0,662,663,5,58,0,0,663,664,5,65,0,0,664,
        665,5,59,0,0,665,666,5,65,0,0,666,667,5,58,0,0,667,668,5,65,0,0,
        668,669,5,59,0,0,669,670,5,65,0,0,670,671,5,58,0,0,671,672,5,65,
        0,0,672,673,5,59,0,0,673,674,5,65,0,0,674,675,5,58,0,0,675,676,5,
        65,0,0,676,677,5,59,0,0,677,678,5,65,0,0,678,679,5,58,0,0,679,680,
        5,65,0,0,680,757,5,59,0,0,681,683,5,28,0,0,682,684,5,29,0,0,683,
        682,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,686,5,63,0,0,686,
        687,5,63,0,0,687,688,5,63,0,0,688,689,5,63,0,0,689,690,5,63,0,0,
        690,757,5,63,0,0,691,692,5,30,0,0,692,693,5,58,0,0,693,694,5,65,
        0,0,694,695,5,57,0,0,695,696,5,65,0,0,696,697,5,57,0,0,697,698,5,
        65,0,0,698,699,5,59,0,0,699,700,5,64,0,0,700,701,5,64,0,0,701,757,
        5,64,0,0,702,712,5,31,0,0,703,704,5,58,0,0,704,705,5,65,0,0,705,
        706,5,65,0,0,706,707,5,65,0,0,707,713,5,59,0,0,708,709,7,0,0,0,709,
        710,5,64,0,0,710,711,5,64,0,0,711,713,5,64,0,0,712,703,1,0,0,0,712,
        708,1,0,0,0,713,757,1,0,0,0,714,715,5,35,0,0,715,716,5,65,0,0,716,
        717,5,65,0,0,717,757,5,65,0,0,718,719,5,36,0,0,719,720,5,62,0,0,
        720,721,5,63,0,0,721,722,5,63,0,0,722,757,5,63,0,0,723,724,5,37,
        0,0,724,757,5,62,0,0,725,726,5,38,0,0,726,727,5,63,0,0,727,728,5,
        63,0,0,728,757,5,63,0,0,729,730,7,1,0,0,730,757,5,64,0,0,731,732,
        5,45,0,0,732,757,5,62,0,0,733,740,5,46,0,0,734,740,5,47,0,0,735,
        736,5,48,0,0,736,740,5,49,0,0,737,738,5,50,0,0,738,740,5,23,0,0,
        739,733,1,0,0,0,739,734,1,0,0,0,739,735,1,0,0,0,739,737,1,0,0,0,
        740,741,1,0,0,0,741,757,5,63,0,0,742,748,5,51,0,0,743,749,5,52,0,
        0,744,746,5,54,0,0,745,744,1,0,0,0,745,746,1,0,0,0,746,747,1,0,0,
        0,747,749,5,53,0,0,748,743,1,0,0,0,748,745,1,0,0,0,749,750,1,0,0,
        0,750,751,5,63,0,0,751,752,5,55,0,0,752,753,5,63,0,0,753,754,5,60,
        0,0,754,755,5,56,0,0,755,757,5,61,0,0,756,600,1,0,0,0,756,602,1,
        0,0,0,756,613,1,0,0,0,756,634,1,0,0,0,756,640,1,0,0,0,756,646,1,
        0,0,0,756,656,1,0,0,0,756,681,1,0,0,0,756,691,1,0,0,0,756,702,1,
        0,0,0,756,714,1,0,0,0,756,718,1,0,0,0,756,723,1,0,0,0,756,725,1,
        0,0,0,756,729,1,0,0,0,756,731,1,0,0,0,756,739,1,0,0,0,756,742,1,
        0,0,0,757,758,1,0,0,0,758,759,5,67,0,0,759,41,1,0,0,0,760,761,5,
        2,0,0,761,762,5,76,0,0,762,763,5,77,0,0,763,764,5,78,0,0,764,765,
        5,80,0,0,765,766,5,81,0,0,766,767,5,82,0,0,767,768,5,98,0,0,768,
        769,5,100,0,0,769,770,5,96,0,0,770,771,5,99,0,0,771,772,5,97,0,0,
        772,773,5,103,0,0,773,774,5,120,0,0,774,775,5,3,0,0,775,776,5,122,
        0,0,776,777,5,122,0,0,777,778,5,122,0,0,778,779,5,122,0,0,779,780,
        5,122,0,0,780,781,5,122,0,0,781,782,5,122,0,0,782,783,5,122,0,0,
        783,784,5,122,0,0,784,785,5,122,0,0,785,786,5,122,0,0,786,787,5,
        122,0,0,787,789,5,124,0,0,788,790,3,44,22,0,789,788,1,0,0,0,790,
        791,1,0,0,0,791,789,1,0,0,0,791,792,1,0,0,0,792,43,1,0,0,0,793,794,
        5,4,0,0,794,795,5,9,0,0,795,796,5,9,0,0,796,797,5,4,0,0,797,798,
        5,9,0,0,798,799,5,9,0,0,799,800,3,66,33,0,800,801,3,66,33,0,801,
        802,3,66,33,0,802,803,3,66,33,0,803,804,3,66,33,0,804,805,3,66,33,
        0,805,45,1,0,0,0,806,807,5,2,0,0,807,808,5,73,0,0,808,809,5,76,0,
        0,809,810,5,77,0,0,810,811,5,78,0,0,811,812,5,80,0,0,812,813,5,81,
        0,0,813,814,5,82,0,0,814,815,5,84,0,0,815,816,5,85,0,0,816,817,5,
        86,0,0,817,818,5,88,0,0,818,819,5,89,0,0,819,820,5,90,0,0,820,821,
        5,93,0,0,821,822,5,94,0,0,822,823,5,95,0,0,823,824,5,108,0,0,824,
        825,5,109,0,0,825,826,5,101,0,0,826,827,5,120,0,0,827,828,5,3,0,
        0,828,829,5,122,0,0,829,830,5,122,0,0,830,831,5,122,0,0,831,832,
        5,122,0,0,832,833,5,122,0,0,833,834,5,122,0,0,834,835,5,122,0,0,
        835,836,5,122,0,0,836,837,5,122,0,0,837,838,5,122,0,0,838,839,5,
        122,0,0,839,840,5,122,0,0,840,841,5,122,0,0,841,842,5,122,0,0,842,
        843,5,122,0,0,843,844,5,122,0,0,844,845,5,122,0,0,845,846,5,122,
        0,0,846,847,5,122,0,0,847,849,5,124,0,0,848,850,3,48,24,0,849,848,
        1,0,0,0,850,851,1,0,0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,47,1,
        0,0,0,853,854,5,4,0,0,854,855,5,4,0,0,855,856,5,9,0,0,856,857,5,
        9,0,0,857,858,5,4,0,0,858,859,5,9,0,0,859,860,5,9,0,0,860,861,5,
        4,0,0,861,862,5,9,0,0,862,863,5,9,0,0,863,864,5,4,0,0,864,865,5,
        9,0,0,865,866,5,9,0,0,866,867,3,66,33,0,867,868,3,66,33,0,868,869,
        3,66,33,0,869,870,3,66,33,0,870,871,3,66,33,0,871,872,3,66,33,0,
        872,49,1,0,0,0,873,874,5,2,0,0,874,875,5,73,0,0,875,876,5,75,0,0,
        876,877,5,76,0,0,877,878,5,77,0,0,878,879,5,78,0,0,879,880,5,79,
        0,0,880,881,5,80,0,0,881,882,5,81,0,0,882,883,5,82,0,0,883,884,5,
        83,0,0,884,885,5,84,0,0,885,886,5,85,0,0,886,887,5,86,0,0,887,888,
        5,87,0,0,888,889,5,88,0,0,889,890,5,89,0,0,890,891,5,90,0,0,891,
        892,5,93,0,0,892,893,5,94,0,0,893,894,5,95,0,0,894,895,5,108,0,0,
        895,896,5,109,0,0,896,897,5,101,0,0,897,898,5,120,0,0,898,899,5,
        3,0,0,899,900,5,122,0,0,900,901,5,122,0,0,901,902,5,122,0,0,902,
        903,5,122,0,0,903,904,5,122,0,0,904,905,5,122,0,0,905,906,5,122,
        0,0,906,907,5,122,0,0,907,908,5,122,0,0,908,909,5,122,0,0,909,910,
        5,122,0,0,910,911,5,122,0,0,911,912,5,122,0,0,912,913,5,122,0,0,
        913,914,5,122,0,0,914,915,5,122,0,0,915,916,5,122,0,0,916,917,5,
        122,0,0,917,918,5,122,0,0,918,919,5,122,0,0,919,920,5,122,0,0,920,
        921,5,122,0,0,921,922,5,122,0,0,922,924,5,124,0,0,923,925,3,52,26,
        0,924,923,1,0,0,0,925,926,1,0,0,0,926,924,1,0,0,0,926,927,1,0,0,
        0,927,51,1,0,0,0,928,929,5,4,0,0,929,930,5,9,0,0,930,931,5,4,0,0,
        931,932,5,9,0,0,932,933,5,9,0,0,933,934,5,9,0,0,934,935,5,4,0,0,
        935,936,5,9,0,0,936,937,5,9,0,0,937,938,5,9,0,0,938,939,5,4,0,0,
        939,940,5,9,0,0,940,941,5,9,0,0,941,942,5,9,0,0,942,943,5,4,0,0,
        943,944,5,9,0,0,944,945,5,9,0,0,945,946,3,66,33,0,946,947,3,66,33,
        0,947,948,3,66,33,0,948,949,3,66,33,0,949,950,3,66,33,0,950,951,
        3,66,33,0,951,53,1,0,0,0,952,953,5,2,0,0,953,954,5,73,0,0,954,955,
        5,76,0,0,955,956,5,77,0,0,956,957,5,78,0,0,957,958,5,75,0,0,958,
        959,5,80,0,0,959,960,5,81,0,0,960,961,5,82,0,0,961,962,5,79,0,0,
        962,963,5,84,0,0,963,964,5,85,0,0,964,965,5,86,0,0,965,966,5,83,
        0,0,966,967,5,88,0,0,967,968,5,89,0,0,968,969,5,90,0,0,969,970,5,
        87,0,0,970,971,5,93,0,0,971,972,5,94,0,0,972,973,5,95,0,0,973,974,
        5,108,0,0,974,975,5,109,0,0,975,976,5,101,0,0,976,977,5,120,0,0,
        977,978,5,3,0,0,978,979,5,122,0,0,979,980,5,122,0,0,980,981,5,122,
        0,0,981,982,5,122,0,0,982,983,5,122,0,0,983,984,5,122,0,0,984,985,
        5,122,0,0,985,986,5,122,0,0,986,987,5,122,0,0,987,988,5,122,0,0,
        988,989,5,122,0,0,989,990,5,122,0,0,990,991,5,122,0,0,991,992,5,
        122,0,0,992,993,5,122,0,0,993,994,5,122,0,0,994,995,5,122,0,0,995,
        996,5,122,0,0,996,997,5,122,0,0,997,998,5,122,0,0,998,999,5,122,
        0,0,999,1000,5,122,0,0,1000,1001,5,122,0,0,1001,1003,5,124,0,0,1002,
        1004,3,56,28,0,1003,1002,1,0,0,0,1004,1005,1,0,0,0,1005,1003,1,0,
        0,0,1005,1006,1,0,0,0,1006,55,1,0,0,0,1007,1008,5,4,0,0,1008,1009,
        5,4,0,0,1009,1010,5,9,0,0,1010,1011,5,9,0,0,1011,1012,5,9,0,0,1012,
        1013,5,4,0,0,1013,1014,5,9,0,0,1014,1015,5,9,0,0,1015,1016,5,9,0,
        0,1016,1017,5,4,0,0,1017,1018,5,9,0,0,1018,1019,5,9,0,0,1019,1020,
        5,9,0,0,1020,1021,5,4,0,0,1021,1022,5,9,0,0,1022,1023,5,9,0,0,1023,
        1024,5,9,0,0,1024,1025,3,66,33,0,1025,1026,3,66,33,0,1026,1027,3,
        66,33,0,1027,1028,3,66,33,0,1028,1029,3,66,33,0,1029,1030,3,66,33,
        0,1030,57,1,0,0,0,1031,1032,5,2,0,0,1032,1033,5,91,0,0,1033,1034,
        5,92,0,0,1034,1035,5,110,0,0,1035,1036,5,111,0,0,1036,1037,5,112,
        0,0,1037,1038,5,113,0,0,1038,1039,5,114,0,0,1039,1040,5,115,0,0,
        1040,1041,5,116,0,0,1041,1042,5,117,0,0,1042,1043,5,118,0,0,1043,
        1044,5,120,0,0,1044,1045,5,3,0,0,1045,1046,5,122,0,0,1046,1047,5,
        122,0,0,1047,1048,5,122,0,0,1048,1049,5,122,0,0,1049,1050,5,122,
        0,0,1050,1051,5,122,0,0,1051,1052,5,122,0,0,1052,1053,5,122,0,0,
        1053,1054,5,122,0,0,1054,1055,5,122,0,0,1055,1056,5,122,0,0,1056,
        1058,5,124,0,0,1057,1059,3,60,30,0,1058,1057,1,0,0,0,1059,1060,1,
        0,0,0,1060,1058,1,0,0,0,1060,1061,1,0,0,0,1061,59,1,0,0,0,1062,1063,
        5,4,0,0,1063,1064,5,9,0,0,1064,1065,3,66,33,0,1065,1066,3,66,33,
        0,1066,1067,3,66,33,0,1067,1068,3,66,33,0,1068,1069,3,66,33,0,1069,
        1070,3,66,33,0,1070,1071,5,4,0,0,1071,1072,5,4,0,0,1072,1073,5,9,
        0,0,1073,61,1,0,0,0,1074,1075,5,2,0,0,1075,1076,5,91,0,0,1076,1077,
        5,92,0,0,1077,1078,5,110,0,0,1078,1079,5,111,0,0,1079,1080,5,112,
        0,0,1080,1081,5,113,0,0,1081,1082,5,114,0,0,1082,1083,5,116,0,0,
        1083,1084,5,118,0,0,1084,1085,5,120,0,0,1085,1086,5,3,0,0,1086,1087,
        5,122,0,0,1087,1088,5,122,0,0,1088,1089,5,122,0,0,1089,1090,5,122,
        0,0,1090,1091,5,122,0,0,1091,1092,5,122,0,0,1092,1093,5,122,0,0,
        1093,1094,5,122,0,0,1094,1095,5,122,0,0,1095,1097,5,124,0,0,1096,
        1098,3,64,32,0,1097,1096,1,0,0,0,1098,1099,1,0,0,0,1099,1097,1,0,
        0,0,1099,1100,1,0,0,0,1100,63,1,0,0,0,1101,1102,5,4,0,0,1102,1103,
        5,9,0,0,1103,1104,3,66,33,0,1104,1105,3,66,33,0,1105,1106,3,66,33,
        0,1106,1107,3,66,33,0,1107,1108,3,66,33,0,1108,1109,5,4,0,0,1109,
        1110,5,9,0,0,1110,65,1,0,0,0,1111,1112,7,2,0,0,1112,67,1,0,0,0,29,
        85,87,100,110,117,152,205,260,317,383,453,501,542,585,608,611,654,
        683,712,739,745,748,756,791,851,926,1005,1060,1099
    ]

class DynamoMRParser ( Parser ):

    grammarFileName = "DynamoMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'DATA'", "'VARS'", "'FORMAT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'FIRST_RESID'", "'SEQUENCE'", "'DB_NAME'", 
                     "'TAB_NAME'", "'TAB_ID'", "'PALES_MODE'", "'TENSOR_MODE'", 
                     "'SAUPE_MATRIX'", "'S'", "'SAUPE'", "'IRREDUCIBLE_REP'", 
                     "'IRREDUCIBLE'", "'GENERAL_MAGNITUDE'", "'MAPPING_COOR'", 
                     "'MAPPING'", "'INV'", "'EIGENVALUES'", "'EIGENVECTORS'", 
                     "'X_AXIS'", "'Y_AXIS'", "'Z_AXIS'", "'Q_EULER_SOLUTIONS'", 
                     "'Q_EULER_ANGLES'", "'EULER_SOLUTIONS'", "'EULER_ANGLES'", 
                     "'Da'", "'Dr'", "'Aa'", "'Ar'", "'Da_HN'", "'Rhombicity'", 
                     "'N'", "'RMS'", "'Chi2'", "'CORR'", "'R'", "'Q'", "'REGRESSION'", 
                     "'OFFSET'", "'SLOPE'", "'BAX'", "'+/-'", "'Hz'", "','", 
                     "'('", "')'", "'['", "']'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'INDEX'", "'GROUP'", "'SEGNAME_I'", "'RESID_I'", 
                     "'RESNAME_I'", "'ATOMNAME_I'", "'SEGNAME_J'", "'RESID_J'", 
                     "'RESNAME_J'", "'ATOMNAME_J'", "'SEGNAME_K'", "'RESID_K'", 
                     "'RESNAME_K'", "'ATOMNAME_K'", "'SEGNAME_L'", "'RESID_L'", 
                     "'RESNAME_L'", "'ATOMNAME_L'", "'RESID'", "'RESNAME'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'D_LO'", "'D_HI'", 
                     "'ANGLE_LO'", "'ANGLE_HI'", "'PHASE'", "'OBSJ'", "'PHI'", 
                     "'PSI'", "'DPHI'", "'DPSI'", "'DIST'", "'S2'", "'COUNT'", 
                     "'CS_COUNT'", "'CLASS'" ]

    symbolicNames = [ "<INVALID>", "Data", "Vars", "Format", "Integer", 
                      "Float", "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", 
                      "Simple_name", "SPACE", "ENCLOSE_COMMENT", "SECTION_COMMENT", 
                      "LINE_COMMENT", "First_resid", "Sequence", "Db_name", 
                      "Tab_name", "Tab_id", "Pales_mode", "Tensor_mode", 
                      "Saupe_matrix", "S_DA", "Saupe", "Irreducible_rep", 
                      "Irreducible", "General_magnitude", "Mapping_corr", 
                      "Mapping", "Inv", "Eigenvalues", "Eigenvectors", "X_axis", 
                      "Y_axis", "Z_axis", "Q_euler_solutions", "Q_euler_angles", 
                      "Euler_solutions", "Euler_angles", "Da", "Dr", "Aa", 
                      "Ar", "Da_hn", "Rhombicity", "N", "Rms", "Chi2", "Corr", 
                      "R", "Q", "Regression", "Offset", "Slope", "Bax", 
                      "Plus_minus", "Hz", "Comma_DA", "L_paren_DA", "R_paren_DA", 
                      "L_brkt_DA", "R_brkt_DA", "Integer_DA", "Float_DA", 
                      "Real_DA", "Simple_name_DA", "SPACE_DA", "RETURN_DA", 
                      "LINE_COMMENT_DA", "One_letter_code", "SPACE_SQ", 
                      "RETURN_SQ", "LINE_COMMENT_SQ", "Index", "Group", 
                      "Segname_I", "Resid_I", "Resname_I", "Atomname_I", 
                      "Segname_J", "Resid_J", "Resname_J", "Atomname_J", 
                      "Segname_K", "Resid_K", "Resname_K", "Atomname_K", 
                      "Segname_L", "Resid_L", "Resname_L", "Atomname_L", 
                      "Resid", "Resname", "A", "B", "C", "D", "DD", "DI", 
                      "D_diff", "D_obs", "FC", "S", "W", "D_Lo", "D_Hi", 
                      "Angle_Lo", "Angle_Hi", "Phase", "ObsJ", "Phi", "Psi", 
                      "Dphi", "Dpsi", "Dist", "S2", "Count", "Cs_count", 
                      "Class", "SPACE_VA", "RETURN_VA", "LINE_COMMENT_VA", 
                      "Format_code", "SPACE_FO", "RETURN_FO", "LINE_COMMENT_FO" ]

    RULE_dynamo_mr = 0
    RULE_sequence = 1
    RULE_distance_restraints = 2
    RULE_distance_restraint = 3
    RULE_distance_restraints_sw_segid = 4
    RULE_distance_restraint_sw_segid = 5
    RULE_distance_restraints_ew_segid = 6
    RULE_distance_restraint_ew_segid = 7
    RULE_torsion_angle_restraints = 8
    RULE_torsion_angle_restraint = 9
    RULE_torsion_angle_restraints_sw_segid = 10
    RULE_torsion_angle_restraint_sw_segid = 11
    RULE_torsion_angle_restraints_ew_segid = 12
    RULE_torsion_angle_restraint_ew_segid = 13
    RULE_rdc_restraints = 14
    RULE_rdc_restraint = 15
    RULE_rdc_restraints_sw_segid = 16
    RULE_rdc_restraint_sw_segid = 17
    RULE_rdc_restraints_ew_segid = 18
    RULE_rdc_restraint_ew_segid = 19
    RULE_pales_meta_outputs = 20
    RULE_pales_rdc_outputs = 21
    RULE_pales_rdc_output = 22
    RULE_coupling_restraints = 23
    RULE_coupling_restraint = 24
    RULE_coupling_restraints_sw_segid = 25
    RULE_coupling_restraint_sw_segid = 26
    RULE_coupling_restraints_ew_segid = 27
    RULE_coupling_restraint_ew_segid = 28
    RULE_talos_restraints = 29
    RULE_talos_restraint = 30
    RULE_talos_restraints_wo_s2 = 31
    RULE_talos_restraint_wo_s2 = 32
    RULE_number = 33

    ruleNames =  [ "dynamo_mr", "sequence", "distance_restraints", "distance_restraint", 
                   "distance_restraints_sw_segid", "distance_restraint_sw_segid", 
                   "distance_restraints_ew_segid", "distance_restraint_ew_segid", 
                   "torsion_angle_restraints", "torsion_angle_restraint", 
                   "torsion_angle_restraints_sw_segid", "torsion_angle_restraint_sw_segid", 
                   "torsion_angle_restraints_ew_segid", "torsion_angle_restraint_ew_segid", 
                   "rdc_restraints", "rdc_restraint", "rdc_restraints_sw_segid", 
                   "rdc_restraint_sw_segid", "rdc_restraints_ew_segid", 
                   "rdc_restraint_ew_segid", "pales_meta_outputs", "pales_rdc_outputs", 
                   "pales_rdc_output", "coupling_restraints", "coupling_restraint", 
                   "coupling_restraints_sw_segid", "coupling_restraint_sw_segid", 
                   "coupling_restraints_ew_segid", "coupling_restraint_ew_segid", 
                   "talos_restraints", "talos_restraint", "talos_restraints_wo_s2", 
                   "talos_restraint_wo_s2", "number" ]

    EOF = Token.EOF
    Data=1
    Vars=2
    Format=3
    Integer=4
    Float=5
    SHARP_COMMENT=6
    EXCLM_COMMENT=7
    SMCLN_COMMENT=8
    Simple_name=9
    SPACE=10
    ENCLOSE_COMMENT=11
    SECTION_COMMENT=12
    LINE_COMMENT=13
    First_resid=14
    Sequence=15
    Db_name=16
    Tab_name=17
    Tab_id=18
    Pales_mode=19
    Tensor_mode=20
    Saupe_matrix=21
    S_DA=22
    Saupe=23
    Irreducible_rep=24
    Irreducible=25
    General_magnitude=26
    Mapping_corr=27
    Mapping=28
    Inv=29
    Eigenvalues=30
    Eigenvectors=31
    X_axis=32
    Y_axis=33
    Z_axis=34
    Q_euler_solutions=35
    Q_euler_angles=36
    Euler_solutions=37
    Euler_angles=38
    Da=39
    Dr=40
    Aa=41
    Ar=42
    Da_hn=43
    Rhombicity=44
    N=45
    Rms=46
    Chi2=47
    Corr=48
    R=49
    Q=50
    Regression=51
    Offset=52
    Slope=53
    Bax=54
    Plus_minus=55
    Hz=56
    Comma_DA=57
    L_paren_DA=58
    R_paren_DA=59
    L_brkt_DA=60
    R_brkt_DA=61
    Integer_DA=62
    Float_DA=63
    Real_DA=64
    Simple_name_DA=65
    SPACE_DA=66
    RETURN_DA=67
    LINE_COMMENT_DA=68
    One_letter_code=69
    SPACE_SQ=70
    RETURN_SQ=71
    LINE_COMMENT_SQ=72
    Index=73
    Group=74
    Segname_I=75
    Resid_I=76
    Resname_I=77
    Atomname_I=78
    Segname_J=79
    Resid_J=80
    Resname_J=81
    Atomname_J=82
    Segname_K=83
    Resid_K=84
    Resname_K=85
    Atomname_K=86
    Segname_L=87
    Resid_L=88
    Resname_L=89
    Atomname_L=90
    Resid=91
    Resname=92
    A=93
    B=94
    C=95
    D=96
    DD=97
    DI=98
    D_diff=99
    D_obs=100
    FC=101
    S=102
    W=103
    D_Lo=104
    D_Hi=105
    Angle_Lo=106
    Angle_Hi=107
    Phase=108
    ObsJ=109
    Phi=110
    Psi=111
    Dphi=112
    Dpsi=113
    Dist=114
    S2=115
    Count=116
    Cs_count=117
    Class=118
    SPACE_VA=119
    RETURN_VA=120
    LINE_COMMENT_VA=121
    Format_code=122
    SPACE_FO=123
    RETURN_FO=124
    LINE_COMMENT_FO=125

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Dynamo_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(DynamoMRParser.EOF, 0)

        def sequence(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.SequenceContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.SequenceContext,i)


        def distance_restraints(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Distance_restraintsContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Distance_restraintsContext,i)


        def distance_restraints_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Distance_restraints_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Distance_restraints_sw_segidContext,i)


        def distance_restraints_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Distance_restraints_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Distance_restraints_ew_segidContext,i)


        def torsion_angle_restraints(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Torsion_angle_restraintsContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Torsion_angle_restraintsContext,i)


        def torsion_angle_restraints_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Torsion_angle_restraints_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Torsion_angle_restraints_sw_segidContext,i)


        def torsion_angle_restraints_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Torsion_angle_restraints_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Torsion_angle_restraints_ew_segidContext,i)


        def rdc_restraints(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Rdc_restraintsContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Rdc_restraintsContext,i)


        def rdc_restraints_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Rdc_restraints_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Rdc_restraints_sw_segidContext,i)


        def rdc_restraints_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Rdc_restraints_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Rdc_restraints_ew_segidContext,i)


        def pales_meta_outputs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Pales_meta_outputsContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Pales_meta_outputsContext,i)


        def pales_rdc_outputs(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Pales_rdc_outputsContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Pales_rdc_outputsContext,i)


        def coupling_restraints(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Coupling_restraintsContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Coupling_restraintsContext,i)


        def coupling_restraints_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Coupling_restraints_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Coupling_restraints_sw_segidContext,i)


        def coupling_restraints_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Coupling_restraints_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Coupling_restraints_ew_segidContext,i)


        def talos_restraints(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Talos_restraintsContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Talos_restraintsContext,i)


        def talos_restraints_wo_s2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Talos_restraints_wo_s2Context)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Talos_restraints_wo_s2Context,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_dynamo_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamo_mr" ):
                listener.enterDynamo_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamo_mr" ):
                listener.exitDynamo_mr(self)




    def dynamo_mr(self):

        localctx = DynamoMRParser.Dynamo_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_dynamo_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 87
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1 or _la==2:
                self.state = 85
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 68
                    self.sequence()
                    pass

                elif la_ == 2:
                    self.state = 69
                    self.distance_restraints()
                    pass

                elif la_ == 3:
                    self.state = 70
                    self.distance_restraints_sw_segid()
                    pass

                elif la_ == 4:
                    self.state = 71
                    self.distance_restraints_ew_segid()
                    pass

                elif la_ == 5:
                    self.state = 72
                    self.torsion_angle_restraints()
                    pass

                elif la_ == 6:
                    self.state = 73
                    self.torsion_angle_restraints_sw_segid()
                    pass

                elif la_ == 7:
                    self.state = 74
                    self.torsion_angle_restraints_ew_segid()
                    pass

                elif la_ == 8:
                    self.state = 75
                    self.rdc_restraints()
                    pass

                elif la_ == 9:
                    self.state = 76
                    self.rdc_restraints_sw_segid()
                    pass

                elif la_ == 10:
                    self.state = 77
                    self.rdc_restraints_ew_segid()
                    pass

                elif la_ == 11:
                    self.state = 78
                    self.pales_meta_outputs()
                    pass

                elif la_ == 12:
                    self.state = 79
                    self.pales_rdc_outputs()
                    pass

                elif la_ == 13:
                    self.state = 80
                    self.coupling_restraints()
                    pass

                elif la_ == 14:
                    self.state = 81
                    self.coupling_restraints_sw_segid()
                    pass

                elif la_ == 15:
                    self.state = 82
                    self.coupling_restraints_ew_segid()
                    pass

                elif la_ == 16:
                    self.state = 83
                    self.talos_restraints()
                    pass

                elif la_ == 17:
                    self.state = 84
                    self.talos_restraints_wo_s2()
                    pass


                self.state = 89
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 90
            self.match(DynamoMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SequenceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Data(self):
            return self.getToken(DynamoMRParser.Data, 0)

        def First_resid(self):
            return self.getToken(DynamoMRParser.First_resid, 0)

        def Integer_DA(self):
            return self.getToken(DynamoMRParser.Integer_DA, 0)

        def RETURN_DA(self):
            return self.getToken(DynamoMRParser.RETURN_DA, 0)

        def Sequence(self):
            return self.getToken(DynamoMRParser.Sequence, 0)

        def RETURN_SQ(self):
            return self.getToken(DynamoMRParser.RETURN_SQ, 0)

        def Db_name(self):
            return self.getToken(DynamoMRParser.Db_name, 0)

        def Simple_name_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name_DA)
            else:
                return self.getToken(DynamoMRParser.Simple_name_DA, i)

        def Tab_name(self):
            return self.getToken(DynamoMRParser.Tab_name, 0)

        def Tab_id(self):
            return self.getToken(DynamoMRParser.Tab_id, 0)

        def One_letter_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.One_letter_code)
            else:
                return self.getToken(DynamoMRParser.One_letter_code, i)

        def getRuleIndex(self):
            return DynamoMRParser.RULE_sequence

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSequence" ):
                listener.enterSequence(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSequence" ):
                listener.exitSequence(self)




    def sequence(self):

        localctx = DynamoMRParser.SequenceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sequence)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 92
            self.match(DynamoMRParser.Data)
            self.state = 117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14]:
                self.state = 93
                self.match(DynamoMRParser.First_resid)
                self.state = 94
                self.match(DynamoMRParser.Integer_DA)
                self.state = 95
                self.match(DynamoMRParser.RETURN_DA)
                pass
            elif token in [15]:
                self.state = 96
                self.match(DynamoMRParser.Sequence)
                self.state = 98 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 97
                    self.match(DynamoMRParser.One_letter_code)
                    self.state = 100 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==69):
                        break

                self.state = 102
                self.match(DynamoMRParser.RETURN_SQ)
                pass
            elif token in [16]:
                self.state = 103
                self.match(DynamoMRParser.Db_name)
                self.state = 104
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 105
                self.match(DynamoMRParser.RETURN_DA)
                pass
            elif token in [17]:
                self.state = 106
                self.match(DynamoMRParser.Tab_name)
                self.state = 110
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==65:
                    self.state = 107
                    self.match(DynamoMRParser.Simple_name_DA)
                    self.state = 112
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 113
                self.match(DynamoMRParser.RETURN_DA)
                pass
            elif token in [18]:
                self.state = 114
                self.match(DynamoMRParser.Tab_id)
                self.state = 115
                self.match(DynamoMRParser.Integer_DA)
                self.state = 116
                self.match(DynamoMRParser.RETURN_DA)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Group(self):
            return self.getToken(DynamoMRParser.Group, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def D_Lo(self):
            return self.getToken(DynamoMRParser.D_Lo, 0)

        def D_Hi(self):
            return self.getToken(DynamoMRParser.D_Hi, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def W(self):
            return self.getToken(DynamoMRParser.W, 0)

        def S(self):
            return self.getToken(DynamoMRParser.S, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Distance_restraintContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_distance_restraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraints" ):
                listener.enterDistance_restraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraints" ):
                listener.exitDistance_restraints(self)




    def distance_restraints(self):

        localctx = DynamoMRParser.Distance_restraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_distance_restraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 119
            self.match(DynamoMRParser.Vars)
            self.state = 120
            self.match(DynamoMRParser.Index)
            self.state = 121
            self.match(DynamoMRParser.Group)
            self.state = 122
            self.match(DynamoMRParser.Resid_I)
            self.state = 123
            self.match(DynamoMRParser.Resname_I)
            self.state = 124
            self.match(DynamoMRParser.Atomname_I)
            self.state = 125
            self.match(DynamoMRParser.Resid_J)
            self.state = 126
            self.match(DynamoMRParser.Resname_J)
            self.state = 127
            self.match(DynamoMRParser.Atomname_J)
            self.state = 128
            self.match(DynamoMRParser.D_Lo)
            self.state = 129
            self.match(DynamoMRParser.D_Hi)
            self.state = 130
            self.match(DynamoMRParser.FC)
            self.state = 131
            self.match(DynamoMRParser.W)
            self.state = 132
            self.match(DynamoMRParser.S)
            self.state = 133
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 134
            self.match(DynamoMRParser.Format)
            self.state = 135
            self.match(DynamoMRParser.Format_code)
            self.state = 136
            self.match(DynamoMRParser.Format_code)
            self.state = 137
            self.match(DynamoMRParser.Format_code)
            self.state = 138
            self.match(DynamoMRParser.Format_code)
            self.state = 139
            self.match(DynamoMRParser.Format_code)
            self.state = 140
            self.match(DynamoMRParser.Format_code)
            self.state = 141
            self.match(DynamoMRParser.Format_code)
            self.state = 142
            self.match(DynamoMRParser.Format_code)
            self.state = 143
            self.match(DynamoMRParser.Format_code)
            self.state = 144
            self.match(DynamoMRParser.Format_code)
            self.state = 145
            self.match(DynamoMRParser.Format_code)
            self.state = 146
            self.match(DynamoMRParser.Format_code)
            self.state = 147
            self.match(DynamoMRParser.Format_code)
            self.state = 148
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 150 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 149
                self.distance_restraint()
                self.state = 152 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==4):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = DynamoMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 154
            self.match(DynamoMRParser.Integer)
            self.state = 155
            self.match(DynamoMRParser.Integer)
            self.state = 156
            self.match(DynamoMRParser.Integer)
            self.state = 157
            self.match(DynamoMRParser.Simple_name)
            self.state = 158
            self.match(DynamoMRParser.Simple_name)
            self.state = 159
            self.match(DynamoMRParser.Integer)
            self.state = 160
            self.match(DynamoMRParser.Simple_name)
            self.state = 161
            self.match(DynamoMRParser.Simple_name)
            self.state = 162
            self.number()
            self.state = 163
            self.number()
            self.state = 164
            self.number()
            self.state = 165
            self.number()
            self.state = 166
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraints_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Group(self):
            return self.getToken(DynamoMRParser.Group, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def D_Lo(self):
            return self.getToken(DynamoMRParser.D_Lo, 0)

        def D_Hi(self):
            return self.getToken(DynamoMRParser.D_Hi, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def W(self):
            return self.getToken(DynamoMRParser.W, 0)

        def S(self):
            return self.getToken(DynamoMRParser.S, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def distance_restraint_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Distance_restraint_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Distance_restraint_sw_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_distance_restraints_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraints_sw_segid" ):
                listener.enterDistance_restraints_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraints_sw_segid" ):
                listener.exitDistance_restraints_sw_segid(self)




    def distance_restraints_sw_segid(self):

        localctx = DynamoMRParser.Distance_restraints_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_distance_restraints_sw_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 168
            self.match(DynamoMRParser.Vars)
            self.state = 169
            self.match(DynamoMRParser.Index)
            self.state = 170
            self.match(DynamoMRParser.Group)
            self.state = 171
            self.match(DynamoMRParser.Segname_I)
            self.state = 172
            self.match(DynamoMRParser.Resid_I)
            self.state = 173
            self.match(DynamoMRParser.Resname_I)
            self.state = 174
            self.match(DynamoMRParser.Atomname_I)
            self.state = 175
            self.match(DynamoMRParser.Segname_J)
            self.state = 176
            self.match(DynamoMRParser.Resid_J)
            self.state = 177
            self.match(DynamoMRParser.Resname_J)
            self.state = 178
            self.match(DynamoMRParser.Atomname_J)
            self.state = 179
            self.match(DynamoMRParser.D_Lo)
            self.state = 180
            self.match(DynamoMRParser.D_Hi)
            self.state = 181
            self.match(DynamoMRParser.FC)
            self.state = 182
            self.match(DynamoMRParser.W)
            self.state = 183
            self.match(DynamoMRParser.S)
            self.state = 184
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 185
            self.match(DynamoMRParser.Format)
            self.state = 186
            self.match(DynamoMRParser.Format_code)
            self.state = 187
            self.match(DynamoMRParser.Format_code)
            self.state = 188
            self.match(DynamoMRParser.Format_code)
            self.state = 189
            self.match(DynamoMRParser.Format_code)
            self.state = 190
            self.match(DynamoMRParser.Format_code)
            self.state = 191
            self.match(DynamoMRParser.Format_code)
            self.state = 192
            self.match(DynamoMRParser.Format_code)
            self.state = 193
            self.match(DynamoMRParser.Format_code)
            self.state = 194
            self.match(DynamoMRParser.Format_code)
            self.state = 195
            self.match(DynamoMRParser.Format_code)
            self.state = 196
            self.match(DynamoMRParser.Format_code)
            self.state = 197
            self.match(DynamoMRParser.Format_code)
            self.state = 198
            self.match(DynamoMRParser.Format_code)
            self.state = 199
            self.match(DynamoMRParser.Format_code)
            self.state = 200
            self.match(DynamoMRParser.Format_code)
            self.state = 201
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 203 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 202
                self.distance_restraint_sw_segid()
                self.state = 205 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==4):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraint_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_distance_restraint_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint_sw_segid" ):
                listener.enterDistance_restraint_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint_sw_segid" ):
                listener.exitDistance_restraint_sw_segid(self)




    def distance_restraint_sw_segid(self):

        localctx = DynamoMRParser.Distance_restraint_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_distance_restraint_sw_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 207
            self.match(DynamoMRParser.Integer)
            self.state = 208
            self.match(DynamoMRParser.Integer)
            self.state = 209
            self.match(DynamoMRParser.Simple_name)
            self.state = 210
            self.match(DynamoMRParser.Integer)
            self.state = 211
            self.match(DynamoMRParser.Simple_name)
            self.state = 212
            self.match(DynamoMRParser.Simple_name)
            self.state = 213
            self.match(DynamoMRParser.Simple_name)
            self.state = 214
            self.match(DynamoMRParser.Integer)
            self.state = 215
            self.match(DynamoMRParser.Simple_name)
            self.state = 216
            self.match(DynamoMRParser.Simple_name)
            self.state = 217
            self.number()
            self.state = 218
            self.number()
            self.state = 219
            self.number()
            self.state = 220
            self.number()
            self.state = 221
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraints_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Group(self):
            return self.getToken(DynamoMRParser.Group, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def D_Lo(self):
            return self.getToken(DynamoMRParser.D_Lo, 0)

        def D_Hi(self):
            return self.getToken(DynamoMRParser.D_Hi, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def W(self):
            return self.getToken(DynamoMRParser.W, 0)

        def S(self):
            return self.getToken(DynamoMRParser.S, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def distance_restraint_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Distance_restraint_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Distance_restraint_ew_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_distance_restraints_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraints_ew_segid" ):
                listener.enterDistance_restraints_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraints_ew_segid" ):
                listener.exitDistance_restraints_ew_segid(self)




    def distance_restraints_ew_segid(self):

        localctx = DynamoMRParser.Distance_restraints_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_distance_restraints_ew_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 223
            self.match(DynamoMRParser.Vars)
            self.state = 224
            self.match(DynamoMRParser.Index)
            self.state = 225
            self.match(DynamoMRParser.Group)
            self.state = 226
            self.match(DynamoMRParser.Resid_I)
            self.state = 227
            self.match(DynamoMRParser.Resname_I)
            self.state = 228
            self.match(DynamoMRParser.Atomname_I)
            self.state = 229
            self.match(DynamoMRParser.Segname_I)
            self.state = 230
            self.match(DynamoMRParser.Resid_J)
            self.state = 231
            self.match(DynamoMRParser.Resname_J)
            self.state = 232
            self.match(DynamoMRParser.Atomname_J)
            self.state = 233
            self.match(DynamoMRParser.Segname_J)
            self.state = 234
            self.match(DynamoMRParser.D_Lo)
            self.state = 235
            self.match(DynamoMRParser.D_Hi)
            self.state = 236
            self.match(DynamoMRParser.FC)
            self.state = 237
            self.match(DynamoMRParser.W)
            self.state = 238
            self.match(DynamoMRParser.S)
            self.state = 239
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 240
            self.match(DynamoMRParser.Format)
            self.state = 241
            self.match(DynamoMRParser.Format_code)
            self.state = 242
            self.match(DynamoMRParser.Format_code)
            self.state = 243
            self.match(DynamoMRParser.Format_code)
            self.state = 244
            self.match(DynamoMRParser.Format_code)
            self.state = 245
            self.match(DynamoMRParser.Format_code)
            self.state = 246
            self.match(DynamoMRParser.Format_code)
            self.state = 247
            self.match(DynamoMRParser.Format_code)
            self.state = 248
            self.match(DynamoMRParser.Format_code)
            self.state = 249
            self.match(DynamoMRParser.Format_code)
            self.state = 250
            self.match(DynamoMRParser.Format_code)
            self.state = 251
            self.match(DynamoMRParser.Format_code)
            self.state = 252
            self.match(DynamoMRParser.Format_code)
            self.state = 253
            self.match(DynamoMRParser.Format_code)
            self.state = 254
            self.match(DynamoMRParser.Format_code)
            self.state = 255
            self.match(DynamoMRParser.Format_code)
            self.state = 256
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 258 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 257
                self.distance_restraint_ew_segid()
                self.state = 260 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==4):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraint_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_distance_restraint_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint_ew_segid" ):
                listener.enterDistance_restraint_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint_ew_segid" ):
                listener.exitDistance_restraint_ew_segid(self)




    def distance_restraint_ew_segid(self):

        localctx = DynamoMRParser.Distance_restraint_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_distance_restraint_ew_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self.match(DynamoMRParser.Integer)
            self.state = 263
            self.match(DynamoMRParser.Integer)
            self.state = 264
            self.match(DynamoMRParser.Integer)
            self.state = 265
            self.match(DynamoMRParser.Simple_name)
            self.state = 266
            self.match(DynamoMRParser.Simple_name)
            self.state = 267
            self.match(DynamoMRParser.Simple_name)
            self.state = 268
            self.match(DynamoMRParser.Integer)
            self.state = 269
            self.match(DynamoMRParser.Simple_name)
            self.state = 270
            self.match(DynamoMRParser.Simple_name)
            self.state = 271
            self.match(DynamoMRParser.Simple_name)
            self.state = 272
            self.number()
            self.state = 273
            self.number()
            self.state = 274
            self.number()
            self.state = 275
            self.number()
            self.state = 276
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_angle_restraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Resid_K(self):
            return self.getToken(DynamoMRParser.Resid_K, 0)

        def Resname_K(self):
            return self.getToken(DynamoMRParser.Resname_K, 0)

        def Atomname_K(self):
            return self.getToken(DynamoMRParser.Atomname_K, 0)

        def Resid_L(self):
            return self.getToken(DynamoMRParser.Resid_L, 0)

        def Resname_L(self):
            return self.getToken(DynamoMRParser.Resname_L, 0)

        def Atomname_L(self):
            return self.getToken(DynamoMRParser.Atomname_L, 0)

        def Angle_Lo(self):
            return self.getToken(DynamoMRParser.Angle_Lo, 0)

        def Angle_Hi(self):
            return self.getToken(DynamoMRParser.Angle_Hi, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def torsion_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Torsion_angle_restraintContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Torsion_angle_restraintContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_torsion_angle_restraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_angle_restraints" ):
                listener.enterTorsion_angle_restraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_angle_restraints" ):
                listener.exitTorsion_angle_restraints(self)




    def torsion_angle_restraints(self):

        localctx = DynamoMRParser.Torsion_angle_restraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_torsion_angle_restraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(DynamoMRParser.Vars)
            self.state = 279
            self.match(DynamoMRParser.Index)
            self.state = 280
            self.match(DynamoMRParser.Resid_I)
            self.state = 281
            self.match(DynamoMRParser.Resname_I)
            self.state = 282
            self.match(DynamoMRParser.Atomname_I)
            self.state = 283
            self.match(DynamoMRParser.Resid_J)
            self.state = 284
            self.match(DynamoMRParser.Resname_J)
            self.state = 285
            self.match(DynamoMRParser.Atomname_J)
            self.state = 286
            self.match(DynamoMRParser.Resid_K)
            self.state = 287
            self.match(DynamoMRParser.Resname_K)
            self.state = 288
            self.match(DynamoMRParser.Atomname_K)
            self.state = 289
            self.match(DynamoMRParser.Resid_L)
            self.state = 290
            self.match(DynamoMRParser.Resname_L)
            self.state = 291
            self.match(DynamoMRParser.Atomname_L)
            self.state = 292
            self.match(DynamoMRParser.Angle_Lo)
            self.state = 293
            self.match(DynamoMRParser.Angle_Hi)
            self.state = 294
            self.match(DynamoMRParser.FC)
            self.state = 295
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 296
            self.match(DynamoMRParser.Format)
            self.state = 297
            self.match(DynamoMRParser.Format_code)
            self.state = 298
            self.match(DynamoMRParser.Format_code)
            self.state = 299
            self.match(DynamoMRParser.Format_code)
            self.state = 300
            self.match(DynamoMRParser.Format_code)
            self.state = 301
            self.match(DynamoMRParser.Format_code)
            self.state = 302
            self.match(DynamoMRParser.Format_code)
            self.state = 303
            self.match(DynamoMRParser.Format_code)
            self.state = 304
            self.match(DynamoMRParser.Format_code)
            self.state = 305
            self.match(DynamoMRParser.Format_code)
            self.state = 306
            self.match(DynamoMRParser.Format_code)
            self.state = 307
            self.match(DynamoMRParser.Format_code)
            self.state = 308
            self.match(DynamoMRParser.Format_code)
            self.state = 309
            self.match(DynamoMRParser.Format_code)
            self.state = 310
            self.match(DynamoMRParser.Format_code)
            self.state = 311
            self.match(DynamoMRParser.Format_code)
            self.state = 312
            self.match(DynamoMRParser.Format_code)
            self.state = 313
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 315 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 314
                self.torsion_angle_restraint()
                self.state = 317 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==4):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_torsion_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_angle_restraint" ):
                listener.enterTorsion_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_angle_restraint" ):
                listener.exitTorsion_angle_restraint(self)




    def torsion_angle_restraint(self):

        localctx = DynamoMRParser.Torsion_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_torsion_angle_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(DynamoMRParser.Integer)
            self.state = 320
            self.match(DynamoMRParser.Integer)
            self.state = 321
            self.match(DynamoMRParser.Simple_name)
            self.state = 322
            self.match(DynamoMRParser.Simple_name)
            self.state = 323
            self.match(DynamoMRParser.Integer)
            self.state = 324
            self.match(DynamoMRParser.Simple_name)
            self.state = 325
            self.match(DynamoMRParser.Simple_name)
            self.state = 326
            self.match(DynamoMRParser.Integer)
            self.state = 327
            self.match(DynamoMRParser.Simple_name)
            self.state = 328
            self.match(DynamoMRParser.Simple_name)
            self.state = 329
            self.match(DynamoMRParser.Integer)
            self.state = 330
            self.match(DynamoMRParser.Simple_name)
            self.state = 331
            self.match(DynamoMRParser.Simple_name)
            self.state = 332
            self.number()
            self.state = 333
            self.number()
            self.state = 334
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_angle_restraints_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Segname_K(self):
            return self.getToken(DynamoMRParser.Segname_K, 0)

        def Resid_K(self):
            return self.getToken(DynamoMRParser.Resid_K, 0)

        def Resname_K(self):
            return self.getToken(DynamoMRParser.Resname_K, 0)

        def Atomname_K(self):
            return self.getToken(DynamoMRParser.Atomname_K, 0)

        def Segname_L(self):
            return self.getToken(DynamoMRParser.Segname_L, 0)

        def Resid_L(self):
            return self.getToken(DynamoMRParser.Resid_L, 0)

        def Resname_L(self):
            return self.getToken(DynamoMRParser.Resname_L, 0)

        def Atomname_L(self):
            return self.getToken(DynamoMRParser.Atomname_L, 0)

        def Angle_Lo(self):
            return self.getToken(DynamoMRParser.Angle_Lo, 0)

        def Angle_Hi(self):
            return self.getToken(DynamoMRParser.Angle_Hi, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def torsion_angle_restraint_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Torsion_angle_restraint_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Torsion_angle_restraint_sw_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_torsion_angle_restraints_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_angle_restraints_sw_segid" ):
                listener.enterTorsion_angle_restraints_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_angle_restraints_sw_segid" ):
                listener.exitTorsion_angle_restraints_sw_segid(self)




    def torsion_angle_restraints_sw_segid(self):

        localctx = DynamoMRParser.Torsion_angle_restraints_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_torsion_angle_restraints_sw_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(DynamoMRParser.Vars)
            self.state = 337
            self.match(DynamoMRParser.Index)
            self.state = 338
            self.match(DynamoMRParser.Segname_I)
            self.state = 339
            self.match(DynamoMRParser.Resid_I)
            self.state = 340
            self.match(DynamoMRParser.Resname_I)
            self.state = 341
            self.match(DynamoMRParser.Atomname_I)
            self.state = 342
            self.match(DynamoMRParser.Segname_J)
            self.state = 343
            self.match(DynamoMRParser.Resid_J)
            self.state = 344
            self.match(DynamoMRParser.Resname_J)
            self.state = 345
            self.match(DynamoMRParser.Atomname_J)
            self.state = 346
            self.match(DynamoMRParser.Segname_K)
            self.state = 347
            self.match(DynamoMRParser.Resid_K)
            self.state = 348
            self.match(DynamoMRParser.Resname_K)
            self.state = 349
            self.match(DynamoMRParser.Atomname_K)
            self.state = 350
            self.match(DynamoMRParser.Segname_L)
            self.state = 351
            self.match(DynamoMRParser.Resid_L)
            self.state = 352
            self.match(DynamoMRParser.Resname_L)
            self.state = 353
            self.match(DynamoMRParser.Atomname_L)
            self.state = 354
            self.match(DynamoMRParser.Angle_Lo)
            self.state = 355
            self.match(DynamoMRParser.Angle_Hi)
            self.state = 356
            self.match(DynamoMRParser.FC)
            self.state = 357
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 358
            self.match(DynamoMRParser.Format)
            self.state = 359
            self.match(DynamoMRParser.Format_code)
            self.state = 360
            self.match(DynamoMRParser.Format_code)
            self.state = 361
            self.match(DynamoMRParser.Format_code)
            self.state = 362
            self.match(DynamoMRParser.Format_code)
            self.state = 363
            self.match(DynamoMRParser.Format_code)
            self.state = 364
            self.match(DynamoMRParser.Format_code)
            self.state = 365
            self.match(DynamoMRParser.Format_code)
            self.state = 366
            self.match(DynamoMRParser.Format_code)
            self.state = 367
            self.match(DynamoMRParser.Format_code)
            self.state = 368
            self.match(DynamoMRParser.Format_code)
            self.state = 369
            self.match(DynamoMRParser.Format_code)
            self.state = 370
            self.match(DynamoMRParser.Format_code)
            self.state = 371
            self.match(DynamoMRParser.Format_code)
            self.state = 372
            self.match(DynamoMRParser.Format_code)
            self.state = 373
            self.match(DynamoMRParser.Format_code)
            self.state = 374
            self.match(DynamoMRParser.Format_code)
            self.state = 375
            self.match(DynamoMRParser.Format_code)
            self.state = 376
            self.match(DynamoMRParser.Format_code)
            self.state = 377
            self.match(DynamoMRParser.Format_code)
            self.state = 378
            self.match(DynamoMRParser.Format_code)
            self.state = 379
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 381 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 380
                self.torsion_angle_restraint_sw_segid()
                self.state = 383 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==4):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_angle_restraint_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_torsion_angle_restraint_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_angle_restraint_sw_segid" ):
                listener.enterTorsion_angle_restraint_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_angle_restraint_sw_segid" ):
                listener.exitTorsion_angle_restraint_sw_segid(self)




    def torsion_angle_restraint_sw_segid(self):

        localctx = DynamoMRParser.Torsion_angle_restraint_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_torsion_angle_restraint_sw_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 385
            self.match(DynamoMRParser.Integer)
            self.state = 386
            self.match(DynamoMRParser.Simple_name)
            self.state = 387
            self.match(DynamoMRParser.Integer)
            self.state = 388
            self.match(DynamoMRParser.Simple_name)
            self.state = 389
            self.match(DynamoMRParser.Simple_name)
            self.state = 390
            self.match(DynamoMRParser.Simple_name)
            self.state = 391
            self.match(DynamoMRParser.Integer)
            self.state = 392
            self.match(DynamoMRParser.Simple_name)
            self.state = 393
            self.match(DynamoMRParser.Simple_name)
            self.state = 394
            self.match(DynamoMRParser.Simple_name)
            self.state = 395
            self.match(DynamoMRParser.Integer)
            self.state = 396
            self.match(DynamoMRParser.Simple_name)
            self.state = 397
            self.match(DynamoMRParser.Simple_name)
            self.state = 398
            self.match(DynamoMRParser.Simple_name)
            self.state = 399
            self.match(DynamoMRParser.Integer)
            self.state = 400
            self.match(DynamoMRParser.Simple_name)
            self.state = 401
            self.match(DynamoMRParser.Simple_name)
            self.state = 402
            self.number()
            self.state = 403
            self.number()
            self.state = 404
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_angle_restraints_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def Resid_K(self):
            return self.getToken(DynamoMRParser.Resid_K, 0)

        def Resname_K(self):
            return self.getToken(DynamoMRParser.Resname_K, 0)

        def Atomname_K(self):
            return self.getToken(DynamoMRParser.Atomname_K, 0)

        def Segname_K(self):
            return self.getToken(DynamoMRParser.Segname_K, 0)

        def Resid_L(self):
            return self.getToken(DynamoMRParser.Resid_L, 0)

        def Resname_L(self):
            return self.getToken(DynamoMRParser.Resname_L, 0)

        def Atomname_L(self):
            return self.getToken(DynamoMRParser.Atomname_L, 0)

        def Segname_L(self):
            return self.getToken(DynamoMRParser.Segname_L, 0)

        def Angle_Lo(self):
            return self.getToken(DynamoMRParser.Angle_Lo, 0)

        def Angle_Hi(self):
            return self.getToken(DynamoMRParser.Angle_Hi, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def torsion_angle_restraint_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Torsion_angle_restraint_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Torsion_angle_restraint_ew_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_torsion_angle_restraints_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_angle_restraints_ew_segid" ):
                listener.enterTorsion_angle_restraints_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_angle_restraints_ew_segid" ):
                listener.exitTorsion_angle_restraints_ew_segid(self)




    def torsion_angle_restraints_ew_segid(self):

        localctx = DynamoMRParser.Torsion_angle_restraints_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_torsion_angle_restraints_ew_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(DynamoMRParser.Vars)
            self.state = 407
            self.match(DynamoMRParser.Index)
            self.state = 408
            self.match(DynamoMRParser.Resid_I)
            self.state = 409
            self.match(DynamoMRParser.Resname_I)
            self.state = 410
            self.match(DynamoMRParser.Atomname_I)
            self.state = 411
            self.match(DynamoMRParser.Segname_I)
            self.state = 412
            self.match(DynamoMRParser.Resid_J)
            self.state = 413
            self.match(DynamoMRParser.Resname_J)
            self.state = 414
            self.match(DynamoMRParser.Atomname_J)
            self.state = 415
            self.match(DynamoMRParser.Segname_J)
            self.state = 416
            self.match(DynamoMRParser.Resid_K)
            self.state = 417
            self.match(DynamoMRParser.Resname_K)
            self.state = 418
            self.match(DynamoMRParser.Atomname_K)
            self.state = 419
            self.match(DynamoMRParser.Segname_K)
            self.state = 420
            self.match(DynamoMRParser.Resid_L)
            self.state = 421
            self.match(DynamoMRParser.Resname_L)
            self.state = 422
            self.match(DynamoMRParser.Atomname_L)
            self.state = 423
            self.match(DynamoMRParser.Segname_L)
            self.state = 424
            self.match(DynamoMRParser.Angle_Lo)
            self.state = 425
            self.match(DynamoMRParser.Angle_Hi)
            self.state = 426
            self.match(DynamoMRParser.FC)
            self.state = 427
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 428
            self.match(DynamoMRParser.Format)
            self.state = 429
            self.match(DynamoMRParser.Format_code)
            self.state = 430
            self.match(DynamoMRParser.Format_code)
            self.state = 431
            self.match(DynamoMRParser.Format_code)
            self.state = 432
            self.match(DynamoMRParser.Format_code)
            self.state = 433
            self.match(DynamoMRParser.Format_code)
            self.state = 434
            self.match(DynamoMRParser.Format_code)
            self.state = 435
            self.match(DynamoMRParser.Format_code)
            self.state = 436
            self.match(DynamoMRParser.Format_code)
            self.state = 437
            self.match(DynamoMRParser.Format_code)
            self.state = 438
            self.match(DynamoMRParser.Format_code)
            self.state = 439
            self.match(DynamoMRParser.Format_code)
            self.state = 440
            self.match(DynamoMRParser.Format_code)
            self.state = 441
            self.match(DynamoMRParser.Format_code)
            self.state = 442
            self.match(DynamoMRParser.Format_code)
            self.state = 443
            self.match(DynamoMRParser.Format_code)
            self.state = 444
            self.match(DynamoMRParser.Format_code)
            self.state = 445
            self.match(DynamoMRParser.Format_code)
            self.state = 446
            self.match(DynamoMRParser.Format_code)
            self.state = 447
            self.match(DynamoMRParser.Format_code)
            self.state = 448
            self.match(DynamoMRParser.Format_code)
            self.state = 449
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 451 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 450
                self.torsion_angle_restraint_ew_segid()
                self.state = 453 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==4):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Torsion_angle_restraint_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_torsion_angle_restraint_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTorsion_angle_restraint_ew_segid" ):
                listener.enterTorsion_angle_restraint_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTorsion_angle_restraint_ew_segid" ):
                listener.exitTorsion_angle_restraint_ew_segid(self)




    def torsion_angle_restraint_ew_segid(self):

        localctx = DynamoMRParser.Torsion_angle_restraint_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_torsion_angle_restraint_ew_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 455
            self.match(DynamoMRParser.Integer)
            self.state = 456
            self.match(DynamoMRParser.Integer)
            self.state = 457
            self.match(DynamoMRParser.Simple_name)
            self.state = 458
            self.match(DynamoMRParser.Simple_name)
            self.state = 459
            self.match(DynamoMRParser.Simple_name)
            self.state = 460
            self.match(DynamoMRParser.Integer)
            self.state = 461
            self.match(DynamoMRParser.Simple_name)
            self.state = 462
            self.match(DynamoMRParser.Simple_name)
            self.state = 463
            self.match(DynamoMRParser.Simple_name)
            self.state = 464
            self.match(DynamoMRParser.Integer)
            self.state = 465
            self.match(DynamoMRParser.Simple_name)
            self.state = 466
            self.match(DynamoMRParser.Simple_name)
            self.state = 467
            self.match(DynamoMRParser.Simple_name)
            self.state = 468
            self.match(DynamoMRParser.Integer)
            self.state = 469
            self.match(DynamoMRParser.Simple_name)
            self.state = 470
            self.match(DynamoMRParser.Simple_name)
            self.state = 471
            self.match(DynamoMRParser.Simple_name)
            self.state = 472
            self.number()
            self.state = 473
            self.number()
            self.state = 474
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def D(self):
            return self.getToken(DynamoMRParser.D, 0)

        def DD(self):
            return self.getToken(DynamoMRParser.DD, 0)

        def W(self):
            return self.getToken(DynamoMRParser.W, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Rdc_restraintContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_rdc_restraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraints" ):
                listener.enterRdc_restraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraints" ):
                listener.exitRdc_restraints(self)




    def rdc_restraints(self):

        localctx = DynamoMRParser.Rdc_restraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_rdc_restraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(DynamoMRParser.Vars)
            self.state = 477
            self.match(DynamoMRParser.Resid_I)
            self.state = 478
            self.match(DynamoMRParser.Resname_I)
            self.state = 479
            self.match(DynamoMRParser.Atomname_I)
            self.state = 480
            self.match(DynamoMRParser.Resid_J)
            self.state = 481
            self.match(DynamoMRParser.Resname_J)
            self.state = 482
            self.match(DynamoMRParser.Atomname_J)
            self.state = 483
            self.match(DynamoMRParser.D)
            self.state = 484
            self.match(DynamoMRParser.DD)
            self.state = 485
            self.match(DynamoMRParser.W)
            self.state = 486
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 487
            self.match(DynamoMRParser.Format)
            self.state = 488
            self.match(DynamoMRParser.Format_code)
            self.state = 489
            self.match(DynamoMRParser.Format_code)
            self.state = 490
            self.match(DynamoMRParser.Format_code)
            self.state = 491
            self.match(DynamoMRParser.Format_code)
            self.state = 492
            self.match(DynamoMRParser.Format_code)
            self.state = 493
            self.match(DynamoMRParser.Format_code)
            self.state = 494
            self.match(DynamoMRParser.Format_code)
            self.state = 495
            self.match(DynamoMRParser.Format_code)
            self.state = 496
            self.match(DynamoMRParser.Format_code)
            self.state = 497
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 499 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 498
                self.rdc_restraint()
                self.state = 501 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==4):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = DynamoMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_rdc_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 503
            self.match(DynamoMRParser.Integer)
            self.state = 504
            self.match(DynamoMRParser.Simple_name)
            self.state = 505
            self.match(DynamoMRParser.Simple_name)
            self.state = 506
            self.match(DynamoMRParser.Integer)
            self.state = 507
            self.match(DynamoMRParser.Simple_name)
            self.state = 508
            self.match(DynamoMRParser.Simple_name)
            self.state = 509
            self.number()
            self.state = 510
            self.number()
            self.state = 511
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraints_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def D(self):
            return self.getToken(DynamoMRParser.D, 0)

        def DD(self):
            return self.getToken(DynamoMRParser.DD, 0)

        def W(self):
            return self.getToken(DynamoMRParser.W, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def rdc_restraint_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Rdc_restraint_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Rdc_restraint_sw_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_rdc_restraints_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraints_sw_segid" ):
                listener.enterRdc_restraints_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraints_sw_segid" ):
                listener.exitRdc_restraints_sw_segid(self)




    def rdc_restraints_sw_segid(self):

        localctx = DynamoMRParser.Rdc_restraints_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_rdc_restraints_sw_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 513
            self.match(DynamoMRParser.Vars)
            self.state = 514
            self.match(DynamoMRParser.Segname_I)
            self.state = 515
            self.match(DynamoMRParser.Resid_I)
            self.state = 516
            self.match(DynamoMRParser.Resname_I)
            self.state = 517
            self.match(DynamoMRParser.Atomname_I)
            self.state = 518
            self.match(DynamoMRParser.Segname_J)
            self.state = 519
            self.match(DynamoMRParser.Resid_J)
            self.state = 520
            self.match(DynamoMRParser.Resname_J)
            self.state = 521
            self.match(DynamoMRParser.Atomname_J)
            self.state = 522
            self.match(DynamoMRParser.D)
            self.state = 523
            self.match(DynamoMRParser.DD)
            self.state = 524
            self.match(DynamoMRParser.W)
            self.state = 525
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 526
            self.match(DynamoMRParser.Format)
            self.state = 527
            self.match(DynamoMRParser.Format_code)
            self.state = 528
            self.match(DynamoMRParser.Format_code)
            self.state = 529
            self.match(DynamoMRParser.Format_code)
            self.state = 530
            self.match(DynamoMRParser.Format_code)
            self.state = 531
            self.match(DynamoMRParser.Format_code)
            self.state = 532
            self.match(DynamoMRParser.Format_code)
            self.state = 533
            self.match(DynamoMRParser.Format_code)
            self.state = 534
            self.match(DynamoMRParser.Format_code)
            self.state = 535
            self.match(DynamoMRParser.Format_code)
            self.state = 536
            self.match(DynamoMRParser.Format_code)
            self.state = 537
            self.match(DynamoMRParser.Format_code)
            self.state = 538
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 540 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 539
                self.rdc_restraint_sw_segid()
                self.state = 542 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==9):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraint_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_rdc_restraint_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint_sw_segid" ):
                listener.enterRdc_restraint_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint_sw_segid" ):
                listener.exitRdc_restraint_sw_segid(self)




    def rdc_restraint_sw_segid(self):

        localctx = DynamoMRParser.Rdc_restraint_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_rdc_restraint_sw_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 544
            self.match(DynamoMRParser.Simple_name)
            self.state = 545
            self.match(DynamoMRParser.Integer)
            self.state = 546
            self.match(DynamoMRParser.Simple_name)
            self.state = 547
            self.match(DynamoMRParser.Simple_name)
            self.state = 548
            self.match(DynamoMRParser.Simple_name)
            self.state = 549
            self.match(DynamoMRParser.Integer)
            self.state = 550
            self.match(DynamoMRParser.Simple_name)
            self.state = 551
            self.match(DynamoMRParser.Simple_name)
            self.state = 552
            self.number()
            self.state = 553
            self.number()
            self.state = 554
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraints_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def D(self):
            return self.getToken(DynamoMRParser.D, 0)

        def DD(self):
            return self.getToken(DynamoMRParser.DD, 0)

        def W(self):
            return self.getToken(DynamoMRParser.W, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def rdc_restraint_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Rdc_restraint_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Rdc_restraint_ew_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_rdc_restraints_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraints_ew_segid" ):
                listener.enterRdc_restraints_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraints_ew_segid" ):
                listener.exitRdc_restraints_ew_segid(self)




    def rdc_restraints_ew_segid(self):

        localctx = DynamoMRParser.Rdc_restraints_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_rdc_restraints_ew_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 556
            self.match(DynamoMRParser.Vars)
            self.state = 557
            self.match(DynamoMRParser.Resid_I)
            self.state = 558
            self.match(DynamoMRParser.Resname_I)
            self.state = 559
            self.match(DynamoMRParser.Atomname_I)
            self.state = 560
            self.match(DynamoMRParser.Segname_I)
            self.state = 561
            self.match(DynamoMRParser.Resid_J)
            self.state = 562
            self.match(DynamoMRParser.Resname_J)
            self.state = 563
            self.match(DynamoMRParser.Atomname_J)
            self.state = 564
            self.match(DynamoMRParser.Segname_J)
            self.state = 565
            self.match(DynamoMRParser.D)
            self.state = 566
            self.match(DynamoMRParser.DD)
            self.state = 567
            self.match(DynamoMRParser.W)
            self.state = 568
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 569
            self.match(DynamoMRParser.Format)
            self.state = 570
            self.match(DynamoMRParser.Format_code)
            self.state = 571
            self.match(DynamoMRParser.Format_code)
            self.state = 572
            self.match(DynamoMRParser.Format_code)
            self.state = 573
            self.match(DynamoMRParser.Format_code)
            self.state = 574
            self.match(DynamoMRParser.Format_code)
            self.state = 575
            self.match(DynamoMRParser.Format_code)
            self.state = 576
            self.match(DynamoMRParser.Format_code)
            self.state = 577
            self.match(DynamoMRParser.Format_code)
            self.state = 578
            self.match(DynamoMRParser.Format_code)
            self.state = 579
            self.match(DynamoMRParser.Format_code)
            self.state = 580
            self.match(DynamoMRParser.Format_code)
            self.state = 581
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 583 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 582
                self.rdc_restraint_ew_segid()
                self.state = 585 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==4):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraint_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_rdc_restraint_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint_ew_segid" ):
                listener.enterRdc_restraint_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint_ew_segid" ):
                listener.exitRdc_restraint_ew_segid(self)




    def rdc_restraint_ew_segid(self):

        localctx = DynamoMRParser.Rdc_restraint_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_rdc_restraint_ew_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 587
            self.match(DynamoMRParser.Integer)
            self.state = 588
            self.match(DynamoMRParser.Simple_name)
            self.state = 589
            self.match(DynamoMRParser.Simple_name)
            self.state = 590
            self.match(DynamoMRParser.Simple_name)
            self.state = 591
            self.match(DynamoMRParser.Integer)
            self.state = 592
            self.match(DynamoMRParser.Simple_name)
            self.state = 593
            self.match(DynamoMRParser.Simple_name)
            self.state = 594
            self.match(DynamoMRParser.Simple_name)
            self.state = 595
            self.number()
            self.state = 596
            self.number()
            self.state = 597
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pales_meta_outputsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Data(self):
            return self.getToken(DynamoMRParser.Data, 0)

        def RETURN_DA(self):
            return self.getToken(DynamoMRParser.RETURN_DA, 0)

        def Pales_mode(self):
            return self.getToken(DynamoMRParser.Pales_mode, 0)

        def Simple_name_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name_DA)
            else:
                return self.getToken(DynamoMRParser.Simple_name_DA, i)

        def Tensor_mode(self):
            return self.getToken(DynamoMRParser.Tensor_mode, 0)

        def Saupe_matrix(self):
            return self.getToken(DynamoMRParser.Saupe_matrix, 0)

        def S_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.S_DA)
            else:
                return self.getToken(DynamoMRParser.S_DA, i)

        def L_paren_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.L_paren_DA)
            else:
                return self.getToken(DynamoMRParser.L_paren_DA, i)

        def R_paren_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.R_paren_DA)
            else:
                return self.getToken(DynamoMRParser.R_paren_DA, i)

        def Saupe(self):
            return self.getToken(DynamoMRParser.Saupe, 0)

        def Real_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Real_DA)
            else:
                return self.getToken(DynamoMRParser.Real_DA, i)

        def Irreducible_rep(self):
            return self.getToken(DynamoMRParser.Irreducible_rep, 0)

        def Irreducible(self):
            return self.getToken(DynamoMRParser.Irreducible, 0)

        def Mapping_corr(self):
            return self.getToken(DynamoMRParser.Mapping_corr, 0)

        def Mapping(self):
            return self.getToken(DynamoMRParser.Mapping, 0)

        def Float_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Float_DA)
            else:
                return self.getToken(DynamoMRParser.Float_DA, i)

        def Eigenvalues(self):
            return self.getToken(DynamoMRParser.Eigenvalues, 0)

        def Comma_DA(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Comma_DA)
            else:
                return self.getToken(DynamoMRParser.Comma_DA, i)

        def Eigenvectors(self):
            return self.getToken(DynamoMRParser.Eigenvectors, 0)

        def Q_euler_solutions(self):
            return self.getToken(DynamoMRParser.Q_euler_solutions, 0)

        def Q_euler_angles(self):
            return self.getToken(DynamoMRParser.Q_euler_angles, 0)

        def Integer_DA(self):
            return self.getToken(DynamoMRParser.Integer_DA, 0)

        def Euler_solutions(self):
            return self.getToken(DynamoMRParser.Euler_solutions, 0)

        def Euler_angles(self):
            return self.getToken(DynamoMRParser.Euler_angles, 0)

        def N(self):
            return self.getToken(DynamoMRParser.N, 0)

        def Regression(self):
            return self.getToken(DynamoMRParser.Regression, 0)

        def Plus_minus(self):
            return self.getToken(DynamoMRParser.Plus_minus, 0)

        def L_brkt_DA(self):
            return self.getToken(DynamoMRParser.L_brkt_DA, 0)

        def Hz(self):
            return self.getToken(DynamoMRParser.Hz, 0)

        def R_brkt_DA(self):
            return self.getToken(DynamoMRParser.R_brkt_DA, 0)

        def Da(self):
            return self.getToken(DynamoMRParser.Da, 0)

        def Dr(self):
            return self.getToken(DynamoMRParser.Dr, 0)

        def Aa(self):
            return self.getToken(DynamoMRParser.Aa, 0)

        def Ar(self):
            return self.getToken(DynamoMRParser.Ar, 0)

        def Da_hn(self):
            return self.getToken(DynamoMRParser.Da_hn, 0)

        def Rhombicity(self):
            return self.getToken(DynamoMRParser.Rhombicity, 0)

        def General_magnitude(self):
            return self.getToken(DynamoMRParser.General_magnitude, 0)

        def Rms(self):
            return self.getToken(DynamoMRParser.Rms, 0)

        def Chi2(self):
            return self.getToken(DynamoMRParser.Chi2, 0)

        def Corr(self):
            return self.getToken(DynamoMRParser.Corr, 0)

        def R(self):
            return self.getToken(DynamoMRParser.R, 0)

        def Q(self):
            return self.getToken(DynamoMRParser.Q, 0)

        def Offset(self):
            return self.getToken(DynamoMRParser.Offset, 0)

        def Slope(self):
            return self.getToken(DynamoMRParser.Slope, 0)

        def Inv(self):
            return self.getToken(DynamoMRParser.Inv, 0)

        def X_axis(self):
            return self.getToken(DynamoMRParser.X_axis, 0)

        def Y_axis(self):
            return self.getToken(DynamoMRParser.Y_axis, 0)

        def Z_axis(self):
            return self.getToken(DynamoMRParser.Z_axis, 0)

        def Bax(self):
            return self.getToken(DynamoMRParser.Bax, 0)

        def getRuleIndex(self):
            return DynamoMRParser.RULE_pales_meta_outputs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPales_meta_outputs" ):
                listener.enterPales_meta_outputs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPales_meta_outputs" ):
                listener.exitPales_meta_outputs(self)




    def pales_meta_outputs(self):

        localctx = DynamoMRParser.Pales_meta_outputsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_pales_meta_outputs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 599
            self.match(DynamoMRParser.Data)
            self.state = 756
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [19]:
                self.state = 600
                self.match(DynamoMRParser.Pales_mode)
                self.state = 601
                self.match(DynamoMRParser.Simple_name_DA)
                pass
            elif token in [20]:
                self.state = 602
                self.match(DynamoMRParser.Tensor_mode)
                self.state = 603
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 604
                    self.match(DynamoMRParser.L_paren_DA)
                    self.state = 606 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 605
                        self.match(DynamoMRParser.Simple_name_DA)
                        self.state = 608 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==65):
                            break

                    self.state = 610
                    self.match(DynamoMRParser.R_paren_DA)


                pass
            elif token in [21]:
                self.state = 613
                self.match(DynamoMRParser.Saupe_matrix)
                self.state = 614
                self.match(DynamoMRParser.S_DA)
                self.state = 615
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 616
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 617
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 618
                self.match(DynamoMRParser.S_DA)
                self.state = 619
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 620
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 621
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 622
                self.match(DynamoMRParser.S_DA)
                self.state = 623
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 624
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 625
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 626
                self.match(DynamoMRParser.S_DA)
                self.state = 627
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 628
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 629
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 630
                self.match(DynamoMRParser.S_DA)
                self.state = 631
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 632
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 633
                self.match(DynamoMRParser.R_paren_DA)
                pass
            elif token in [23]:
                self.state = 634
                self.match(DynamoMRParser.Saupe)
                self.state = 635
                self.match(DynamoMRParser.Real_DA)
                self.state = 636
                self.match(DynamoMRParser.Real_DA)
                self.state = 637
                self.match(DynamoMRParser.Real_DA)
                self.state = 638
                self.match(DynamoMRParser.Real_DA)
                self.state = 639
                self.match(DynamoMRParser.Real_DA)
                pass
            elif token in [24]:
                self.state = 640
                self.match(DynamoMRParser.Irreducible_rep)
                self.state = 641
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 642
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 643
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 644
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 645
                self.match(DynamoMRParser.Simple_name_DA)
                pass
            elif token in [25]:
                self.state = 646
                self.match(DynamoMRParser.Irreducible)
                self.state = 654
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [64]:
                    self.state = 647
                    self.match(DynamoMRParser.Real_DA)
                    self.state = 648
                    self.match(DynamoMRParser.Real_DA)
                    self.state = 649
                    self.match(DynamoMRParser.Real_DA)
                    self.state = 650
                    self.match(DynamoMRParser.Real_DA)
                    self.state = 651
                    self.match(DynamoMRParser.Real_DA)
                    pass
                elif token in [26]:
                    self.state = 652
                    self.match(DynamoMRParser.General_magnitude)
                    self.state = 653
                    self.match(DynamoMRParser.Real_DA)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [27]:
                self.state = 656
                self.match(DynamoMRParser.Mapping_corr)
                self.state = 657
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 658
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 659
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 660
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 661
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 662
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 663
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 664
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 665
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 666
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 667
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 668
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 669
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 670
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 671
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 672
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 673
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 674
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 675
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 676
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 677
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 678
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 679
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 680
                self.match(DynamoMRParser.R_paren_DA)
                pass
            elif token in [28]:
                self.state = 681
                self.match(DynamoMRParser.Mapping)
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==29:
                    self.state = 682
                    self.match(DynamoMRParser.Inv)


                self.state = 685
                self.match(DynamoMRParser.Float_DA)
                self.state = 686
                self.match(DynamoMRParser.Float_DA)
                self.state = 687
                self.match(DynamoMRParser.Float_DA)
                self.state = 688
                self.match(DynamoMRParser.Float_DA)
                self.state = 689
                self.match(DynamoMRParser.Float_DA)
                self.state = 690
                self.match(DynamoMRParser.Float_DA)
                pass
            elif token in [30]:
                self.state = 691
                self.match(DynamoMRParser.Eigenvalues)
                self.state = 692
                self.match(DynamoMRParser.L_paren_DA)
                self.state = 693
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 694
                self.match(DynamoMRParser.Comma_DA)
                self.state = 695
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 696
                self.match(DynamoMRParser.Comma_DA)
                self.state = 697
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 698
                self.match(DynamoMRParser.R_paren_DA)
                self.state = 699
                self.match(DynamoMRParser.Real_DA)
                self.state = 700
                self.match(DynamoMRParser.Real_DA)
                self.state = 701
                self.match(DynamoMRParser.Real_DA)
                pass
            elif token in [31]:
                self.state = 702
                self.match(DynamoMRParser.Eigenvectors)
                self.state = 712
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [58]:
                    self.state = 703
                    self.match(DynamoMRParser.L_paren_DA)
                    self.state = 704
                    self.match(DynamoMRParser.Simple_name_DA)
                    self.state = 705
                    self.match(DynamoMRParser.Simple_name_DA)
                    self.state = 706
                    self.match(DynamoMRParser.Simple_name_DA)
                    self.state = 707
                    self.match(DynamoMRParser.R_paren_DA)
                    pass
                elif token in [32, 33, 34]:
                    self.state = 708
                    _la = self._input.LA(1)
                    if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 30064771072) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 709
                    self.match(DynamoMRParser.Real_DA)
                    self.state = 710
                    self.match(DynamoMRParser.Real_DA)
                    self.state = 711
                    self.match(DynamoMRParser.Real_DA)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [35]:
                self.state = 714
                self.match(DynamoMRParser.Q_euler_solutions)
                self.state = 715
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 716
                self.match(DynamoMRParser.Simple_name_DA)
                self.state = 717
                self.match(DynamoMRParser.Simple_name_DA)
                pass
            elif token in [36]:
                self.state = 718
                self.match(DynamoMRParser.Q_euler_angles)
                self.state = 719
                self.match(DynamoMRParser.Integer_DA)
                self.state = 720
                self.match(DynamoMRParser.Float_DA)
                self.state = 721
                self.match(DynamoMRParser.Float_DA)
                self.state = 722
                self.match(DynamoMRParser.Float_DA)
                pass
            elif token in [37]:
                self.state = 723
                self.match(DynamoMRParser.Euler_solutions)
                self.state = 724
                self.match(DynamoMRParser.Integer_DA)
                pass
            elif token in [38]:
                self.state = 725
                self.match(DynamoMRParser.Euler_angles)
                self.state = 726
                self.match(DynamoMRParser.Float_DA)
                self.state = 727
                self.match(DynamoMRParser.Float_DA)
                self.state = 728
                self.match(DynamoMRParser.Float_DA)
                pass
            elif token in [39, 40, 41, 42, 43, 44]:
                self.state = 729
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 34634616274944) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 730
                self.match(DynamoMRParser.Real_DA)
                pass
            elif token in [45]:
                self.state = 731
                self.match(DynamoMRParser.N)
                self.state = 732
                self.match(DynamoMRParser.Integer_DA)
                pass
            elif token in [46, 47, 48, 50]:
                self.state = 739
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [46]:
                    self.state = 733
                    self.match(DynamoMRParser.Rms)
                    pass
                elif token in [47]:
                    self.state = 734
                    self.match(DynamoMRParser.Chi2)
                    pass
                elif token in [48]:
                    self.state = 735
                    self.match(DynamoMRParser.Corr)
                    self.state = 736
                    self.match(DynamoMRParser.R)
                    pass
                elif token in [50]:
                    self.state = 737
                    self.match(DynamoMRParser.Q)
                    self.state = 738
                    self.match(DynamoMRParser.Saupe)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 741
                self.match(DynamoMRParser.Float_DA)
                pass
            elif token in [51]:
                self.state = 742
                self.match(DynamoMRParser.Regression)
                self.state = 748
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [52]:
                    self.state = 743
                    self.match(DynamoMRParser.Offset)
                    pass
                elif token in [53, 54]:
                    self.state = 745
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==54:
                        self.state = 744
                        self.match(DynamoMRParser.Bax)


                    self.state = 747
                    self.match(DynamoMRParser.Slope)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 750
                self.match(DynamoMRParser.Float_DA)
                self.state = 751
                self.match(DynamoMRParser.Plus_minus)
                self.state = 752
                self.match(DynamoMRParser.Float_DA)
                self.state = 753
                self.match(DynamoMRParser.L_brkt_DA)
                self.state = 754
                self.match(DynamoMRParser.Hz)
                self.state = 755
                self.match(DynamoMRParser.R_brkt_DA)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 758
            self.match(DynamoMRParser.RETURN_DA)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pales_rdc_outputsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def DI(self):
            return self.getToken(DynamoMRParser.DI, 0)

        def D_obs(self):
            return self.getToken(DynamoMRParser.D_obs, 0)

        def D(self):
            return self.getToken(DynamoMRParser.D, 0)

        def D_diff(self):
            return self.getToken(DynamoMRParser.D_diff, 0)

        def DD(self):
            return self.getToken(DynamoMRParser.DD, 0)

        def W(self):
            return self.getToken(DynamoMRParser.W, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def pales_rdc_output(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Pales_rdc_outputContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Pales_rdc_outputContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_pales_rdc_outputs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPales_rdc_outputs" ):
                listener.enterPales_rdc_outputs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPales_rdc_outputs" ):
                listener.exitPales_rdc_outputs(self)




    def pales_rdc_outputs(self):

        localctx = DynamoMRParser.Pales_rdc_outputsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pales_rdc_outputs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(DynamoMRParser.Vars)
            self.state = 761
            self.match(DynamoMRParser.Resid_I)
            self.state = 762
            self.match(DynamoMRParser.Resname_I)
            self.state = 763
            self.match(DynamoMRParser.Atomname_I)
            self.state = 764
            self.match(DynamoMRParser.Resid_J)
            self.state = 765
            self.match(DynamoMRParser.Resname_J)
            self.state = 766
            self.match(DynamoMRParser.Atomname_J)
            self.state = 767
            self.match(DynamoMRParser.DI)
            self.state = 768
            self.match(DynamoMRParser.D_obs)
            self.state = 769
            self.match(DynamoMRParser.D)
            self.state = 770
            self.match(DynamoMRParser.D_diff)
            self.state = 771
            self.match(DynamoMRParser.DD)
            self.state = 772
            self.match(DynamoMRParser.W)
            self.state = 773
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 774
            self.match(DynamoMRParser.Format)
            self.state = 775
            self.match(DynamoMRParser.Format_code)
            self.state = 776
            self.match(DynamoMRParser.Format_code)
            self.state = 777
            self.match(DynamoMRParser.Format_code)
            self.state = 778
            self.match(DynamoMRParser.Format_code)
            self.state = 779
            self.match(DynamoMRParser.Format_code)
            self.state = 780
            self.match(DynamoMRParser.Format_code)
            self.state = 781
            self.match(DynamoMRParser.Format_code)
            self.state = 782
            self.match(DynamoMRParser.Format_code)
            self.state = 783
            self.match(DynamoMRParser.Format_code)
            self.state = 784
            self.match(DynamoMRParser.Format_code)
            self.state = 785
            self.match(DynamoMRParser.Format_code)
            self.state = 786
            self.match(DynamoMRParser.Format_code)
            self.state = 787
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 789 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 788
                self.pales_rdc_output()
                self.state = 791 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==4):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pales_rdc_outputContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_pales_rdc_output

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPales_rdc_output" ):
                listener.enterPales_rdc_output(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPales_rdc_output" ):
                listener.exitPales_rdc_output(self)




    def pales_rdc_output(self):

        localctx = DynamoMRParser.Pales_rdc_outputContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pales_rdc_output)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(DynamoMRParser.Integer)
            self.state = 794
            self.match(DynamoMRParser.Simple_name)
            self.state = 795
            self.match(DynamoMRParser.Simple_name)
            self.state = 796
            self.match(DynamoMRParser.Integer)
            self.state = 797
            self.match(DynamoMRParser.Simple_name)
            self.state = 798
            self.match(DynamoMRParser.Simple_name)
            self.state = 799
            self.number()
            self.state = 800
            self.number()
            self.state = 801
            self.number()
            self.state = 802
            self.number()
            self.state = 803
            self.number()
            self.state = 804
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Resid_K(self):
            return self.getToken(DynamoMRParser.Resid_K, 0)

        def Resname_K(self):
            return self.getToken(DynamoMRParser.Resname_K, 0)

        def Atomname_K(self):
            return self.getToken(DynamoMRParser.Atomname_K, 0)

        def Resid_L(self):
            return self.getToken(DynamoMRParser.Resid_L, 0)

        def Resname_L(self):
            return self.getToken(DynamoMRParser.Resname_L, 0)

        def Atomname_L(self):
            return self.getToken(DynamoMRParser.Atomname_L, 0)

        def A(self):
            return self.getToken(DynamoMRParser.A, 0)

        def B(self):
            return self.getToken(DynamoMRParser.B, 0)

        def C(self):
            return self.getToken(DynamoMRParser.C, 0)

        def Phase(self):
            return self.getToken(DynamoMRParser.Phase, 0)

        def ObsJ(self):
            return self.getToken(DynamoMRParser.ObsJ, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Coupling_restraintContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_coupling_restraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraints" ):
                listener.enterCoupling_restraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraints" ):
                listener.exitCoupling_restraints(self)




    def coupling_restraints(self):

        localctx = DynamoMRParser.Coupling_restraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_coupling_restraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 806
            self.match(DynamoMRParser.Vars)
            self.state = 807
            self.match(DynamoMRParser.Index)
            self.state = 808
            self.match(DynamoMRParser.Resid_I)
            self.state = 809
            self.match(DynamoMRParser.Resname_I)
            self.state = 810
            self.match(DynamoMRParser.Atomname_I)
            self.state = 811
            self.match(DynamoMRParser.Resid_J)
            self.state = 812
            self.match(DynamoMRParser.Resname_J)
            self.state = 813
            self.match(DynamoMRParser.Atomname_J)
            self.state = 814
            self.match(DynamoMRParser.Resid_K)
            self.state = 815
            self.match(DynamoMRParser.Resname_K)
            self.state = 816
            self.match(DynamoMRParser.Atomname_K)
            self.state = 817
            self.match(DynamoMRParser.Resid_L)
            self.state = 818
            self.match(DynamoMRParser.Resname_L)
            self.state = 819
            self.match(DynamoMRParser.Atomname_L)
            self.state = 820
            self.match(DynamoMRParser.A)
            self.state = 821
            self.match(DynamoMRParser.B)
            self.state = 822
            self.match(DynamoMRParser.C)
            self.state = 823
            self.match(DynamoMRParser.Phase)
            self.state = 824
            self.match(DynamoMRParser.ObsJ)
            self.state = 825
            self.match(DynamoMRParser.FC)
            self.state = 826
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 827
            self.match(DynamoMRParser.Format)
            self.state = 828
            self.match(DynamoMRParser.Format_code)
            self.state = 829
            self.match(DynamoMRParser.Format_code)
            self.state = 830
            self.match(DynamoMRParser.Format_code)
            self.state = 831
            self.match(DynamoMRParser.Format_code)
            self.state = 832
            self.match(DynamoMRParser.Format_code)
            self.state = 833
            self.match(DynamoMRParser.Format_code)
            self.state = 834
            self.match(DynamoMRParser.Format_code)
            self.state = 835
            self.match(DynamoMRParser.Format_code)
            self.state = 836
            self.match(DynamoMRParser.Format_code)
            self.state = 837
            self.match(DynamoMRParser.Format_code)
            self.state = 838
            self.match(DynamoMRParser.Format_code)
            self.state = 839
            self.match(DynamoMRParser.Format_code)
            self.state = 840
            self.match(DynamoMRParser.Format_code)
            self.state = 841
            self.match(DynamoMRParser.Format_code)
            self.state = 842
            self.match(DynamoMRParser.Format_code)
            self.state = 843
            self.match(DynamoMRParser.Format_code)
            self.state = 844
            self.match(DynamoMRParser.Format_code)
            self.state = 845
            self.match(DynamoMRParser.Format_code)
            self.state = 846
            self.match(DynamoMRParser.Format_code)
            self.state = 847
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 849 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 848
                self.coupling_restraint()
                self.state = 851 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==4):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = DynamoMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 853
            self.match(DynamoMRParser.Integer)
            self.state = 854
            self.match(DynamoMRParser.Integer)
            self.state = 855
            self.match(DynamoMRParser.Simple_name)
            self.state = 856
            self.match(DynamoMRParser.Simple_name)
            self.state = 857
            self.match(DynamoMRParser.Integer)
            self.state = 858
            self.match(DynamoMRParser.Simple_name)
            self.state = 859
            self.match(DynamoMRParser.Simple_name)
            self.state = 860
            self.match(DynamoMRParser.Integer)
            self.state = 861
            self.match(DynamoMRParser.Simple_name)
            self.state = 862
            self.match(DynamoMRParser.Simple_name)
            self.state = 863
            self.match(DynamoMRParser.Integer)
            self.state = 864
            self.match(DynamoMRParser.Simple_name)
            self.state = 865
            self.match(DynamoMRParser.Simple_name)
            self.state = 866
            self.number()
            self.state = 867
            self.number()
            self.state = 868
            self.number()
            self.state = 869
            self.number()
            self.state = 870
            self.number()
            self.state = 871
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraints_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Segname_K(self):
            return self.getToken(DynamoMRParser.Segname_K, 0)

        def Resid_K(self):
            return self.getToken(DynamoMRParser.Resid_K, 0)

        def Resname_K(self):
            return self.getToken(DynamoMRParser.Resname_K, 0)

        def Atomname_K(self):
            return self.getToken(DynamoMRParser.Atomname_K, 0)

        def Segname_L(self):
            return self.getToken(DynamoMRParser.Segname_L, 0)

        def Resid_L(self):
            return self.getToken(DynamoMRParser.Resid_L, 0)

        def Resname_L(self):
            return self.getToken(DynamoMRParser.Resname_L, 0)

        def Atomname_L(self):
            return self.getToken(DynamoMRParser.Atomname_L, 0)

        def A(self):
            return self.getToken(DynamoMRParser.A, 0)

        def B(self):
            return self.getToken(DynamoMRParser.B, 0)

        def C(self):
            return self.getToken(DynamoMRParser.C, 0)

        def Phase(self):
            return self.getToken(DynamoMRParser.Phase, 0)

        def ObsJ(self):
            return self.getToken(DynamoMRParser.ObsJ, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def coupling_restraint_sw_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Coupling_restraint_sw_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Coupling_restraint_sw_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_coupling_restraints_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraints_sw_segid" ):
                listener.enterCoupling_restraints_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraints_sw_segid" ):
                listener.exitCoupling_restraints_sw_segid(self)




    def coupling_restraints_sw_segid(self):

        localctx = DynamoMRParser.Coupling_restraints_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_coupling_restraints_sw_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 873
            self.match(DynamoMRParser.Vars)
            self.state = 874
            self.match(DynamoMRParser.Index)
            self.state = 875
            self.match(DynamoMRParser.Segname_I)
            self.state = 876
            self.match(DynamoMRParser.Resid_I)
            self.state = 877
            self.match(DynamoMRParser.Resname_I)
            self.state = 878
            self.match(DynamoMRParser.Atomname_I)
            self.state = 879
            self.match(DynamoMRParser.Segname_J)
            self.state = 880
            self.match(DynamoMRParser.Resid_J)
            self.state = 881
            self.match(DynamoMRParser.Resname_J)
            self.state = 882
            self.match(DynamoMRParser.Atomname_J)
            self.state = 883
            self.match(DynamoMRParser.Segname_K)
            self.state = 884
            self.match(DynamoMRParser.Resid_K)
            self.state = 885
            self.match(DynamoMRParser.Resname_K)
            self.state = 886
            self.match(DynamoMRParser.Atomname_K)
            self.state = 887
            self.match(DynamoMRParser.Segname_L)
            self.state = 888
            self.match(DynamoMRParser.Resid_L)
            self.state = 889
            self.match(DynamoMRParser.Resname_L)
            self.state = 890
            self.match(DynamoMRParser.Atomname_L)
            self.state = 891
            self.match(DynamoMRParser.A)
            self.state = 892
            self.match(DynamoMRParser.B)
            self.state = 893
            self.match(DynamoMRParser.C)
            self.state = 894
            self.match(DynamoMRParser.Phase)
            self.state = 895
            self.match(DynamoMRParser.ObsJ)
            self.state = 896
            self.match(DynamoMRParser.FC)
            self.state = 897
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 898
            self.match(DynamoMRParser.Format)
            self.state = 899
            self.match(DynamoMRParser.Format_code)
            self.state = 900
            self.match(DynamoMRParser.Format_code)
            self.state = 901
            self.match(DynamoMRParser.Format_code)
            self.state = 902
            self.match(DynamoMRParser.Format_code)
            self.state = 903
            self.match(DynamoMRParser.Format_code)
            self.state = 904
            self.match(DynamoMRParser.Format_code)
            self.state = 905
            self.match(DynamoMRParser.Format_code)
            self.state = 906
            self.match(DynamoMRParser.Format_code)
            self.state = 907
            self.match(DynamoMRParser.Format_code)
            self.state = 908
            self.match(DynamoMRParser.Format_code)
            self.state = 909
            self.match(DynamoMRParser.Format_code)
            self.state = 910
            self.match(DynamoMRParser.Format_code)
            self.state = 911
            self.match(DynamoMRParser.Format_code)
            self.state = 912
            self.match(DynamoMRParser.Format_code)
            self.state = 913
            self.match(DynamoMRParser.Format_code)
            self.state = 914
            self.match(DynamoMRParser.Format_code)
            self.state = 915
            self.match(DynamoMRParser.Format_code)
            self.state = 916
            self.match(DynamoMRParser.Format_code)
            self.state = 917
            self.match(DynamoMRParser.Format_code)
            self.state = 918
            self.match(DynamoMRParser.Format_code)
            self.state = 919
            self.match(DynamoMRParser.Format_code)
            self.state = 920
            self.match(DynamoMRParser.Format_code)
            self.state = 921
            self.match(DynamoMRParser.Format_code)
            self.state = 922
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 924 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 923
                self.coupling_restraint_sw_segid()
                self.state = 926 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==4):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraint_sw_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_coupling_restraint_sw_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint_sw_segid" ):
                listener.enterCoupling_restraint_sw_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint_sw_segid" ):
                listener.exitCoupling_restraint_sw_segid(self)




    def coupling_restraint_sw_segid(self):

        localctx = DynamoMRParser.Coupling_restraint_sw_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_coupling_restraint_sw_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 928
            self.match(DynamoMRParser.Integer)
            self.state = 929
            self.match(DynamoMRParser.Simple_name)
            self.state = 930
            self.match(DynamoMRParser.Integer)
            self.state = 931
            self.match(DynamoMRParser.Simple_name)
            self.state = 932
            self.match(DynamoMRParser.Simple_name)
            self.state = 933
            self.match(DynamoMRParser.Simple_name)
            self.state = 934
            self.match(DynamoMRParser.Integer)
            self.state = 935
            self.match(DynamoMRParser.Simple_name)
            self.state = 936
            self.match(DynamoMRParser.Simple_name)
            self.state = 937
            self.match(DynamoMRParser.Simple_name)
            self.state = 938
            self.match(DynamoMRParser.Integer)
            self.state = 939
            self.match(DynamoMRParser.Simple_name)
            self.state = 940
            self.match(DynamoMRParser.Simple_name)
            self.state = 941
            self.match(DynamoMRParser.Simple_name)
            self.state = 942
            self.match(DynamoMRParser.Integer)
            self.state = 943
            self.match(DynamoMRParser.Simple_name)
            self.state = 944
            self.match(DynamoMRParser.Simple_name)
            self.state = 945
            self.number()
            self.state = 946
            self.number()
            self.state = 947
            self.number()
            self.state = 948
            self.number()
            self.state = 949
            self.number()
            self.state = 950
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraints_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Index(self):
            return self.getToken(DynamoMRParser.Index, 0)

        def Resid_I(self):
            return self.getToken(DynamoMRParser.Resid_I, 0)

        def Resname_I(self):
            return self.getToken(DynamoMRParser.Resname_I, 0)

        def Atomname_I(self):
            return self.getToken(DynamoMRParser.Atomname_I, 0)

        def Segname_I(self):
            return self.getToken(DynamoMRParser.Segname_I, 0)

        def Resid_J(self):
            return self.getToken(DynamoMRParser.Resid_J, 0)

        def Resname_J(self):
            return self.getToken(DynamoMRParser.Resname_J, 0)

        def Atomname_J(self):
            return self.getToken(DynamoMRParser.Atomname_J, 0)

        def Segname_J(self):
            return self.getToken(DynamoMRParser.Segname_J, 0)

        def Resid_K(self):
            return self.getToken(DynamoMRParser.Resid_K, 0)

        def Resname_K(self):
            return self.getToken(DynamoMRParser.Resname_K, 0)

        def Atomname_K(self):
            return self.getToken(DynamoMRParser.Atomname_K, 0)

        def Segname_K(self):
            return self.getToken(DynamoMRParser.Segname_K, 0)

        def Resid_L(self):
            return self.getToken(DynamoMRParser.Resid_L, 0)

        def Resname_L(self):
            return self.getToken(DynamoMRParser.Resname_L, 0)

        def Atomname_L(self):
            return self.getToken(DynamoMRParser.Atomname_L, 0)

        def Segname_L(self):
            return self.getToken(DynamoMRParser.Segname_L, 0)

        def A(self):
            return self.getToken(DynamoMRParser.A, 0)

        def B(self):
            return self.getToken(DynamoMRParser.B, 0)

        def C(self):
            return self.getToken(DynamoMRParser.C, 0)

        def Phase(self):
            return self.getToken(DynamoMRParser.Phase, 0)

        def ObsJ(self):
            return self.getToken(DynamoMRParser.ObsJ, 0)

        def FC(self):
            return self.getToken(DynamoMRParser.FC, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def coupling_restraint_ew_segid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Coupling_restraint_ew_segidContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Coupling_restraint_ew_segidContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_coupling_restraints_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraints_ew_segid" ):
                listener.enterCoupling_restraints_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraints_ew_segid" ):
                listener.exitCoupling_restraints_ew_segid(self)




    def coupling_restraints_ew_segid(self):

        localctx = DynamoMRParser.Coupling_restraints_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_coupling_restraints_ew_segid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 952
            self.match(DynamoMRParser.Vars)
            self.state = 953
            self.match(DynamoMRParser.Index)
            self.state = 954
            self.match(DynamoMRParser.Resid_I)
            self.state = 955
            self.match(DynamoMRParser.Resname_I)
            self.state = 956
            self.match(DynamoMRParser.Atomname_I)
            self.state = 957
            self.match(DynamoMRParser.Segname_I)
            self.state = 958
            self.match(DynamoMRParser.Resid_J)
            self.state = 959
            self.match(DynamoMRParser.Resname_J)
            self.state = 960
            self.match(DynamoMRParser.Atomname_J)
            self.state = 961
            self.match(DynamoMRParser.Segname_J)
            self.state = 962
            self.match(DynamoMRParser.Resid_K)
            self.state = 963
            self.match(DynamoMRParser.Resname_K)
            self.state = 964
            self.match(DynamoMRParser.Atomname_K)
            self.state = 965
            self.match(DynamoMRParser.Segname_K)
            self.state = 966
            self.match(DynamoMRParser.Resid_L)
            self.state = 967
            self.match(DynamoMRParser.Resname_L)
            self.state = 968
            self.match(DynamoMRParser.Atomname_L)
            self.state = 969
            self.match(DynamoMRParser.Segname_L)
            self.state = 970
            self.match(DynamoMRParser.A)
            self.state = 971
            self.match(DynamoMRParser.B)
            self.state = 972
            self.match(DynamoMRParser.C)
            self.state = 973
            self.match(DynamoMRParser.Phase)
            self.state = 974
            self.match(DynamoMRParser.ObsJ)
            self.state = 975
            self.match(DynamoMRParser.FC)
            self.state = 976
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 977
            self.match(DynamoMRParser.Format)
            self.state = 978
            self.match(DynamoMRParser.Format_code)
            self.state = 979
            self.match(DynamoMRParser.Format_code)
            self.state = 980
            self.match(DynamoMRParser.Format_code)
            self.state = 981
            self.match(DynamoMRParser.Format_code)
            self.state = 982
            self.match(DynamoMRParser.Format_code)
            self.state = 983
            self.match(DynamoMRParser.Format_code)
            self.state = 984
            self.match(DynamoMRParser.Format_code)
            self.state = 985
            self.match(DynamoMRParser.Format_code)
            self.state = 986
            self.match(DynamoMRParser.Format_code)
            self.state = 987
            self.match(DynamoMRParser.Format_code)
            self.state = 988
            self.match(DynamoMRParser.Format_code)
            self.state = 989
            self.match(DynamoMRParser.Format_code)
            self.state = 990
            self.match(DynamoMRParser.Format_code)
            self.state = 991
            self.match(DynamoMRParser.Format_code)
            self.state = 992
            self.match(DynamoMRParser.Format_code)
            self.state = 993
            self.match(DynamoMRParser.Format_code)
            self.state = 994
            self.match(DynamoMRParser.Format_code)
            self.state = 995
            self.match(DynamoMRParser.Format_code)
            self.state = 996
            self.match(DynamoMRParser.Format_code)
            self.state = 997
            self.match(DynamoMRParser.Format_code)
            self.state = 998
            self.match(DynamoMRParser.Format_code)
            self.state = 999
            self.match(DynamoMRParser.Format_code)
            self.state = 1000
            self.match(DynamoMRParser.Format_code)
            self.state = 1001
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 1003 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1002
                self.coupling_restraint_ew_segid()
                self.state = 1005 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==4):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraint_ew_segidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_coupling_restraint_ew_segid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint_ew_segid" ):
                listener.enterCoupling_restraint_ew_segid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint_ew_segid" ):
                listener.exitCoupling_restraint_ew_segid(self)




    def coupling_restraint_ew_segid(self):

        localctx = DynamoMRParser.Coupling_restraint_ew_segidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_coupling_restraint_ew_segid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(DynamoMRParser.Integer)
            self.state = 1008
            self.match(DynamoMRParser.Integer)
            self.state = 1009
            self.match(DynamoMRParser.Simple_name)
            self.state = 1010
            self.match(DynamoMRParser.Simple_name)
            self.state = 1011
            self.match(DynamoMRParser.Simple_name)
            self.state = 1012
            self.match(DynamoMRParser.Integer)
            self.state = 1013
            self.match(DynamoMRParser.Simple_name)
            self.state = 1014
            self.match(DynamoMRParser.Simple_name)
            self.state = 1015
            self.match(DynamoMRParser.Simple_name)
            self.state = 1016
            self.match(DynamoMRParser.Integer)
            self.state = 1017
            self.match(DynamoMRParser.Simple_name)
            self.state = 1018
            self.match(DynamoMRParser.Simple_name)
            self.state = 1019
            self.match(DynamoMRParser.Simple_name)
            self.state = 1020
            self.match(DynamoMRParser.Integer)
            self.state = 1021
            self.match(DynamoMRParser.Simple_name)
            self.state = 1022
            self.match(DynamoMRParser.Simple_name)
            self.state = 1023
            self.match(DynamoMRParser.Simple_name)
            self.state = 1024
            self.number()
            self.state = 1025
            self.number()
            self.state = 1026
            self.number()
            self.state = 1027
            self.number()
            self.state = 1028
            self.number()
            self.state = 1029
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Talos_restraintsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Resid(self):
            return self.getToken(DynamoMRParser.Resid, 0)

        def Resname(self):
            return self.getToken(DynamoMRParser.Resname, 0)

        def Phi(self):
            return self.getToken(DynamoMRParser.Phi, 0)

        def Psi(self):
            return self.getToken(DynamoMRParser.Psi, 0)

        def Dphi(self):
            return self.getToken(DynamoMRParser.Dphi, 0)

        def Dpsi(self):
            return self.getToken(DynamoMRParser.Dpsi, 0)

        def Dist(self):
            return self.getToken(DynamoMRParser.Dist, 0)

        def S2(self):
            return self.getToken(DynamoMRParser.S2, 0)

        def Count(self):
            return self.getToken(DynamoMRParser.Count, 0)

        def Cs_count(self):
            return self.getToken(DynamoMRParser.Cs_count, 0)

        def Class(self):
            return self.getToken(DynamoMRParser.Class, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def talos_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Talos_restraintContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Talos_restraintContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_talos_restraints

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTalos_restraints" ):
                listener.enterTalos_restraints(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTalos_restraints" ):
                listener.exitTalos_restraints(self)




    def talos_restraints(self):

        localctx = DynamoMRParser.Talos_restraintsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_talos_restraints)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1031
            self.match(DynamoMRParser.Vars)
            self.state = 1032
            self.match(DynamoMRParser.Resid)
            self.state = 1033
            self.match(DynamoMRParser.Resname)
            self.state = 1034
            self.match(DynamoMRParser.Phi)
            self.state = 1035
            self.match(DynamoMRParser.Psi)
            self.state = 1036
            self.match(DynamoMRParser.Dphi)
            self.state = 1037
            self.match(DynamoMRParser.Dpsi)
            self.state = 1038
            self.match(DynamoMRParser.Dist)
            self.state = 1039
            self.match(DynamoMRParser.S2)
            self.state = 1040
            self.match(DynamoMRParser.Count)
            self.state = 1041
            self.match(DynamoMRParser.Cs_count)
            self.state = 1042
            self.match(DynamoMRParser.Class)
            self.state = 1043
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 1044
            self.match(DynamoMRParser.Format)
            self.state = 1045
            self.match(DynamoMRParser.Format_code)
            self.state = 1046
            self.match(DynamoMRParser.Format_code)
            self.state = 1047
            self.match(DynamoMRParser.Format_code)
            self.state = 1048
            self.match(DynamoMRParser.Format_code)
            self.state = 1049
            self.match(DynamoMRParser.Format_code)
            self.state = 1050
            self.match(DynamoMRParser.Format_code)
            self.state = 1051
            self.match(DynamoMRParser.Format_code)
            self.state = 1052
            self.match(DynamoMRParser.Format_code)
            self.state = 1053
            self.match(DynamoMRParser.Format_code)
            self.state = 1054
            self.match(DynamoMRParser.Format_code)
            self.state = 1055
            self.match(DynamoMRParser.Format_code)
            self.state = 1056
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 1058 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1057
                self.talos_restraint()
                self.state = 1060 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==4):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Talos_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_talos_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTalos_restraint" ):
                listener.enterTalos_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTalos_restraint" ):
                listener.exitTalos_restraint(self)




    def talos_restraint(self):

        localctx = DynamoMRParser.Talos_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_talos_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(DynamoMRParser.Integer)
            self.state = 1063
            self.match(DynamoMRParser.Simple_name)
            self.state = 1064
            self.number()
            self.state = 1065
            self.number()
            self.state = 1066
            self.number()
            self.state = 1067
            self.number()
            self.state = 1068
            self.number()
            self.state = 1069
            self.number()
            self.state = 1070
            self.match(DynamoMRParser.Integer)
            self.state = 1071
            self.match(DynamoMRParser.Integer)
            self.state = 1072
            self.match(DynamoMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Talos_restraints_wo_s2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vars(self):
            return self.getToken(DynamoMRParser.Vars, 0)

        def Resid(self):
            return self.getToken(DynamoMRParser.Resid, 0)

        def Resname(self):
            return self.getToken(DynamoMRParser.Resname, 0)

        def Phi(self):
            return self.getToken(DynamoMRParser.Phi, 0)

        def Psi(self):
            return self.getToken(DynamoMRParser.Psi, 0)

        def Dphi(self):
            return self.getToken(DynamoMRParser.Dphi, 0)

        def Dpsi(self):
            return self.getToken(DynamoMRParser.Dpsi, 0)

        def Dist(self):
            return self.getToken(DynamoMRParser.Dist, 0)

        def Count(self):
            return self.getToken(DynamoMRParser.Count, 0)

        def Class(self):
            return self.getToken(DynamoMRParser.Class, 0)

        def RETURN_VA(self):
            return self.getToken(DynamoMRParser.RETURN_VA, 0)

        def Format(self):
            return self.getToken(DynamoMRParser.Format, 0)

        def Format_code(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Format_code)
            else:
                return self.getToken(DynamoMRParser.Format_code, i)

        def RETURN_FO(self):
            return self.getToken(DynamoMRParser.RETURN_FO, 0)

        def talos_restraint_wo_s2(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.Talos_restraint_wo_s2Context)
            else:
                return self.getTypedRuleContext(DynamoMRParser.Talos_restraint_wo_s2Context,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_talos_restraints_wo_s2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTalos_restraints_wo_s2" ):
                listener.enterTalos_restraints_wo_s2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTalos_restraints_wo_s2" ):
                listener.exitTalos_restraints_wo_s2(self)




    def talos_restraints_wo_s2(self):

        localctx = DynamoMRParser.Talos_restraints_wo_s2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_talos_restraints_wo_s2)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1074
            self.match(DynamoMRParser.Vars)
            self.state = 1075
            self.match(DynamoMRParser.Resid)
            self.state = 1076
            self.match(DynamoMRParser.Resname)
            self.state = 1077
            self.match(DynamoMRParser.Phi)
            self.state = 1078
            self.match(DynamoMRParser.Psi)
            self.state = 1079
            self.match(DynamoMRParser.Dphi)
            self.state = 1080
            self.match(DynamoMRParser.Dpsi)
            self.state = 1081
            self.match(DynamoMRParser.Dist)
            self.state = 1082
            self.match(DynamoMRParser.Count)
            self.state = 1083
            self.match(DynamoMRParser.Class)
            self.state = 1084
            self.match(DynamoMRParser.RETURN_VA)
            self.state = 1085
            self.match(DynamoMRParser.Format)
            self.state = 1086
            self.match(DynamoMRParser.Format_code)
            self.state = 1087
            self.match(DynamoMRParser.Format_code)
            self.state = 1088
            self.match(DynamoMRParser.Format_code)
            self.state = 1089
            self.match(DynamoMRParser.Format_code)
            self.state = 1090
            self.match(DynamoMRParser.Format_code)
            self.state = 1091
            self.match(DynamoMRParser.Format_code)
            self.state = 1092
            self.match(DynamoMRParser.Format_code)
            self.state = 1093
            self.match(DynamoMRParser.Format_code)
            self.state = 1094
            self.match(DynamoMRParser.Format_code)
            self.state = 1095
            self.match(DynamoMRParser.RETURN_FO)
            self.state = 1097 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1096
                self.talos_restraint_wo_s2()
                self.state = 1099 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==4):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Talos_restraint_wo_s2Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Integer)
            else:
                return self.getToken(DynamoMRParser.Integer, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(DynamoMRParser.Simple_name)
            else:
                return self.getToken(DynamoMRParser.Simple_name, i)

        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(DynamoMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(DynamoMRParser.NumberContext,i)


        def getRuleIndex(self):
            return DynamoMRParser.RULE_talos_restraint_wo_s2

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTalos_restraint_wo_s2" ):
                listener.enterTalos_restraint_wo_s2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTalos_restraint_wo_s2" ):
                listener.exitTalos_restraint_wo_s2(self)




    def talos_restraint_wo_s2(self):

        localctx = DynamoMRParser.Talos_restraint_wo_s2Context(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_talos_restraint_wo_s2)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(DynamoMRParser.Integer)
            self.state = 1102
            self.match(DynamoMRParser.Simple_name)
            self.state = 1103
            self.number()
            self.state = 1104
            self.number()
            self.state = 1105
            self.number()
            self.state = 1106
            self.number()
            self.state = 1107
            self.number()
            self.state = 1108
            self.match(DynamoMRParser.Integer)
            self.state = 1109
            self.match(DynamoMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Float(self):
            return self.getToken(DynamoMRParser.Float, 0)

        def Integer(self):
            return self.getToken(DynamoMRParser.Integer, 0)

        def getRuleIndex(self):
            return DynamoMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = DynamoMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            _la = self._input.LA(1)
            if not(_la==4 or _la==5):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





