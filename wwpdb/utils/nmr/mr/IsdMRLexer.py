# Generated from IsdMRLexer.g4 by ANTLR 4.13.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,11,296,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,3,1,53,8,1,1,1,1,1,
        1,2,3,2,58,8,2,1,2,1,2,3,2,62,8,2,1,3,1,3,1,3,1,3,1,3,1,3,3,3,70,
        8,3,1,4,1,4,1,5,4,5,75,8,5,11,5,12,5,76,1,6,4,6,80,8,6,11,6,12,6,
        81,1,6,5,6,85,8,6,10,6,12,6,88,9,6,1,6,5,6,91,8,6,10,6,12,6,94,9,
        6,1,6,5,6,97,8,6,10,6,12,6,100,9,6,1,6,1,6,1,7,4,7,105,8,7,11,7,
        12,7,106,1,7,5,7,110,8,7,10,7,12,7,113,9,7,1,7,5,7,116,8,7,10,7,
        12,7,119,9,7,1,7,5,7,122,8,7,10,7,12,7,125,9,7,1,7,1,7,1,8,4,8,130,
        8,8,11,8,12,8,131,1,8,5,8,135,8,8,10,8,12,8,138,9,8,1,8,5,8,141,
        8,8,10,8,12,8,144,9,8,1,8,5,8,147,8,8,10,8,12,8,150,9,8,1,8,1,8,
        1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,3,11,162,8,11,1,12,1,12,3,12,
        166,8,12,1,13,1,13,3,13,170,8,13,1,14,1,14,5,14,174,8,14,10,14,12,
        14,177,9,14,1,15,4,15,180,8,15,11,15,12,15,181,1,15,1,15,1,16,1,
        16,1,16,5,16,189,8,16,10,16,12,16,192,9,16,1,16,1,16,1,16,1,16,1,
        17,1,17,1,17,4,17,201,8,17,11,17,12,17,202,1,17,1,17,4,17,207,8,
        17,11,17,12,17,208,1,17,1,17,4,17,213,8,17,11,17,12,17,214,1,17,
        1,17,4,17,219,8,17,11,17,12,17,220,1,17,1,17,4,17,225,8,17,11,17,
        12,17,226,1,17,1,17,1,17,1,17,1,17,1,17,3,17,235,8,17,1,17,5,17,
        238,8,17,10,17,12,17,241,9,17,1,17,4,17,244,8,17,11,17,12,17,245,
        1,17,1,17,1,18,1,18,1,18,4,18,253,8,18,11,18,12,18,254,1,18,1,18,
        4,18,259,8,18,11,18,12,18,260,1,18,1,18,4,18,265,8,18,11,18,12,18,
        266,1,18,1,18,4,18,271,8,18,11,18,12,18,272,1,18,1,18,4,18,277,8,
        18,11,18,12,18,278,1,18,1,18,1,18,1,18,1,18,1,18,3,18,287,8,18,1,
        18,5,18,290,8,18,10,18,12,18,293,9,18,1,18,1,18,1,190,0,19,1,1,3,
        2,5,3,7,0,9,0,11,0,13,4,15,5,17,6,19,7,21,0,23,0,25,0,27,0,29,0,
        31,8,33,9,35,10,37,11,1,0,18,2,0,68,68,100,100,2,0,73,73,105,105,
        2,0,83,83,115,115,2,0,84,84,116,116,2,0,65,65,97,97,2,0,78,78,110,
        110,2,0,67,67,99,99,2,0,69,69,101,101,2,0,43,43,45,45,1,0,48,57,
        2,0,10,10,13,13,2,0,65,90,97,122,4,0,34,35,39,39,42,43,45,46,3,0,
        9,10,13,13,32,32,5,0,33,33,35,35,38,38,59,59,92,92,2,0,82,82,114,
        114,2,0,77,77,109,109,2,0,75,75,107,107,336,0,1,1,0,0,0,0,3,1,0,
        0,0,0,5,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
        0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,1,39,1,0,
        0,0,3,52,1,0,0,0,5,57,1,0,0,0,7,69,1,0,0,0,9,71,1,0,0,0,11,74,1,
        0,0,0,13,79,1,0,0,0,15,104,1,0,0,0,17,129,1,0,0,0,19,153,1,0,0,0,
        21,157,1,0,0,0,23,161,1,0,0,0,25,165,1,0,0,0,27,169,1,0,0,0,29,171,
        1,0,0,0,31,179,1,0,0,0,33,185,1,0,0,0,35,234,1,0,0,0,37,286,1,0,
        0,0,39,40,7,0,0,0,40,41,7,1,0,0,41,42,7,2,0,0,42,43,7,3,0,0,43,44,
        7,4,0,0,44,45,7,5,0,0,45,46,7,6,0,0,46,47,7,7,0,0,47,48,5,61,0,0,
        48,49,1,0,0,0,49,50,3,5,2,0,50,2,1,0,0,0,51,53,7,8,0,0,52,51,1,0,
        0,0,52,53,1,0,0,0,53,54,1,0,0,0,54,55,3,11,5,0,55,4,1,0,0,0,56,58,
        7,8,0,0,57,56,1,0,0,0,57,58,1,0,0,0,58,61,1,0,0,0,59,62,3,11,5,0,
        60,62,3,7,3,0,61,59,1,0,0,0,61,60,1,0,0,0,62,6,1,0,0,0,63,64,3,11,
        5,0,64,65,5,46,0,0,65,66,3,11,5,0,66,70,1,0,0,0,67,68,5,46,0,0,68,
        70,3,11,5,0,69,63,1,0,0,0,69,67,1,0,0,0,70,8,1,0,0,0,71,72,7,9,0,
        0,72,10,1,0,0,0,73,75,3,9,4,0,74,73,1,0,0,0,75,76,1,0,0,0,76,74,
        1,0,0,0,76,77,1,0,0,0,77,12,1,0,0,0,78,80,5,35,0,0,79,78,1,0,0,0,
        80,81,1,0,0,0,81,79,1,0,0,0,81,82,1,0,0,0,82,86,1,0,0,0,83,85,8,
        10,0,0,84,83,1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,
        92,1,0,0,0,88,86,1,0,0,0,89,91,5,35,0,0,90,89,1,0,0,0,91,94,1,0,
        0,0,92,90,1,0,0,0,92,93,1,0,0,0,93,98,1,0,0,0,94,92,1,0,0,0,95,97,
        8,10,0,0,96,95,1,0,0,0,97,100,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,
        0,99,101,1,0,0,0,100,98,1,0,0,0,101,102,6,6,0,0,102,14,1,0,0,0,103,
        105,5,33,0,0,104,103,1,0,0,0,105,106,1,0,0,0,106,104,1,0,0,0,106,
        107,1,0,0,0,107,111,1,0,0,0,108,110,8,10,0,0,109,108,1,0,0,0,110,
        113,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,117,1,0,0,0,113,
        111,1,0,0,0,114,116,5,33,0,0,115,114,1,0,0,0,116,119,1,0,0,0,117,
        115,1,0,0,0,117,118,1,0,0,0,118,123,1,0,0,0,119,117,1,0,0,0,120,
        122,8,10,0,0,121,120,1,0,0,0,122,125,1,0,0,0,123,121,1,0,0,0,123,
        124,1,0,0,0,124,126,1,0,0,0,125,123,1,0,0,0,126,127,6,7,0,0,127,
        16,1,0,0,0,128,130,5,59,0,0,129,128,1,0,0,0,130,131,1,0,0,0,131,
        129,1,0,0,0,131,132,1,0,0,0,132,136,1,0,0,0,133,135,8,10,0,0,134,
        133,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,
        142,1,0,0,0,138,136,1,0,0,0,139,141,5,59,0,0,140,139,1,0,0,0,141,
        144,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,148,1,0,0,0,144,
        142,1,0,0,0,145,147,8,10,0,0,146,145,1,0,0,0,147,150,1,0,0,0,148,
        146,1,0,0,0,148,149,1,0,0,0,149,151,1,0,0,0,150,148,1,0,0,0,151,
        152,6,8,0,0,152,18,1,0,0,0,153,154,3,29,14,0,154,155,3,11,5,0,155,
        156,3,29,14,0,156,20,1,0,0,0,157,158,7,11,0,0,158,22,1,0,0,0,159,
        162,3,21,10,0,160,162,3,9,4,0,161,159,1,0,0,0,161,160,1,0,0,0,162,
        24,1,0,0,0,163,166,3,23,11,0,164,166,5,95,0,0,165,163,1,0,0,0,165,
        164,1,0,0,0,166,26,1,0,0,0,167,170,3,25,12,0,168,170,7,12,0,0,169,
        167,1,0,0,0,169,168,1,0,0,0,170,28,1,0,0,0,171,175,3,25,12,0,172,
        174,3,27,13,0,173,172,1,0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,
        176,1,0,0,0,176,30,1,0,0,0,177,175,1,0,0,0,178,180,7,13,0,0,179,
        178,1,0,0,0,180,181,1,0,0,0,181,179,1,0,0,0,181,182,1,0,0,0,182,
        183,1,0,0,0,183,184,6,15,1,0,184,32,1,0,0,0,185,190,5,40,0,0,186,
        189,3,33,16,0,187,189,9,0,0,0,188,186,1,0,0,0,188,187,1,0,0,0,189,
        192,1,0,0,0,190,191,1,0,0,0,190,188,1,0,0,0,191,193,1,0,0,0,192,
        190,1,0,0,0,193,194,5,41,0,0,194,195,1,0,0,0,195,196,6,16,0,0,196,
        34,1,0,0,0,197,235,7,14,0,0,198,200,5,47,0,0,199,201,5,47,0,0,200,
        199,1,0,0,0,201,202,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,
        235,1,0,0,0,204,206,5,42,0,0,205,207,5,42,0,0,206,205,1,0,0,0,207,
        208,1,0,0,0,208,206,1,0,0,0,208,209,1,0,0,0,209,235,1,0,0,0,210,
        212,5,45,0,0,211,213,5,45,0,0,212,211,1,0,0,0,213,214,1,0,0,0,214,
        212,1,0,0,0,214,215,1,0,0,0,215,235,1,0,0,0,216,218,5,43,0,0,217,
        219,5,43,0,0,218,217,1,0,0,0,219,220,1,0,0,0,220,218,1,0,0,0,220,
        221,1,0,0,0,221,235,1,0,0,0,222,224,5,61,0,0,223,225,5,61,0,0,224,
        223,1,0,0,0,225,226,1,0,0,0,226,224,1,0,0,0,226,227,1,0,0,0,227,
        235,1,0,0,0,228,229,7,15,0,0,229,230,7,7,0,0,230,231,7,16,0,0,231,
        232,7,4,0,0,232,233,7,15,0,0,233,235,7,17,0,0,234,197,1,0,0,0,234,
        198,1,0,0,0,234,204,1,0,0,0,234,210,1,0,0,0,234,216,1,0,0,0,234,
        222,1,0,0,0,234,228,1,0,0,0,235,239,1,0,0,0,236,238,5,32,0,0,237,
        236,1,0,0,0,238,241,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,
        243,1,0,0,0,241,239,1,0,0,0,242,244,7,10,0,0,243,242,1,0,0,0,244,
        245,1,0,0,0,245,243,1,0,0,0,245,246,1,0,0,0,246,247,1,0,0,0,247,
        248,6,17,0,0,248,36,1,0,0,0,249,287,7,14,0,0,250,252,5,47,0,0,251,
        253,5,47,0,0,252,251,1,0,0,0,253,254,1,0,0,0,254,252,1,0,0,0,254,
        255,1,0,0,0,255,287,1,0,0,0,256,258,5,42,0,0,257,259,5,42,0,0,258,
        257,1,0,0,0,259,260,1,0,0,0,260,258,1,0,0,0,260,261,1,0,0,0,261,
        287,1,0,0,0,262,264,5,45,0,0,263,265,5,45,0,0,264,263,1,0,0,0,265,
        266,1,0,0,0,266,264,1,0,0,0,266,267,1,0,0,0,267,287,1,0,0,0,268,
        270,5,43,0,0,269,271,5,43,0,0,270,269,1,0,0,0,271,272,1,0,0,0,272,
        270,1,0,0,0,272,273,1,0,0,0,273,287,1,0,0,0,274,276,5,61,0,0,275,
        277,5,61,0,0,276,275,1,0,0,0,277,278,1,0,0,0,278,276,1,0,0,0,278,
        279,1,0,0,0,279,287,1,0,0,0,280,281,7,15,0,0,281,282,7,7,0,0,282,
        283,7,16,0,0,283,284,7,4,0,0,284,285,7,15,0,0,285,287,7,17,0,0,286,
        249,1,0,0,0,286,250,1,0,0,0,286,256,1,0,0,0,286,262,1,0,0,0,286,
        268,1,0,0,0,286,274,1,0,0,0,286,280,1,0,0,0,287,291,1,0,0,0,288,
        290,8,10,0,0,289,288,1,0,0,0,290,293,1,0,0,0,291,289,1,0,0,0,291,
        292,1,0,0,0,292,294,1,0,0,0,293,291,1,0,0,0,294,295,6,18,0,0,295,
        38,1,0,0,0,40,0,52,57,61,69,76,81,86,92,98,106,111,117,123,131,136,
        142,148,161,165,169,175,181,188,190,202,208,214,220,226,234,239,
        245,254,260,266,272,278,286,291,2,0,1,0,6,0,0
    ]

class IsdMRLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Distance = 1
    Integer = 2
    Float = 3
    SHARP_COMMENT = 4
    EXCLM_COMMENT = 5
    SMCLN_COMMENT = 6
    Atom_selection = 7
    SPACE = 8
    ENCLOSE_COMMENT = 9
    SECTION_COMMENT = 10
    LINE_COMMENT = 11

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
 ]

    symbolicNames = [ "<INVALID>",
            "Distance", "Integer", "Float", "SHARP_COMMENT", "EXCLM_COMMENT", 
            "SMCLN_COMMENT", "Atom_selection", "SPACE", "ENCLOSE_COMMENT", 
            "SECTION_COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "Distance", "Integer", "Float", "DEC_DOT_DEC", "DEC_DIGIT", 
                  "DECIMAL", "SHARP_COMMENT", "EXCLM_COMMENT", "SMCLN_COMMENT", 
                  "Atom_selection", "ALPHA", "ALPHA_NUM", "START_CHAR", 
                  "NAME_CHAR", "SIMPLE_NAME", "SPACE", "ENCLOSE_COMMENT", 
                  "SECTION_COMMENT", "LINE_COMMENT" ]

    grammarFileName = "IsdMRLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


