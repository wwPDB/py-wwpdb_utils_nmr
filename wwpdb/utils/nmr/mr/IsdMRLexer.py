# Generated from IsdMRLexer.g4 by ANTLR 4.10.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,12,309,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,2,3,2,58,8,2,1,2,1,2,1,3,3,3,63,8,3,1,3,1,3,3,3,67,8,3,1,4,1,
        4,1,4,1,4,1,4,1,4,3,4,75,8,4,1,5,1,5,1,6,4,6,80,8,6,11,6,12,6,81,
        1,7,4,7,85,8,7,11,7,12,7,86,1,7,5,7,90,8,7,10,7,12,7,93,9,7,1,7,
        5,7,96,8,7,10,7,12,7,99,9,7,1,7,5,7,102,8,7,10,7,12,7,105,9,7,1,
        7,1,7,1,8,4,8,110,8,8,11,8,12,8,111,1,8,5,8,115,8,8,10,8,12,8,118,
        9,8,1,8,5,8,121,8,8,10,8,12,8,124,9,8,1,8,5,8,127,8,8,10,8,12,8,
        130,9,8,1,8,1,8,1,9,4,9,135,8,9,11,9,12,9,136,1,9,5,9,140,8,9,10,
        9,12,9,143,9,9,1,9,5,9,146,8,9,10,9,12,9,149,9,9,1,9,5,9,152,8,9,
        10,9,12,9,155,9,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,
        3,12,167,8,12,1,13,1,13,3,13,171,8,13,1,14,1,14,3,14,175,8,14,1,
        15,1,15,3,15,179,8,15,1,16,1,16,3,16,183,8,16,1,17,1,17,5,17,187,
        8,17,10,17,12,17,190,9,17,1,18,4,18,193,8,18,11,18,12,18,194,1,18,
        1,18,1,19,1,19,1,19,5,19,202,8,19,10,19,12,19,205,9,19,1,19,1,19,
        1,19,1,19,1,20,1,20,1,20,4,20,214,8,20,11,20,12,20,215,1,20,1,20,
        4,20,220,8,20,11,20,12,20,221,1,20,1,20,4,20,226,8,20,11,20,12,20,
        227,1,20,1,20,4,20,232,8,20,11,20,12,20,233,1,20,1,20,4,20,238,8,
        20,11,20,12,20,239,1,20,1,20,1,20,1,20,1,20,1,20,3,20,248,8,20,1,
        20,5,20,251,8,20,10,20,12,20,254,9,20,1,20,4,20,257,8,20,11,20,12,
        20,258,1,20,1,20,1,21,1,21,1,21,4,21,266,8,21,11,21,12,21,267,1,
        21,1,21,4,21,272,8,21,11,21,12,21,273,1,21,1,21,4,21,278,8,21,11,
        21,12,21,279,1,21,1,21,4,21,284,8,21,11,21,12,21,285,1,21,1,21,4,
        21,290,8,21,11,21,12,21,291,1,21,1,21,1,21,1,21,1,21,1,21,3,21,300,
        8,21,1,21,5,21,303,8,21,10,21,12,21,306,9,21,1,21,1,21,1,203,0,22,
        1,1,3,2,5,3,7,4,9,0,11,0,13,0,15,5,17,6,19,7,21,8,23,0,25,0,27,0,
        29,0,31,0,33,0,35,0,37,9,39,10,41,11,43,12,1,0,18,2,0,68,68,100,
        100,2,0,73,73,105,105,2,0,83,83,115,115,2,0,84,84,116,116,2,0,65,
        65,97,97,2,0,78,78,110,110,2,0,67,67,99,99,2,0,69,69,101,101,2,0,
        43,43,45,45,1,0,48,57,2,0,10,10,13,13,2,0,65,90,97,122,4,0,34,35,
        39,39,42,43,45,46,3,0,9,10,13,13,32,32,5,0,33,33,35,35,38,38,59,
        59,92,92,2,0,82,82,114,114,2,0,77,77,109,109,2,0,75,75,107,107,349,
        0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,
        1,0,0,0,0,43,1,0,0,0,1,45,1,0,0,0,3,54,1,0,0,0,5,57,1,0,0,0,7,62,
        1,0,0,0,9,74,1,0,0,0,11,76,1,0,0,0,13,79,1,0,0,0,15,84,1,0,0,0,17,
        109,1,0,0,0,19,134,1,0,0,0,21,158,1,0,0,0,23,162,1,0,0,0,25,166,
        1,0,0,0,27,170,1,0,0,0,29,174,1,0,0,0,31,178,1,0,0,0,33,182,1,0,
        0,0,35,184,1,0,0,0,37,192,1,0,0,0,39,198,1,0,0,0,41,247,1,0,0,0,
        43,299,1,0,0,0,45,46,7,0,0,0,46,47,7,1,0,0,47,48,7,2,0,0,48,49,7,
        3,0,0,49,50,7,4,0,0,50,51,7,5,0,0,51,52,7,6,0,0,52,53,7,7,0,0,53,
        2,1,0,0,0,54,55,5,61,0,0,55,4,1,0,0,0,56,58,7,8,0,0,57,56,1,0,0,
        0,57,58,1,0,0,0,58,59,1,0,0,0,59,60,3,13,6,0,60,6,1,0,0,0,61,63,
        7,8,0,0,62,61,1,0,0,0,62,63,1,0,0,0,63,66,1,0,0,0,64,67,3,13,6,0,
        65,67,3,9,4,0,66,64,1,0,0,0,66,65,1,0,0,0,67,8,1,0,0,0,68,69,3,13,
        6,0,69,70,5,46,0,0,70,71,3,13,6,0,71,75,1,0,0,0,72,73,5,46,0,0,73,
        75,3,13,6,0,74,68,1,0,0,0,74,72,1,0,0,0,75,10,1,0,0,0,76,77,7,9,
        0,0,77,12,1,0,0,0,78,80,3,11,5,0,79,78,1,0,0,0,80,81,1,0,0,0,81,
        79,1,0,0,0,81,82,1,0,0,0,82,14,1,0,0,0,83,85,5,35,0,0,84,83,1,0,
        0,0,85,86,1,0,0,0,86,84,1,0,0,0,86,87,1,0,0,0,87,91,1,0,0,0,88,90,
        8,10,0,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,0,0,91,92,1,0,0,0,
        92,97,1,0,0,0,93,91,1,0,0,0,94,96,5,35,0,0,95,94,1,0,0,0,96,99,1,
        0,0,0,97,95,1,0,0,0,97,98,1,0,0,0,98,103,1,0,0,0,99,97,1,0,0,0,100,
        102,8,10,0,0,101,100,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,
        104,1,0,0,0,104,106,1,0,0,0,105,103,1,0,0,0,106,107,6,7,0,0,107,
        16,1,0,0,0,108,110,5,33,0,0,109,108,1,0,0,0,110,111,1,0,0,0,111,
        109,1,0,0,0,111,112,1,0,0,0,112,116,1,0,0,0,113,115,8,10,0,0,114,
        113,1,0,0,0,115,118,1,0,0,0,116,114,1,0,0,0,116,117,1,0,0,0,117,
        122,1,0,0,0,118,116,1,0,0,0,119,121,5,33,0,0,120,119,1,0,0,0,121,
        124,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,128,1,0,0,0,124,
        122,1,0,0,0,125,127,8,10,0,0,126,125,1,0,0,0,127,130,1,0,0,0,128,
        126,1,0,0,0,128,129,1,0,0,0,129,131,1,0,0,0,130,128,1,0,0,0,131,
        132,6,8,0,0,132,18,1,0,0,0,133,135,5,59,0,0,134,133,1,0,0,0,135,
        136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,137,141,1,0,0,0,138,
        140,8,10,0,0,139,138,1,0,0,0,140,143,1,0,0,0,141,139,1,0,0,0,141,
        142,1,0,0,0,142,147,1,0,0,0,143,141,1,0,0,0,144,146,5,59,0,0,145,
        144,1,0,0,0,146,149,1,0,0,0,147,145,1,0,0,0,147,148,1,0,0,0,148,
        153,1,0,0,0,149,147,1,0,0,0,150,152,8,10,0,0,151,150,1,0,0,0,152,
        155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,156,1,0,0,0,155,
        153,1,0,0,0,156,157,6,9,0,0,157,20,1,0,0,0,158,159,3,35,17,0,159,
        160,3,13,6,0,160,161,3,35,17,0,161,22,1,0,0,0,162,163,7,11,0,0,163,
        24,1,0,0,0,164,167,3,23,11,0,165,167,3,11,5,0,166,164,1,0,0,0,166,
        165,1,0,0,0,167,26,1,0,0,0,168,171,3,25,12,0,169,171,5,95,0,0,170,
        168,1,0,0,0,170,169,1,0,0,0,171,28,1,0,0,0,172,175,3,27,13,0,173,
        175,7,12,0,0,174,172,1,0,0,0,174,173,1,0,0,0,175,30,1,0,0,0,176,
        179,3,25,12,0,177,179,5,39,0,0,178,176,1,0,0,0,178,177,1,0,0,0,179,
        32,1,0,0,0,180,183,3,25,12,0,181,183,7,8,0,0,182,180,1,0,0,0,182,
        181,1,0,0,0,183,34,1,0,0,0,184,188,3,27,13,0,185,187,3,29,14,0,186,
        185,1,0,0,0,187,190,1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,
        36,1,0,0,0,190,188,1,0,0,0,191,193,7,13,0,0,192,191,1,0,0,0,193,
        194,1,0,0,0,194,192,1,0,0,0,194,195,1,0,0,0,195,196,1,0,0,0,196,
        197,6,18,1,0,197,38,1,0,0,0,198,203,5,40,0,0,199,202,3,39,19,0,200,
        202,9,0,0,0,201,199,1,0,0,0,201,200,1,0,0,0,202,205,1,0,0,0,203,
        204,1,0,0,0,203,201,1,0,0,0,204,206,1,0,0,0,205,203,1,0,0,0,206,
        207,5,41,0,0,207,208,1,0,0,0,208,209,6,19,0,0,209,40,1,0,0,0,210,
        248,7,14,0,0,211,213,5,47,0,0,212,214,5,47,0,0,213,212,1,0,0,0,214,
        215,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,248,1,0,0,0,217,
        219,5,42,0,0,218,220,5,42,0,0,219,218,1,0,0,0,220,221,1,0,0,0,221,
        219,1,0,0,0,221,222,1,0,0,0,222,248,1,0,0,0,223,225,5,45,0,0,224,
        226,5,45,0,0,225,224,1,0,0,0,226,227,1,0,0,0,227,225,1,0,0,0,227,
        228,1,0,0,0,228,248,1,0,0,0,229,231,5,43,0,0,230,232,5,43,0,0,231,
        230,1,0,0,0,232,233,1,0,0,0,233,231,1,0,0,0,233,234,1,0,0,0,234,
        248,1,0,0,0,235,237,5,61,0,0,236,238,5,61,0,0,237,236,1,0,0,0,238,
        239,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,248,1,0,0,0,241,
        242,7,15,0,0,242,243,7,7,0,0,243,244,7,16,0,0,244,245,7,4,0,0,245,
        246,7,15,0,0,246,248,7,17,0,0,247,210,1,0,0,0,247,211,1,0,0,0,247,
        217,1,0,0,0,247,223,1,0,0,0,247,229,1,0,0,0,247,235,1,0,0,0,247,
        241,1,0,0,0,248,252,1,0,0,0,249,251,5,32,0,0,250,249,1,0,0,0,251,
        254,1,0,0,0,252,250,1,0,0,0,252,253,1,0,0,0,253,256,1,0,0,0,254,
        252,1,0,0,0,255,257,7,10,0,0,256,255,1,0,0,0,257,258,1,0,0,0,258,
        256,1,0,0,0,258,259,1,0,0,0,259,260,1,0,0,0,260,261,6,20,0,0,261,
        42,1,0,0,0,262,300,7,14,0,0,263,265,5,47,0,0,264,266,5,47,0,0,265,
        264,1,0,0,0,266,267,1,0,0,0,267,265,1,0,0,0,267,268,1,0,0,0,268,
        300,1,0,0,0,269,271,5,42,0,0,270,272,5,42,0,0,271,270,1,0,0,0,272,
        273,1,0,0,0,273,271,1,0,0,0,273,274,1,0,0,0,274,300,1,0,0,0,275,
        277,5,45,0,0,276,278,5,45,0,0,277,276,1,0,0,0,278,279,1,0,0,0,279,
        277,1,0,0,0,279,280,1,0,0,0,280,300,1,0,0,0,281,283,5,43,0,0,282,
        284,5,43,0,0,283,282,1,0,0,0,284,285,1,0,0,0,285,283,1,0,0,0,285,
        286,1,0,0,0,286,300,1,0,0,0,287,289,5,61,0,0,288,290,5,61,0,0,289,
        288,1,0,0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,292,
        300,1,0,0,0,293,294,7,15,0,0,294,295,7,7,0,0,295,296,7,16,0,0,296,
        297,7,4,0,0,297,298,7,15,0,0,298,300,7,17,0,0,299,262,1,0,0,0,299,
        263,1,0,0,0,299,269,1,0,0,0,299,275,1,0,0,0,299,281,1,0,0,0,299,
        287,1,0,0,0,299,293,1,0,0,0,300,304,1,0,0,0,301,303,8,10,0,0,302,
        301,1,0,0,0,303,306,1,0,0,0,304,302,1,0,0,0,304,305,1,0,0,0,305,
        307,1,0,0,0,306,304,1,0,0,0,307,308,6,21,0,0,308,44,1,0,0,0,42,0,
        57,62,66,74,81,86,91,97,103,111,116,122,128,136,141,147,153,166,
        170,174,178,182,188,194,201,203,215,221,227,233,239,247,252,258,
        267,273,279,285,291,299,304,2,0,1,0,6,0,0
    ]

class IsdMRLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    Distance = 1
    Equ_op = 2
    Integer = 3
    Float = 4
    SHARP_COMMENT = 5
    EXCLM_COMMENT = 6
    SMCLN_COMMENT = 7
    Atom_selection = 8
    SPACE = 9
    ENCLOSE_COMMENT = 10
    SECTION_COMMENT = 11
    LINE_COMMENT = 12

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'DISTANCE'", "'='" ]

    symbolicNames = [ "<INVALID>",
            "Distance", "Equ_op", "Integer", "Float", "SHARP_COMMENT", "EXCLM_COMMENT", 
            "SMCLN_COMMENT", "Atom_selection", "SPACE", "ENCLOSE_COMMENT", 
            "SECTION_COMMENT", "LINE_COMMENT" ]

    ruleNames = [ "Distance", "Equ_op", "Integer", "Float", "DEC_DOT_DEC", 
                  "DEC_DIGIT", "DECIMAL", "SHARP_COMMENT", "EXCLM_COMMENT", 
                  "SMCLN_COMMENT", "Atom_selection", "ALPHA", "ALPHA_NUM", 
                  "START_CHAR", "NAME_CHAR", "ATM_NAME_CHAR", "ATM_TYPE_CHAR", 
                  "SIMPLE_NAME", "SPACE", "ENCLOSE_COMMENT", "SECTION_COMMENT", 
                  "LINE_COMMENT" ]

    grammarFileName = "IsdMRLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


