# Generated from XplorMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,288,2248,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,261,8,0,10,0,12,0,264,
        9,0,1,0,1,0,1,1,1,1,5,1,270,8,1,10,1,12,1,273,9,1,1,1,1,1,1,2,3,
        2,278,8,2,1,2,1,2,5,2,282,8,2,10,2,12,2,285,9,2,1,2,1,2,1,3,1,3,
        5,3,291,8,3,10,3,12,3,294,9,3,1,3,1,3,1,3,5,3,299,8,3,10,3,12,3,
        302,9,3,1,3,1,3,1,3,5,3,307,8,3,10,3,12,3,310,9,3,1,3,1,3,1,3,5,
        3,315,8,3,10,3,12,3,318,9,3,1,3,1,3,1,3,5,3,323,8,3,10,3,12,3,326,
        9,3,1,3,3,3,329,8,3,1,4,3,4,332,8,4,1,4,1,4,5,4,336,8,4,10,4,12,
        4,339,9,4,1,4,1,4,1,5,3,5,344,8,5,1,5,1,5,5,5,348,8,5,10,5,12,5,
        351,9,5,1,5,1,5,1,6,1,6,5,6,357,8,6,10,6,12,6,360,9,6,1,6,1,6,1,
        7,1,7,5,7,366,8,7,10,7,12,7,369,9,7,1,7,1,7,1,8,1,8,5,8,375,8,8,
        10,8,12,8,378,9,8,1,8,1,8,1,9,1,9,5,9,384,8,9,10,9,12,9,387,9,9,
        1,9,1,9,1,10,1,10,5,10,393,8,10,10,10,12,10,396,9,10,1,10,1,10,1,
        11,1,11,5,11,402,8,11,10,11,12,11,405,9,11,1,11,1,11,1,12,1,12,5,
        12,411,8,12,10,12,12,12,414,9,12,1,12,1,12,1,13,1,13,5,13,420,8,
        13,10,13,12,13,423,9,13,1,13,1,13,1,14,1,14,5,14,429,8,14,10,14,
        12,14,432,9,14,1,14,1,14,1,15,1,15,5,15,438,8,15,10,15,12,15,441,
        9,15,1,15,1,15,1,16,1,16,5,16,447,8,16,10,16,12,16,450,9,16,1,16,
        1,16,1,17,1,17,5,17,456,8,17,10,17,12,17,459,9,17,1,17,1,17,1,18,
        1,18,5,18,465,8,18,10,18,12,18,468,9,18,1,18,1,18,1,19,1,19,5,19,
        474,8,19,10,19,12,19,477,9,19,1,19,1,19,1,20,1,20,5,20,483,8,20,
        10,20,12,20,486,9,20,1,20,1,20,1,21,1,21,5,21,492,8,21,10,21,12,
        21,495,9,21,1,21,1,21,1,22,1,22,5,22,501,8,22,10,22,12,22,504,9,
        22,1,22,1,22,1,23,1,23,5,23,510,8,23,10,23,12,23,513,9,23,1,23,1,
        23,1,24,1,24,5,24,519,8,24,10,24,12,24,522,9,24,1,24,1,24,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,538,8,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,3,25,557,8,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,3,25,570,8,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,3,25,594,8,25,1,25,3,25,597,8,25,1,26,1,26,
        1,26,1,26,1,26,3,26,604,8,26,1,26,3,26,607,8,26,1,26,5,26,610,8,
        26,10,26,12,26,613,9,26,1,26,1,26,3,26,617,8,26,1,26,1,26,1,26,5,
        26,622,8,26,10,26,12,26,625,9,26,1,27,1,27,3,27,629,8,27,1,27,1,
        27,1,27,3,27,634,8,27,1,27,1,27,1,27,1,27,1,27,3,27,641,8,27,1,28,
        1,28,3,28,645,8,28,1,28,1,28,1,28,3,28,650,8,28,1,28,1,28,1,28,3,
        28,655,8,28,1,28,1,28,1,28,3,28,660,8,28,1,28,1,28,1,28,3,28,665,
        8,28,1,28,1,28,1,28,3,28,670,8,28,1,28,1,28,1,28,3,28,675,8,28,1,
        28,3,28,678,8,28,1,29,1,29,1,29,1,29,3,29,684,8,29,1,29,1,29,1,29,
        1,29,3,29,690,8,29,1,29,3,29,693,8,29,1,30,1,30,1,30,1,30,1,30,1,
        30,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,723,8,31,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,734,8,32,1,32,3,
        32,737,8,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,
        33,1,33,1,33,3,33,765,8,33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,3,34,782,8,34,1,35,1,35,1,
        35,3,35,787,8,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,3,35,800,8,35,1,35,1,35,1,35,1,35,1,35,3,35,807,8,35,1,36,
        1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,819,8,36,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,37,
        834,8,37,1,38,1,38,1,38,1,38,1,38,3,38,841,8,38,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,1,39,3,39,864,8,39,1,40,1,40,1,40,1,40,1,40,1,
        40,1,40,3,40,873,8,40,1,41,1,41,5,41,877,8,41,10,41,12,41,880,9,
        41,1,41,1,41,3,41,884,8,41,1,42,1,42,3,42,888,8,42,1,42,1,42,1,42,
        3,42,893,8,42,1,42,3,42,896,8,42,1,43,1,43,3,43,900,8,43,1,43,1,
        43,1,43,3,43,905,8,43,1,43,1,43,1,43,3,43,910,8,43,1,43,1,43,3,43,
        914,8,43,1,43,1,43,1,43,1,43,3,43,920,8,43,1,43,1,43,3,43,924,8,
        43,1,43,1,43,3,43,928,8,43,1,43,3,43,931,8,43,3,43,933,8,43,1,43,
        1,43,3,43,937,8,43,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,
        1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,
        3,45,961,8,45,1,45,1,45,1,45,1,45,1,45,1,45,3,45,969,8,45,1,46,1,
        46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,
        47,3,47,986,8,47,1,47,1,47,1,47,1,47,1,47,1,47,3,47,994,8,47,1,47,
        1,47,1,47,1,47,3,47,1000,8,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,3,47,1011,8,47,1,47,3,47,1014,8,47,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,1,48,1,48,3,48,1026,8,48,1,48,1,48,1,48,1,48,
        1,48,3,48,1033,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,3,49,1061,8,49,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,
        3,52,1095,8,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,1105,
        8,52,1,52,1,52,1,52,3,52,1110,8,52,1,53,1,53,1,53,3,53,1115,8,53,
        1,53,1,53,3,53,1119,8,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,
        1,55,1,55,3,55,1131,8,55,1,55,1,55,1,56,1,56,1,56,1,57,1,57,1,57,
        1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,1,60,1,60,
        1,60,3,60,1155,8,60,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1175,8,62,1,62,
        1,62,1,62,1,62,3,62,1181,8,62,1,62,1,62,1,62,1,62,3,62,1187,8,62,
        1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1199,8,62,
        1,62,1,62,1,62,1,62,3,62,1205,8,62,1,62,1,62,1,62,1,62,3,62,1211,
        8,62,1,62,1,62,1,62,1,62,1,62,1,62,3,62,1219,8,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,3,62,1229,8,62,1,62,1,62,1,62,1,62,3,62,
        1235,8,62,1,62,1,62,1,62,1,62,3,62,1241,8,62,1,62,1,62,1,62,1,62,
        1,62,1,62,1,62,1,62,1,62,3,62,1252,8,62,1,62,3,62,1255,8,62,1,62,
        3,62,1258,8,62,1,62,1,62,3,62,1262,8,62,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,1,63,1,63,1,63,3,63,1274,8,63,1,63,1,63,1,63,1,63,1,63,
        3,63,1281,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1288,8,63,1,64,1,64,
        1,64,1,64,1,64,3,64,1295,8,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,66,
        1,66,1,66,1,66,1,66,1,66,1,66,1,66,3,66,1324,8,66,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,3,67,1335,8,67,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1375,8,68,1,68,1,68,
        1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,
        1,68,1,68,3,68,1394,8,68,1,69,1,69,1,69,1,69,1,69,1,69,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,
        1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,
        1429,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,
        1441,8,71,1,71,3,71,1444,8,71,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,
        1,72,1,72,1,72,1,72,1,72,1,72,3,72,1472,8,72,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,3,73,1496,8,73,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,1,75,3,75,1533,8,75,1,75,1,75,1,75,1,75,1,75,1,75,
        3,75,1541,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,3,76,1556,8,76,1,77,1,77,1,77,3,77,1561,8,77,1,77,
        1,77,1,77,3,77,1566,8,77,1,77,1,77,1,77,1,77,3,77,1572,8,77,1,77,
        1,77,1,77,3,77,1577,8,77,1,77,1,77,1,77,1,77,3,77,1583,8,77,1,77,
        1,77,1,77,1,77,3,77,1589,8,77,1,77,1,77,1,77,1,77,3,77,1595,8,77,
        1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,3,77,1607,8,77,
        1,77,1,77,3,77,1611,8,77,1,78,1,78,1,78,1,78,1,78,3,78,1618,8,78,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,3,79,1639,8,79,1,79,1,79,1,79,1,79,
        1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,3,79,1656,
        8,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1666,8,80,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,
        1694,8,81,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,3,82,1705,
        8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,
        1718,8,83,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,85,1,85,1,85,1,85,
        1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
        3,85,1744,8,85,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1752,8,86,1,87,
        1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,1,87,3,87,1765,8,87,
        1,88,1,88,1,88,1,88,1,88,1,89,1,89,1,89,3,89,1775,8,89,1,89,1,89,
        1,89,3,89,1780,8,89,1,89,1,89,1,89,3,89,1785,8,89,1,89,1,89,1,89,
        3,89,1790,8,89,1,89,1,89,1,89,3,89,1795,8,89,1,89,1,89,1,89,3,89,
        1800,8,89,1,89,1,89,1,89,3,89,1805,8,89,1,89,1,89,1,89,3,89,1810,
        8,89,1,89,1,89,1,89,3,89,1815,8,89,1,89,1,89,1,89,3,89,1820,8,89,
        1,89,1,89,1,89,3,89,1825,8,89,1,89,1,89,1,89,3,89,1830,8,89,1,89,
        1,89,1,89,3,89,1835,8,89,1,89,3,89,1838,8,89,1,90,1,90,1,90,1,90,
        1,91,1,91,1,91,1,91,1,92,1,92,1,92,5,92,1851,8,92,10,92,12,92,1854,
        9,92,1,93,1,93,1,93,5,93,1859,8,93,10,93,12,93,1862,9,93,1,94,1,
        94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1876,8,
        94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,
        94,1,94,3,94,1892,8,94,3,94,1894,8,94,1,94,1,94,1,94,1,94,1,94,1,
        94,1,94,1,94,1,94,3,94,1905,8,94,1,94,1,94,1,94,3,94,1910,8,94,3,
        94,1912,8,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1920,8,94,1,94,1,
        94,3,94,1924,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,
        94,1935,8,94,1,94,1,94,3,94,1939,8,94,1,94,1,94,3,94,1943,8,94,1,
        94,3,94,1946,8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,
        94,1,94,3,94,1959,8,94,1,94,3,94,1962,8,94,1,94,1,94,1,94,1,94,1,
        94,3,94,1969,8,94,3,94,1971,8,94,1,94,1,94,1,94,1,94,1,94,3,94,1978,
        8,94,1,94,1,94,1,94,3,94,1983,8,94,3,94,1985,8,94,1,94,1,94,1,94,
        1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,3,94,1999,8,94,1,94,
        1,94,1,94,1,94,1,94,1,94,5,94,2007,8,94,10,94,12,94,2010,9,94,1,
        95,1,95,1,96,1,96,1,97,1,97,1,98,1,98,1,99,1,99,1,99,5,99,2023,8,
        99,10,99,12,99,2026,9,99,1,99,3,99,2029,8,99,3,99,2031,8,99,1,99,
        1,99,5,99,2035,8,99,10,99,12,99,2038,9,99,1,99,1,99,1,100,1,100,
        1,100,1,100,1,101,1,101,1,101,1,101,1,101,1,101,3,101,2052,8,101,
        1,102,1,102,1,102,3,102,2057,8,102,1,103,1,103,1,103,3,103,2062,
        8,103,1,104,1,104,1,104,1,104,1,104,1,104,1,104,3,104,2071,8,104,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,5,105,2133,8,105,10,105,12,105,2136,
        9,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,5,105,2150,8,105,10,105,12,105,2153,9,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,1,105,
        1,105,1,105,3,105,2192,8,105,1,106,1,106,1,106,1,106,1,106,1,107,
        1,107,1,107,1,107,1,107,1,107,1,108,1,108,1,108,3,108,2208,8,108,
        1,109,1,109,1,109,1,109,1,109,5,109,2215,8,109,10,109,12,109,2218,
        9,109,1,109,5,109,2221,8,109,10,109,12,109,2224,9,109,1,109,5,109,
        2227,8,109,10,109,12,109,2230,9,109,3,109,2232,8,109,1,109,1,109,
        1,109,1,109,1,109,5,109,2239,8,109,10,109,12,109,2242,9,109,1,109,
        1,109,1,109,1,109,1,109,0,1,188,110,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,0,8,1,0,42,43,1,0,187,188,2,0,180,
        180,189,189,3,0,180,180,182,182,199,199,2,0,180,180,182,182,1,0,
        167,168,1,0,230,234,1,0,269,275,2683,0,262,1,0,0,0,2,267,1,0,0,0,
        4,277,1,0,0,0,6,328,1,0,0,0,8,331,1,0,0,0,10,343,1,0,0,0,12,354,
        1,0,0,0,14,363,1,0,0,0,16,372,1,0,0,0,18,381,1,0,0,0,20,390,1,0,
        0,0,22,399,1,0,0,0,24,408,1,0,0,0,26,417,1,0,0,0,28,426,1,0,0,0,
        30,435,1,0,0,0,32,444,1,0,0,0,34,453,1,0,0,0,36,462,1,0,0,0,38,471,
        1,0,0,0,40,480,1,0,0,0,42,489,1,0,0,0,44,498,1,0,0,0,46,507,1,0,
        0,0,48,516,1,0,0,0,50,596,1,0,0,0,52,598,1,0,0,0,54,640,1,0,0,0,
        56,677,1,0,0,0,58,692,1,0,0,0,60,694,1,0,0,0,62,722,1,0,0,0,64,724,
        1,0,0,0,66,764,1,0,0,0,68,766,1,0,0,0,70,806,1,0,0,0,72,808,1,0,
        0,0,74,833,1,0,0,0,76,835,1,0,0,0,78,863,1,0,0,0,80,865,1,0,0,0,
        82,883,1,0,0,0,84,895,1,0,0,0,86,936,1,0,0,0,88,938,1,0,0,0,90,968,
        1,0,0,0,92,970,1,0,0,0,94,1013,1,0,0,0,96,1015,1,0,0,0,98,1060,1,
        0,0,0,100,1062,1,0,0,0,102,1071,1,0,0,0,104,1109,1,0,0,0,106,1111,
        1,0,0,0,108,1120,1,0,0,0,110,1124,1,0,0,0,112,1134,1,0,0,0,114,1137,
        1,0,0,0,116,1140,1,0,0,0,118,1143,1,0,0,0,120,1146,1,0,0,0,122,1156,
        1,0,0,0,124,1261,1,0,0,0,126,1263,1,0,0,0,128,1294,1,0,0,0,130,1296,
        1,0,0,0,132,1323,1,0,0,0,134,1325,1,0,0,0,136,1393,1,0,0,0,138,1395,
        1,0,0,0,140,1428,1,0,0,0,142,1430,1,0,0,0,144,1471,1,0,0,0,146,1495,
        1,0,0,0,148,1497,1,0,0,0,150,1540,1,0,0,0,152,1542,1,0,0,0,154,1610,
        1,0,0,0,156,1612,1,0,0,0,158,1655,1,0,0,0,160,1657,1,0,0,0,162,1693,
        1,0,0,0,164,1695,1,0,0,0,166,1717,1,0,0,0,168,1719,1,0,0,0,170,1743,
        1,0,0,0,172,1745,1,0,0,0,174,1764,1,0,0,0,176,1766,1,0,0,0,178,1837,
        1,0,0,0,180,1839,1,0,0,0,182,1843,1,0,0,0,184,1847,1,0,0,0,186,1855,
        1,0,0,0,188,1998,1,0,0,0,190,2011,1,0,0,0,192,2013,1,0,0,0,194,2015,
        1,0,0,0,196,2017,1,0,0,0,198,2019,1,0,0,0,200,2041,1,0,0,0,202,2051,
        1,0,0,0,204,2053,1,0,0,0,206,2058,1,0,0,0,208,2070,1,0,0,0,210,2191,
        1,0,0,0,212,2193,1,0,0,0,214,2198,1,0,0,0,216,2204,1,0,0,0,218,2209,
        1,0,0,0,220,261,3,2,1,0,221,261,3,4,2,0,222,261,3,6,3,0,223,261,
        3,8,4,0,224,261,3,10,5,0,225,261,3,12,6,0,226,261,3,14,7,0,227,261,
        3,16,8,0,228,261,3,18,9,0,229,261,3,20,10,0,230,261,3,22,11,0,231,
        261,3,24,12,0,232,261,3,26,13,0,233,261,3,28,14,0,234,261,3,30,15,
        0,235,261,3,32,16,0,236,261,3,34,17,0,237,261,3,36,18,0,238,261,
        3,38,19,0,239,261,3,40,20,0,240,261,3,42,21,0,241,261,3,44,22,0,
        242,261,3,46,23,0,243,261,3,48,24,0,244,261,3,198,99,0,245,261,3,
        200,100,0,246,261,3,214,107,0,247,261,3,52,26,0,248,261,3,60,30,
        0,249,261,3,64,32,0,250,261,3,82,41,0,251,261,3,88,44,0,252,261,
        3,176,88,0,253,261,3,180,90,0,254,261,3,96,48,0,255,261,3,92,46,
        0,256,261,3,130,65,0,257,261,3,142,71,0,258,261,3,156,78,0,259,261,
        3,160,80,0,260,220,1,0,0,0,260,221,1,0,0,0,260,222,1,0,0,0,260,223,
        1,0,0,0,260,224,1,0,0,0,260,225,1,0,0,0,260,226,1,0,0,0,260,227,
        1,0,0,0,260,228,1,0,0,0,260,229,1,0,0,0,260,230,1,0,0,0,260,231,
        1,0,0,0,260,232,1,0,0,0,260,233,1,0,0,0,260,234,1,0,0,0,260,235,
        1,0,0,0,260,236,1,0,0,0,260,237,1,0,0,0,260,238,1,0,0,0,260,239,
        1,0,0,0,260,240,1,0,0,0,260,241,1,0,0,0,260,242,1,0,0,0,260,243,
        1,0,0,0,260,244,1,0,0,0,260,245,1,0,0,0,260,246,1,0,0,0,260,247,
        1,0,0,0,260,248,1,0,0,0,260,249,1,0,0,0,260,250,1,0,0,0,260,251,
        1,0,0,0,260,252,1,0,0,0,260,253,1,0,0,0,260,254,1,0,0,0,260,255,
        1,0,0,0,260,256,1,0,0,0,260,257,1,0,0,0,260,258,1,0,0,0,260,259,
        1,0,0,0,261,264,1,0,0,0,262,260,1,0,0,0,262,263,1,0,0,0,263,265,
        1,0,0,0,264,262,1,0,0,0,265,266,5,0,0,1,266,1,1,0,0,0,267,271,5,
        3,0,0,268,270,3,50,25,0,269,268,1,0,0,0,270,273,1,0,0,0,271,269,
        1,0,0,0,271,272,1,0,0,0,272,274,1,0,0,0,273,271,1,0,0,0,274,275,
        5,2,0,0,275,3,1,0,0,0,276,278,5,36,0,0,277,276,1,0,0,0,277,278,1,
        0,0,0,278,279,1,0,0,0,279,283,5,37,0,0,280,282,3,58,29,0,281,280,
        1,0,0,0,282,285,1,0,0,0,283,281,1,0,0,0,283,284,1,0,0,0,284,286,
        1,0,0,0,285,283,1,0,0,0,286,287,5,2,0,0,287,5,1,0,0,0,288,292,5,
        39,0,0,289,291,3,62,31,0,290,289,1,0,0,0,291,294,1,0,0,0,292,290,
        1,0,0,0,292,293,1,0,0,0,293,295,1,0,0,0,294,292,1,0,0,0,295,329,
        5,2,0,0,296,300,7,0,0,0,297,299,3,66,33,0,298,297,1,0,0,0,299,302,
        1,0,0,0,300,298,1,0,0,0,300,301,1,0,0,0,301,303,1,0,0,0,302,300,
        1,0,0,0,303,329,5,2,0,0,304,308,5,47,0,0,305,307,3,70,35,0,306,305,
        1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,311,
        1,0,0,0,310,308,1,0,0,0,311,329,5,2,0,0,312,316,5,50,0,0,313,315,
        3,74,37,0,314,313,1,0,0,0,315,318,1,0,0,0,316,314,1,0,0,0,316,317,
        1,0,0,0,317,319,1,0,0,0,318,316,1,0,0,0,319,329,5,2,0,0,320,324,
        5,51,0,0,321,323,3,78,39,0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,
        1,0,0,0,324,325,1,0,0,0,325,327,1,0,0,0,326,324,1,0,0,0,327,329,
        5,2,0,0,328,288,1,0,0,0,328,296,1,0,0,0,328,304,1,0,0,0,328,312,
        1,0,0,0,328,320,1,0,0,0,329,7,1,0,0,0,330,332,5,36,0,0,331,330,1,
        0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,337,5,52,0,0,334,336,3,
        82,41,0,335,334,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,337,338,
        1,0,0,0,338,340,1,0,0,0,339,337,1,0,0,0,340,341,5,2,0,0,341,9,1,
        0,0,0,342,344,5,36,0,0,343,342,1,0,0,0,343,344,1,0,0,0,344,345,1,
        0,0,0,345,349,5,57,0,0,346,348,3,86,43,0,347,346,1,0,0,0,348,351,
        1,0,0,0,349,347,1,0,0,0,349,350,1,0,0,0,350,352,1,0,0,0,351,349,
        1,0,0,0,352,353,5,2,0,0,353,11,1,0,0,0,354,358,5,60,0,0,355,357,
        3,90,45,0,356,355,1,0,0,0,357,360,1,0,0,0,358,356,1,0,0,0,358,359,
        1,0,0,0,359,361,1,0,0,0,360,358,1,0,0,0,361,362,5,2,0,0,362,13,1,
        0,0,0,363,367,5,64,0,0,364,366,3,94,47,0,365,364,1,0,0,0,366,369,
        1,0,0,0,367,365,1,0,0,0,367,368,1,0,0,0,368,370,1,0,0,0,369,367,
        1,0,0,0,370,371,5,2,0,0,371,15,1,0,0,0,372,376,5,66,0,0,373,375,
        3,98,49,0,374,373,1,0,0,0,375,378,1,0,0,0,376,374,1,0,0,0,376,377,
        1,0,0,0,377,379,1,0,0,0,378,376,1,0,0,0,379,380,5,2,0,0,380,17,1,
        0,0,0,381,385,5,70,0,0,382,384,3,104,52,0,383,382,1,0,0,0,384,387,
        1,0,0,0,385,383,1,0,0,0,385,386,1,0,0,0,386,388,1,0,0,0,387,385,
        1,0,0,0,388,389,5,2,0,0,389,19,1,0,0,0,390,394,5,78,0,0,391,393,
        3,124,62,0,392,391,1,0,0,0,393,396,1,0,0,0,394,392,1,0,0,0,394,395,
        1,0,0,0,395,397,1,0,0,0,396,394,1,0,0,0,397,398,5,2,0,0,398,21,1,
        0,0,0,399,403,5,85,0,0,400,402,3,128,64,0,401,400,1,0,0,0,402,405,
        1,0,0,0,403,401,1,0,0,0,403,404,1,0,0,0,404,406,1,0,0,0,405,403,
        1,0,0,0,406,407,5,2,0,0,407,23,1,0,0,0,408,412,5,86,0,0,409,411,
        3,132,66,0,410,409,1,0,0,0,411,414,1,0,0,0,412,410,1,0,0,0,412,413,
        1,0,0,0,413,415,1,0,0,0,414,412,1,0,0,0,415,416,5,2,0,0,416,25,1,
        0,0,0,417,421,5,87,0,0,418,420,3,136,68,0,419,418,1,0,0,0,420,423,
        1,0,0,0,421,419,1,0,0,0,421,422,1,0,0,0,422,424,1,0,0,0,423,421,
        1,0,0,0,424,425,5,2,0,0,425,27,1,0,0,0,426,430,5,91,0,0,427,429,
        3,140,70,0,428,427,1,0,0,0,429,432,1,0,0,0,430,428,1,0,0,0,430,431,
        1,0,0,0,431,433,1,0,0,0,432,430,1,0,0,0,433,434,5,2,0,0,434,29,1,
        0,0,0,435,439,5,93,0,0,436,438,3,144,72,0,437,436,1,0,0,0,438,441,
        1,0,0,0,439,437,1,0,0,0,439,440,1,0,0,0,440,442,1,0,0,0,441,439,
        1,0,0,0,442,443,5,2,0,0,443,31,1,0,0,0,444,448,5,94,0,0,445,447,
        3,146,73,0,446,445,1,0,0,0,447,450,1,0,0,0,448,446,1,0,0,0,448,449,
        1,0,0,0,449,451,1,0,0,0,450,448,1,0,0,0,451,452,5,2,0,0,452,33,1,
        0,0,0,453,457,5,95,0,0,454,456,3,150,75,0,455,454,1,0,0,0,456,459,
        1,0,0,0,457,455,1,0,0,0,457,458,1,0,0,0,458,460,1,0,0,0,459,457,
        1,0,0,0,460,461,5,2,0,0,461,35,1,0,0,0,462,466,5,98,0,0,463,465,
        3,154,77,0,464,463,1,0,0,0,465,468,1,0,0,0,466,464,1,0,0,0,466,467,
        1,0,0,0,467,469,1,0,0,0,468,466,1,0,0,0,469,470,5,2,0,0,470,37,1,
        0,0,0,471,475,5,103,0,0,472,474,3,158,79,0,473,472,1,0,0,0,474,477,
        1,0,0,0,475,473,1,0,0,0,475,476,1,0,0,0,476,478,1,0,0,0,477,475,
        1,0,0,0,478,479,5,2,0,0,479,39,1,0,0,0,480,484,5,114,0,0,481,483,
        3,162,81,0,482,481,1,0,0,0,483,486,1,0,0,0,484,482,1,0,0,0,484,485,
        1,0,0,0,485,487,1,0,0,0,486,484,1,0,0,0,487,488,5,2,0,0,488,41,1,
        0,0,0,489,493,5,115,0,0,490,492,3,166,83,0,491,490,1,0,0,0,492,495,
        1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,496,1,0,0,0,495,493,
        1,0,0,0,496,497,5,2,0,0,497,43,1,0,0,0,498,502,5,116,0,0,499,501,
        3,170,85,0,500,499,1,0,0,0,501,504,1,0,0,0,502,500,1,0,0,0,502,503,
        1,0,0,0,503,505,1,0,0,0,504,502,1,0,0,0,505,506,5,2,0,0,506,45,1,
        0,0,0,507,511,5,118,0,0,508,510,3,174,87,0,509,508,1,0,0,0,510,513,
        1,0,0,0,511,509,1,0,0,0,511,512,1,0,0,0,512,514,1,0,0,0,513,511,
        1,0,0,0,514,515,5,2,0,0,515,47,1,0,0,0,516,520,5,119,0,0,517,519,
        3,178,89,0,518,517,1,0,0,0,519,522,1,0,0,0,520,518,1,0,0,0,520,521,
        1,0,0,0,521,523,1,0,0,0,522,520,1,0,0,0,523,524,5,2,0,0,524,49,1,
        0,0,0,525,597,3,52,26,0,526,527,5,5,0,0,527,528,5,187,0,0,528,597,
        3,194,97,0,529,530,5,6,0,0,530,531,5,210,0,0,531,597,5,209,0,0,532,
        533,5,7,0,0,533,534,5,187,0,0,534,597,3,194,97,0,535,537,5,8,0,0,
        536,538,5,193,0,0,537,536,1,0,0,0,537,538,1,0,0,0,538,539,1,0,0,
        0,539,597,3,194,97,0,540,541,5,9,0,0,541,597,5,187,0,0,542,543,5,
        10,0,0,543,597,5,187,0,0,544,545,5,11,0,0,545,546,5,187,0,0,546,
        547,5,187,0,0,547,597,3,194,97,0,548,549,5,12,0,0,549,550,5,187,
        0,0,550,597,5,180,0,0,551,552,5,13,0,0,552,553,5,187,0,0,553,597,
        5,180,0,0,554,556,5,14,0,0,555,557,5,193,0,0,556,555,1,0,0,0,556,
        557,1,0,0,0,557,558,1,0,0,0,558,597,5,180,0,0,559,560,5,15,0,0,560,
        561,5,214,0,0,561,597,5,213,0,0,562,563,5,16,0,0,563,564,3,54,27,
        0,564,565,5,2,0,0,565,597,1,0,0,0,566,567,5,17,0,0,567,569,5,18,
        0,0,568,570,5,193,0,0,569,568,1,0,0,0,569,570,1,0,0,0,570,571,1,
        0,0,0,571,597,3,194,97,0,572,597,5,19,0,0,573,574,5,20,0,0,574,575,
        5,187,0,0,575,597,3,194,97,0,576,577,5,21,0,0,577,578,5,187,0,0,
        578,597,3,194,97,0,579,580,5,22,0,0,580,581,5,187,0,0,581,597,3,
        194,97,0,582,583,5,23,0,0,583,584,5,187,0,0,584,597,3,194,97,0,585,
        586,5,24,0,0,586,587,5,187,0,0,587,597,3,194,97,0,588,589,5,25,0,
        0,589,590,5,187,0,0,590,597,3,194,97,0,591,593,5,26,0,0,592,594,
        5,193,0,0,593,592,1,0,0,0,593,594,1,0,0,0,594,595,1,0,0,0,595,597,
        3,194,97,0,596,525,1,0,0,0,596,526,1,0,0,0,596,529,1,0,0,0,596,532,
        1,0,0,0,596,535,1,0,0,0,596,540,1,0,0,0,596,542,1,0,0,0,596,544,
        1,0,0,0,596,548,1,0,0,0,596,551,1,0,0,0,596,554,1,0,0,0,596,559,
        1,0,0,0,596,562,1,0,0,0,596,566,1,0,0,0,596,572,1,0,0,0,596,573,
        1,0,0,0,596,576,1,0,0,0,596,579,1,0,0,0,596,582,1,0,0,0,596,585,
        1,0,0,0,596,588,1,0,0,0,596,591,1,0,0,0,597,51,1,0,0,0,598,599,5,
        4,0,0,599,600,3,182,91,0,600,601,3,182,91,0,601,603,3,190,95,0,602,
        604,3,190,95,0,603,602,1,0,0,0,603,604,1,0,0,0,604,606,1,0,0,0,605,
        607,3,190,95,0,606,605,1,0,0,0,606,607,1,0,0,0,607,611,1,0,0,0,608,
        610,3,56,28,0,609,608,1,0,0,0,610,613,1,0,0,0,611,609,1,0,0,0,611,
        612,1,0,0,0,612,623,1,0,0,0,613,611,1,0,0,0,614,616,5,175,0,0,615,
        617,5,4,0,0,616,615,1,0,0,0,616,617,1,0,0,0,617,618,1,0,0,0,618,
        619,3,182,91,0,619,620,3,182,91,0,620,622,1,0,0,0,621,614,1,0,0,
        0,622,625,1,0,0,0,623,621,1,0,0,0,623,624,1,0,0,0,624,53,1,0,0,0,
        625,623,1,0,0,0,626,628,5,27,0,0,627,629,5,193,0,0,628,627,1,0,0,
        0,628,629,1,0,0,0,629,630,1,0,0,0,630,641,3,194,97,0,631,633,5,28,
        0,0,632,634,5,193,0,0,633,632,1,0,0,0,633,634,1,0,0,0,634,635,1,
        0,0,0,635,641,3,194,97,0,636,637,5,29,0,0,637,641,3,182,91,0,638,
        639,5,30,0,0,639,641,3,182,91,0,640,626,1,0,0,0,640,631,1,0,0,0,
        640,636,1,0,0,0,640,638,1,0,0,0,641,55,1,0,0,0,642,644,5,31,0,0,
        643,645,5,193,0,0,644,643,1,0,0,0,644,645,1,0,0,0,645,646,1,0,0,
        0,646,678,3,196,98,0,647,649,5,32,0,0,648,650,5,193,0,0,649,648,
        1,0,0,0,649,650,1,0,0,0,650,651,1,0,0,0,651,678,3,196,98,0,652,654,
        5,56,0,0,653,655,5,193,0,0,654,653,1,0,0,0,654,655,1,0,0,0,655,656,
        1,0,0,0,656,678,3,196,98,0,657,659,5,33,0,0,658,660,5,193,0,0,659,
        658,1,0,0,0,659,660,1,0,0,0,660,661,1,0,0,0,661,678,3,196,98,0,662,
        664,5,34,0,0,663,665,5,193,0,0,664,663,1,0,0,0,664,665,1,0,0,0,665,
        666,1,0,0,0,666,678,3,196,98,0,667,669,5,35,0,0,668,670,5,193,0,
        0,669,668,1,0,0,0,669,670,1,0,0,0,670,671,1,0,0,0,671,678,3,196,
        98,0,672,674,5,48,0,0,673,675,5,193,0,0,674,673,1,0,0,0,674,675,
        1,0,0,0,675,676,1,0,0,0,676,678,3,196,98,0,677,642,1,0,0,0,677,647,
        1,0,0,0,677,652,1,0,0,0,677,657,1,0,0,0,677,662,1,0,0,0,677,667,
        1,0,0,0,677,672,1,0,0,0,678,57,1,0,0,0,679,693,3,60,30,0,680,693,
        3,218,109,0,681,683,5,38,0,0,682,684,5,193,0,0,683,682,1,0,0,0,683,
        684,1,0,0,0,684,685,1,0,0,0,685,693,5,180,0,0,686,693,5,19,0,0,687,
        689,5,21,0,0,688,690,5,193,0,0,689,688,1,0,0,0,689,690,1,0,0,0,690,
        691,1,0,0,0,691,693,3,194,97,0,692,679,1,0,0,0,692,680,1,0,0,0,692,
        681,1,0,0,0,692,686,1,0,0,0,692,687,1,0,0,0,693,59,1,0,0,0,694,695,
        5,4,0,0,695,696,3,182,91,0,696,697,3,182,91,0,697,698,3,182,91,0,
        698,699,3,182,91,0,699,700,3,190,95,0,700,701,3,190,95,0,701,702,
        3,190,95,0,702,703,5,180,0,0,703,61,1,0,0,0,704,723,3,64,32,0,705,
        706,5,9,0,0,706,723,5,187,0,0,707,708,5,40,0,0,708,709,3,194,97,
        0,709,710,3,194,97,0,710,711,3,194,97,0,711,723,1,0,0,0,712,713,
        5,41,0,0,713,723,3,194,97,0,714,715,5,14,0,0,715,723,5,180,0,0,716,
        717,5,15,0,0,717,723,5,213,0,0,718,719,5,17,0,0,719,720,5,18,0,0,
        720,723,3,194,97,0,721,723,5,19,0,0,722,704,1,0,0,0,722,705,1,0,
        0,0,722,707,1,0,0,0,722,712,1,0,0,0,722,714,1,0,0,0,722,716,1,0,
        0,0,722,718,1,0,0,0,722,721,1,0,0,0,723,63,1,0,0,0,724,725,5,4,0,
        0,725,726,3,182,91,0,726,727,3,182,91,0,727,728,3,182,91,0,728,729,
        3,182,91,0,729,730,3,182,91,0,730,731,3,182,91,0,731,733,3,190,95,
        0,732,734,3,190,95,0,733,732,1,0,0,0,733,734,1,0,0,0,734,736,1,0,
        0,0,735,737,3,190,95,0,736,735,1,0,0,0,736,737,1,0,0,0,737,65,1,
        0,0,0,738,765,3,68,34,0,739,740,5,9,0,0,740,765,5,187,0,0,741,742,
        5,44,0,0,742,765,5,216,0,0,743,744,5,21,0,0,744,765,3,194,97,0,745,
        746,5,45,0,0,746,765,5,181,0,0,747,748,5,46,0,0,748,765,5,209,0,
        0,749,750,5,40,0,0,750,751,3,194,97,0,751,752,3,194,97,0,752,753,
        3,194,97,0,753,765,1,0,0,0,754,755,5,41,0,0,755,765,3,194,97,0,756,
        757,5,14,0,0,757,765,5,180,0,0,758,759,5,15,0,0,759,765,5,213,0,
        0,760,761,5,17,0,0,761,762,5,18,0,0,762,765,3,194,97,0,763,765,5,
        19,0,0,764,738,1,0,0,0,764,739,1,0,0,0,764,741,1,0,0,0,764,743,1,
        0,0,0,764,745,1,0,0,0,764,747,1,0,0,0,764,749,1,0,0,0,764,754,1,
        0,0,0,764,756,1,0,0,0,764,758,1,0,0,0,764,760,1,0,0,0,764,763,1,
        0,0,0,765,67,1,0,0,0,766,767,5,4,0,0,767,768,3,182,91,0,768,769,
        3,182,91,0,769,770,3,182,91,0,770,771,3,182,91,0,771,772,3,182,91,
        0,772,773,3,182,91,0,773,774,3,190,95,0,774,781,3,190,95,0,775,782,
        3,190,95,0,776,777,3,190,95,0,777,778,3,190,95,0,778,779,3,190,95,
        0,779,780,3,190,95,0,780,782,1,0,0,0,781,775,1,0,0,0,781,776,1,0,
        0,0,781,782,1,0,0,0,782,69,1,0,0,0,783,807,3,72,36,0,784,786,5,48,
        0,0,785,787,5,193,0,0,786,785,1,0,0,0,786,787,1,0,0,0,787,788,1,
        0,0,0,788,807,5,180,0,0,789,790,5,9,0,0,790,807,5,187,0,0,791,792,
        5,41,0,0,792,793,3,194,97,0,793,794,3,194,97,0,794,807,1,0,0,0,795,
        796,5,14,0,0,796,807,5,180,0,0,797,799,5,49,0,0,798,800,5,193,0,
        0,799,798,1,0,0,0,799,800,1,0,0,0,800,801,1,0,0,0,801,807,5,180,
        0,0,802,803,5,17,0,0,803,804,5,18,0,0,804,807,3,194,97,0,805,807,
        5,19,0,0,806,783,1,0,0,0,806,784,1,0,0,0,806,789,1,0,0,0,806,791,
        1,0,0,0,806,795,1,0,0,0,806,797,1,0,0,0,806,802,1,0,0,0,806,805,
        1,0,0,0,807,71,1,0,0,0,808,809,5,4,0,0,809,810,3,182,91,0,810,811,
        3,182,91,0,811,812,3,182,91,0,812,813,3,182,91,0,813,814,3,190,95,
        0,814,818,3,190,95,0,815,816,3,190,95,0,816,817,3,190,95,0,817,819,
        1,0,0,0,818,815,1,0,0,0,818,819,1,0,0,0,819,73,1,0,0,0,820,834,3,
        76,38,0,821,822,5,9,0,0,822,834,5,187,0,0,823,824,5,40,0,0,824,834,
        3,194,97,0,825,826,5,14,0,0,826,834,5,180,0,0,827,828,5,15,0,0,828,
        834,5,213,0,0,829,830,5,17,0,0,830,831,5,18,0,0,831,834,3,194,97,
        0,832,834,5,19,0,0,833,820,1,0,0,0,833,821,1,0,0,0,833,823,1,0,0,
        0,833,825,1,0,0,0,833,827,1,0,0,0,833,829,1,0,0,0,833,832,1,0,0,
        0,834,75,1,0,0,0,835,836,5,4,0,0,836,837,3,182,91,0,837,838,3,182,
        91,0,838,840,3,190,95,0,839,841,3,190,95,0,840,839,1,0,0,0,840,841,
        1,0,0,0,841,77,1,0,0,0,842,864,3,80,40,0,843,844,5,9,0,0,844,864,
        5,187,0,0,845,846,5,40,0,0,846,847,3,194,97,0,847,848,3,194,97,0,
        848,849,3,194,97,0,849,850,3,194,97,0,850,864,1,0,0,0,851,852,5,
        41,0,0,852,864,3,194,97,0,853,854,5,14,0,0,854,864,5,180,0,0,855,
        856,5,15,0,0,856,864,5,213,0,0,857,858,5,17,0,0,858,859,5,18,0,0,
        859,864,3,194,97,0,860,864,5,19,0,0,861,862,5,44,0,0,862,864,5,217,
        0,0,863,842,1,0,0,0,863,843,1,0,0,0,863,845,1,0,0,0,863,851,1,0,
        0,0,863,853,1,0,0,0,863,855,1,0,0,0,863,857,1,0,0,0,863,860,1,0,
        0,0,863,861,1,0,0,0,864,79,1,0,0,0,865,866,5,4,0,0,866,867,3,182,
        91,0,867,868,3,182,91,0,868,869,3,182,91,0,869,870,3,182,91,0,870,
        872,3,190,95,0,871,873,3,190,95,0,872,871,1,0,0,0,872,873,1,0,0,
        0,873,81,1,0,0,0,874,878,5,53,0,0,875,877,3,84,42,0,876,875,1,0,
        0,0,877,880,1,0,0,0,878,876,1,0,0,0,878,879,1,0,0,0,879,881,1,0,
        0,0,880,878,1,0,0,0,881,884,5,2,0,0,882,884,5,54,0,0,883,874,1,0,
        0,0,883,882,1,0,0,0,884,83,1,0,0,0,885,887,5,55,0,0,886,888,5,193,
        0,0,887,886,1,0,0,0,887,888,1,0,0,0,888,889,1,0,0,0,889,896,3,182,
        91,0,890,892,5,56,0,0,891,893,5,193,0,0,892,891,1,0,0,0,892,893,
        1,0,0,0,893,894,1,0,0,0,894,896,3,194,97,0,895,885,1,0,0,0,895,890,
        1,0,0,0,896,85,1,0,0,0,897,899,5,58,0,0,898,900,5,193,0,0,899,898,
        1,0,0,0,899,900,1,0,0,0,900,901,1,0,0,0,901,937,5,180,0,0,902,904,
        5,59,0,0,903,905,5,193,0,0,904,903,1,0,0,0,904,905,1,0,0,0,905,906,
        1,0,0,0,906,932,5,190,0,0,907,909,3,194,97,0,908,910,5,178,0,0,909,
        908,1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,0,911,913,3,194,97,0,912,
        914,5,178,0,0,913,912,1,0,0,0,913,914,1,0,0,0,914,915,1,0,0,0,915,
        916,3,194,97,0,916,933,1,0,0,0,917,919,5,173,0,0,918,920,5,193,0,
        0,919,918,1,0,0,0,919,920,1,0,0,0,920,921,1,0,0,0,921,923,3,182,
        91,0,922,924,5,178,0,0,923,922,1,0,0,0,923,924,1,0,0,0,924,930,1,
        0,0,0,925,927,5,174,0,0,926,928,5,193,0,0,927,926,1,0,0,0,927,928,
        1,0,0,0,928,929,1,0,0,0,929,931,3,182,91,0,930,925,1,0,0,0,930,931,
        1,0,0,0,931,933,1,0,0,0,932,907,1,0,0,0,932,917,1,0,0,0,933,934,
        1,0,0,0,934,935,5,191,0,0,935,937,1,0,0,0,936,897,1,0,0,0,936,902,
        1,0,0,0,937,87,1,0,0,0,938,939,5,4,0,0,939,940,3,182,91,0,940,941,
        3,190,95,0,941,942,3,190,95,0,942,943,3,190,95,0,943,89,1,0,0,0,
        944,969,3,92,46,0,945,946,5,9,0,0,946,969,5,187,0,0,947,948,5,61,
        0,0,948,949,5,180,0,0,949,969,3,194,97,0,950,951,5,41,0,0,951,969,
        3,194,97,0,952,953,5,14,0,0,953,969,5,180,0,0,954,955,5,17,0,0,955,
        956,5,18,0,0,956,960,3,194,97,0,957,961,5,136,0,0,958,959,5,9,0,
        0,959,961,5,187,0,0,960,957,1,0,0,0,960,958,1,0,0,0,961,969,1,0,
        0,0,962,969,5,19,0,0,963,964,5,62,0,0,964,965,3,194,97,0,965,966,
        5,180,0,0,966,969,1,0,0,0,967,969,5,63,0,0,968,944,1,0,0,0,968,945,
        1,0,0,0,968,947,1,0,0,0,968,950,1,0,0,0,968,952,1,0,0,0,968,954,
        1,0,0,0,968,962,1,0,0,0,968,963,1,0,0,0,968,967,1,0,0,0,969,91,1,
        0,0,0,970,971,5,4,0,0,971,972,3,182,91,0,972,973,3,182,91,0,973,
        93,1,0,0,0,974,1014,3,96,48,0,975,976,5,9,0,0,976,1014,5,187,0,0,
        977,978,5,40,0,0,978,979,3,194,97,0,979,980,3,194,97,0,980,981,3,
        194,97,0,981,982,3,194,97,0,982,1014,1,0,0,0,983,985,5,48,0,0,984,
        986,5,193,0,0,985,984,1,0,0,0,985,986,1,0,0,0,986,987,1,0,0,0,987,
        1014,5,180,0,0,988,989,5,65,0,0,989,1014,5,180,0,0,990,991,5,41,
        0,0,991,993,3,194,97,0,992,994,3,194,97,0,993,992,1,0,0,0,993,994,
        1,0,0,0,994,1014,1,0,0,0,995,996,5,14,0,0,996,1014,5,180,0,0,997,
        999,5,49,0,0,998,1000,5,193,0,0,999,998,1,0,0,0,999,1000,1,0,0,0,
        1000,1001,1,0,0,0,1001,1014,5,180,0,0,1002,1003,5,15,0,0,1003,1014,
        5,213,0,0,1004,1005,5,17,0,0,1005,1006,5,18,0,0,1006,1010,3,194,
        97,0,1007,1011,5,136,0,0,1008,1009,5,9,0,0,1009,1011,5,187,0,0,1010,
        1007,1,0,0,0,1010,1008,1,0,0,0,1011,1014,1,0,0,0,1012,1014,5,19,
        0,0,1013,974,1,0,0,0,1013,975,1,0,0,0,1013,977,1,0,0,0,1013,983,
        1,0,0,0,1013,988,1,0,0,0,1013,990,1,0,0,0,1013,995,1,0,0,0,1013,
        997,1,0,0,0,1013,1002,1,0,0,0,1013,1004,1,0,0,0,1013,1012,1,0,0,
        0,1014,95,1,0,0,0,1015,1016,5,4,0,0,1016,1017,3,182,91,0,1017,1018,
        3,182,91,0,1018,1019,3,182,91,0,1019,1025,3,182,91,0,1020,1021,3,
        182,91,0,1021,1022,3,182,91,0,1022,1023,3,182,91,0,1023,1024,3,182,
        91,0,1024,1026,1,0,0,0,1025,1020,1,0,0,0,1025,1026,1,0,0,0,1026,
        1027,1,0,0,0,1027,1028,3,190,95,0,1028,1032,3,190,95,0,1029,1030,
        3,190,95,0,1030,1031,3,190,95,0,1031,1033,1,0,0,0,1032,1029,1,0,
        0,0,1032,1033,1,0,0,0,1033,97,1,0,0,0,1034,1061,3,100,50,0,1035,
        1036,5,9,0,0,1036,1061,5,187,0,0,1037,1038,5,61,0,0,1038,1039,5,
        180,0,0,1039,1040,5,180,0,0,1040,1041,3,194,97,0,1041,1042,3,194,
        97,0,1042,1043,3,194,97,0,1043,1061,1,0,0,0,1044,1045,5,41,0,0,1045,
        1061,3,194,97,0,1046,1047,5,14,0,0,1047,1061,5,180,0,0,1048,1049,
        5,67,0,0,1049,1061,3,194,97,0,1050,1051,5,68,0,0,1051,1061,3,194,
        97,0,1052,1053,5,15,0,0,1053,1061,5,213,0,0,1054,1055,5,17,0,0,1055,
        1056,5,18,0,0,1056,1061,3,194,97,0,1057,1061,3,102,51,0,1058,1061,
        5,19,0,0,1059,1061,5,63,0,0,1060,1034,1,0,0,0,1060,1035,1,0,0,0,
        1060,1037,1,0,0,0,1060,1044,1,0,0,0,1060,1046,1,0,0,0,1060,1048,
        1,0,0,0,1060,1050,1,0,0,0,1060,1052,1,0,0,0,1060,1054,1,0,0,0,1060,
        1057,1,0,0,0,1060,1058,1,0,0,0,1060,1059,1,0,0,0,1061,99,1,0,0,0,
        1062,1063,5,4,0,0,1063,1064,3,182,91,0,1064,1065,3,182,91,0,1065,
        1066,3,182,91,0,1066,1067,3,182,91,0,1067,1068,3,182,91,0,1068,1069,
        3,190,95,0,1069,1070,3,190,95,0,1070,101,1,0,0,0,1071,1072,5,69,
        0,0,1072,1073,3,182,91,0,1073,1074,3,194,97,0,1074,1075,3,194,97,
        0,1075,103,1,0,0,0,1076,1110,3,106,53,0,1077,1110,3,108,54,0,1078,
        1110,3,110,55,0,1079,1110,3,112,56,0,1080,1110,3,114,57,0,1081,1110,
        3,116,58,0,1082,1110,3,118,59,0,1083,1110,3,120,60,0,1084,1110,3,
        122,61,0,1085,1086,5,9,0,0,1086,1110,5,187,0,0,1087,1088,5,77,0,
        0,1088,1110,3,194,97,0,1089,1090,5,65,0,0,1090,1110,5,180,0,0,1091,
        1092,5,41,0,0,1092,1094,3,194,97,0,1093,1095,3,194,97,0,1094,1093,
        1,0,0,0,1094,1095,1,0,0,0,1095,1110,1,0,0,0,1096,1097,5,15,0,0,1097,
        1110,5,213,0,0,1098,1099,5,17,0,0,1099,1100,5,18,0,0,1100,1104,3,
        194,97,0,1101,1105,5,136,0,0,1102,1103,5,9,0,0,1103,1105,5,187,0,
        0,1104,1101,1,0,0,0,1104,1102,1,0,0,0,1105,1106,1,0,0,0,1106,1107,
        5,187,0,0,1107,1110,1,0,0,0,1108,1110,5,19,0,0,1109,1076,1,0,0,0,
        1109,1077,1,0,0,0,1109,1078,1,0,0,0,1109,1079,1,0,0,0,1109,1080,
        1,0,0,0,1109,1081,1,0,0,0,1109,1082,1,0,0,0,1109,1083,1,0,0,0,1109,
        1084,1,0,0,0,1109,1085,1,0,0,0,1109,1087,1,0,0,0,1109,1089,1,0,0,
        0,1109,1091,1,0,0,0,1109,1096,1,0,0,0,1109,1098,1,0,0,0,1109,1108,
        1,0,0,0,1110,105,1,0,0,0,1111,1112,5,71,0,0,1112,1114,3,182,91,0,
        1113,1115,3,182,91,0,1114,1113,1,0,0,0,1114,1115,1,0,0,0,1115,1116,
        1,0,0,0,1116,1118,3,194,97,0,1117,1119,3,194,97,0,1118,1117,1,0,
        0,0,1118,1119,1,0,0,0,1119,107,1,0,0,0,1120,1121,5,69,0,0,1121,1122,
        3,182,91,0,1122,1123,3,194,97,0,1123,109,1,0,0,0,1124,1125,5,51,
        0,0,1125,1126,3,182,91,0,1126,1127,3,182,91,0,1127,1128,3,182,91,
        0,1128,1130,5,187,0,0,1129,1131,5,181,0,0,1130,1129,1,0,0,0,1130,
        1131,1,0,0,0,1131,1132,1,0,0,0,1132,1133,5,187,0,0,1133,111,1,0,
        0,0,1134,1135,5,72,0,0,1135,1136,3,182,91,0,1136,113,1,0,0,0,1137,
        1138,5,66,0,0,1138,1139,3,182,91,0,1139,115,1,0,0,0,1140,1141,5,
        73,0,0,1141,1142,3,182,91,0,1142,117,1,0,0,0,1143,1144,5,74,0,0,
        1144,1145,3,182,91,0,1145,119,1,0,0,0,1146,1147,5,75,0,0,1147,1148,
        5,187,0,0,1148,1149,3,182,91,0,1149,1150,3,182,91,0,1150,1151,3,
        182,91,0,1151,1152,3,182,91,0,1152,1154,3,182,91,0,1153,1155,3,182,
        91,0,1154,1153,1,0,0,0,1154,1155,1,0,0,0,1155,121,1,0,0,0,1156,1157,
        5,76,0,0,1157,1158,3,182,91,0,1158,123,1,0,0,0,1159,1262,3,126,63,
        0,1160,1161,5,9,0,0,1161,1262,5,187,0,0,1162,1163,5,27,0,0,1163,
        1262,3,194,97,0,1164,1165,5,41,0,0,1165,1262,3,194,97,0,1166,1167,
        5,79,0,0,1167,1168,3,194,97,0,1168,1169,3,194,97,0,1169,1174,3,194,
        97,0,1170,1171,3,194,97,0,1171,1172,3,194,97,0,1172,1173,3,194,97,
        0,1173,1175,1,0,0,0,1174,1170,1,0,0,0,1174,1175,1,0,0,0,1175,1180,
        1,0,0,0,1176,1177,3,194,97,0,1177,1178,3,194,97,0,1178,1179,3,194,
        97,0,1179,1181,1,0,0,0,1180,1176,1,0,0,0,1180,1181,1,0,0,0,1181,
        1186,1,0,0,0,1182,1183,3,194,97,0,1183,1184,3,194,97,0,1184,1185,
        3,194,97,0,1185,1187,1,0,0,0,1186,1182,1,0,0,0,1186,1187,1,0,0,0,
        1187,1262,1,0,0,0,1188,1189,5,14,0,0,1189,1262,5,180,0,0,1190,1191,
        5,80,0,0,1191,1192,3,194,97,0,1192,1193,3,194,97,0,1193,1198,3,194,
        97,0,1194,1195,3,194,97,0,1195,1196,3,194,97,0,1196,1197,3,194,97,
        0,1197,1199,1,0,0,0,1198,1194,1,0,0,0,1198,1199,1,0,0,0,1199,1204,
        1,0,0,0,1200,1201,3,194,97,0,1201,1202,3,194,97,0,1202,1203,3,194,
        97,0,1203,1205,1,0,0,0,1204,1200,1,0,0,0,1204,1205,1,0,0,0,1205,
        1210,1,0,0,0,1206,1207,3,194,97,0,1207,1208,3,194,97,0,1208,1209,
        3,194,97,0,1209,1211,1,0,0,0,1210,1206,1,0,0,0,1210,1211,1,0,0,0,
        1211,1262,1,0,0,0,1212,1213,5,17,0,0,1213,1214,5,18,0,0,1214,1218,
        3,194,97,0,1215,1219,5,136,0,0,1216,1217,5,9,0,0,1217,1219,5,187,
        0,0,1218,1215,1,0,0,0,1218,1216,1,0,0,0,1219,1262,1,0,0,0,1220,1221,
        5,81,0,0,1221,1222,3,194,97,0,1222,1223,3,194,97,0,1223,1228,3,194,
        97,0,1224,1225,3,194,97,0,1225,1226,3,194,97,0,1226,1227,3,194,97,
        0,1227,1229,1,0,0,0,1228,1224,1,0,0,0,1228,1229,1,0,0,0,1229,1234,
        1,0,0,0,1230,1231,3,194,97,0,1231,1232,3,194,97,0,1232,1233,3,194,
        97,0,1233,1235,1,0,0,0,1234,1230,1,0,0,0,1234,1235,1,0,0,0,1235,
        1240,1,0,0,0,1236,1237,3,194,97,0,1237,1238,3,194,97,0,1238,1239,
        3,194,97,0,1239,1241,1,0,0,0,1240,1236,1,0,0,0,1240,1241,1,0,0,0,
        1241,1262,1,0,0,0,1242,1262,5,19,0,0,1243,1244,5,21,0,0,1244,1262,
        3,194,97,0,1245,1246,5,82,0,0,1246,1262,5,220,0,0,1247,1248,5,62,
        0,0,1248,1249,5,84,0,0,1249,1251,3,194,97,0,1250,1252,3,194,97,0,
        1251,1250,1,0,0,0,1251,1252,1,0,0,0,1252,1254,1,0,0,0,1253,1255,
        3,194,97,0,1254,1253,1,0,0,0,1254,1255,1,0,0,0,1255,1257,1,0,0,0,
        1256,1258,3,194,97,0,1257,1256,1,0,0,0,1257,1258,1,0,0,0,1258,1262,
        1,0,0,0,1259,1262,5,83,0,0,1260,1262,5,63,0,0,1261,1159,1,0,0,0,
        1261,1160,1,0,0,0,1261,1162,1,0,0,0,1261,1164,1,0,0,0,1261,1166,
        1,0,0,0,1261,1188,1,0,0,0,1261,1190,1,0,0,0,1261,1212,1,0,0,0,1261,
        1220,1,0,0,0,1261,1242,1,0,0,0,1261,1243,1,0,0,0,1261,1245,1,0,0,
        0,1261,1247,1,0,0,0,1261,1259,1,0,0,0,1261,1260,1,0,0,0,1262,125,
        1,0,0,0,1263,1264,5,4,0,0,1264,1265,3,182,91,0,1265,1266,3,182,91,
        0,1266,1267,3,182,91,0,1267,1273,3,182,91,0,1268,1269,3,182,91,0,
        1269,1270,3,182,91,0,1270,1271,3,182,91,0,1271,1272,3,182,91,0,1272,
        1274,1,0,0,0,1273,1268,1,0,0,0,1273,1274,1,0,0,0,1274,1280,1,0,0,
        0,1275,1276,3,182,91,0,1276,1277,3,182,91,0,1277,1278,3,182,91,0,
        1278,1279,3,182,91,0,1279,1281,1,0,0,0,1280,1275,1,0,0,0,1280,1281,
        1,0,0,0,1281,1287,1,0,0,0,1282,1283,3,182,91,0,1283,1284,3,182,91,
        0,1284,1285,3,182,91,0,1285,1286,3,182,91,0,1286,1288,1,0,0,0,1287,
        1282,1,0,0,0,1287,1288,1,0,0,0,1288,127,1,0,0,0,1289,1295,3,130,
        65,0,1290,1291,5,21,0,0,1291,1295,3,194,97,0,1292,1295,5,17,0,0,
        1293,1295,5,19,0,0,1294,1289,1,0,0,0,1294,1290,1,0,0,0,1294,1292,
        1,0,0,0,1294,1293,1,0,0,0,1295,129,1,0,0,0,1296,1297,5,4,0,0,1297,
        1298,3,182,91,0,1298,1299,3,190,95,0,1299,1300,3,190,95,0,1300,131,
        1,0,0,0,1301,1324,3,134,67,0,1302,1303,5,9,0,0,1303,1324,5,187,0,
        0,1304,1305,5,40,0,0,1305,1306,3,194,97,0,1306,1307,3,194,97,0,1307,
        1308,3,194,97,0,1308,1309,3,194,97,0,1309,1310,3,194,97,0,1310,1324,
        1,0,0,0,1311,1312,5,41,0,0,1312,1324,3,194,97,0,1313,1314,5,14,0,
        0,1314,1324,5,180,0,0,1315,1316,5,15,0,0,1316,1324,5,213,0,0,1317,
        1318,5,17,0,0,1318,1319,5,18,0,0,1319,1324,3,194,97,0,1320,1324,
        5,19,0,0,1321,1322,5,44,0,0,1322,1324,5,217,0,0,1323,1301,1,0,0,
        0,1323,1302,1,0,0,0,1323,1304,1,0,0,0,1323,1311,1,0,0,0,1323,1313,
        1,0,0,0,1323,1315,1,0,0,0,1323,1317,1,0,0,0,1323,1320,1,0,0,0,1323,
        1321,1,0,0,0,1324,133,1,0,0,0,1325,1326,5,4,0,0,1326,1327,3,182,
        91,0,1327,1328,3,182,91,0,1328,1329,3,182,91,0,1329,1330,3,182,91,
        0,1330,1331,3,182,91,0,1331,1332,3,182,91,0,1332,1334,3,190,95,0,
        1333,1335,3,190,95,0,1334,1333,1,0,0,0,1334,1335,1,0,0,0,1335,135,
        1,0,0,0,1336,1394,3,138,69,0,1337,1338,5,9,0,0,1338,1394,5,187,0,
        0,1339,1340,5,27,0,0,1340,1394,3,194,97,0,1341,1342,5,88,0,0,1342,
        1394,3,194,97,0,1343,1344,5,41,0,0,1344,1394,3,194,97,0,1345,1346,
        5,79,0,0,1346,1347,3,194,97,0,1347,1348,3,194,97,0,1348,1349,3,194,
        97,0,1349,1350,3,194,97,0,1350,1351,3,194,97,0,1351,1352,3,194,97,
        0,1352,1353,3,194,97,0,1353,1394,1,0,0,0,1354,1355,5,89,0,0,1355,
        1394,5,180,0,0,1356,1357,5,90,0,0,1357,1358,3,194,97,0,1358,1359,
        3,194,97,0,1359,1360,3,194,97,0,1360,1361,3,194,97,0,1361,1362,3,
        194,97,0,1362,1363,3,194,97,0,1363,1364,3,194,97,0,1364,1365,3,194,
        97,0,1365,1394,1,0,0,0,1366,1367,5,14,0,0,1367,1394,5,180,0,0,1368,
        1369,5,17,0,0,1369,1370,5,18,0,0,1370,1374,3,194,97,0,1371,1375,
        5,136,0,0,1372,1373,5,9,0,0,1373,1375,5,187,0,0,1374,1371,1,0,0,
        0,1374,1372,1,0,0,0,1375,1394,1,0,0,0,1376,1377,5,81,0,0,1377,1378,
        3,194,97,0,1378,1379,3,194,97,0,1379,1380,3,194,97,0,1380,1381,3,
        194,97,0,1381,1382,3,194,97,0,1382,1383,3,194,97,0,1383,1384,3,194,
        97,0,1384,1394,1,0,0,0,1385,1394,5,19,0,0,1386,1387,5,152,0,0,1387,
        1394,5,180,0,0,1388,1389,5,62,0,0,1389,1390,3,194,97,0,1390,1391,
        3,194,97,0,1391,1394,1,0,0,0,1392,1394,5,63,0,0,1393,1336,1,0,0,
        0,1393,1337,1,0,0,0,1393,1339,1,0,0,0,1393,1341,1,0,0,0,1393,1343,
        1,0,0,0,1393,1345,1,0,0,0,1393,1354,1,0,0,0,1393,1356,1,0,0,0,1393,
        1366,1,0,0,0,1393,1368,1,0,0,0,1393,1376,1,0,0,0,1393,1385,1,0,0,
        0,1393,1386,1,0,0,0,1393,1388,1,0,0,0,1393,1392,1,0,0,0,1394,137,
        1,0,0,0,1395,1396,5,4,0,0,1396,1397,3,182,91,0,1397,1398,3,182,91,
        0,1398,1399,3,182,91,0,1399,1400,3,182,91,0,1400,139,1,0,0,0,1401,
        1429,3,142,71,0,1402,1403,5,9,0,0,1403,1429,5,187,0,0,1404,1405,
        5,21,0,0,1405,1429,3,194,97,0,1406,1407,5,44,0,0,1407,1429,5,218,
        0,0,1408,1409,5,40,0,0,1409,1410,3,194,97,0,1410,1411,3,194,97,0,
        1411,1412,3,194,97,0,1412,1429,1,0,0,0,1413,1414,5,92,0,0,1414,1415,
        3,194,97,0,1415,1416,3,194,97,0,1416,1417,3,194,97,0,1417,1429,1,
        0,0,0,1418,1419,5,41,0,0,1419,1429,3,194,97,0,1420,1421,5,14,0,0,
        1421,1429,5,180,0,0,1422,1423,5,15,0,0,1423,1429,5,213,0,0,1424,
        1425,5,17,0,0,1425,1426,5,18,0,0,1426,1429,3,194,97,0,1427,1429,
        5,19,0,0,1428,1401,1,0,0,0,1428,1402,1,0,0,0,1428,1404,1,0,0,0,1428,
        1406,1,0,0,0,1428,1408,1,0,0,0,1428,1413,1,0,0,0,1428,1418,1,0,0,
        0,1428,1420,1,0,0,0,1428,1422,1,0,0,0,1428,1424,1,0,0,0,1428,1427,
        1,0,0,0,1429,141,1,0,0,0,1430,1431,5,4,0,0,1431,1432,3,182,91,0,
        1432,1433,3,182,91,0,1433,1434,3,182,91,0,1434,1435,3,182,91,0,1435,
        1436,3,182,91,0,1436,1437,3,182,91,0,1437,1438,3,182,91,0,1438,1440,
        3,190,95,0,1439,1441,3,190,95,0,1440,1439,1,0,0,0,1440,1441,1,0,
        0,0,1441,1443,1,0,0,0,1442,1444,3,190,95,0,1443,1442,1,0,0,0,1443,
        1444,1,0,0,0,1444,143,1,0,0,0,1445,1472,3,142,71,0,1446,1447,5,9,
        0,0,1447,1472,5,187,0,0,1448,1449,5,21,0,0,1449,1472,3,194,97,0,
        1450,1451,5,40,0,0,1451,1452,3,194,97,0,1452,1453,3,194,97,0,1453,
        1454,3,194,97,0,1454,1472,1,0,0,0,1455,1456,5,92,0,0,1456,1457,3,
        194,97,0,1457,1458,3,194,97,0,1458,1459,3,194,97,0,1459,1460,3,194,
        97,0,1460,1472,1,0,0,0,1461,1462,5,41,0,0,1462,1472,3,194,97,0,1463,
        1464,5,14,0,0,1464,1472,5,180,0,0,1465,1466,5,15,0,0,1466,1472,5,
        213,0,0,1467,1468,5,17,0,0,1468,1469,5,18,0,0,1469,1472,3,194,97,
        0,1470,1472,5,19,0,0,1471,1445,1,0,0,0,1471,1446,1,0,0,0,1471,1448,
        1,0,0,0,1471,1450,1,0,0,0,1471,1455,1,0,0,0,1471,1461,1,0,0,0,1471,
        1463,1,0,0,0,1471,1465,1,0,0,0,1471,1467,1,0,0,0,1471,1470,1,0,0,
        0,1472,145,1,0,0,0,1473,1496,3,148,74,0,1474,1475,5,9,0,0,1475,1496,
        5,187,0,0,1476,1477,5,40,0,0,1477,1478,3,194,97,0,1478,1479,3,194,
        97,0,1479,1480,3,194,97,0,1480,1481,3,194,97,0,1481,1482,3,194,97,
        0,1482,1483,3,194,97,0,1483,1484,3,194,97,0,1484,1496,1,0,0,0,1485,
        1486,5,41,0,0,1486,1496,3,194,97,0,1487,1488,5,14,0,0,1488,1496,
        5,180,0,0,1489,1490,5,15,0,0,1490,1496,5,213,0,0,1491,1492,5,17,
        0,0,1492,1493,5,18,0,0,1493,1496,3,194,97,0,1494,1496,5,19,0,0,1495,
        1473,1,0,0,0,1495,1474,1,0,0,0,1495,1476,1,0,0,0,1495,1485,1,0,0,
        0,1495,1487,1,0,0,0,1495,1489,1,0,0,0,1495,1491,1,0,0,0,1495,1494,
        1,0,0,0,1496,147,1,0,0,0,1497,1498,5,4,0,0,1498,1499,3,182,91,0,
        1499,1500,3,182,91,0,1500,1501,3,182,91,0,1501,1502,3,182,91,0,1502,
        1503,3,182,91,0,1503,1504,3,182,91,0,1504,1505,3,182,91,0,1505,1506,
        3,182,91,0,1506,1507,3,190,95,0,1507,1508,3,190,95,0,1508,149,1,
        0,0,0,1509,1541,3,152,76,0,1510,1511,5,9,0,0,1511,1541,5,187,0,0,
        1512,1513,5,96,0,0,1513,1541,5,187,0,0,1514,1515,5,61,0,0,1515,1516,
        5,180,0,0,1516,1517,5,180,0,0,1517,1541,3,194,97,0,1518,1519,5,77,
        0,0,1519,1541,3,194,97,0,1520,1521,5,41,0,0,1521,1541,3,194,97,0,
        1522,1523,5,14,0,0,1523,1541,5,180,0,0,1524,1525,5,15,0,0,1525,1541,
        5,213,0,0,1526,1527,5,17,0,0,1527,1528,5,18,0,0,1528,1532,3,194,
        97,0,1529,1533,5,136,0,0,1530,1531,5,9,0,0,1531,1533,5,187,0,0,1532,
        1529,1,0,0,0,1532,1530,1,0,0,0,1533,1541,1,0,0,0,1534,1541,5,19,
        0,0,1535,1536,5,62,0,0,1536,1537,5,97,0,0,1537,1538,5,180,0,0,1538,
        1541,5,180,0,0,1539,1541,5,63,0,0,1540,1509,1,0,0,0,1540,1510,1,
        0,0,0,1540,1512,1,0,0,0,1540,1514,1,0,0,0,1540,1518,1,0,0,0,1540,
        1520,1,0,0,0,1540,1522,1,0,0,0,1540,1524,1,0,0,0,1540,1526,1,0,0,
        0,1540,1534,1,0,0,0,1540,1535,1,0,0,0,1540,1539,1,0,0,0,1541,151,
        1,0,0,0,1542,1543,5,4,0,0,1543,1544,3,182,91,0,1544,1545,3,182,91,
        0,1545,1546,3,182,91,0,1546,1547,3,182,91,0,1547,1548,3,182,91,0,
        1548,1549,3,182,91,0,1549,1550,3,182,91,0,1550,1551,3,182,91,0,1551,
        1552,3,182,91,0,1552,1553,3,182,91,0,1553,1555,3,182,91,0,1554,1556,
        3,182,91,0,1555,1554,1,0,0,0,1555,1556,1,0,0,0,1556,153,1,0,0,0,
        1557,1611,3,156,78,0,1558,1560,5,9,0,0,1559,1561,5,193,0,0,1560,
        1559,1,0,0,0,1560,1561,1,0,0,0,1561,1562,1,0,0,0,1562,1611,5,187,
        0,0,1563,1565,5,41,0,0,1564,1566,5,193,0,0,1565,1564,1,0,0,0,1565,
        1566,1,0,0,0,1566,1567,1,0,0,0,1567,1568,5,187,0,0,1568,1611,3,194,
        97,0,1569,1571,5,14,0,0,1570,1572,5,193,0,0,1571,1570,1,0,0,0,1571,
        1572,1,0,0,0,1572,1573,1,0,0,0,1573,1611,5,180,0,0,1574,1576,5,15,
        0,0,1575,1577,5,212,0,0,1576,1575,1,0,0,0,1576,1577,1,0,0,0,1577,
        1578,1,0,0,0,1578,1579,5,214,0,0,1579,1611,5,213,0,0,1580,1582,5,
        99,0,0,1581,1583,5,193,0,0,1582,1581,1,0,0,0,1582,1583,1,0,0,0,1583,
        1584,1,0,0,0,1584,1585,5,187,0,0,1585,1611,3,194,97,0,1586,1588,
        5,100,0,0,1587,1589,5,193,0,0,1588,1587,1,0,0,0,1588,1589,1,0,0,
        0,1589,1590,1,0,0,0,1590,1591,5,187,0,0,1591,1611,3,194,97,0,1592,
        1594,5,101,0,0,1593,1595,5,193,0,0,1594,1593,1,0,0,0,1594,1595,1,
        0,0,0,1595,1596,1,0,0,0,1596,1597,5,187,0,0,1597,1598,3,194,97,0,
        1598,1599,3,194,97,0,1599,1611,1,0,0,0,1600,1601,5,17,0,0,1601,1602,
        5,18,0,0,1602,1606,3,194,97,0,1603,1607,5,136,0,0,1604,1605,5,9,
        0,0,1605,1607,5,187,0,0,1606,1603,1,0,0,0,1606,1604,1,0,0,0,1607,
        1611,1,0,0,0,1608,1611,5,19,0,0,1609,1611,5,102,0,0,1610,1557,1,
        0,0,0,1610,1558,1,0,0,0,1610,1563,1,0,0,0,1610,1569,1,0,0,0,1610,
        1574,1,0,0,0,1610,1580,1,0,0,0,1610,1586,1,0,0,0,1610,1592,1,0,0,
        0,1610,1600,1,0,0,0,1610,1608,1,0,0,0,1610,1609,1,0,0,0,1611,155,
        1,0,0,0,1612,1613,5,4,0,0,1613,1614,3,182,91,0,1614,1615,3,182,91,
        0,1615,1617,3,190,95,0,1616,1618,3,190,95,0,1617,1616,1,0,0,0,1617,
        1618,1,0,0,0,1618,157,1,0,0,0,1619,1656,3,160,80,0,1620,1621,5,9,
        0,0,1621,1656,5,187,0,0,1622,1623,5,104,0,0,1623,1656,5,180,0,0,
        1624,1625,5,40,0,0,1625,1626,3,194,97,0,1626,1627,3,194,97,0,1627,
        1656,1,0,0,0,1628,1629,5,41,0,0,1629,1656,3,194,97,0,1630,1631,5,
        14,0,0,1631,1656,5,180,0,0,1632,1633,5,17,0,0,1633,1634,5,18,0,0,
        1634,1638,3,194,97,0,1635,1639,5,136,0,0,1636,1637,5,9,0,0,1637,
        1639,5,187,0,0,1638,1635,1,0,0,0,1638,1636,1,0,0,0,1639,1656,1,0,
        0,0,1640,1656,5,19,0,0,1641,1642,5,105,0,0,1642,1656,5,187,0,0,1643,
        1644,5,106,0,0,1644,1645,3,194,97,0,1645,1646,5,180,0,0,1646,1656,
        1,0,0,0,1647,1656,5,107,0,0,1648,1656,5,108,0,0,1649,1656,5,109,
        0,0,1650,1656,5,110,0,0,1651,1656,5,111,0,0,1652,1656,5,112,0,0,
        1653,1654,5,113,0,0,1654,1656,5,180,0,0,1655,1619,1,0,0,0,1655,1620,
        1,0,0,0,1655,1622,1,0,0,0,1655,1624,1,0,0,0,1655,1628,1,0,0,0,1655,
        1630,1,0,0,0,1655,1632,1,0,0,0,1655,1640,1,0,0,0,1655,1641,1,0,0,
        0,1655,1643,1,0,0,0,1655,1647,1,0,0,0,1655,1648,1,0,0,0,1655,1649,
        1,0,0,0,1655,1650,1,0,0,0,1655,1651,1,0,0,0,1655,1652,1,0,0,0,1655,
        1653,1,0,0,0,1656,159,1,0,0,0,1657,1658,5,4,0,0,1658,1659,3,182,
        91,0,1659,1660,3,182,91,0,1660,1661,3,182,91,0,1661,1662,3,182,91,
        0,1662,1663,3,182,91,0,1663,1665,3,190,95,0,1664,1666,3,190,95,0,
        1665,1664,1,0,0,0,1665,1666,1,0,0,0,1666,161,1,0,0,0,1667,1694,3,
        164,82,0,1668,1669,5,9,0,0,1669,1694,5,187,0,0,1670,1671,5,104,0,
        0,1671,1694,5,180,0,0,1672,1673,5,40,0,0,1673,1674,3,194,97,0,1674,
        1675,3,194,97,0,1675,1694,1,0,0,0,1676,1677,5,41,0,0,1677,1694,3,
        194,97,0,1678,1679,5,14,0,0,1679,1694,5,180,0,0,1680,1694,5,107,
        0,0,1681,1694,5,108,0,0,1682,1694,5,106,0,0,1683,1694,5,109,0,0,
        1684,1694,5,110,0,0,1685,1694,5,113,0,0,1686,1687,5,17,0,0,1687,
        1694,5,18,0,0,1688,1694,5,19,0,0,1689,1690,5,105,0,0,1690,1694,5,
        187,0,0,1691,1694,5,111,0,0,1692,1694,5,112,0,0,1693,1667,1,0,0,
        0,1693,1668,1,0,0,0,1693,1670,1,0,0,0,1693,1672,1,0,0,0,1693,1676,
        1,0,0,0,1693,1678,1,0,0,0,1693,1680,1,0,0,0,1693,1681,1,0,0,0,1693,
        1682,1,0,0,0,1693,1683,1,0,0,0,1693,1684,1,0,0,0,1693,1685,1,0,0,
        0,1693,1686,1,0,0,0,1693,1688,1,0,0,0,1693,1689,1,0,0,0,1693,1691,
        1,0,0,0,1693,1692,1,0,0,0,1694,163,1,0,0,0,1695,1696,5,4,0,0,1696,
        1697,3,182,91,0,1697,1698,3,182,91,0,1698,1699,3,182,91,0,1699,1700,
        3,182,91,0,1700,1701,3,182,91,0,1701,1702,3,182,91,0,1702,1704,3,
        190,95,0,1703,1705,3,190,95,0,1704,1703,1,0,0,0,1704,1705,1,0,0,
        0,1705,165,1,0,0,0,1706,1718,3,168,84,0,1707,1708,5,9,0,0,1708,1718,
        5,187,0,0,1709,1710,5,41,0,0,1710,1718,3,194,97,0,1711,1712,5,14,
        0,0,1712,1718,5,180,0,0,1713,1714,5,17,0,0,1714,1715,5,18,0,0,1715,
        1718,3,194,97,0,1716,1718,5,19,0,0,1717,1706,1,0,0,0,1717,1707,1,
        0,0,0,1717,1709,1,0,0,0,1717,1711,1,0,0,0,1717,1713,1,0,0,0,1717,
        1716,1,0,0,0,1718,167,1,0,0,0,1719,1720,5,4,0,0,1720,1721,3,182,
        91,0,1721,1722,3,182,91,0,1722,1723,3,190,95,0,1723,1724,3,190,95,
        0,1724,1725,3,190,95,0,1725,169,1,0,0,0,1726,1744,3,172,86,0,1727,
        1728,5,9,0,0,1728,1744,5,187,0,0,1729,1730,5,117,0,0,1730,1744,5,
        180,0,0,1731,1732,5,40,0,0,1732,1744,3,194,97,0,1733,1734,5,41,0,
        0,1734,1744,3,194,97,0,1735,1736,5,14,0,0,1736,1744,5,180,0,0,1737,
        1738,5,17,0,0,1738,1739,5,18,0,0,1739,1744,3,194,97,0,1740,1744,
        5,19,0,0,1741,1742,5,113,0,0,1742,1744,5,180,0,0,1743,1726,1,0,0,
        0,1743,1727,1,0,0,0,1743,1729,1,0,0,0,1743,1731,1,0,0,0,1743,1733,
        1,0,0,0,1743,1735,1,0,0,0,1743,1737,1,0,0,0,1743,1740,1,0,0,0,1743,
        1741,1,0,0,0,1744,171,1,0,0,0,1745,1746,5,4,0,0,1746,1747,3,182,
        91,0,1747,1748,3,182,91,0,1748,1749,3,182,91,0,1749,1751,3,190,95,
        0,1750,1752,3,190,95,0,1751,1750,1,0,0,0,1751,1752,1,0,0,0,1752,
        173,1,0,0,0,1753,1765,3,176,88,0,1754,1755,5,9,0,0,1755,1765,5,187,
        0,0,1756,1757,5,41,0,0,1757,1765,3,194,97,0,1758,1759,5,14,0,0,1759,
        1765,5,180,0,0,1760,1761,5,17,0,0,1761,1762,5,18,0,0,1762,1765,3,
        194,97,0,1763,1765,5,19,0,0,1764,1753,1,0,0,0,1764,1754,1,0,0,0,
        1764,1756,1,0,0,0,1764,1758,1,0,0,0,1764,1760,1,0,0,0,1764,1763,
        1,0,0,0,1765,175,1,0,0,0,1766,1767,5,4,0,0,1767,1768,3,182,91,0,
        1768,1769,3,182,91,0,1769,1770,3,182,91,0,1770,177,1,0,0,0,1771,
        1838,3,180,90,0,1772,1774,5,120,0,0,1773,1775,5,193,0,0,1774,1773,
        1,0,0,0,1774,1775,1,0,0,0,1775,1776,1,0,0,0,1776,1838,3,194,97,0,
        1777,1779,5,121,0,0,1778,1780,5,193,0,0,1779,1778,1,0,0,0,1779,1780,
        1,0,0,0,1780,1781,1,0,0,0,1781,1838,3,194,97,0,1782,1784,5,122,0,
        0,1783,1785,5,193,0,0,1784,1783,1,0,0,0,1784,1785,1,0,0,0,1785,1786,
        1,0,0,0,1786,1838,5,180,0,0,1787,1789,5,123,0,0,1788,1790,5,193,
        0,0,1789,1788,1,0,0,0,1789,1790,1,0,0,0,1790,1791,1,0,0,0,1791,1838,
        5,180,0,0,1792,1794,5,124,0,0,1793,1795,5,193,0,0,1794,1793,1,0,
        0,0,1794,1795,1,0,0,0,1795,1796,1,0,0,0,1796,1838,5,180,0,0,1797,
        1799,5,125,0,0,1798,1800,5,193,0,0,1799,1798,1,0,0,0,1799,1800,1,
        0,0,0,1800,1801,1,0,0,0,1801,1838,5,187,0,0,1802,1804,5,126,0,0,
        1803,1805,5,193,0,0,1804,1803,1,0,0,0,1804,1805,1,0,0,0,1805,1806,
        1,0,0,0,1806,1838,3,194,97,0,1807,1809,5,127,0,0,1808,1810,5,193,
        0,0,1809,1808,1,0,0,0,1809,1810,1,0,0,0,1810,1811,1,0,0,0,1811,1838,
        3,194,97,0,1812,1814,5,128,0,0,1813,1815,5,193,0,0,1814,1813,1,0,
        0,0,1814,1815,1,0,0,0,1815,1816,1,0,0,0,1816,1838,3,194,97,0,1817,
        1819,5,129,0,0,1818,1820,5,193,0,0,1819,1818,1,0,0,0,1819,1820,1,
        0,0,0,1820,1821,1,0,0,0,1821,1838,3,194,97,0,1822,1824,5,130,0,0,
        1823,1825,5,193,0,0,1824,1823,1,0,0,0,1824,1825,1,0,0,0,1825,1826,
        1,0,0,0,1826,1838,5,180,0,0,1827,1829,5,131,0,0,1828,1830,5,193,
        0,0,1829,1828,1,0,0,0,1829,1830,1,0,0,0,1830,1831,1,0,0,0,1831,1838,
        5,180,0,0,1832,1834,5,132,0,0,1833,1835,5,193,0,0,1834,1833,1,0,
        0,0,1834,1835,1,0,0,0,1835,1836,1,0,0,0,1836,1838,5,180,0,0,1837,
        1771,1,0,0,0,1837,1772,1,0,0,0,1837,1777,1,0,0,0,1837,1782,1,0,0,
        0,1837,1787,1,0,0,0,1837,1792,1,0,0,0,1837,1797,1,0,0,0,1837,1802,
        1,0,0,0,1837,1807,1,0,0,0,1837,1812,1,0,0,0,1837,1817,1,0,0,0,1837,
        1822,1,0,0,0,1837,1827,1,0,0,0,1837,1832,1,0,0,0,1838,179,1,0,0,
        0,1839,1840,5,4,0,0,1840,1841,3,182,91,0,1841,1842,3,182,91,0,1842,
        181,1,0,0,0,1843,1844,5,190,0,0,1844,1845,3,184,92,0,1845,1846,5,
        191,0,0,1846,183,1,0,0,0,1847,1852,3,186,93,0,1848,1849,5,175,0,
        0,1849,1851,3,186,93,0,1850,1848,1,0,0,0,1851,1854,1,0,0,0,1852,
        1850,1,0,0,0,1852,1853,1,0,0,0,1853,185,1,0,0,0,1854,1852,1,0,0,
        0,1855,1860,3,188,94,0,1856,1857,5,176,0,0,1857,1859,3,188,94,0,
        1858,1856,1,0,0,0,1859,1862,1,0,0,0,1860,1858,1,0,0,0,1860,1861,
        1,0,0,0,1861,187,1,0,0,0,1862,1860,1,0,0,0,1863,1864,6,94,-1,0,1864,
        1865,5,190,0,0,1865,1866,3,184,92,0,1866,1867,5,191,0,0,1867,1999,
        1,0,0,0,1868,1999,5,136,0,0,1869,1870,5,138,0,0,1870,1871,7,1,0,
        0,1871,1872,7,2,0,0,1872,1999,7,1,0,0,1873,1875,5,139,0,0,1874,1876,
        5,205,0,0,1875,1874,1,0,0,0,1875,1876,1,0,0,0,1876,1877,1,0,0,0,
        1877,1878,5,206,0,0,1878,1879,5,207,0,0,1879,1999,3,192,96,0,1880,
        1881,5,140,0,0,1881,1999,3,188,94,29,1882,1883,5,141,0,0,1883,1999,
        3,188,94,28,1884,1885,5,142,0,0,1885,1999,3,188,94,27,1886,1893,
        5,143,0,0,1887,1894,5,188,0,0,1888,1891,5,187,0,0,1889,1890,5,192,
        0,0,1890,1892,5,187,0,0,1891,1889,1,0,0,0,1891,1892,1,0,0,0,1892,
        1894,1,0,0,0,1893,1887,1,0,0,0,1893,1888,1,0,0,0,1894,1999,1,0,0,
        0,1895,1999,5,144,0,0,1896,1897,5,145,0,0,1897,1999,5,180,0,0,1898,
        1999,5,146,0,0,1899,1911,5,147,0,0,1900,1912,5,188,0,0,1901,1904,
        5,187,0,0,1902,1903,5,192,0,0,1903,1905,5,187,0,0,1904,1902,1,0,
        0,0,1904,1905,1,0,0,0,1905,1912,1,0,0,0,1906,1909,5,183,0,0,1907,
        1908,5,192,0,0,1908,1910,5,183,0,0,1909,1907,1,0,0,0,1909,1910,1,
        0,0,0,1910,1912,1,0,0,0,1911,1900,1,0,0,0,1911,1901,1,0,0,0,1911,
        1906,1,0,0,0,1912,1999,1,0,0,0,1913,1914,5,177,0,0,1914,1999,3,188,
        94,21,1915,1916,5,148,0,0,1916,1917,5,190,0,0,1917,1919,3,192,96,
        0,1918,1920,5,178,0,0,1919,1918,1,0,0,0,1919,1920,1,0,0,0,1920,1921,
        1,0,0,0,1921,1923,3,192,96,0,1922,1924,5,178,0,0,1923,1922,1,0,0,
        0,1923,1924,1,0,0,0,1924,1925,1,0,0,0,1925,1926,3,192,96,0,1926,
        1927,5,191,0,0,1927,1928,5,149,0,0,1928,1929,3,192,96,0,1929,1999,
        1,0,0,0,1930,1931,5,148,0,0,1931,1932,5,190,0,0,1932,1934,5,173,
        0,0,1933,1935,5,193,0,0,1934,1933,1,0,0,0,1934,1935,1,0,0,0,1935,
        1936,1,0,0,0,1936,1938,3,182,91,0,1937,1939,5,178,0,0,1938,1937,
        1,0,0,0,1938,1939,1,0,0,0,1939,1945,1,0,0,0,1940,1942,5,174,0,0,
        1941,1943,5,193,0,0,1942,1941,1,0,0,0,1942,1943,1,0,0,0,1943,1944,
        1,0,0,0,1944,1946,3,182,91,0,1945,1940,1,0,0,0,1945,1946,1,0,0,0,
        1946,1947,1,0,0,0,1947,1948,5,191,0,0,1948,1949,5,149,0,0,1949,1950,
        3,192,96,0,1950,1999,1,0,0,0,1951,1999,5,150,0,0,1952,1999,5,151,
        0,0,1953,1961,5,152,0,0,1954,1962,5,189,0,0,1955,1958,5,180,0,0,
        1956,1957,5,192,0,0,1957,1959,5,180,0,0,1958,1956,1,0,0,0,1958,1959,
        1,0,0,0,1959,1962,1,0,0,0,1960,1962,5,199,0,0,1961,1954,1,0,0,0,
        1961,1955,1,0,0,0,1961,1960,1,0,0,0,1962,1999,1,0,0,0,1963,1970,
        5,153,0,0,1964,1971,5,188,0,0,1965,1968,5,187,0,0,1966,1967,5,192,
        0,0,1967,1969,5,187,0,0,1968,1966,1,0,0,0,1968,1969,1,0,0,0,1969,
        1971,1,0,0,0,1970,1964,1,0,0,0,1970,1965,1,0,0,0,1971,1999,1,0,0,
        0,1972,1984,5,155,0,0,1973,1985,5,188,0,0,1974,1977,5,187,0,0,1975,
        1976,5,192,0,0,1976,1978,5,187,0,0,1977,1975,1,0,0,0,1977,1978,1,
        0,0,0,1978,1985,1,0,0,0,1979,1982,5,183,0,0,1980,1981,5,192,0,0,
        1981,1983,5,183,0,0,1982,1980,1,0,0,0,1982,1983,1,0,0,0,1983,1985,
        1,0,0,0,1984,1973,1,0,0,0,1984,1974,1,0,0,0,1984,1979,1,0,0,0,1985,
        1999,1,0,0,0,1986,1999,5,156,0,0,1987,1999,5,157,0,0,1988,1999,5,
        158,0,0,1989,1999,5,159,0,0,1990,1999,5,160,0,0,1991,1999,5,161,
        0,0,1992,1999,5,162,0,0,1993,1999,5,163,0,0,1994,1999,5,164,0,0,
        1995,1999,5,165,0,0,1996,1999,5,133,0,0,1997,1999,5,134,0,0,1998,
        1863,1,0,0,0,1998,1868,1,0,0,0,1998,1869,1,0,0,0,1998,1873,1,0,0,
        0,1998,1880,1,0,0,0,1998,1882,1,0,0,0,1998,1884,1,0,0,0,1998,1886,
        1,0,0,0,1998,1895,1,0,0,0,1998,1896,1,0,0,0,1998,1898,1,0,0,0,1998,
        1899,1,0,0,0,1998,1913,1,0,0,0,1998,1915,1,0,0,0,1998,1930,1,0,0,
        0,1998,1951,1,0,0,0,1998,1952,1,0,0,0,1998,1953,1,0,0,0,1998,1963,
        1,0,0,0,1998,1972,1,0,0,0,1998,1986,1,0,0,0,1998,1987,1,0,0,0,1998,
        1988,1,0,0,0,1998,1989,1,0,0,0,1998,1990,1,0,0,0,1998,1991,1,0,0,
        0,1998,1992,1,0,0,0,1998,1993,1,0,0,0,1998,1994,1,0,0,0,1998,1995,
        1,0,0,0,1998,1996,1,0,0,0,1998,1997,1,0,0,0,1999,2008,1,0,0,0,2000,
        2001,10,32,0,0,2001,2002,5,137,0,0,2002,2007,3,192,96,0,2003,2004,
        10,14,0,0,2004,2005,5,154,0,0,2005,2007,3,192,96,0,2006,2000,1,0,
        0,0,2006,2003,1,0,0,0,2007,2010,1,0,0,0,2008,2006,1,0,0,0,2008,2009,
        1,0,0,0,2009,189,1,0,0,0,2010,2008,1,0,0,0,2011,2012,7,3,0,0,2012,
        191,1,0,0,0,2013,2014,7,4,0,0,2014,193,1,0,0,0,2015,2016,7,3,0,0,
        2016,195,1,0,0,0,2017,2018,7,4,0,0,2018,197,1,0,0,0,2019,2030,5,
        135,0,0,2020,2028,5,222,0,0,2021,2023,5,225,0,0,2022,2021,1,0,0,
        0,2023,2026,1,0,0,0,2024,2022,1,0,0,0,2024,2025,1,0,0,0,2025,2029,
        1,0,0,0,2026,2024,1,0,0,0,2027,2029,5,226,0,0,2028,2024,1,0,0,0,
        2028,2027,1,0,0,0,2029,2031,1,0,0,0,2030,2020,1,0,0,0,2030,2031,
        1,0,0,0,2031,2032,1,0,0,0,2032,2036,5,223,0,0,2033,2035,5,225,0,
        0,2034,2033,1,0,0,0,2035,2038,1,0,0,0,2036,2034,1,0,0,0,2036,2037,
        1,0,0,0,2037,2039,1,0,0,0,2038,2036,1,0,0,0,2039,2040,5,224,0,0,
        2040,199,1,0,0,0,2041,2042,5,166,0,0,2042,2043,3,202,101,0,2043,
        2044,3,182,91,0,2044,201,1,0,0,0,2045,2046,7,5,0,0,2046,2047,3,204,
        102,0,2047,2048,5,228,0,0,2048,2052,1,0,0,0,2049,2050,5,169,0,0,
        2050,2052,3,212,106,0,2051,2045,1,0,0,0,2051,2049,1,0,0,0,2052,203,
        1,0,0,0,2053,2056,5,238,0,0,2054,2055,5,229,0,0,2055,2057,3,206,
        103,0,2056,2054,1,0,0,0,2056,2057,1,0,0,0,2057,205,1,0,0,0,2058,
        2061,3,208,104,0,2059,2060,7,6,0,0,2060,2062,3,206,103,0,2061,2059,
        1,0,0,0,2061,2062,1,0,0,0,2062,207,1,0,0,0,2063,2071,5,238,0,0,2064,
        2071,3,210,105,0,2065,2071,5,236,0,0,2066,2071,5,237,0,0,2067,2071,
        5,261,0,0,2068,2071,5,262,0,0,2069,2071,5,263,0,0,2070,2063,1,0,
        0,0,2070,2064,1,0,0,0,2070,2065,1,0,0,0,2070,2066,1,0,0,0,2070,2067,
        1,0,0,0,2070,2068,1,0,0,0,2070,2069,1,0,0,0,2071,209,1,0,0,0,2072,
        2073,5,239,0,0,2073,2074,5,265,0,0,2074,2075,3,208,104,0,2075,2076,
        5,228,0,0,2076,2192,1,0,0,0,2077,2078,5,240,0,0,2078,2079,5,265,
        0,0,2079,2080,3,208,104,0,2080,2081,5,228,0,0,2081,2192,1,0,0,0,
        2082,2083,5,242,0,0,2083,2084,5,265,0,0,2084,2085,3,208,104,0,2085,
        2086,5,228,0,0,2086,2192,1,0,0,0,2087,2088,5,243,0,0,2088,2089,5,
        265,0,0,2089,2090,3,208,104,0,2090,2091,5,228,0,0,2091,2192,1,0,
        0,0,2092,2093,5,244,0,0,2093,2094,5,265,0,0,2094,2095,3,208,104,
        0,2095,2096,5,228,0,0,2096,2192,1,0,0,0,2097,2098,5,245,0,0,2098,
        2099,5,265,0,0,2099,2100,3,208,104,0,2100,2101,5,228,0,0,2101,2192,
        1,0,0,0,2102,2103,5,246,0,0,2103,2104,5,265,0,0,2104,2105,3,208,
        104,0,2105,2106,5,228,0,0,2106,2192,1,0,0,0,2107,2108,5,247,0,0,
        2108,2109,5,265,0,0,2109,2110,3,208,104,0,2110,2111,5,228,0,0,2111,
        2192,1,0,0,0,2112,2113,5,248,0,0,2113,2114,5,265,0,0,2114,2115,3,
        208,104,0,2115,2116,5,228,0,0,2116,2192,1,0,0,0,2117,2118,5,249,
        0,0,2118,2119,5,265,0,0,2119,2120,3,208,104,0,2120,2121,5,228,0,
        0,2121,2192,1,0,0,0,2122,2123,5,250,0,0,2123,2124,5,265,0,0,2124,
        2125,3,208,104,0,2125,2126,5,228,0,0,2126,2192,1,0,0,0,2127,2128,
        5,251,0,0,2128,2129,5,265,0,0,2129,2134,3,208,104,0,2130,2131,5,
        235,0,0,2131,2133,3,208,104,0,2132,2130,1,0,0,0,2133,2136,1,0,0,
        0,2134,2132,1,0,0,0,2134,2135,1,0,0,0,2135,2137,1,0,0,0,2136,2134,
        1,0,0,0,2137,2138,5,228,0,0,2138,2192,1,0,0,0,2139,2140,5,252,0,
        0,2140,2141,5,265,0,0,2141,2142,3,208,104,0,2142,2143,5,228,0,0,
        2143,2192,1,0,0,0,2144,2145,5,253,0,0,2145,2146,5,265,0,0,2146,2151,
        3,208,104,0,2147,2148,5,235,0,0,2148,2150,3,208,104,0,2149,2147,
        1,0,0,0,2150,2153,1,0,0,0,2151,2149,1,0,0,0,2151,2152,1,0,0,0,2152,
        2154,1,0,0,0,2153,2151,1,0,0,0,2154,2155,5,228,0,0,2155,2192,1,0,
        0,0,2156,2157,5,254,0,0,2157,2158,5,265,0,0,2158,2159,3,208,104,
        0,2159,2160,5,235,0,0,2160,2161,3,208,104,0,2161,2162,5,228,0,0,
        2162,2192,1,0,0,0,2163,2164,5,255,0,0,2164,2165,5,265,0,0,2165,2166,
        3,208,104,0,2166,2167,5,228,0,0,2167,2192,1,0,0,0,2168,2169,5,256,
        0,0,2169,2170,5,265,0,0,2170,2192,5,228,0,0,2171,2172,5,257,0,0,
        2172,2173,5,265,0,0,2173,2174,3,208,104,0,2174,2175,5,228,0,0,2175,
        2192,1,0,0,0,2176,2177,5,258,0,0,2177,2178,5,265,0,0,2178,2179,3,
        208,104,0,2179,2180,5,228,0,0,2180,2192,1,0,0,0,2181,2182,5,259,
        0,0,2182,2183,5,265,0,0,2183,2184,3,208,104,0,2184,2185,5,228,0,
        0,2185,2192,1,0,0,0,2186,2187,5,260,0,0,2187,2188,5,265,0,0,2188,
        2189,3,208,104,0,2189,2190,5,228,0,0,2190,2192,1,0,0,0,2191,2072,
        1,0,0,0,2191,2077,1,0,0,0,2191,2082,1,0,0,0,2191,2087,1,0,0,0,2191,
        2092,1,0,0,0,2191,2097,1,0,0,0,2191,2102,1,0,0,0,2191,2107,1,0,0,
        0,2191,2112,1,0,0,0,2191,2117,1,0,0,0,2191,2122,1,0,0,0,2191,2127,
        1,0,0,0,2191,2139,1,0,0,0,2191,2144,1,0,0,0,2191,2156,1,0,0,0,2191,
        2163,1,0,0,0,2191,2168,1,0,0,0,2191,2171,1,0,0,0,2191,2176,1,0,0,
        0,2191,2181,1,0,0,0,2191,2186,1,0,0,0,2192,211,1,0,0,0,2193,2194,
        7,7,0,0,2194,2195,5,267,0,0,2195,2196,5,276,0,0,2196,2197,5,268,
        0,0,2197,213,1,0,0,0,2198,2199,5,170,0,0,2199,2200,5,262,0,0,2200,
        2201,5,229,0,0,2201,2202,3,216,108,0,2202,2203,5,228,0,0,2203,215,
        1,0,0,0,2204,2207,3,208,104,0,2205,2206,7,6,0,0,2206,2208,3,216,
        108,0,2207,2205,1,0,0,0,2207,2208,1,0,0,0,2208,217,1,0,0,0,2209,
        2210,5,171,0,0,2210,2211,5,283,0,0,2211,2212,5,280,0,0,2212,2231,
        5,278,0,0,2213,2215,5,281,0,0,2214,2213,1,0,0,0,2215,2218,1,0,0,
        0,2216,2214,1,0,0,0,2216,2217,1,0,0,0,2217,2232,1,0,0,0,2218,2216,
        1,0,0,0,2219,2221,5,282,0,0,2220,2219,1,0,0,0,2221,2224,1,0,0,0,
        2222,2220,1,0,0,0,2222,2223,1,0,0,0,2223,2232,1,0,0,0,2224,2222,
        1,0,0,0,2225,2227,5,284,0,0,2226,2225,1,0,0,0,2227,2230,1,0,0,0,
        2228,2226,1,0,0,0,2228,2229,1,0,0,0,2229,2232,1,0,0,0,2230,2228,
        1,0,0,0,2231,2216,1,0,0,0,2231,2222,1,0,0,0,2231,2228,1,0,0,0,2232,
        2233,1,0,0,0,2233,2234,5,279,0,0,2234,2235,5,172,0,0,2235,2240,5,
        287,0,0,2236,2239,3,214,107,0,2237,2239,3,60,30,0,2238,2236,1,0,
        0,0,2238,2237,1,0,0,0,2239,2242,1,0,0,0,2240,2238,1,0,0,0,2240,2241,
        1,0,0,0,2241,2243,1,0,0,0,2242,2240,1,0,0,0,2243,2244,5,2,0,0,2244,
        2245,5,172,0,0,2245,2246,5,287,0,0,2246,219,1,0,0,0,208,260,262,
        271,277,283,292,300,308,316,324,328,331,337,343,349,358,367,376,
        385,394,403,412,421,430,439,448,457,466,475,484,493,502,511,520,
        537,556,569,593,596,603,606,611,616,623,628,633,640,644,649,654,
        659,664,669,674,677,683,689,692,722,733,736,764,781,786,799,806,
        818,833,840,863,872,878,883,887,892,895,899,904,909,913,919,923,
        927,930,932,936,960,968,985,993,999,1010,1013,1025,1032,1060,1094,
        1104,1109,1114,1118,1130,1154,1174,1180,1186,1198,1204,1210,1218,
        1228,1234,1240,1251,1254,1257,1261,1273,1280,1287,1294,1323,1334,
        1374,1393,1428,1440,1443,1471,1495,1532,1540,1555,1560,1565,1571,
        1576,1582,1588,1594,1606,1610,1617,1638,1655,1665,1693,1704,1717,
        1743,1751,1764,1774,1779,1784,1789,1794,1799,1804,1809,1814,1819,
        1824,1829,1834,1837,1852,1860,1875,1891,1893,1904,1909,1911,1919,
        1923,1934,1938,1942,1945,1958,1961,1968,1970,1977,1982,1984,1998,
        2006,2008,2024,2028,2030,2036,2051,2056,2061,2070,2134,2151,2191,
        2207,2216,2222,2228,2231,2238,2240
    ]

class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'CUTOFF'", "'CUTON'", "'FROM'", "'TO'", 
                     "'PEAK'", "'SPECTRUM'", "'VOLUME'", "'PPM1'", "'PPM2'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'TYPE'", "<INVALID>", "<INVALID>", "<INVALID>", "'CV'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'XADC'", "<INVALID>", 
                     "'SIZE'", "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'RAMA'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'SORT'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'DCSA'", "<INVALID>", "'PCSA'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'TAUC'", "<INVALID>", 
                     "'XPCS'", "'TOLL'", "'SAVE'", "'FMED'", "'ERRON'", 
                     "'ERROFF'", "'FON'", "'FOFF'", "'SON'", "'SOFF'", "'FRUN'", 
                     "<INVALID>", "<INVALID>", "'XCCR'", "'WEIP'", "'HBDA'", 
                     "'HBDB'", "'KDIR'", "'KLIN'", "'NSEG'", "'NMIN'", "'NMAX'", 
                     "'SEGM'", "'OHCUT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'UPDFRQ'", "'PRNFRQ'", "'FREEMODE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'ALL'", "<INVALID>", "'ATOM'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'ID'", "<INVALID>", "'NAME'", 
                     "<INVALID>", "'CUT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'STORE1'", 
                     "'STORE2'", "'STORE3'", "'STORE4'", "'STORE5'", "'STORE6'", 
                     "'STORE7'", "'STORE8'", "'STORE9'", "'TAG'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SHOW'", "<INVALID>", "'FOR'", 
                     "'LOOP'", "'TAIL'", "'HEAD'", "'OR'", "'AND'", "'NOT'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "':'", "<INVALID>", "'<'", 
                     "'>'", "'<='", "'>='", "'#'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", 
                     "'ENCODE'", "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", 
                     "'LOG10'", "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", 
                     "'MOD'", "<INVALID>", "<INVALID>", "<INVALID>", "'SIN'", 
                     "'SQRT'", "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'RMS'", "'SUM'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Assign", "Asymptote", 
                      "Averaging", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Cutoff", "Cuton", "From", 
                      "To", "Peak", "Spectrum", "Volume", "Ppm1", "Ppm2", 
                      "Restraints", "Dihedral", "Nassign", "Sanisotropy", 
                      "Coefficients", "ForceConstant", "Xdipolar", "Dipolar", 
                      "Type", "Sign", "Average", "VectorAngle", "Cv", "Partition", 
                      "Tensor", "Anisotropy", "Planar", "Group", "Initialize", 
                      "Selection", "Weight", "Harmonic", "Exponent", "Normal", 
                      "Xadc", "Expectation", "Size", "Zero", "Coupling", 
                      "DegEnergy", "Carbon", "PhiStep", "PsiStep", "Rcoil", 
                      "Proton", "Observed", "Amides", "Nitrogens", "Oxygens", 
                      "RingAtoms", "AlphasAndAmides", "Error", "Ramachandran", 
                      "Gaussian", "Phase", "Quartic", "Shape", "Sort", "Dimensions", 
                      "Collapse", "Danisotropy", "Orient", "Height", "MaxGaussians", 
                      "NewGaussian", "Dcsa", "Sigma", "Pcsa", "OneBond", 
                      "AngleDb", "DerivFlag", "Angle_or_Dihedral", "Paramagnetic", 
                      "Kconst", "Omega", "Tauc", "Debug", "Xpcs", "Tolerance", 
                      "Save", "Fmed", "ErrOn", "ErrOff", "Fon", "Foff", 
                      "Son", "Soff", "Frun", "Xrdcoupling", "Xangle", "Xccr", 
                      "Weip", "Hbda", "Hbdb", "Kdir", "Klin", "Nseg", "Nmin", 
                      "Nmax", "Segm", "Ohcut", "Coh1cut", "Coh2cut", "Ohncut", 
                      "Updfrq", "Prnfrq", "Freemode", "Donor", "Acceptor", 
                      "Flags", "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Hydrogen", "Id", 
                      "Known", "Name", "Point", "Cut", "Previous", "Pseudo", 
                      "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Store_1", "Store_2", "Store_3", "Store_4", "Store_5", 
                      "Store_6", "Store_7", "Store_8", "Store_9", "Tag", 
                      "Vector", "Do_Lp", "Identify_Lp", "Show", "Evaluate_Lp", 
                      "For", "Loop", "Tail", "Head", "Or_op", "And_op", 
                      "Not_op", "Comma", "Complex", "Integer", "Logical", 
                      "Real", "Double_quote_string", "SHARP_COMMENT", "EXCLM_COMMENT", 
                      "SMCLN_COMMENT", "Simple_name", "Simple_names", "Integers", 
                      "L_paren", "R_paren", "Colon", "Equ_op", "Lt_op", 
                      "Gt_op", "Leq_op", "Geq_op", "Neq_op", "Symbol_name", 
                      "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT", 
                      "SET_VARIABLE", "Abs", "Attr_properties", "Comparison_ops", 
                      "SPACE_ATTR", "Averaging_methods", "Simple_name_A", 
                      "SPACE_AVER", "Equ_op_P", "Potential_types", "Simple_name_P", 
                      "SPACE_POTE", "Rdc_dist_fix_types", "Rdc_or_Diff_anis_types", 
                      "Csa_types", "SPACE_TYPE", "Gauss_or_Quart", "SPACE_SHAP", 
                      "Exclude", "Include", "End_F", "Class_name", "Any_class", 
                      "SPACE_FLAG", "R_paren_VE", "Equ_op_VE", "Add_op_VE", 
                      "Sub_op_VE", "Mul_op_VE", "Div_op_VE", "Exp_op_VE", 
                      "Comma_VE", "Integer_VE", "Real_VE", "Atom_properties_VE", 
                      "Abs_VE", "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", 
                      "Encode_VE", "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", 
                      "Log10_VE", "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", 
                      "Mod_VE", "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", 
                      "Sqrt_VE", "Tan_VE", "Simple_name_VE", "Symbol_name_VE", 
                      "Double_quote_string_VE", "SPACE_VE", "L_paren_VF", 
                      "SPACE_VF", "L_paren_VS", "R_paren_VS", "Average_VS", 
                      "Element_VS", "Max_VS", "Min_VS", "Norm_VS", "Rms_VS", 
                      "Sum_VS", "Atom_properties_VS", "SPACE_VS", "L_paren_CF", 
                      "R_paren_CF", "In_CF", "Integer_CF", "Real_CF", "Symbol_name_CF", 
                      "Simple_name_CF", "SPACE_CF", "COMMENT_CF", "Simple_name_LL", 
                      "SPACE_LL" ]

    RULE_xplor_nih_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_rdc_restraint = 3
    RULE_planar_restraint = 4
    RULE_harmonic_restraint = 5
    RULE_antidistance_restraint = 6
    RULE_coupling_restraint = 7
    RULE_carbon_shift_restraint = 8
    RULE_proton_shift_restraint = 9
    RULE_dihedral_angle_db_restraint = 10
    RULE_radius_of_gyration_restraint = 11
    RULE_diffusion_anisotropy_restraint = 12
    RULE_orientation_db_restraint = 13
    RULE_csa_restraint = 14
    RULE_pcsa_restraint = 15
    RULE_one_bond_coupling_restraint = 16
    RULE_angle_db_restraint = 17
    RULE_pre_restraint = 18
    RULE_pcs_restraint = 19
    RULE_prdc_restraint = 20
    RULE_porientation_restraint = 21
    RULE_pccr_restraint = 22
    RULE_hbond_restraint = 23
    RULE_hbond_db_restraint = 24
    RULE_noe_statement = 25
    RULE_noe_assign = 26
    RULE_predict_statement = 27
    RULE_noe_annotation = 28
    RULE_dihedral_statement = 29
    RULE_dihedral_assign = 30
    RULE_sani_statement = 31
    RULE_sani_assign = 32
    RULE_xdip_statement = 33
    RULE_xdip_assign = 34
    RULE_vean_statement = 35
    RULE_vean_assign = 36
    RULE_tenso_statement = 37
    RULE_tenso_assign = 38
    RULE_anis_statement = 39
    RULE_anis_assign = 40
    RULE_planar_statement = 41
    RULE_group_statement = 42
    RULE_harmonic_statement = 43
    RULE_harmonic_assign = 44
    RULE_antidistance_statement = 45
    RULE_xadc_assign = 46
    RULE_coupling_statement = 47
    RULE_coup_assign = 48
    RULE_carbon_shift_statement = 49
    RULE_carbon_shift_assign = 50
    RULE_carbon_shift_rcoil = 51
    RULE_proton_shift_statement = 52
    RULE_observed = 53
    RULE_proton_shift_rcoil = 54
    RULE_proton_shift_anisotropy = 55
    RULE_proton_shift_amides = 56
    RULE_proton_shift_carbons = 57
    RULE_proton_shift_nitrogens = 58
    RULE_proton_shift_oxygens = 59
    RULE_proton_shift_ring_atoms = 60
    RULE_proton_shift_alphas_and_amides = 61
    RULE_ramachandran_statement = 62
    RULE_rama_assign = 63
    RULE_collapse_statement = 64
    RULE_coll_assign = 65
    RULE_diffusion_statement = 66
    RULE_dani_assign = 67
    RULE_orientation_statement = 68
    RULE_orie_assign = 69
    RULE_csa_statement = 70
    RULE_csa_assign = 71
    RULE_pcsa_statement = 72
    RULE_one_bond_coupling_statement = 73
    RULE_one_bond_assign = 74
    RULE_angle_db_statement = 75
    RULE_angle_db_assign = 76
    RULE_pre_statement = 77
    RULE_pre_assign = 78
    RULE_pcs_statement = 79
    RULE_pcs_assign = 80
    RULE_prdc_statement = 81
    RULE_prdc_assign = 82
    RULE_porientation_statement = 83
    RULE_porientation_assign = 84
    RULE_pccr_statement = 85
    RULE_pccr_assign = 86
    RULE_hbond_statement = 87
    RULE_hbond_assign = 88
    RULE_hbond_db_statement = 89
    RULE_hbond_db_assign = 90
    RULE_selection = 91
    RULE_selection_expression = 92
    RULE_term = 93
    RULE_factor = 94
    RULE_number = 95
    RULE_number_f = 96
    RULE_number_s = 97
    RULE_number_a = 98
    RULE_flag_statement = 99
    RULE_vector_statement = 100
    RULE_vector_mode = 101
    RULE_vector_expression = 102
    RULE_vector_operation = 103
    RULE_vflc = 104
    RULE_vector_func_call = 105
    RULE_vector_show_property = 106
    RULE_evaluate_statement = 107
    RULE_evaluate_operation = 108
    RULE_dihedral_assign_loop = 109

    ruleNames =  [ "xplor_nih_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "harmonic_restraint", 
                   "antidistance_restraint", "coupling_restraint", "carbon_shift_restraint", 
                   "proton_shift_restraint", "dihedral_angle_db_restraint", 
                   "radius_of_gyration_restraint", "diffusion_anisotropy_restraint", 
                   "orientation_db_restraint", "csa_restraint", "pcsa_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "pre_restraint", "pcs_restraint", "prdc_restraint", "porientation_restraint", 
                   "pccr_restraint", "hbond_restraint", "hbond_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "sani_statement", 
                   "sani_assign", "xdip_statement", "xdip_assign", "vean_statement", 
                   "vean_assign", "tenso_statement", "tenso_assign", "anis_statement", 
                   "anis_assign", "planar_statement", "group_statement", 
                   "harmonic_statement", "harmonic_assign", "antidistance_statement", 
                   "xadc_assign", "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "coll_assign", "diffusion_statement", "dani_assign", 
                   "orientation_statement", "orie_assign", "csa_statement", 
                   "csa_assign", "pcsa_statement", "one_bond_coupling_statement", 
                   "one_bond_assign", "angle_db_statement", "angle_db_assign", 
                   "pre_statement", "pre_assign", "pcs_statement", "pcs_assign", 
                   "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "hbond_db_statement", 
                   "hbond_db_assign", "selection", "selection_expression", 
                   "term", "factor", "number", "number_f", "number_s", "number_a", 
                   "flag_statement", "vector_statement", "vector_mode", 
                   "vector_expression", "vector_operation", "vflc", "vector_func_call", 
                   "vector_show_property", "evaluate_statement", "evaluate_operation", 
                   "dihedral_assign_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Assign=4
    Asymptote=5
    Averaging=6
    Bhig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Distribute=11
    Monomers=12
    Ncount=13
    Nrestraints=14
    Potential=15
    Predict=16
    Print=17
    Threshold=18
    Reset=19
    Rswitch=20
    Scale=21
    SoExponent=22
    SqConstant=23
    SqExponent=24
    SqOffset=25
    Temperature=26
    Cutoff=27
    Cuton=28
    From=29
    To=30
    Peak=31
    Spectrum=32
    Volume=33
    Ppm1=34
    Ppm2=35
    Restraints=36
    Dihedral=37
    Nassign=38
    Sanisotropy=39
    Coefficients=40
    ForceConstant=41
    Xdipolar=42
    Dipolar=43
    Type=44
    Sign=45
    Average=46
    VectorAngle=47
    Cv=48
    Partition=49
    Tensor=50
    Anisotropy=51
    Planar=52
    Group=53
    Initialize=54
    Selection=55
    Weight=56
    Harmonic=57
    Exponent=58
    Normal=59
    Xadc=60
    Expectation=61
    Size=62
    Zero=63
    Coupling=64
    DegEnergy=65
    Carbon=66
    PhiStep=67
    PsiStep=68
    Rcoil=69
    Proton=70
    Observed=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Ramachandran=78
    Gaussian=79
    Phase=80
    Quartic=81
    Shape=82
    Sort=83
    Dimensions=84
    Collapse=85
    Danisotropy=86
    Orient=87
    Height=88
    MaxGaussians=89
    NewGaussian=90
    Dcsa=91
    Sigma=92
    Pcsa=93
    OneBond=94
    AngleDb=95
    DerivFlag=96
    Angle_or_Dihedral=97
    Paramagnetic=98
    Kconst=99
    Omega=100
    Tauc=101
    Debug=102
    Xpcs=103
    Tolerance=104
    Save=105
    Fmed=106
    ErrOn=107
    ErrOff=108
    Fon=109
    Foff=110
    Son=111
    Soff=112
    Frun=113
    Xrdcoupling=114
    Xangle=115
    Xccr=116
    Weip=117
    Hbda=118
    Hbdb=119
    Kdir=120
    Klin=121
    Nseg=122
    Nmin=123
    Nmax=124
    Segm=125
    Ohcut=126
    Coh1cut=127
    Coh2cut=128
    Ohncut=129
    Updfrq=130
    Prnfrq=131
    Freemode=132
    Donor=133
    Acceptor=134
    Flags=135
    All=136
    Around=137
    Atom=138
    Attribute=139
    BondedTo=140
    ByGroup=141
    ByRes=142
    Chemical=143
    Hydrogen=144
    Id=145
    Known=146
    Name=147
    Point=148
    Cut=149
    Previous=150
    Pseudo=151
    Residue=152
    Resname=153
    Saround=154
    SegIdentifier=155
    Store_1=156
    Store_2=157
    Store_3=158
    Store_4=159
    Store_5=160
    Store_6=161
    Store_7=162
    Store_8=163
    Store_9=164
    Tag=165
    Vector=166
    Do_Lp=167
    Identify_Lp=168
    Show=169
    Evaluate_Lp=170
    For=171
    Loop=172
    Tail=173
    Head=174
    Or_op=175
    And_op=176
    Not_op=177
    Comma=178
    Complex=179
    Integer=180
    Logical=181
    Real=182
    Double_quote_string=183
    SHARP_COMMENT=184
    EXCLM_COMMENT=185
    SMCLN_COMMENT=186
    Simple_name=187
    Simple_names=188
    Integers=189
    L_paren=190
    R_paren=191
    Colon=192
    Equ_op=193
    Lt_op=194
    Gt_op=195
    Leq_op=196
    Geq_op=197
    Neq_op=198
    Symbol_name=199
    SPACE=200
    COMMENT=201
    SECTION_COMMENT=202
    LINE_COMMENT=203
    SET_VARIABLE=204
    Abs=205
    Attr_properties=206
    Comparison_ops=207
    SPACE_ATTR=208
    Averaging_methods=209
    Simple_name_A=210
    SPACE_AVER=211
    Equ_op_P=212
    Potential_types=213
    Simple_name_P=214
    SPACE_POTE=215
    Rdc_dist_fix_types=216
    Rdc_or_Diff_anis_types=217
    Csa_types=218
    SPACE_TYPE=219
    Gauss_or_Quart=220
    SPACE_SHAP=221
    Exclude=222
    Include=223
    End_F=224
    Class_name=225
    Any_class=226
    SPACE_FLAG=227
    R_paren_VE=228
    Equ_op_VE=229
    Add_op_VE=230
    Sub_op_VE=231
    Mul_op_VE=232
    Div_op_VE=233
    Exp_op_VE=234
    Comma_VE=235
    Integer_VE=236
    Real_VE=237
    Atom_properties_VE=238
    Abs_VE=239
    Acos_VE=240
    Asin_VE=241
    Cos_VE=242
    Decode_VE=243
    Encode_VE=244
    Exp_VE=245
    Gauss_VE=246
    Heavy_VE=247
    Int_VE=248
    Log10_VE=249
    Log_VE=250
    Max_VE=251
    Maxw_VE=252
    Min_VE=253
    Mod_VE=254
    Norm_VE=255
    Random_VE=256
    Sign_VE=257
    Sin_VE=258
    Sqrt_VE=259
    Tan_VE=260
    Simple_name_VE=261
    Symbol_name_VE=262
    Double_quote_string_VE=263
    SPACE_VE=264
    L_paren_VF=265
    SPACE_VF=266
    L_paren_VS=267
    R_paren_VS=268
    Average_VS=269
    Element_VS=270
    Max_VS=271
    Min_VS=272
    Norm_VS=273
    Rms_VS=274
    Sum_VS=275
    Atom_properties_VS=276
    SPACE_VS=277
    L_paren_CF=278
    R_paren_CF=279
    In_CF=280
    Integer_CF=281
    Real_CF=282
    Symbol_name_CF=283
    Simple_name_CF=284
    SPACE_CF=285
    COMMENT_CF=286
    Simple_name_LL=287
    SPACE_LL=288

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def hbond_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_assignContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Noe) | (1 << XplorMRParser.Assign) | (1 << XplorMRParser.Restraints) | (1 << XplorMRParser.Dihedral) | (1 << XplorMRParser.Sanisotropy) | (1 << XplorMRParser.Xdipolar) | (1 << XplorMRParser.Dipolar) | (1 << XplorMRParser.VectorAngle) | (1 << XplorMRParser.Tensor) | (1 << XplorMRParser.Anisotropy) | (1 << XplorMRParser.Planar) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize) | (1 << XplorMRParser.Harmonic) | (1 << XplorMRParser.Xadc))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (XplorMRParser.Coupling - 64)) | (1 << (XplorMRParser.Carbon - 64)) | (1 << (XplorMRParser.Proton - 64)) | (1 << (XplorMRParser.Ramachandran - 64)) | (1 << (XplorMRParser.Collapse - 64)) | (1 << (XplorMRParser.Danisotropy - 64)) | (1 << (XplorMRParser.Orient - 64)) | (1 << (XplorMRParser.Dcsa - 64)) | (1 << (XplorMRParser.Pcsa - 64)) | (1 << (XplorMRParser.OneBond - 64)) | (1 << (XplorMRParser.AngleDb - 64)) | (1 << (XplorMRParser.Paramagnetic - 64)) | (1 << (XplorMRParser.Xpcs - 64)) | (1 << (XplorMRParser.Xrdcoupling - 64)) | (1 << (XplorMRParser.Xangle - 64)) | (1 << (XplorMRParser.Xccr - 64)) | (1 << (XplorMRParser.Hbda - 64)) | (1 << (XplorMRParser.Hbdb - 64)))) != 0) or ((((_la - 135)) & ~0x3f) == 0 and ((1 << (_la - 135)) & ((1 << (XplorMRParser.Flags - 135)) | (1 << (XplorMRParser.Vector - 135)) | (1 << (XplorMRParser.Evaluate_Lp - 135)))) != 0):
                self.state = 260
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 220
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 221
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 222
                    self.rdc_restraint()
                    pass

                elif la_ == 4:
                    self.state = 223
                    self.planar_restraint()
                    pass

                elif la_ == 5:
                    self.state = 224
                    self.harmonic_restraint()
                    pass

                elif la_ == 6:
                    self.state = 225
                    self.antidistance_restraint()
                    pass

                elif la_ == 7:
                    self.state = 226
                    self.coupling_restraint()
                    pass

                elif la_ == 8:
                    self.state = 227
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 228
                    self.proton_shift_restraint()
                    pass

                elif la_ == 10:
                    self.state = 229
                    self.dihedral_angle_db_restraint()
                    pass

                elif la_ == 11:
                    self.state = 230
                    self.radius_of_gyration_restraint()
                    pass

                elif la_ == 12:
                    self.state = 231
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 13:
                    self.state = 232
                    self.orientation_db_restraint()
                    pass

                elif la_ == 14:
                    self.state = 233
                    self.csa_restraint()
                    pass

                elif la_ == 15:
                    self.state = 234
                    self.pcsa_restraint()
                    pass

                elif la_ == 16:
                    self.state = 235
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 17:
                    self.state = 236
                    self.angle_db_restraint()
                    pass

                elif la_ == 18:
                    self.state = 237
                    self.pre_restraint()
                    pass

                elif la_ == 19:
                    self.state = 238
                    self.pcs_restraint()
                    pass

                elif la_ == 20:
                    self.state = 239
                    self.prdc_restraint()
                    pass

                elif la_ == 21:
                    self.state = 240
                    self.porientation_restraint()
                    pass

                elif la_ == 22:
                    self.state = 241
                    self.pccr_restraint()
                    pass

                elif la_ == 23:
                    self.state = 242
                    self.hbond_restraint()
                    pass

                elif la_ == 24:
                    self.state = 243
                    self.hbond_db_restraint()
                    pass

                elif la_ == 25:
                    self.state = 244
                    self.flag_statement()
                    pass

                elif la_ == 26:
                    self.state = 245
                    self.vector_statement()
                    pass

                elif la_ == 27:
                    self.state = 246
                    self.evaluate_statement()
                    pass

                elif la_ == 28:
                    self.state = 247
                    self.noe_assign()
                    pass

                elif la_ == 29:
                    self.state = 248
                    self.dihedral_assign()
                    pass

                elif la_ == 30:
                    self.state = 249
                    self.sani_assign()
                    pass

                elif la_ == 31:
                    self.state = 250
                    self.planar_statement()
                    pass

                elif la_ == 32:
                    self.state = 251
                    self.harmonic_assign()
                    pass

                elif la_ == 33:
                    self.state = 252
                    self.hbond_assign()
                    pass

                elif la_ == 34:
                    self.state = 253
                    self.hbond_db_assign()
                    pass

                elif la_ == 35:
                    self.state = 254
                    self.coup_assign()
                    pass

                elif la_ == 36:
                    self.state = 255
                    self.xadc_assign()
                    pass

                elif la_ == 37:
                    self.state = 256
                    self.coll_assign()
                    pass

                elif la_ == 38:
                    self.state = 257
                    self.csa_assign()
                    pass

                elif la_ == 39:
                    self.state = 258
                    self.pre_assign()
                    pass

                elif la_ == 40:
                    self.state = 259
                    self.pcs_assign()
                    pass


                self.state = 264
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 265
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 267
            self.match(XplorMRParser.Noe)
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Asymptote) | (1 << XplorMRParser.Averaging) | (1 << XplorMRParser.Bhig) | (1 << XplorMRParser.Ceiling) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.CountViol) | (1 << XplorMRParser.Distribute) | (1 << XplorMRParser.Monomers) | (1 << XplorMRParser.Ncount) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Predict) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Rswitch) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.SoExponent) | (1 << XplorMRParser.SqConstant) | (1 << XplorMRParser.SqExponent) | (1 << XplorMRParser.SqOffset) | (1 << XplorMRParser.Temperature))) != 0):
                self.state = 268
                self.noe_statement()
                self.state = 273
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 274
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 277
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 276
                self.match(XplorMRParser.Restraints)


            self.state = 279
            self.match(XplorMRParser.Dihedral)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Nassign))) != 0) or _la==XplorMRParser.For:
                self.state = 280
                self.dihedral_statement()
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 286
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,i)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def xdip_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,i)


        def VectorAngle(self):
            return self.getToken(XplorMRParser.VectorAngle, 0)

        def vean_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,i)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tenso_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tenso_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tenso_statementContext,i)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 328
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Sanisotropy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 288
                self.match(XplorMRParser.Sanisotropy)
                self.state = 292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                    self.state = 289
                    self.sani_statement()
                    self.state = 294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 295
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Xdipolar, XplorMRParser.Dipolar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 296
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Xdipolar or _la==XplorMRParser.Dipolar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 300
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type) | (1 << XplorMRParser.Sign) | (1 << XplorMRParser.Average))) != 0):
                    self.state = 297
                    self.xdip_statement()
                    self.state = 302
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 303
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.VectorAngle]:
                self.enterOuterAlt(localctx, 3)
                self.state = 304
                self.match(XplorMRParser.VectorAngle)
                self.state = 308
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition))) != 0):
                    self.state = 305
                    self.vean_statement()
                    self.state = 310
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 311
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Tensor]:
                self.enterOuterAlt(localctx, 4)
                self.state = 312
                self.match(XplorMRParser.Tensor)
                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients))) != 0):
                    self.state = 313
                    self.tenso_statement()
                    self.state = 318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 319
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 320
                self.match(XplorMRParser.Anisotropy)
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                    self.state = 321
                    self.anis_statement()
                    self.state = 326
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 327
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_planar_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 330
                self.match(XplorMRParser.Restraints)


            self.state = 333
            self.match(XplorMRParser.Planar)
            self.state = 337
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Group or _la==XplorMRParser.Initialize:
                self.state = 334
                self.planar_statement()
                self.state = 339
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 340
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(XplorMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = XplorMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 342
                self.match(XplorMRParser.Restraints)


            self.state = 345
            self.match(XplorMRParser.Harmonic)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Exponent or _la==XplorMRParser.Normal:
                self.state = 346
                self.harmonic_statement()
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 352
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def antidistance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_antidistance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(XplorMRParser.Xadc)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0):
                self.state = 355
                self.antidistance_statement()
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 361
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(XplorMRParser.Coupling)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (XplorMRParser.Assign - 4)) | (1 << (XplorMRParser.Classification - 4)) | (1 << (XplorMRParser.Nrestraints - 4)) | (1 << (XplorMRParser.Potential - 4)) | (1 << (XplorMRParser.Print - 4)) | (1 << (XplorMRParser.Reset - 4)) | (1 << (XplorMRParser.Coefficients - 4)) | (1 << (XplorMRParser.ForceConstant - 4)) | (1 << (XplorMRParser.Cv - 4)) | (1 << (XplorMRParser.Partition - 4)) | (1 << (XplorMRParser.DegEnergy - 4)))) != 0):
                self.state = 364
                self.coupling_statement()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 370
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(XplorMRParser.Carbon)
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (XplorMRParser.PhiStep - 67)) | (1 << (XplorMRParser.PsiStep - 67)) | (1 << (XplorMRParser.Rcoil - 67)))) != 0):
                self.state = 373
                self.carbon_shift_statement()
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 379
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(XplorMRParser.Proton)
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Classification) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Anisotropy))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (XplorMRParser.DegEnergy - 65)) | (1 << (XplorMRParser.Carbon - 65)) | (1 << (XplorMRParser.Rcoil - 65)) | (1 << (XplorMRParser.Observed - 65)) | (1 << (XplorMRParser.Amides - 65)) | (1 << (XplorMRParser.Nitrogens - 65)) | (1 << (XplorMRParser.Oxygens - 65)) | (1 << (XplorMRParser.RingAtoms - 65)) | (1 << (XplorMRParser.AlphasAndAmides - 65)) | (1 << (XplorMRParser.Error - 65)))) != 0):
                self.state = 382
                self.proton_shift_statement()
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 388
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ramachandran_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ramachandran_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_dihedral_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(XplorMRParser.Ramachandran)
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (XplorMRParser.Gaussian - 79)) | (1 << (XplorMRParser.Phase - 79)) | (1 << (XplorMRParser.Quartic - 79)) | (1 << (XplorMRParser.Shape - 79)) | (1 << (XplorMRParser.Sort - 79)))) != 0):
                self.state = 391
                self.ramachandran_statement()
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 397
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def collapse_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Collapse_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_radius_of_gyration_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(XplorMRParser.Collapse)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale))) != 0):
                self.state = 400
                self.collapse_statement()
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 406
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(XplorMRParser.Danisotropy)
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                self.state = 409
                self.diffusion_statement()
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 415
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def orientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_orientation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(XplorMRParser.Orient)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (XplorMRParser.Gaussian - 79)) | (1 << (XplorMRParser.Quartic - 79)) | (1 << (XplorMRParser.Height - 79)) | (1 << (XplorMRParser.MaxGaussians - 79)) | (1 << (XplorMRParser.NewGaussian - 79)))) != 0) or _la==XplorMRParser.Residue:
                self.state = 418
                self.orientation_statement()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 424
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def csa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_csa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(XplorMRParser.Dcsa)
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 427
                self.csa_statement()
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 433
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcsa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pcsa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(XplorMRParser.Pcsa)
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 436
                self.pcsa_statement()
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 442
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(XplorMRParser.OneBond)
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 445
                self.one_bond_coupling_statement()
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 451
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.match(XplorMRParser.AngleDb)
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.Error or _la==XplorMRParser.DerivFlag:
                self.state = 454
                self.angle_db_statement()
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 460
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Paramagnetic(self):
            return self.getToken(XplorMRParser.Paramagnetic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pre_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pre_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(XplorMRParser.Paramagnetic)
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 99)) & ~0x3f) == 0 and ((1 << (_la - 99)) & ((1 << (XplorMRParser.Kconst - 99)) | (1 << (XplorMRParser.Omega - 99)) | (1 << (XplorMRParser.Tauc - 99)) | (1 << (XplorMRParser.Debug - 99)))) != 0):
                self.state = 463
                self.pre_statement()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 469
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pcs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(XplorMRParser.Xpcs)
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (XplorMRParser.Tolerance - 104)) | (1 << (XplorMRParser.Save - 104)) | (1 << (XplorMRParser.Fmed - 104)) | (1 << (XplorMRParser.ErrOn - 104)) | (1 << (XplorMRParser.ErrOff - 104)) | (1 << (XplorMRParser.Fon - 104)) | (1 << (XplorMRParser.Foff - 104)) | (1 << (XplorMRParser.Son - 104)) | (1 << (XplorMRParser.Soff - 104)) | (1 << (XplorMRParser.Frun - 104)))) != 0):
                self.state = 472
                self.pcs_statement()
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 478
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def prdc_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_prdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 104)) & ~0x3f) == 0 and ((1 << (_la - 104)) & ((1 << (XplorMRParser.Tolerance - 104)) | (1 << (XplorMRParser.Save - 104)) | (1 << (XplorMRParser.Fmed - 104)) | (1 << (XplorMRParser.ErrOn - 104)) | (1 << (XplorMRParser.ErrOff - 104)) | (1 << (XplorMRParser.Fon - 104)) | (1 << (XplorMRParser.Foff - 104)) | (1 << (XplorMRParser.Son - 104)) | (1 << (XplorMRParser.Soff - 104)) | (1 << (XplorMRParser.Frun - 104)))) != 0):
                self.state = 481
                self.prdc_statement()
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 487
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def porientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_porientation_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(XplorMRParser.Xangle)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 490
                self.porientation_statement()
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 496
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pccr_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pccr_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 498
            self.match(XplorMRParser.Xccr)
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Frun or _la==XplorMRParser.Weip:
                self.state = 499
                self.pccr_statement()
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 505
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_hbond_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 507
            self.match(XplorMRParser.Hbda)
            self.state = 511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 508
                self.hbond_statement()
                self.state = 513
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 514
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbdb(self):
            return self.getToken(XplorMRParser.Hbdb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_restraint" ):
                listener.enterHbond_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_restraint" ):
                listener.exitHbond_db_restraint(self)




    def hbond_db_restraint(self):

        localctx = XplorMRParser.Hbond_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_hbond_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 516
            self.match(XplorMRParser.Hbdb)
            self.state = 520
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or ((((_la - 120)) & ~0x3f) == 0 and ((1 << (_la - 120)) & ((1 << (XplorMRParser.Kdir - 120)) | (1 << (XplorMRParser.Klin - 120)) | (1 << (XplorMRParser.Nseg - 120)) | (1 << (XplorMRParser.Nmin - 120)) | (1 << (XplorMRParser.Nmax - 120)) | (1 << (XplorMRParser.Segm - 120)) | (1 << (XplorMRParser.Ohcut - 120)) | (1 << (XplorMRParser.Coh1cut - 120)) | (1 << (XplorMRParser.Coh2cut - 120)) | (1 << (XplorMRParser.Ohncut - 120)) | (1 << (XplorMRParser.Updfrq - 120)) | (1 << (XplorMRParser.Prnfrq - 120)) | (1 << (XplorMRParser.Freemode - 120)))) != 0):
                self.state = 517
                self.hbond_db_statement()
                self.state = 522
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 523
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Averaging(self):
            return self.getToken(XplorMRParser.Averaging, 0)

        def Simple_name_A(self):
            return self.getToken(XplorMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 525
                self.noe_assign()
                pass
            elif token in [XplorMRParser.Asymptote]:
                self.enterOuterAlt(localctx, 2)
                self.state = 526
                self.match(XplorMRParser.Asymptote)
                self.state = 527
                self.match(XplorMRParser.Simple_name)
                self.state = 528
                self.number_s()
                pass
            elif token in [XplorMRParser.Averaging]:
                self.enterOuterAlt(localctx, 3)
                self.state = 529
                self.match(XplorMRParser.Averaging)
                self.state = 530
                self.match(XplorMRParser.Simple_name_A)
                self.state = 531
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Bhig]:
                self.enterOuterAlt(localctx, 4)
                self.state = 532
                self.match(XplorMRParser.Bhig)
                self.state = 533
                self.match(XplorMRParser.Simple_name)
                self.state = 534
                self.number_s()
                pass
            elif token in [XplorMRParser.Ceiling]:
                self.enterOuterAlt(localctx, 5)
                self.state = 535
                self.match(XplorMRParser.Ceiling)
                self.state = 537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 536
                    self.match(XplorMRParser.Equ_op)


                self.state = 539
                self.number_s()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 6)
                self.state = 540
                self.match(XplorMRParser.Classification)
                self.state = 541
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.CountViol]:
                self.enterOuterAlt(localctx, 7)
                self.state = 542
                self.match(XplorMRParser.CountViol)
                self.state = 543
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Distribute]:
                self.enterOuterAlt(localctx, 8)
                self.state = 544
                self.match(XplorMRParser.Distribute)
                self.state = 545
                self.match(XplorMRParser.Simple_name)
                self.state = 546
                self.match(XplorMRParser.Simple_name)
                self.state = 547
                self.number_s()
                pass
            elif token in [XplorMRParser.Monomers]:
                self.enterOuterAlt(localctx, 9)
                self.state = 548
                self.match(XplorMRParser.Monomers)
                self.state = 549
                self.match(XplorMRParser.Simple_name)
                self.state = 550
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Ncount]:
                self.enterOuterAlt(localctx, 10)
                self.state = 551
                self.match(XplorMRParser.Ncount)
                self.state = 552
                self.match(XplorMRParser.Simple_name)
                self.state = 553
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 11)
                self.state = 554
                self.match(XplorMRParser.Nrestraints)
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 555
                    self.match(XplorMRParser.Equ_op)


                self.state = 558
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 12)
                self.state = 559
                self.match(XplorMRParser.Potential)
                self.state = 560
                self.match(XplorMRParser.Simple_name_P)
                self.state = 561
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Predict]:
                self.enterOuterAlt(localctx, 13)
                self.state = 562
                self.match(XplorMRParser.Predict)
                self.state = 563
                self.predict_statement()
                self.state = 564
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 566
                self.match(XplorMRParser.Print)
                self.state = 567
                self.match(XplorMRParser.Threshold)
                self.state = 569
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 568
                    self.match(XplorMRParser.Equ_op)


                self.state = 571
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 572
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Rswitch]:
                self.enterOuterAlt(localctx, 16)
                self.state = 573
                self.match(XplorMRParser.Rswitch)
                self.state = 574
                self.match(XplorMRParser.Simple_name)
                self.state = 575
                self.number_s()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 17)
                self.state = 576
                self.match(XplorMRParser.Scale)
                self.state = 577
                self.match(XplorMRParser.Simple_name)
                self.state = 578
                self.number_s()
                pass
            elif token in [XplorMRParser.SoExponent]:
                self.enterOuterAlt(localctx, 18)
                self.state = 579
                self.match(XplorMRParser.SoExponent)
                self.state = 580
                self.match(XplorMRParser.Simple_name)
                self.state = 581
                self.number_s()
                pass
            elif token in [XplorMRParser.SqConstant]:
                self.enterOuterAlt(localctx, 19)
                self.state = 582
                self.match(XplorMRParser.SqConstant)
                self.state = 583
                self.match(XplorMRParser.Simple_name)
                self.state = 584
                self.number_s()
                pass
            elif token in [XplorMRParser.SqExponent]:
                self.enterOuterAlt(localctx, 20)
                self.state = 585
                self.match(XplorMRParser.SqExponent)
                self.state = 586
                self.match(XplorMRParser.Simple_name)
                self.state = 587
                self.number_s()
                pass
            elif token in [XplorMRParser.SqOffset]:
                self.enterOuterAlt(localctx, 21)
                self.state = 588
                self.match(XplorMRParser.SqOffset)
                self.state = 589
                self.match(XplorMRParser.Simple_name)
                self.state = 590
                self.number_s()
                pass
            elif token in [XplorMRParser.Temperature]:
                self.enterOuterAlt(localctx, 22)
                self.state = 591
                self.match(XplorMRParser.Temperature)
                self.state = 593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 592
                    self.match(XplorMRParser.Equ_op)


                self.state = 595
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Assign)
            else:
                return self.getToken(XplorMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 598
            self.match(XplorMRParser.Assign)
            self.state = 599
            self.selection()
            self.state = 600
            self.selection()
            self.state = 601
            self.number()
            self.state = 603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.state = 602
                self.number()


            self.state = 606
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 605
                self.number()


            self.state = 611
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Peak) | (1 << XplorMRParser.Spectrum) | (1 << XplorMRParser.Volume) | (1 << XplorMRParser.Ppm1) | (1 << XplorMRParser.Ppm2) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Weight))) != 0):
                self.state = 608
                self.noe_annotation()
                self.state = 613
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 623
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 614
                self.match(XplorMRParser.Or_op)
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Assign:
                    self.state = 615
                    self.match(XplorMRParser.Assign)


                self.state = 618
                self.selection()
                self.state = 619
                self.selection()
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 640
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 626
                self.match(XplorMRParser.Cutoff)
                self.state = 628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 627
                    self.match(XplorMRParser.Equ_op)


                self.state = 630
                self.number_s()
                pass
            elif token in [XplorMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 631
                self.match(XplorMRParser.Cuton)
                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 632
                    self.match(XplorMRParser.Equ_op)


                self.state = 635
                self.number_s()
                pass
            elif token in [XplorMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 636
                self.match(XplorMRParser.From)
                self.state = 637
                self.selection()
                pass
            elif token in [XplorMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 638
                self.match(XplorMRParser.To)
                self.state = 639
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(XplorMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(XplorMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(XplorMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(XplorMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(XplorMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(XplorMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = XplorMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 677
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 642
                self.match(XplorMRParser.Peak)
                self.state = 644
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 643
                    self.match(XplorMRParser.Equ_op)


                self.state = 646
                self.number_a()
                pass
            elif token in [XplorMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 647
                self.match(XplorMRParser.Spectrum)
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 648
                    self.match(XplorMRParser.Equ_op)


                self.state = 651
                self.number_a()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 652
                self.match(XplorMRParser.Weight)
                self.state = 654
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 653
                    self.match(XplorMRParser.Equ_op)


                self.state = 656
                self.number_a()
                pass
            elif token in [XplorMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 657
                self.match(XplorMRParser.Volume)
                self.state = 659
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 658
                    self.match(XplorMRParser.Equ_op)


                self.state = 661
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 662
                self.match(XplorMRParser.Ppm1)
                self.state = 664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 663
                    self.match(XplorMRParser.Equ_op)


                self.state = 666
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 667
                self.match(XplorMRParser.Ppm2)
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 668
                    self.match(XplorMRParser.Equ_op)


                self.state = 671
                self.number_a()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 672
                self.match(XplorMRParser.Cv)
                self.state = 674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 673
                    self.match(XplorMRParser.Equ_op)


                self.state = 676
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assign_loopContext,0)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 692
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 679
                self.dihedral_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 680
                self.dihedral_assign_loop()
                pass
            elif token in [XplorMRParser.Nassign]:
                self.enterOuterAlt(localctx, 3)
                self.state = 681
                self.match(XplorMRParser.Nassign)
                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 682
                    self.match(XplorMRParser.Equ_op)


                self.state = 685
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 4)
                self.state = 686
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 5)
                self.state = 687
                self.match(XplorMRParser.Scale)
                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 688
                    self.match(XplorMRParser.Equ_op)


                self.state = 691
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 694
            self.match(XplorMRParser.Assign)
            self.state = 695
            self.selection()
            self.state = 696
            self.selection()
            self.state = 697
            self.selection()
            self.state = 698
            self.selection()
            self.state = 699
            self.number()
            self.state = 700
            self.number()
            self.state = 701
            self.number()
            self.state = 702
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sani_statement)
        try:
            self.state = 722
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 704
                self.sani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 705
                self.match(XplorMRParser.Classification)
                self.state = 706
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 707
                self.match(XplorMRParser.Coefficients)
                self.state = 708
                self.number_s()
                self.state = 709
                self.number_s()
                self.state = 710
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 712
                self.match(XplorMRParser.ForceConstant)
                self.state = 713
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 714
                self.match(XplorMRParser.Nrestraints)
                self.state = 715
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 716
                self.match(XplorMRParser.Potential)
                self.state = 717
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 718
                self.match(XplorMRParser.Print)
                self.state = 719
                self.match(XplorMRParser.Threshold)
                self.state = 720
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 721
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 724
            self.match(XplorMRParser.Assign)
            self.state = 725
            self.selection()
            self.state = 726
            self.selection()
            self.state = 727
            self.selection()
            self.state = 728
            self.selection()
            self.state = 729
            self.selection()
            self.state = 730
            self.selection()
            self.state = 731
            self.number()
            self.state = 733
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,59,self._ctx)
            if la_ == 1:
                self.state = 732
                self.number()


            self.state = 736
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 735
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_xdip_statement)
        try:
            self.state = 764
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 738
                self.xdip_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 739
                self.match(XplorMRParser.Classification)
                self.state = 740
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 3)
                self.state = 741
                self.match(XplorMRParser.Type)
                self.state = 742
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 743
                self.match(XplorMRParser.Scale)
                self.state = 744
                self.number_s()
                pass
            elif token in [XplorMRParser.Sign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 745
                self.match(XplorMRParser.Sign)
                self.state = 746
                self.match(XplorMRParser.Logical)
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 6)
                self.state = 747
                self.match(XplorMRParser.Average)
                self.state = 748
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 7)
                self.state = 749
                self.match(XplorMRParser.Coefficients)
                self.state = 750
                self.number_s()
                self.state = 751
                self.number_s()
                self.state = 752
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 754
                self.match(XplorMRParser.ForceConstant)
                self.state = 755
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 756
                self.match(XplorMRParser.Nrestraints)
                self.state = 757
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 758
                self.match(XplorMRParser.Potential)
                self.state = 759
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 760
                self.match(XplorMRParser.Print)
                self.state = 761
                self.match(XplorMRParser.Threshold)
                self.state = 762
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 763
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_xdip_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 766
            self.match(XplorMRParser.Assign)
            self.state = 767
            self.selection()
            self.state = 768
            self.selection()
            self.state = 769
            self.selection()
            self.state = 770
            self.selection()
            self.state = 771
            self.selection()
            self.state = 772
            self.selection()
            self.state = 773
            self.number()
            self.state = 774
            self.number()
            self.state = 781
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,62,self._ctx)
            if la_ == 1:
                self.state = 775
                self.number()

            elif la_ == 2:
                self.state = 776
                self.number()
                self.state = 777
                self.number()
                self.state = 778
                self.number()
                self.state = 779
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,0)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 806
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 783
                self.vean_assign()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 784
                self.match(XplorMRParser.Cv)
                self.state = 786
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 785
                    self.match(XplorMRParser.Equ_op)


                self.state = 788
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 789
                self.match(XplorMRParser.Classification)
                self.state = 790
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 791
                self.match(XplorMRParser.ForceConstant)
                self.state = 792
                self.number_s()
                self.state = 793
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 795
                self.match(XplorMRParser.Nrestraints)
                self.state = 796
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 797
                self.match(XplorMRParser.Partition)
                self.state = 799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 798
                    self.match(XplorMRParser.Equ_op)


                self.state = 801
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 802
                self.match(XplorMRParser.Print)
                self.state = 803
                self.match(XplorMRParser.Threshold)
                self.state = 804
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 805
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_vean_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 808
            self.match(XplorMRParser.Assign)
            self.state = 809
            self.selection()
            self.state = 810
            self.selection()
            self.state = 811
            self.selection()
            self.state = 812
            self.selection()
            self.state = 813
            self.number()
            self.state = 814
            self.number()
            self.state = 818
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 815
                self.number()
                self.state = 816
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tenso_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Tenso_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_statement" ):
                listener.enterTenso_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_statement" ):
                listener.exitTenso_statement(self)




    def tenso_statement(self):

        localctx = XplorMRParser.Tenso_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tenso_statement)
        try:
            self.state = 833
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 820
                self.tenso_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 821
                self.match(XplorMRParser.Classification)
                self.state = 822
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 823
                self.match(XplorMRParser.Coefficients)
                self.state = 824
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 825
                self.match(XplorMRParser.Nrestraints)
                self.state = 826
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 827
                self.match(XplorMRParser.Potential)
                self.state = 828
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 829
                self.match(XplorMRParser.Print)
                self.state = 830
                self.match(XplorMRParser.Threshold)
                self.state = 831
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 832
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_assign" ):
                listener.enterTenso_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_assign" ):
                listener.exitTenso_assign(self)




    def tenso_assign(self):

        localctx = XplorMRParser.Tenso_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_tenso_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 835
            self.match(XplorMRParser.Assign)
            self.state = 836
            self.selection()
            self.state = 837
            self.selection()
            self.state = 838
            self.number()
            self.state = 840
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 839
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_anis_statement)
        try:
            self.state = 863
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 842
                self.anis_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 843
                self.match(XplorMRParser.Classification)
                self.state = 844
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 845
                self.match(XplorMRParser.Coefficients)
                self.state = 846
                self.number_s()
                self.state = 847
                self.number_s()
                self.state = 848
                self.number_s()
                self.state = 849
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 851
                self.match(XplorMRParser.ForceConstant)
                self.state = 852
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 853
                self.match(XplorMRParser.Nrestraints)
                self.state = 854
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 855
                self.match(XplorMRParser.Potential)
                self.state = 856
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 857
                self.match(XplorMRParser.Print)
                self.state = 858
                self.match(XplorMRParser.Threshold)
                self.state = 859
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 860
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 861
                self.match(XplorMRParser.Type)
                self.state = 862
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_anis_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 865
            self.match(XplorMRParser.Assign)
            self.state = 866
            self.selection()
            self.state = 867
            self.selection()
            self.state = 868
            self.selection()
            self.state = 869
            self.selection()
            self.state = 870
            self.number()
            self.state = 872
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 871
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_planar_statement)
        self._la = 0 # Token type
        try:
            self.state = 883
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 874
                self.match(XplorMRParser.Group)
                self.state = 878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Selection or _la==XplorMRParser.Weight:
                    self.state = 875
                    self.group_statement()
                    self.state = 880
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 881
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 882
                self.match(XplorMRParser.Initialize)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 895
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 885
                self.match(XplorMRParser.Selection)
                self.state = 887
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 886
                    self.match(XplorMRParser.Equ_op)


                self.state = 889
                self.selection()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 890
                self.match(XplorMRParser.Weight)
                self.state = 892
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 891
                    self.match(XplorMRParser.Equ_op)


                self.state = 894
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Exponent(self):
            return self.getToken(XplorMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(XplorMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = XplorMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Exponent]:
                self.enterOuterAlt(localctx, 1)
                self.state = 897
                self.match(XplorMRParser.Exponent)
                self.state = 899
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 898
                    self.match(XplorMRParser.Equ_op)


                self.state = 901
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Normal]:
                self.enterOuterAlt(localctx, 2)
                self.state = 902
                self.match(XplorMRParser.Normal)
                self.state = 904
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 903
                    self.match(XplorMRParser.Equ_op)


                self.state = 906
                self.match(XplorMRParser.L_paren)
                self.state = 932
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integer, XplorMRParser.Real, XplorMRParser.Symbol_name]:
                    self.state = 907
                    self.number_s()
                    self.state = 909
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 908
                        self.match(XplorMRParser.Comma)


                    self.state = 911
                    self.number_s()
                    self.state = 913
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 912
                        self.match(XplorMRParser.Comma)


                    self.state = 915
                    self.number_s()
                    pass
                elif token in [XplorMRParser.Tail]:
                    self.state = 917
                    self.match(XplorMRParser.Tail)
                    self.state = 919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 918
                        self.match(XplorMRParser.Equ_op)


                    self.state = 921
                    self.selection()
                    self.state = 923
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 922
                        self.match(XplorMRParser.Comma)


                    self.state = 930
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Head:
                        self.state = 925
                        self.match(XplorMRParser.Head)
                        self.state = 927
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==XplorMRParser.Equ_op:
                            self.state = 926
                            self.match(XplorMRParser.Equ_op)


                        self.state = 929
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 934
                self.match(XplorMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = XplorMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(XplorMRParser.Assign)
            self.state = 939
            self.selection()
            self.state = 940
            self.number()
            self.state = 941
            self.number()
            self.state = 942
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_antidistance_statement)
        try:
            self.state = 968
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 944
                self.xadc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 945
                self.match(XplorMRParser.Classification)
                self.state = 946
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 947
                self.match(XplorMRParser.Expectation)
                self.state = 948
                self.match(XplorMRParser.Integer)
                self.state = 949
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 950
                self.match(XplorMRParser.ForceConstant)
                self.state = 951
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 952
                self.match(XplorMRParser.Nrestraints)
                self.state = 953
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 954
                self.match(XplorMRParser.Print)
                self.state = 955
                self.match(XplorMRParser.Threshold)
                self.state = 956
                self.number_s()
                self.state = 960
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 957
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 958
                    self.match(XplorMRParser.Classification)
                    self.state = 959
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 962
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 8)
                self.state = 963
                self.match(XplorMRParser.Size)
                self.state = 964
                self.number_s()
                self.state = 965
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 9)
                self.state = 967
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 970
            self.match(XplorMRParser.Assign)
            self.state = 971
            self.selection()
            self.state = 972
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1013
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 974
                self.coup_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                self.match(XplorMRParser.Classification)
                self.state = 976
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 977
                self.match(XplorMRParser.Coefficients)
                self.state = 978
                self.number_s()
                self.state = 979
                self.number_s()
                self.state = 980
                self.number_s()
                self.state = 981
                self.number_s()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 983
                self.match(XplorMRParser.Cv)
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 984
                    self.match(XplorMRParser.Equ_op)


                self.state = 987
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 988
                self.match(XplorMRParser.DegEnergy)
                self.state = 989
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 990
                self.match(XplorMRParser.ForceConstant)
                self.state = 991
                self.number_s()
                self.state = 993
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                    self.state = 992
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 995
                self.match(XplorMRParser.Nrestraints)
                self.state = 996
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 8)
                self.state = 997
                self.match(XplorMRParser.Partition)
                self.state = 999
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 998
                    self.match(XplorMRParser.Equ_op)


                self.state = 1001
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1002
                self.match(XplorMRParser.Potential)
                self.state = 1003
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1004
                self.match(XplorMRParser.Print)
                self.state = 1005
                self.match(XplorMRParser.Threshold)
                self.state = 1006
                self.number_s()
                self.state = 1010
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1007
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1008
                    self.match(XplorMRParser.Classification)
                    self.state = 1009
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1012
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1015
            self.match(XplorMRParser.Assign)
            self.state = 1016
            self.selection()
            self.state = 1017
            self.selection()
            self.state = 1018
            self.selection()
            self.state = 1019
            self.selection()
            self.state = 1025
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1020
                self.selection()
                self.state = 1021
                self.selection()
                self.state = 1022
                self.selection()
                self.state = 1023
                self.selection()


            self.state = 1027
            self.number()
            self.state = 1028
            self.number()
            self.state = 1032
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1029
                self.number()
                self.state = 1030
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_carbon_shift_statement)
        try:
            self.state = 1060
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1034
                self.carbon_shift_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1035
                self.match(XplorMRParser.Classification)
                self.state = 1036
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1037
                self.match(XplorMRParser.Expectation)
                self.state = 1038
                self.match(XplorMRParser.Integer)
                self.state = 1039
                self.match(XplorMRParser.Integer)
                self.state = 1040
                self.number_s()
                self.state = 1041
                self.number_s()
                self.state = 1042
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1044
                self.match(XplorMRParser.ForceConstant)
                self.state = 1045
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1046
                self.match(XplorMRParser.Nrestraints)
                self.state = 1047
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1048
                self.match(XplorMRParser.PhiStep)
                self.state = 1049
                self.number_s()
                pass
            elif token in [XplorMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1050
                self.match(XplorMRParser.PsiStep)
                self.state = 1051
                self.number_s()
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1052
                self.match(XplorMRParser.Potential)
                self.state = 1053
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1054
                self.match(XplorMRParser.Print)
                self.state = 1055
                self.match(XplorMRParser.Threshold)
                self.state = 1056
                self.number_s()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1057
                self.carbon_shift_rcoil()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1058
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1059
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1062
            self.match(XplorMRParser.Assign)
            self.state = 1063
            self.selection()
            self.state = 1064
            self.selection()
            self.state = 1065
            self.selection()
            self.state = 1066
            self.selection()
            self.state = 1067
            self.selection()
            self.state = 1068
            self.number()
            self.state = 1069
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1071
            self.match(XplorMRParser.Rcoil)
            self.state = 1072
            self.selection()
            self.state = 1073
            self.number_s()
            self.state = 1074
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(XplorMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1109
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1076
                self.observed()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1077
                self.proton_shift_rcoil()
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1078
                self.proton_shift_anisotropy()
                pass
            elif token in [XplorMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1079
                self.proton_shift_amides()
                pass
            elif token in [XplorMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1080
                self.proton_shift_carbons()
                pass
            elif token in [XplorMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1081
                self.proton_shift_nitrogens()
                pass
            elif token in [XplorMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1082
                self.proton_shift_oxygens()
                pass
            elif token in [XplorMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1083
                self.proton_shift_ring_atoms()
                pass
            elif token in [XplorMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1084
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1085
                self.match(XplorMRParser.Classification)
                self.state = 1086
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1087
                self.match(XplorMRParser.Error)
                self.state = 1088
                self.number_s()
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1089
                self.match(XplorMRParser.DegEnergy)
                self.state = 1090
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1091
                self.match(XplorMRParser.ForceConstant)
                self.state = 1092
                self.number_s()
                self.state = 1094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                    self.state = 1093
                    self.number_s()


                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1096
                self.match(XplorMRParser.Potential)
                self.state = 1097
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1098
                self.match(XplorMRParser.Print)
                self.state = 1099
                self.match(XplorMRParser.Threshold)
                self.state = 1100
                self.number_s()
                self.state = 1104
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1101
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1102
                    self.match(XplorMRParser.Classification)
                    self.state = 1103
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1106
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1108
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1111
            self.match(XplorMRParser.Observed)
            self.state = 1112
            self.selection()
            self.state = 1114
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1113
                self.selection()


            self.state = 1116
            self.number_s()
            self.state = 1118
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1117
                self.number_s()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1120
            self.match(XplorMRParser.Rcoil)
            self.state = 1121
            self.selection()
            self.state = 1122
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1124
            self.match(XplorMRParser.Anisotropy)
            self.state = 1125
            self.selection()
            self.state = 1126
            self.selection()
            self.state = 1127
            self.selection()
            self.state = 1128
            self.match(XplorMRParser.Simple_name)
            self.state = 1130
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Logical:
                self.state = 1129
                self.match(XplorMRParser.Logical)


            self.state = 1132
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1134
            self.match(XplorMRParser.Amides)
            self.state = 1135
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1137
            self.match(XplorMRParser.Carbon)
            self.state = 1138
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1140
            self.match(XplorMRParser.Nitrogens)
            self.state = 1141
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1143
            self.match(XplorMRParser.Oxygens)
            self.state = 1144
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1146
            self.match(XplorMRParser.RingAtoms)
            self.state = 1147
            self.match(XplorMRParser.Simple_name)
            self.state = 1148
            self.selection()
            self.state = 1149
            self.selection()
            self.state = 1150
            self.selection()
            self.state = 1151
            self.selection()
            self.state = 1152
            self.selection()
            self.state = 1154
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1153
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 1157
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1261
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1159
                self.rama_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1160
                self.match(XplorMRParser.Classification)
                self.state = 1161
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1162
                self.match(XplorMRParser.Cutoff)
                self.state = 1163
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1164
                self.match(XplorMRParser.ForceConstant)
                self.state = 1165
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1166
                self.match(XplorMRParser.Gaussian)
                self.state = 1167
                self.number_s()
                self.state = 1168
                self.number_s()
                self.state = 1169
                self.number_s()
                self.state = 1174
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
                if la_ == 1:
                    self.state = 1170
                    self.number_s()
                    self.state = 1171
                    self.number_s()
                    self.state = 1172
                    self.number_s()


                self.state = 1180
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
                if la_ == 1:
                    self.state = 1176
                    self.number_s()
                    self.state = 1177
                    self.number_s()
                    self.state = 1178
                    self.number_s()


                self.state = 1186
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                    self.state = 1182
                    self.number_s()
                    self.state = 1183
                    self.number_s()
                    self.state = 1184
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1188
                self.match(XplorMRParser.Nrestraints)
                self.state = 1189
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Phase]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1190
                self.match(XplorMRParser.Phase)
                self.state = 1191
                self.number_s()
                self.state = 1192
                self.number_s()
                self.state = 1193
                self.number_s()
                self.state = 1198
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,106,self._ctx)
                if la_ == 1:
                    self.state = 1194
                    self.number_s()
                    self.state = 1195
                    self.number_s()
                    self.state = 1196
                    self.number_s()


                self.state = 1204
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1200
                    self.number_s()
                    self.state = 1201
                    self.number_s()
                    self.state = 1202
                    self.number_s()


                self.state = 1210
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                    self.state = 1206
                    self.number_s()
                    self.state = 1207
                    self.number_s()
                    self.state = 1208
                    self.number_s()


                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1212
                self.match(XplorMRParser.Print)
                self.state = 1213
                self.match(XplorMRParser.Threshold)
                self.state = 1214
                self.number_s()
                self.state = 1218
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1215
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1216
                    self.match(XplorMRParser.Classification)
                    self.state = 1217
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1220
                self.match(XplorMRParser.Quartic)
                self.state = 1221
                self.number_s()
                self.state = 1222
                self.number_s()
                self.state = 1223
                self.number_s()
                self.state = 1228
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 1224
                    self.number_s()
                    self.state = 1225
                    self.number_s()
                    self.state = 1226
                    self.number_s()


                self.state = 1234
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
                if la_ == 1:
                    self.state = 1230
                    self.number_s()
                    self.state = 1231
                    self.number_s()
                    self.state = 1232
                    self.number_s()


                self.state = 1240
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                    self.state = 1236
                    self.number_s()
                    self.state = 1237
                    self.number_s()
                    self.state = 1238
                    self.number_s()


                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1242
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1243
                self.match(XplorMRParser.Scale)
                self.state = 1244
                self.number_s()
                pass
            elif token in [XplorMRParser.Shape]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1245
                self.match(XplorMRParser.Shape)
                self.state = 1246
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1247
                self.match(XplorMRParser.Size)
                self.state = 1248
                self.match(XplorMRParser.Dimensions)
                self.state = 1249
                self.number_s()
                self.state = 1251
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,113,self._ctx)
                if la_ == 1:
                    self.state = 1250
                    self.number_s()


                self.state = 1254
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 1253
                    self.number_s()


                self.state = 1257
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                    self.state = 1256
                    self.number_s()


                pass
            elif token in [XplorMRParser.Sort]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1259
                self.match(XplorMRParser.Sort)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1260
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1263
            self.match(XplorMRParser.Assign)
            self.state = 1264
            self.selection()
            self.state = 1265
            self.selection()
            self.state = 1266
            self.selection()
            self.state = 1267
            self.selection()
            self.state = 1273
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.state = 1268
                self.selection()
                self.state = 1269
                self.selection()
                self.state = 1270
                self.selection()
                self.state = 1271
                self.selection()


            self.state = 1280
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
            if la_ == 1:
                self.state = 1275
                self.selection()
                self.state = 1276
                self.selection()
                self.state = 1277
                self.selection()
                self.state = 1278
                self.selection()


            self.state = 1287
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1282
                self.selection()
                self.state = 1283
                self.selection()
                self.state = 1284
                self.selection()
                self.state = 1285
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coll_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_collapse_statement)
        try:
            self.state = 1294
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1289
                self.coll_assign()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1290
                self.match(XplorMRParser.Scale)
                self.state = 1291
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1292
                self.match(XplorMRParser.Print)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1293
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign" ):
                listener.enterColl_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign" ):
                listener.exitColl_assign(self)




    def coll_assign(self):

        localctx = XplorMRParser.Coll_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_coll_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.match(XplorMRParser.Assign)
            self.state = 1297
            self.selection()
            self.state = 1298
            self.number()
            self.state = 1299
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_diffusion_statement)
        try:
            self.state = 1323
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1301
                self.dani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1302
                self.match(XplorMRParser.Classification)
                self.state = 1303
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1304
                self.match(XplorMRParser.Coefficients)
                self.state = 1305
                self.number_s()
                self.state = 1306
                self.number_s()
                self.state = 1307
                self.number_s()
                self.state = 1308
                self.number_s()
                self.state = 1309
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1311
                self.match(XplorMRParser.ForceConstant)
                self.state = 1312
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1313
                self.match(XplorMRParser.Nrestraints)
                self.state = 1314
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1315
                self.match(XplorMRParser.Potential)
                self.state = 1316
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1317
                self.match(XplorMRParser.Print)
                self.state = 1318
                self.match(XplorMRParser.Threshold)
                self.state = 1319
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1320
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1321
                self.match(XplorMRParser.Type)
                self.state = 1322
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1325
            self.match(XplorMRParser.Assign)
            self.state = 1326
            self.selection()
            self.state = 1327
            self.selection()
            self.state = 1328
            self.selection()
            self.state = 1329
            self.selection()
            self.state = 1330
            self.selection()
            self.state = 1331
            self.selection()
            self.state = 1332
            self.number()
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1333
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_orientation_statement)
        try:
            self.state = 1393
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1336
                self.orie_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1337
                self.match(XplorMRParser.Classification)
                self.state = 1338
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1339
                self.match(XplorMRParser.Cutoff)
                self.state = 1340
                self.number_s()
                pass
            elif token in [XplorMRParser.Height]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1341
                self.match(XplorMRParser.Height)
                self.state = 1342
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1343
                self.match(XplorMRParser.ForceConstant)
                self.state = 1344
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1345
                self.match(XplorMRParser.Gaussian)
                self.state = 1346
                self.number_s()
                self.state = 1347
                self.number_s()
                self.state = 1348
                self.number_s()
                self.state = 1349
                self.number_s()
                self.state = 1350
                self.number_s()
                self.state = 1351
                self.number_s()
                self.state = 1352
                self.number_s()
                pass
            elif token in [XplorMRParser.MaxGaussians]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1354
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1355
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.NewGaussian]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1356
                self.match(XplorMRParser.NewGaussian)
                self.state = 1357
                self.number_s()
                self.state = 1358
                self.number_s()
                self.state = 1359
                self.number_s()
                self.state = 1360
                self.number_s()
                self.state = 1361
                self.number_s()
                self.state = 1362
                self.number_s()
                self.state = 1363
                self.number_s()
                self.state = 1364
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1366
                self.match(XplorMRParser.Nrestraints)
                self.state = 1367
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1368
                self.match(XplorMRParser.Print)
                self.state = 1369
                self.match(XplorMRParser.Threshold)
                self.state = 1370
                self.number_s()
                self.state = 1374
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1371
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1372
                    self.match(XplorMRParser.Classification)
                    self.state = 1373
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1376
                self.match(XplorMRParser.Quartic)
                self.state = 1377
                self.number_s()
                self.state = 1378
                self.number_s()
                self.state = 1379
                self.number_s()
                self.state = 1380
                self.number_s()
                self.state = 1381
                self.number_s()
                self.state = 1382
                self.number_s()
                self.state = 1383
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1385
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Residue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1386
                self.match(XplorMRParser.Residue)
                self.state = 1387
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1388
                self.match(XplorMRParser.Size)
                self.state = 1389
                self.number_s()
                self.state = 1390
                self.number_s()
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1392
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1395
            self.match(XplorMRParser.Assign)
            self.state = 1396
            self.selection()
            self.state = 1397
            self.selection()
            self.state = 1398
            self.selection()
            self.state = 1399
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_csa_statement)
        try:
            self.state = 1428
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1401
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1402
                self.match(XplorMRParser.Classification)
                self.state = 1403
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1404
                self.match(XplorMRParser.Scale)
                self.state = 1405
                self.number_s()
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1406
                self.match(XplorMRParser.Type)
                self.state = 1407
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1408
                self.match(XplorMRParser.Coefficients)
                self.state = 1409
                self.number_s()
                self.state = 1410
                self.number_s()
                self.state = 1411
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1413
                self.match(XplorMRParser.Sigma)
                self.state = 1414
                self.number_s()
                self.state = 1415
                self.number_s()
                self.state = 1416
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1418
                self.match(XplorMRParser.ForceConstant)
                self.state = 1419
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1420
                self.match(XplorMRParser.Nrestraints)
                self.state = 1421
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1422
                self.match(XplorMRParser.Potential)
                self.state = 1423
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1424
                self.match(XplorMRParser.Print)
                self.state = 1425
                self.match(XplorMRParser.Threshold)
                self.state = 1426
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1427
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_csa_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1430
            self.match(XplorMRParser.Assign)
            self.state = 1431
            self.selection()
            self.state = 1432
            self.selection()
            self.state = 1433
            self.selection()
            self.state = 1434
            self.selection()
            self.state = 1435
            self.selection()
            self.state = 1436
            self.selection()
            self.state = 1437
            self.selection()
            self.state = 1438
            self.number()
            self.state = 1440
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.state = 1439
                self.number()


            self.state = 1443
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1442
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_pcsa_statement)
        try:
            self.state = 1471
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1445
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1446
                self.match(XplorMRParser.Classification)
                self.state = 1447
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1448
                self.match(XplorMRParser.Scale)
                self.state = 1449
                self.number_s()
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1450
                self.match(XplorMRParser.Coefficients)
                self.state = 1451
                self.number_s()
                self.state = 1452
                self.number_s()
                self.state = 1453
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1455
                self.match(XplorMRParser.Sigma)
                self.state = 1456
                self.number_s()
                self.state = 1457
                self.number_s()
                self.state = 1458
                self.number_s()
                self.state = 1459
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1461
                self.match(XplorMRParser.ForceConstant)
                self.state = 1462
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1463
                self.match(XplorMRParser.Nrestraints)
                self.state = 1464
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1465
                self.match(XplorMRParser.Potential)
                self.state = 1466
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1467
                self.match(XplorMRParser.Print)
                self.state = 1468
                self.match(XplorMRParser.Threshold)
                self.state = 1469
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1470
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_one_bond_coupling_statement)
        try:
            self.state = 1495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1473
                self.one_bond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1474
                self.match(XplorMRParser.Classification)
                self.state = 1475
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1476
                self.match(XplorMRParser.Coefficients)
                self.state = 1477
                self.number_s()
                self.state = 1478
                self.number_s()
                self.state = 1479
                self.number_s()
                self.state = 1480
                self.number_s()
                self.state = 1481
                self.number_s()
                self.state = 1482
                self.number_s()
                self.state = 1483
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1485
                self.match(XplorMRParser.ForceConstant)
                self.state = 1486
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1487
                self.match(XplorMRParser.Nrestraints)
                self.state = 1488
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1489
                self.match(XplorMRParser.Potential)
                self.state = 1490
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1491
                self.match(XplorMRParser.Print)
                self.state = 1492
                self.match(XplorMRParser.Threshold)
                self.state = 1493
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1494
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1497
            self.match(XplorMRParser.Assign)
            self.state = 1498
            self.selection()
            self.state = 1499
            self.selection()
            self.state = 1500
            self.selection()
            self.state = 1501
            self.selection()
            self.state = 1502
            self.selection()
            self.state = 1503
            self.selection()
            self.state = 1504
            self.selection()
            self.state = 1505
            self.selection()
            self.state = 1506
            self.number()
            self.state = 1507
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(XplorMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_angle_db_statement)
        try:
            self.state = 1540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1509
                self.angle_db_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1510
                self.match(XplorMRParser.Classification)
                self.state = 1511
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1512
                self.match(XplorMRParser.DerivFlag)
                self.state = 1513
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1514
                self.match(XplorMRParser.Expectation)
                self.state = 1515
                self.match(XplorMRParser.Integer)
                self.state = 1516
                self.match(XplorMRParser.Integer)
                self.state = 1517
                self.number_s()
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1518
                self.match(XplorMRParser.Error)
                self.state = 1519
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1520
                self.match(XplorMRParser.ForceConstant)
                self.state = 1521
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1522
                self.match(XplorMRParser.Nrestraints)
                self.state = 1523
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1524
                self.match(XplorMRParser.Potential)
                self.state = 1525
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1526
                self.match(XplorMRParser.Print)
                self.state = 1527
                self.match(XplorMRParser.Threshold)
                self.state = 1528
                self.number_s()
                self.state = 1532
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1529
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1530
                    self.match(XplorMRParser.Classification)
                    self.state = 1531
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1534
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1535
                self.match(XplorMRParser.Size)
                self.state = 1536
                self.match(XplorMRParser.Angle_or_Dihedral)
                self.state = 1537
                self.match(XplorMRParser.Integer)
                self.state = 1538
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1539
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self.match(XplorMRParser.Assign)
            self.state = 1543
            self.selection()
            self.state = 1544
            self.selection()
            self.state = 1545
            self.selection()
            self.state = 1546
            self.selection()
            self.state = 1547
            self.selection()
            self.state = 1548
            self.selection()
            self.state = 1549
            self.selection()
            self.state = 1550
            self.selection()
            self.state = 1551
            self.selection()
            self.state = 1552
            self.selection()
            self.state = 1553
            self.selection()
            self.state = 1555
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1554
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(XplorMRParser.Equ_op_P, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1610
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1557
                self.pre_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1558
                self.match(XplorMRParser.Classification)
                self.state = 1560
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1559
                    self.match(XplorMRParser.Equ_op)


                self.state = 1562
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1563
                self.match(XplorMRParser.ForceConstant)
                self.state = 1565
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1564
                    self.match(XplorMRParser.Equ_op)


                self.state = 1567
                self.match(XplorMRParser.Simple_name)
                self.state = 1568
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1569
                self.match(XplorMRParser.Nrestraints)
                self.state = 1571
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1570
                    self.match(XplorMRParser.Equ_op)


                self.state = 1573
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1574
                self.match(XplorMRParser.Potential)
                self.state = 1576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op_P:
                    self.state = 1575
                    self.match(XplorMRParser.Equ_op_P)


                self.state = 1578
                self.match(XplorMRParser.Simple_name_P)
                self.state = 1579
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Kconst]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1580
                self.match(XplorMRParser.Kconst)
                self.state = 1582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1581
                    self.match(XplorMRParser.Equ_op)


                self.state = 1584
                self.match(XplorMRParser.Simple_name)
                self.state = 1585
                self.number_s()
                pass
            elif token in [XplorMRParser.Omega]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1586
                self.match(XplorMRParser.Omega)
                self.state = 1588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1587
                    self.match(XplorMRParser.Equ_op)


                self.state = 1590
                self.match(XplorMRParser.Simple_name)
                self.state = 1591
                self.number_s()
                pass
            elif token in [XplorMRParser.Tauc]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1592
                self.match(XplorMRParser.Tauc)
                self.state = 1594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1593
                    self.match(XplorMRParser.Equ_op)


                self.state = 1596
                self.match(XplorMRParser.Simple_name)
                self.state = 1597
                self.number_s()
                self.state = 1598
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1600
                self.match(XplorMRParser.Print)
                self.state = 1601
                self.match(XplorMRParser.Threshold)
                self.state = 1602
                self.number_s()
                self.state = 1606
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1603
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1604
                    self.match(XplorMRParser.Classification)
                    self.state = 1605
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1608
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Debug]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1609
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pre_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1612
            self.match(XplorMRParser.Assign)
            self.state = 1613
            self.selection()
            self.state = 1614
            self.selection()
            self.state = 1615
            self.number()
            self.state = 1617
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1616
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pcs_statement)
        try:
            self.state = 1655
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1619
                self.pcs_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1620
                self.match(XplorMRParser.Classification)
                self.state = 1621
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1622
                self.match(XplorMRParser.Tolerance)
                self.state = 1623
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1624
                self.match(XplorMRParser.Coefficients)
                self.state = 1625
                self.number_s()
                self.state = 1626
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1628
                self.match(XplorMRParser.ForceConstant)
                self.state = 1629
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1630
                self.match(XplorMRParser.Nrestraints)
                self.state = 1631
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1632
                self.match(XplorMRParser.Print)
                self.state = 1633
                self.match(XplorMRParser.Threshold)
                self.state = 1634
                self.number_s()
                self.state = 1638
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1635
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1636
                    self.match(XplorMRParser.Classification)
                    self.state = 1637
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1640
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1641
                self.match(XplorMRParser.Save)
                self.state = 1642
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1643
                self.match(XplorMRParser.Fmed)
                self.state = 1644
                self.number_s()
                self.state = 1645
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1647
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1648
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1649
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1650
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1651
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1652
                self.match(XplorMRParser.Soff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1653
                self.match(XplorMRParser.Frun)
                self.state = 1654
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pcs_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1657
            self.match(XplorMRParser.Assign)
            self.state = 1658
            self.selection()
            self.state = 1659
            self.selection()
            self.state = 1660
            self.selection()
            self.state = 1661
            self.selection()
            self.state = 1662
            self.selection()
            self.state = 1663
            self.number()
            self.state = 1665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1664
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_prdc_statement)
        try:
            self.state = 1693
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1667
                self.prdc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1668
                self.match(XplorMRParser.Classification)
                self.state = 1669
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1670
                self.match(XplorMRParser.Tolerance)
                self.state = 1671
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1672
                self.match(XplorMRParser.Coefficients)
                self.state = 1673
                self.number_s()
                self.state = 1674
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1676
                self.match(XplorMRParser.ForceConstant)
                self.state = 1677
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1678
                self.match(XplorMRParser.Nrestraints)
                self.state = 1679
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1680
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1681
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1682
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1683
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1684
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1685
                self.match(XplorMRParser.Frun)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1686
                self.match(XplorMRParser.Print)
                self.state = 1687
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1688
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1689
                self.match(XplorMRParser.Save)
                self.state = 1690
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1691
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1692
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_prdc_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1695
            self.match(XplorMRParser.Assign)
            self.state = 1696
            self.selection()
            self.state = 1697
            self.selection()
            self.state = 1698
            self.selection()
            self.state = 1699
            self.selection()
            self.state = 1700
            self.selection()
            self.state = 1701
            self.selection()
            self.state = 1702
            self.number()
            self.state = 1704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1703
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_porientation_statement)
        try:
            self.state = 1717
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1706
                self.porientation_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1707
                self.match(XplorMRParser.Classification)
                self.state = 1708
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1709
                self.match(XplorMRParser.ForceConstant)
                self.state = 1710
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1711
                self.match(XplorMRParser.Nrestraints)
                self.state = 1712
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1713
                self.match(XplorMRParser.Print)
                self.state = 1714
                self.match(XplorMRParser.Threshold)
                self.state = 1715
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1716
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1719
            self.match(XplorMRParser.Assign)
            self.state = 1720
            self.selection()
            self.state = 1721
            self.selection()
            self.state = 1722
            self.number()
            self.state = 1723
            self.number()
            self.state = 1724
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_pccr_statement)
        try:
            self.state = 1743
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1726
                self.pccr_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1727
                self.match(XplorMRParser.Classification)
                self.state = 1728
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Weip]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1729
                self.match(XplorMRParser.Weip)
                self.state = 1730
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1731
                self.match(XplorMRParser.Coefficients)
                self.state = 1732
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1733
                self.match(XplorMRParser.ForceConstant)
                self.state = 1734
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1735
                self.match(XplorMRParser.Nrestraints)
                self.state = 1736
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1737
                self.match(XplorMRParser.Print)
                self.state = 1738
                self.match(XplorMRParser.Threshold)
                self.state = 1739
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1740
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1741
                self.match(XplorMRParser.Frun)
                self.state = 1742
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_pccr_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1745
            self.match(XplorMRParser.Assign)
            self.state = 1746
            self.selection()
            self.state = 1747
            self.selection()
            self.state = 1748
            self.selection()
            self.state = 1749
            self.number()
            self.state = 1751
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0):
                self.state = 1750
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_hbond_statement)
        try:
            self.state = 1764
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1753
                self.hbond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1754
                self.match(XplorMRParser.Classification)
                self.state = 1755
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1756
                self.match(XplorMRParser.ForceConstant)
                self.state = 1757
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1758
                self.match(XplorMRParser.Nrestraints)
                self.state = 1759
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1760
                self.match(XplorMRParser.Print)
                self.state = 1761
                self.match(XplorMRParser.Threshold)
                self.state = 1762
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1763
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            self.match(XplorMRParser.Assign)
            self.state = 1767
            self.selection()
            self.state = 1768
            self.selection()
            self.state = 1769
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,0)


        def Kdir(self):
            return self.getToken(XplorMRParser.Kdir, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Klin(self):
            return self.getToken(XplorMRParser.Klin, 0)

        def Nseg(self):
            return self.getToken(XplorMRParser.Nseg, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Nmin(self):
            return self.getToken(XplorMRParser.Nmin, 0)

        def Nmax(self):
            return self.getToken(XplorMRParser.Nmax, 0)

        def Segm(self):
            return self.getToken(XplorMRParser.Segm, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Ohcut(self):
            return self.getToken(XplorMRParser.Ohcut, 0)

        def Coh1cut(self):
            return self.getToken(XplorMRParser.Coh1cut, 0)

        def Coh2cut(self):
            return self.getToken(XplorMRParser.Coh2cut, 0)

        def Ohncut(self):
            return self.getToken(XplorMRParser.Ohncut, 0)

        def Updfrq(self):
            return self.getToken(XplorMRParser.Updfrq, 0)

        def Prnfrq(self):
            return self.getToken(XplorMRParser.Prnfrq, 0)

        def Freemode(self):
            return self.getToken(XplorMRParser.Freemode, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_statement" ):
                listener.enterHbond_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_statement" ):
                listener.exitHbond_db_statement(self)




    def hbond_db_statement(self):

        localctx = XplorMRParser.Hbond_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_hbond_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1837
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1771
                self.hbond_db_assign()
                pass
            elif token in [XplorMRParser.Kdir]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1772
                self.match(XplorMRParser.Kdir)
                self.state = 1774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1773
                    self.match(XplorMRParser.Equ_op)


                self.state = 1776
                self.number_s()
                pass
            elif token in [XplorMRParser.Klin]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1777
                self.match(XplorMRParser.Klin)
                self.state = 1779
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1778
                    self.match(XplorMRParser.Equ_op)


                self.state = 1781
                self.number_s()
                pass
            elif token in [XplorMRParser.Nseg]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1782
                self.match(XplorMRParser.Nseg)
                self.state = 1784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1783
                    self.match(XplorMRParser.Equ_op)


                self.state = 1786
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmin]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1787
                self.match(XplorMRParser.Nmin)
                self.state = 1789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1788
                    self.match(XplorMRParser.Equ_op)


                self.state = 1791
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmax]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1792
                self.match(XplorMRParser.Nmax)
                self.state = 1794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1793
                    self.match(XplorMRParser.Equ_op)


                self.state = 1796
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Segm]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1797
                self.match(XplorMRParser.Segm)
                self.state = 1799
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1798
                    self.match(XplorMRParser.Equ_op)


                self.state = 1801
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Ohcut]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1802
                self.match(XplorMRParser.Ohcut)
                self.state = 1804
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1803
                    self.match(XplorMRParser.Equ_op)


                self.state = 1806
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh1cut]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1807
                self.match(XplorMRParser.Coh1cut)
                self.state = 1809
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1808
                    self.match(XplorMRParser.Equ_op)


                self.state = 1811
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh2cut]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1812
                self.match(XplorMRParser.Coh2cut)
                self.state = 1814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1813
                    self.match(XplorMRParser.Equ_op)


                self.state = 1816
                self.number_s()
                pass
            elif token in [XplorMRParser.Ohncut]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1817
                self.match(XplorMRParser.Ohncut)
                self.state = 1819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1818
                    self.match(XplorMRParser.Equ_op)


                self.state = 1821
                self.number_s()
                pass
            elif token in [XplorMRParser.Updfrq]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1822
                self.match(XplorMRParser.Updfrq)
                self.state = 1824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1823
                    self.match(XplorMRParser.Equ_op)


                self.state = 1826
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Prnfrq]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1827
                self.match(XplorMRParser.Prnfrq)
                self.state = 1829
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1828
                    self.match(XplorMRParser.Equ_op)


                self.state = 1831
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Freemode]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1832
                self.match(XplorMRParser.Freemode)
                self.state = 1834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1833
                    self.match(XplorMRParser.Equ_op)


                self.state = 1836
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign" ):
                listener.enterHbond_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign" ):
                listener.exitHbond_db_assign(self)




    def hbond_db_assign(self):

        localctx = XplorMRParser.Hbond_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_hbond_db_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1839
            self.match(XplorMRParser.Assign)
            self.state = 1840
            self.selection()
            self.state = 1841
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1843
            self.match(XplorMRParser.L_paren)
            self.state = 1844
            self.selection_expression()
            self.state = 1845
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1847
            self.term()
            self.state = 1852
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 1848
                self.match(XplorMRParser.Or_op)
                self.state = 1849
                self.term()
                self.state = 1854
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1855
            self.factor(0)
            self.state = 1860
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.And_op:
                self.state = 1856
                self.match(XplorMRParser.And_op)
                self.state = 1857
                self.factor(0)
                self.state = 1862
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Store_1(self):
            return self.getToken(XplorMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(XplorMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(XplorMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(XplorMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(XplorMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(XplorMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(XplorMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(XplorMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(XplorMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Donor(self):
            return self.getToken(XplorMRParser.Donor, 0)

        def Acceptor(self):
            return self.getToken(XplorMRParser.Acceptor, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 188
        self.enterRecursionRule(localctx, 188, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1998
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
            if la_ == 1:
                self.state = 1864
                self.match(XplorMRParser.L_paren)
                self.state = 1865
                self.selection_expression()
                self.state = 1866
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1868
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1869
                self.match(XplorMRParser.Atom)
                self.state = 1870
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1871
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1872
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1873
                self.match(XplorMRParser.Attribute)
                self.state = 1875
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Abs:
                    self.state = 1874
                    self.match(XplorMRParser.Abs)


                self.state = 1877
                self.match(XplorMRParser.Attr_properties)
                self.state = 1878
                self.match(XplorMRParser.Comparison_ops)
                self.state = 1879
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1880
                self.match(XplorMRParser.BondedTo)
                self.state = 1881
                self.factor(29)
                pass

            elif la_ == 6:
                self.state = 1882
                self.match(XplorMRParser.ByGroup)
                self.state = 1883
                self.factor(28)
                pass

            elif la_ == 7:
                self.state = 1884
                self.match(XplorMRParser.ByRes)
                self.state = 1885
                self.factor(27)
                pass

            elif la_ == 8:
                self.state = 1886
                self.match(XplorMRParser.Chemical)
                self.state = 1893
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1887
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1888
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1891
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,169,self._ctx)
                    if la_ == 1:
                        self.state = 1889
                        self.match(XplorMRParser.Colon)
                        self.state = 1890
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1895
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 1896
                self.match(XplorMRParser.Id)
                self.state = 1897
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 1898
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 1899
                self.match(XplorMRParser.Name)
                self.state = 1911
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1900
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1901
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1904
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
                    if la_ == 1:
                        self.state = 1902
                        self.match(XplorMRParser.Colon)
                        self.state = 1903
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 1906
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 1909
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
                    if la_ == 1:
                        self.state = 1907
                        self.match(XplorMRParser.Colon)
                        self.state = 1908
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 1913
                self.match(XplorMRParser.Not_op)
                self.state = 1914
                self.factor(21)
                pass

            elif la_ == 14:
                self.state = 1915
                self.match(XplorMRParser.Point)
                self.state = 1916
                self.match(XplorMRParser.L_paren)
                self.state = 1917
                self.number_f()
                self.state = 1919
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1918
                    self.match(XplorMRParser.Comma)


                self.state = 1921
                self.number_f()
                self.state = 1923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1922
                    self.match(XplorMRParser.Comma)


                self.state = 1925
                self.number_f()
                self.state = 1926
                self.match(XplorMRParser.R_paren)
                self.state = 1927
                self.match(XplorMRParser.Cut)
                self.state = 1928
                self.number_f()
                pass

            elif la_ == 15:
                self.state = 1930
                self.match(XplorMRParser.Point)
                self.state = 1931
                self.match(XplorMRParser.L_paren)
                self.state = 1932
                self.match(XplorMRParser.Tail)
                self.state = 1934
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1933
                    self.match(XplorMRParser.Equ_op)


                self.state = 1936
                self.selection()
                self.state = 1938
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1937
                    self.match(XplorMRParser.Comma)


                self.state = 1945
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Head:
                    self.state = 1940
                    self.match(XplorMRParser.Head)
                    self.state = 1942
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1941
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1944
                    self.selection()


                self.state = 1947
                self.match(XplorMRParser.R_paren)
                self.state = 1948
                self.match(XplorMRParser.Cut)
                self.state = 1949
                self.number_f()
                pass

            elif la_ == 16:
                self.state = 1951
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 1952
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 1953
                self.match(XplorMRParser.Residue)
                self.state = 1961
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integers]:
                    self.state = 1954
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [XplorMRParser.Integer]:
                    self.state = 1955
                    self.match(XplorMRParser.Integer)
                    self.state = 1958
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,180,self._ctx)
                    if la_ == 1:
                        self.state = 1956
                        self.match(XplorMRParser.Colon)
                        self.state = 1957
                        self.match(XplorMRParser.Integer)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 1960
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 1963
                self.match(XplorMRParser.Resname)
                self.state = 1970
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1964
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1965
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1968
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
                    if la_ == 1:
                        self.state = 1966
                        self.match(XplorMRParser.Colon)
                        self.state = 1967
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 1972
                self.match(XplorMRParser.SegIdentifier)
                self.state = 1984
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1973
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1974
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1977
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
                    if la_ == 1:
                        self.state = 1975
                        self.match(XplorMRParser.Colon)
                        self.state = 1976
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 1979
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 1982
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
                    if la_ == 1:
                        self.state = 1980
                        self.match(XplorMRParser.Colon)
                        self.state = 1981
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1986
                self.match(XplorMRParser.Store_1)
                pass

            elif la_ == 22:
                self.state = 1987
                self.match(XplorMRParser.Store_2)
                pass

            elif la_ == 23:
                self.state = 1988
                self.match(XplorMRParser.Store_3)
                pass

            elif la_ == 24:
                self.state = 1989
                self.match(XplorMRParser.Store_4)
                pass

            elif la_ == 25:
                self.state = 1990
                self.match(XplorMRParser.Store_5)
                pass

            elif la_ == 26:
                self.state = 1991
                self.match(XplorMRParser.Store_6)
                pass

            elif la_ == 27:
                self.state = 1992
                self.match(XplorMRParser.Store_7)
                pass

            elif la_ == 28:
                self.state = 1993
                self.match(XplorMRParser.Store_8)
                pass

            elif la_ == 29:
                self.state = 1994
                self.match(XplorMRParser.Store_9)
                pass

            elif la_ == 30:
                self.state = 1995
                self.match(XplorMRParser.Tag)
                pass

            elif la_ == 31:
                self.state = 1996
                self.match(XplorMRParser.Donor)
                pass

            elif la_ == 32:
                self.state = 1997
                self.match(XplorMRParser.Acceptor)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2008
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,189,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2006
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2000
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 2001
                        self.match(XplorMRParser.Around)
                        self.state = 2002
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2003
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 2004
                        self.match(XplorMRParser.Saround)
                        self.state = 2005
                        self.number_f()
                        pass

             
                self.state = 2010
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,189,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = XplorMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2011
            _la = self._input.LA(1)
            if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = XplorMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2013
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = XplorMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2015
            _la = self._input.LA(1)
            if not(((((_la - 180)) & ~0x3f) == 0 and ((1 << (_la - 180)) & ((1 << (XplorMRParser.Integer - 180)) | (1 << (XplorMRParser.Real - 180)) | (1 << (XplorMRParser.Symbol_name - 180)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = XplorMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2017
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(XplorMRParser.Flags, 0)

        def Include(self):
            return self.getToken(XplorMRParser.Include, 0)

        def End_F(self):
            return self.getToken(XplorMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(XplorMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Class_name)
            else:
                return self.getToken(XplorMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(XplorMRParser.Any_class, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = XplorMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2019
            self.match(XplorMRParser.Flags)
            self.state = 2030
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Exclude:
                self.state = 2020
                self.match(XplorMRParser.Exclude)
                self.state = 2028
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Include, XplorMRParser.Class_name]:
                    self.state = 2024
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==XplorMRParser.Class_name:
                        self.state = 2021
                        self.match(XplorMRParser.Class_name)
                        self.state = 2026
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [XplorMRParser.Any_class]:
                    self.state = 2027
                    self.match(XplorMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2032
            self.match(XplorMRParser.Include)
            self.state = 2036
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Class_name:
                self.state = 2033
                self.match(XplorMRParser.Class_name)
                self.state = 2038
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2039
            self.match(XplorMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(XplorMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = XplorMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2041
            self.match(XplorMRParser.Vector)
            self.state = 2042
            self.vector_mode()
            self.state = 2043
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(XplorMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(XplorMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(XplorMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = XplorMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 2051
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Do_Lp, XplorMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2045
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Do_Lp or _la==XplorMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2046
                self.vector_expression()
                self.state = 2047
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2049
                self.match(XplorMRParser.Show)
                self.state = 2050
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = XplorMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2053
            self.match(XplorMRParser.Atom_properties_VE)
            self.state = 2056
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Equ_op_VE:
                self.state = 2054
                self.match(XplorMRParser.Equ_op_VE)
                self.state = 2055
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = XplorMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2058
            self.vflc()
            self.state = 2061
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (XplorMRParser.Add_op_VE - 230)) | (1 << (XplorMRParser.Sub_op_VE - 230)) | (1 << (XplorMRParser.Mul_op_VE - 230)) | (1 << (XplorMRParser.Div_op_VE - 230)) | (1 << (XplorMRParser.Exp_op_VE - 230)))) != 0):
                self.state = 2059
                _la = self._input.LA(1)
                if not(((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (XplorMRParser.Add_op_VE - 230)) | (1 << (XplorMRParser.Sub_op_VE - 230)) | (1 << (XplorMRParser.Mul_op_VE - 230)) | (1 << (XplorMRParser.Div_op_VE - 230)) | (1 << (XplorMRParser.Exp_op_VE - 230)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2060
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(XplorMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(XplorMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(XplorMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(XplorMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = XplorMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_vflc)
        try:
            self.state = 2070
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2063
                self.match(XplorMRParser.Atom_properties_VE)
                pass
            elif token in [XplorMRParser.Abs_VE, XplorMRParser.Acos_VE, XplorMRParser.Cos_VE, XplorMRParser.Decode_VE, XplorMRParser.Encode_VE, XplorMRParser.Exp_VE, XplorMRParser.Gauss_VE, XplorMRParser.Heavy_VE, XplorMRParser.Int_VE, XplorMRParser.Log10_VE, XplorMRParser.Log_VE, XplorMRParser.Max_VE, XplorMRParser.Maxw_VE, XplorMRParser.Min_VE, XplorMRParser.Mod_VE, XplorMRParser.Norm_VE, XplorMRParser.Random_VE, XplorMRParser.Sign_VE, XplorMRParser.Sin_VE, XplorMRParser.Sqrt_VE, XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2064
                self.vector_func_call()
                pass
            elif token in [XplorMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2065
                self.match(XplorMRParser.Integer_VE)
                pass
            elif token in [XplorMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2066
                self.match(XplorMRParser.Real_VE)
                pass
            elif token in [XplorMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2067
                self.match(XplorMRParser.Simple_name_VE)
                pass
            elif token in [XplorMRParser.Symbol_name_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2068
                self.match(XplorMRParser.Symbol_name_VE)
                pass
            elif token in [XplorMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2069
                self.match(XplorMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(XplorMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(XplorMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(XplorMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(XplorMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(XplorMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(XplorMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(XplorMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(XplorMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(XplorMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(XplorMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(XplorMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(XplorMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(XplorMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma_VE)
            else:
                return self.getToken(XplorMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(XplorMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(XplorMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(XplorMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(XplorMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(XplorMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(XplorMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(XplorMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(XplorMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(XplorMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = XplorMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 2191
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2072
                self.match(XplorMRParser.Abs_VE)
                self.state = 2073
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2074
                self.vflc()
                self.state = 2075
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2077
                self.match(XplorMRParser.Acos_VE)
                self.state = 2078
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2079
                self.vflc()
                self.state = 2080
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2082
                self.match(XplorMRParser.Cos_VE)
                self.state = 2083
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2084
                self.vflc()
                self.state = 2085
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2087
                self.match(XplorMRParser.Decode_VE)
                self.state = 2088
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2089
                self.vflc()
                self.state = 2090
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2092
                self.match(XplorMRParser.Encode_VE)
                self.state = 2093
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2094
                self.vflc()
                self.state = 2095
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2097
                self.match(XplorMRParser.Exp_VE)
                self.state = 2098
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2099
                self.vflc()
                self.state = 2100
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2102
                self.match(XplorMRParser.Gauss_VE)
                self.state = 2103
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2104
                self.vflc()
                self.state = 2105
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2107
                self.match(XplorMRParser.Heavy_VE)
                self.state = 2108
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2109
                self.vflc()
                self.state = 2110
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2112
                self.match(XplorMRParser.Int_VE)
                self.state = 2113
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2114
                self.vflc()
                self.state = 2115
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2117
                self.match(XplorMRParser.Log10_VE)
                self.state = 2118
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2119
                self.vflc()
                self.state = 2120
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2122
                self.match(XplorMRParser.Log_VE)
                self.state = 2123
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2124
                self.vflc()
                self.state = 2125
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2127
                self.match(XplorMRParser.Max_VE)
                self.state = 2128
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2129
                self.vflc()
                self.state = 2134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2130
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2131
                    self.vflc()
                    self.state = 2136
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2137
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2139
                self.match(XplorMRParser.Maxw_VE)
                self.state = 2140
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2141
                self.vflc()
                self.state = 2142
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2144
                self.match(XplorMRParser.Min_VE)
                self.state = 2145
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2146
                self.vflc()
                self.state = 2151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2147
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2148
                    self.vflc()
                    self.state = 2153
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2154
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2156
                self.match(XplorMRParser.Mod_VE)
                self.state = 2157
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2158
                self.vflc()
                self.state = 2159
                self.match(XplorMRParser.Comma_VE)
                self.state = 2160
                self.vflc()
                self.state = 2161
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2163
                self.match(XplorMRParser.Norm_VE)
                self.state = 2164
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2165
                self.vflc()
                self.state = 2166
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2168
                self.match(XplorMRParser.Random_VE)
                self.state = 2169
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2170
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2171
                self.match(XplorMRParser.Sign_VE)
                self.state = 2172
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2173
                self.vflc()
                self.state = 2174
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2176
                self.match(XplorMRParser.Sin_VE)
                self.state = 2177
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2178
                self.vflc()
                self.state = 2179
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2181
                self.match(XplorMRParser.Sqrt_VE)
                self.state = 2182
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2183
                self.vflc()
                self.state = 2184
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2186
                self.match(XplorMRParser.Tan_VE)
                self.state = 2187
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2188
                self.vflc()
                self.state = 2189
                self.match(XplorMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(XplorMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(XplorMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(XplorMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(XplorMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(XplorMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(XplorMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(XplorMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(XplorMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(XplorMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(XplorMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = XplorMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2193
            _la = self._input.LA(1)
            if not(((((_la - 269)) & ~0x3f) == 0 and ((1 << (_la - 269)) & ((1 << (XplorMRParser.Average_VS - 269)) | (1 << (XplorMRParser.Element_VS - 269)) | (1 << (XplorMRParser.Max_VS - 269)) | (1 << (XplorMRParser.Min_VS - 269)) | (1 << (XplorMRParser.Norm_VS - 269)) | (1 << (XplorMRParser.Rms_VS - 269)) | (1 << (XplorMRParser.Sum_VS - 269)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2194
            self.match(XplorMRParser.L_paren_VS)
            self.state = 2195
            self.match(XplorMRParser.Atom_properties_VS)
            self.state = 2196
            self.match(XplorMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(XplorMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = XplorMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2198
            self.match(XplorMRParser.Evaluate_Lp)
            self.state = 2199
            self.match(XplorMRParser.Symbol_name_VE)
            self.state = 2200
            self.match(XplorMRParser.Equ_op_VE)
            self.state = 2201
            self.evaluate_operation()
            self.state = 2202
            self.match(XplorMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = XplorMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2204
            self.vflc()
            self.state = 2207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (XplorMRParser.Add_op_VE - 230)) | (1 << (XplorMRParser.Sub_op_VE - 230)) | (1 << (XplorMRParser.Mul_op_VE - 230)) | (1 << (XplorMRParser.Div_op_VE - 230)) | (1 << (XplorMRParser.Exp_op_VE - 230)))) != 0):
                self.state = 2205
                _la = self._input.LA(1)
                if not(((((_la - 230)) & ~0x3f) == 0 and ((1 << (_la - 230)) & ((1 << (XplorMRParser.Add_op_VE - 230)) | (1 << (XplorMRParser.Sub_op_VE - 230)) | (1 << (XplorMRParser.Mul_op_VE - 230)) | (1 << (XplorMRParser.Div_op_VE - 230)) | (1 << (XplorMRParser.Exp_op_VE - 230)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2206
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = XplorMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2209
            self.match(XplorMRParser.For)
            self.state = 2210
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2211
            self.match(XplorMRParser.In_CF)
            self.state = 2212
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2231
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
            if la_ == 1:
                self.state = 2216
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2213
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2222
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2219
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2224
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2228
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2225
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2230
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2233
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2234
            self.match(XplorMRParser.Loop)
            self.state = 2235
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2240
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2238
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2236
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2237
                    self.dihedral_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2242
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2243
            self.match(XplorMRParser.End)
            self.state = 2244
            self.match(XplorMRParser.Loop)
            self.state = 2245
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[94] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         




