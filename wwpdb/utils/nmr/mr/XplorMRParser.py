# Generated from XplorMRParser.g4 by ANTLR 4.10.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,302,3093,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,2,
        59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,7,
        65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,2,
        72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,7,
        78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,
        85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,
        91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,
        98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,
        2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,2,109,
        7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,7,114,
        2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,2,120,
        7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,7,125,
        2,126,7,126,2,127,7,127,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,5,0,313,
        8,0,10,0,12,0,316,9,0,1,0,1,0,1,1,1,1,5,1,322,8,1,10,1,12,1,325,
        9,1,1,1,1,1,1,2,3,2,330,8,2,1,2,1,2,5,2,334,8,2,10,2,12,2,337,9,
        2,1,2,1,2,1,3,1,3,5,3,343,8,3,10,3,12,3,346,9,3,1,3,1,3,1,3,5,3,
        351,8,3,10,3,12,3,354,9,3,1,3,1,3,1,3,5,3,359,8,3,10,3,12,3,362,
        9,3,1,3,1,3,1,3,5,3,367,8,3,10,3,12,3,370,9,3,1,3,1,3,1,3,5,3,375,
        8,3,10,3,12,3,378,9,3,1,3,3,3,381,8,3,1,4,3,4,384,8,4,1,4,1,4,5,
        4,388,8,4,10,4,12,4,391,9,4,1,4,1,4,1,5,3,5,396,8,5,1,5,1,5,5,5,
        400,8,5,10,5,12,5,403,9,5,1,5,1,5,1,6,1,6,5,6,409,8,6,10,6,12,6,
        412,9,6,1,6,1,6,1,7,1,7,5,7,418,8,7,10,7,12,7,421,9,7,1,7,1,7,1,
        8,1,8,5,8,427,8,8,10,8,12,8,430,9,8,1,8,1,8,1,9,1,9,5,9,436,8,9,
        10,9,12,9,439,9,9,1,9,1,9,1,10,1,10,5,10,445,8,10,10,10,12,10,448,
        9,10,1,10,1,10,1,11,1,11,5,11,454,8,11,10,11,12,11,457,9,11,1,11,
        1,11,1,12,1,12,5,12,463,8,12,10,12,12,12,466,9,12,1,12,1,12,1,13,
        1,13,5,13,472,8,13,10,13,12,13,475,9,13,1,13,1,13,1,14,1,14,5,14,
        481,8,14,10,14,12,14,484,9,14,1,14,1,14,1,15,1,15,5,15,490,8,15,
        10,15,12,15,493,9,15,1,15,1,15,1,16,1,16,5,16,499,8,16,10,16,12,
        16,502,9,16,1,16,1,16,1,17,1,17,5,17,508,8,17,10,17,12,17,511,9,
        17,1,17,1,17,1,18,1,18,5,18,517,8,18,10,18,12,18,520,9,18,1,18,1,
        18,1,19,1,19,5,19,526,8,19,10,19,12,19,529,9,19,1,19,1,19,1,20,1,
        20,5,20,535,8,20,10,20,12,20,538,9,20,1,20,1,20,1,21,1,21,5,21,544,
        8,21,10,21,12,21,547,9,21,1,21,1,21,1,22,1,22,5,22,553,8,22,10,22,
        12,22,556,9,22,1,22,1,22,1,23,1,23,5,23,562,8,23,10,23,12,23,565,
        9,23,1,23,1,23,1,24,1,24,5,24,571,8,24,10,24,12,24,574,9,24,1,24,
        1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,3,25,591,8,25,1,25,1,25,1,25,3,25,596,8,25,1,25,1,25,1,25,1,
        25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,613,
        8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,
        626,8,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,
        1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,650,
        8,25,1,25,3,25,653,8,25,1,26,1,26,1,26,1,26,1,26,3,26,660,8,26,1,
        26,3,26,663,8,26,1,26,5,26,666,8,26,10,26,12,26,669,9,26,1,26,1,
        26,3,26,673,8,26,1,26,1,26,1,26,3,26,678,8,26,1,26,3,26,681,8,26,
        1,26,3,26,684,8,26,5,26,686,8,26,10,26,12,26,689,9,26,1,27,1,27,
        3,27,693,8,27,1,27,1,27,1,27,3,27,698,8,27,1,27,1,27,1,27,1,27,1,
        27,3,27,705,8,27,1,28,1,28,3,28,709,8,28,1,28,1,28,1,28,3,28,714,
        8,28,1,28,1,28,1,28,3,28,719,8,28,1,28,1,28,1,28,3,28,724,8,28,1,
        28,1,28,1,28,3,28,729,8,28,1,28,1,28,1,28,3,28,734,8,28,1,28,1,28,
        1,28,3,28,739,8,28,1,28,3,28,742,8,28,1,29,1,29,1,29,1,29,1,29,3,
        29,749,8,29,1,29,1,29,1,29,1,29,3,29,755,8,29,1,29,1,29,3,29,759,
        8,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,
        1,31,1,31,3,31,775,8,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,
        3,31,785,8,31,1,31,1,31,1,31,3,31,790,8,31,1,31,1,31,1,31,1,31,1,
        31,1,31,1,31,3,31,799,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,3,32,810,8,32,1,32,3,32,813,8,32,1,33,1,33,1,33,3,33,818,
        8,33,1,33,1,33,1,33,1,33,1,33,3,33,825,8,33,1,33,1,33,1,33,1,33,
        1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,839,8,33,1,33,1,33,
        1,33,3,33,844,8,33,1,33,1,33,1,33,1,33,1,33,1,33,1,33,3,33,853,8,
        33,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,
        34,1,34,1,34,3,34,870,8,34,1,35,1,35,1,35,3,35,875,8,35,1,35,1,35,
        1,35,3,35,880,8,35,1,35,1,35,1,35,3,35,885,8,35,1,35,1,35,1,35,1,
        35,1,35,3,35,892,8,35,1,35,1,35,1,35,3,35,897,8,35,1,35,1,35,1,35,
        1,35,1,35,3,35,904,8,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,
        1,36,1,36,3,36,916,8,36,1,37,1,37,1,37,3,37,921,8,37,1,37,1,37,1,
        37,1,37,1,37,3,37,928,8,37,1,37,1,37,1,37,1,37,1,37,1,37,1,37,3,
        37,937,8,37,1,38,1,38,1,38,1,38,1,38,3,38,944,8,38,1,39,1,39,1,39,
        3,39,949,8,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,3,39,
        960,8,39,1,39,1,39,1,39,3,39,965,8,39,1,39,1,39,1,39,1,39,1,39,1,
        39,1,39,1,39,1,39,3,39,976,8,39,1,40,1,40,1,40,1,40,1,40,1,40,1,
        40,3,40,985,8,40,1,41,1,41,1,41,1,41,1,41,3,41,992,8,41,1,42,1,42,
        5,42,996,8,42,10,42,12,42,999,9,42,1,42,1,42,1,43,1,43,3,43,1005,
        8,43,1,43,1,43,1,43,3,43,1010,8,43,1,43,3,43,1013,8,43,1,44,1,44,
        1,44,3,44,1018,8,44,1,44,1,44,1,44,3,44,1023,8,44,1,44,1,44,1,44,
        3,44,1028,8,44,1,44,1,44,3,44,1032,8,44,1,44,1,44,1,44,1,44,3,44,
        1038,8,44,1,44,1,44,3,44,1042,8,44,1,44,1,44,3,44,1046,8,44,1,44,
        3,44,1049,8,44,3,44,1051,8,44,1,44,1,44,3,44,1055,8,44,1,45,1,45,
        1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,3,46,1067,8,46,1,46,1,46,
        1,46,1,46,1,46,1,46,3,46,1075,8,46,1,46,1,46,1,46,3,46,1080,8,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1089,8,46,1,46,3,46,1092,
        8,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1100,8,46,1,47,1,47,1,47,
        1,47,1,48,1,48,1,48,1,48,3,48,1110,8,48,1,48,1,48,1,48,1,48,1,48,
        1,48,1,48,1,48,1,48,3,48,1121,8,48,1,48,1,48,1,48,1,48,1,48,1,48,
        3,48,1129,8,48,1,48,1,48,3,48,1133,8,48,1,48,1,48,1,48,3,48,1138,
        8,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,3,48,1149,8,48,
        1,48,3,48,1152,8,48,1,48,3,48,1155,8,48,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,3,49,1167,8,49,1,49,1,49,1,49,1,49,1,49,
        3,49,1174,8,49,1,50,1,50,1,50,3,50,1179,8,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,3,50,1191,8,50,1,50,1,50,1,50,3,50,
        1196,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,3,50,1211,8,50,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,1,53,1,53,3,53,1238,8,53,1,53,1,53,1,53,1,53,1,53,1,53,
        1,53,1,53,3,53,1248,8,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,1,53,
        3,53,1258,8,53,1,53,3,53,1261,8,53,1,53,1,53,1,53,3,53,1266,8,53,
        1,54,1,54,1,54,3,54,1271,8,54,1,54,1,54,3,54,1275,8,54,1,55,1,55,
        1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1287,8,56,1,56,1,56,
        1,57,1,57,1,57,1,58,1,58,1,58,1,59,1,59,1,59,1,60,1,60,1,60,1,61,
        1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,1311,8,61,1,62,1,62,1,62,
        1,63,1,63,1,63,3,63,1319,8,63,1,63,1,63,1,63,1,63,1,63,3,63,1326,
        8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,1337,8,63,
        1,63,1,63,1,63,1,63,3,63,1343,8,63,1,63,1,63,1,63,1,63,3,63,1349,
        8,63,1,63,1,63,3,63,1353,8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,1,63,3,63,1364,8,63,1,63,1,63,1,63,1,63,3,63,1370,8,63,1,63,
        1,63,1,63,1,63,3,63,1376,8,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,
        1384,8,63,1,63,3,63,1387,8,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,
        1,63,3,63,1397,8,63,1,63,1,63,1,63,1,63,3,63,1403,8,63,1,63,1,63,
        1,63,1,63,3,63,1409,8,63,1,63,1,63,1,63,3,63,1414,8,63,1,63,1,63,
        1,63,1,63,1,63,1,63,1,63,3,63,1423,8,63,1,63,3,63,1426,8,63,1,63,
        3,63,1429,8,63,1,63,1,63,3,63,1433,8,63,1,64,1,64,1,64,1,64,1,64,
        1,64,1,64,1,64,1,64,1,64,3,64,1445,8,64,1,64,1,64,1,64,1,64,1,64,
        3,64,1452,8,64,1,64,1,64,1,64,1,64,1,64,3,64,1459,8,64,1,65,1,65,
        1,65,1,65,3,65,1465,8,65,1,65,1,65,1,65,3,65,1470,8,65,1,66,1,66,
        1,66,1,66,1,66,1,67,1,67,1,67,3,67,1480,8,67,1,67,1,67,1,67,1,67,
        1,67,1,67,1,67,1,67,1,67,1,67,3,67,1492,8,67,1,67,1,67,1,67,3,67,
        1497,8,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,3,67,1508,
        8,67,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1519,8,68,
        1,69,1,69,1,69,3,69,1524,8,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        3,69,1533,8,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        1,69,3,69,1559,8,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1568,
        8,69,1,69,3,69,1571,8,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,
        1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1590,8,69,1,70,
        1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,3,71,1602,8,71,1,71,
        1,71,1,71,3,71,1607,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,
        1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1624,8,71,1,71,1,71,1,71,
        3,71,1629,8,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,3,71,1638,8,71,
        1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,1650,8,72,
        1,72,3,72,1653,8,72,1,73,1,73,1,73,3,73,1658,8,73,1,73,1,73,1,73,
        3,73,1663,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,3,73,1679,8,73,1,73,1,73,1,73,3,73,1684,8,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,1693,8,73,1,74,1,74,1,74,
        3,74,1698,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,
        1,74,1,74,3,74,1712,8,74,1,74,1,74,1,74,3,74,1717,8,74,1,74,1,74,
        1,74,1,74,1,74,1,74,1,74,3,74,1726,8,74,1,75,1,75,1,75,1,75,1,75,
        1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,76,1,76,1,76,3,76,1743,8,76,
        1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1756,
        8,76,1,76,1,76,1,76,3,76,1761,8,76,1,76,1,76,1,76,1,76,1,76,1,76,
        1,76,1,76,1,76,3,76,1772,8,76,1,76,3,76,1775,8,76,1,76,1,76,1,76,
        1,76,1,76,1,76,3,76,1783,8,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,
        1,77,1,77,1,77,1,77,1,77,1,77,3,77,1798,8,77,1,78,1,78,1,78,1,78,
        3,78,1804,8,78,1,78,1,78,1,78,3,78,1809,8,78,1,78,1,78,1,78,1,78,
        3,78,1815,8,78,1,78,1,78,1,78,3,78,1820,8,78,1,78,1,78,1,78,1,78,
        3,78,1826,8,78,1,78,1,78,1,78,1,78,3,78,1832,8,78,1,78,1,78,1,78,
        1,78,3,78,1838,8,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,1,78,
        1,78,3,78,1850,8,78,1,78,3,78,1853,8,78,1,78,1,78,3,78,1857,8,78,
        1,79,1,79,1,79,1,79,1,79,3,79,1864,8,79,1,80,1,80,1,80,1,80,3,80,
        1870,8,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1881,
        8,80,1,80,1,80,1,80,3,80,1886,8,80,1,80,1,80,1,80,1,80,1,80,1,80,
        1,80,3,80,1895,8,80,1,80,3,80,1898,8,80,1,80,1,80,1,80,1,80,1,80,
        1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,3,80,1915,8,80,
        1,81,1,81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1925,8,81,1,81,3,81,
        1928,8,81,1,82,1,82,1,82,3,82,1933,8,82,1,82,1,82,1,82,1,82,1,82,
        1,82,1,82,1,82,1,82,3,82,1944,8,82,1,82,1,82,1,82,3,82,1949,8,82,
        1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,1,82,
        1,82,3,82,1965,8,82,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,
        3,83,1976,8,83,1,84,1,84,1,84,3,84,1981,8,84,1,84,1,84,1,84,3,84,
        1986,8,84,1,84,1,84,1,84,3,84,1991,8,84,1,84,1,84,1,84,1,84,1,84,
        3,84,1998,8,84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,86,1,86,1,86,
        3,86,2010,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,2019,8,86,
        1,86,1,86,1,86,3,86,2024,8,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,
        3,86,2033,8,86,1,87,1,87,1,87,1,87,1,87,1,87,3,87,2041,8,87,1,88,
        1,88,1,88,1,88,3,88,2047,8,88,1,88,1,88,1,88,3,88,2052,8,88,1,88,
        1,88,1,88,3,88,2057,8,88,1,88,1,88,1,88,1,88,1,88,3,88,2064,8,88,
        1,89,1,89,1,89,1,89,1,89,1,90,1,90,1,90,1,90,3,90,2075,8,90,1,90,
        1,90,1,90,3,90,2080,8,90,1,90,1,90,1,90,3,90,2085,8,90,1,90,1,90,
        1,90,3,90,2090,8,90,1,90,1,90,1,90,3,90,2095,8,90,1,90,1,90,1,90,
        3,90,2100,8,90,1,90,1,90,1,90,3,90,2105,8,90,1,90,1,90,1,90,3,90,
        2110,8,90,1,90,1,90,1,90,3,90,2115,8,90,1,90,1,90,1,90,3,90,2120,
        8,90,1,90,1,90,1,90,3,90,2125,8,90,1,90,1,90,1,90,3,90,2130,8,90,
        1,90,1,90,1,90,3,90,2135,8,90,1,90,3,90,2138,8,90,1,91,1,91,1,91,
        1,91,1,92,1,92,1,92,5,92,2147,8,92,10,92,12,92,2150,9,92,1,92,1,
        92,1,93,1,93,5,93,2156,8,93,10,93,12,93,2159,9,93,1,93,1,93,1,93,
        3,93,2164,8,93,1,94,1,94,3,94,2168,8,94,1,94,1,94,1,94,3,94,2173,
        8,94,1,94,1,94,1,94,3,94,2178,8,94,1,94,3,94,2181,8,94,1,95,1,95,
        1,95,1,95,1,96,1,96,1,96,5,96,2190,8,96,10,96,12,96,2193,9,96,1,
        97,1,97,1,97,5,97,2198,8,97,10,97,12,97,2201,9,97,1,98,1,98,1,98,
        1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,2215,8,98,1,98,
        1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
        3,98,2231,8,98,1,98,3,98,2234,8,98,1,98,1,98,1,98,1,98,1,98,1,98,
        1,98,1,98,1,98,3,98,2245,8,98,1,98,1,98,1,98,3,98,2250,8,98,1,98,
        3,98,2253,8,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,2261,8,98,1,98,
        1,98,3,98,2265,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
        3,98,2276,8,98,1,98,1,98,3,98,2280,8,98,1,98,1,98,3,98,2284,8,98,
        1,98,3,98,2287,8,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,
        1,98,1,98,3,98,2300,8,98,1,98,3,98,2303,8,98,1,98,1,98,1,98,1,98,
        1,98,3,98,2310,8,98,1,98,3,98,2313,8,98,1,98,1,98,1,98,1,98,1,98,
        3,98,2320,8,98,1,98,1,98,1,98,3,98,2325,8,98,1,98,3,98,2328,8,98,
        1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,1,98,3,98,
        2342,8,98,1,98,1,98,1,98,1,98,1,98,1,98,5,98,2350,8,98,10,98,12,
        98,2353,9,98,1,99,1,99,1,100,1,100,1,101,1,101,1,102,1,102,1,103,
        1,103,1,103,5,103,2366,8,103,10,103,12,103,2369,9,103,1,103,3,103,
        2372,8,103,3,103,2374,8,103,1,103,1,103,5,103,2378,8,103,10,103,
        12,103,2381,9,103,1,103,1,103,1,104,1,104,1,104,1,104,1,105,1,105,
        1,105,1,105,1,105,1,105,3,105,2395,8,105,1,106,1,106,1,106,3,106,
        2400,8,106,1,107,1,107,1,107,3,107,2405,8,107,1,108,1,108,1,108,
        1,108,1,108,1,108,1,108,3,108,2414,8,108,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,5,109,2476,8,109,10,109,12,109,2479,9,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,5,109,2493,
        8,109,10,109,12,109,2496,9,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,
        1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,1,109,3,109,2535,
        8,109,1,110,1,110,1,110,1,110,1,110,1,111,1,111,1,111,1,111,1,111,
        1,111,1,112,1,112,1,112,3,112,2551,8,112,1,113,1,113,3,113,2555,
        8,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,1,113,
        3,113,2567,8,113,1,113,1,113,1,114,1,114,5,114,2573,8,114,10,114,
        12,114,2576,9,114,1,114,1,114,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,3,115,2590,8,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,2605,
        8,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,
        1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,2635,8,115,1,116,
        1,116,1,116,1,116,1,116,5,116,2642,8,116,10,116,12,116,2645,9,116,
        1,116,5,116,2648,8,116,10,116,12,116,2651,9,116,1,116,5,116,2654,
        8,116,10,116,12,116,2657,9,116,3,116,2659,8,116,1,116,1,116,1,116,
        1,116,1,116,5,116,2666,8,116,10,116,12,116,2669,9,116,1,116,1,116,
        1,116,1,116,1,117,1,117,1,117,1,117,1,117,5,117,2680,8,117,10,117,
        12,117,2683,9,117,1,117,5,117,2686,8,117,10,117,12,117,2689,9,117,
        1,117,5,117,2692,8,117,10,117,12,117,2695,9,117,3,117,2697,8,117,
        1,117,1,117,1,117,1,117,1,117,5,117,2704,8,117,10,117,12,117,2707,
        9,117,1,117,1,117,1,117,1,117,1,118,1,118,1,118,1,118,1,118,5,118,
        2718,8,118,10,118,12,118,2721,9,118,1,118,5,118,2724,8,118,10,118,
        12,118,2727,9,118,1,118,5,118,2730,8,118,10,118,12,118,2733,9,118,
        3,118,2735,8,118,1,118,1,118,1,118,1,118,1,118,5,118,2742,8,118,
        10,118,12,118,2745,9,118,1,118,1,118,1,118,1,118,1,119,1,119,1,119,
        1,119,1,119,5,119,2756,8,119,10,119,12,119,2759,9,119,1,119,5,119,
        2762,8,119,10,119,12,119,2765,9,119,1,119,5,119,2768,8,119,10,119,
        12,119,2771,9,119,3,119,2773,8,119,1,119,1,119,1,119,1,119,1,119,
        5,119,2780,8,119,10,119,12,119,2783,9,119,1,119,1,119,1,119,1,119,
        1,120,1,120,1,120,1,120,1,120,5,120,2794,8,120,10,120,12,120,2797,
        9,120,1,120,5,120,2800,8,120,10,120,12,120,2803,9,120,1,120,5,120,
        2806,8,120,10,120,12,120,2809,9,120,3,120,2811,8,120,1,120,1,120,
        1,120,1,120,1,120,5,120,2818,8,120,10,120,12,120,2821,9,120,1,120,
        1,120,1,120,1,120,1,121,1,121,1,121,1,121,1,121,5,121,2832,8,121,
        10,121,12,121,2835,9,121,1,121,5,121,2838,8,121,10,121,12,121,2841,
        9,121,1,121,5,121,2844,8,121,10,121,12,121,2847,9,121,3,121,2849,
        8,121,1,121,1,121,1,121,1,121,1,121,5,121,2856,8,121,10,121,12,121,
        2859,9,121,1,121,1,121,1,121,1,121,1,122,1,122,1,122,1,122,1,122,
        5,122,2870,8,122,10,122,12,122,2873,9,122,1,122,5,122,2876,8,122,
        10,122,12,122,2879,9,122,1,122,5,122,2882,8,122,10,122,12,122,2885,
        9,122,3,122,2887,8,122,1,122,1,122,1,122,1,122,1,122,5,122,2894,
        8,122,10,122,12,122,2897,9,122,1,122,1,122,1,122,1,122,1,123,1,123,
        1,123,1,123,1,123,5,123,2908,8,123,10,123,12,123,2911,9,123,1,123,
        5,123,2914,8,123,10,123,12,123,2917,9,123,1,123,5,123,2920,8,123,
        10,123,12,123,2923,9,123,3,123,2925,8,123,1,123,1,123,1,123,1,123,
        1,123,5,123,2932,8,123,10,123,12,123,2935,9,123,1,123,1,123,1,123,
        1,123,1,124,1,124,1,124,1,124,1,124,5,124,2946,8,124,10,124,12,124,
        2949,9,124,1,124,5,124,2952,8,124,10,124,12,124,2955,9,124,1,124,
        5,124,2958,8,124,10,124,12,124,2961,9,124,3,124,2963,8,124,1,124,
        1,124,1,124,1,124,1,124,5,124,2970,8,124,10,124,12,124,2973,9,124,
        1,124,1,124,1,124,1,124,1,125,1,125,1,125,1,125,1,125,5,125,2984,
        8,125,10,125,12,125,2987,9,125,1,125,5,125,2990,8,125,10,125,12,
        125,2993,9,125,1,125,5,125,2996,8,125,10,125,12,125,2999,9,125,3,
        125,3001,8,125,1,125,1,125,1,125,1,125,1,125,5,125,3008,8,125,10,
        125,12,125,3011,9,125,1,125,1,125,1,125,1,125,1,126,1,126,1,126,
        1,126,1,126,5,126,3022,8,126,10,126,12,126,3025,9,126,1,126,5,126,
        3028,8,126,10,126,12,126,3031,9,126,1,126,5,126,3034,8,126,10,126,
        12,126,3037,9,126,3,126,3039,8,126,1,126,1,126,1,126,1,126,1,126,
        5,126,3046,8,126,10,126,12,126,3049,9,126,1,126,1,126,1,126,1,126,
        1,127,1,127,1,127,1,127,1,127,5,127,3060,8,127,10,127,12,127,3063,
        9,127,1,127,5,127,3066,8,127,10,127,12,127,3069,9,127,1,127,5,127,
        3072,8,127,10,127,12,127,3075,9,127,3,127,3077,8,127,1,127,1,127,
        1,127,1,127,1,127,5,127,3084,8,127,10,127,12,127,3087,9,127,1,127,
        1,127,1,127,1,127,1,127,0,1,196,128,0,2,4,6,8,10,12,14,16,18,20,
        22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,
        66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,
        108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,
        140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
        172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,
        204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,
        236,238,240,242,244,246,248,250,252,254,0,13,1,0,43,44,2,0,37,37,
        95,95,1,0,199,200,2,0,192,192,201,201,3,0,192,192,194,194,213,213,
        2,0,192,192,194,194,1,0,167,168,1,0,244,248,1,0,283,289,4,0,37,37,
        95,95,177,178,199,199,2,0,173,173,192,192,2,0,37,37,178,178,2,0,
        19,19,181,181,3721,0,314,1,0,0,0,2,319,1,0,0,0,4,329,1,0,0,0,6,380,
        1,0,0,0,8,383,1,0,0,0,10,395,1,0,0,0,12,406,1,0,0,0,14,415,1,0,0,
        0,16,424,1,0,0,0,18,433,1,0,0,0,20,442,1,0,0,0,22,451,1,0,0,0,24,
        460,1,0,0,0,26,469,1,0,0,0,28,478,1,0,0,0,30,487,1,0,0,0,32,496,
        1,0,0,0,34,505,1,0,0,0,36,514,1,0,0,0,38,523,1,0,0,0,40,532,1,0,
        0,0,42,541,1,0,0,0,44,550,1,0,0,0,46,559,1,0,0,0,48,568,1,0,0,0,
        50,652,1,0,0,0,52,654,1,0,0,0,54,704,1,0,0,0,56,741,1,0,0,0,58,758,
        1,0,0,0,60,760,1,0,0,0,62,798,1,0,0,0,64,800,1,0,0,0,66,852,1,0,
        0,0,68,854,1,0,0,0,70,903,1,0,0,0,72,905,1,0,0,0,74,936,1,0,0,0,
        76,938,1,0,0,0,78,975,1,0,0,0,80,977,1,0,0,0,82,991,1,0,0,0,84,993,
        1,0,0,0,86,1012,1,0,0,0,88,1054,1,0,0,0,90,1056,1,0,0,0,92,1099,
        1,0,0,0,94,1101,1,0,0,0,96,1154,1,0,0,0,98,1156,1,0,0,0,100,1210,
        1,0,0,0,102,1212,1,0,0,0,104,1221,1,0,0,0,106,1265,1,0,0,0,108,1267,
        1,0,0,0,110,1276,1,0,0,0,112,1280,1,0,0,0,114,1290,1,0,0,0,116,1293,
        1,0,0,0,118,1296,1,0,0,0,120,1299,1,0,0,0,122,1302,1,0,0,0,124,1312,
        1,0,0,0,126,1432,1,0,0,0,128,1434,1,0,0,0,130,1469,1,0,0,0,132,1471,
        1,0,0,0,134,1507,1,0,0,0,136,1509,1,0,0,0,138,1589,1,0,0,0,140,1591,
        1,0,0,0,142,1637,1,0,0,0,144,1639,1,0,0,0,146,1692,1,0,0,0,148,1725,
        1,0,0,0,150,1727,1,0,0,0,152,1782,1,0,0,0,154,1784,1,0,0,0,156,1856,
        1,0,0,0,158,1858,1,0,0,0,160,1914,1,0,0,0,162,1916,1,0,0,0,164,1964,
        1,0,0,0,166,1966,1,0,0,0,168,1997,1,0,0,0,170,1999,1,0,0,0,172,2032,
        1,0,0,0,174,2034,1,0,0,0,176,2063,1,0,0,0,178,2065,1,0,0,0,180,2137,
        1,0,0,0,182,2139,1,0,0,0,184,2143,1,0,0,0,186,2163,1,0,0,0,188,2180,
        1,0,0,0,190,2182,1,0,0,0,192,2186,1,0,0,0,194,2194,1,0,0,0,196,2341,
        1,0,0,0,198,2354,1,0,0,0,200,2356,1,0,0,0,202,2358,1,0,0,0,204,2360,
        1,0,0,0,206,2362,1,0,0,0,208,2384,1,0,0,0,210,2394,1,0,0,0,212,2396,
        1,0,0,0,214,2401,1,0,0,0,216,2413,1,0,0,0,218,2534,1,0,0,0,220,2536,
        1,0,0,0,222,2541,1,0,0,0,224,2547,1,0,0,0,226,2552,1,0,0,0,228,2570,
        1,0,0,0,230,2634,1,0,0,0,232,2636,1,0,0,0,234,2674,1,0,0,0,236,2712,
        1,0,0,0,238,2750,1,0,0,0,240,2788,1,0,0,0,242,2826,1,0,0,0,244,2864,
        1,0,0,0,246,2902,1,0,0,0,248,2940,1,0,0,0,250,2978,1,0,0,0,252,3016,
        1,0,0,0,254,3054,1,0,0,0,256,313,3,2,1,0,257,313,3,4,2,0,258,313,
        3,6,3,0,259,313,3,8,4,0,260,313,3,10,5,0,261,313,3,12,6,0,262,313,
        3,14,7,0,263,313,3,16,8,0,264,313,3,18,9,0,265,313,3,20,10,0,266,
        313,3,22,11,0,267,313,3,24,12,0,268,313,3,26,13,0,269,313,3,28,14,
        0,270,313,3,30,15,0,271,313,3,32,16,0,272,313,3,34,17,0,273,313,
        3,36,18,0,274,313,3,38,19,0,275,313,3,40,20,0,276,313,3,42,21,0,
        277,313,3,44,22,0,278,313,3,46,23,0,279,313,3,48,24,0,280,313,3,
        184,92,0,281,313,3,206,103,0,282,313,3,208,104,0,283,313,3,222,111,
        0,284,313,3,226,113,0,285,313,3,228,114,0,286,313,3,232,116,0,287,
        313,3,234,117,0,288,313,3,236,118,0,289,313,3,250,125,0,290,313,
        3,252,126,0,291,313,3,240,120,0,292,313,3,238,119,0,293,313,3,242,
        121,0,294,313,3,244,122,0,295,313,3,246,123,0,296,313,3,248,124,
        0,297,313,3,52,26,0,298,313,3,60,30,0,299,313,3,64,32,0,300,313,
        3,82,41,0,301,313,3,90,45,0,302,313,3,178,89,0,303,313,3,182,91,
        0,304,313,3,98,49,0,305,313,3,94,47,0,306,313,3,132,66,0,307,313,
        3,144,72,0,308,313,3,158,79,0,309,313,3,162,81,0,310,313,3,108,54,
        0,311,313,3,230,115,0,312,256,1,0,0,0,312,257,1,0,0,0,312,258,1,
        0,0,0,312,259,1,0,0,0,312,260,1,0,0,0,312,261,1,0,0,0,312,262,1,
        0,0,0,312,263,1,0,0,0,312,264,1,0,0,0,312,265,1,0,0,0,312,266,1,
        0,0,0,312,267,1,0,0,0,312,268,1,0,0,0,312,269,1,0,0,0,312,270,1,
        0,0,0,312,271,1,0,0,0,312,272,1,0,0,0,312,273,1,0,0,0,312,274,1,
        0,0,0,312,275,1,0,0,0,312,276,1,0,0,0,312,277,1,0,0,0,312,278,1,
        0,0,0,312,279,1,0,0,0,312,280,1,0,0,0,312,281,1,0,0,0,312,282,1,
        0,0,0,312,283,1,0,0,0,312,284,1,0,0,0,312,285,1,0,0,0,312,286,1,
        0,0,0,312,287,1,0,0,0,312,288,1,0,0,0,312,289,1,0,0,0,312,290,1,
        0,0,0,312,291,1,0,0,0,312,292,1,0,0,0,312,293,1,0,0,0,312,294,1,
        0,0,0,312,295,1,0,0,0,312,296,1,0,0,0,312,297,1,0,0,0,312,298,1,
        0,0,0,312,299,1,0,0,0,312,300,1,0,0,0,312,301,1,0,0,0,312,302,1,
        0,0,0,312,303,1,0,0,0,312,304,1,0,0,0,312,305,1,0,0,0,312,306,1,
        0,0,0,312,307,1,0,0,0,312,308,1,0,0,0,312,309,1,0,0,0,312,310,1,
        0,0,0,312,311,1,0,0,0,313,316,1,0,0,0,314,312,1,0,0,0,314,315,1,
        0,0,0,315,317,1,0,0,0,316,314,1,0,0,0,317,318,5,0,0,1,318,1,1,0,
        0,0,319,323,5,3,0,0,320,322,3,50,25,0,321,320,1,0,0,0,322,325,1,
        0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,326,1,0,0,0,325,323,1,
        0,0,0,326,327,5,2,0,0,327,3,1,0,0,0,328,330,5,36,0,0,329,328,1,0,
        0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,335,5,37,0,0,332,334,3,58,
        29,0,333,332,1,0,0,0,334,337,1,0,0,0,335,333,1,0,0,0,335,336,1,0,
        0,0,336,338,1,0,0,0,337,335,1,0,0,0,338,339,5,2,0,0,339,5,1,0,0,
        0,340,344,5,40,0,0,341,343,3,62,31,0,342,341,1,0,0,0,343,346,1,0,
        0,0,344,342,1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,344,1,0,
        0,0,347,381,5,2,0,0,348,352,7,0,0,0,349,351,3,66,33,0,350,349,1,
        0,0,0,351,354,1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,355,1,
        0,0,0,354,352,1,0,0,0,355,381,5,2,0,0,356,360,5,47,0,0,357,359,3,
        70,35,0,358,357,1,0,0,0,359,362,1,0,0,0,360,358,1,0,0,0,360,361,
        1,0,0,0,361,363,1,0,0,0,362,360,1,0,0,0,363,381,5,2,0,0,364,368,
        5,50,0,0,365,367,3,74,37,0,366,365,1,0,0,0,367,370,1,0,0,0,368,366,
        1,0,0,0,368,369,1,0,0,0,369,371,1,0,0,0,370,368,1,0,0,0,371,381,
        5,2,0,0,372,376,5,51,0,0,373,375,3,78,39,0,374,373,1,0,0,0,375,378,
        1,0,0,0,376,374,1,0,0,0,376,377,1,0,0,0,377,379,1,0,0,0,378,376,
        1,0,0,0,379,381,5,2,0,0,380,340,1,0,0,0,380,348,1,0,0,0,380,356,
        1,0,0,0,380,364,1,0,0,0,380,372,1,0,0,0,381,7,1,0,0,0,382,384,5,
        36,0,0,383,382,1,0,0,0,383,384,1,0,0,0,384,385,1,0,0,0,385,389,5,
        52,0,0,386,388,3,82,41,0,387,386,1,0,0,0,388,391,1,0,0,0,389,387,
        1,0,0,0,389,390,1,0,0,0,390,392,1,0,0,0,391,389,1,0,0,0,392,393,
        5,2,0,0,393,9,1,0,0,0,394,396,5,36,0,0,395,394,1,0,0,0,395,396,1,
        0,0,0,396,397,1,0,0,0,397,401,5,57,0,0,398,400,3,88,44,0,399,398,
        1,0,0,0,400,403,1,0,0,0,401,399,1,0,0,0,401,402,1,0,0,0,402,404,
        1,0,0,0,403,401,1,0,0,0,404,405,5,2,0,0,405,11,1,0,0,0,406,410,5,
        60,0,0,407,409,3,92,46,0,408,407,1,0,0,0,409,412,1,0,0,0,410,408,
        1,0,0,0,410,411,1,0,0,0,411,413,1,0,0,0,412,410,1,0,0,0,413,414,
        5,2,0,0,414,13,1,0,0,0,415,419,5,64,0,0,416,418,3,96,48,0,417,416,
        1,0,0,0,418,421,1,0,0,0,419,417,1,0,0,0,419,420,1,0,0,0,420,422,
        1,0,0,0,421,419,1,0,0,0,422,423,5,2,0,0,423,15,1,0,0,0,424,428,5,
        66,0,0,425,427,3,100,50,0,426,425,1,0,0,0,427,430,1,0,0,0,428,426,
        1,0,0,0,428,429,1,0,0,0,429,431,1,0,0,0,430,428,1,0,0,0,431,432,
        5,2,0,0,432,17,1,0,0,0,433,437,5,70,0,0,434,436,3,106,53,0,435,434,
        1,0,0,0,436,439,1,0,0,0,437,435,1,0,0,0,437,438,1,0,0,0,438,440,
        1,0,0,0,439,437,1,0,0,0,440,441,5,2,0,0,441,19,1,0,0,0,442,446,5,
        78,0,0,443,445,3,126,63,0,444,443,1,0,0,0,445,448,1,0,0,0,446,444,
        1,0,0,0,446,447,1,0,0,0,447,449,1,0,0,0,448,446,1,0,0,0,449,450,
        5,2,0,0,450,21,1,0,0,0,451,455,5,85,0,0,452,454,3,130,65,0,453,452,
        1,0,0,0,454,457,1,0,0,0,455,453,1,0,0,0,455,456,1,0,0,0,456,458,
        1,0,0,0,457,455,1,0,0,0,458,459,5,2,0,0,459,23,1,0,0,0,460,464,5,
        86,0,0,461,463,3,134,67,0,462,461,1,0,0,0,463,466,1,0,0,0,464,462,
        1,0,0,0,464,465,1,0,0,0,465,467,1,0,0,0,466,464,1,0,0,0,467,468,
        5,2,0,0,468,25,1,0,0,0,469,473,5,87,0,0,470,472,3,138,69,0,471,470,
        1,0,0,0,472,475,1,0,0,0,473,471,1,0,0,0,473,474,1,0,0,0,474,476,
        1,0,0,0,475,473,1,0,0,0,476,477,5,2,0,0,477,27,1,0,0,0,478,482,5,
        91,0,0,479,481,3,142,71,0,480,479,1,0,0,0,481,484,1,0,0,0,482,480,
        1,0,0,0,482,483,1,0,0,0,483,485,1,0,0,0,484,482,1,0,0,0,485,486,
        5,2,0,0,486,29,1,0,0,0,487,491,5,93,0,0,488,490,3,146,73,0,489,488,
        1,0,0,0,490,493,1,0,0,0,491,489,1,0,0,0,491,492,1,0,0,0,492,494,
        1,0,0,0,493,491,1,0,0,0,494,495,5,2,0,0,495,31,1,0,0,0,496,500,5,
        94,0,0,497,499,3,148,74,0,498,497,1,0,0,0,499,502,1,0,0,0,500,498,
        1,0,0,0,500,501,1,0,0,0,501,503,1,0,0,0,502,500,1,0,0,0,503,504,
        5,2,0,0,504,33,1,0,0,0,505,509,5,95,0,0,506,508,3,152,76,0,507,506,
        1,0,0,0,508,511,1,0,0,0,509,507,1,0,0,0,509,510,1,0,0,0,510,512,
        1,0,0,0,511,509,1,0,0,0,512,513,5,2,0,0,513,35,1,0,0,0,514,518,5,
        97,0,0,515,517,3,156,78,0,516,515,1,0,0,0,517,520,1,0,0,0,518,516,
        1,0,0,0,518,519,1,0,0,0,519,521,1,0,0,0,520,518,1,0,0,0,521,522,
        5,2,0,0,522,37,1,0,0,0,523,527,5,102,0,0,524,526,3,160,80,0,525,
        524,1,0,0,0,526,529,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,
        530,1,0,0,0,529,527,1,0,0,0,530,531,5,2,0,0,531,39,1,0,0,0,532,536,
        5,113,0,0,533,535,3,164,82,0,534,533,1,0,0,0,535,538,1,0,0,0,536,
        534,1,0,0,0,536,537,1,0,0,0,537,539,1,0,0,0,538,536,1,0,0,0,539,
        540,5,2,0,0,540,41,1,0,0,0,541,545,5,114,0,0,542,544,3,168,84,0,
        543,542,1,0,0,0,544,547,1,0,0,0,545,543,1,0,0,0,545,546,1,0,0,0,
        546,548,1,0,0,0,547,545,1,0,0,0,548,549,5,2,0,0,549,43,1,0,0,0,550,
        554,5,115,0,0,551,553,3,172,86,0,552,551,1,0,0,0,553,556,1,0,0,0,
        554,552,1,0,0,0,554,555,1,0,0,0,555,557,1,0,0,0,556,554,1,0,0,0,
        557,558,5,2,0,0,558,45,1,0,0,0,559,563,5,202,0,0,560,562,3,176,88,
        0,561,560,1,0,0,0,562,565,1,0,0,0,563,561,1,0,0,0,563,564,1,0,0,
        0,564,566,1,0,0,0,565,563,1,0,0,0,566,567,5,2,0,0,567,47,1,0,0,0,
        568,572,5,203,0,0,569,571,3,180,90,0,570,569,1,0,0,0,571,574,1,0,
        0,0,572,570,1,0,0,0,572,573,1,0,0,0,573,575,1,0,0,0,574,572,1,0,
        0,0,575,576,5,2,0,0,576,49,1,0,0,0,577,653,3,52,26,0,578,653,3,232,
        116,0,579,580,5,5,0,0,580,581,5,199,0,0,581,653,3,202,101,0,582,
        583,5,6,0,0,583,584,5,224,0,0,584,653,5,223,0,0,585,586,5,7,0,0,
        586,587,5,199,0,0,587,653,3,202,101,0,588,590,5,8,0,0,589,591,5,
        207,0,0,590,589,1,0,0,0,590,591,1,0,0,0,591,592,1,0,0,0,592,653,
        3,202,101,0,593,595,5,9,0,0,594,596,5,207,0,0,595,594,1,0,0,0,595,
        596,1,0,0,0,596,597,1,0,0,0,597,653,5,199,0,0,598,599,5,10,0,0,599,
        653,5,199,0,0,600,601,5,11,0,0,601,602,5,199,0,0,602,603,5,199,0,
        0,603,653,3,202,101,0,604,605,5,12,0,0,605,606,5,199,0,0,606,653,
        5,192,0,0,607,608,5,13,0,0,608,609,5,199,0,0,609,653,5,192,0,0,610,
        612,5,14,0,0,611,613,5,207,0,0,612,611,1,0,0,0,612,613,1,0,0,0,613,
        614,1,0,0,0,614,653,5,192,0,0,615,616,5,15,0,0,616,617,5,228,0,0,
        617,653,5,227,0,0,618,619,5,16,0,0,619,620,3,54,27,0,620,621,5,2,
        0,0,621,653,1,0,0,0,622,623,5,17,0,0,623,625,5,18,0,0,624,626,5,
        207,0,0,625,624,1,0,0,0,625,626,1,0,0,0,626,627,1,0,0,0,627,653,
        3,202,101,0,628,653,5,19,0,0,629,630,5,20,0,0,630,631,5,199,0,0,
        631,653,3,202,101,0,632,633,5,21,0,0,633,634,5,199,0,0,634,653,3,
        202,101,0,635,636,5,22,0,0,636,637,5,199,0,0,637,653,3,202,101,0,
        638,639,5,23,0,0,639,640,5,199,0,0,640,653,3,202,101,0,641,642,5,
        24,0,0,642,643,5,199,0,0,643,653,3,202,101,0,644,645,5,25,0,0,645,
        646,5,199,0,0,646,653,3,202,101,0,647,649,5,26,0,0,648,650,5,207,
        0,0,649,648,1,0,0,0,649,650,1,0,0,0,650,651,1,0,0,0,651,653,3,202,
        101,0,652,577,1,0,0,0,652,578,1,0,0,0,652,579,1,0,0,0,652,582,1,
        0,0,0,652,585,1,0,0,0,652,588,1,0,0,0,652,593,1,0,0,0,652,598,1,
        0,0,0,652,600,1,0,0,0,652,604,1,0,0,0,652,607,1,0,0,0,652,610,1,
        0,0,0,652,615,1,0,0,0,652,618,1,0,0,0,652,622,1,0,0,0,652,628,1,
        0,0,0,652,629,1,0,0,0,652,632,1,0,0,0,652,635,1,0,0,0,652,638,1,
        0,0,0,652,641,1,0,0,0,652,644,1,0,0,0,652,647,1,0,0,0,653,51,1,0,
        0,0,654,655,5,4,0,0,655,656,3,190,95,0,656,657,3,190,95,0,657,659,
        3,198,99,0,658,660,3,198,99,0,659,658,1,0,0,0,659,660,1,0,0,0,660,
        662,1,0,0,0,661,663,3,198,99,0,662,661,1,0,0,0,662,663,1,0,0,0,663,
        667,1,0,0,0,664,666,3,56,28,0,665,664,1,0,0,0,666,669,1,0,0,0,667,
        665,1,0,0,0,667,668,1,0,0,0,668,687,1,0,0,0,669,667,1,0,0,0,670,
        672,5,187,0,0,671,673,5,4,0,0,672,671,1,0,0,0,672,673,1,0,0,0,673,
        674,1,0,0,0,674,675,3,190,95,0,675,677,3,190,95,0,676,678,3,198,
        99,0,677,676,1,0,0,0,677,678,1,0,0,0,678,680,1,0,0,0,679,681,3,198,
        99,0,680,679,1,0,0,0,680,681,1,0,0,0,681,683,1,0,0,0,682,684,3,198,
        99,0,683,682,1,0,0,0,683,684,1,0,0,0,684,686,1,0,0,0,685,670,1,0,
        0,0,686,689,1,0,0,0,687,685,1,0,0,0,687,688,1,0,0,0,688,53,1,0,0,
        0,689,687,1,0,0,0,690,692,5,27,0,0,691,693,5,207,0,0,692,691,1,0,
        0,0,692,693,1,0,0,0,693,694,1,0,0,0,694,705,3,202,101,0,695,697,
        5,28,0,0,696,698,5,207,0,0,697,696,1,0,0,0,697,698,1,0,0,0,698,699,
        1,0,0,0,699,705,3,202,101,0,700,701,5,29,0,0,701,705,3,190,95,0,
        702,703,5,30,0,0,703,705,3,190,95,0,704,690,1,0,0,0,704,695,1,0,
        0,0,704,700,1,0,0,0,704,702,1,0,0,0,705,55,1,0,0,0,706,708,5,31,
        0,0,707,709,5,207,0,0,708,707,1,0,0,0,708,709,1,0,0,0,709,710,1,
        0,0,0,710,742,3,204,102,0,711,713,5,32,0,0,712,714,5,207,0,0,713,
        712,1,0,0,0,713,714,1,0,0,0,714,715,1,0,0,0,715,742,3,204,102,0,
        716,718,5,56,0,0,717,719,5,207,0,0,718,717,1,0,0,0,718,719,1,0,0,
        0,719,720,1,0,0,0,720,742,3,204,102,0,721,723,5,33,0,0,722,724,5,
        207,0,0,723,722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,725,742,
        3,204,102,0,726,728,5,34,0,0,727,729,5,207,0,0,728,727,1,0,0,0,728,
        729,1,0,0,0,729,730,1,0,0,0,730,742,3,204,102,0,731,733,5,35,0,0,
        732,734,5,207,0,0,733,732,1,0,0,0,733,734,1,0,0,0,734,735,1,0,0,
        0,735,742,3,204,102,0,736,738,5,48,0,0,737,739,5,207,0,0,738,737,
        1,0,0,0,738,739,1,0,0,0,739,740,1,0,0,0,740,742,3,204,102,0,741,
        706,1,0,0,0,741,711,1,0,0,0,741,716,1,0,0,0,741,721,1,0,0,0,741,
        726,1,0,0,0,741,731,1,0,0,0,741,736,1,0,0,0,742,57,1,0,0,0,743,759,
        3,208,104,0,744,759,3,60,30,0,745,759,3,234,117,0,746,748,5,38,0,
        0,747,749,5,207,0,0,748,747,1,0,0,0,748,749,1,0,0,0,749,750,1,0,
        0,0,750,759,5,192,0,0,751,759,5,19,0,0,752,754,5,21,0,0,753,755,
        5,207,0,0,754,753,1,0,0,0,754,755,1,0,0,0,755,756,1,0,0,0,756,759,
        3,202,101,0,757,759,5,39,0,0,758,743,1,0,0,0,758,744,1,0,0,0,758,
        745,1,0,0,0,758,746,1,0,0,0,758,751,1,0,0,0,758,752,1,0,0,0,758,
        757,1,0,0,0,759,59,1,0,0,0,760,761,5,4,0,0,761,762,3,190,95,0,762,
        763,3,190,95,0,763,764,3,190,95,0,764,765,3,190,95,0,765,766,3,198,
        99,0,766,767,3,198,99,0,767,768,3,198,99,0,768,769,5,192,0,0,769,
        61,1,0,0,0,770,799,3,64,32,0,771,799,3,236,118,0,772,774,5,9,0,0,
        773,775,5,207,0,0,774,773,1,0,0,0,774,775,1,0,0,0,775,776,1,0,0,
        0,776,799,5,199,0,0,777,778,5,41,0,0,778,779,3,202,101,0,779,780,
        3,202,101,0,780,781,3,202,101,0,781,799,1,0,0,0,782,784,5,42,0,0,
        783,785,5,207,0,0,784,783,1,0,0,0,784,785,1,0,0,0,785,786,1,0,0,
        0,786,799,3,202,101,0,787,789,5,14,0,0,788,790,5,207,0,0,789,788,
        1,0,0,0,789,790,1,0,0,0,790,791,1,0,0,0,791,799,5,192,0,0,792,793,
        5,15,0,0,793,799,5,227,0,0,794,795,5,17,0,0,795,796,5,18,0,0,796,
        799,3,202,101,0,797,799,5,19,0,0,798,770,1,0,0,0,798,771,1,0,0,0,
        798,772,1,0,0,0,798,777,1,0,0,0,798,782,1,0,0,0,798,787,1,0,0,0,
        798,792,1,0,0,0,798,794,1,0,0,0,798,797,1,0,0,0,799,63,1,0,0,0,800,
        801,5,4,0,0,801,802,3,190,95,0,802,803,3,190,95,0,803,804,3,190,
        95,0,804,805,3,190,95,0,805,806,3,190,95,0,806,807,3,190,95,0,807,
        809,3,198,99,0,808,810,3,198,99,0,809,808,1,0,0,0,809,810,1,0,0,
        0,810,812,1,0,0,0,811,813,3,198,99,0,812,811,1,0,0,0,812,813,1,0,
        0,0,813,65,1,0,0,0,814,853,3,68,34,0,815,817,5,9,0,0,816,818,5,207,
        0,0,817,816,1,0,0,0,817,818,1,0,0,0,818,819,1,0,0,0,819,853,5,199,
        0,0,820,821,5,45,0,0,821,853,5,230,0,0,822,824,5,21,0,0,823,825,
        5,207,0,0,824,823,1,0,0,0,824,825,1,0,0,0,825,826,1,0,0,0,826,853,
        3,202,101,0,827,828,5,46,0,0,828,853,5,193,0,0,829,830,5,6,0,0,830,
        853,5,223,0,0,831,832,5,41,0,0,832,833,3,202,101,0,833,834,3,202,
        101,0,834,835,3,202,101,0,835,853,1,0,0,0,836,838,5,42,0,0,837,839,
        5,207,0,0,838,837,1,0,0,0,838,839,1,0,0,0,839,840,1,0,0,0,840,853,
        3,202,101,0,841,843,5,14,0,0,842,844,5,207,0,0,843,842,1,0,0,0,843,
        844,1,0,0,0,844,845,1,0,0,0,845,853,5,192,0,0,846,847,5,15,0,0,847,
        853,5,227,0,0,848,849,5,17,0,0,849,850,5,18,0,0,850,853,3,202,101,
        0,851,853,5,19,0,0,852,814,1,0,0,0,852,815,1,0,0,0,852,820,1,0,0,
        0,852,822,1,0,0,0,852,827,1,0,0,0,852,829,1,0,0,0,852,831,1,0,0,
        0,852,836,1,0,0,0,852,841,1,0,0,0,852,846,1,0,0,0,852,848,1,0,0,
        0,852,851,1,0,0,0,853,67,1,0,0,0,854,855,5,4,0,0,855,856,3,190,95,
        0,856,857,3,190,95,0,857,858,3,190,95,0,858,859,3,190,95,0,859,860,
        3,190,95,0,860,861,3,190,95,0,861,862,3,198,99,0,862,869,3,198,99,
        0,863,870,3,198,99,0,864,865,3,198,99,0,865,866,3,198,99,0,866,867,
        3,198,99,0,867,868,3,198,99,0,868,870,1,0,0,0,869,863,1,0,0,0,869,
        864,1,0,0,0,869,870,1,0,0,0,870,69,1,0,0,0,871,904,3,72,36,0,872,
        874,5,48,0,0,873,875,5,207,0,0,874,873,1,0,0,0,874,875,1,0,0,0,875,
        876,1,0,0,0,876,904,5,192,0,0,877,879,5,9,0,0,878,880,5,207,0,0,
        879,878,1,0,0,0,879,880,1,0,0,0,880,881,1,0,0,0,881,904,5,199,0,
        0,882,884,5,42,0,0,883,885,5,207,0,0,884,883,1,0,0,0,884,885,1,0,
        0,0,885,886,1,0,0,0,886,887,3,202,101,0,887,888,3,202,101,0,888,
        904,1,0,0,0,889,891,5,14,0,0,890,892,5,207,0,0,891,890,1,0,0,0,891,
        892,1,0,0,0,892,893,1,0,0,0,893,904,5,192,0,0,894,896,5,49,0,0,895,
        897,5,207,0,0,896,895,1,0,0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,
        904,5,192,0,0,899,900,5,17,0,0,900,901,5,18,0,0,901,904,3,202,101,
        0,902,904,5,19,0,0,903,871,1,0,0,0,903,872,1,0,0,0,903,877,1,0,0,
        0,903,882,1,0,0,0,903,889,1,0,0,0,903,894,1,0,0,0,903,899,1,0,0,
        0,903,902,1,0,0,0,904,71,1,0,0,0,905,906,5,4,0,0,906,907,3,190,95,
        0,907,908,3,190,95,0,908,909,3,190,95,0,909,910,3,190,95,0,910,911,
        3,198,99,0,911,915,3,198,99,0,912,913,3,198,99,0,913,914,3,198,99,
        0,914,916,1,0,0,0,915,912,1,0,0,0,915,916,1,0,0,0,916,73,1,0,0,0,
        917,937,3,76,38,0,918,920,5,9,0,0,919,921,5,207,0,0,920,919,1,0,
        0,0,920,921,1,0,0,0,921,922,1,0,0,0,922,937,5,199,0,0,923,924,5,
        41,0,0,924,937,3,202,101,0,925,927,5,14,0,0,926,928,5,207,0,0,927,
        926,1,0,0,0,927,928,1,0,0,0,928,929,1,0,0,0,929,937,5,192,0,0,930,
        931,5,15,0,0,931,937,5,227,0,0,932,933,5,17,0,0,933,934,5,18,0,0,
        934,937,3,202,101,0,935,937,5,19,0,0,936,917,1,0,0,0,936,918,1,0,
        0,0,936,923,1,0,0,0,936,925,1,0,0,0,936,930,1,0,0,0,936,932,1,0,
        0,0,936,935,1,0,0,0,937,75,1,0,0,0,938,939,5,4,0,0,939,940,3,190,
        95,0,940,941,3,190,95,0,941,943,3,198,99,0,942,944,3,198,99,0,943,
        942,1,0,0,0,943,944,1,0,0,0,944,77,1,0,0,0,945,976,3,80,40,0,946,
        948,5,9,0,0,947,949,5,207,0,0,948,947,1,0,0,0,948,949,1,0,0,0,949,
        950,1,0,0,0,950,976,5,199,0,0,951,952,5,41,0,0,952,953,3,202,101,
        0,953,954,3,202,101,0,954,955,3,202,101,0,955,956,3,202,101,0,956,
        976,1,0,0,0,957,959,5,42,0,0,958,960,5,207,0,0,959,958,1,0,0,0,959,
        960,1,0,0,0,960,961,1,0,0,0,961,976,3,202,101,0,962,964,5,14,0,0,
        963,965,5,207,0,0,964,963,1,0,0,0,964,965,1,0,0,0,965,966,1,0,0,
        0,966,976,5,192,0,0,967,968,5,15,0,0,968,976,5,227,0,0,969,970,5,
        17,0,0,970,971,5,18,0,0,971,976,3,202,101,0,972,976,5,19,0,0,973,
        974,5,45,0,0,974,976,5,231,0,0,975,945,1,0,0,0,975,946,1,0,0,0,975,
        951,1,0,0,0,975,957,1,0,0,0,975,962,1,0,0,0,975,967,1,0,0,0,975,
        969,1,0,0,0,975,972,1,0,0,0,975,973,1,0,0,0,976,79,1,0,0,0,977,978,
        5,4,0,0,978,979,3,190,95,0,979,980,3,190,95,0,980,981,3,190,95,0,
        981,982,3,190,95,0,982,984,3,198,99,0,983,985,3,198,99,0,984,983,
        1,0,0,0,984,985,1,0,0,0,985,81,1,0,0,0,986,992,3,208,104,0,987,992,
        3,84,42,0,988,992,3,254,127,0,989,992,5,54,0,0,990,992,5,39,0,0,
        991,986,1,0,0,0,991,987,1,0,0,0,991,988,1,0,0,0,991,989,1,0,0,0,
        991,990,1,0,0,0,992,83,1,0,0,0,993,997,5,53,0,0,994,996,3,86,43,
        0,995,994,1,0,0,0,996,999,1,0,0,0,997,995,1,0,0,0,997,998,1,0,0,
        0,998,1000,1,0,0,0,999,997,1,0,0,0,1000,1001,5,2,0,0,1001,85,1,0,
        0,0,1002,1004,5,55,0,0,1003,1005,5,207,0,0,1004,1003,1,0,0,0,1004,
        1005,1,0,0,0,1005,1006,1,0,0,0,1006,1013,3,190,95,0,1007,1009,5,
        56,0,0,1008,1010,5,207,0,0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,
        1011,1,0,0,0,1011,1013,3,202,101,0,1012,1002,1,0,0,0,1012,1007,1,
        0,0,0,1013,87,1,0,0,0,1014,1055,3,208,104,0,1015,1017,5,58,0,0,1016,
        1018,5,207,0,0,1017,1016,1,0,0,0,1017,1018,1,0,0,0,1018,1019,1,0,
        0,0,1019,1055,5,192,0,0,1020,1022,5,59,0,0,1021,1023,5,207,0,0,1022,
        1021,1,0,0,0,1022,1023,1,0,0,0,1023,1024,1,0,0,0,1024,1050,5,204,
        0,0,1025,1027,3,202,101,0,1026,1028,5,190,0,0,1027,1026,1,0,0,0,
        1027,1028,1,0,0,0,1028,1029,1,0,0,0,1029,1031,3,202,101,0,1030,1032,
        5,190,0,0,1031,1030,1,0,0,0,1031,1032,1,0,0,0,1032,1033,1,0,0,0,
        1033,1034,3,202,101,0,1034,1051,1,0,0,0,1035,1037,5,185,0,0,1036,
        1038,5,207,0,0,1037,1036,1,0,0,0,1037,1038,1,0,0,0,1038,1039,1,0,
        0,0,1039,1041,3,190,95,0,1040,1042,5,190,0,0,1041,1040,1,0,0,0,1041,
        1042,1,0,0,0,1042,1048,1,0,0,0,1043,1045,5,186,0,0,1044,1046,5,207,
        0,0,1045,1044,1,0,0,0,1045,1046,1,0,0,0,1046,1047,1,0,0,0,1047,1049,
        3,190,95,0,1048,1043,1,0,0,0,1048,1049,1,0,0,0,1049,1051,1,0,0,0,
        1050,1025,1,0,0,0,1050,1035,1,0,0,0,1051,1052,1,0,0,0,1052,1053,
        5,205,0,0,1053,1055,1,0,0,0,1054,1014,1,0,0,0,1054,1015,1,0,0,0,
        1054,1020,1,0,0,0,1055,89,1,0,0,0,1056,1057,5,4,0,0,1057,1058,3,
        190,95,0,1058,1059,3,198,99,0,1059,1060,3,198,99,0,1060,1061,3,198,
        99,0,1061,91,1,0,0,0,1062,1100,3,94,47,0,1063,1100,3,238,119,0,1064,
        1066,5,9,0,0,1065,1067,5,207,0,0,1066,1065,1,0,0,0,1066,1067,1,0,
        0,0,1067,1068,1,0,0,0,1068,1100,5,199,0,0,1069,1070,5,61,0,0,1070,
        1071,5,192,0,0,1071,1100,3,202,101,0,1072,1074,5,42,0,0,1073,1075,
        5,207,0,0,1074,1073,1,0,0,0,1074,1075,1,0,0,0,1075,1076,1,0,0,0,
        1076,1100,3,202,101,0,1077,1079,5,14,0,0,1078,1080,5,207,0,0,1079,
        1078,1,0,0,0,1079,1080,1,0,0,0,1080,1081,1,0,0,0,1081,1100,5,192,
        0,0,1082,1083,5,17,0,0,1083,1084,5,18,0,0,1084,1091,3,202,101,0,
        1085,1092,5,136,0,0,1086,1088,5,9,0,0,1087,1089,5,207,0,0,1088,1087,
        1,0,0,0,1088,1089,1,0,0,0,1089,1090,1,0,0,0,1090,1092,5,199,0,0,
        1091,1085,1,0,0,0,1091,1086,1,0,0,0,1092,1100,1,0,0,0,1093,1100,
        5,19,0,0,1094,1095,5,62,0,0,1095,1096,3,202,101,0,1096,1097,5,192,
        0,0,1097,1100,1,0,0,0,1098,1100,5,63,0,0,1099,1062,1,0,0,0,1099,
        1063,1,0,0,0,1099,1064,1,0,0,0,1099,1069,1,0,0,0,1099,1072,1,0,0,
        0,1099,1077,1,0,0,0,1099,1082,1,0,0,0,1099,1093,1,0,0,0,1099,1094,
        1,0,0,0,1099,1098,1,0,0,0,1100,93,1,0,0,0,1101,1102,5,4,0,0,1102,
        1103,3,190,95,0,1103,1104,3,190,95,0,1104,95,1,0,0,0,1105,1155,3,
        98,49,0,1106,1155,3,240,120,0,1107,1109,5,9,0,0,1108,1110,5,207,
        0,0,1109,1108,1,0,0,0,1109,1110,1,0,0,0,1110,1111,1,0,0,0,1111,1155,
        5,199,0,0,1112,1113,5,41,0,0,1113,1114,3,202,101,0,1114,1115,3,202,
        101,0,1115,1116,3,202,101,0,1116,1117,3,202,101,0,1117,1155,1,0,
        0,0,1118,1120,5,48,0,0,1119,1121,5,207,0,0,1120,1119,1,0,0,0,1120,
        1121,1,0,0,0,1121,1122,1,0,0,0,1122,1155,5,192,0,0,1123,1124,5,65,
        0,0,1124,1155,5,192,0,0,1125,1126,5,42,0,0,1126,1128,3,202,101,0,
        1127,1129,3,202,101,0,1128,1127,1,0,0,0,1128,1129,1,0,0,0,1129,1155,
        1,0,0,0,1130,1132,5,14,0,0,1131,1133,5,207,0,0,1132,1131,1,0,0,0,
        1132,1133,1,0,0,0,1133,1134,1,0,0,0,1134,1155,5,192,0,0,1135,1137,
        5,49,0,0,1136,1138,5,207,0,0,1137,1136,1,0,0,0,1137,1138,1,0,0,0,
        1138,1139,1,0,0,0,1139,1155,5,192,0,0,1140,1141,5,15,0,0,1141,1155,
        5,227,0,0,1142,1143,5,17,0,0,1143,1144,5,18,0,0,1144,1151,3,202,
        101,0,1145,1152,5,136,0,0,1146,1148,5,9,0,0,1147,1149,5,207,0,0,
        1148,1147,1,0,0,0,1148,1149,1,0,0,0,1149,1150,1,0,0,0,1150,1152,
        5,199,0,0,1151,1145,1,0,0,0,1151,1146,1,0,0,0,1152,1155,1,0,0,0,
        1153,1155,5,19,0,0,1154,1105,1,0,0,0,1154,1106,1,0,0,0,1154,1107,
        1,0,0,0,1154,1112,1,0,0,0,1154,1118,1,0,0,0,1154,1123,1,0,0,0,1154,
        1125,1,0,0,0,1154,1130,1,0,0,0,1154,1135,1,0,0,0,1154,1140,1,0,0,
        0,1154,1142,1,0,0,0,1154,1153,1,0,0,0,1155,97,1,0,0,0,1156,1157,
        5,4,0,0,1157,1158,3,190,95,0,1158,1159,3,190,95,0,1159,1160,3,190,
        95,0,1160,1166,3,190,95,0,1161,1162,3,190,95,0,1162,1163,3,190,95,
        0,1163,1164,3,190,95,0,1164,1165,3,190,95,0,1165,1167,1,0,0,0,1166,
        1161,1,0,0,0,1166,1167,1,0,0,0,1167,1168,1,0,0,0,1168,1169,3,198,
        99,0,1169,1173,3,198,99,0,1170,1171,3,198,99,0,1171,1172,3,198,99,
        0,1172,1174,1,0,0,0,1173,1170,1,0,0,0,1173,1174,1,0,0,0,1174,99,
        1,0,0,0,1175,1211,3,102,51,0,1176,1178,5,9,0,0,1177,1179,5,207,0,
        0,1178,1177,1,0,0,0,1178,1179,1,0,0,0,1179,1180,1,0,0,0,1180,1211,
        5,199,0,0,1181,1182,5,61,0,0,1182,1183,5,192,0,0,1183,1184,5,192,
        0,0,1184,1185,3,202,101,0,1185,1186,3,202,101,0,1186,1187,3,202,
        101,0,1187,1211,1,0,0,0,1188,1190,5,42,0,0,1189,1191,5,207,0,0,1190,
        1189,1,0,0,0,1190,1191,1,0,0,0,1191,1192,1,0,0,0,1192,1211,3,202,
        101,0,1193,1195,5,14,0,0,1194,1196,5,207,0,0,1195,1194,1,0,0,0,1195,
        1196,1,0,0,0,1196,1197,1,0,0,0,1197,1211,5,192,0,0,1198,1199,5,67,
        0,0,1199,1211,3,202,101,0,1200,1201,5,68,0,0,1201,1211,3,202,101,
        0,1202,1203,5,15,0,0,1203,1211,5,227,0,0,1204,1205,5,17,0,0,1205,
        1206,5,18,0,0,1206,1211,3,202,101,0,1207,1211,3,104,52,0,1208,1211,
        5,19,0,0,1209,1211,5,63,0,0,1210,1175,1,0,0,0,1210,1176,1,0,0,0,
        1210,1181,1,0,0,0,1210,1188,1,0,0,0,1210,1193,1,0,0,0,1210,1198,
        1,0,0,0,1210,1200,1,0,0,0,1210,1202,1,0,0,0,1210,1204,1,0,0,0,1210,
        1207,1,0,0,0,1210,1208,1,0,0,0,1210,1209,1,0,0,0,1211,101,1,0,0,
        0,1212,1213,5,4,0,0,1213,1214,3,190,95,0,1214,1215,3,190,95,0,1215,
        1216,3,190,95,0,1216,1217,3,190,95,0,1217,1218,3,190,95,0,1218,1219,
        3,198,99,0,1219,1220,3,198,99,0,1220,103,1,0,0,0,1221,1222,5,69,
        0,0,1222,1223,3,190,95,0,1223,1224,3,198,99,0,1224,1225,3,198,99,
        0,1225,105,1,0,0,0,1226,1266,3,108,54,0,1227,1266,3,110,55,0,1228,
        1266,3,112,56,0,1229,1266,3,114,57,0,1230,1266,3,116,58,0,1231,1266,
        3,118,59,0,1232,1266,3,120,60,0,1233,1266,3,122,61,0,1234,1266,3,
        124,62,0,1235,1237,5,9,0,0,1236,1238,5,207,0,0,1237,1236,1,0,0,0,
        1237,1238,1,0,0,0,1238,1239,1,0,0,0,1239,1266,5,199,0,0,1240,1241,
        5,77,0,0,1241,1266,3,202,101,0,1242,1243,5,65,0,0,1243,1266,5,192,
        0,0,1244,1245,5,42,0,0,1245,1247,3,202,101,0,1246,1248,3,202,101,
        0,1247,1246,1,0,0,0,1247,1248,1,0,0,0,1248,1266,1,0,0,0,1249,1250,
        5,15,0,0,1250,1266,5,227,0,0,1251,1252,5,17,0,0,1252,1253,5,18,0,
        0,1253,1260,3,202,101,0,1254,1261,5,136,0,0,1255,1257,5,9,0,0,1256,
        1258,5,207,0,0,1257,1256,1,0,0,0,1257,1258,1,0,0,0,1258,1259,1,0,
        0,0,1259,1261,5,199,0,0,1260,1254,1,0,0,0,1260,1255,1,0,0,0,1261,
        1262,1,0,0,0,1262,1263,5,199,0,0,1263,1266,1,0,0,0,1264,1266,5,19,
        0,0,1265,1226,1,0,0,0,1265,1227,1,0,0,0,1265,1228,1,0,0,0,1265,1229,
        1,0,0,0,1265,1230,1,0,0,0,1265,1231,1,0,0,0,1265,1232,1,0,0,0,1265,
        1233,1,0,0,0,1265,1234,1,0,0,0,1265,1235,1,0,0,0,1265,1240,1,0,0,
        0,1265,1242,1,0,0,0,1265,1244,1,0,0,0,1265,1249,1,0,0,0,1265,1251,
        1,0,0,0,1265,1264,1,0,0,0,1266,107,1,0,0,0,1267,1268,5,71,0,0,1268,
        1270,3,190,95,0,1269,1271,3,190,95,0,1270,1269,1,0,0,0,1270,1271,
        1,0,0,0,1271,1272,1,0,0,0,1272,1274,3,198,99,0,1273,1275,3,198,99,
        0,1274,1273,1,0,0,0,1274,1275,1,0,0,0,1275,109,1,0,0,0,1276,1277,
        5,69,0,0,1277,1278,3,190,95,0,1278,1279,3,198,99,0,1279,111,1,0,
        0,0,1280,1281,5,51,0,0,1281,1282,3,190,95,0,1282,1283,3,190,95,0,
        1283,1284,3,190,95,0,1284,1286,5,199,0,0,1285,1287,5,193,0,0,1286,
        1285,1,0,0,0,1286,1287,1,0,0,0,1287,1288,1,0,0,0,1288,1289,5,199,
        0,0,1289,113,1,0,0,0,1290,1291,5,72,0,0,1291,1292,3,190,95,0,1292,
        115,1,0,0,0,1293,1294,5,66,0,0,1294,1295,3,190,95,0,1295,117,1,0,
        0,0,1296,1297,5,73,0,0,1297,1298,3,190,95,0,1298,119,1,0,0,0,1299,
        1300,5,74,0,0,1300,1301,3,190,95,0,1301,121,1,0,0,0,1302,1303,5,
        75,0,0,1303,1304,5,199,0,0,1304,1305,3,190,95,0,1305,1306,3,190,
        95,0,1306,1307,3,190,95,0,1307,1308,3,190,95,0,1308,1310,3,190,95,
        0,1309,1311,3,190,95,0,1310,1309,1,0,0,0,1310,1311,1,0,0,0,1311,
        123,1,0,0,0,1312,1313,5,76,0,0,1313,1314,3,190,95,0,1314,125,1,0,
        0,0,1315,1433,3,128,64,0,1316,1318,5,9,0,0,1317,1319,5,207,0,0,1318,
        1317,1,0,0,0,1318,1319,1,0,0,0,1319,1320,1,0,0,0,1320,1433,5,199,
        0,0,1321,1322,5,27,0,0,1322,1433,3,202,101,0,1323,1325,5,42,0,0,
        1324,1326,5,207,0,0,1325,1324,1,0,0,0,1325,1326,1,0,0,0,1326,1327,
        1,0,0,0,1327,1433,3,202,101,0,1328,1329,5,79,0,0,1329,1330,3,202,
        101,0,1330,1331,3,202,101,0,1331,1336,3,202,101,0,1332,1333,3,202,
        101,0,1333,1334,3,202,101,0,1334,1335,3,202,101,0,1335,1337,1,0,
        0,0,1336,1332,1,0,0,0,1336,1337,1,0,0,0,1337,1342,1,0,0,0,1338,1339,
        3,202,101,0,1339,1340,3,202,101,0,1340,1341,3,202,101,0,1341,1343,
        1,0,0,0,1342,1338,1,0,0,0,1342,1343,1,0,0,0,1343,1348,1,0,0,0,1344,
        1345,3,202,101,0,1345,1346,3,202,101,0,1346,1347,3,202,101,0,1347,
        1349,1,0,0,0,1348,1344,1,0,0,0,1348,1349,1,0,0,0,1349,1433,1,0,0,
        0,1350,1352,5,14,0,0,1351,1353,5,207,0,0,1352,1351,1,0,0,0,1352,
        1353,1,0,0,0,1353,1354,1,0,0,0,1354,1433,5,192,0,0,1355,1356,5,80,
        0,0,1356,1357,3,202,101,0,1357,1358,3,202,101,0,1358,1363,3,202,
        101,0,1359,1360,3,202,101,0,1360,1361,3,202,101,0,1361,1362,3,202,
        101,0,1362,1364,1,0,0,0,1363,1359,1,0,0,0,1363,1364,1,0,0,0,1364,
        1369,1,0,0,0,1365,1366,3,202,101,0,1366,1367,3,202,101,0,1367,1368,
        3,202,101,0,1368,1370,1,0,0,0,1369,1365,1,0,0,0,1369,1370,1,0,0,
        0,1370,1375,1,0,0,0,1371,1372,3,202,101,0,1372,1373,3,202,101,0,
        1373,1374,3,202,101,0,1374,1376,1,0,0,0,1375,1371,1,0,0,0,1375,1376,
        1,0,0,0,1376,1433,1,0,0,0,1377,1378,5,17,0,0,1378,1379,5,18,0,0,
        1379,1386,3,202,101,0,1380,1387,5,136,0,0,1381,1383,5,9,0,0,1382,
        1384,5,207,0,0,1383,1382,1,0,0,0,1383,1384,1,0,0,0,1384,1385,1,0,
        0,0,1385,1387,5,199,0,0,1386,1380,1,0,0,0,1386,1381,1,0,0,0,1387,
        1433,1,0,0,0,1388,1389,5,81,0,0,1389,1390,3,202,101,0,1390,1391,
        3,202,101,0,1391,1396,3,202,101,0,1392,1393,3,202,101,0,1393,1394,
        3,202,101,0,1394,1395,3,202,101,0,1395,1397,1,0,0,0,1396,1392,1,
        0,0,0,1396,1397,1,0,0,0,1397,1402,1,0,0,0,1398,1399,3,202,101,0,
        1399,1400,3,202,101,0,1400,1401,3,202,101,0,1401,1403,1,0,0,0,1402,
        1398,1,0,0,0,1402,1403,1,0,0,0,1403,1408,1,0,0,0,1404,1405,3,202,
        101,0,1405,1406,3,202,101,0,1406,1407,3,202,101,0,1407,1409,1,0,
        0,0,1408,1404,1,0,0,0,1408,1409,1,0,0,0,1409,1433,1,0,0,0,1410,1433,
        5,19,0,0,1411,1413,5,21,0,0,1412,1414,5,207,0,0,1413,1412,1,0,0,
        0,1413,1414,1,0,0,0,1414,1415,1,0,0,0,1415,1433,3,202,101,0,1416,
        1417,5,82,0,0,1417,1433,5,234,0,0,1418,1419,5,62,0,0,1419,1420,5,
        84,0,0,1420,1422,3,202,101,0,1421,1423,3,202,101,0,1422,1421,1,0,
        0,0,1422,1423,1,0,0,0,1423,1425,1,0,0,0,1424,1426,3,202,101,0,1425,
        1424,1,0,0,0,1425,1426,1,0,0,0,1426,1428,1,0,0,0,1427,1429,3,202,
        101,0,1428,1427,1,0,0,0,1428,1429,1,0,0,0,1429,1433,1,0,0,0,1430,
        1433,5,83,0,0,1431,1433,5,63,0,0,1432,1315,1,0,0,0,1432,1316,1,0,
        0,0,1432,1321,1,0,0,0,1432,1323,1,0,0,0,1432,1328,1,0,0,0,1432,1350,
        1,0,0,0,1432,1355,1,0,0,0,1432,1377,1,0,0,0,1432,1388,1,0,0,0,1432,
        1410,1,0,0,0,1432,1411,1,0,0,0,1432,1416,1,0,0,0,1432,1418,1,0,0,
        0,1432,1430,1,0,0,0,1432,1431,1,0,0,0,1433,127,1,0,0,0,1434,1435,
        5,4,0,0,1435,1436,3,190,95,0,1436,1437,3,190,95,0,1437,1438,3,190,
        95,0,1438,1444,3,190,95,0,1439,1440,3,190,95,0,1440,1441,3,190,95,
        0,1441,1442,3,190,95,0,1442,1443,3,190,95,0,1443,1445,1,0,0,0,1444,
        1439,1,0,0,0,1444,1445,1,0,0,0,1445,1451,1,0,0,0,1446,1447,3,190,
        95,0,1447,1448,3,190,95,0,1448,1449,3,190,95,0,1449,1450,3,190,95,
        0,1450,1452,1,0,0,0,1451,1446,1,0,0,0,1451,1452,1,0,0,0,1452,1458,
        1,0,0,0,1453,1454,3,190,95,0,1454,1455,3,190,95,0,1455,1456,3,190,
        95,0,1456,1457,3,190,95,0,1457,1459,1,0,0,0,1458,1453,1,0,0,0,1458,
        1459,1,0,0,0,1459,129,1,0,0,0,1460,1470,3,132,66,0,1461,1470,3,242,
        121,0,1462,1464,5,21,0,0,1463,1465,5,207,0,0,1464,1463,1,0,0,0,1464,
        1465,1,0,0,0,1465,1466,1,0,0,0,1466,1470,3,202,101,0,1467,1470,5,
        17,0,0,1468,1470,5,19,0,0,1469,1460,1,0,0,0,1469,1461,1,0,0,0,1469,
        1462,1,0,0,0,1469,1467,1,0,0,0,1469,1468,1,0,0,0,1470,131,1,0,0,
        0,1471,1472,5,4,0,0,1472,1473,3,190,95,0,1473,1474,3,198,99,0,1474,
        1475,3,198,99,0,1475,133,1,0,0,0,1476,1508,3,136,68,0,1477,1479,
        5,9,0,0,1478,1480,5,207,0,0,1479,1478,1,0,0,0,1479,1480,1,0,0,0,
        1480,1481,1,0,0,0,1481,1508,5,199,0,0,1482,1483,5,41,0,0,1483,1484,
        3,202,101,0,1484,1485,3,202,101,0,1485,1486,3,202,101,0,1486,1487,
        3,202,101,0,1487,1488,3,202,101,0,1488,1508,1,0,0,0,1489,1491,5,
        42,0,0,1490,1492,5,207,0,0,1491,1490,1,0,0,0,1491,1492,1,0,0,0,1492,
        1493,1,0,0,0,1493,1508,3,202,101,0,1494,1496,5,14,0,0,1495,1497,
        5,207,0,0,1496,1495,1,0,0,0,1496,1497,1,0,0,0,1497,1498,1,0,0,0,
        1498,1508,5,192,0,0,1499,1500,5,15,0,0,1500,1508,5,227,0,0,1501,
        1502,5,17,0,0,1502,1503,5,18,0,0,1503,1508,3,202,101,0,1504,1508,
        5,19,0,0,1505,1506,5,45,0,0,1506,1508,5,231,0,0,1507,1476,1,0,0,
        0,1507,1477,1,0,0,0,1507,1482,1,0,0,0,1507,1489,1,0,0,0,1507,1494,
        1,0,0,0,1507,1499,1,0,0,0,1507,1501,1,0,0,0,1507,1504,1,0,0,0,1507,
        1505,1,0,0,0,1508,135,1,0,0,0,1509,1510,5,4,0,0,1510,1511,3,190,
        95,0,1511,1512,3,190,95,0,1512,1513,3,190,95,0,1513,1514,3,190,95,
        0,1514,1515,3,190,95,0,1515,1516,3,190,95,0,1516,1518,3,198,99,0,
        1517,1519,3,198,99,0,1518,1517,1,0,0,0,1518,1519,1,0,0,0,1519,137,
        1,0,0,0,1520,1590,3,140,70,0,1521,1523,5,9,0,0,1522,1524,5,207,0,
        0,1523,1522,1,0,0,0,1523,1524,1,0,0,0,1524,1525,1,0,0,0,1525,1590,
        5,199,0,0,1526,1527,5,27,0,0,1527,1590,3,202,101,0,1528,1529,5,88,
        0,0,1529,1590,3,202,101,0,1530,1532,5,42,0,0,1531,1533,5,207,0,0,
        1532,1531,1,0,0,0,1532,1533,1,0,0,0,1533,1534,1,0,0,0,1534,1590,
        3,202,101,0,1535,1536,5,79,0,0,1536,1537,3,202,101,0,1537,1538,3,
        202,101,0,1538,1539,3,202,101,0,1539,1540,3,202,101,0,1540,1541,
        3,202,101,0,1541,1542,3,202,101,0,1542,1543,3,202,101,0,1543,1590,
        1,0,0,0,1544,1545,5,89,0,0,1545,1590,5,192,0,0,1546,1547,5,90,0,
        0,1547,1548,3,202,101,0,1548,1549,3,202,101,0,1549,1550,3,202,101,
        0,1550,1551,3,202,101,0,1551,1552,3,202,101,0,1552,1553,3,202,101,
        0,1553,1554,3,202,101,0,1554,1555,3,202,101,0,1555,1590,1,0,0,0,
        1556,1558,5,14,0,0,1557,1559,5,207,0,0,1558,1557,1,0,0,0,1558,1559,
        1,0,0,0,1559,1560,1,0,0,0,1560,1590,5,192,0,0,1561,1562,5,17,0,0,
        1562,1563,5,18,0,0,1563,1570,3,202,101,0,1564,1571,5,136,0,0,1565,
        1567,5,9,0,0,1566,1568,5,207,0,0,1567,1566,1,0,0,0,1567,1568,1,0,
        0,0,1568,1569,1,0,0,0,1569,1571,5,199,0,0,1570,1564,1,0,0,0,1570,
        1565,1,0,0,0,1571,1590,1,0,0,0,1572,1573,5,81,0,0,1573,1574,3,202,
        101,0,1574,1575,3,202,101,0,1575,1576,3,202,101,0,1576,1577,3,202,
        101,0,1577,1578,3,202,101,0,1578,1579,3,202,101,0,1579,1580,3,202,
        101,0,1580,1590,1,0,0,0,1581,1590,5,19,0,0,1582,1583,5,152,0,0,1583,
        1590,5,192,0,0,1584,1585,5,62,0,0,1585,1586,3,202,101,0,1586,1587,
        3,202,101,0,1587,1590,1,0,0,0,1588,1590,5,63,0,0,1589,1520,1,0,0,
        0,1589,1521,1,0,0,0,1589,1526,1,0,0,0,1589,1528,1,0,0,0,1589,1530,
        1,0,0,0,1589,1535,1,0,0,0,1589,1544,1,0,0,0,1589,1546,1,0,0,0,1589,
        1556,1,0,0,0,1589,1561,1,0,0,0,1589,1572,1,0,0,0,1589,1581,1,0,0,
        0,1589,1582,1,0,0,0,1589,1584,1,0,0,0,1589,1588,1,0,0,0,1590,139,
        1,0,0,0,1591,1592,5,4,0,0,1592,1593,3,190,95,0,1593,1594,3,190,95,
        0,1594,1595,3,190,95,0,1595,1596,3,190,95,0,1596,141,1,0,0,0,1597,
        1638,3,144,72,0,1598,1638,3,244,122,0,1599,1601,5,9,0,0,1600,1602,
        5,207,0,0,1601,1600,1,0,0,0,1601,1602,1,0,0,0,1602,1603,1,0,0,0,
        1603,1638,5,199,0,0,1604,1606,5,21,0,0,1605,1607,5,207,0,0,1606,
        1605,1,0,0,0,1606,1607,1,0,0,0,1607,1608,1,0,0,0,1608,1638,3,202,
        101,0,1609,1610,5,45,0,0,1610,1638,5,232,0,0,1611,1612,5,41,0,0,
        1612,1613,3,202,101,0,1613,1614,3,202,101,0,1614,1615,3,202,101,
        0,1615,1638,1,0,0,0,1616,1617,5,92,0,0,1617,1618,3,202,101,0,1618,
        1619,3,202,101,0,1619,1620,3,202,101,0,1620,1638,1,0,0,0,1621,1623,
        5,42,0,0,1622,1624,5,207,0,0,1623,1622,1,0,0,0,1623,1624,1,0,0,0,
        1624,1625,1,0,0,0,1625,1638,3,202,101,0,1626,1628,5,14,0,0,1627,
        1629,5,207,0,0,1628,1627,1,0,0,0,1628,1629,1,0,0,0,1629,1630,1,0,
        0,0,1630,1638,5,192,0,0,1631,1632,5,15,0,0,1632,1638,5,227,0,0,1633,
        1634,5,17,0,0,1634,1635,5,18,0,0,1635,1638,3,202,101,0,1636,1638,
        5,19,0,0,1637,1597,1,0,0,0,1637,1598,1,0,0,0,1637,1599,1,0,0,0,1637,
        1604,1,0,0,0,1637,1609,1,0,0,0,1637,1611,1,0,0,0,1637,1616,1,0,0,
        0,1637,1621,1,0,0,0,1637,1626,1,0,0,0,1637,1631,1,0,0,0,1637,1633,
        1,0,0,0,1637,1636,1,0,0,0,1638,143,1,0,0,0,1639,1640,5,4,0,0,1640,
        1641,3,190,95,0,1641,1642,3,190,95,0,1642,1643,3,190,95,0,1643,1644,
        3,190,95,0,1644,1645,3,190,95,0,1645,1646,3,190,95,0,1646,1647,3,
        190,95,0,1647,1649,3,198,99,0,1648,1650,3,198,99,0,1649,1648,1,0,
        0,0,1649,1650,1,0,0,0,1650,1652,1,0,0,0,1651,1653,3,198,99,0,1652,
        1651,1,0,0,0,1652,1653,1,0,0,0,1653,145,1,0,0,0,1654,1693,3,144,
        72,0,1655,1657,5,9,0,0,1656,1658,5,207,0,0,1657,1656,1,0,0,0,1657,
        1658,1,0,0,0,1658,1659,1,0,0,0,1659,1693,5,199,0,0,1660,1662,5,21,
        0,0,1661,1663,5,207,0,0,1662,1661,1,0,0,0,1662,1663,1,0,0,0,1663,
        1664,1,0,0,0,1664,1693,3,202,101,0,1665,1666,5,41,0,0,1666,1667,
        3,202,101,0,1667,1668,3,202,101,0,1668,1669,3,202,101,0,1669,1693,
        1,0,0,0,1670,1671,5,92,0,0,1671,1672,3,202,101,0,1672,1673,3,202,
        101,0,1673,1674,3,202,101,0,1674,1675,3,202,101,0,1675,1693,1,0,
        0,0,1676,1678,5,42,0,0,1677,1679,5,207,0,0,1678,1677,1,0,0,0,1678,
        1679,1,0,0,0,1679,1680,1,0,0,0,1680,1693,3,202,101,0,1681,1683,5,
        14,0,0,1682,1684,5,207,0,0,1683,1682,1,0,0,0,1683,1684,1,0,0,0,1684,
        1685,1,0,0,0,1685,1693,5,192,0,0,1686,1687,5,15,0,0,1687,1693,5,
        227,0,0,1688,1689,5,17,0,0,1689,1690,5,18,0,0,1690,1693,3,202,101,
        0,1691,1693,5,19,0,0,1692,1654,1,0,0,0,1692,1655,1,0,0,0,1692,1660,
        1,0,0,0,1692,1665,1,0,0,0,1692,1670,1,0,0,0,1692,1676,1,0,0,0,1692,
        1681,1,0,0,0,1692,1686,1,0,0,0,1692,1688,1,0,0,0,1692,1691,1,0,0,
        0,1693,147,1,0,0,0,1694,1726,3,150,75,0,1695,1697,5,9,0,0,1696,1698,
        5,207,0,0,1697,1696,1,0,0,0,1697,1698,1,0,0,0,1698,1699,1,0,0,0,
        1699,1726,5,199,0,0,1700,1701,5,41,0,0,1701,1702,3,202,101,0,1702,
        1703,3,202,101,0,1703,1704,3,202,101,0,1704,1705,3,202,101,0,1705,
        1706,3,202,101,0,1706,1707,3,202,101,0,1707,1708,3,202,101,0,1708,
        1726,1,0,0,0,1709,1711,5,42,0,0,1710,1712,5,207,0,0,1711,1710,1,
        0,0,0,1711,1712,1,0,0,0,1712,1713,1,0,0,0,1713,1726,3,202,101,0,
        1714,1716,5,14,0,0,1715,1717,5,207,0,0,1716,1715,1,0,0,0,1716,1717,
        1,0,0,0,1717,1718,1,0,0,0,1718,1726,5,192,0,0,1719,1720,5,15,0,0,
        1720,1726,5,227,0,0,1721,1722,5,17,0,0,1722,1723,5,18,0,0,1723,1726,
        3,202,101,0,1724,1726,5,19,0,0,1725,1694,1,0,0,0,1725,1695,1,0,0,
        0,1725,1700,1,0,0,0,1725,1709,1,0,0,0,1725,1714,1,0,0,0,1725,1719,
        1,0,0,0,1725,1721,1,0,0,0,1725,1724,1,0,0,0,1726,149,1,0,0,0,1727,
        1728,5,4,0,0,1728,1729,3,190,95,0,1729,1730,3,190,95,0,1730,1731,
        3,190,95,0,1731,1732,3,190,95,0,1732,1733,3,190,95,0,1733,1734,3,
        190,95,0,1734,1735,3,190,95,0,1735,1736,3,190,95,0,1736,1737,3,198,
        99,0,1737,1738,3,198,99,0,1738,151,1,0,0,0,1739,1783,3,154,77,0,
        1740,1742,5,9,0,0,1741,1743,5,207,0,0,1742,1741,1,0,0,0,1742,1743,
        1,0,0,0,1743,1744,1,0,0,0,1744,1783,5,199,0,0,1745,1746,5,96,0,0,
        1746,1783,5,199,0,0,1747,1748,5,61,0,0,1748,1749,5,192,0,0,1749,
        1750,5,192,0,0,1750,1783,3,202,101,0,1751,1752,5,77,0,0,1752,1783,
        3,202,101,0,1753,1755,5,42,0,0,1754,1756,5,207,0,0,1755,1754,1,0,
        0,0,1755,1756,1,0,0,0,1756,1757,1,0,0,0,1757,1783,3,202,101,0,1758,
        1760,5,14,0,0,1759,1761,5,207,0,0,1760,1759,1,0,0,0,1760,1761,1,
        0,0,0,1761,1762,1,0,0,0,1762,1783,5,192,0,0,1763,1764,5,15,0,0,1764,
        1783,5,227,0,0,1765,1766,5,17,0,0,1766,1767,5,18,0,0,1767,1774,3,
        202,101,0,1768,1775,5,136,0,0,1769,1771,5,9,0,0,1770,1772,5,207,
        0,0,1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1773,1,0,0,0,1773,1775,
        5,199,0,0,1774,1768,1,0,0,0,1774,1769,1,0,0,0,1775,1783,1,0,0,0,
        1776,1783,5,19,0,0,1777,1778,5,62,0,0,1778,1779,7,1,0,0,1779,1780,
        5,192,0,0,1780,1783,5,192,0,0,1781,1783,5,63,0,0,1782,1739,1,0,0,
        0,1782,1740,1,0,0,0,1782,1745,1,0,0,0,1782,1747,1,0,0,0,1782,1751,
        1,0,0,0,1782,1753,1,0,0,0,1782,1758,1,0,0,0,1782,1763,1,0,0,0,1782,
        1765,1,0,0,0,1782,1776,1,0,0,0,1782,1777,1,0,0,0,1782,1781,1,0,0,
        0,1783,153,1,0,0,0,1784,1785,5,4,0,0,1785,1786,3,190,95,0,1786,1787,
        3,190,95,0,1787,1788,3,190,95,0,1788,1789,3,190,95,0,1789,1790,3,
        190,95,0,1790,1791,3,190,95,0,1791,1792,3,190,95,0,1792,1793,3,190,
        95,0,1793,1794,3,190,95,0,1794,1795,3,190,95,0,1795,1797,3,190,95,
        0,1796,1798,3,190,95,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,1798,
        155,1,0,0,0,1799,1857,3,158,79,0,1800,1857,3,246,123,0,1801,1803,
        5,9,0,0,1802,1804,5,207,0,0,1803,1802,1,0,0,0,1803,1804,1,0,0,0,
        1804,1805,1,0,0,0,1805,1857,5,199,0,0,1806,1808,5,42,0,0,1807,1809,
        5,207,0,0,1808,1807,1,0,0,0,1808,1809,1,0,0,0,1809,1810,1,0,0,0,
        1810,1811,5,199,0,0,1811,1857,3,202,101,0,1812,1814,5,14,0,0,1813,
        1815,5,207,0,0,1814,1813,1,0,0,0,1814,1815,1,0,0,0,1815,1816,1,0,
        0,0,1816,1857,5,192,0,0,1817,1819,5,15,0,0,1818,1820,5,226,0,0,1819,
        1818,1,0,0,0,1819,1820,1,0,0,0,1820,1821,1,0,0,0,1821,1822,5,228,
        0,0,1822,1857,5,227,0,0,1823,1825,5,98,0,0,1824,1826,5,207,0,0,1825,
        1824,1,0,0,0,1825,1826,1,0,0,0,1826,1827,1,0,0,0,1827,1828,5,199,
        0,0,1828,1857,3,202,101,0,1829,1831,5,99,0,0,1830,1832,5,207,0,0,
        1831,1830,1,0,0,0,1831,1832,1,0,0,0,1832,1833,1,0,0,0,1833,1834,
        5,199,0,0,1834,1857,3,202,101,0,1835,1837,5,100,0,0,1836,1838,5,
        207,0,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1839,1,0,0,0,1839,
        1840,5,199,0,0,1840,1841,3,202,101,0,1841,1842,3,202,101,0,1842,
        1857,1,0,0,0,1843,1844,5,17,0,0,1844,1845,5,18,0,0,1845,1852,3,202,
        101,0,1846,1853,5,136,0,0,1847,1849,5,9,0,0,1848,1850,5,207,0,0,
        1849,1848,1,0,0,0,1849,1850,1,0,0,0,1850,1851,1,0,0,0,1851,1853,
        5,199,0,0,1852,1846,1,0,0,0,1852,1847,1,0,0,0,1853,1857,1,0,0,0,
        1854,1857,5,19,0,0,1855,1857,5,101,0,0,1856,1799,1,0,0,0,1856,1800,
        1,0,0,0,1856,1801,1,0,0,0,1856,1806,1,0,0,0,1856,1812,1,0,0,0,1856,
        1817,1,0,0,0,1856,1823,1,0,0,0,1856,1829,1,0,0,0,1856,1835,1,0,0,
        0,1856,1843,1,0,0,0,1856,1854,1,0,0,0,1856,1855,1,0,0,0,1857,157,
        1,0,0,0,1858,1859,5,4,0,0,1859,1860,3,190,95,0,1860,1861,3,190,95,
        0,1861,1863,3,198,99,0,1862,1864,3,198,99,0,1863,1862,1,0,0,0,1863,
        1864,1,0,0,0,1864,159,1,0,0,0,1865,1915,3,162,81,0,1866,1915,3,248,
        124,0,1867,1869,5,9,0,0,1868,1870,5,207,0,0,1869,1868,1,0,0,0,1869,
        1870,1,0,0,0,1870,1871,1,0,0,0,1871,1915,5,199,0,0,1872,1873,5,103,
        0,0,1873,1915,5,192,0,0,1874,1875,5,41,0,0,1875,1876,3,202,101,0,
        1876,1877,3,202,101,0,1877,1915,1,0,0,0,1878,1880,5,42,0,0,1879,
        1881,5,207,0,0,1880,1879,1,0,0,0,1880,1881,1,0,0,0,1881,1882,1,0,
        0,0,1882,1915,3,202,101,0,1883,1885,5,14,0,0,1884,1886,5,207,0,0,
        1885,1884,1,0,0,0,1885,1886,1,0,0,0,1886,1887,1,0,0,0,1887,1915,
        5,192,0,0,1888,1889,5,17,0,0,1889,1890,5,18,0,0,1890,1897,3,202,
        101,0,1891,1898,5,136,0,0,1892,1894,5,9,0,0,1893,1895,5,207,0,0,
        1894,1893,1,0,0,0,1894,1895,1,0,0,0,1895,1896,1,0,0,0,1896,1898,
        5,199,0,0,1897,1891,1,0,0,0,1897,1892,1,0,0,0,1898,1915,1,0,0,0,
        1899,1915,5,19,0,0,1900,1901,5,104,0,0,1901,1915,5,199,0,0,1902,
        1903,5,105,0,0,1903,1904,3,202,101,0,1904,1905,5,192,0,0,1905,1915,
        1,0,0,0,1906,1915,5,106,0,0,1907,1915,5,107,0,0,1908,1915,5,108,
        0,0,1909,1915,5,109,0,0,1910,1915,5,110,0,0,1911,1915,5,111,0,0,
        1912,1913,5,112,0,0,1913,1915,5,192,0,0,1914,1865,1,0,0,0,1914,1866,
        1,0,0,0,1914,1867,1,0,0,0,1914,1872,1,0,0,0,1914,1874,1,0,0,0,1914,
        1878,1,0,0,0,1914,1883,1,0,0,0,1914,1888,1,0,0,0,1914,1899,1,0,0,
        0,1914,1900,1,0,0,0,1914,1902,1,0,0,0,1914,1906,1,0,0,0,1914,1907,
        1,0,0,0,1914,1908,1,0,0,0,1914,1909,1,0,0,0,1914,1910,1,0,0,0,1914,
        1911,1,0,0,0,1914,1912,1,0,0,0,1915,161,1,0,0,0,1916,1917,5,4,0,
        0,1917,1918,3,190,95,0,1918,1919,3,190,95,0,1919,1920,3,190,95,0,
        1920,1921,3,190,95,0,1921,1922,3,190,95,0,1922,1924,3,198,99,0,1923,
        1925,3,198,99,0,1924,1923,1,0,0,0,1924,1925,1,0,0,0,1925,1927,1,
        0,0,0,1926,1928,3,198,99,0,1927,1926,1,0,0,0,1927,1928,1,0,0,0,1928,
        163,1,0,0,0,1929,1965,3,166,83,0,1930,1932,5,9,0,0,1931,1933,5,207,
        0,0,1932,1931,1,0,0,0,1932,1933,1,0,0,0,1933,1934,1,0,0,0,1934,1965,
        5,199,0,0,1935,1936,5,103,0,0,1936,1965,5,192,0,0,1937,1938,5,41,
        0,0,1938,1939,3,202,101,0,1939,1940,3,202,101,0,1940,1965,1,0,0,
        0,1941,1943,5,42,0,0,1942,1944,5,207,0,0,1943,1942,1,0,0,0,1943,
        1944,1,0,0,0,1944,1945,1,0,0,0,1945,1965,3,202,101,0,1946,1948,5,
        14,0,0,1947,1949,5,207,0,0,1948,1947,1,0,0,0,1948,1949,1,0,0,0,1949,
        1950,1,0,0,0,1950,1965,5,192,0,0,1951,1965,5,106,0,0,1952,1965,5,
        107,0,0,1953,1965,5,105,0,0,1954,1965,5,108,0,0,1955,1965,5,109,
        0,0,1956,1965,5,112,0,0,1957,1958,5,17,0,0,1958,1965,5,18,0,0,1959,
        1965,5,19,0,0,1960,1961,5,104,0,0,1961,1965,5,199,0,0,1962,1965,
        5,110,0,0,1963,1965,5,111,0,0,1964,1929,1,0,0,0,1964,1930,1,0,0,
        0,1964,1935,1,0,0,0,1964,1937,1,0,0,0,1964,1941,1,0,0,0,1964,1946,
        1,0,0,0,1964,1951,1,0,0,0,1964,1952,1,0,0,0,1964,1953,1,0,0,0,1964,
        1954,1,0,0,0,1964,1955,1,0,0,0,1964,1956,1,0,0,0,1964,1957,1,0,0,
        0,1964,1959,1,0,0,0,1964,1960,1,0,0,0,1964,1962,1,0,0,0,1964,1963,
        1,0,0,0,1965,165,1,0,0,0,1966,1967,5,4,0,0,1967,1968,3,190,95,0,
        1968,1969,3,190,95,0,1969,1970,3,190,95,0,1970,1971,3,190,95,0,1971,
        1972,3,190,95,0,1972,1973,3,190,95,0,1973,1975,3,198,99,0,1974,1976,
        3,198,99,0,1975,1974,1,0,0,0,1975,1976,1,0,0,0,1976,167,1,0,0,0,
        1977,1998,3,170,85,0,1978,1980,5,9,0,0,1979,1981,5,207,0,0,1980,
        1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,1,0,0,0,1982,1998,5,199,
        0,0,1983,1985,5,42,0,0,1984,1986,5,207,0,0,1985,1984,1,0,0,0,1985,
        1986,1,0,0,0,1986,1987,1,0,0,0,1987,1998,3,202,101,0,1988,1990,5,
        14,0,0,1989,1991,5,207,0,0,1990,1989,1,0,0,0,1990,1991,1,0,0,0,1991,
        1992,1,0,0,0,1992,1998,5,192,0,0,1993,1994,5,17,0,0,1994,1995,5,
        18,0,0,1995,1998,3,202,101,0,1996,1998,5,19,0,0,1997,1977,1,0,0,
        0,1997,1978,1,0,0,0,1997,1983,1,0,0,0,1997,1988,1,0,0,0,1997,1993,
        1,0,0,0,1997,1996,1,0,0,0,1998,169,1,0,0,0,1999,2000,5,4,0,0,2000,
        2001,3,190,95,0,2001,2002,3,190,95,0,2002,2003,3,198,99,0,2003,2004,
        3,198,99,0,2004,2005,3,198,99,0,2005,171,1,0,0,0,2006,2033,3,174,
        87,0,2007,2009,5,9,0,0,2008,2010,5,207,0,0,2009,2008,1,0,0,0,2009,
        2010,1,0,0,0,2010,2011,1,0,0,0,2011,2033,5,199,0,0,2012,2013,5,116,
        0,0,2013,2033,5,192,0,0,2014,2015,5,41,0,0,2015,2033,3,202,101,0,
        2016,2018,5,42,0,0,2017,2019,5,207,0,0,2018,2017,1,0,0,0,2018,2019,
        1,0,0,0,2019,2020,1,0,0,0,2020,2033,3,202,101,0,2021,2023,5,14,0,
        0,2022,2024,5,207,0,0,2023,2022,1,0,0,0,2023,2024,1,0,0,0,2024,2025,
        1,0,0,0,2025,2033,5,192,0,0,2026,2027,5,17,0,0,2027,2028,5,18,0,
        0,2028,2033,3,202,101,0,2029,2033,5,19,0,0,2030,2031,5,112,0,0,2031,
        2033,5,192,0,0,2032,2006,1,0,0,0,2032,2007,1,0,0,0,2032,2012,1,0,
        0,0,2032,2014,1,0,0,0,2032,2016,1,0,0,0,2032,2021,1,0,0,0,2032,2026,
        1,0,0,0,2032,2029,1,0,0,0,2032,2030,1,0,0,0,2033,173,1,0,0,0,2034,
        2035,5,4,0,0,2035,2036,3,190,95,0,2036,2037,3,190,95,0,2037,2038,
        3,190,95,0,2038,2040,3,198,99,0,2039,2041,3,198,99,0,2040,2039,1,
        0,0,0,2040,2041,1,0,0,0,2041,175,1,0,0,0,2042,2064,3,178,89,0,2043,
        2064,3,250,125,0,2044,2046,5,9,0,0,2045,2047,5,207,0,0,2046,2045,
        1,0,0,0,2046,2047,1,0,0,0,2047,2048,1,0,0,0,2048,2064,5,199,0,0,
        2049,2051,5,42,0,0,2050,2052,5,207,0,0,2051,2050,1,0,0,0,2051,2052,
        1,0,0,0,2052,2053,1,0,0,0,2053,2064,3,202,101,0,2054,2056,5,14,0,
        0,2055,2057,5,207,0,0,2056,2055,1,0,0,0,2056,2057,1,0,0,0,2057,2058,
        1,0,0,0,2058,2064,5,192,0,0,2059,2060,5,17,0,0,2060,2061,5,18,0,
        0,2061,2064,3,202,101,0,2062,2064,5,19,0,0,2063,2042,1,0,0,0,2063,
        2043,1,0,0,0,2063,2044,1,0,0,0,2063,2049,1,0,0,0,2063,2054,1,0,0,
        0,2063,2059,1,0,0,0,2063,2062,1,0,0,0,2064,177,1,0,0,0,2065,2066,
        5,4,0,0,2066,2067,3,190,95,0,2067,2068,3,190,95,0,2068,2069,3,190,
        95,0,2069,179,1,0,0,0,2070,2138,3,182,91,0,2071,2138,3,252,126,0,
        2072,2074,5,117,0,0,2073,2075,5,207,0,0,2074,2073,1,0,0,0,2074,2075,
        1,0,0,0,2075,2076,1,0,0,0,2076,2138,3,202,101,0,2077,2079,5,118,
        0,0,2078,2080,5,207,0,0,2079,2078,1,0,0,0,2079,2080,1,0,0,0,2080,
        2081,1,0,0,0,2081,2138,3,202,101,0,2082,2084,5,119,0,0,2083,2085,
        5,207,0,0,2084,2083,1,0,0,0,2084,2085,1,0,0,0,2085,2086,1,0,0,0,
        2086,2138,5,192,0,0,2087,2089,5,120,0,0,2088,2090,5,207,0,0,2089,
        2088,1,0,0,0,2089,2090,1,0,0,0,2090,2091,1,0,0,0,2091,2138,5,192,
        0,0,2092,2094,5,121,0,0,2093,2095,5,207,0,0,2094,2093,1,0,0,0,2094,
        2095,1,0,0,0,2095,2096,1,0,0,0,2096,2138,5,192,0,0,2097,2099,5,122,
        0,0,2098,2100,5,207,0,0,2099,2098,1,0,0,0,2099,2100,1,0,0,0,2100,
        2101,1,0,0,0,2101,2138,5,199,0,0,2102,2104,5,123,0,0,2103,2105,5,
        207,0,0,2104,2103,1,0,0,0,2104,2105,1,0,0,0,2105,2106,1,0,0,0,2106,
        2138,3,202,101,0,2107,2109,5,124,0,0,2108,2110,5,207,0,0,2109,2108,
        1,0,0,0,2109,2110,1,0,0,0,2110,2111,1,0,0,0,2111,2138,3,202,101,
        0,2112,2114,5,125,0,0,2113,2115,5,207,0,0,2114,2113,1,0,0,0,2114,
        2115,1,0,0,0,2115,2116,1,0,0,0,2116,2138,3,202,101,0,2117,2119,5,
        126,0,0,2118,2120,5,207,0,0,2119,2118,1,0,0,0,2119,2120,1,0,0,0,
        2120,2121,1,0,0,0,2121,2138,3,202,101,0,2122,2124,5,127,0,0,2123,
        2125,5,207,0,0,2124,2123,1,0,0,0,2124,2125,1,0,0,0,2125,2126,1,0,
        0,0,2126,2138,5,192,0,0,2127,2129,5,128,0,0,2128,2130,5,207,0,0,
        2129,2128,1,0,0,0,2129,2130,1,0,0,0,2130,2131,1,0,0,0,2131,2138,
        5,192,0,0,2132,2134,5,129,0,0,2133,2135,5,207,0,0,2134,2133,1,0,
        0,0,2134,2135,1,0,0,0,2135,2136,1,0,0,0,2136,2138,5,192,0,0,2137,
        2070,1,0,0,0,2137,2071,1,0,0,0,2137,2072,1,0,0,0,2137,2077,1,0,0,
        0,2137,2082,1,0,0,0,2137,2087,1,0,0,0,2137,2092,1,0,0,0,2137,2097,
        1,0,0,0,2137,2102,1,0,0,0,2137,2107,1,0,0,0,2137,2112,1,0,0,0,2137,
        2117,1,0,0,0,2137,2122,1,0,0,0,2137,2127,1,0,0,0,2137,2132,1,0,0,
        0,2138,181,1,0,0,0,2139,2140,5,4,0,0,2140,2141,3,190,95,0,2141,2142,
        3,190,95,0,2142,183,1,0,0,0,2143,2144,5,132,0,0,2144,2148,5,36,0,
        0,2145,2147,3,186,93,0,2146,2145,1,0,0,0,2147,2150,1,0,0,0,2148,
        2146,1,0,0,0,2148,2149,1,0,0,0,2149,2151,1,0,0,0,2150,2148,1,0,0,
        0,2151,2152,5,2,0,0,2152,185,1,0,0,0,2153,2157,5,53,0,0,2154,2156,
        3,188,94,0,2155,2154,1,0,0,0,2156,2159,1,0,0,0,2157,2155,1,0,0,0,
        2157,2158,1,0,0,0,2158,2160,1,0,0,0,2159,2157,1,0,0,0,2160,2164,
        5,2,0,0,2161,2164,5,54,0,0,2162,2164,5,39,0,0,2163,2153,1,0,0,0,
        2163,2161,1,0,0,0,2163,2162,1,0,0,0,2164,187,1,0,0,0,2165,2167,5,
        133,0,0,2166,2168,5,207,0,0,2167,2166,1,0,0,0,2167,2168,1,0,0,0,
        2168,2169,1,0,0,0,2169,2181,3,190,95,0,2170,2172,5,134,0,0,2171,
        2173,5,207,0,0,2172,2171,1,0,0,0,2172,2173,1,0,0,0,2173,2174,1,0,
        0,0,2174,2181,3,202,101,0,2175,2177,5,56,0,0,2176,2178,5,207,0,0,
        2177,2176,1,0,0,0,2177,2178,1,0,0,0,2178,2179,1,0,0,0,2179,2181,
        3,202,101,0,2180,2165,1,0,0,0,2180,2170,1,0,0,0,2180,2175,1,0,0,
        0,2181,189,1,0,0,0,2182,2183,5,204,0,0,2183,2184,3,192,96,0,2184,
        2185,5,205,0,0,2185,191,1,0,0,0,2186,2191,3,194,97,0,2187,2188,5,
        187,0,0,2188,2190,3,194,97,0,2189,2187,1,0,0,0,2190,2193,1,0,0,0,
        2191,2189,1,0,0,0,2191,2192,1,0,0,0,2192,193,1,0,0,0,2193,2191,1,
        0,0,0,2194,2199,3,196,98,0,2195,2196,5,188,0,0,2196,2198,3,196,98,
        0,2197,2195,1,0,0,0,2198,2201,1,0,0,0,2199,2197,1,0,0,0,2199,2200,
        1,0,0,0,2200,195,1,0,0,0,2201,2199,1,0,0,0,2202,2203,6,98,-1,0,2203,
        2204,5,204,0,0,2204,2205,3,192,96,0,2205,2206,5,205,0,0,2206,2342,
        1,0,0,0,2207,2342,5,136,0,0,2208,2209,5,138,0,0,2209,2210,7,2,0,
        0,2210,2211,7,3,0,0,2211,2342,7,2,0,0,2212,2214,5,139,0,0,2213,2215,
        5,219,0,0,2214,2213,1,0,0,0,2214,2215,1,0,0,0,2215,2216,1,0,0,0,
        2216,2217,5,220,0,0,2217,2218,5,221,0,0,2218,2342,3,200,100,0,2219,
        2220,5,140,0,0,2220,2342,3,196,98,29,2221,2222,5,141,0,0,2222,2342,
        3,196,98,28,2223,2224,5,142,0,0,2224,2342,3,196,98,27,2225,2233,
        5,143,0,0,2226,2234,5,200,0,0,2227,2230,5,199,0,0,2228,2229,5,206,
        0,0,2229,2231,5,199,0,0,2230,2228,1,0,0,0,2230,2231,1,0,0,0,2231,
        2234,1,0,0,0,2232,2234,5,213,0,0,2233,2226,1,0,0,0,2233,2227,1,0,
        0,0,2233,2232,1,0,0,0,2234,2342,1,0,0,0,2235,2342,5,144,0,0,2236,
        2237,5,145,0,0,2237,2342,5,192,0,0,2238,2342,5,146,0,0,2239,2252,
        5,147,0,0,2240,2253,5,200,0,0,2241,2244,5,199,0,0,2242,2243,5,206,
        0,0,2243,2245,5,199,0,0,2244,2242,1,0,0,0,2244,2245,1,0,0,0,2245,
        2253,1,0,0,0,2246,2249,5,195,0,0,2247,2248,5,206,0,0,2248,2250,5,
        195,0,0,2249,2247,1,0,0,0,2249,2250,1,0,0,0,2250,2253,1,0,0,0,2251,
        2253,5,213,0,0,2252,2240,1,0,0,0,2252,2241,1,0,0,0,2252,2246,1,0,
        0,0,2252,2251,1,0,0,0,2253,2342,1,0,0,0,2254,2255,5,189,0,0,2255,
        2342,3,196,98,21,2256,2257,5,148,0,0,2257,2258,5,204,0,0,2258,2260,
        3,200,100,0,2259,2261,5,190,0,0,2260,2259,1,0,0,0,2260,2261,1,0,
        0,0,2261,2262,1,0,0,0,2262,2264,3,200,100,0,2263,2265,5,190,0,0,
        2264,2263,1,0,0,0,2264,2265,1,0,0,0,2265,2266,1,0,0,0,2266,2267,
        3,200,100,0,2267,2268,5,205,0,0,2268,2269,5,149,0,0,2269,2270,3,
        200,100,0,2270,2342,1,0,0,0,2271,2272,5,148,0,0,2272,2273,5,204,
        0,0,2273,2275,5,185,0,0,2274,2276,5,207,0,0,2275,2274,1,0,0,0,2275,
        2276,1,0,0,0,2276,2277,1,0,0,0,2277,2279,3,190,95,0,2278,2280,5,
        190,0,0,2279,2278,1,0,0,0,2279,2280,1,0,0,0,2280,2286,1,0,0,0,2281,
        2283,5,186,0,0,2282,2284,5,207,0,0,2283,2282,1,0,0,0,2283,2284,1,
        0,0,0,2284,2285,1,0,0,0,2285,2287,3,190,95,0,2286,2281,1,0,0,0,2286,
        2287,1,0,0,0,2287,2288,1,0,0,0,2288,2289,5,205,0,0,2289,2290,5,149,
        0,0,2290,2291,3,200,100,0,2291,2342,1,0,0,0,2292,2342,5,150,0,0,
        2293,2342,5,151,0,0,2294,2302,5,152,0,0,2295,2303,5,201,0,0,2296,
        2299,5,192,0,0,2297,2298,5,206,0,0,2298,2300,5,192,0,0,2299,2297,
        1,0,0,0,2299,2300,1,0,0,0,2300,2303,1,0,0,0,2301,2303,5,213,0,0,
        2302,2295,1,0,0,0,2302,2296,1,0,0,0,2302,2301,1,0,0,0,2303,2342,
        1,0,0,0,2304,2312,5,153,0,0,2305,2313,5,200,0,0,2306,2309,5,199,
        0,0,2307,2308,5,206,0,0,2308,2310,5,199,0,0,2309,2307,1,0,0,0,2309,
        2310,1,0,0,0,2310,2313,1,0,0,0,2311,2313,5,213,0,0,2312,2305,1,0,
        0,0,2312,2306,1,0,0,0,2312,2311,1,0,0,0,2313,2342,1,0,0,0,2314,2327,
        5,155,0,0,2315,2328,5,200,0,0,2316,2319,5,199,0,0,2317,2318,5,206,
        0,0,2318,2320,5,199,0,0,2319,2317,1,0,0,0,2319,2320,1,0,0,0,2320,
        2328,1,0,0,0,2321,2324,5,195,0,0,2322,2323,5,206,0,0,2323,2325,5,
        195,0,0,2324,2322,1,0,0,0,2324,2325,1,0,0,0,2325,2328,1,0,0,0,2326,
        2328,5,213,0,0,2327,2315,1,0,0,0,2327,2316,1,0,0,0,2327,2321,1,0,
        0,0,2327,2326,1,0,0,0,2328,2342,1,0,0,0,2329,2342,5,156,0,0,2330,
        2342,5,157,0,0,2331,2342,5,158,0,0,2332,2342,5,159,0,0,2333,2342,
        5,160,0,0,2334,2342,5,161,0,0,2335,2342,5,162,0,0,2336,2342,5,163,
        0,0,2337,2342,5,164,0,0,2338,2342,5,165,0,0,2339,2342,5,130,0,0,
        2340,2342,5,131,0,0,2341,2202,1,0,0,0,2341,2207,1,0,0,0,2341,2208,
        1,0,0,0,2341,2212,1,0,0,0,2341,2219,1,0,0,0,2341,2221,1,0,0,0,2341,
        2223,1,0,0,0,2341,2225,1,0,0,0,2341,2235,1,0,0,0,2341,2236,1,0,0,
        0,2341,2238,1,0,0,0,2341,2239,1,0,0,0,2341,2254,1,0,0,0,2341,2256,
        1,0,0,0,2341,2271,1,0,0,0,2341,2292,1,0,0,0,2341,2293,1,0,0,0,2341,
        2294,1,0,0,0,2341,2304,1,0,0,0,2341,2314,1,0,0,0,2341,2329,1,0,0,
        0,2341,2330,1,0,0,0,2341,2331,1,0,0,0,2341,2332,1,0,0,0,2341,2333,
        1,0,0,0,2341,2334,1,0,0,0,2341,2335,1,0,0,0,2341,2336,1,0,0,0,2341,
        2337,1,0,0,0,2341,2338,1,0,0,0,2341,2339,1,0,0,0,2341,2340,1,0,0,
        0,2342,2351,1,0,0,0,2343,2344,10,32,0,0,2344,2345,5,137,0,0,2345,
        2350,3,200,100,0,2346,2347,10,14,0,0,2347,2348,5,154,0,0,2348,2350,
        3,200,100,0,2349,2343,1,0,0,0,2349,2346,1,0,0,0,2350,2353,1,0,0,
        0,2351,2349,1,0,0,0,2351,2352,1,0,0,0,2352,197,1,0,0,0,2353,2351,
        1,0,0,0,2354,2355,7,4,0,0,2355,199,1,0,0,0,2356,2357,7,5,0,0,2357,
        201,1,0,0,0,2358,2359,7,4,0,0,2359,203,1,0,0,0,2360,2361,7,5,0,0,
        2361,205,1,0,0,0,2362,2373,5,135,0,0,2363,2371,5,236,0,0,2364,2366,
        5,239,0,0,2365,2364,1,0,0,0,2366,2369,1,0,0,0,2367,2365,1,0,0,0,
        2367,2368,1,0,0,0,2368,2372,1,0,0,0,2369,2367,1,0,0,0,2370,2372,
        5,240,0,0,2371,2367,1,0,0,0,2371,2370,1,0,0,0,2372,2374,1,0,0,0,
        2373,2363,1,0,0,0,2373,2374,1,0,0,0,2374,2375,1,0,0,0,2375,2379,
        5,237,0,0,2376,2378,5,239,0,0,2377,2376,1,0,0,0,2378,2381,1,0,0,
        0,2379,2377,1,0,0,0,2379,2380,1,0,0,0,2380,2382,1,0,0,0,2381,2379,
        1,0,0,0,2382,2383,5,238,0,0,2383,207,1,0,0,0,2384,2385,5,166,0,0,
        2385,2386,3,210,105,0,2386,2387,3,190,95,0,2387,209,1,0,0,0,2388,
        2389,7,6,0,0,2389,2390,3,212,106,0,2390,2391,5,242,0,0,2391,2395,
        1,0,0,0,2392,2393,5,169,0,0,2393,2395,3,220,110,0,2394,2388,1,0,
        0,0,2394,2392,1,0,0,0,2395,211,1,0,0,0,2396,2399,5,252,0,0,2397,
        2398,5,243,0,0,2398,2400,3,214,107,0,2399,2397,1,0,0,0,2399,2400,
        1,0,0,0,2400,213,1,0,0,0,2401,2404,3,216,108,0,2402,2403,7,7,0,0,
        2403,2405,3,214,107,0,2404,2402,1,0,0,0,2404,2405,1,0,0,0,2405,215,
        1,0,0,0,2406,2414,5,252,0,0,2407,2414,3,218,109,0,2408,2414,5,250,
        0,0,2409,2414,5,251,0,0,2410,2414,5,276,0,0,2411,2414,5,275,0,0,
        2412,2414,5,277,0,0,2413,2406,1,0,0,0,2413,2407,1,0,0,0,2413,2408,
        1,0,0,0,2413,2409,1,0,0,0,2413,2410,1,0,0,0,2413,2411,1,0,0,0,2413,
        2412,1,0,0,0,2414,217,1,0,0,0,2415,2416,5,253,0,0,2416,2417,5,279,
        0,0,2417,2418,3,216,108,0,2418,2419,5,242,0,0,2419,2535,1,0,0,0,
        2420,2421,5,254,0,0,2421,2422,5,279,0,0,2422,2423,3,216,108,0,2423,
        2424,5,242,0,0,2424,2535,1,0,0,0,2425,2426,5,256,0,0,2426,2427,5,
        279,0,0,2427,2428,3,216,108,0,2428,2429,5,242,0,0,2429,2535,1,0,
        0,0,2430,2431,5,257,0,0,2431,2432,5,279,0,0,2432,2433,3,216,108,
        0,2433,2434,5,242,0,0,2434,2535,1,0,0,0,2435,2436,5,258,0,0,2436,
        2437,5,279,0,0,2437,2438,3,216,108,0,2438,2439,5,242,0,0,2439,2535,
        1,0,0,0,2440,2441,5,259,0,0,2441,2442,5,279,0,0,2442,2443,3,216,
        108,0,2443,2444,5,242,0,0,2444,2535,1,0,0,0,2445,2446,5,260,0,0,
        2446,2447,5,279,0,0,2447,2448,3,216,108,0,2448,2449,5,242,0,0,2449,
        2535,1,0,0,0,2450,2451,5,261,0,0,2451,2452,5,279,0,0,2452,2453,3,
        216,108,0,2453,2454,5,242,0,0,2454,2535,1,0,0,0,2455,2456,5,262,
        0,0,2456,2457,5,279,0,0,2457,2458,3,216,108,0,2458,2459,5,242,0,
        0,2459,2535,1,0,0,0,2460,2461,5,263,0,0,2461,2462,5,279,0,0,2462,
        2463,3,216,108,0,2463,2464,5,242,0,0,2464,2535,1,0,0,0,2465,2466,
        5,264,0,0,2466,2467,5,279,0,0,2467,2468,3,216,108,0,2468,2469,5,
        242,0,0,2469,2535,1,0,0,0,2470,2471,5,265,0,0,2471,2472,5,279,0,
        0,2472,2477,3,216,108,0,2473,2474,5,249,0,0,2474,2476,3,216,108,
        0,2475,2473,1,0,0,0,2476,2479,1,0,0,0,2477,2475,1,0,0,0,2477,2478,
        1,0,0,0,2478,2480,1,0,0,0,2479,2477,1,0,0,0,2480,2481,5,242,0,0,
        2481,2535,1,0,0,0,2482,2483,5,266,0,0,2483,2484,5,279,0,0,2484,2485,
        3,216,108,0,2485,2486,5,242,0,0,2486,2535,1,0,0,0,2487,2488,5,267,
        0,0,2488,2489,5,279,0,0,2489,2494,3,216,108,0,2490,2491,5,249,0,
        0,2491,2493,3,216,108,0,2492,2490,1,0,0,0,2493,2496,1,0,0,0,2494,
        2492,1,0,0,0,2494,2495,1,0,0,0,2495,2497,1,0,0,0,2496,2494,1,0,0,
        0,2497,2498,5,242,0,0,2498,2535,1,0,0,0,2499,2500,5,268,0,0,2500,
        2501,5,279,0,0,2501,2502,3,216,108,0,2502,2503,5,249,0,0,2503,2504,
        3,216,108,0,2504,2505,5,242,0,0,2505,2535,1,0,0,0,2506,2507,5,269,
        0,0,2507,2508,5,279,0,0,2508,2509,3,216,108,0,2509,2510,5,242,0,
        0,2510,2535,1,0,0,0,2511,2512,5,270,0,0,2512,2513,5,279,0,0,2513,
        2535,5,242,0,0,2514,2515,5,271,0,0,2515,2516,5,279,0,0,2516,2517,
        3,216,108,0,2517,2518,5,242,0,0,2518,2535,1,0,0,0,2519,2520,5,272,
        0,0,2520,2521,5,279,0,0,2521,2522,3,216,108,0,2522,2523,5,242,0,
        0,2523,2535,1,0,0,0,2524,2525,5,273,0,0,2525,2526,5,279,0,0,2526,
        2527,3,216,108,0,2527,2528,5,242,0,0,2528,2535,1,0,0,0,2529,2530,
        5,274,0,0,2530,2531,5,279,0,0,2531,2532,3,216,108,0,2532,2533,5,
        242,0,0,2533,2535,1,0,0,0,2534,2415,1,0,0,0,2534,2420,1,0,0,0,2534,
        2425,1,0,0,0,2534,2430,1,0,0,0,2534,2435,1,0,0,0,2534,2440,1,0,0,
        0,2534,2445,1,0,0,0,2534,2450,1,0,0,0,2534,2455,1,0,0,0,2534,2460,
        1,0,0,0,2534,2465,1,0,0,0,2534,2470,1,0,0,0,2534,2482,1,0,0,0,2534,
        2487,1,0,0,0,2534,2499,1,0,0,0,2534,2506,1,0,0,0,2534,2511,1,0,0,
        0,2534,2514,1,0,0,0,2534,2519,1,0,0,0,2534,2524,1,0,0,0,2534,2529,
        1,0,0,0,2535,219,1,0,0,0,2536,2537,7,8,0,0,2537,2538,5,281,0,0,2538,
        2539,5,290,0,0,2539,2540,5,282,0,0,2540,221,1,0,0,0,2541,2542,5,
        170,0,0,2542,2543,5,275,0,0,2543,2544,5,243,0,0,2544,2545,3,224,
        112,0,2545,2546,5,242,0,0,2546,223,1,0,0,0,2547,2550,3,216,108,0,
        2548,2549,7,7,0,0,2549,2551,3,224,112,0,2550,2548,1,0,0,0,2550,2551,
        1,0,0,0,2551,225,1,0,0,0,2552,2554,5,171,0,0,2553,2555,7,9,0,0,2554,
        2553,1,0,0,0,2554,2555,1,0,0,0,2555,2556,1,0,0,0,2556,2557,5,172,
        0,0,2557,2558,5,207,0,0,2558,2559,7,10,0,0,2559,2560,5,207,0,0,2560,
        2566,3,190,95,0,2561,2562,5,172,0,0,2562,2563,5,207,0,0,2563,2564,
        7,10,0,0,2564,2565,5,207,0,0,2565,2567,3,190,95,0,2566,2561,1,0,
        0,0,2566,2567,1,0,0,0,2567,2568,1,0,0,0,2568,2569,5,2,0,0,2569,227,
        1,0,0,0,2570,2574,5,174,0,0,2571,2573,3,230,115,0,2572,2571,1,0,
        0,0,2573,2576,1,0,0,0,2574,2572,1,0,0,0,2574,2575,1,0,0,0,2575,2577,
        1,0,0,0,2576,2574,1,0,0,0,2577,2578,5,2,0,0,2578,229,1,0,0,0,2579,
        2580,5,95,0,0,2580,2581,5,199,0,0,2581,2582,5,199,0,0,2582,2583,
        5,199,0,0,2583,2584,3,202,101,0,2584,2589,3,202,101,0,2585,2586,
        5,175,0,0,2586,2587,3,202,101,0,2587,2588,3,202,101,0,2588,2590,
        1,0,0,0,2589,2585,1,0,0,0,2589,2590,1,0,0,0,2590,2635,1,0,0,0,2591,
        2592,5,140,0,0,2592,2593,5,199,0,0,2593,2594,5,199,0,0,2594,2595,
        3,202,101,0,2595,2596,3,202,101,0,2596,2635,1,0,0,0,2597,2598,7,
        11,0,0,2598,2599,5,199,0,0,2599,2600,5,199,0,0,2600,2601,5,199,0,
        0,2601,2604,5,199,0,0,2602,2603,5,176,0,0,2603,2605,5,192,0,0,2604,
        2602,1,0,0,0,2604,2605,1,0,0,0,2605,2606,1,0,0,0,2606,2607,3,202,
        101,0,2607,2608,5,192,0,0,2608,2609,3,202,101,0,2609,2635,1,0,0,
        0,2610,2611,5,177,0,0,2611,2612,5,200,0,0,2612,2613,5,200,0,0,2613,
        2614,3,202,101,0,2614,2615,3,202,101,0,2615,2635,1,0,0,0,2616,2617,
        5,179,0,0,2617,2618,5,199,0,0,2618,2619,5,199,0,0,2619,2620,3,202,
        101,0,2620,2621,3,202,101,0,2621,2622,3,202,101,0,2622,2623,3,202,
        101,0,2623,2635,1,0,0,0,2624,2625,5,180,0,0,2625,2626,5,199,0,0,
        2626,2627,3,202,101,0,2627,2628,3,202,101,0,2628,2629,3,202,101,
        0,2629,2630,3,202,101,0,2630,2635,1,0,0,0,2631,2632,7,12,0,0,2632,
        2635,5,199,0,0,2633,2635,5,182,0,0,2634,2579,1,0,0,0,2634,2591,1,
        0,0,0,2634,2597,1,0,0,0,2634,2610,1,0,0,0,2634,2616,1,0,0,0,2634,
        2624,1,0,0,0,2634,2631,1,0,0,0,2634,2633,1,0,0,0,2635,231,1,0,0,
        0,2636,2637,5,183,0,0,2637,2638,5,297,0,0,2638,2639,5,294,0,0,2639,
        2658,5,292,0,0,2640,2642,5,295,0,0,2641,2640,1,0,0,0,2642,2645,1,
        0,0,0,2643,2641,1,0,0,0,2643,2644,1,0,0,0,2644,2659,1,0,0,0,2645,
        2643,1,0,0,0,2646,2648,5,296,0,0,2647,2646,1,0,0,0,2648,2651,1,0,
        0,0,2649,2647,1,0,0,0,2649,2650,1,0,0,0,2650,2659,1,0,0,0,2651,2649,
        1,0,0,0,2652,2654,5,298,0,0,2653,2652,1,0,0,0,2654,2657,1,0,0,0,
        2655,2653,1,0,0,0,2655,2656,1,0,0,0,2656,2659,1,0,0,0,2657,2655,
        1,0,0,0,2658,2643,1,0,0,0,2658,2649,1,0,0,0,2658,2655,1,0,0,0,2659,
        2660,1,0,0,0,2660,2661,5,293,0,0,2661,2662,5,184,0,0,2662,2667,5,
        301,0,0,2663,2666,3,222,111,0,2664,2666,3,52,26,0,2665,2663,1,0,
        0,0,2665,2664,1,0,0,0,2666,2669,1,0,0,0,2667,2665,1,0,0,0,2667,2668,
        1,0,0,0,2668,2670,1,0,0,0,2669,2667,1,0,0,0,2670,2671,5,2,0,0,2671,
        2672,5,184,0,0,2672,2673,5,301,0,0,2673,233,1,0,0,0,2674,2675,5,
        183,0,0,2675,2676,5,297,0,0,2676,2677,5,294,0,0,2677,2696,5,292,
        0,0,2678,2680,5,295,0,0,2679,2678,1,0,0,0,2680,2683,1,0,0,0,2681,
        2679,1,0,0,0,2681,2682,1,0,0,0,2682,2697,1,0,0,0,2683,2681,1,0,0,
        0,2684,2686,5,296,0,0,2685,2684,1,0,0,0,2686,2689,1,0,0,0,2687,2685,
        1,0,0,0,2687,2688,1,0,0,0,2688,2697,1,0,0,0,2689,2687,1,0,0,0,2690,
        2692,5,298,0,0,2691,2690,1,0,0,0,2692,2695,1,0,0,0,2693,2691,1,0,
        0,0,2693,2694,1,0,0,0,2694,2697,1,0,0,0,2695,2693,1,0,0,0,2696,2681,
        1,0,0,0,2696,2687,1,0,0,0,2696,2693,1,0,0,0,2697,2698,1,0,0,0,2698,
        2699,5,293,0,0,2699,2700,5,184,0,0,2700,2705,5,301,0,0,2701,2704,
        3,222,111,0,2702,2704,3,60,30,0,2703,2701,1,0,0,0,2703,2702,1,0,
        0,0,2704,2707,1,0,0,0,2705,2703,1,0,0,0,2705,2706,1,0,0,0,2706,2708,
        1,0,0,0,2707,2705,1,0,0,0,2708,2709,5,2,0,0,2709,2710,5,184,0,0,
        2710,2711,5,301,0,0,2711,235,1,0,0,0,2712,2713,5,183,0,0,2713,2714,
        5,297,0,0,2714,2715,5,294,0,0,2715,2734,5,292,0,0,2716,2718,5,295,
        0,0,2717,2716,1,0,0,0,2718,2721,1,0,0,0,2719,2717,1,0,0,0,2719,2720,
        1,0,0,0,2720,2735,1,0,0,0,2721,2719,1,0,0,0,2722,2724,5,296,0,0,
        2723,2722,1,0,0,0,2724,2727,1,0,0,0,2725,2723,1,0,0,0,2725,2726,
        1,0,0,0,2726,2735,1,0,0,0,2727,2725,1,0,0,0,2728,2730,5,298,0,0,
        2729,2728,1,0,0,0,2730,2733,1,0,0,0,2731,2729,1,0,0,0,2731,2732,
        1,0,0,0,2732,2735,1,0,0,0,2733,2731,1,0,0,0,2734,2719,1,0,0,0,2734,
        2725,1,0,0,0,2734,2731,1,0,0,0,2735,2736,1,0,0,0,2736,2737,5,293,
        0,0,2737,2738,5,184,0,0,2738,2743,5,301,0,0,2739,2742,3,222,111,
        0,2740,2742,3,64,32,0,2741,2739,1,0,0,0,2741,2740,1,0,0,0,2742,2745,
        1,0,0,0,2743,2741,1,0,0,0,2743,2744,1,0,0,0,2744,2746,1,0,0,0,2745,
        2743,1,0,0,0,2746,2747,5,2,0,0,2747,2748,5,184,0,0,2748,2749,5,301,
        0,0,2749,237,1,0,0,0,2750,2751,5,183,0,0,2751,2752,5,297,0,0,2752,
        2753,5,294,0,0,2753,2772,5,292,0,0,2754,2756,5,295,0,0,2755,2754,
        1,0,0,0,2756,2759,1,0,0,0,2757,2755,1,0,0,0,2757,2758,1,0,0,0,2758,
        2773,1,0,0,0,2759,2757,1,0,0,0,2760,2762,5,296,0,0,2761,2760,1,0,
        0,0,2762,2765,1,0,0,0,2763,2761,1,0,0,0,2763,2764,1,0,0,0,2764,2773,
        1,0,0,0,2765,2763,1,0,0,0,2766,2768,5,298,0,0,2767,2766,1,0,0,0,
        2768,2771,1,0,0,0,2769,2767,1,0,0,0,2769,2770,1,0,0,0,2770,2773,
        1,0,0,0,2771,2769,1,0,0,0,2772,2757,1,0,0,0,2772,2763,1,0,0,0,2772,
        2769,1,0,0,0,2773,2774,1,0,0,0,2774,2775,5,293,0,0,2775,2776,5,184,
        0,0,2776,2781,5,301,0,0,2777,2780,3,222,111,0,2778,2780,3,94,47,
        0,2779,2777,1,0,0,0,2779,2778,1,0,0,0,2780,2783,1,0,0,0,2781,2779,
        1,0,0,0,2781,2782,1,0,0,0,2782,2784,1,0,0,0,2783,2781,1,0,0,0,2784,
        2785,5,2,0,0,2785,2786,5,184,0,0,2786,2787,5,301,0,0,2787,239,1,
        0,0,0,2788,2789,5,183,0,0,2789,2790,5,297,0,0,2790,2791,5,294,0,
        0,2791,2810,5,292,0,0,2792,2794,5,295,0,0,2793,2792,1,0,0,0,2794,
        2797,1,0,0,0,2795,2793,1,0,0,0,2795,2796,1,0,0,0,2796,2811,1,0,0,
        0,2797,2795,1,0,0,0,2798,2800,5,296,0,0,2799,2798,1,0,0,0,2800,2803,
        1,0,0,0,2801,2799,1,0,0,0,2801,2802,1,0,0,0,2802,2811,1,0,0,0,2803,
        2801,1,0,0,0,2804,2806,5,298,0,0,2805,2804,1,0,0,0,2806,2809,1,0,
        0,0,2807,2805,1,0,0,0,2807,2808,1,0,0,0,2808,2811,1,0,0,0,2809,2807,
        1,0,0,0,2810,2795,1,0,0,0,2810,2801,1,0,0,0,2810,2807,1,0,0,0,2811,
        2812,1,0,0,0,2812,2813,5,293,0,0,2813,2814,5,184,0,0,2814,2819,5,
        301,0,0,2815,2818,3,222,111,0,2816,2818,3,98,49,0,2817,2815,1,0,
        0,0,2817,2816,1,0,0,0,2818,2821,1,0,0,0,2819,2817,1,0,0,0,2819,2820,
        1,0,0,0,2820,2822,1,0,0,0,2821,2819,1,0,0,0,2822,2823,5,2,0,0,2823,
        2824,5,184,0,0,2824,2825,5,301,0,0,2825,241,1,0,0,0,2826,2827,5,
        183,0,0,2827,2828,5,297,0,0,2828,2829,5,294,0,0,2829,2848,5,292,
        0,0,2830,2832,5,295,0,0,2831,2830,1,0,0,0,2832,2835,1,0,0,0,2833,
        2831,1,0,0,0,2833,2834,1,0,0,0,2834,2849,1,0,0,0,2835,2833,1,0,0,
        0,2836,2838,5,296,0,0,2837,2836,1,0,0,0,2838,2841,1,0,0,0,2839,2837,
        1,0,0,0,2839,2840,1,0,0,0,2840,2849,1,0,0,0,2841,2839,1,0,0,0,2842,
        2844,5,298,0,0,2843,2842,1,0,0,0,2844,2847,1,0,0,0,2845,2843,1,0,
        0,0,2845,2846,1,0,0,0,2846,2849,1,0,0,0,2847,2845,1,0,0,0,2848,2833,
        1,0,0,0,2848,2839,1,0,0,0,2848,2845,1,0,0,0,2849,2850,1,0,0,0,2850,
        2851,5,293,0,0,2851,2852,5,184,0,0,2852,2857,5,301,0,0,2853,2856,
        3,222,111,0,2854,2856,3,132,66,0,2855,2853,1,0,0,0,2855,2854,1,0,
        0,0,2856,2859,1,0,0,0,2857,2855,1,0,0,0,2857,2858,1,0,0,0,2858,2860,
        1,0,0,0,2859,2857,1,0,0,0,2860,2861,5,2,0,0,2861,2862,5,184,0,0,
        2862,2863,5,301,0,0,2863,243,1,0,0,0,2864,2865,5,183,0,0,2865,2866,
        5,297,0,0,2866,2867,5,294,0,0,2867,2886,5,292,0,0,2868,2870,5,295,
        0,0,2869,2868,1,0,0,0,2870,2873,1,0,0,0,2871,2869,1,0,0,0,2871,2872,
        1,0,0,0,2872,2887,1,0,0,0,2873,2871,1,0,0,0,2874,2876,5,296,0,0,
        2875,2874,1,0,0,0,2876,2879,1,0,0,0,2877,2875,1,0,0,0,2877,2878,
        1,0,0,0,2878,2887,1,0,0,0,2879,2877,1,0,0,0,2880,2882,5,298,0,0,
        2881,2880,1,0,0,0,2882,2885,1,0,0,0,2883,2881,1,0,0,0,2883,2884,
        1,0,0,0,2884,2887,1,0,0,0,2885,2883,1,0,0,0,2886,2871,1,0,0,0,2886,
        2877,1,0,0,0,2886,2883,1,0,0,0,2887,2888,1,0,0,0,2888,2889,5,293,
        0,0,2889,2890,5,184,0,0,2890,2895,5,301,0,0,2891,2894,3,222,111,
        0,2892,2894,3,144,72,0,2893,2891,1,0,0,0,2893,2892,1,0,0,0,2894,
        2897,1,0,0,0,2895,2893,1,0,0,0,2895,2896,1,0,0,0,2896,2898,1,0,0,
        0,2897,2895,1,0,0,0,2898,2899,5,2,0,0,2899,2900,5,184,0,0,2900,2901,
        5,301,0,0,2901,245,1,0,0,0,2902,2903,5,183,0,0,2903,2904,5,297,0,
        0,2904,2905,5,294,0,0,2905,2924,5,292,0,0,2906,2908,5,295,0,0,2907,
        2906,1,0,0,0,2908,2911,1,0,0,0,2909,2907,1,0,0,0,2909,2910,1,0,0,
        0,2910,2925,1,0,0,0,2911,2909,1,0,0,0,2912,2914,5,296,0,0,2913,2912,
        1,0,0,0,2914,2917,1,0,0,0,2915,2913,1,0,0,0,2915,2916,1,0,0,0,2916,
        2925,1,0,0,0,2917,2915,1,0,0,0,2918,2920,5,298,0,0,2919,2918,1,0,
        0,0,2920,2923,1,0,0,0,2921,2919,1,0,0,0,2921,2922,1,0,0,0,2922,2925,
        1,0,0,0,2923,2921,1,0,0,0,2924,2909,1,0,0,0,2924,2915,1,0,0,0,2924,
        2921,1,0,0,0,2925,2926,1,0,0,0,2926,2927,5,293,0,0,2927,2928,5,184,
        0,0,2928,2933,5,301,0,0,2929,2932,3,222,111,0,2930,2932,3,158,79,
        0,2931,2929,1,0,0,0,2931,2930,1,0,0,0,2932,2935,1,0,0,0,2933,2931,
        1,0,0,0,2933,2934,1,0,0,0,2934,2936,1,0,0,0,2935,2933,1,0,0,0,2936,
        2937,5,2,0,0,2937,2938,5,184,0,0,2938,2939,5,301,0,0,2939,247,1,
        0,0,0,2940,2941,5,183,0,0,2941,2942,5,297,0,0,2942,2943,5,294,0,
        0,2943,2962,5,292,0,0,2944,2946,5,295,0,0,2945,2944,1,0,0,0,2946,
        2949,1,0,0,0,2947,2945,1,0,0,0,2947,2948,1,0,0,0,2948,2963,1,0,0,
        0,2949,2947,1,0,0,0,2950,2952,5,296,0,0,2951,2950,1,0,0,0,2952,2955,
        1,0,0,0,2953,2951,1,0,0,0,2953,2954,1,0,0,0,2954,2963,1,0,0,0,2955,
        2953,1,0,0,0,2956,2958,5,298,0,0,2957,2956,1,0,0,0,2958,2961,1,0,
        0,0,2959,2957,1,0,0,0,2959,2960,1,0,0,0,2960,2963,1,0,0,0,2961,2959,
        1,0,0,0,2962,2947,1,0,0,0,2962,2953,1,0,0,0,2962,2959,1,0,0,0,2963,
        2964,1,0,0,0,2964,2965,5,293,0,0,2965,2966,5,184,0,0,2966,2971,5,
        301,0,0,2967,2970,3,222,111,0,2968,2970,3,162,81,0,2969,2967,1,0,
        0,0,2969,2968,1,0,0,0,2970,2973,1,0,0,0,2971,2969,1,0,0,0,2971,2972,
        1,0,0,0,2972,2974,1,0,0,0,2973,2971,1,0,0,0,2974,2975,5,2,0,0,2975,
        2976,5,184,0,0,2976,2977,5,301,0,0,2977,249,1,0,0,0,2978,2979,5,
        183,0,0,2979,2980,5,297,0,0,2980,2981,5,294,0,0,2981,3000,5,292,
        0,0,2982,2984,5,295,0,0,2983,2982,1,0,0,0,2984,2987,1,0,0,0,2985,
        2983,1,0,0,0,2985,2986,1,0,0,0,2986,3001,1,0,0,0,2987,2985,1,0,0,
        0,2988,2990,5,296,0,0,2989,2988,1,0,0,0,2990,2993,1,0,0,0,2991,2989,
        1,0,0,0,2991,2992,1,0,0,0,2992,3001,1,0,0,0,2993,2991,1,0,0,0,2994,
        2996,5,298,0,0,2995,2994,1,0,0,0,2996,2999,1,0,0,0,2997,2995,1,0,
        0,0,2997,2998,1,0,0,0,2998,3001,1,0,0,0,2999,2997,1,0,0,0,3000,2985,
        1,0,0,0,3000,2991,1,0,0,0,3000,2997,1,0,0,0,3001,3002,1,0,0,0,3002,
        3003,5,293,0,0,3003,3004,5,184,0,0,3004,3009,5,301,0,0,3005,3008,
        3,222,111,0,3006,3008,3,178,89,0,3007,3005,1,0,0,0,3007,3006,1,0,
        0,0,3008,3011,1,0,0,0,3009,3007,1,0,0,0,3009,3010,1,0,0,0,3010,3012,
        1,0,0,0,3011,3009,1,0,0,0,3012,3013,5,2,0,0,3013,3014,5,184,0,0,
        3014,3015,5,301,0,0,3015,251,1,0,0,0,3016,3017,5,183,0,0,3017,3018,
        5,297,0,0,3018,3019,5,294,0,0,3019,3038,5,292,0,0,3020,3022,5,295,
        0,0,3021,3020,1,0,0,0,3022,3025,1,0,0,0,3023,3021,1,0,0,0,3023,3024,
        1,0,0,0,3024,3039,1,0,0,0,3025,3023,1,0,0,0,3026,3028,5,296,0,0,
        3027,3026,1,0,0,0,3028,3031,1,0,0,0,3029,3027,1,0,0,0,3029,3030,
        1,0,0,0,3030,3039,1,0,0,0,3031,3029,1,0,0,0,3032,3034,5,298,0,0,
        3033,3032,1,0,0,0,3034,3037,1,0,0,0,3035,3033,1,0,0,0,3035,3036,
        1,0,0,0,3036,3039,1,0,0,0,3037,3035,1,0,0,0,3038,3023,1,0,0,0,3038,
        3029,1,0,0,0,3038,3035,1,0,0,0,3039,3040,1,0,0,0,3040,3041,5,293,
        0,0,3041,3042,5,184,0,0,3042,3047,5,301,0,0,3043,3046,3,222,111,
        0,3044,3046,3,182,91,0,3045,3043,1,0,0,0,3045,3044,1,0,0,0,3046,
        3049,1,0,0,0,3047,3045,1,0,0,0,3047,3048,1,0,0,0,3048,3050,1,0,0,
        0,3049,3047,1,0,0,0,3050,3051,5,2,0,0,3051,3052,5,184,0,0,3052,3053,
        5,301,0,0,3053,253,1,0,0,0,3054,3055,5,183,0,0,3055,3056,5,297,0,
        0,3056,3057,5,294,0,0,3057,3076,5,292,0,0,3058,3060,5,295,0,0,3059,
        3058,1,0,0,0,3060,3063,1,0,0,0,3061,3059,1,0,0,0,3061,3062,1,0,0,
        0,3062,3077,1,0,0,0,3063,3061,1,0,0,0,3064,3066,5,296,0,0,3065,3064,
        1,0,0,0,3066,3069,1,0,0,0,3067,3065,1,0,0,0,3067,3068,1,0,0,0,3068,
        3077,1,0,0,0,3069,3067,1,0,0,0,3070,3072,5,298,0,0,3071,3070,1,0,
        0,0,3072,3075,1,0,0,0,3073,3071,1,0,0,0,3073,3074,1,0,0,0,3074,3077,
        1,0,0,0,3075,3073,1,0,0,0,3076,3061,1,0,0,0,3076,3067,1,0,0,0,3076,
        3073,1,0,0,0,3077,3078,1,0,0,0,3078,3079,5,293,0,0,3079,3080,5,184,
        0,0,3080,3085,5,301,0,0,3081,3084,3,222,111,0,3082,3084,3,84,42,
        0,3083,3081,1,0,0,0,3083,3082,1,0,0,0,3084,3087,1,0,0,0,3085,3083,
        1,0,0,0,3085,3086,1,0,0,0,3086,3088,1,0,0,0,3087,3085,1,0,0,0,3088,
        3089,5,2,0,0,3089,3090,5,184,0,0,3090,3091,5,301,0,0,3091,255,1,
        0,0,0,364,312,314,323,329,335,344,352,360,368,376,380,383,389,395,
        401,410,419,428,437,446,455,464,473,482,491,500,509,518,527,536,
        545,554,563,572,590,595,612,625,649,652,659,662,667,672,677,680,
        683,687,692,697,704,708,713,718,723,728,733,738,741,748,754,758,
        774,784,789,798,809,812,817,824,838,843,852,869,874,879,884,891,
        896,903,915,920,927,936,943,948,959,964,975,984,991,997,1004,1009,
        1012,1017,1022,1027,1031,1037,1041,1045,1048,1050,1054,1066,1074,
        1079,1088,1091,1099,1109,1120,1128,1132,1137,1148,1151,1154,1166,
        1173,1178,1190,1195,1210,1237,1247,1257,1260,1265,1270,1274,1286,
        1310,1318,1325,1336,1342,1348,1352,1363,1369,1375,1383,1386,1396,
        1402,1408,1413,1422,1425,1428,1432,1444,1451,1458,1464,1469,1479,
        1491,1496,1507,1518,1523,1532,1558,1567,1570,1589,1601,1606,1623,
        1628,1637,1649,1652,1657,1662,1678,1683,1692,1697,1711,1716,1725,
        1742,1755,1760,1771,1774,1782,1797,1803,1808,1814,1819,1825,1831,
        1837,1849,1852,1856,1863,1869,1880,1885,1894,1897,1914,1924,1927,
        1932,1943,1948,1964,1975,1980,1985,1990,1997,2009,2018,2023,2032,
        2040,2046,2051,2056,2063,2074,2079,2084,2089,2094,2099,2104,2109,
        2114,2119,2124,2129,2134,2137,2148,2157,2163,2167,2172,2177,2180,
        2191,2199,2214,2230,2233,2244,2249,2252,2260,2264,2275,2279,2283,
        2286,2299,2302,2309,2312,2319,2324,2327,2341,2349,2351,2367,2371,
        2373,2379,2394,2399,2404,2413,2477,2494,2534,2550,2554,2566,2574,
        2589,2604,2634,2643,2649,2655,2658,2665,2667,2681,2687,2693,2696,
        2703,2705,2719,2725,2731,2734,2741,2743,2757,2763,2769,2772,2779,
        2781,2795,2801,2807,2810,2817,2819,2833,2839,2845,2848,2855,2857,
        2871,2877,2883,2886,2893,2895,2909,2915,2921,2924,2931,2933,2947,
        2953,2959,2962,2969,2971,2985,2991,2997,3000,3007,3009,3023,3029,
        3035,3038,3045,3047,3061,3067,3073,3076,3083,3085
    ]

class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'SET'", "<INVALID>", "'NOE'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'BHIG'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'CUTOFF'", "'CUTON'", "'FROM'", "'TO'", 
                     "'PEAK'", "'SPECTRUM'", "'VOLUME'", "'PPM1'", "'PPM2'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'?'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'TYPE'", "<INVALID>", "<INVALID>", "'CV'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'XADC'", "<INVALID>", "'SIZE'", 
                     "'ZERO'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'RAMA'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'SORT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'DCSA'", "<INVALID>", "'PCSA'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'TAUC'", "<INVALID>", "'XPCS'", "'TOLL'", 
                     "'SAVE'", "'FMED'", "'ERRON'", "'ERROFF'", "'FON'", 
                     "'FOFF'", "'SON'", "'SOFF'", "'FRUN'", "<INVALID>", 
                     "<INVALID>", "'XCCR'", "'WEIP'", "'KDIR'", "'KLIN'", 
                     "'NSEG'", "'NMIN'", "'NMAX'", "'SEGM'", "'OHCUT'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'UPDFRQ'", 
                     "'PRNFRQ'", "'FREEMODE'", "<INVALID>", "<INVALID>", 
                     "'NCS'", "<INVALID>", "'SIGB'", "<INVALID>", "'ALL'", 
                     "<INVALID>", "'ATOM'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'ID'", "<INVALID>", 
                     "'NAME'", "<INVALID>", "'CUT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'STORE1'", "'STORE2'", "'STORE3'", "'STORE4'", "'STORE5'", 
                     "'STORE6'", "'STORE7'", "'STORE8'", "'STORE9'", "'TAG'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'SHOW'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'NIL'", "<INVALID>", "'UB'", 
                     "'MULT'", "<INVALID>", "<INVALID>", "<INVALID>", "'NONB'", 
                     "<INVALID>", "<INVALID>", "'FOR'", "'LOOP'", "'TAIL'", 
                     "'HEAD'", "'OR'", "'AND'", "'NOT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'HBDA'", "'HBDB'", "<INVALID>", 
                     "<INVALID>", "':'", "<INVALID>", "'<'", "'>'", "'<='", 
                     "'>='", "'#'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'+'", "'-'", "<INVALID>", "'/'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ACOS'", "'ASIN'", "'COS'", "'DECODE'", "'ENCODE'", 
                     "'EXP'", "'GAUSS'", "'HEAVY'", "'INT'", "'LOG10'", 
                     "'LOG'", "<INVALID>", "'MAXW'", "<INVALID>", "'MOD'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'SIN'", "'SQRT'", 
                     "'TAN'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'RMS'", "'SUM'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'IN'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Assign", "Asymptote", 
                      "Average", "Bhig", "Ceiling", "Classification", "CountViol", 
                      "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Cutoff", "Cuton", "From", 
                      "To", "Peak", "Spectrum", "Volume", "Ppm1", "Ppm2", 
                      "Restraints", "Dihedral", "Nassign", "Print_any", 
                      "Sanisotropy", "Coefficients", "ForceConstant", "Xdipolar", 
                      "Dipolar", "Type", "Sign", "VeAngle", "Cv", "Partition", 
                      "Tensor", "Anisotropy", "Planar", "Group", "Initialize", 
                      "Selection", "Weight", "Harmonic", "Exponent", "Normal", 
                      "Xadc", "Expectation", "Size", "Zero", "Coupling", 
                      "DegEnergy", "Carbon", "PhiStep", "PsiStep", "Rcoil", 
                      "Proton", "Observed", "Amides", "Nitrogens", "Oxygens", 
                      "RingAtoms", "AlphasAndAmides", "Error", "Ramachandran", 
                      "Gaussian", "Phase", "Quartic", "Shape", "Sort", "Dimensions", 
                      "Collapse", "Danisotropy", "Orient", "Height", "MaxGaussians", 
                      "NewGaussian", "Dcsa", "Sigma", "Pcsa", "OneBond", 
                      "AngleDb", "DerivFlag", "PMagnetic", "Kconst", "Omega", 
                      "Tauc", "Debug", "Xpcs", "Tolerance", "Save", "Fmed", 
                      "ErrOn", "ErrOff", "Fon", "Foff", "Son", "Soff", "Frun", 
                      "Xrdcoupling", "Xangle", "Xccr", "Weip", "Kdir", "Klin", 
                      "Nseg", "Nmin", "Nmax", "Segm", "Ohcut", "Coh1cut", 
                      "Coh2cut", "Ohncut", "Updfrq", "Prnfrq", "Freemode", 
                      "Donor", "Acceptor", "Ncs", "Equivalence", "Sigb", 
                      "Flags", "All", "Around", "Atom", "Attribute", "BondedTo", 
                      "ByGroup", "ByRes", "Chemical", "Hydrogen", "Id", 
                      "Known", "Name", "Point", "Cut", "Previous", "Pseudo", 
                      "Residue", "Resname", "Saround", "SegIdentifier", 
                      "Store1", "Store2", "Store3", "Store4", "Store5", 
                      "Store6", "Store7", "Store8", "Store9", "Tag", "Vector", 
                      "Do_Lp", "Identity_Lp", "Show", "Evaluate_Lp", "Patch", 
                      "Reference", "Nil", "Parameter", "UB", "Mult", "HBonded", 
                      "Improper", "NBFix", "NonB", "VDWOff", "Verbose", 
                      "For", "Loop", "Tail", "Head", "Or_op", "And_op", 
                      "Not_op", "Comma", "Complex", "Integer", "Logical", 
                      "Real", "Double_quote_string", "SHARP_COMMENT", "EXCLM_COMMENT", 
                      "SMCLN_COMMENT", "Simple_name", "Simple_names", "Integers", 
                      "Hbda", "Hbdb", "L_paren", "R_paren", "Colon", "Equ_op", 
                      "Lt_op", "Gt_op", "Leq_op", "Geq_op", "Neq_op", "Symbol_name", 
                      "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT", 
                      "SET_VARIABLE", "Abs", "Attr_properties", "Comparison_ops", 
                      "SPACE_AP", "Averaging_methods", "Simple_name_AM", 
                      "SPACE_AM", "Equ_op_PT", "Potential_types", "Simple_name_PT", 
                      "SPACE_PT", "Rdc_dist_fix_types", "Rdc_or_Diff_anis_types", 
                      "Csa_types", "SPACE_TY", "Gauss_or_Quart", "SPACE_SH", 
                      "Exclude", "Include", "End_FL", "Class_name", "Any_class", 
                      "SPACE_FL", "R_paren_VE", "Equ_op_VE", "Add_op_VE", 
                      "Sub_op_VE", "Mul_op_VE", "Div_op_VE", "Exp_op_VE", 
                      "Comma_VE", "Integer_VE", "Real_VE", "Atom_properties_VE", 
                      "Abs_VE", "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", 
                      "Encode_VE", "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", 
                      "Log10_VE", "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", 
                      "Mod_VE", "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", 
                      "Sqrt_VE", "Tan_VE", "Symbol_name_VE", "Simple_name_VE", 
                      "Double_quote_string_VE", "SPACE_VE", "L_paren_VF", 
                      "SPACE_VF", "L_paren_VS", "R_paren_VS", "Average_VS", 
                      "Element_VS", "Max_VS", "Min_VS", "Norm_VS", "Rms_VS", 
                      "Sum_VS", "Atom_properties_VS", "SPACE_VS", "L_paren_CF", 
                      "R_paren_CF", "In_CF", "Integer_CF", "Real_CF", "Symbol_name_CF", 
                      "Simple_name_CF", "SPACE_CF", "COMMENT_CF", "Simple_name_LL", 
                      "SPACE_LL" ]

    RULE_xplor_nih_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_rdc_restraint = 3
    RULE_planar_restraint = 4
    RULE_harmonic_restraint = 5
    RULE_antidistance_restraint = 6
    RULE_coupling_restraint = 7
    RULE_carbon_shift_restraint = 8
    RULE_proton_shift_restraint = 9
    RULE_dihedral_angle_db_restraint = 10
    RULE_radius_of_gyration_restraint = 11
    RULE_diffusion_anisotropy_restraint = 12
    RULE_orientation_db_restraint = 13
    RULE_csa_restraint = 14
    RULE_pcsa_restraint = 15
    RULE_one_bond_coupling_restraint = 16
    RULE_angle_db_restraint = 17
    RULE_pre_restraint = 18
    RULE_pcs_restraint = 19
    RULE_prdc_restraint = 20
    RULE_porientation_restraint = 21
    RULE_pccr_restraint = 22
    RULE_hbond_restraint = 23
    RULE_hbond_db_restraint = 24
    RULE_noe_statement = 25
    RULE_noe_assign = 26
    RULE_predict_statement = 27
    RULE_noe_annotation = 28
    RULE_dihedral_statement = 29
    RULE_dihedral_assign = 30
    RULE_sani_statement = 31
    RULE_sani_assign = 32
    RULE_xdip_statement = 33
    RULE_xdip_assign = 34
    RULE_vean_statement = 35
    RULE_vean_assign = 36
    RULE_tenso_statement = 37
    RULE_tenso_assign = 38
    RULE_anis_statement = 39
    RULE_anis_assign = 40
    RULE_planar_statement = 41
    RULE_planar_group = 42
    RULE_group_statement = 43
    RULE_harmonic_statement = 44
    RULE_harmonic_assign = 45
    RULE_antidistance_statement = 46
    RULE_xadc_assign = 47
    RULE_coupling_statement = 48
    RULE_coup_assign = 49
    RULE_carbon_shift_statement = 50
    RULE_carbon_shift_assign = 51
    RULE_carbon_shift_rcoil = 52
    RULE_proton_shift_statement = 53
    RULE_observed = 54
    RULE_proton_shift_rcoil = 55
    RULE_proton_shift_anisotropy = 56
    RULE_proton_shift_amides = 57
    RULE_proton_shift_carbons = 58
    RULE_proton_shift_nitrogens = 59
    RULE_proton_shift_oxygens = 60
    RULE_proton_shift_ring_atoms = 61
    RULE_proton_shift_alphas_and_amides = 62
    RULE_ramachandran_statement = 63
    RULE_rama_assign = 64
    RULE_collapse_statement = 65
    RULE_coll_assign = 66
    RULE_diffusion_statement = 67
    RULE_dani_assign = 68
    RULE_orientation_statement = 69
    RULE_orie_assign = 70
    RULE_csa_statement = 71
    RULE_csa_assign = 72
    RULE_pcsa_statement = 73
    RULE_one_bond_coupling_statement = 74
    RULE_one_bond_assign = 75
    RULE_angle_db_statement = 76
    RULE_angle_db_assign = 77
    RULE_pre_statement = 78
    RULE_pre_assign = 79
    RULE_pcs_statement = 80
    RULE_pcs_assign = 81
    RULE_prdc_statement = 82
    RULE_prdc_assign = 83
    RULE_porientation_statement = 84
    RULE_porientation_assign = 85
    RULE_pccr_statement = 86
    RULE_pccr_assign = 87
    RULE_hbond_statement = 88
    RULE_hbond_assign = 89
    RULE_hbond_db_statement = 90
    RULE_hbond_db_assign = 91
    RULE_ncs_restraint = 92
    RULE_ncs_statement = 93
    RULE_ncs_group_statement = 94
    RULE_selection = 95
    RULE_selection_expression = 96
    RULE_term = 97
    RULE_factor = 98
    RULE_number = 99
    RULE_number_f = 100
    RULE_number_s = 101
    RULE_number_a = 102
    RULE_flag_statement = 103
    RULE_vector_statement = 104
    RULE_vector_mode = 105
    RULE_vector_expression = 106
    RULE_vector_operation = 107
    RULE_vflc = 108
    RULE_vector_func_call = 109
    RULE_vector_show_property = 110
    RULE_evaluate_statement = 111
    RULE_evaluate_operation = 112
    RULE_patch_statement = 113
    RULE_parameter_setting = 114
    RULE_parameter_statement = 115
    RULE_noe_assign_loop = 116
    RULE_dihedral_assign_loop = 117
    RULE_sani_assign_loop = 118
    RULE_xadc_assign_loop = 119
    RULE_coup_assign_loop = 120
    RULE_coll_assign_loop = 121
    RULE_csa_assign_loop = 122
    RULE_pre_assign_loop = 123
    RULE_pcs_assign_loop = 124
    RULE_hbond_assign_loop = 125
    RULE_hbond_db_assign_loop = 126
    RULE_planar_group_loop = 127

    ruleNames =  [ "xplor_nih_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "harmonic_restraint", 
                   "antidistance_restraint", "coupling_restraint", "carbon_shift_restraint", 
                   "proton_shift_restraint", "dihedral_angle_db_restraint", 
                   "radius_of_gyration_restraint", "diffusion_anisotropy_restraint", 
                   "orientation_db_restraint", "csa_restraint", "pcsa_restraint", 
                   "one_bond_coupling_restraint", "angle_db_restraint", 
                   "pre_restraint", "pcs_restraint", "prdc_restraint", "porientation_restraint", 
                   "pccr_restraint", "hbond_restraint", "hbond_db_restraint", 
                   "noe_statement", "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "sani_statement", 
                   "sani_assign", "xdip_statement", "xdip_assign", "vean_statement", 
                   "vean_assign", "tenso_statement", "tenso_assign", "anis_statement", 
                   "anis_assign", "planar_statement", "planar_group", "group_statement", 
                   "harmonic_statement", "harmonic_assign", "antidistance_statement", 
                   "xadc_assign", "coupling_statement", "coup_assign", "carbon_shift_statement", 
                   "carbon_shift_assign", "carbon_shift_rcoil", "proton_shift_statement", 
                   "observed", "proton_shift_rcoil", "proton_shift_anisotropy", 
                   "proton_shift_amides", "proton_shift_carbons", "proton_shift_nitrogens", 
                   "proton_shift_oxygens", "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "coll_assign", "diffusion_statement", "dani_assign", 
                   "orientation_statement", "orie_assign", "csa_statement", 
                   "csa_assign", "pcsa_statement", "one_bond_coupling_statement", 
                   "one_bond_assign", "angle_db_statement", "angle_db_assign", 
                   "pre_statement", "pre_assign", "pcs_statement", "pcs_assign", 
                   "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "hbond_db_statement", 
                   "hbond_db_assign", "ncs_restraint", "ncs_statement", 
                   "ncs_group_statement", "selection", "selection_expression", 
                   "term", "factor", "number", "number_f", "number_s", "number_a", 
                   "flag_statement", "vector_statement", "vector_mode", 
                   "vector_expression", "vector_operation", "vflc", "vector_func_call", 
                   "vector_show_property", "evaluate_statement", "evaluate_operation", 
                   "patch_statement", "parameter_setting", "parameter_statement", 
                   "noe_assign_loop", "dihedral_assign_loop", "sani_assign_loop", 
                   "xadc_assign_loop", "coup_assign_loop", "coll_assign_loop", 
                   "csa_assign_loop", "pre_assign_loop", "pcs_assign_loop", 
                   "hbond_assign_loop", "hbond_db_assign_loop", "planar_group_loop" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Assign=4
    Asymptote=5
    Average=6
    Bhig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Distribute=11
    Monomers=12
    Ncount=13
    Nrestraints=14
    Potential=15
    Predict=16
    Print=17
    Threshold=18
    Reset=19
    Rswitch=20
    Scale=21
    SoExponent=22
    SqConstant=23
    SqExponent=24
    SqOffset=25
    Temperature=26
    Cutoff=27
    Cuton=28
    From=29
    To=30
    Peak=31
    Spectrum=32
    Volume=33
    Ppm1=34
    Ppm2=35
    Restraints=36
    Dihedral=37
    Nassign=38
    Print_any=39
    Sanisotropy=40
    Coefficients=41
    ForceConstant=42
    Xdipolar=43
    Dipolar=44
    Type=45
    Sign=46
    VeAngle=47
    Cv=48
    Partition=49
    Tensor=50
    Anisotropy=51
    Planar=52
    Group=53
    Initialize=54
    Selection=55
    Weight=56
    Harmonic=57
    Exponent=58
    Normal=59
    Xadc=60
    Expectation=61
    Size=62
    Zero=63
    Coupling=64
    DegEnergy=65
    Carbon=66
    PhiStep=67
    PsiStep=68
    Rcoil=69
    Proton=70
    Observed=71
    Amides=72
    Nitrogens=73
    Oxygens=74
    RingAtoms=75
    AlphasAndAmides=76
    Error=77
    Ramachandran=78
    Gaussian=79
    Phase=80
    Quartic=81
    Shape=82
    Sort=83
    Dimensions=84
    Collapse=85
    Danisotropy=86
    Orient=87
    Height=88
    MaxGaussians=89
    NewGaussian=90
    Dcsa=91
    Sigma=92
    Pcsa=93
    OneBond=94
    AngleDb=95
    DerivFlag=96
    PMagnetic=97
    Kconst=98
    Omega=99
    Tauc=100
    Debug=101
    Xpcs=102
    Tolerance=103
    Save=104
    Fmed=105
    ErrOn=106
    ErrOff=107
    Fon=108
    Foff=109
    Son=110
    Soff=111
    Frun=112
    Xrdcoupling=113
    Xangle=114
    Xccr=115
    Weip=116
    Kdir=117
    Klin=118
    Nseg=119
    Nmin=120
    Nmax=121
    Segm=122
    Ohcut=123
    Coh1cut=124
    Coh2cut=125
    Ohncut=126
    Updfrq=127
    Prnfrq=128
    Freemode=129
    Donor=130
    Acceptor=131
    Ncs=132
    Equivalence=133
    Sigb=134
    Flags=135
    All=136
    Around=137
    Atom=138
    Attribute=139
    BondedTo=140
    ByGroup=141
    ByRes=142
    Chemical=143
    Hydrogen=144
    Id=145
    Known=146
    Name=147
    Point=148
    Cut=149
    Previous=150
    Pseudo=151
    Residue=152
    Resname=153
    Saround=154
    SegIdentifier=155
    Store1=156
    Store2=157
    Store3=158
    Store4=159
    Store5=160
    Store6=161
    Store7=162
    Store8=163
    Store9=164
    Tag=165
    Vector=166
    Do_Lp=167
    Identity_Lp=168
    Show=169
    Evaluate_Lp=170
    Patch=171
    Reference=172
    Nil=173
    Parameter=174
    UB=175
    Mult=176
    HBonded=177
    Improper=178
    NBFix=179
    NonB=180
    VDWOff=181
    Verbose=182
    For=183
    Loop=184
    Tail=185
    Head=186
    Or_op=187
    And_op=188
    Not_op=189
    Comma=190
    Complex=191
    Integer=192
    Logical=193
    Real=194
    Double_quote_string=195
    SHARP_COMMENT=196
    EXCLM_COMMENT=197
    SMCLN_COMMENT=198
    Simple_name=199
    Simple_names=200
    Integers=201
    Hbda=202
    Hbdb=203
    L_paren=204
    R_paren=205
    Colon=206
    Equ_op=207
    Lt_op=208
    Gt_op=209
    Leq_op=210
    Geq_op=211
    Neq_op=212
    Symbol_name=213
    SPACE=214
    COMMENT=215
    SECTION_COMMENT=216
    LINE_COMMENT=217
    SET_VARIABLE=218
    Abs=219
    Attr_properties=220
    Comparison_ops=221
    SPACE_AP=222
    Averaging_methods=223
    Simple_name_AM=224
    SPACE_AM=225
    Equ_op_PT=226
    Potential_types=227
    Simple_name_PT=228
    SPACE_PT=229
    Rdc_dist_fix_types=230
    Rdc_or_Diff_anis_types=231
    Csa_types=232
    SPACE_TY=233
    Gauss_or_Quart=234
    SPACE_SH=235
    Exclude=236
    Include=237
    End_FL=238
    Class_name=239
    Any_class=240
    SPACE_FL=241
    R_paren_VE=242
    Equ_op_VE=243
    Add_op_VE=244
    Sub_op_VE=245
    Mul_op_VE=246
    Div_op_VE=247
    Exp_op_VE=248
    Comma_VE=249
    Integer_VE=250
    Real_VE=251
    Atom_properties_VE=252
    Abs_VE=253
    Acos_VE=254
    Asin_VE=255
    Cos_VE=256
    Decode_VE=257
    Encode_VE=258
    Exp_VE=259
    Gauss_VE=260
    Heavy_VE=261
    Int_VE=262
    Log10_VE=263
    Log_VE=264
    Max_VE=265
    Maxw_VE=266
    Min_VE=267
    Mod_VE=268
    Norm_VE=269
    Random_VE=270
    Sign_VE=271
    Sin_VE=272
    Sqrt_VE=273
    Tan_VE=274
    Symbol_name_VE=275
    Simple_name_VE=276
    Double_quote_string_VE=277
    SPACE_VE=278
    L_paren_VF=279
    SPACE_VF=280
    L_paren_VS=281
    R_paren_VS=282
    Average_VS=283
    Element_VS=284
    Max_VS=285
    Min_VS=286
    Norm_VS=287
    Rms_VS=288
    Sum_VS=289
    Atom_properties_VS=290
    SPACE_VS=291
    L_paren_CF=292
    R_paren_CF=293
    In_CF=294
    Integer_CF=295
    Real_CF=296
    Symbol_name_CF=297
    Simple_name_CF=298
    SPACE_CF=299
    COMMENT_CF=300
    Simple_name_LL=301
    SPACE_LL=302

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.10.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def harmonic_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def hbond_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_restraintContext,i)


        def ncs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ncs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ncs_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,i)


        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def patch_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Patch_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Patch_statementContext,i)


        def parameter_setting(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Parameter_settingContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Parameter_settingContext,i)


        def noe_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assign_loopContext,i)


        def dihedral_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assign_loopContext,i)


        def sani_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assign_loopContext,i)


        def hbond_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assign_loopContext,i)


        def hbond_db_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assign_loopContext,i)


        def coup_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assign_loopContext,i)


        def xadc_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assign_loopContext,i)


        def coll_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assign_loopContext,i)


        def csa_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assign_loopContext,i)


        def pre_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assign_loopContext,i)


        def pcs_assign_loop(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assign_loopContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assign_loopContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def harmonic_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_assignContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.ObservedContext,i)


        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Noe) | (1 << XplorMRParser.Assign) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Restraints) | (1 << XplorMRParser.Dihedral) | (1 << XplorMRParser.Print_any) | (1 << XplorMRParser.Sanisotropy) | (1 << XplorMRParser.Xdipolar) | (1 << XplorMRParser.Dipolar) | (1 << XplorMRParser.VeAngle) | (1 << XplorMRParser.Tensor) | (1 << XplorMRParser.Anisotropy) | (1 << XplorMRParser.Planar) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize) | (1 << XplorMRParser.Harmonic) | (1 << XplorMRParser.Xadc))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (XplorMRParser.Coupling - 64)) | (1 << (XplorMRParser.Carbon - 64)) | (1 << (XplorMRParser.Proton - 64)) | (1 << (XplorMRParser.Observed - 64)) | (1 << (XplorMRParser.Ramachandran - 64)) | (1 << (XplorMRParser.Collapse - 64)) | (1 << (XplorMRParser.Danisotropy - 64)) | (1 << (XplorMRParser.Orient - 64)) | (1 << (XplorMRParser.Dcsa - 64)) | (1 << (XplorMRParser.Pcsa - 64)) | (1 << (XplorMRParser.OneBond - 64)) | (1 << (XplorMRParser.AngleDb - 64)) | (1 << (XplorMRParser.PMagnetic - 64)) | (1 << (XplorMRParser.Xpcs - 64)) | (1 << (XplorMRParser.Xrdcoupling - 64)) | (1 << (XplorMRParser.Xangle - 64)) | (1 << (XplorMRParser.Xccr - 64)))) != 0) or ((((_la - 132)) & ~0x3f) == 0 and ((1 << (_la - 132)) & ((1 << (XplorMRParser.Ncs - 132)) | (1 << (XplorMRParser.Flags - 132)) | (1 << (XplorMRParser.BondedTo - 132)) | (1 << (XplorMRParser.Vector - 132)) | (1 << (XplorMRParser.Evaluate_Lp - 132)) | (1 << (XplorMRParser.Patch - 132)) | (1 << (XplorMRParser.Parameter - 132)) | (1 << (XplorMRParser.HBonded - 132)) | (1 << (XplorMRParser.Improper - 132)) | (1 << (XplorMRParser.NBFix - 132)) | (1 << (XplorMRParser.NonB - 132)) | (1 << (XplorMRParser.VDWOff - 132)) | (1 << (XplorMRParser.Verbose - 132)) | (1 << (XplorMRParser.For - 132)))) != 0) or _la==XplorMRParser.Hbda or _la==XplorMRParser.Hbdb:
                self.state = 312
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 256
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 257
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 258
                    self.rdc_restraint()
                    pass

                elif la_ == 4:
                    self.state = 259
                    self.planar_restraint()
                    pass

                elif la_ == 5:
                    self.state = 260
                    self.harmonic_restraint()
                    pass

                elif la_ == 6:
                    self.state = 261
                    self.antidistance_restraint()
                    pass

                elif la_ == 7:
                    self.state = 262
                    self.coupling_restraint()
                    pass

                elif la_ == 8:
                    self.state = 263
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 264
                    self.proton_shift_restraint()
                    pass

                elif la_ == 10:
                    self.state = 265
                    self.dihedral_angle_db_restraint()
                    pass

                elif la_ == 11:
                    self.state = 266
                    self.radius_of_gyration_restraint()
                    pass

                elif la_ == 12:
                    self.state = 267
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 13:
                    self.state = 268
                    self.orientation_db_restraint()
                    pass

                elif la_ == 14:
                    self.state = 269
                    self.csa_restraint()
                    pass

                elif la_ == 15:
                    self.state = 270
                    self.pcsa_restraint()
                    pass

                elif la_ == 16:
                    self.state = 271
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 17:
                    self.state = 272
                    self.angle_db_restraint()
                    pass

                elif la_ == 18:
                    self.state = 273
                    self.pre_restraint()
                    pass

                elif la_ == 19:
                    self.state = 274
                    self.pcs_restraint()
                    pass

                elif la_ == 20:
                    self.state = 275
                    self.prdc_restraint()
                    pass

                elif la_ == 21:
                    self.state = 276
                    self.porientation_restraint()
                    pass

                elif la_ == 22:
                    self.state = 277
                    self.pccr_restraint()
                    pass

                elif la_ == 23:
                    self.state = 278
                    self.hbond_restraint()
                    pass

                elif la_ == 24:
                    self.state = 279
                    self.hbond_db_restraint()
                    pass

                elif la_ == 25:
                    self.state = 280
                    self.ncs_restraint()
                    pass

                elif la_ == 26:
                    self.state = 281
                    self.flag_statement()
                    pass

                elif la_ == 27:
                    self.state = 282
                    self.vector_statement()
                    pass

                elif la_ == 28:
                    self.state = 283
                    self.evaluate_statement()
                    pass

                elif la_ == 29:
                    self.state = 284
                    self.patch_statement()
                    pass

                elif la_ == 30:
                    self.state = 285
                    self.parameter_setting()
                    pass

                elif la_ == 31:
                    self.state = 286
                    self.noe_assign_loop()
                    pass

                elif la_ == 32:
                    self.state = 287
                    self.dihedral_assign_loop()
                    pass

                elif la_ == 33:
                    self.state = 288
                    self.sani_assign_loop()
                    pass

                elif la_ == 34:
                    self.state = 289
                    self.hbond_assign_loop()
                    pass

                elif la_ == 35:
                    self.state = 290
                    self.hbond_db_assign_loop()
                    pass

                elif la_ == 36:
                    self.state = 291
                    self.coup_assign_loop()
                    pass

                elif la_ == 37:
                    self.state = 292
                    self.xadc_assign_loop()
                    pass

                elif la_ == 38:
                    self.state = 293
                    self.coll_assign_loop()
                    pass

                elif la_ == 39:
                    self.state = 294
                    self.csa_assign_loop()
                    pass

                elif la_ == 40:
                    self.state = 295
                    self.pre_assign_loop()
                    pass

                elif la_ == 41:
                    self.state = 296
                    self.pcs_assign_loop()
                    pass

                elif la_ == 42:
                    self.state = 297
                    self.noe_assign()
                    pass

                elif la_ == 43:
                    self.state = 298
                    self.dihedral_assign()
                    pass

                elif la_ == 44:
                    self.state = 299
                    self.sani_assign()
                    pass

                elif la_ == 45:
                    self.state = 300
                    self.planar_statement()
                    pass

                elif la_ == 46:
                    self.state = 301
                    self.harmonic_assign()
                    pass

                elif la_ == 47:
                    self.state = 302
                    self.hbond_assign()
                    pass

                elif la_ == 48:
                    self.state = 303
                    self.hbond_db_assign()
                    pass

                elif la_ == 49:
                    self.state = 304
                    self.coup_assign()
                    pass

                elif la_ == 50:
                    self.state = 305
                    self.xadc_assign()
                    pass

                elif la_ == 51:
                    self.state = 306
                    self.coll_assign()
                    pass

                elif la_ == 52:
                    self.state = 307
                    self.csa_assign()
                    pass

                elif la_ == 53:
                    self.state = 308
                    self.pre_assign()
                    pass

                elif la_ == 54:
                    self.state = 309
                    self.pcs_assign()
                    pass

                elif la_ == 55:
                    self.state = 310
                    self.observed()
                    pass

                elif la_ == 56:
                    self.state = 311
                    self.parameter_statement()
                    pass


                self.state = 316
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 317
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 319
            self.match(XplorMRParser.Noe)
            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Asymptote) | (1 << XplorMRParser.Average) | (1 << XplorMRParser.Bhig) | (1 << XplorMRParser.Ceiling) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.CountViol) | (1 << XplorMRParser.Distribute) | (1 << XplorMRParser.Monomers) | (1 << XplorMRParser.Ncount) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Predict) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Rswitch) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.SoExponent) | (1 << XplorMRParser.SqConstant) | (1 << XplorMRParser.SqExponent) | (1 << XplorMRParser.SqOffset) | (1 << XplorMRParser.Temperature))) != 0) or _la==XplorMRParser.For:
                self.state = 320
                self.noe_statement()
                self.state = 325
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 326
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 329
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 328
                self.match(XplorMRParser.Restraints)


            self.state = 331
            self.match(XplorMRParser.Dihedral)
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Nassign) | (1 << XplorMRParser.Print_any))) != 0) or _la==XplorMRParser.Vector or _la==XplorMRParser.For:
                self.state = 332
                self.dihedral_statement()
                self.state = 337
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 338
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,i)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def xdip_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,i)


        def VeAngle(self):
            return self.getToken(XplorMRParser.VeAngle, 0)

        def vean_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,i)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tenso_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tenso_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tenso_statementContext,i)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 380
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Sanisotropy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 340
                self.match(XplorMRParser.Sanisotropy)
                self.state = 344
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.For:
                    self.state = 341
                    self.sani_statement()
                    self.state = 346
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 347
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Xdipolar, XplorMRParser.Dipolar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 348
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Xdipolar or _la==XplorMRParser.Dipolar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Average) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type) | (1 << XplorMRParser.Sign))) != 0):
                    self.state = 349
                    self.xdip_statement()
                    self.state = 354
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 355
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.VeAngle]:
                self.enterOuterAlt(localctx, 3)
                self.state = 356
                self.match(XplorMRParser.VeAngle)
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition))) != 0):
                    self.state = 357
                    self.vean_statement()
                    self.state = 362
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 363
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Tensor]:
                self.enterOuterAlt(localctx, 4)
                self.state = 364
                self.match(XplorMRParser.Tensor)
                self.state = 368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients))) != 0):
                    self.state = 365
                    self.tenso_statement()
                    self.state = 370
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 371
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 372
                self.match(XplorMRParser.Anisotropy)
                self.state = 376
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                    self.state = 373
                    self.anis_statement()
                    self.state = 378
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 379
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_planar_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 383
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 382
                self.match(XplorMRParser.Restraints)


            self.state = 385
            self.match(XplorMRParser.Planar)
            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Print_any) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize))) != 0) or _la==XplorMRParser.Vector or _la==XplorMRParser.For:
                self.state = 386
                self.planar_statement()
                self.state = 391
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 392
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Harmonic(self):
            return self.getToken(XplorMRParser.Harmonic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def harmonic_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Harmonic_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Harmonic_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_restraint" ):
                listener.enterHarmonic_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_restraint" ):
                listener.exitHarmonic_restraint(self)




    def harmonic_restraint(self):

        localctx = XplorMRParser.Harmonic_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_harmonic_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 394
                self.match(XplorMRParser.Restraints)


            self.state = 397
            self.match(XplorMRParser.Harmonic)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Exponent or _la==XplorMRParser.Normal or _la==XplorMRParser.Vector:
                self.state = 398
                self.harmonic_statement()
                self.state = 403
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 404
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def antidistance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_antidistance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 406
            self.match(XplorMRParser.Xadc)
            self.state = 410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.For:
                self.state = 407
                self.antidistance_statement()
                self.state = 412
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 413
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 415
            self.match(XplorMRParser.Coupling)
            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (XplorMRParser.Assign - 4)) | (1 << (XplorMRParser.Classification - 4)) | (1 << (XplorMRParser.Nrestraints - 4)) | (1 << (XplorMRParser.Potential - 4)) | (1 << (XplorMRParser.Print - 4)) | (1 << (XplorMRParser.Reset - 4)) | (1 << (XplorMRParser.Coefficients - 4)) | (1 << (XplorMRParser.ForceConstant - 4)) | (1 << (XplorMRParser.Cv - 4)) | (1 << (XplorMRParser.Partition - 4)) | (1 << (XplorMRParser.DegEnergy - 4)))) != 0) or _la==XplorMRParser.For:
                self.state = 416
                self.coupling_statement()
                self.state = 421
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 422
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 424
            self.match(XplorMRParser.Carbon)
            self.state = 428
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (XplorMRParser.PhiStep - 67)) | (1 << (XplorMRParser.PsiStep - 67)) | (1 << (XplorMRParser.Rcoil - 67)))) != 0):
                self.state = 425
                self.carbon_shift_statement()
                self.state = 430
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 431
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 433
            self.match(XplorMRParser.Proton)
            self.state = 437
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Classification) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Anisotropy))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (XplorMRParser.DegEnergy - 65)) | (1 << (XplorMRParser.Carbon - 65)) | (1 << (XplorMRParser.Rcoil - 65)) | (1 << (XplorMRParser.Observed - 65)) | (1 << (XplorMRParser.Amides - 65)) | (1 << (XplorMRParser.Nitrogens - 65)) | (1 << (XplorMRParser.Oxygens - 65)) | (1 << (XplorMRParser.RingAtoms - 65)) | (1 << (XplorMRParser.AlphasAndAmides - 65)) | (1 << (XplorMRParser.Error - 65)))) != 0):
                self.state = 434
                self.proton_shift_statement()
                self.state = 439
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 440
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ramachandran_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ramachandran_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_dihedral_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 442
            self.match(XplorMRParser.Ramachandran)
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (XplorMRParser.Gaussian - 79)) | (1 << (XplorMRParser.Phase - 79)) | (1 << (XplorMRParser.Quartic - 79)) | (1 << (XplorMRParser.Shape - 79)) | (1 << (XplorMRParser.Sort - 79)))) != 0):
                self.state = 443
                self.ramachandran_statement()
                self.state = 448
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 449
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def collapse_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Collapse_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_radius_of_gyration_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(XplorMRParser.Collapse)
            self.state = 455
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale))) != 0) or _la==XplorMRParser.For:
                self.state = 452
                self.collapse_statement()
                self.state = 457
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 458
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 460
            self.match(XplorMRParser.Danisotropy)
            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                self.state = 461
                self.diffusion_statement()
                self.state = 466
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 467
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def orientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_orientation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 469
            self.match(XplorMRParser.Orient)
            self.state = 473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & ((1 << (XplorMRParser.Gaussian - 79)) | (1 << (XplorMRParser.Quartic - 79)) | (1 << (XplorMRParser.Height - 79)) | (1 << (XplorMRParser.MaxGaussians - 79)) | (1 << (XplorMRParser.NewGaussian - 79)))) != 0) or _la==XplorMRParser.Residue:
                self.state = 470
                self.orientation_statement()
                self.state = 475
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 476
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def csa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_csa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 478
            self.match(XplorMRParser.Dcsa)
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0) or _la==XplorMRParser.Sigma or _la==XplorMRParser.For:
                self.state = 479
                self.csa_statement()
                self.state = 484
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 485
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcsa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_pcsa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 487
            self.match(XplorMRParser.Pcsa)
            self.state = 491
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 488
                self.pcsa_statement()
                self.state = 493
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 494
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 496
            self.match(XplorMRParser.OneBond)
            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 497
                self.one_bond_coupling_statement()
                self.state = 502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 503
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 505
            self.match(XplorMRParser.AngleDb)
            self.state = 509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.Error or _la==XplorMRParser.DerivFlag:
                self.state = 506
                self.angle_db_statement()
                self.state = 511
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 512
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PMagnetic(self):
            return self.getToken(XplorMRParser.PMagnetic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pre_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pre_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 514
            self.match(XplorMRParser.PMagnetic)
            self.state = 518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 98)) & ~0x3f) == 0 and ((1 << (_la - 98)) & ((1 << (XplorMRParser.Kconst - 98)) | (1 << (XplorMRParser.Omega - 98)) | (1 << (XplorMRParser.Tauc - 98)) | (1 << (XplorMRParser.Debug - 98)))) != 0) or _la==XplorMRParser.For:
                self.state = 515
                self.pre_statement()
                self.state = 520
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 521
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pcs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 523
            self.match(XplorMRParser.Xpcs)
            self.state = 527
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (XplorMRParser.Tolerance - 103)) | (1 << (XplorMRParser.Save - 103)) | (1 << (XplorMRParser.Fmed - 103)) | (1 << (XplorMRParser.ErrOn - 103)) | (1 << (XplorMRParser.ErrOff - 103)) | (1 << (XplorMRParser.Fon - 103)) | (1 << (XplorMRParser.Foff - 103)) | (1 << (XplorMRParser.Son - 103)) | (1 << (XplorMRParser.Soff - 103)) | (1 << (XplorMRParser.Frun - 103)))) != 0) or _la==XplorMRParser.For:
                self.state = 524
                self.pcs_statement()
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 530
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def prdc_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_prdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 532
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 536
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 103)) & ~0x3f) == 0 and ((1 << (_la - 103)) & ((1 << (XplorMRParser.Tolerance - 103)) | (1 << (XplorMRParser.Save - 103)) | (1 << (XplorMRParser.Fmed - 103)) | (1 << (XplorMRParser.ErrOn - 103)) | (1 << (XplorMRParser.ErrOff - 103)) | (1 << (XplorMRParser.Fon - 103)) | (1 << (XplorMRParser.Foff - 103)) | (1 << (XplorMRParser.Son - 103)) | (1 << (XplorMRParser.Soff - 103)) | (1 << (XplorMRParser.Frun - 103)))) != 0):
                self.state = 533
                self.prdc_statement()
                self.state = 538
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 539
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def porientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_porientation_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 541
            self.match(XplorMRParser.Xangle)
            self.state = 545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 542
                self.porientation_statement()
                self.state = 547
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 548
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pccr_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_pccr_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 550
            self.match(XplorMRParser.Xccr)
            self.state = 554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Frun or _la==XplorMRParser.Weip:
                self.state = 551
                self.pccr_statement()
                self.state = 556
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 557
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_hbond_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 559
            self.match(XplorMRParser.Hbda)
            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.For:
                self.state = 560
                self.hbond_statement()
                self.state = 565
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 566
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbdb(self):
            return self.getToken(XplorMRParser.Hbdb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_restraint" ):
                listener.enterHbond_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_restraint" ):
                listener.exitHbond_db_restraint(self)




    def hbond_db_restraint(self):

        localctx = XplorMRParser.Hbond_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_hbond_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.match(XplorMRParser.Hbdb)
            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (XplorMRParser.Kdir - 117)) | (1 << (XplorMRParser.Klin - 117)) | (1 << (XplorMRParser.Nseg - 117)) | (1 << (XplorMRParser.Nmin - 117)) | (1 << (XplorMRParser.Nmax - 117)) | (1 << (XplorMRParser.Segm - 117)) | (1 << (XplorMRParser.Ohcut - 117)) | (1 << (XplorMRParser.Coh1cut - 117)) | (1 << (XplorMRParser.Coh2cut - 117)) | (1 << (XplorMRParser.Ohncut - 117)) | (1 << (XplorMRParser.Updfrq - 117)) | (1 << (XplorMRParser.Prnfrq - 117)) | (1 << (XplorMRParser.Freemode - 117)))) != 0) or _la==XplorMRParser.For:
                self.state = 569
                self.hbond_db_statement()
                self.state = 574
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 575
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,0)


        def noe_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assign_loopContext,0)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Simple_name_AM(self):
            return self.getToken(XplorMRParser.Simple_name_AM, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_PT(self):
            return self.getToken(XplorMRParser.Simple_name_PT, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 577
                self.noe_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 578
                self.noe_assign_loop()
                pass
            elif token in [XplorMRParser.Asymptote]:
                self.enterOuterAlt(localctx, 3)
                self.state = 579
                self.match(XplorMRParser.Asymptote)
                self.state = 580
                self.match(XplorMRParser.Simple_name)
                self.state = 581
                self.number_s()
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 4)
                self.state = 582
                self.match(XplorMRParser.Average)
                self.state = 583
                self.match(XplorMRParser.Simple_name_AM)
                self.state = 584
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Bhig]:
                self.enterOuterAlt(localctx, 5)
                self.state = 585
                self.match(XplorMRParser.Bhig)
                self.state = 586
                self.match(XplorMRParser.Simple_name)
                self.state = 587
                self.number_s()
                pass
            elif token in [XplorMRParser.Ceiling]:
                self.enterOuterAlt(localctx, 6)
                self.state = 588
                self.match(XplorMRParser.Ceiling)
                self.state = 590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 589
                    self.match(XplorMRParser.Equ_op)


                self.state = 592
                self.number_s()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 7)
                self.state = 593
                self.match(XplorMRParser.Classification)
                self.state = 595
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 594
                    self.match(XplorMRParser.Equ_op)


                self.state = 597
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.CountViol]:
                self.enterOuterAlt(localctx, 8)
                self.state = 598
                self.match(XplorMRParser.CountViol)
                self.state = 599
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Distribute]:
                self.enterOuterAlt(localctx, 9)
                self.state = 600
                self.match(XplorMRParser.Distribute)
                self.state = 601
                self.match(XplorMRParser.Simple_name)
                self.state = 602
                self.match(XplorMRParser.Simple_name)
                self.state = 603
                self.number_s()
                pass
            elif token in [XplorMRParser.Monomers]:
                self.enterOuterAlt(localctx, 10)
                self.state = 604
                self.match(XplorMRParser.Monomers)
                self.state = 605
                self.match(XplorMRParser.Simple_name)
                self.state = 606
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Ncount]:
                self.enterOuterAlt(localctx, 11)
                self.state = 607
                self.match(XplorMRParser.Ncount)
                self.state = 608
                self.match(XplorMRParser.Simple_name)
                self.state = 609
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 12)
                self.state = 610
                self.match(XplorMRParser.Nrestraints)
                self.state = 612
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 611
                    self.match(XplorMRParser.Equ_op)


                self.state = 614
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 13)
                self.state = 615
                self.match(XplorMRParser.Potential)
                self.state = 616
                self.match(XplorMRParser.Simple_name_PT)
                self.state = 617
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Predict]:
                self.enterOuterAlt(localctx, 14)
                self.state = 618
                self.match(XplorMRParser.Predict)
                self.state = 619
                self.predict_statement()
                self.state = 620
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 622
                self.match(XplorMRParser.Print)
                self.state = 623
                self.match(XplorMRParser.Threshold)
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 624
                    self.match(XplorMRParser.Equ_op)


                self.state = 627
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 628
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Rswitch]:
                self.enterOuterAlt(localctx, 17)
                self.state = 629
                self.match(XplorMRParser.Rswitch)
                self.state = 630
                self.match(XplorMRParser.Simple_name)
                self.state = 631
                self.number_s()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 18)
                self.state = 632
                self.match(XplorMRParser.Scale)
                self.state = 633
                self.match(XplorMRParser.Simple_name)
                self.state = 634
                self.number_s()
                pass
            elif token in [XplorMRParser.SoExponent]:
                self.enterOuterAlt(localctx, 19)
                self.state = 635
                self.match(XplorMRParser.SoExponent)
                self.state = 636
                self.match(XplorMRParser.Simple_name)
                self.state = 637
                self.number_s()
                pass
            elif token in [XplorMRParser.SqConstant]:
                self.enterOuterAlt(localctx, 20)
                self.state = 638
                self.match(XplorMRParser.SqConstant)
                self.state = 639
                self.match(XplorMRParser.Simple_name)
                self.state = 640
                self.number_s()
                pass
            elif token in [XplorMRParser.SqExponent]:
                self.enterOuterAlt(localctx, 21)
                self.state = 641
                self.match(XplorMRParser.SqExponent)
                self.state = 642
                self.match(XplorMRParser.Simple_name)
                self.state = 643
                self.number_s()
                pass
            elif token in [XplorMRParser.SqOffset]:
                self.enterOuterAlt(localctx, 22)
                self.state = 644
                self.match(XplorMRParser.SqOffset)
                self.state = 645
                self.match(XplorMRParser.Simple_name)
                self.state = 646
                self.number_s()
                pass
            elif token in [XplorMRParser.Temperature]:
                self.enterOuterAlt(localctx, 23)
                self.state = 647
                self.match(XplorMRParser.Temperature)
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 648
                    self.match(XplorMRParser.Equ_op)


                self.state = 651
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Assign)
            else:
                return self.getToken(XplorMRParser.Assign, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(XplorMRParser.Assign)
            self.state = 655
            self.selection()
            self.state = 656
            self.selection()
            self.state = 657
            self.number()
            self.state = 659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.state = 658
                self.number()


            self.state = 662
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 661
                self.number()


            self.state = 667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Peak) | (1 << XplorMRParser.Spectrum) | (1 << XplorMRParser.Volume) | (1 << XplorMRParser.Ppm1) | (1 << XplorMRParser.Ppm2) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Weight))) != 0):
                self.state = 664
                self.noe_annotation()
                self.state = 669
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 687
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 670
                self.match(XplorMRParser.Or_op)
                self.state = 672
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Assign:
                    self.state = 671
                    self.match(XplorMRParser.Assign)


                self.state = 674
                self.selection()
                self.state = 675
                self.selection()
                self.state = 677
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 676
                    self.number()


                self.state = 680
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
                if la_ == 1:
                    self.state = 679
                    self.number()


                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                    self.state = 682
                    self.number()


                self.state = 689
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 704
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 690
                self.match(XplorMRParser.Cutoff)
                self.state = 692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 691
                    self.match(XplorMRParser.Equ_op)


                self.state = 694
                self.number_s()
                pass
            elif token in [XplorMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 695
                self.match(XplorMRParser.Cuton)
                self.state = 697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 696
                    self.match(XplorMRParser.Equ_op)


                self.state = 699
                self.number_s()
                pass
            elif token in [XplorMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 700
                self.match(XplorMRParser.From)
                self.state = 701
                self.selection()
                pass
            elif token in [XplorMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 702
                self.match(XplorMRParser.To)
                self.state = 703
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(XplorMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(XplorMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(XplorMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(XplorMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(XplorMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(XplorMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = XplorMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 741
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 706
                self.match(XplorMRParser.Peak)
                self.state = 708
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 707
                    self.match(XplorMRParser.Equ_op)


                self.state = 710
                self.number_a()
                pass
            elif token in [XplorMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 711
                self.match(XplorMRParser.Spectrum)
                self.state = 713
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 712
                    self.match(XplorMRParser.Equ_op)


                self.state = 715
                self.number_a()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 716
                self.match(XplorMRParser.Weight)
                self.state = 718
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 717
                    self.match(XplorMRParser.Equ_op)


                self.state = 720
                self.number_a()
                pass
            elif token in [XplorMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 721
                self.match(XplorMRParser.Volume)
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 722
                    self.match(XplorMRParser.Equ_op)


                self.state = 725
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 726
                self.match(XplorMRParser.Ppm1)
                self.state = 728
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 727
                    self.match(XplorMRParser.Equ_op)


                self.state = 730
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 731
                self.match(XplorMRParser.Ppm2)
                self.state = 733
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 732
                    self.match(XplorMRParser.Equ_op)


                self.state = 735
                self.number_a()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 736
                self.match(XplorMRParser.Cv)
                self.state = 738
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 737
                    self.match(XplorMRParser.Equ_op)


                self.state = 740
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def dihedral_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,0)


        def dihedral_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assign_loopContext,0)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Print_any(self):
            return self.getToken(XplorMRParser.Print_any, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 758
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.dihedral_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 745
                self.dihedral_assign_loop()
                pass
            elif token in [XplorMRParser.Nassign]:
                self.enterOuterAlt(localctx, 4)
                self.state = 746
                self.match(XplorMRParser.Nassign)
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 747
                    self.match(XplorMRParser.Equ_op)


                self.state = 750
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 751
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 6)
                self.state = 752
                self.match(XplorMRParser.Scale)
                self.state = 754
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 753
                    self.match(XplorMRParser.Equ_op)


                self.state = 756
                self.number_s()
                pass
            elif token in [XplorMRParser.Print_any]:
                self.enterOuterAlt(localctx, 7)
                self.state = 757
                self.match(XplorMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 760
            self.match(XplorMRParser.Assign)
            self.state = 761
            self.selection()
            self.state = 762
            self.selection()
            self.state = 763
            self.selection()
            self.state = 764
            self.selection()
            self.state = 765
            self.number()
            self.state = 766
            self.number()
            self.state = 767
            self.number()
            self.state = 768
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,0)


        def sani_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 798
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 770
                self.sani_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 771
                self.sani_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 772
                self.match(XplorMRParser.Classification)
                self.state = 774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 773
                    self.match(XplorMRParser.Equ_op)


                self.state = 776
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 777
                self.match(XplorMRParser.Coefficients)
                self.state = 778
                self.number_s()
                self.state = 779
                self.number_s()
                self.state = 780
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 782
                self.match(XplorMRParser.ForceConstant)
                self.state = 784
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 783
                    self.match(XplorMRParser.Equ_op)


                self.state = 786
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 787
                self.match(XplorMRParser.Nrestraints)
                self.state = 789
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 788
                    self.match(XplorMRParser.Equ_op)


                self.state = 791
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 7)
                self.state = 792
                self.match(XplorMRParser.Potential)
                self.state = 793
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 794
                self.match(XplorMRParser.Print)
                self.state = 795
                self.match(XplorMRParser.Threshold)
                self.state = 796
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 797
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 800
            self.match(XplorMRParser.Assign)
            self.state = 801
            self.selection()
            self.state = 802
            self.selection()
            self.state = 803
            self.selection()
            self.state = 804
            self.selection()
            self.state = 805
            self.selection()
            self.state = 806
            self.selection()
            self.state = 807
            self.number()
            self.state = 809
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,66,self._ctx)
            if la_ == 1:
                self.state = 808
                self.number()


            self.state = 812
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 811
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_xdip_statement)
        self._la = 0 # Token type
        try:
            self.state = 852
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 814
                self.xdip_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 815
                self.match(XplorMRParser.Classification)
                self.state = 817
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 816
                    self.match(XplorMRParser.Equ_op)


                self.state = 819
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 3)
                self.state = 820
                self.match(XplorMRParser.Type)
                self.state = 821
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 822
                self.match(XplorMRParser.Scale)
                self.state = 824
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 823
                    self.match(XplorMRParser.Equ_op)


                self.state = 826
                self.number_s()
                pass
            elif token in [XplorMRParser.Sign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 827
                self.match(XplorMRParser.Sign)
                self.state = 828
                self.match(XplorMRParser.Logical)
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 6)
                self.state = 829
                self.match(XplorMRParser.Average)
                self.state = 830
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 7)
                self.state = 831
                self.match(XplorMRParser.Coefficients)
                self.state = 832
                self.number_s()
                self.state = 833
                self.number_s()
                self.state = 834
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 836
                self.match(XplorMRParser.ForceConstant)
                self.state = 838
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 837
                    self.match(XplorMRParser.Equ_op)


                self.state = 840
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 841
                self.match(XplorMRParser.Nrestraints)
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 842
                    self.match(XplorMRParser.Equ_op)


                self.state = 845
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 846
                self.match(XplorMRParser.Potential)
                self.state = 847
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 848
                self.match(XplorMRParser.Print)
                self.state = 849
                self.match(XplorMRParser.Threshold)
                self.state = 850
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 851
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_xdip_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 854
            self.match(XplorMRParser.Assign)
            self.state = 855
            self.selection()
            self.state = 856
            self.selection()
            self.state = 857
            self.selection()
            self.state = 858
            self.selection()
            self.state = 859
            self.selection()
            self.state = 860
            self.selection()
            self.state = 861
            self.number()
            self.state = 862
            self.number()
            self.state = 869
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.state = 863
                self.number()

            elif la_ == 2:
                self.state = 864
                self.number()
                self.state = 865
                self.number()
                self.state = 866
                self.number()
                self.state = 867
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,0)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 903
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 871
                self.vean_assign()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 872
                self.match(XplorMRParser.Cv)
                self.state = 874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 873
                    self.match(XplorMRParser.Equ_op)


                self.state = 876
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 877
                self.match(XplorMRParser.Classification)
                self.state = 879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 878
                    self.match(XplorMRParser.Equ_op)


                self.state = 881
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 882
                self.match(XplorMRParser.ForceConstant)
                self.state = 884
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 883
                    self.match(XplorMRParser.Equ_op)


                self.state = 886
                self.number_s()
                self.state = 887
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 889
                self.match(XplorMRParser.Nrestraints)
                self.state = 891
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 890
                    self.match(XplorMRParser.Equ_op)


                self.state = 893
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 894
                self.match(XplorMRParser.Partition)
                self.state = 896
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 895
                    self.match(XplorMRParser.Equ_op)


                self.state = 898
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 899
                self.match(XplorMRParser.Print)
                self.state = 900
                self.match(XplorMRParser.Threshold)
                self.state = 901
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 902
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_vean_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 905
            self.match(XplorMRParser.Assign)
            self.state = 906
            self.selection()
            self.state = 907
            self.selection()
            self.state = 908
            self.selection()
            self.state = 909
            self.selection()
            self.state = 910
            self.number()
            self.state = 911
            self.number()
            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 912
                self.number()
                self.state = 913
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tenso_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Tenso_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_statement" ):
                listener.enterTenso_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_statement" ):
                listener.exitTenso_statement(self)




    def tenso_statement(self):

        localctx = XplorMRParser.Tenso_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tenso_statement)
        self._la = 0 # Token type
        try:
            self.state = 936
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 917
                self.tenso_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 918
                self.match(XplorMRParser.Classification)
                self.state = 920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 919
                    self.match(XplorMRParser.Equ_op)


                self.state = 922
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 923
                self.match(XplorMRParser.Coefficients)
                self.state = 924
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 925
                self.match(XplorMRParser.Nrestraints)
                self.state = 927
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 926
                    self.match(XplorMRParser.Equ_op)


                self.state = 929
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 930
                self.match(XplorMRParser.Potential)
                self.state = 931
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 932
                self.match(XplorMRParser.Print)
                self.state = 933
                self.match(XplorMRParser.Threshold)
                self.state = 934
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 935
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_assign" ):
                listener.enterTenso_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_assign" ):
                listener.exitTenso_assign(self)




    def tenso_assign(self):

        localctx = XplorMRParser.Tenso_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_tenso_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 938
            self.match(XplorMRParser.Assign)
            self.state = 939
            self.selection()
            self.state = 940
            self.selection()
            self.state = 941
            self.number()
            self.state = 943
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 942
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_anis_statement)
        self._la = 0 # Token type
        try:
            self.state = 975
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 945
                self.anis_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 946
                self.match(XplorMRParser.Classification)
                self.state = 948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 947
                    self.match(XplorMRParser.Equ_op)


                self.state = 950
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 951
                self.match(XplorMRParser.Coefficients)
                self.state = 952
                self.number_s()
                self.state = 953
                self.number_s()
                self.state = 954
                self.number_s()
                self.state = 955
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 957
                self.match(XplorMRParser.ForceConstant)
                self.state = 959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 958
                    self.match(XplorMRParser.Equ_op)


                self.state = 961
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 962
                self.match(XplorMRParser.Nrestraints)
                self.state = 964
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 963
                    self.match(XplorMRParser.Equ_op)


                self.state = 966
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 967
                self.match(XplorMRParser.Potential)
                self.state = 968
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 969
                self.match(XplorMRParser.Print)
                self.state = 970
                self.match(XplorMRParser.Threshold)
                self.state = 971
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 972
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 973
                self.match(XplorMRParser.Type)
                self.state = 974
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_anis_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            self.match(XplorMRParser.Assign)
            self.state = 978
            self.selection()
            self.state = 979
            self.selection()
            self.state = 980
            self.selection()
            self.state = 981
            self.selection()
            self.state = 982
            self.number()
            self.state = 984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 983
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def planar_group(self):
            return self.getTypedRuleContext(XplorMRParser.Planar_groupContext,0)


        def planar_group_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Planar_group_loopContext,0)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(XplorMRParser.Print_any, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_planar_statement)
        try:
            self.state = 991
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 986
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 2)
                self.state = 987
                self.planar_group()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 3)
                self.state = 988
                self.planar_group_loop()
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 4)
                self.state = 989
                self.match(XplorMRParser.Initialize)
                pass
            elif token in [XplorMRParser.Print_any]:
                self.enterOuterAlt(localctx, 5)
                self.state = 990
                self.match(XplorMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_groupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Group_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_group

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_group" ):
                listener.enterPlanar_group(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_group" ):
                listener.exitPlanar_group(self)




    def planar_group(self):

        localctx = XplorMRParser.Planar_groupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_planar_group)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 993
            self.match(XplorMRParser.Group)
            self.state = 997
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Selection or _la==XplorMRParser.Weight:
                self.state = 994
                self.group_statement()
                self.state = 999
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1000
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 1012
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1002
                self.match(XplorMRParser.Selection)
                self.state = 1004
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1003
                    self.match(XplorMRParser.Equ_op)


                self.state = 1006
                self.selection()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1007
                self.match(XplorMRParser.Weight)
                self.state = 1009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1008
                    self.match(XplorMRParser.Equ_op)


                self.state = 1011
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,0)


        def Exponent(self):
            return self.getToken(XplorMRParser.Exponent, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Normal(self):
            return self.getToken(XplorMRParser.Normal, 0)

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_statement" ):
                listener.enterHarmonic_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_statement" ):
                listener.exitHarmonic_statement(self)




    def harmonic_statement(self):

        localctx = XplorMRParser.Harmonic_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_harmonic_statement)
        self._la = 0 # Token type
        try:
            self.state = 1054
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Vector]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1014
                self.vector_statement()
                pass
            elif token in [XplorMRParser.Exponent]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.match(XplorMRParser.Exponent)
                self.state = 1017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1016
                    self.match(XplorMRParser.Equ_op)


                self.state = 1019
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Normal]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1020
                self.match(XplorMRParser.Normal)
                self.state = 1022
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1021
                    self.match(XplorMRParser.Equ_op)


                self.state = 1024
                self.match(XplorMRParser.L_paren)
                self.state = 1050
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integer, XplorMRParser.Real, XplorMRParser.Symbol_name]:
                    self.state = 1025
                    self.number_s()
                    self.state = 1027
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1026
                        self.match(XplorMRParser.Comma)


                    self.state = 1029
                    self.number_s()
                    self.state = 1031
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1030
                        self.match(XplorMRParser.Comma)


                    self.state = 1033
                    self.number_s()
                    pass
                elif token in [XplorMRParser.Tail]:
                    self.state = 1035
                    self.match(XplorMRParser.Tail)
                    self.state = 1037
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1036
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1039
                    self.selection()
                    self.state = 1041
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Comma:
                        self.state = 1040
                        self.match(XplorMRParser.Comma)


                    self.state = 1048
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Head:
                        self.state = 1043
                        self.match(XplorMRParser.Head)
                        self.state = 1045
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==XplorMRParser.Equ_op:
                            self.state = 1044
                            self.match(XplorMRParser.Equ_op)


                        self.state = 1047
                        self.selection()


                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1052
                self.match(XplorMRParser.R_paren)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Harmonic_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_harmonic_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHarmonic_assign" ):
                listener.enterHarmonic_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHarmonic_assign" ):
                listener.exitHarmonic_assign(self)




    def harmonic_assign(self):

        localctx = XplorMRParser.Harmonic_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_harmonic_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1056
            self.match(XplorMRParser.Assign)
            self.state = 1057
            self.selection()
            self.state = 1058
            self.number()
            self.state = 1059
            self.number()
            self.state = 1060
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,0)


        def xadc_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_antidistance_statement)
        self._la = 0 # Token type
        try:
            self.state = 1099
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1062
                self.xadc_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1063
                self.xadc_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1064
                self.match(XplorMRParser.Classification)
                self.state = 1066
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1065
                    self.match(XplorMRParser.Equ_op)


                self.state = 1068
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1069
                self.match(XplorMRParser.Expectation)
                self.state = 1070
                self.match(XplorMRParser.Integer)
                self.state = 1071
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1072
                self.match(XplorMRParser.ForceConstant)
                self.state = 1074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1073
                    self.match(XplorMRParser.Equ_op)


                self.state = 1076
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1077
                self.match(XplorMRParser.Nrestraints)
                self.state = 1079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1078
                    self.match(XplorMRParser.Equ_op)


                self.state = 1081
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1082
                self.match(XplorMRParser.Print)
                self.state = 1083
                self.match(XplorMRParser.Threshold)
                self.state = 1084
                self.number_s()
                self.state = 1091
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1085
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1086
                    self.match(XplorMRParser.Classification)
                    self.state = 1088
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1087
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1090
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1093
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1094
                self.match(XplorMRParser.Size)
                self.state = 1095
                self.number_s()
                self.state = 1096
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1098
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1101
            self.match(XplorMRParser.Assign)
            self.state = 1102
            self.selection()
            self.state = 1103
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,0)


        def coup_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1154
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1105
                self.coup_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1106
                self.coup_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1107
                self.match(XplorMRParser.Classification)
                self.state = 1109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1108
                    self.match(XplorMRParser.Equ_op)


                self.state = 1111
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1112
                self.match(XplorMRParser.Coefficients)
                self.state = 1113
                self.number_s()
                self.state = 1114
                self.number_s()
                self.state = 1115
                self.number_s()
                self.state = 1116
                self.number_s()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1118
                self.match(XplorMRParser.Cv)
                self.state = 1120
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1119
                    self.match(XplorMRParser.Equ_op)


                self.state = 1122
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1123
                self.match(XplorMRParser.DegEnergy)
                self.state = 1124
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1125
                self.match(XplorMRParser.ForceConstant)
                self.state = 1126
                self.number_s()
                self.state = 1128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                    self.state = 1127
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1130
                self.match(XplorMRParser.Nrestraints)
                self.state = 1132
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1131
                    self.match(XplorMRParser.Equ_op)


                self.state = 1134
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1135
                self.match(XplorMRParser.Partition)
                self.state = 1137
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1136
                    self.match(XplorMRParser.Equ_op)


                self.state = 1139
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1140
                self.match(XplorMRParser.Potential)
                self.state = 1141
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1142
                self.match(XplorMRParser.Print)
                self.state = 1143
                self.match(XplorMRParser.Threshold)
                self.state = 1144
                self.number_s()
                self.state = 1151
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1145
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1146
                    self.match(XplorMRParser.Classification)
                    self.state = 1148
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1147
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1150
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1153
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1156
            self.match(XplorMRParser.Assign)
            self.state = 1157
            self.selection()
            self.state = 1158
            self.selection()
            self.state = 1159
            self.selection()
            self.state = 1160
            self.selection()
            self.state = 1166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1161
                self.selection()
                self.state = 1162
                self.selection()
                self.state = 1163
                self.selection()
                self.state = 1164
                self.selection()


            self.state = 1168
            self.number()
            self.state = 1169
            self.number()
            self.state = 1173
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 1170
                self.number()
                self.state = 1171
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1210
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1175
                self.carbon_shift_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1176
                self.match(XplorMRParser.Classification)
                self.state = 1178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1177
                    self.match(XplorMRParser.Equ_op)


                self.state = 1180
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1181
                self.match(XplorMRParser.Expectation)
                self.state = 1182
                self.match(XplorMRParser.Integer)
                self.state = 1183
                self.match(XplorMRParser.Integer)
                self.state = 1184
                self.number_s()
                self.state = 1185
                self.number_s()
                self.state = 1186
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1188
                self.match(XplorMRParser.ForceConstant)
                self.state = 1190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1189
                    self.match(XplorMRParser.Equ_op)


                self.state = 1192
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1193
                self.match(XplorMRParser.Nrestraints)
                self.state = 1195
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1194
                    self.match(XplorMRParser.Equ_op)


                self.state = 1197
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1198
                self.match(XplorMRParser.PhiStep)
                self.state = 1199
                self.number_s()
                pass
            elif token in [XplorMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1200
                self.match(XplorMRParser.PsiStep)
                self.state = 1201
                self.number_s()
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1202
                self.match(XplorMRParser.Potential)
                self.state = 1203
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1204
                self.match(XplorMRParser.Print)
                self.state = 1205
                self.match(XplorMRParser.Threshold)
                self.state = 1206
                self.number_s()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1207
                self.carbon_shift_rcoil()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1208
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1209
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1212
            self.match(XplorMRParser.Assign)
            self.state = 1213
            self.selection()
            self.state = 1214
            self.selection()
            self.state = 1215
            self.selection()
            self.state = 1216
            self.selection()
            self.state = 1217
            self.selection()
            self.state = 1218
            self.number()
            self.state = 1219
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1221
            self.match(XplorMRParser.Rcoil)
            self.state = 1222
            self.selection()
            self.state = 1223
            self.number()
            self.state = 1224
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(XplorMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1265
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1226
                self.observed()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1227
                self.proton_shift_rcoil()
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1228
                self.proton_shift_anisotropy()
                pass
            elif token in [XplorMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1229
                self.proton_shift_amides()
                pass
            elif token in [XplorMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1230
                self.proton_shift_carbons()
                pass
            elif token in [XplorMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1231
                self.proton_shift_nitrogens()
                pass
            elif token in [XplorMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1232
                self.proton_shift_oxygens()
                pass
            elif token in [XplorMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1233
                self.proton_shift_ring_atoms()
                pass
            elif token in [XplorMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1234
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1235
                self.match(XplorMRParser.Classification)
                self.state = 1237
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1236
                    self.match(XplorMRParser.Equ_op)


                self.state = 1239
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1240
                self.match(XplorMRParser.Error)
                self.state = 1241
                self.number_s()
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1242
                self.match(XplorMRParser.DegEnergy)
                self.state = 1243
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1244
                self.match(XplorMRParser.ForceConstant)
                self.state = 1245
                self.number_s()
                self.state = 1247
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                    self.state = 1246
                    self.number_s()


                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1249
                self.match(XplorMRParser.Potential)
                self.state = 1250
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1251
                self.match(XplorMRParser.Print)
                self.state = 1252
                self.match(XplorMRParser.Threshold)
                self.state = 1253
                self.number_s()
                self.state = 1260
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1254
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1255
                    self.match(XplorMRParser.Classification)
                    self.state = 1257
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1256
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1259
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1262
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1264
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1267
            self.match(XplorMRParser.Observed)
            self.state = 1268
            self.selection()
            self.state = 1270
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1269
                self.selection()


            self.state = 1272
            self.number()
            self.state = 1274
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 1273
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self):
            return self.getTypedRuleContext(XplorMRParser.NumberContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1276
            self.match(XplorMRParser.Rcoil)
            self.state = 1277
            self.selection()
            self.state = 1278
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1280
            self.match(XplorMRParser.Anisotropy)
            self.state = 1281
            self.selection()
            self.state = 1282
            self.selection()
            self.state = 1283
            self.selection()
            self.state = 1284
            self.match(XplorMRParser.Simple_name)
            self.state = 1286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Logical:
                self.state = 1285
                self.match(XplorMRParser.Logical)


            self.state = 1288
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1290
            self.match(XplorMRParser.Amides)
            self.state = 1291
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1293
            self.match(XplorMRParser.Carbon)
            self.state = 1294
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1296
            self.match(XplorMRParser.Nitrogens)
            self.state = 1297
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1299
            self.match(XplorMRParser.Oxygens)
            self.state = 1300
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1302
            self.match(XplorMRParser.RingAtoms)
            self.state = 1303
            self.match(XplorMRParser.Simple_name)
            self.state = 1304
            self.selection()
            self.state = 1305
            self.selection()
            self.state = 1306
            self.selection()
            self.state = 1307
            self.selection()
            self.state = 1308
            self.selection()
            self.state = 1310
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1309
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1312
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 1313
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1432
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1315
                self.rama_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1316
                self.match(XplorMRParser.Classification)
                self.state = 1318
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1317
                    self.match(XplorMRParser.Equ_op)


                self.state = 1320
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1321
                self.match(XplorMRParser.Cutoff)
                self.state = 1322
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1323
                self.match(XplorMRParser.ForceConstant)
                self.state = 1325
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1324
                    self.match(XplorMRParser.Equ_op)


                self.state = 1327
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1328
                self.match(XplorMRParser.Gaussian)
                self.state = 1329
                self.number_s()
                self.state = 1330
                self.number_s()
                self.state = 1331
                self.number_s()
                self.state = 1336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,136,self._ctx)
                if la_ == 1:
                    self.state = 1332
                    self.number_s()
                    self.state = 1333
                    self.number_s()
                    self.state = 1334
                    self.number_s()


                self.state = 1342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
                if la_ == 1:
                    self.state = 1338
                    self.number_s()
                    self.state = 1339
                    self.number_s()
                    self.state = 1340
                    self.number_s()


                self.state = 1348
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                    self.state = 1344
                    self.number_s()
                    self.state = 1345
                    self.number_s()
                    self.state = 1346
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1350
                self.match(XplorMRParser.Nrestraints)
                self.state = 1352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1351
                    self.match(XplorMRParser.Equ_op)


                self.state = 1354
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Phase]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1355
                self.match(XplorMRParser.Phase)
                self.state = 1356
                self.number_s()
                self.state = 1357
                self.number_s()
                self.state = 1358
                self.number_s()
                self.state = 1363
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
                if la_ == 1:
                    self.state = 1359
                    self.number_s()
                    self.state = 1360
                    self.number_s()
                    self.state = 1361
                    self.number_s()


                self.state = 1369
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
                if la_ == 1:
                    self.state = 1365
                    self.number_s()
                    self.state = 1366
                    self.number_s()
                    self.state = 1367
                    self.number_s()


                self.state = 1375
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                    self.state = 1371
                    self.number_s()
                    self.state = 1372
                    self.number_s()
                    self.state = 1373
                    self.number_s()


                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1377
                self.match(XplorMRParser.Print)
                self.state = 1378
                self.match(XplorMRParser.Threshold)
                self.state = 1379
                self.number_s()
                self.state = 1386
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1380
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1381
                    self.match(XplorMRParser.Classification)
                    self.state = 1383
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1382
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1385
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1388
                self.match(XplorMRParser.Quartic)
                self.state = 1389
                self.number_s()
                self.state = 1390
                self.number_s()
                self.state = 1391
                self.number_s()
                self.state = 1396
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
                if la_ == 1:
                    self.state = 1392
                    self.number_s()
                    self.state = 1393
                    self.number_s()
                    self.state = 1394
                    self.number_s()


                self.state = 1402
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,146,self._ctx)
                if la_ == 1:
                    self.state = 1398
                    self.number_s()
                    self.state = 1399
                    self.number_s()
                    self.state = 1400
                    self.number_s()


                self.state = 1408
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                    self.state = 1404
                    self.number_s()
                    self.state = 1405
                    self.number_s()
                    self.state = 1406
                    self.number_s()


                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1410
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1411
                self.match(XplorMRParser.Scale)
                self.state = 1413
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1412
                    self.match(XplorMRParser.Equ_op)


                self.state = 1415
                self.number_s()
                pass
            elif token in [XplorMRParser.Shape]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1416
                self.match(XplorMRParser.Shape)
                self.state = 1417
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1418
                self.match(XplorMRParser.Size)
                self.state = 1419
                self.match(XplorMRParser.Dimensions)
                self.state = 1420
                self.number_s()
                self.state = 1422
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1421
                    self.number_s()


                self.state = 1425
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,150,self._ctx)
                if la_ == 1:
                    self.state = 1424
                    self.number_s()


                self.state = 1428
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                    self.state = 1427
                    self.number_s()


                pass
            elif token in [XplorMRParser.Sort]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1430
                self.match(XplorMRParser.Sort)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1431
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1434
            self.match(XplorMRParser.Assign)
            self.state = 1435
            self.selection()
            self.state = 1436
            self.selection()
            self.state = 1437
            self.selection()
            self.state = 1438
            self.selection()
            self.state = 1444
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.state = 1439
                self.selection()
                self.state = 1440
                self.selection()
                self.state = 1441
                self.selection()
                self.state = 1442
                self.selection()


            self.state = 1451
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
            if la_ == 1:
                self.state = 1446
                self.selection()
                self.state = 1447
                self.selection()
                self.state = 1448
                self.selection()
                self.state = 1449
                self.selection()


            self.state = 1458
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1453
                self.selection()
                self.state = 1454
                self.selection()
                self.state = 1455
                self.selection()
                self.state = 1456
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coll_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,0)


        def coll_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assign_loopContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_collapse_statement)
        self._la = 0 # Token type
        try:
            self.state = 1469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1460
                self.coll_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1461
                self.coll_assign_loop()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1462
                self.match(XplorMRParser.Scale)
                self.state = 1464
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1463
                    self.match(XplorMRParser.Equ_op)


                self.state = 1466
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1467
                self.match(XplorMRParser.Print)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1468
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign" ):
                listener.enterColl_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign" ):
                listener.exitColl_assign(self)




    def coll_assign(self):

        localctx = XplorMRParser.Coll_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_coll_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1471
            self.match(XplorMRParser.Assign)
            self.state = 1472
            self.selection()
            self.state = 1473
            self.number()
            self.state = 1474
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1507
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1476
                self.dani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1477
                self.match(XplorMRParser.Classification)
                self.state = 1479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1478
                    self.match(XplorMRParser.Equ_op)


                self.state = 1481
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1482
                self.match(XplorMRParser.Coefficients)
                self.state = 1483
                self.number_s()
                self.state = 1484
                self.number_s()
                self.state = 1485
                self.number_s()
                self.state = 1486
                self.number_s()
                self.state = 1487
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1489
                self.match(XplorMRParser.ForceConstant)
                self.state = 1491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1490
                    self.match(XplorMRParser.Equ_op)


                self.state = 1493
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1494
                self.match(XplorMRParser.Nrestraints)
                self.state = 1496
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1495
                    self.match(XplorMRParser.Equ_op)


                self.state = 1498
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1499
                self.match(XplorMRParser.Potential)
                self.state = 1500
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1501
                self.match(XplorMRParser.Print)
                self.state = 1502
                self.match(XplorMRParser.Threshold)
                self.state = 1503
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1504
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1505
                self.match(XplorMRParser.Type)
                self.state = 1506
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_dani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1509
            self.match(XplorMRParser.Assign)
            self.state = 1510
            self.selection()
            self.state = 1511
            self.selection()
            self.state = 1512
            self.selection()
            self.state = 1513
            self.selection()
            self.state = 1514
            self.selection()
            self.state = 1515
            self.selection()
            self.state = 1516
            self.number()
            self.state = 1518
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 1517
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_orientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1589
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1520
                self.orie_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1521
                self.match(XplorMRParser.Classification)
                self.state = 1523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1522
                    self.match(XplorMRParser.Equ_op)


                self.state = 1525
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1526
                self.match(XplorMRParser.Cutoff)
                self.state = 1527
                self.number_s()
                pass
            elif token in [XplorMRParser.Height]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1528
                self.match(XplorMRParser.Height)
                self.state = 1529
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1530
                self.match(XplorMRParser.ForceConstant)
                self.state = 1532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1531
                    self.match(XplorMRParser.Equ_op)


                self.state = 1534
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1535
                self.match(XplorMRParser.Gaussian)
                self.state = 1536
                self.number_s()
                self.state = 1537
                self.number_s()
                self.state = 1538
                self.number_s()
                self.state = 1539
                self.number_s()
                self.state = 1540
                self.number_s()
                self.state = 1541
                self.number_s()
                self.state = 1542
                self.number_s()
                pass
            elif token in [XplorMRParser.MaxGaussians]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1544
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1545
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.NewGaussian]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1546
                self.match(XplorMRParser.NewGaussian)
                self.state = 1547
                self.number_s()
                self.state = 1548
                self.number_s()
                self.state = 1549
                self.number_s()
                self.state = 1550
                self.number_s()
                self.state = 1551
                self.number_s()
                self.state = 1552
                self.number_s()
                self.state = 1553
                self.number_s()
                self.state = 1554
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1556
                self.match(XplorMRParser.Nrestraints)
                self.state = 1558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1557
                    self.match(XplorMRParser.Equ_op)


                self.state = 1560
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1561
                self.match(XplorMRParser.Print)
                self.state = 1562
                self.match(XplorMRParser.Threshold)
                self.state = 1563
                self.number_s()
                self.state = 1570
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1564
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1565
                    self.match(XplorMRParser.Classification)
                    self.state = 1567
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1566
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1569
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1572
                self.match(XplorMRParser.Quartic)
                self.state = 1573
                self.number_s()
                self.state = 1574
                self.number_s()
                self.state = 1575
                self.number_s()
                self.state = 1576
                self.number_s()
                self.state = 1577
                self.number_s()
                self.state = 1578
                self.number_s()
                self.state = 1579
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1581
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Residue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1582
                self.match(XplorMRParser.Residue)
                self.state = 1583
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1584
                self.match(XplorMRParser.Size)
                self.state = 1585
                self.number_s()
                self.state = 1586
                self.number_s()
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1588
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1591
            self.match(XplorMRParser.Assign)
            self.state = 1592
            self.selection()
            self.state = 1593
            self.selection()
            self.state = 1594
            self.selection()
            self.state = 1595
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def csa_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_csa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1597
                self.csa_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1598
                self.csa_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1599
                self.match(XplorMRParser.Classification)
                self.state = 1601
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1600
                    self.match(XplorMRParser.Equ_op)


                self.state = 1603
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1604
                self.match(XplorMRParser.Scale)
                self.state = 1606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1605
                    self.match(XplorMRParser.Equ_op)


                self.state = 1608
                self.number_s()
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1609
                self.match(XplorMRParser.Type)
                self.state = 1610
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1611
                self.match(XplorMRParser.Coefficients)
                self.state = 1612
                self.number_s()
                self.state = 1613
                self.number_s()
                self.state = 1614
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1616
                self.match(XplorMRParser.Sigma)
                self.state = 1617
                self.number_s()
                self.state = 1618
                self.number_s()
                self.state = 1619
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1621
                self.match(XplorMRParser.ForceConstant)
                self.state = 1623
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1622
                    self.match(XplorMRParser.Equ_op)


                self.state = 1625
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1626
                self.match(XplorMRParser.Nrestraints)
                self.state = 1628
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1627
                    self.match(XplorMRParser.Equ_op)


                self.state = 1630
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1631
                self.match(XplorMRParser.Potential)
                self.state = 1632
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1633
                self.match(XplorMRParser.Print)
                self.state = 1634
                self.match(XplorMRParser.Threshold)
                self.state = 1635
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1636
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_csa_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1639
            self.match(XplorMRParser.Assign)
            self.state = 1640
            self.selection()
            self.state = 1641
            self.selection()
            self.state = 1642
            self.selection()
            self.state = 1643
            self.selection()
            self.state = 1644
            self.selection()
            self.state = 1645
            self.selection()
            self.state = 1646
            self.selection()
            self.state = 1647
            self.number()
            self.state = 1649
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1648
                self.number()


            self.state = 1652
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 1651
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_pcsa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1692
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1654
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1655
                self.match(XplorMRParser.Classification)
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1656
                    self.match(XplorMRParser.Equ_op)


                self.state = 1659
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1660
                self.match(XplorMRParser.Scale)
                self.state = 1662
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1661
                    self.match(XplorMRParser.Equ_op)


                self.state = 1664
                self.number_s()
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1665
                self.match(XplorMRParser.Coefficients)
                self.state = 1666
                self.number_s()
                self.state = 1667
                self.number_s()
                self.state = 1668
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1670
                self.match(XplorMRParser.Sigma)
                self.state = 1671
                self.number_s()
                self.state = 1672
                self.number_s()
                self.state = 1673
                self.number_s()
                self.state = 1674
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1676
                self.match(XplorMRParser.ForceConstant)
                self.state = 1678
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1677
                    self.match(XplorMRParser.Equ_op)


                self.state = 1680
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1681
                self.match(XplorMRParser.Nrestraints)
                self.state = 1683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1682
                    self.match(XplorMRParser.Equ_op)


                self.state = 1685
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1686
                self.match(XplorMRParser.Potential)
                self.state = 1687
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1688
                self.match(XplorMRParser.Print)
                self.state = 1689
                self.match(XplorMRParser.Threshold)
                self.state = 1690
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1691
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1725
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1694
                self.one_bond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1695
                self.match(XplorMRParser.Classification)
                self.state = 1697
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1696
                    self.match(XplorMRParser.Equ_op)


                self.state = 1699
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1700
                self.match(XplorMRParser.Coefficients)
                self.state = 1701
                self.number_s()
                self.state = 1702
                self.number_s()
                self.state = 1703
                self.number_s()
                self.state = 1704
                self.number_s()
                self.state = 1705
                self.number_s()
                self.state = 1706
                self.number_s()
                self.state = 1707
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1709
                self.match(XplorMRParser.ForceConstant)
                self.state = 1711
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1710
                    self.match(XplorMRParser.Equ_op)


                self.state = 1713
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1714
                self.match(XplorMRParser.Nrestraints)
                self.state = 1716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1715
                    self.match(XplorMRParser.Equ_op)


                self.state = 1718
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1719
                self.match(XplorMRParser.Potential)
                self.state = 1720
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1721
                self.match(XplorMRParser.Print)
                self.state = 1722
                self.match(XplorMRParser.Threshold)
                self.state = 1723
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1724
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1727
            self.match(XplorMRParser.Assign)
            self.state = 1728
            self.selection()
            self.state = 1729
            self.selection()
            self.state = 1730
            self.selection()
            self.state = 1731
            self.selection()
            self.state = 1732
            self.selection()
            self.state = 1733
            self.selection()
            self.state = 1734
            self.selection()
            self.state = 1735
            self.selection()
            self.state = 1736
            self.number()
            self.state = 1737
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1782
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1739
                self.angle_db_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1740
                self.match(XplorMRParser.Classification)
                self.state = 1742
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1741
                    self.match(XplorMRParser.Equ_op)


                self.state = 1744
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1745
                self.match(XplorMRParser.DerivFlag)
                self.state = 1746
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1747
                self.match(XplorMRParser.Expectation)
                self.state = 1748
                self.match(XplorMRParser.Integer)
                self.state = 1749
                self.match(XplorMRParser.Integer)
                self.state = 1750
                self.number_s()
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1751
                self.match(XplorMRParser.Error)
                self.state = 1752
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1753
                self.match(XplorMRParser.ForceConstant)
                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1754
                    self.match(XplorMRParser.Equ_op)


                self.state = 1757
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1758
                self.match(XplorMRParser.Nrestraints)
                self.state = 1760
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1759
                    self.match(XplorMRParser.Equ_op)


                self.state = 1762
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1763
                self.match(XplorMRParser.Potential)
                self.state = 1764
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1765
                self.match(XplorMRParser.Print)
                self.state = 1766
                self.match(XplorMRParser.Threshold)
                self.state = 1767
                self.number_s()
                self.state = 1774
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1768
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1769
                    self.match(XplorMRParser.Classification)
                    self.state = 1771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1770
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1773
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1776
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1777
                self.match(XplorMRParser.Size)
                self.state = 1778
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Dihedral or _la==XplorMRParser.AngleDb):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1779
                self.match(XplorMRParser.Integer)
                self.state = 1780
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1781
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1784
            self.match(XplorMRParser.Assign)
            self.state = 1785
            self.selection()
            self.state = 1786
            self.selection()
            self.state = 1787
            self.selection()
            self.state = 1788
            self.selection()
            self.state = 1789
            self.selection()
            self.state = 1790
            self.selection()
            self.state = 1791
            self.selection()
            self.state = 1792
            self.selection()
            self.state = 1793
            self.selection()
            self.state = 1794
            self.selection()
            self.state = 1795
            self.selection()
            self.state = 1797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1796
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,0)


        def pre_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_PT(self):
            return self.getToken(XplorMRParser.Simple_name_PT, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_PT(self):
            return self.getToken(XplorMRParser.Equ_op_PT, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1856
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1799
                self.pre_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1800
                self.pre_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1801
                self.match(XplorMRParser.Classification)
                self.state = 1803
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1802
                    self.match(XplorMRParser.Equ_op)


                self.state = 1805
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1806
                self.match(XplorMRParser.ForceConstant)
                self.state = 1808
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1807
                    self.match(XplorMRParser.Equ_op)


                self.state = 1810
                self.match(XplorMRParser.Simple_name)
                self.state = 1811
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1812
                self.match(XplorMRParser.Nrestraints)
                self.state = 1814
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1813
                    self.match(XplorMRParser.Equ_op)


                self.state = 1816
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1817
                self.match(XplorMRParser.Potential)
                self.state = 1819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op_PT:
                    self.state = 1818
                    self.match(XplorMRParser.Equ_op_PT)


                self.state = 1821
                self.match(XplorMRParser.Simple_name_PT)
                self.state = 1822
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Kconst]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1823
                self.match(XplorMRParser.Kconst)
                self.state = 1825
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1824
                    self.match(XplorMRParser.Equ_op)


                self.state = 1827
                self.match(XplorMRParser.Simple_name)
                self.state = 1828
                self.number_s()
                pass
            elif token in [XplorMRParser.Omega]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1829
                self.match(XplorMRParser.Omega)
                self.state = 1831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1830
                    self.match(XplorMRParser.Equ_op)


                self.state = 1833
                self.match(XplorMRParser.Simple_name)
                self.state = 1834
                self.number_s()
                pass
            elif token in [XplorMRParser.Tauc]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1835
                self.match(XplorMRParser.Tauc)
                self.state = 1837
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1836
                    self.match(XplorMRParser.Equ_op)


                self.state = 1839
                self.match(XplorMRParser.Simple_name)
                self.state = 1840
                self.number_s()
                self.state = 1841
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1843
                self.match(XplorMRParser.Print)
                self.state = 1844
                self.match(XplorMRParser.Threshold)
                self.state = 1845
                self.number_s()
                self.state = 1852
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1846
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1847
                    self.match(XplorMRParser.Classification)
                    self.state = 1849
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1848
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1851
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1854
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Debug]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1855
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pre_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1858
            self.match(XplorMRParser.Assign)
            self.state = 1859
            self.selection()
            self.state = 1860
            self.selection()
            self.state = 1861
            self.number()
            self.state = 1863
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 1862
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,0)


        def pcs_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pcs_statement)
        self._la = 0 # Token type
        try:
            self.state = 1914
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1865
                self.pcs_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1866
                self.pcs_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1867
                self.match(XplorMRParser.Classification)
                self.state = 1869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1868
                    self.match(XplorMRParser.Equ_op)


                self.state = 1871
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1872
                self.match(XplorMRParser.Tolerance)
                self.state = 1873
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1874
                self.match(XplorMRParser.Coefficients)
                self.state = 1875
                self.number_s()
                self.state = 1876
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1878
                self.match(XplorMRParser.ForceConstant)
                self.state = 1880
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1879
                    self.match(XplorMRParser.Equ_op)


                self.state = 1882
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1883
                self.match(XplorMRParser.Nrestraints)
                self.state = 1885
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1884
                    self.match(XplorMRParser.Equ_op)


                self.state = 1887
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1888
                self.match(XplorMRParser.Print)
                self.state = 1889
                self.match(XplorMRParser.Threshold)
                self.state = 1890
                self.number_s()
                self.state = 1897
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1891
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1892
                    self.match(XplorMRParser.Classification)
                    self.state = 1894
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1893
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1896
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1899
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1900
                self.match(XplorMRParser.Save)
                self.state = 1901
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1902
                self.match(XplorMRParser.Fmed)
                self.state = 1903
                self.number_s()
                self.state = 1904
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1906
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1907
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1908
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1909
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1910
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1911
                self.match(XplorMRParser.Soff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 18)
                self.state = 1912
                self.match(XplorMRParser.Frun)
                self.state = 1913
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_pcs_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1916
            self.match(XplorMRParser.Assign)
            self.state = 1917
            self.selection()
            self.state = 1918
            self.selection()
            self.state = 1919
            self.selection()
            self.state = 1920
            self.selection()
            self.state = 1921
            self.selection()
            self.state = 1922
            self.number()
            self.state = 1924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
            if la_ == 1:
                self.state = 1923
                self.number()


            self.state = 1927
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 1926
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_prdc_statement)
        self._la = 0 # Token type
        try:
            self.state = 1964
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1929
                self.prdc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1930
                self.match(XplorMRParser.Classification)
                self.state = 1932
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1931
                    self.match(XplorMRParser.Equ_op)


                self.state = 1934
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1935
                self.match(XplorMRParser.Tolerance)
                self.state = 1936
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1937
                self.match(XplorMRParser.Coefficients)
                self.state = 1938
                self.number_s()
                self.state = 1939
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1941
                self.match(XplorMRParser.ForceConstant)
                self.state = 1943
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1942
                    self.match(XplorMRParser.Equ_op)


                self.state = 1945
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1946
                self.match(XplorMRParser.Nrestraints)
                self.state = 1948
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1947
                    self.match(XplorMRParser.Equ_op)


                self.state = 1950
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1951
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1952
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1953
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1954
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1955
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1956
                self.match(XplorMRParser.Frun)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1957
                self.match(XplorMRParser.Print)
                self.state = 1958
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1959
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1960
                self.match(XplorMRParser.Save)
                self.state = 1961
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1962
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1963
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_prdc_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1966
            self.match(XplorMRParser.Assign)
            self.state = 1967
            self.selection()
            self.state = 1968
            self.selection()
            self.state = 1969
            self.selection()
            self.state = 1970
            self.selection()
            self.state = 1971
            self.selection()
            self.state = 1972
            self.selection()
            self.state = 1973
            self.number()
            self.state = 1975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 1974
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_porientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1997
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1977
                self.porientation_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1978
                self.match(XplorMRParser.Classification)
                self.state = 1980
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1979
                    self.match(XplorMRParser.Equ_op)


                self.state = 1982
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1983
                self.match(XplorMRParser.ForceConstant)
                self.state = 1985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1984
                    self.match(XplorMRParser.Equ_op)


                self.state = 1987
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1988
                self.match(XplorMRParser.Nrestraints)
                self.state = 1990
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1989
                    self.match(XplorMRParser.Equ_op)


                self.state = 1992
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1993
                self.match(XplorMRParser.Print)
                self.state = 1994
                self.match(XplorMRParser.Threshold)
                self.state = 1995
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1996
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1999
            self.match(XplorMRParser.Assign)
            self.state = 2000
            self.selection()
            self.state = 2001
            self.selection()
            self.state = 2002
            self.number()
            self.state = 2003
            self.number()
            self.state = 2004
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_pccr_statement)
        self._la = 0 # Token type
        try:
            self.state = 2032
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2006
                self.pccr_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2007
                self.match(XplorMRParser.Classification)
                self.state = 2009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2008
                    self.match(XplorMRParser.Equ_op)


                self.state = 2011
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Weip]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2012
                self.match(XplorMRParser.Weip)
                self.state = 2013
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2014
                self.match(XplorMRParser.Coefficients)
                self.state = 2015
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2016
                self.match(XplorMRParser.ForceConstant)
                self.state = 2018
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2017
                    self.match(XplorMRParser.Equ_op)


                self.state = 2020
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2021
                self.match(XplorMRParser.Nrestraints)
                self.state = 2023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2022
                    self.match(XplorMRParser.Equ_op)


                self.state = 2025
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2026
                self.match(XplorMRParser.Print)
                self.state = 2027
                self.match(XplorMRParser.Threshold)
                self.state = 2028
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2029
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2030
                self.match(XplorMRParser.Frun)
                self.state = 2031
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_pccr_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2034
            self.match(XplorMRParser.Assign)
            self.state = 2035
            self.selection()
            self.state = 2036
            self.selection()
            self.state = 2037
            self.selection()
            self.state = 2038
            self.number()
            self.state = 2040
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0):
                self.state = 2039
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,0)


        def hbond_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assign_loopContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_hbond_statement)
        self._la = 0 # Token type
        try:
            self.state = 2063
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2042
                self.hbond_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2043
                self.hbond_assign_loop()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2044
                self.match(XplorMRParser.Classification)
                self.state = 2046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2045
                    self.match(XplorMRParser.Equ_op)


                self.state = 2048
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2049
                self.match(XplorMRParser.ForceConstant)
                self.state = 2051
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2050
                    self.match(XplorMRParser.Equ_op)


                self.state = 2053
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2054
                self.match(XplorMRParser.Nrestraints)
                self.state = 2056
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2055
                    self.match(XplorMRParser.Equ_op)


                self.state = 2058
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2059
                self.match(XplorMRParser.Print)
                self.state = 2060
                self.match(XplorMRParser.Threshold)
                self.state = 2061
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2062
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2065
            self.match(XplorMRParser.Assign)
            self.state = 2066
            self.selection()
            self.state = 2067
            self.selection()
            self.state = 2068
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,0)


        def hbond_db_assign_loop(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assign_loopContext,0)


        def Kdir(self):
            return self.getToken(XplorMRParser.Kdir, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Klin(self):
            return self.getToken(XplorMRParser.Klin, 0)

        def Nseg(self):
            return self.getToken(XplorMRParser.Nseg, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Nmin(self):
            return self.getToken(XplorMRParser.Nmin, 0)

        def Nmax(self):
            return self.getToken(XplorMRParser.Nmax, 0)

        def Segm(self):
            return self.getToken(XplorMRParser.Segm, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Ohcut(self):
            return self.getToken(XplorMRParser.Ohcut, 0)

        def Coh1cut(self):
            return self.getToken(XplorMRParser.Coh1cut, 0)

        def Coh2cut(self):
            return self.getToken(XplorMRParser.Coh2cut, 0)

        def Ohncut(self):
            return self.getToken(XplorMRParser.Ohncut, 0)

        def Updfrq(self):
            return self.getToken(XplorMRParser.Updfrq, 0)

        def Prnfrq(self):
            return self.getToken(XplorMRParser.Prnfrq, 0)

        def Freemode(self):
            return self.getToken(XplorMRParser.Freemode, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_statement" ):
                listener.enterHbond_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_statement" ):
                listener.exitHbond_db_statement(self)




    def hbond_db_statement(self):

        localctx = XplorMRParser.Hbond_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_hbond_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 2137
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2070
                self.hbond_db_assign()
                pass
            elif token in [XplorMRParser.For]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2071
                self.hbond_db_assign_loop()
                pass
            elif token in [XplorMRParser.Kdir]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2072
                self.match(XplorMRParser.Kdir)
                self.state = 2074
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2073
                    self.match(XplorMRParser.Equ_op)


                self.state = 2076
                self.number_s()
                pass
            elif token in [XplorMRParser.Klin]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2077
                self.match(XplorMRParser.Klin)
                self.state = 2079
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2078
                    self.match(XplorMRParser.Equ_op)


                self.state = 2081
                self.number_s()
                pass
            elif token in [XplorMRParser.Nseg]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2082
                self.match(XplorMRParser.Nseg)
                self.state = 2084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2083
                    self.match(XplorMRParser.Equ_op)


                self.state = 2086
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmin]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2087
                self.match(XplorMRParser.Nmin)
                self.state = 2089
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2088
                    self.match(XplorMRParser.Equ_op)


                self.state = 2091
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmax]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2092
                self.match(XplorMRParser.Nmax)
                self.state = 2094
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2093
                    self.match(XplorMRParser.Equ_op)


                self.state = 2096
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Segm]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2097
                self.match(XplorMRParser.Segm)
                self.state = 2099
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2098
                    self.match(XplorMRParser.Equ_op)


                self.state = 2101
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Ohcut]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2102
                self.match(XplorMRParser.Ohcut)
                self.state = 2104
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2103
                    self.match(XplorMRParser.Equ_op)


                self.state = 2106
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh1cut]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2107
                self.match(XplorMRParser.Coh1cut)
                self.state = 2109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2108
                    self.match(XplorMRParser.Equ_op)


                self.state = 2111
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh2cut]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2112
                self.match(XplorMRParser.Coh2cut)
                self.state = 2114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2113
                    self.match(XplorMRParser.Equ_op)


                self.state = 2116
                self.number_s()
                pass
            elif token in [XplorMRParser.Ohncut]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2117
                self.match(XplorMRParser.Ohncut)
                self.state = 2119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2118
                    self.match(XplorMRParser.Equ_op)


                self.state = 2121
                self.number_s()
                pass
            elif token in [XplorMRParser.Updfrq]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2122
                self.match(XplorMRParser.Updfrq)
                self.state = 2124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2123
                    self.match(XplorMRParser.Equ_op)


                self.state = 2126
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Prnfrq]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2127
                self.match(XplorMRParser.Prnfrq)
                self.state = 2129
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2128
                    self.match(XplorMRParser.Equ_op)


                self.state = 2131
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Freemode]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2132
                self.match(XplorMRParser.Freemode)
                self.state = 2134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2133
                    self.match(XplorMRParser.Equ_op)


                self.state = 2136
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assignContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign" ):
                listener.enterHbond_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign" ):
                listener.exitHbond_db_assign(self)




    def hbond_db_assign(self):

        localctx = XplorMRParser.Hbond_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_hbond_db_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2139
            self.match(XplorMRParser.Assign)
            self.state = 2140
            self.selection()
            self.state = 2141
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_restraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ncs(self):
            return self.getToken(XplorMRParser.Ncs, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ncs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ncs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ncs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_ncs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_restraint" ):
                listener.enterNcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_restraint" ):
                listener.exitNcs_restraint(self)




    def ncs_restraint(self):

        localctx = XplorMRParser.Ncs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_ncs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2143
            self.match(XplorMRParser.Ncs)
            self.state = 2144
            self.match(XplorMRParser.Restraints)
            self.state = 2148
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Print_any) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize))) != 0):
                self.state = 2145
                self.ncs_statement()
                self.state = 2150
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2151
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ncs_group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ncs_group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ncs_group_statementContext,i)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def Print_any(self):
            return self.getToken(XplorMRParser.Print_any, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ncs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_statement" ):
                listener.enterNcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_statement" ):
                listener.exitNcs_statement(self)




    def ncs_statement(self):

        localctx = XplorMRParser.Ncs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_ncs_statement)
        self._la = 0 # Token type
        try:
            self.state = 2163
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2153
                self.match(XplorMRParser.Group)
                self.state = 2157
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Weight or _la==XplorMRParser.Equivalence or _la==XplorMRParser.Sigb:
                    self.state = 2154
                    self.ncs_group_statement()
                    self.state = 2159
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2160
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2161
                self.match(XplorMRParser.Initialize)
                pass
            elif token in [XplorMRParser.Print_any]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2162
                self.match(XplorMRParser.Print_any)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ncs_group_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Equivalence(self):
            return self.getToken(XplorMRParser.Equivalence, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Sigb(self):
            return self.getToken(XplorMRParser.Sigb, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ncs_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNcs_group_statement" ):
                listener.enterNcs_group_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNcs_group_statement" ):
                listener.exitNcs_group_statement(self)




    def ncs_group_statement(self):

        localctx = XplorMRParser.Ncs_group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_ncs_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 2180
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Equivalence]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2165
                self.match(XplorMRParser.Equivalence)
                self.state = 2167
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2166
                    self.match(XplorMRParser.Equ_op)


                self.state = 2169
                self.selection()
                pass
            elif token in [XplorMRParser.Sigb]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2170
                self.match(XplorMRParser.Sigb)
                self.state = 2172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2171
                    self.match(XplorMRParser.Equ_op)


                self.state = 2174
                self.number_s()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2175
                self.match(XplorMRParser.Weight)
                self.state = 2177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2176
                    self.match(XplorMRParser.Equ_op)


                self.state = 2179
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2182
            self.match(XplorMRParser.L_paren)
            self.state = 2183
            self.selection_expression()
            self.state = 2184
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2186
            self.term()
            self.state = 2191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 2187
                self.match(XplorMRParser.Or_op)
                self.state = 2188
                self.term()
                self.state = 2193
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2194
            self.factor(0)
            self.state = 2199
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.And_op:
                self.state = 2195
                self.match(XplorMRParser.And_op)
                self.state = 2196
                self.factor(0)
                self.state = 2201
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Store1(self):
            return self.getToken(XplorMRParser.Store1, 0)

        def Store2(self):
            return self.getToken(XplorMRParser.Store2, 0)

        def Store3(self):
            return self.getToken(XplorMRParser.Store3, 0)

        def Store4(self):
            return self.getToken(XplorMRParser.Store4, 0)

        def Store5(self):
            return self.getToken(XplorMRParser.Store5, 0)

        def Store6(self):
            return self.getToken(XplorMRParser.Store6, 0)

        def Store7(self):
            return self.getToken(XplorMRParser.Store7, 0)

        def Store8(self):
            return self.getToken(XplorMRParser.Store8, 0)

        def Store9(self):
            return self.getToken(XplorMRParser.Store9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Donor(self):
            return self.getToken(XplorMRParser.Donor, 0)

        def Acceptor(self):
            return self.getToken(XplorMRParser.Acceptor, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 196
        self.enterRecursionRule(localctx, 196, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2341
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 2203
                self.match(XplorMRParser.L_paren)
                self.state = 2204
                self.selection_expression()
                self.state = 2205
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 2207
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 2208
                self.match(XplorMRParser.Atom)
                self.state = 2209
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2210
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2211
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 2212
                self.match(XplorMRParser.Attribute)
                self.state = 2214
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Abs:
                    self.state = 2213
                    self.match(XplorMRParser.Abs)


                self.state = 2216
                self.match(XplorMRParser.Attr_properties)
                self.state = 2217
                self.match(XplorMRParser.Comparison_ops)
                self.state = 2218
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 2219
                self.match(XplorMRParser.BondedTo)
                self.state = 2220
                self.factor(29)
                pass

            elif la_ == 6:
                self.state = 2221
                self.match(XplorMRParser.ByGroup)
                self.state = 2222
                self.factor(28)
                pass

            elif la_ == 7:
                self.state = 2223
                self.match(XplorMRParser.ByRes)
                self.state = 2224
                self.factor(27)
                pass

            elif la_ == 8:
                self.state = 2225
                self.match(XplorMRParser.Chemical)
                self.state = 2233
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2226
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2227
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2230
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                    if la_ == 1:
                        self.state = 2228
                        self.match(XplorMRParser.Colon)
                        self.state = 2229
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2232
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 2235
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 2236
                self.match(XplorMRParser.Id)
                self.state = 2237
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 2238
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 2239
                self.match(XplorMRParser.Name)
                self.state = 2252
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2240
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2241
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2244
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                    if la_ == 1:
                        self.state = 2242
                        self.match(XplorMRParser.Colon)
                        self.state = 2243
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 2246
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 2249
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,256,self._ctx)
                    if la_ == 1:
                        self.state = 2247
                        self.match(XplorMRParser.Colon)
                        self.state = 2248
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2251
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 2254
                self.match(XplorMRParser.Not_op)
                self.state = 2255
                self.factor(21)
                pass

            elif la_ == 14:
                self.state = 2256
                self.match(XplorMRParser.Point)
                self.state = 2257
                self.match(XplorMRParser.L_paren)
                self.state = 2258
                self.number_f()
                self.state = 2260
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2259
                    self.match(XplorMRParser.Comma)


                self.state = 2262
                self.number_f()
                self.state = 2264
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2263
                    self.match(XplorMRParser.Comma)


                self.state = 2266
                self.number_f()
                self.state = 2267
                self.match(XplorMRParser.R_paren)
                self.state = 2268
                self.match(XplorMRParser.Cut)
                self.state = 2269
                self.number_f()
                pass

            elif la_ == 15:
                self.state = 2271
                self.match(XplorMRParser.Point)
                self.state = 2272
                self.match(XplorMRParser.L_paren)
                self.state = 2273
                self.match(XplorMRParser.Tail)
                self.state = 2275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 2274
                    self.match(XplorMRParser.Equ_op)


                self.state = 2277
                self.selection()
                self.state = 2279
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 2278
                    self.match(XplorMRParser.Comma)


                self.state = 2286
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Head:
                    self.state = 2281
                    self.match(XplorMRParser.Head)
                    self.state = 2283
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 2282
                        self.match(XplorMRParser.Equ_op)


                    self.state = 2285
                    self.selection()


                self.state = 2288
                self.match(XplorMRParser.R_paren)
                self.state = 2289
                self.match(XplorMRParser.Cut)
                self.state = 2290
                self.number_f()
                pass

            elif la_ == 16:
                self.state = 2292
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 2293
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 2294
                self.match(XplorMRParser.Residue)
                self.state = 2302
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integers]:
                    self.state = 2295
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [XplorMRParser.Integer]:
                    self.state = 2296
                    self.match(XplorMRParser.Integer)
                    self.state = 2299
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,264,self._ctx)
                    if la_ == 1:
                        self.state = 2297
                        self.match(XplorMRParser.Colon)
                        self.state = 2298
                        self.match(XplorMRParser.Integer)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2301
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 2304
                self.match(XplorMRParser.Resname)
                self.state = 2312
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2305
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2306
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2309
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,266,self._ctx)
                    if la_ == 1:
                        self.state = 2307
                        self.match(XplorMRParser.Colon)
                        self.state = 2308
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2311
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 2314
                self.match(XplorMRParser.SegIdentifier)
                self.state = 2327
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 2315
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 2316
                    self.match(XplorMRParser.Simple_name)
                    self.state = 2319
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
                    if la_ == 1:
                        self.state = 2317
                        self.match(XplorMRParser.Colon)
                        self.state = 2318
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 2321
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 2324
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                    if la_ == 1:
                        self.state = 2322
                        self.match(XplorMRParser.Colon)
                        self.state = 2323
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                elif token in [XplorMRParser.Symbol_name]:
                    self.state = 2326
                    self.match(XplorMRParser.Symbol_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 2329
                self.match(XplorMRParser.Store1)
                pass

            elif la_ == 22:
                self.state = 2330
                self.match(XplorMRParser.Store2)
                pass

            elif la_ == 23:
                self.state = 2331
                self.match(XplorMRParser.Store3)
                pass

            elif la_ == 24:
                self.state = 2332
                self.match(XplorMRParser.Store4)
                pass

            elif la_ == 25:
                self.state = 2333
                self.match(XplorMRParser.Store5)
                pass

            elif la_ == 26:
                self.state = 2334
                self.match(XplorMRParser.Store6)
                pass

            elif la_ == 27:
                self.state = 2335
                self.match(XplorMRParser.Store7)
                pass

            elif la_ == 28:
                self.state = 2336
                self.match(XplorMRParser.Store8)
                pass

            elif la_ == 29:
                self.state = 2337
                self.match(XplorMRParser.Store9)
                pass

            elif la_ == 30:
                self.state = 2338
                self.match(XplorMRParser.Tag)
                pass

            elif la_ == 31:
                self.state = 2339
                self.match(XplorMRParser.Donor)
                pass

            elif la_ == 32:
                self.state = 2340
                self.match(XplorMRParser.Acceptor)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 2351
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,273,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 2349
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2343
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 2344
                        self.match(XplorMRParser.Around)
                        self.state = 2345
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 2346
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 2347
                        self.match(XplorMRParser.Saround)
                        self.state = 2348
                        self.number_f()
                        pass

             
                self.state = 2353
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,273,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = XplorMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2354
            _la = self._input.LA(1)
            if not(((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = XplorMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2356
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Symbol_name(self):
            return self.getToken(XplorMRParser.Symbol_name, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = XplorMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2358
            _la = self._input.LA(1)
            if not(((((_la - 192)) & ~0x3f) == 0 and ((1 << (_la - 192)) & ((1 << (XplorMRParser.Integer - 192)) | (1 << (XplorMRParser.Real - 192)) | (1 << (XplorMRParser.Symbol_name - 192)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = XplorMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2360
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(XplorMRParser.Flags, 0)

        def Include(self):
            return self.getToken(XplorMRParser.Include, 0)

        def End_FL(self):
            return self.getToken(XplorMRParser.End_FL, 0)

        def Exclude(self):
            return self.getToken(XplorMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Class_name)
            else:
                return self.getToken(XplorMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(XplorMRParser.Any_class, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = XplorMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2362
            self.match(XplorMRParser.Flags)
            self.state = 2373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Exclude:
                self.state = 2363
                self.match(XplorMRParser.Exclude)
                self.state = 2371
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Include, XplorMRParser.Class_name]:
                    self.state = 2367
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==XplorMRParser.Class_name:
                        self.state = 2364
                        self.match(XplorMRParser.Class_name)
                        self.state = 2369
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [XplorMRParser.Any_class]:
                    self.state = 2370
                    self.match(XplorMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 2375
            self.match(XplorMRParser.Include)
            self.state = 2379
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Class_name:
                self.state = 2376
                self.match(XplorMRParser.Class_name)
                self.state = 2381
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2382
            self.match(XplorMRParser.End_FL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(XplorMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = XplorMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2384
            self.match(XplorMRParser.Vector)
            self.state = 2385
            self.vector_mode()
            self.state = 2386
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(XplorMRParser.Do_Lp, 0)

        def Identity_Lp(self):
            return self.getToken(XplorMRParser.Identity_Lp, 0)

        def Show(self):
            return self.getToken(XplorMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = XplorMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 2394
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Do_Lp, XplorMRParser.Identity_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2388
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Do_Lp or _la==XplorMRParser.Identity_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2389
                self.vector_expression()
                self.state = 2390
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2392
                self.match(XplorMRParser.Show)
                self.state = 2393
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = XplorMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2396
            self.match(XplorMRParser.Atom_properties_VE)
            self.state = 2399
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Equ_op_VE:
                self.state = 2397
                self.match(XplorMRParser.Equ_op_VE)
                self.state = 2398
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = XplorMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2401
            self.vflc()
            self.state = 2404
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (XplorMRParser.Add_op_VE - 244)) | (1 << (XplorMRParser.Sub_op_VE - 244)) | (1 << (XplorMRParser.Mul_op_VE - 244)) | (1 << (XplorMRParser.Div_op_VE - 244)) | (1 << (XplorMRParser.Exp_op_VE - 244)))) != 0):
                self.state = 2402
                _la = self._input.LA(1)
                if not(((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (XplorMRParser.Add_op_VE - 244)) | (1 << (XplorMRParser.Sub_op_VE - 244)) | (1 << (XplorMRParser.Mul_op_VE - 244)) | (1 << (XplorMRParser.Div_op_VE - 244)) | (1 << (XplorMRParser.Exp_op_VE - 244)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2403
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(XplorMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(XplorMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(XplorMRParser.Simple_name_VE, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(XplorMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = XplorMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_vflc)
        try:
            self.state = 2413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2406
                self.match(XplorMRParser.Atom_properties_VE)
                pass
            elif token in [XplorMRParser.Abs_VE, XplorMRParser.Acos_VE, XplorMRParser.Cos_VE, XplorMRParser.Decode_VE, XplorMRParser.Encode_VE, XplorMRParser.Exp_VE, XplorMRParser.Gauss_VE, XplorMRParser.Heavy_VE, XplorMRParser.Int_VE, XplorMRParser.Log10_VE, XplorMRParser.Log_VE, XplorMRParser.Max_VE, XplorMRParser.Maxw_VE, XplorMRParser.Min_VE, XplorMRParser.Mod_VE, XplorMRParser.Norm_VE, XplorMRParser.Random_VE, XplorMRParser.Sign_VE, XplorMRParser.Sin_VE, XplorMRParser.Sqrt_VE, XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2407
                self.vector_func_call()
                pass
            elif token in [XplorMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2408
                self.match(XplorMRParser.Integer_VE)
                pass
            elif token in [XplorMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2409
                self.match(XplorMRParser.Real_VE)
                pass
            elif token in [XplorMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2410
                self.match(XplorMRParser.Simple_name_VE)
                pass
            elif token in [XplorMRParser.Symbol_name_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2411
                self.match(XplorMRParser.Symbol_name_VE)
                pass
            elif token in [XplorMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2412
                self.match(XplorMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(XplorMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(XplorMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(XplorMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(XplorMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(XplorMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(XplorMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(XplorMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(XplorMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(XplorMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(XplorMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(XplorMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(XplorMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(XplorMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma_VE)
            else:
                return self.getToken(XplorMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(XplorMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(XplorMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(XplorMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(XplorMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(XplorMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(XplorMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(XplorMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(XplorMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(XplorMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = XplorMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 2534
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2415
                self.match(XplorMRParser.Abs_VE)
                self.state = 2416
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2417
                self.vflc()
                self.state = 2418
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2420
                self.match(XplorMRParser.Acos_VE)
                self.state = 2421
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2422
                self.vflc()
                self.state = 2423
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2425
                self.match(XplorMRParser.Cos_VE)
                self.state = 2426
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2427
                self.vflc()
                self.state = 2428
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2430
                self.match(XplorMRParser.Decode_VE)
                self.state = 2431
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2432
                self.vflc()
                self.state = 2433
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2435
                self.match(XplorMRParser.Encode_VE)
                self.state = 2436
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2437
                self.vflc()
                self.state = 2438
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2440
                self.match(XplorMRParser.Exp_VE)
                self.state = 2441
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2442
                self.vflc()
                self.state = 2443
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2445
                self.match(XplorMRParser.Gauss_VE)
                self.state = 2446
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2447
                self.vflc()
                self.state = 2448
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2450
                self.match(XplorMRParser.Heavy_VE)
                self.state = 2451
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2452
                self.vflc()
                self.state = 2453
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2455
                self.match(XplorMRParser.Int_VE)
                self.state = 2456
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2457
                self.vflc()
                self.state = 2458
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2460
                self.match(XplorMRParser.Log10_VE)
                self.state = 2461
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2462
                self.vflc()
                self.state = 2463
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2465
                self.match(XplorMRParser.Log_VE)
                self.state = 2466
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2467
                self.vflc()
                self.state = 2468
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2470
                self.match(XplorMRParser.Max_VE)
                self.state = 2471
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2472
                self.vflc()
                self.state = 2477
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2473
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2474
                    self.vflc()
                    self.state = 2479
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2480
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2482
                self.match(XplorMRParser.Maxw_VE)
                self.state = 2483
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2484
                self.vflc()
                self.state = 2485
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2487
                self.match(XplorMRParser.Min_VE)
                self.state = 2488
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2489
                self.vflc()
                self.state = 2494
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2490
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2491
                    self.vflc()
                    self.state = 2496
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2497
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2499
                self.match(XplorMRParser.Mod_VE)
                self.state = 2500
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2501
                self.vflc()
                self.state = 2502
                self.match(XplorMRParser.Comma_VE)
                self.state = 2503
                self.vflc()
                self.state = 2504
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2506
                self.match(XplorMRParser.Norm_VE)
                self.state = 2507
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2508
                self.vflc()
                self.state = 2509
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2511
                self.match(XplorMRParser.Random_VE)
                self.state = 2512
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2513
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2514
                self.match(XplorMRParser.Sign_VE)
                self.state = 2515
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2516
                self.vflc()
                self.state = 2517
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2519
                self.match(XplorMRParser.Sin_VE)
                self.state = 2520
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2521
                self.vflc()
                self.state = 2522
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2524
                self.match(XplorMRParser.Sqrt_VE)
                self.state = 2525
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2526
                self.vflc()
                self.state = 2527
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2529
                self.match(XplorMRParser.Tan_VE)
                self.state = 2530
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2531
                self.vflc()
                self.state = 2532
                self.match(XplorMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(XplorMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(XplorMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(XplorMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(XplorMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(XplorMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(XplorMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(XplorMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(XplorMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(XplorMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(XplorMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = XplorMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2536
            _la = self._input.LA(1)
            if not(((((_la - 283)) & ~0x3f) == 0 and ((1 << (_la - 283)) & ((1 << (XplorMRParser.Average_VS - 283)) | (1 << (XplorMRParser.Element_VS - 283)) | (1 << (XplorMRParser.Max_VS - 283)) | (1 << (XplorMRParser.Min_VS - 283)) | (1 << (XplorMRParser.Norm_VS - 283)) | (1 << (XplorMRParser.Rms_VS - 283)) | (1 << (XplorMRParser.Sum_VS - 283)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2537
            self.match(XplorMRParser.L_paren_VS)
            self.state = 2538
            self.match(XplorMRParser.Atom_properties_VS)
            self.state = 2539
            self.match(XplorMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Evaluate_Lp(self):
            return self.getToken(XplorMRParser.Evaluate_Lp, 0)

        def Symbol_name_VE(self):
            return self.getToken(XplorMRParser.Symbol_name_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_statement" ):
                listener.enterEvaluate_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_statement" ):
                listener.exitEvaluate_statement(self)




    def evaluate_statement(self):

        localctx = XplorMRParser.Evaluate_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_evaluate_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2541
            self.match(XplorMRParser.Evaluate_Lp)
            self.state = 2542
            self.match(XplorMRParser.Symbol_name_VE)
            self.state = 2543
            self.match(XplorMRParser.Equ_op_VE)
            self.state = 2544
            self.evaluate_operation()
            self.state = 2545
            self.match(XplorMRParser.R_paren_VE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Evaluate_operationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def evaluate_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Evaluate_operationContext,0)


        def Add_op_VE(self):
            return self.getToken(XplorMRParser.Add_op_VE, 0)

        def Sub_op_VE(self):
            return self.getToken(XplorMRParser.Sub_op_VE, 0)

        def Mul_op_VE(self):
            return self.getToken(XplorMRParser.Mul_op_VE, 0)

        def Div_op_VE(self):
            return self.getToken(XplorMRParser.Div_op_VE, 0)

        def Exp_op_VE(self):
            return self.getToken(XplorMRParser.Exp_op_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_evaluate_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEvaluate_operation" ):
                listener.enterEvaluate_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEvaluate_operation" ):
                listener.exitEvaluate_operation(self)




    def evaluate_operation(self):

        localctx = XplorMRParser.Evaluate_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_evaluate_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2547
            self.vflc()
            self.state = 2550
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (XplorMRParser.Add_op_VE - 244)) | (1 << (XplorMRParser.Sub_op_VE - 244)) | (1 << (XplorMRParser.Mul_op_VE - 244)) | (1 << (XplorMRParser.Div_op_VE - 244)) | (1 << (XplorMRParser.Exp_op_VE - 244)))) != 0):
                self.state = 2548
                _la = self._input.LA(1)
                if not(((((_la - 244)) & ~0x3f) == 0 and ((1 << (_la - 244)) & ((1 << (XplorMRParser.Add_op_VE - 244)) | (1 << (XplorMRParser.Sub_op_VE - 244)) | (1 << (XplorMRParser.Mul_op_VE - 244)) | (1 << (XplorMRParser.Div_op_VE - 244)) | (1 << (XplorMRParser.Exp_op_VE - 244)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2549
                self.evaluate_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Patch_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Patch(self):
            return self.getToken(XplorMRParser.Patch, 0)

        def Reference(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Reference)
            else:
                return self.getToken(XplorMRParser.Reference, i)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Nil(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Nil)
            else:
                return self.getToken(XplorMRParser.Nil, i)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def HBonded(self):
            return self.getToken(XplorMRParser.HBonded, 0)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(XplorMRParser.Improper, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_patch_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPatch_statement" ):
                listener.enterPatch_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPatch_statement" ):
                listener.exitPatch_statement(self)




    def patch_statement(self):

        localctx = XplorMRParser.Patch_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_patch_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2552
            self.match(XplorMRParser.Patch)
            self.state = 2554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Dihedral or _la==XplorMRParser.AngleDb or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.HBonded - 177)) | (1 << (XplorMRParser.Improper - 177)) | (1 << (XplorMRParser.Simple_name - 177)))) != 0):
                self.state = 2553
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Dihedral or _la==XplorMRParser.AngleDb or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.HBonded - 177)) | (1 << (XplorMRParser.Improper - 177)) | (1 << (XplorMRParser.Simple_name - 177)))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2556
            self.match(XplorMRParser.Reference)
            self.state = 2557
            self.match(XplorMRParser.Equ_op)
            self.state = 2558
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Nil or _la==XplorMRParser.Integer):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2559
            self.match(XplorMRParser.Equ_op)
            self.state = 2560
            self.selection()
            self.state = 2566
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Reference:
                self.state = 2561
                self.match(XplorMRParser.Reference)
                self.state = 2562
                self.match(XplorMRParser.Equ_op)
                self.state = 2563
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Nil or _la==XplorMRParser.Integer):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2564
                self.match(XplorMRParser.Equ_op)
                self.state = 2565
                self.selection()


            self.state = 2568
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_settingContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Parameter(self):
            return self.getToken(XplorMRParser.Parameter, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def parameter_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Parameter_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Parameter_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_parameter_setting

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_setting" ):
                listener.enterParameter_setting(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_setting" ):
                listener.exitParameter_setting(self)




    def parameter_setting(self):

        localctx = XplorMRParser.Parameter_settingContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_parameter_setting)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2570
            self.match(XplorMRParser.Parameter)
            self.state = 2574
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Reset or _la==XplorMRParser.Dihedral or _la==XplorMRParser.AngleDb or _la==XplorMRParser.BondedTo or ((((_la - 177)) & ~0x3f) == 0 and ((1 << (_la - 177)) & ((1 << (XplorMRParser.HBonded - 177)) | (1 << (XplorMRParser.Improper - 177)) | (1 << (XplorMRParser.NBFix - 177)) | (1 << (XplorMRParser.NonB - 177)) | (1 << (XplorMRParser.VDWOff - 177)) | (1 << (XplorMRParser.Verbose - 177)))) != 0):
                self.state = 2571
                self.parameter_statement()
                self.state = 2576
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2577
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Parameter_statementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def UB(self):
            return self.getToken(XplorMRParser.UB, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def Improper(self):
            return self.getToken(XplorMRParser.Improper, 0)

        def Mult(self):
            return self.getToken(XplorMRParser.Mult, 0)

        def HBonded(self):
            return self.getToken(XplorMRParser.HBonded, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def NBFix(self):
            return self.getToken(XplorMRParser.NBFix, 0)

        def NonB(self):
            return self.getToken(XplorMRParser.NonB, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def VDWOff(self):
            return self.getToken(XplorMRParser.VDWOff, 0)

        def Verbose(self):
            return self.getToken(XplorMRParser.Verbose, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_parameter_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameter_statement" ):
                listener.enterParameter_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameter_statement" ):
                listener.exitParameter_statement(self)




    def parameter_statement(self):

        localctx = XplorMRParser.Parameter_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_parameter_statement)
        self._la = 0 # Token type
        try:
            self.state = 2634
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.AngleDb]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2579
                self.match(XplorMRParser.AngleDb)
                self.state = 2580
                self.match(XplorMRParser.Simple_name)
                self.state = 2581
                self.match(XplorMRParser.Simple_name)
                self.state = 2582
                self.match(XplorMRParser.Simple_name)
                self.state = 2583
                self.number_s()
                self.state = 2584
                self.number_s()
                self.state = 2589
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.UB:
                    self.state = 2585
                    self.match(XplorMRParser.UB)
                    self.state = 2586
                    self.number_s()
                    self.state = 2587
                    self.number_s()


                pass
            elif token in [XplorMRParser.BondedTo]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2591
                self.match(XplorMRParser.BondedTo)
                self.state = 2592
                self.match(XplorMRParser.Simple_name)
                self.state = 2593
                self.match(XplorMRParser.Simple_name)
                self.state = 2594
                self.number_s()
                self.state = 2595
                self.number_s()
                pass
            elif token in [XplorMRParser.Dihedral, XplorMRParser.Improper]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2597
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Dihedral or _la==XplorMRParser.Improper):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2598
                self.match(XplorMRParser.Simple_name)
                self.state = 2599
                self.match(XplorMRParser.Simple_name)
                self.state = 2600
                self.match(XplorMRParser.Simple_name)
                self.state = 2601
                self.match(XplorMRParser.Simple_name)
                self.state = 2604
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Mult:
                    self.state = 2602
                    self.match(XplorMRParser.Mult)
                    self.state = 2603
                    self.match(XplorMRParser.Integer)


                self.state = 2606
                self.number_s()
                self.state = 2607
                self.match(XplorMRParser.Integer)
                self.state = 2608
                self.number_s()
                pass
            elif token in [XplorMRParser.HBonded]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2610
                self.match(XplorMRParser.HBonded)
                self.state = 2611
                self.match(XplorMRParser.Simple_names)
                self.state = 2612
                self.match(XplorMRParser.Simple_names)
                self.state = 2613
                self.number_s()
                self.state = 2614
                self.number_s()
                pass
            elif token in [XplorMRParser.NBFix]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2616
                self.match(XplorMRParser.NBFix)
                self.state = 2617
                self.match(XplorMRParser.Simple_name)
                self.state = 2618
                self.match(XplorMRParser.Simple_name)
                self.state = 2619
                self.number_s()
                self.state = 2620
                self.number_s()
                self.state = 2621
                self.number_s()
                self.state = 2622
                self.number_s()
                pass
            elif token in [XplorMRParser.NonB]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2624
                self.match(XplorMRParser.NonB)
                self.state = 2625
                self.match(XplorMRParser.Simple_name)
                self.state = 2626
                self.number_s()
                self.state = 2627
                self.number_s()
                self.state = 2628
                self.number_s()
                self.state = 2629
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset, XplorMRParser.VDWOff]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2631
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Reset or _la==XplorMRParser.VDWOff):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2632
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Verbose]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2633
                self.match(XplorMRParser.Verbose)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign_loop" ):
                listener.enterNoe_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign_loop" ):
                listener.exitNoe_assign_loop(self)




    def noe_assign_loop(self):

        localctx = XplorMRParser.Noe_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_noe_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2636
            self.match(XplorMRParser.For)
            self.state = 2637
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2638
            self.match(XplorMRParser.In_CF)
            self.state = 2639
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2658
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.state = 2643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2640
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2645
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2646
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2652
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2657
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2660
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2661
            self.match(XplorMRParser.Loop)
            self.state = 2662
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2667
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2665
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2663
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2664
                    self.noe_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2669
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2670
            self.match(XplorMRParser.End)
            self.state = 2671
            self.match(XplorMRParser.Loop)
            self.state = 2672
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign_loop" ):
                listener.enterDihedral_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign_loop" ):
                listener.exitDihedral_assign_loop(self)




    def dihedral_assign_loop(self):

        localctx = XplorMRParser.Dihedral_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_dihedral_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2674
            self.match(XplorMRParser.For)
            self.state = 2675
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2676
            self.match(XplorMRParser.In_CF)
            self.state = 2677
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2696
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.state = 2681
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2678
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2683
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2684
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2689
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2693
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2690
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2695
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2698
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2699
            self.match(XplorMRParser.Loop)
            self.state = 2700
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2703
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2701
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2702
                    self.dihedral_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2707
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2708
            self.match(XplorMRParser.End)
            self.state = 2709
            self.match(XplorMRParser.Loop)
            self.state = 2710
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign_loop" ):
                listener.enterSani_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign_loop" ):
                listener.exitSani_assign_loop(self)




    def sani_assign_loop(self):

        localctx = XplorMRParser.Sani_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_sani_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2712
            self.match(XplorMRParser.For)
            self.state = 2713
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2714
            self.match(XplorMRParser.In_CF)
            self.state = 2715
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2734
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,307,self._ctx)
            if la_ == 1:
                self.state = 2719
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2716
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2721
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2722
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2727
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2728
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2733
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2736
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2737
            self.match(XplorMRParser.Loop)
            self.state = 2738
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2743
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2741
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2739
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2740
                    self.sani_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2745
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2746
            self.match(XplorMRParser.End)
            self.state = 2747
            self.match(XplorMRParser.Loop)
            self.state = 2748
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign_loop" ):
                listener.enterXadc_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign_loop" ):
                listener.exitXadc_assign_loop(self)




    def xadc_assign_loop(self):

        localctx = XplorMRParser.Xadc_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_xadc_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2750
            self.match(XplorMRParser.For)
            self.state = 2751
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2752
            self.match(XplorMRParser.In_CF)
            self.state = 2753
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
            if la_ == 1:
                self.state = 2757
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2754
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2759
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2763
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2760
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2765
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2769
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2766
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2771
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2774
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2775
            self.match(XplorMRParser.Loop)
            self.state = 2776
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2781
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2779
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2777
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2778
                    self.xadc_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2783
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2784
            self.match(XplorMRParser.End)
            self.state = 2785
            self.match(XplorMRParser.Loop)
            self.state = 2786
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign_loop" ):
                listener.enterCoup_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign_loop" ):
                listener.exitCoup_assign_loop(self)




    def coup_assign_loop(self):

        localctx = XplorMRParser.Coup_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_coup_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2788
            self.match(XplorMRParser.For)
            self.state = 2789
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2790
            self.match(XplorMRParser.In_CF)
            self.state = 2791
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2810
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,319,self._ctx)
            if la_ == 1:
                self.state = 2795
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2792
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2797
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2801
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2798
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2803
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2804
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2812
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2813
            self.match(XplorMRParser.Loop)
            self.state = 2814
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2819
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2817
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2815
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2816
                    self.coup_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2821
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2822
            self.match(XplorMRParser.End)
            self.state = 2823
            self.match(XplorMRParser.Loop)
            self.state = 2824
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign_loop" ):
                listener.enterColl_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign_loop" ):
                listener.exitColl_assign_loop(self)




    def coll_assign_loop(self):

        localctx = XplorMRParser.Coll_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_coll_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2826
            self.match(XplorMRParser.For)
            self.state = 2827
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2828
            self.match(XplorMRParser.In_CF)
            self.state = 2829
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2848
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,325,self._ctx)
            if la_ == 1:
                self.state = 2833
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2830
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2835
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2839
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2836
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2841
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2842
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2850
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2851
            self.match(XplorMRParser.Loop)
            self.state = 2852
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2857
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2855
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2853
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2854
                    self.coll_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2859
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2860
            self.match(XplorMRParser.End)
            self.state = 2861
            self.match(XplorMRParser.Loop)
            self.state = 2862
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign_loop" ):
                listener.enterCsa_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign_loop" ):
                listener.exitCsa_assign_loop(self)




    def csa_assign_loop(self):

        localctx = XplorMRParser.Csa_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_csa_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2864
            self.match(XplorMRParser.For)
            self.state = 2865
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2866
            self.match(XplorMRParser.In_CF)
            self.state = 2867
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2886
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,331,self._ctx)
            if la_ == 1:
                self.state = 2871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2868
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2873
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2877
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2874
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2879
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2880
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2885
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2888
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2889
            self.match(XplorMRParser.Loop)
            self.state = 2890
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2895
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2893
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2891
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2892
                    self.csa_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2897
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2898
            self.match(XplorMRParser.End)
            self.state = 2899
            self.match(XplorMRParser.Loop)
            self.state = 2900
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign_loop" ):
                listener.enterPre_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign_loop" ):
                listener.exitPre_assign_loop(self)




    def pre_assign_loop(self):

        localctx = XplorMRParser.Pre_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_pre_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2902
            self.match(XplorMRParser.For)
            self.state = 2903
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2904
            self.match(XplorMRParser.In_CF)
            self.state = 2905
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2924
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,337,self._ctx)
            if la_ == 1:
                self.state = 2909
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2906
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2911
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2915
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2912
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2917
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2921
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2918
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2923
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2926
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2927
            self.match(XplorMRParser.Loop)
            self.state = 2928
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2933
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2931
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2929
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2930
                    self.pre_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2935
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2936
            self.match(XplorMRParser.End)
            self.state = 2937
            self.match(XplorMRParser.Loop)
            self.state = 2938
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign_loop" ):
                listener.enterPcs_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign_loop" ):
                listener.exitPcs_assign_loop(self)




    def pcs_assign_loop(self):

        localctx = XplorMRParser.Pcs_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_pcs_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2940
            self.match(XplorMRParser.For)
            self.state = 2941
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2942
            self.match(XplorMRParser.In_CF)
            self.state = 2943
            self.match(XplorMRParser.L_paren_CF)
            self.state = 2962
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,343,self._ctx)
            if la_ == 1:
                self.state = 2947
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2944
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2949
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2953
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2950
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2955
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2959
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2956
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2961
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 2964
            self.match(XplorMRParser.R_paren_CF)
            self.state = 2965
            self.match(XplorMRParser.Loop)
            self.state = 2966
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 2971
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 2969
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 2967
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 2968
                    self.pcs_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2973
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2974
            self.match(XplorMRParser.End)
            self.state = 2975
            self.match(XplorMRParser.Loop)
            self.state = 2976
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign_loop" ):
                listener.enterHbond_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign_loop" ):
                listener.exitHbond_assign_loop(self)




    def hbond_assign_loop(self):

        localctx = XplorMRParser.Hbond_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_hbond_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2978
            self.match(XplorMRParser.For)
            self.state = 2979
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 2980
            self.match(XplorMRParser.In_CF)
            self.state = 2981
            self.match(XplorMRParser.L_paren_CF)
            self.state = 3000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,349,self._ctx)
            if la_ == 1:
                self.state = 2985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 2982
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 2987
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 2991
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 2988
                    self.match(XplorMRParser.Real_CF)
                    self.state = 2993
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 2997
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 2994
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 2999
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 3002
            self.match(XplorMRParser.R_paren_CF)
            self.state = 3003
            self.match(XplorMRParser.Loop)
            self.state = 3004
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 3009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 3007
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 3005
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 3006
                    self.hbond_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3011
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3012
            self.match(XplorMRParser.End)
            self.state = 3013
            self.match(XplorMRParser.Loop)
            self.state = 3014
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assign_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign_loop" ):
                listener.enterHbond_db_assign_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign_loop" ):
                listener.exitHbond_db_assign_loop(self)




    def hbond_db_assign_loop(self):

        localctx = XplorMRParser.Hbond_db_assign_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_hbond_db_assign_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3016
            self.match(XplorMRParser.For)
            self.state = 3017
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 3018
            self.match(XplorMRParser.In_CF)
            self.state = 3019
            self.match(XplorMRParser.L_paren_CF)
            self.state = 3038
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,355,self._ctx)
            if la_ == 1:
                self.state = 3023
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 3020
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 3025
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3029
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 3026
                    self.match(XplorMRParser.Real_CF)
                    self.state = 3031
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 3035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 3032
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 3037
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 3040
            self.match(XplorMRParser.R_paren_CF)
            self.state = 3041
            self.match(XplorMRParser.Loop)
            self.state = 3042
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 3047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or _la==XplorMRParser.Evaluate_Lp:
                self.state = 3045
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 3043
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Assign]:
                    self.state = 3044
                    self.hbond_db_assign()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3049
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3050
            self.match(XplorMRParser.End)
            self.state = 3051
            self.match(XplorMRParser.Loop)
            self.state = 3052
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_group_loopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def For(self):
            return self.getToken(XplorMRParser.For, 0)

        def Symbol_name_CF(self):
            return self.getToken(XplorMRParser.Symbol_name_CF, 0)

        def In_CF(self):
            return self.getToken(XplorMRParser.In_CF, 0)

        def L_paren_CF(self):
            return self.getToken(XplorMRParser.L_paren_CF, 0)

        def R_paren_CF(self):
            return self.getToken(XplorMRParser.R_paren_CF, 0)

        def Loop(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Loop)
            else:
                return self.getToken(XplorMRParser.Loop, i)

        def Simple_name_LL(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_LL)
            else:
                return self.getToken(XplorMRParser.Simple_name_LL, i)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def evaluate_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Evaluate_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Evaluate_statementContext,i)


        def planar_group(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_groupContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_groupContext,i)


        def Integer_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer_CF)
            else:
                return self.getToken(XplorMRParser.Integer_CF, i)

        def Real_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real_CF)
            else:
                return self.getToken(XplorMRParser.Real_CF, i)

        def Simple_name_CF(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name_CF)
            else:
                return self.getToken(XplorMRParser.Simple_name_CF, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_group_loop

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_group_loop" ):
                listener.enterPlanar_group_loop(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_group_loop" ):
                listener.exitPlanar_group_loop(self)




    def planar_group_loop(self):

        localctx = XplorMRParser.Planar_group_loopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_planar_group_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3054
            self.match(XplorMRParser.For)
            self.state = 3055
            self.match(XplorMRParser.Symbol_name_CF)
            self.state = 3056
            self.match(XplorMRParser.In_CF)
            self.state = 3057
            self.match(XplorMRParser.L_paren_CF)
            self.state = 3076
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                self.state = 3061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Integer_CF:
                    self.state = 3058
                    self.match(XplorMRParser.Integer_CF)
                    self.state = 3063
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 3067
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Real_CF:
                    self.state = 3064
                    self.match(XplorMRParser.Real_CF)
                    self.state = 3069
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.state = 3073
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Simple_name_CF:
                    self.state = 3070
                    self.match(XplorMRParser.Simple_name_CF)
                    self.state = 3075
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


            self.state = 3078
            self.match(XplorMRParser.R_paren_CF)
            self.state = 3079
            self.match(XplorMRParser.Loop)
            self.state = 3080
            self.match(XplorMRParser.Simple_name_LL)
            self.state = 3085
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Group or _la==XplorMRParser.Evaluate_Lp:
                self.state = 3083
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Evaluate_Lp]:
                    self.state = 3081
                    self.evaluate_statement()
                    pass
                elif token in [XplorMRParser.Group]:
                    self.state = 3082
                    self.planar_group()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3087
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3088
            self.match(XplorMRParser.End)
            self.state = 3089
            self.match(XplorMRParser.Loop)
            self.state = 3090
            self.match(XplorMRParser.Simple_name_LL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[98] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         




