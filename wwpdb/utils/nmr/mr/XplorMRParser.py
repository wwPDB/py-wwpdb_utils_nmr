# Generated from XplorMRParser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u010a")
        buf.write("\u0832\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3")
        buf.write("\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\7\2")
        buf.write("\u00f8\n\2\f\2\16\2\u00fb\13\2\3\2\3\2\3\3\3\3\7\3\u0101")
        buf.write("\n\3\f\3\16\3\u0104\13\3\3\3\3\3\3\4\5\4\u0109\n\4\3\4")
        buf.write("\3\4\7\4\u010d\n\4\f\4\16\4\u0110\13\4\3\4\3\4\3\5\3\5")
        buf.write("\7\5\u0116\n\5\f\5\16\5\u0119\13\5\3\5\3\5\3\5\7\5\u011e")
        buf.write("\n\5\f\5\16\5\u0121\13\5\3\5\3\5\3\5\7\5\u0126\n\5\f\5")
        buf.write("\16\5\u0129\13\5\3\5\3\5\3\5\7\5\u012e\n\5\f\5\16\5\u0131")
        buf.write("\13\5\3\5\3\5\3\5\7\5\u0136\n\5\f\5\16\5\u0139\13\5\3")
        buf.write("\5\5\5\u013c\n\5\3\6\5\6\u013f\n\6\3\6\3\6\7\6\u0143\n")
        buf.write("\6\f\6\16\6\u0146\13\6\3\6\3\6\3\7\3\7\7\7\u014c\n\7\f")
        buf.write("\7\16\7\u014f\13\7\3\7\3\7\3\b\3\b\7\b\u0155\n\b\f\b\16")
        buf.write("\b\u0158\13\b\3\b\3\b\3\t\3\t\7\t\u015e\n\t\f\t\16\t\u0161")
        buf.write("\13\t\3\t\3\t\3\n\3\n\7\n\u0167\n\n\f\n\16\n\u016a\13")
        buf.write("\n\3\n\3\n\3\13\3\13\7\13\u0170\n\13\f\13\16\13\u0173")
        buf.write("\13\13\3\13\3\13\3\f\3\f\7\f\u0179\n\f\f\f\16\f\u017c")
        buf.write("\13\f\3\f\3\f\3\r\3\r\7\r\u0182\n\r\f\r\16\r\u0185\13")
        buf.write("\r\3\r\3\r\3\16\3\16\7\16\u018b\n\16\f\16\16\16\u018e")
        buf.write("\13\16\3\16\3\16\3\17\3\17\7\17\u0194\n\17\f\17\16\17")
        buf.write("\u0197\13\17\3\17\3\17\3\20\3\20\7\20\u019d\n\20\f\20")
        buf.write("\16\20\u01a0\13\20\3\20\3\20\3\21\3\21\7\21\u01a6\n\21")
        buf.write("\f\21\16\21\u01a9\13\21\3\21\3\21\3\22\3\22\7\22\u01af")
        buf.write("\n\22\f\22\16\22\u01b2\13\22\3\22\3\22\3\23\3\23\7\23")
        buf.write("\u01b8\n\23\f\23\16\23\u01bb\13\23\3\23\3\23\3\24\3\24")
        buf.write("\7\24\u01c1\n\24\f\24\16\24\u01c4\13\24\3\24\3\24\3\25")
        buf.write("\3\25\7\25\u01ca\n\25\f\25\16\25\u01cd\13\25\3\25\3\25")
        buf.write("\3\26\3\26\7\26\u01d3\n\26\f\26\16\26\u01d6\13\26\3\26")
        buf.write("\3\26\3\27\3\27\7\27\u01dc\n\27\f\27\16\27\u01df\13\27")
        buf.write("\3\27\3\27\3\30\3\30\7\30\u01e5\n\30\f\30\16\30\u01e8")
        buf.write("\13\30\3\30\3\30\3\31\3\31\7\31\u01ee\n\31\f\31\16\31")
        buf.write("\u01f1\13\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\5\32\u0201\n\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\5\32\u0214\n\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\5\32\u0221\n\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32")
        buf.write("\5\32\u0239\n\32\3\32\5\32\u023c\n\32\3\33\3\33\3\33\3")
        buf.write("\33\3\33\3\33\3\33\7\33\u0245\n\33\f\33\16\33\u0248\13")
        buf.write("\33\3\33\3\33\3\33\3\33\7\33\u024e\n\33\f\33\16\33\u0251")
        buf.write("\13\33\3\34\3\34\5\34\u0255\n\34\3\34\3\34\3\34\5\34\u025a")
        buf.write("\n\34\3\34\3\34\3\34\3\34\3\34\5\34\u0261\n\34\3\35\3")
        buf.write("\35\5\35\u0265\n\35\3\35\3\35\3\35\5\35\u026a\n\35\3\35")
        buf.write("\3\35\3\35\5\35\u026f\n\35\3\35\3\35\3\35\5\35\u0274\n")
        buf.write("\35\3\35\3\35\3\35\5\35\u0279\n\35\3\35\3\35\3\35\5\35")
        buf.write("\u027e\n\35\3\35\3\35\3\35\5\35\u0283\n\35\3\35\5\35\u0286")
        buf.write("\n\35\3\36\3\36\3\36\5\36\u028b\n\36\3\36\3\36\3\36\3")
        buf.write("\36\5\36\u0291\n\36\3\37\3\37\3\37\3\37\3\37\3\37\3\37")
        buf.write("\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \5 \u02af\n \3!\3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\5!\u02bb\n!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\5\"\u02d7\n\"\3#\3#\3#\3#\3#\3#\3#\3#\3#")
        buf.write("\3#\3#\3#\3#\3#\3#\5#\u02e8\n#\3$\3$\3$\5$\u02ed\n$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u02fa\n$\3$\3$\3$\3")
        buf.write("$\3$\5$\u0301\n$\3%\3%\3%\3%\3%\3%\3%\3%\3%\3%\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u031a\n&\3\'\3\'\3")
        buf.write("\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(\3(")
        buf.write("\3(\3(\3(\3(\3(\3(\3(\3(\5(\u0337\n(\3)\3)\3)\3)\3)\3")
        buf.write(")\3)\3)\3*\3*\7*\u0343\n*\f*\16*\u0346\13*\3*\3*\5*\u034a")
        buf.write("\n*\3+\3+\5+\u034e\n+\3+\3+\3+\5+\u0353\n+\3+\5+\u0356")
        buf.write("\n+\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5")
        buf.write(",\u0368\n,\3,\3,\3,\3,\3,\3,\5,\u0370\n,\3-\3-\3-\3-\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\5.\u0381\n.\3.\3.\3.\3")
        buf.write(".\3.\3.\5.\u0389\n.\3.\3.\3.\3.\5.\u038f\n.\3.\3.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\5.\u039a\n.\3.\5.\u039d\n.\3/\3/\3/\3")
        buf.write("/\3/\3/\3/\3/\3/\3/\5/\u03a9\n/\3/\3/\3/\3/\3/\5/\u03b0")
        buf.write("\n/\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\60\3\60\3\60\3\60\3\60\5\60\u03cc\n\60\3\61\3\61\3")
        buf.write("\61\3\61\3\61\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\62")
        buf.write("\3\62\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u03ee\n")
        buf.write("\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\3\63\5\63\u03f8")
        buf.write("\n\63\3\63\3\63\3\63\5\63\u03fd\n\63\3\64\3\64\3\64\5")
        buf.write("\64\u0402\n\64\3\64\3\64\5\64\u0406\n\64\3\65\3\65\3\65")
        buf.write("\3\65\3\66\3\66\3\66\3\66\3\66\3\66\5\66\u0412\n\66\3")
        buf.write("\66\3\66\3\67\3\67\3\67\38\38\38\39\39\39\3:\3:\3:\3;")
        buf.write("\3;\3;\3;\3;\3;\3;\3;\5;\u042a\n;\3<\3<\3<\3=\3=\3=\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\3=\5=\u043e\n=\3=\3=\3")
        buf.write("=\3=\5=\u0444\n=\3=\3=\3=\3=\5=\u044a\n=\3=\3=\3=\3=\3")
        buf.write("=\3=\3=\3=\3=\3=\5=\u0456\n=\3=\3=\3=\3=\5=\u045c\n=\3")
        buf.write("=\3=\3=\3=\5=\u0462\n=\3=\3=\3=\3=\3=\3=\5=\u046a\n=\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\3=\5=\u0474\n=\3=\3=\3=\3=\5=\u047a")
        buf.write("\n=\3=\3=\3=\3=\5=\u0480\n=\3=\3=\3=\3=\3=\3=\3=\3=\3")
        buf.write("=\5=\u048b\n=\3=\5=\u048e\n=\3=\5=\u0491\n=\3=\3=\5=\u0495")
        buf.write("\n=\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u04a1\n>\3>\3>\3")
        buf.write(">\3>\3>\5>\u04a8\n>\3>\3>\3>\3>\3>\5>\u04af\n>\3?\3?\3")
        buf.write("?\3?\3?\5?\u04b6\n?\3@\3@\3@\3@\3@\3A\3A\3A\3A\3A\3A\3")
        buf.write("A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\3A\5A\u04d3")
        buf.write("\nA\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u0505\nC\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\5C\u0518")
        buf.write("\nC\3D\3D\3D\3D\3D\3D\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u053b")
        buf.write("\nE\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3F\3G\3G\3G\3G\3")
        buf.write("G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3")
        buf.write("G\3G\3G\3G\5G\u0563\nG\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\5H\u057b\nH\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3J\3J\3J\3J\3J\3J\3J\3J\3")
        buf.write("J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\3J\5J\u05a0\n")
        buf.write("J\3J\3J\3J\3J\3J\3J\5J\u05a8\nJ\3K\3K\3K\3K\3K\3K\3K\3")
        buf.write("K\3K\3K\3K\3K\3K\5K\u05b7\nK\3L\3L\3L\5L\u05bc\nL\3L\3")
        buf.write("L\3L\5L\u05c1\nL\3L\3L\3L\3L\5L\u05c7\nL\3L\3L\3L\5L\u05cc")
        buf.write("\nL\3L\3L\3L\3L\5L\u05d2\nL\3L\3L\3L\3L\5L\u05d8\nL\3")
        buf.write("L\3L\3L\3L\5L\u05de\nL\3L\3L\3L\3L\3L\3L\3L\3L\3L\3L\5")
        buf.write("L\u05ea\nL\3L\3L\5L\u05ee\nL\3M\3M\3M\3M\3M\3M\3N\3N\3")
        buf.write("N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\5N\u0609")
        buf.write("\nN\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\3N\5N\u061a")
        buf.write("\nN\3O\3O\3O\3O\3O\3O\3O\3O\3O\3P\3P\3P\3P\3P\3P\3P\3")
        buf.write("P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3")
        buf.write("P\5P\u063f\nP\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3R\3R\3R\3")
        buf.write("R\3R\3R\3R\3R\3R\3R\3R\5R\u0656\nR\3S\3S\3S\3S\3S\3S\3")
        buf.write("S\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\3T\5")
        buf.write("T\u0670\nT\3U\3U\3U\3U\3U\3U\3U\3V\3V\3V\3V\3V\3V\3V\3")
        buf.write("V\3V\3V\3V\5V\u0684\nV\3W\3W\3W\3W\3W\3X\3X\3X\5X\u068e")
        buf.write("\nX\3X\3X\3X\5X\u0693\nX\3X\3X\3X\5X\u0698\nX\3X\3X\3")
        buf.write("X\5X\u069d\nX\3X\3X\3X\5X\u06a2\nX\3X\3X\3X\5X\u06a7\n")
        buf.write("X\3X\3X\3X\5X\u06ac\nX\3X\3X\3X\5X\u06b1\nX\3X\3X\3X\5")
        buf.write("X\u06b6\nX\3X\3X\3X\5X\u06bb\nX\3X\3X\3X\5X\u06c0\nX\3")
        buf.write("X\3X\3X\5X\u06c5\nX\3X\3X\3X\5X\u06ca\nX\3X\5X\u06cd\n")
        buf.write("X\3Y\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3[\3[\3[\7[\u06da\n[\f[\16[")
        buf.write("\u06dd\13[\3\\\3\\\3\\\7\\\u06e2\n\\\f\\\16\\\u06e5\13")
        buf.write("\\\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\5]\u06f3\n]\3]")
        buf.write("\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\3]\5]\u0703\n]\5")
        buf.write("]\u0705\n]\3]\3]\3]\3]\3]\3]\3]\3]\3]\5]\u0710\n]\5]\u0712")
        buf.write("\n]\3]\3]\3]\3]\3]\3]\5]\u071a\n]\3]\3]\5]\u071e\n]\3")
        buf.write("]\3]\3]\3]\3]\3]\3]\3]\3]\5]\u0729\n]\3]\3]\5]\u072d\n")
        buf.write("]\3]\3]\5]\u0731\n]\3]\5]\u0734\n]\3]\3]\3]\3]\3]\3]\3")
        buf.write("]\3]\3]\3]\3]\5]\u0741\n]\5]\u0743\n]\3]\3]\3]\3]\3]\5")
        buf.write("]\u074a\n]\5]\u074c\n]\3]\3]\3]\3]\3]\5]\u0753\n]\3]\3")
        buf.write("]\3]\5]\u0758\n]\5]\u075a\n]\3]\3]\3]\3]\3]\3]\3]\3]\3")
        buf.write("]\3]\3]\3]\5]\u0768\n]\3]\3]\3]\3]\3]\3]\7]\u0770\n]\f")
        buf.write("]\16]\u0773\13]\3^\3^\3_\3_\3`\3`\3a\3a\3b\3b\3b\7b\u0780")
        buf.write("\nb\fb\16b\u0783\13b\3b\5b\u0786\nb\5b\u0788\nb\3b\3b")
        buf.write("\7b\u078c\nb\fb\16b\u078f\13b\3b\3b\3c\3c\3c\3c\3d\3d")
        buf.write("\3d\3d\3d\3d\5d\u079d\nd\3e\3e\3e\5e\u07a2\ne\3f\3f\3")
        buf.write("f\7f\u07a7\nf\ff\16f\u07aa\13f\3g\3g\3g\3g\3g\3g\5g\u07b2")
        buf.write("\ng\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3")
        buf.write("h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3")
        buf.write("h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3")
        buf.write("h\3h\3h\3h\3h\3h\3h\3h\7h\u07f0\nh\fh\16h\u07f3\13h\3")
        buf.write("h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\7h\u0801\nh\fh\16h")
        buf.write("\u0804\13h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3")
        buf.write("h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3h\3")
        buf.write("h\3h\3h\3h\3h\5h\u082b\nh\3i\3i\3i\3i\3i\3i\2\3\u00b8")
        buf.write("j\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"$&(*,.\60\62")
        buf.write("\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082")
        buf.write("\u0084\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094")
        buf.write("\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2\u00a4\u00a6")
        buf.write("\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4\u00b6\u00b8")
        buf.write("\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca")
        buf.write("\u00cc\u00ce\u00d0\2\t\3\2,-\3\2\u00b4\u00b5\4\2\u00b0")
        buf.write("\u00b0\u00b6\u00b6\4\2\u00b0\u00b0\u00b2\u00b2\3\2\u00a6")
        buf.write("\u00a7\3\2\u00de\u00e2\3\2\u0102\u0108\2\u09c0\2\u00f9")
        buf.write("\3\2\2\2\4\u00fe\3\2\2\2\6\u0108\3\2\2\2\b\u013b\3\2\2")
        buf.write("\2\n\u013e\3\2\2\2\f\u0149\3\2\2\2\16\u0152\3\2\2\2\20")
        buf.write("\u015b\3\2\2\2\22\u0164\3\2\2\2\24\u016d\3\2\2\2\26\u0176")
        buf.write("\3\2\2\2\30\u017f\3\2\2\2\32\u0188\3\2\2\2\34\u0191\3")
        buf.write("\2\2\2\36\u019a\3\2\2\2 \u01a3\3\2\2\2\"\u01ac\3\2\2\2")
        buf.write("$\u01b5\3\2\2\2&\u01be\3\2\2\2(\u01c7\3\2\2\2*\u01d0\3")
        buf.write("\2\2\2,\u01d9\3\2\2\2.\u01e2\3\2\2\2\60\u01eb\3\2\2\2")
        buf.write("\62\u023b\3\2\2\2\64\u023d\3\2\2\2\66\u0260\3\2\2\28\u0285")
        buf.write("\3\2\2\2:\u0290\3\2\2\2<\u0292\3\2\2\2>\u02ae\3\2\2\2")
        buf.write("@\u02b0\3\2\2\2B\u02d6\3\2\2\2D\u02d8\3\2\2\2F\u0300\3")
        buf.write("\2\2\2H\u0302\3\2\2\2J\u0319\3\2\2\2L\u031b\3\2\2\2N\u0336")
        buf.write("\3\2\2\2P\u0338\3\2\2\2R\u0349\3\2\2\2T\u0355\3\2\2\2")
        buf.write("V\u036f\3\2\2\2X\u0371\3\2\2\2Z\u039c\3\2\2\2\\\u039e")
        buf.write("\3\2\2\2^\u03cb\3\2\2\2`\u03cd\3\2\2\2b\u03d6\3\2\2\2")
        buf.write("d\u03fc\3\2\2\2f\u03fe\3\2\2\2h\u0407\3\2\2\2j\u040b\3")
        buf.write("\2\2\2l\u0415\3\2\2\2n\u0418\3\2\2\2p\u041b\3\2\2\2r\u041e")
        buf.write("\3\2\2\2t\u0421\3\2\2\2v\u042b\3\2\2\2x\u0494\3\2\2\2")
        buf.write("z\u0496\3\2\2\2|\u04b5\3\2\2\2~\u04b7\3\2\2\2\u0080\u04d2")
        buf.write("\3\2\2\2\u0082\u04d4\3\2\2\2\u0084\u0517\3\2\2\2\u0086")
        buf.write("\u0519\3\2\2\2\u0088\u053a\3\2\2\2\u008a\u053c\3\2\2\2")
        buf.write("\u008c\u0562\3\2\2\2\u008e\u057a\3\2\2\2\u0090\u057c\3")
        buf.write("\2\2\2\u0092\u05a7\3\2\2\2\u0094\u05a9\3\2\2\2\u0096\u05ed")
        buf.write("\3\2\2\2\u0098\u05ef\3\2\2\2\u009a\u0619\3\2\2\2\u009c")
        buf.write("\u061b\3\2\2\2\u009e\u063e\3\2\2\2\u00a0\u0640\3\2\2\2")
        buf.write("\u00a2\u0655\3\2\2\2\u00a4\u0657\3\2\2\2\u00a6\u066f\3")
        buf.write("\2\2\2\u00a8\u0671\3\2\2\2\u00aa\u0683\3\2\2\2\u00ac\u0685")
        buf.write("\3\2\2\2\u00ae\u06cc\3\2\2\2\u00b0\u06ce\3\2\2\2\u00b2")
        buf.write("\u06d2\3\2\2\2\u00b4\u06d6\3\2\2\2\u00b6\u06de\3\2\2\2")
        buf.write("\u00b8\u0767\3\2\2\2\u00ba\u0774\3\2\2\2\u00bc\u0776\3")
        buf.write("\2\2\2\u00be\u0778\3\2\2\2\u00c0\u077a\3\2\2\2\u00c2\u077c")
        buf.write("\3\2\2\2\u00c4\u0792\3\2\2\2\u00c6\u079c\3\2\2\2\u00c8")
        buf.write("\u079e\3\2\2\2\u00ca\u07a3\3\2\2\2\u00cc\u07b1\3\2\2\2")
        buf.write("\u00ce\u082a\3\2\2\2\u00d0\u082c\3\2\2\2\u00d2\u00f8\5")
        buf.write("\4\3\2\u00d3\u00f8\5\6\4\2\u00d4\u00f8\5\b\5\2\u00d5\u00f8")
        buf.write("\5\n\6\2\u00d6\u00f8\5\f\7\2\u00d7\u00f8\5\16\b\2\u00d8")
        buf.write("\u00f8\5\20\t\2\u00d9\u00f8\5\22\n\2\u00da\u00f8\5\24")
        buf.write("\13\2\u00db\u00f8\5\26\f\2\u00dc\u00f8\5\30\r\2\u00dd")
        buf.write("\u00f8\5\32\16\2\u00de\u00f8\5\34\17\2\u00df\u00f8\5\36")
        buf.write("\20\2\u00e0\u00f8\5 \21\2\u00e1\u00f8\5\"\22\2\u00e2\u00f8")
        buf.write("\5$\23\2\u00e3\u00f8\5&\24\2\u00e4\u00f8\5(\25\2\u00e5")
        buf.write("\u00f8\5*\26\2\u00e6\u00f8\5,\27\2\u00e7\u00f8\5.\30\2")
        buf.write("\u00e8\u00f8\5\60\31\2\u00e9\u00f8\5\u00c2b\2\u00ea\u00f8")
        buf.write("\5\u00c4c\2\u00eb\u00f8\5\64\33\2\u00ec\u00f8\5<\37\2")
        buf.write("\u00ed\u00f8\5@!\2\u00ee\u00f8\5R*\2\u00ef\u00f8\5\u00ac")
        buf.write("W\2\u00f0\u00f8\5\u00b0Y\2\u00f1\u00f8\5\\/\2\u00f2\u00f8")
        buf.write("\5X-\2\u00f3\u00f8\5~@\2\u00f4\u00f8\5\u008aF\2\u00f5")
        buf.write("\u00f8\5\u0098M\2\u00f6\u00f8\5\u009cO\2\u00f7\u00d2\3")
        buf.write("\2\2\2\u00f7\u00d3\3\2\2\2\u00f7\u00d4\3\2\2\2\u00f7\u00d5")
        buf.write("\3\2\2\2\u00f7\u00d6\3\2\2\2\u00f7\u00d7\3\2\2\2\u00f7")
        buf.write("\u00d8\3\2\2\2\u00f7\u00d9\3\2\2\2\u00f7\u00da\3\2\2\2")
        buf.write("\u00f7\u00db\3\2\2\2\u00f7\u00dc\3\2\2\2\u00f7\u00dd\3")
        buf.write("\2\2\2\u00f7\u00de\3\2\2\2\u00f7\u00df\3\2\2\2\u00f7\u00e0")
        buf.write("\3\2\2\2\u00f7\u00e1\3\2\2\2\u00f7\u00e2\3\2\2\2\u00f7")
        buf.write("\u00e3\3\2\2\2\u00f7\u00e4\3\2\2\2\u00f7\u00e5\3\2\2\2")
        buf.write("\u00f7\u00e6\3\2\2\2\u00f7\u00e7\3\2\2\2\u00f7\u00e8\3")
        buf.write("\2\2\2\u00f7\u00e9\3\2\2\2\u00f7\u00ea\3\2\2\2\u00f7\u00eb")
        buf.write("\3\2\2\2\u00f7\u00ec\3\2\2\2\u00f7\u00ed\3\2\2\2\u00f7")
        buf.write("\u00ee\3\2\2\2\u00f7\u00ef\3\2\2\2\u00f7\u00f0\3\2\2\2")
        buf.write("\u00f7\u00f1\3\2\2\2\u00f7\u00f2\3\2\2\2\u00f7\u00f3\3")
        buf.write("\2\2\2\u00f7\u00f4\3\2\2\2\u00f7\u00f5\3\2\2\2\u00f7\u00f6")
        buf.write("\3\2\2\2\u00f8\u00fb\3\2\2\2\u00f9\u00f7\3\2\2\2\u00f9")
        buf.write("\u00fa\3\2\2\2\u00fa\u00fc\3\2\2\2\u00fb\u00f9\3\2\2\2")
        buf.write("\u00fc\u00fd\7\2\2\3\u00fd\3\3\2\2\2\u00fe\u0102\7\5\2")
        buf.write("\2\u00ff\u0101\5\62\32\2\u0100\u00ff\3\2\2\2\u0101\u0104")
        buf.write("\3\2\2\2\u0102\u0100\3\2\2\2\u0102\u0103\3\2\2\2\u0103")
        buf.write("\u0105\3\2\2\2\u0104\u0102\3\2\2\2\u0105\u0106\7\4\2\2")
        buf.write("\u0106\5\3\2\2\2\u0107\u0109\7&\2\2\u0108\u0107\3\2\2")
        buf.write("\2\u0108\u0109\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010e")
        buf.write("\7\'\2\2\u010b\u010d\5:\36\2\u010c\u010b\3\2\2\2\u010d")
        buf.write("\u0110\3\2\2\2\u010e\u010c\3\2\2\2\u010e\u010f\3\2\2\2")
        buf.write("\u010f\u0111\3\2\2\2\u0110\u010e\3\2\2\2\u0111\u0112\7")
        buf.write("\4\2\2\u0112\7\3\2\2\2\u0113\u0117\7)\2\2\u0114\u0116")
        buf.write("\5> \2\u0115\u0114\3\2\2\2\u0116\u0119\3\2\2\2\u0117\u0115")
        buf.write("\3\2\2\2\u0117\u0118\3\2\2\2\u0118\u011a\3\2\2\2\u0119")
        buf.write("\u0117\3\2\2\2\u011a\u013c\7\4\2\2\u011b\u011f\t\2\2\2")
        buf.write("\u011c\u011e\5B\"\2\u011d\u011c\3\2\2\2\u011e\u0121\3")
        buf.write("\2\2\2\u011f\u011d\3\2\2\2\u011f\u0120\3\2\2\2\u0120\u0122")
        buf.write("\3\2\2\2\u0121\u011f\3\2\2\2\u0122\u013c\7\4\2\2\u0123")
        buf.write("\u0127\7\61\2\2\u0124\u0126\5F$\2\u0125\u0124\3\2\2\2")
        buf.write("\u0126\u0129\3\2\2\2\u0127\u0125\3\2\2\2\u0127\u0128\3")
        buf.write("\2\2\2\u0128\u012a\3\2\2\2\u0129\u0127\3\2\2\2\u012a\u013c")
        buf.write("\7\4\2\2\u012b\u012f\7\64\2\2\u012c\u012e\5J&\2\u012d")
        buf.write("\u012c\3\2\2\2\u012e\u0131\3\2\2\2\u012f\u012d\3\2\2\2")
        buf.write("\u012f\u0130\3\2\2\2\u0130\u0132\3\2\2\2\u0131\u012f\3")
        buf.write("\2\2\2\u0132\u013c\7\4\2\2\u0133\u0137\7\65\2\2\u0134")
        buf.write("\u0136\5N(\2\u0135\u0134\3\2\2\2\u0136\u0139\3\2\2\2\u0137")
        buf.write("\u0135\3\2\2\2\u0137\u0138\3\2\2\2\u0138\u013a\3\2\2\2")
        buf.write("\u0139\u0137\3\2\2\2\u013a\u013c\7\4\2\2\u013b\u0113\3")
        buf.write("\2\2\2\u013b\u011b\3\2\2\2\u013b\u0123\3\2\2\2\u013b\u012b")
        buf.write("\3\2\2\2\u013b\u0133\3\2\2\2\u013c\t\3\2\2\2\u013d\u013f")
        buf.write("\7&\2\2\u013e\u013d\3\2\2\2\u013e\u013f\3\2\2\2\u013f")
        buf.write("\u0140\3\2\2\2\u0140\u0144\7\66\2\2\u0141\u0143\5R*\2")
        buf.write("\u0142\u0141\3\2\2\2\u0143\u0146\3\2\2\2\u0144\u0142\3")
        buf.write("\2\2\2\u0144\u0145\3\2\2\2\u0145\u0147\3\2\2\2\u0146\u0144")
        buf.write("\3\2\2\2\u0147\u0148\7\4\2\2\u0148\13\3\2\2\2\u0149\u014d")
        buf.write("\7;\2\2\u014a\u014c\5V,\2\u014b\u014a\3\2\2\2\u014c\u014f")
        buf.write("\3\2\2\2\u014d\u014b\3\2\2\2\u014d\u014e\3\2\2\2\u014e")
        buf.write("\u0150\3\2\2\2\u014f\u014d\3\2\2\2\u0150\u0151\7\4\2\2")
        buf.write("\u0151\r\3\2\2\2\u0152\u0156\7?\2\2\u0153\u0155\5Z.\2")
        buf.write("\u0154\u0153\3\2\2\2\u0155\u0158\3\2\2\2\u0156\u0154\3")
        buf.write("\2\2\2\u0156\u0157\3\2\2\2\u0157\u0159\3\2\2\2\u0158\u0156")
        buf.write("\3\2\2\2\u0159\u015a\7\4\2\2\u015a\17\3\2\2\2\u015b\u015f")
        buf.write("\7A\2\2\u015c\u015e\5^\60\2\u015d\u015c\3\2\2\2\u015e")
        buf.write("\u0161\3\2\2\2\u015f\u015d\3\2\2\2\u015f\u0160\3\2\2\2")
        buf.write("\u0160\u0162\3\2\2\2\u0161\u015f\3\2\2\2\u0162\u0163\7")
        buf.write("\4\2\2\u0163\21\3\2\2\2\u0164\u0168\7E\2\2\u0165\u0167")
        buf.write("\5d\63\2\u0166\u0165\3\2\2\2\u0167\u016a\3\2\2\2\u0168")
        buf.write("\u0166\3\2\2\2\u0168\u0169\3\2\2\2\u0169\u016b\3\2\2\2")
        buf.write("\u016a\u0168\3\2\2\2\u016b\u016c\7\4\2\2\u016c\23\3\2")
        buf.write("\2\2\u016d\u0171\7M\2\2\u016e\u0170\5x=\2\u016f\u016e")
        buf.write("\3\2\2\2\u0170\u0173\3\2\2\2\u0171\u016f\3\2\2\2\u0171")
        buf.write("\u0172\3\2\2\2\u0172\u0174\3\2\2\2\u0173\u0171\3\2\2\2")
        buf.write("\u0174\u0175\7\4\2\2\u0175\25\3\2\2\2\u0176\u017a\7T\2")
        buf.write("\2\u0177\u0179\5|?\2\u0178\u0177\3\2\2\2\u0179\u017c\3")
        buf.write("\2\2\2\u017a\u0178\3\2\2\2\u017a\u017b\3\2\2\2\u017b\u017d")
        buf.write("\3\2\2\2\u017c\u017a\3\2\2\2\u017d\u017e\7\4\2\2\u017e")
        buf.write("\27\3\2\2\2\u017f\u0183\7U\2\2\u0180\u0182\5\u0080A\2")
        buf.write("\u0181\u0180\3\2\2\2\u0182\u0185\3\2\2\2\u0183\u0181\3")
        buf.write("\2\2\2\u0183\u0184\3\2\2\2\u0184\u0186\3\2\2\2\u0185\u0183")
        buf.write("\3\2\2\2\u0186\u0187\7\4\2\2\u0187\31\3\2\2\2\u0188\u018c")
        buf.write("\7V\2\2\u0189\u018b\5\u0084C\2\u018a\u0189\3\2\2\2\u018b")
        buf.write("\u018e\3\2\2\2\u018c\u018a\3\2\2\2\u018c\u018d\3\2\2\2")
        buf.write("\u018d\u018f\3\2\2\2\u018e\u018c\3\2\2\2\u018f\u0190\7")
        buf.write("\4\2\2\u0190\33\3\2\2\2\u0191\u0195\7Z\2\2\u0192\u0194")
        buf.write("\5\u0088E\2\u0193\u0192\3\2\2\2\u0194\u0197\3\2\2\2\u0195")
        buf.write("\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196\u0198\3\2\2\2")
        buf.write("\u0197\u0195\3\2\2\2\u0198\u0199\7\4\2\2\u0199\35\3\2")
        buf.write("\2\2\u019a\u019e\7\\\2\2\u019b\u019d\5\u008cG\2\u019c")
        buf.write("\u019b\3\2\2\2\u019d\u01a0\3\2\2\2\u019e\u019c\3\2\2\2")
        buf.write("\u019e\u019f\3\2\2\2\u019f\u01a1\3\2\2\2\u01a0\u019e\3")
        buf.write("\2\2\2\u01a1\u01a2\7\4\2\2\u01a2\37\3\2\2\2\u01a3\u01a7")
        buf.write("\7]\2\2\u01a4\u01a6\5\u008eH\2\u01a5\u01a4\3\2\2\2\u01a6")
        buf.write("\u01a9\3\2\2\2\u01a7\u01a5\3\2\2\2\u01a7\u01a8\3\2\2\2")
        buf.write("\u01a8\u01aa\3\2\2\2\u01a9\u01a7\3\2\2\2\u01aa\u01ab\7")
        buf.write("\4\2\2\u01ab!\3\2\2\2\u01ac\u01b0\7^\2\2\u01ad\u01af\5")
        buf.write("\u0092J\2\u01ae\u01ad\3\2\2\2\u01af\u01b2\3\2\2\2\u01b0")
        buf.write("\u01ae\3\2\2\2\u01b0\u01b1\3\2\2\2\u01b1\u01b3\3\2\2\2")
        buf.write("\u01b2\u01b0\3\2\2\2\u01b3\u01b4\7\4\2\2\u01b4#\3\2\2")
        buf.write("\2\u01b5\u01b9\7a\2\2\u01b6\u01b8\5\u0096L\2\u01b7\u01b6")
        buf.write("\3\2\2\2\u01b8\u01bb\3\2\2\2\u01b9\u01b7\3\2\2\2\u01b9")
        buf.write("\u01ba\3\2\2\2\u01ba\u01bc\3\2\2\2\u01bb\u01b9\3\2\2\2")
        buf.write("\u01bc\u01bd\7\4\2\2\u01bd%\3\2\2\2\u01be\u01c2\7f\2\2")
        buf.write("\u01bf\u01c1\5\u009aN\2\u01c0\u01bf\3\2\2\2\u01c1\u01c4")
        buf.write("\3\2\2\2\u01c2\u01c0\3\2\2\2\u01c2\u01c3\3\2\2\2\u01c3")
        buf.write("\u01c5\3\2\2\2\u01c4\u01c2\3\2\2\2\u01c5\u01c6\7\4\2\2")
        buf.write("\u01c6\'\3\2\2\2\u01c7\u01cb\7q\2\2\u01c8\u01ca\5\u009e")
        buf.write("P\2\u01c9\u01c8\3\2\2\2\u01ca\u01cd\3\2\2\2\u01cb\u01c9")
        buf.write("\3\2\2\2\u01cb\u01cc\3\2\2\2\u01cc\u01ce\3\2\2\2\u01cd")
        buf.write("\u01cb\3\2\2\2\u01ce\u01cf\7\4\2\2\u01cf)\3\2\2\2\u01d0")
        buf.write("\u01d4\7r\2\2\u01d1\u01d3\5\u00a2R\2\u01d2\u01d1\3\2\2")
        buf.write("\2\u01d3\u01d6\3\2\2\2\u01d4\u01d2\3\2\2\2\u01d4\u01d5")
        buf.write("\3\2\2\2\u01d5\u01d7\3\2\2\2\u01d6\u01d4\3\2\2\2\u01d7")
        buf.write("\u01d8\7\4\2\2\u01d8+\3\2\2\2\u01d9\u01dd\7s\2\2\u01da")
        buf.write("\u01dc\5\u00a6T\2\u01db\u01da\3\2\2\2\u01dc\u01df\3\2")
        buf.write("\2\2\u01dd\u01db\3\2\2\2\u01dd\u01de\3\2\2\2\u01de\u01e0")
        buf.write("\3\2\2\2\u01df\u01dd\3\2\2\2\u01e0\u01e1\7\4\2\2\u01e1")
        buf.write("-\3\2\2\2\u01e2\u01e6\7u\2\2\u01e3\u01e5\5\u00aaV\2\u01e4")
        buf.write("\u01e3\3\2\2\2\u01e5\u01e8\3\2\2\2\u01e6\u01e4\3\2\2\2")
        buf.write("\u01e6\u01e7\3\2\2\2\u01e7\u01e9\3\2\2\2\u01e8\u01e6\3")
        buf.write("\2\2\2\u01e9\u01ea\7\4\2\2\u01ea/\3\2\2\2\u01eb\u01ef")
        buf.write("\7v\2\2\u01ec\u01ee\5\u00aeX\2\u01ed\u01ec\3\2\2\2\u01ee")
        buf.write("\u01f1\3\2\2\2\u01ef\u01ed\3\2\2\2\u01ef\u01f0\3\2\2\2")
        buf.write("\u01f0\u01f2\3\2\2\2\u01f1\u01ef\3\2\2\2\u01f2\u01f3\7")
        buf.write("\4\2\2\u01f3\61\3\2\2\2\u01f4\u023c\5\64\33\2\u01f5\u01f6")
        buf.write("\7\7\2\2\u01f6\u01f7\7\u00b4\2\2\u01f7\u023c\5\u00be`")
        buf.write("\2\u01f8\u01f9\7\b\2\2\u01f9\u01fa\7\u00ca\2\2\u01fa\u023c")
        buf.write("\7\u00c9\2\2\u01fb\u01fc\7\t\2\2\u01fc\u01fd\7\u00b4\2")
        buf.write("\2\u01fd\u023c\5\u00be`\2\u01fe\u0200\7\n\2\2\u01ff\u0201")
        buf.write("\7\u00ba\2\2\u0200\u01ff\3\2\2\2\u0200\u0201\3\2\2\2\u0201")
        buf.write("\u0202\3\2\2\2\u0202\u023c\5\u00be`\2\u0203\u0204\7\13")
        buf.write("\2\2\u0204\u023c\7\u00b4\2\2\u0205\u0206\7\f\2\2\u0206")
        buf.write("\u023c\7\u00b4\2\2\u0207\u0208\7\r\2\2\u0208\u0209\7\u00b4")
        buf.write("\2\2\u0209\u020a\7\u00b4\2\2\u020a\u023c\5\u00be`\2\u020b")
        buf.write("\u020c\7\16\2\2\u020c\u020d\7\u00b4\2\2\u020d\u023c\7")
        buf.write("\u00b0\2\2\u020e\u020f\7\17\2\2\u020f\u0210\7\u00b4\2")
        buf.write("\2\u0210\u023c\7\u00b0\2\2\u0211\u0213\7\20\2\2\u0212")
        buf.write("\u0214\7\u00ba\2\2\u0213\u0212\3\2\2\2\u0213\u0214\3\2")
        buf.write("\2\2\u0214\u0215\3\2\2\2\u0215\u023c\7\u00b0\2\2\u0216")
        buf.write("\u0217\7\21\2\2\u0217\u0218\7\u00ce\2\2\u0218\u023c\7")
        buf.write("\u00cd\2\2\u0219\u021a\7\22\2\2\u021a\u021b\5\66\34\2")
        buf.write("\u021b\u021c\7\4\2\2\u021c\u023c\3\2\2\2\u021d\u021e\7")
        buf.write("\23\2\2\u021e\u0220\7\24\2\2\u021f\u0221\7\u00ba\2\2\u0220")
        buf.write("\u021f\3\2\2\2\u0220\u0221\3\2\2\2\u0221\u0222\3\2\2\2")
        buf.write("\u0222\u023c\5\u00be`\2\u0223\u023c\7\25\2\2\u0224\u0225")
        buf.write("\7\26\2\2\u0225\u0226\7\u00b4\2\2\u0226\u023c\5\u00be")
        buf.write("`\2\u0227\u0228\7\27\2\2\u0228\u0229\7\u00b4\2\2\u0229")
        buf.write("\u023c\5\u00be`\2\u022a\u022b\7\30\2\2\u022b\u022c\7\u00b4")
        buf.write("\2\2\u022c\u023c\5\u00be`\2\u022d\u022e\7\31\2\2\u022e")
        buf.write("\u022f\7\u00b4\2\2\u022f\u023c\5\u00be`\2\u0230\u0231")
        buf.write("\7\32\2\2\u0231\u0232\7\u00b4\2\2\u0232\u023c\5\u00be")
        buf.write("`\2\u0233\u0234\7\33\2\2\u0234\u0235\7\u00b4\2\2\u0235")
        buf.write("\u023c\5\u00be`\2\u0236\u0238\7\34\2\2\u0237\u0239\7\u00ba")
        buf.write("\2\2\u0238\u0237\3\2\2\2\u0238\u0239\3\2\2\2\u0239\u023a")
        buf.write("\3\2\2\2\u023a\u023c\5\u00be`\2\u023b\u01f4\3\2\2\2\u023b")
        buf.write("\u01f5\3\2\2\2\u023b\u01f8\3\2\2\2\u023b\u01fb\3\2\2\2")
        buf.write("\u023b\u01fe\3\2\2\2\u023b\u0203\3\2\2\2\u023b\u0205\3")
        buf.write("\2\2\2\u023b\u0207\3\2\2\2\u023b\u020b\3\2\2\2\u023b\u020e")
        buf.write("\3\2\2\2\u023b\u0211\3\2\2\2\u023b\u0216\3\2\2\2\u023b")
        buf.write("\u0219\3\2\2\2\u023b\u021d\3\2\2\2\u023b\u0223\3\2\2\2")
        buf.write("\u023b\u0224\3\2\2\2\u023b\u0227\3\2\2\2\u023b\u022a\3")
        buf.write("\2\2\2\u023b\u022d\3\2\2\2\u023b\u0230\3\2\2\2\u023b\u0233")
        buf.write("\3\2\2\2\u023b\u0236\3\2\2\2\u023c\63\3\2\2\2\u023d\u023e")
        buf.write("\7\6\2\2\u023e\u023f\5\u00b2Z\2\u023f\u0240\5\u00b2Z\2")
        buf.write("\u0240\u0241\5\u00ba^\2\u0241\u0242\5\u00ba^\2\u0242\u0246")
        buf.write("\5\u00ba^\2\u0243\u0245\58\35\2\u0244\u0243\3\2\2\2\u0245")
        buf.write("\u0248\3\2\2\2\u0246\u0244\3\2\2\2\u0246\u0247\3\2\2\2")
        buf.write("\u0247\u024f\3\2\2\2\u0248\u0246\3\2\2\2\u0249\u024a\7")
        buf.write("\u00ab\2\2\u024a\u024b\5\u00b2Z\2\u024b\u024c\5\u00b2")
        buf.write("Z\2\u024c\u024e\3\2\2\2\u024d\u0249\3\2\2\2\u024e\u0251")
        buf.write("\3\2\2\2\u024f\u024d\3\2\2\2\u024f\u0250\3\2\2\2\u0250")
        buf.write("\65\3\2\2\2\u0251\u024f\3\2\2\2\u0252\u0254\7\35\2\2\u0253")
        buf.write("\u0255\7\u00ba\2\2\u0254\u0253\3\2\2\2\u0254\u0255\3\2")
        buf.write("\2\2\u0255\u0256\3\2\2\2\u0256\u0261\5\u00be`\2\u0257")
        buf.write("\u0259\7\36\2\2\u0258\u025a\7\u00ba\2\2\u0259\u0258\3")
        buf.write("\2\2\2\u0259\u025a\3\2\2\2\u025a\u025b\3\2\2\2\u025b\u0261")
        buf.write("\5\u00be`\2\u025c\u025d\7\37\2\2\u025d\u0261\5\u00b2Z")
        buf.write("\2\u025e\u025f\7 \2\2\u025f\u0261\5\u00b2Z\2\u0260\u0252")
        buf.write("\3\2\2\2\u0260\u0257\3\2\2\2\u0260\u025c\3\2\2\2\u0260")
        buf.write("\u025e\3\2\2\2\u0261\67\3\2\2\2\u0262\u0264\7!\2\2\u0263")
        buf.write("\u0265\7\u00ba\2\2\u0264\u0263\3\2\2\2\u0264\u0265\3\2")
        buf.write("\2\2\u0265\u0266\3\2\2\2\u0266\u0286\5\u00c0a\2\u0267")
        buf.write("\u0269\7\"\2\2\u0268\u026a\7\u00ba\2\2\u0269\u0268\3\2")
        buf.write("\2\2\u0269\u026a\3\2\2\2\u026a\u026b\3\2\2\2\u026b\u0286")
        buf.write("\5\u00c0a\2\u026c\u026e\7:\2\2\u026d\u026f\7\u00ba\2\2")
        buf.write("\u026e\u026d\3\2\2\2\u026e\u026f\3\2\2\2\u026f\u0270\3")
        buf.write("\2\2\2\u0270\u0286\5\u00c0a\2\u0271\u0273\7#\2\2\u0272")
        buf.write("\u0274\7\u00ba\2\2\u0273\u0272\3\2\2\2\u0273\u0274\3\2")
        buf.write("\2\2\u0274\u0275\3\2\2\2\u0275\u0286\5\u00c0a\2\u0276")
        buf.write("\u0278\7$\2\2\u0277\u0279\7\u00ba\2\2\u0278\u0277\3\2")
        buf.write("\2\2\u0278\u0279\3\2\2\2\u0279\u027a\3\2\2\2\u027a\u0286")
        buf.write("\5\u00c0a\2\u027b\u027d\7%\2\2\u027c\u027e\7\u00ba\2\2")
        buf.write("\u027d\u027c\3\2\2\2\u027d\u027e\3\2\2\2\u027e\u027f\3")
        buf.write("\2\2\2\u027f\u0286\5\u00c0a\2\u0280\u0282\7\62\2\2\u0281")
        buf.write("\u0283\7\u00ba\2\2\u0282\u0281\3\2\2\2\u0282\u0283\3\2")
        buf.write("\2\2\u0283\u0284\3\2\2\2\u0284\u0286\5\u00c0a\2\u0285")
        buf.write("\u0262\3\2\2\2\u0285\u0267\3\2\2\2\u0285\u026c\3\2\2\2")
        buf.write("\u0285\u0271\3\2\2\2\u0285\u0276\3\2\2\2\u0285\u027b\3")
        buf.write("\2\2\2\u0285\u0280\3\2\2\2\u02869\3\2\2\2\u0287\u0291")
        buf.write("\5<\37\2\u0288\u028a\7(\2\2\u0289\u028b\7\u00ba\2\2\u028a")
        buf.write("\u0289\3\2\2\2\u028a\u028b\3\2\2\2\u028b\u028c\3\2\2\2")
        buf.write("\u028c\u0291\7\u00b0\2\2\u028d\u0291\7\25\2\2\u028e\u028f")
        buf.write("\7\27\2\2\u028f\u0291\5\u00be`\2\u0290\u0287\3\2\2\2\u0290")
        buf.write("\u0288\3\2\2\2\u0290\u028d\3\2\2\2\u0290\u028e\3\2\2\2")
        buf.write("\u0291;\3\2\2\2\u0292\u0293\7\6\2\2\u0293\u0294\5\u00b2")
        buf.write("Z\2\u0294\u0295\5\u00b2Z\2\u0295\u0296\5\u00b2Z\2\u0296")
        buf.write("\u0297\5\u00b2Z\2\u0297\u0298\5\u00ba^\2\u0298\u0299\5")
        buf.write("\u00ba^\2\u0299\u029a\5\u00ba^\2\u029a\u029b\7\u00b0\2")
        buf.write("\2\u029b=\3\2\2\2\u029c\u02af\5@!\2\u029d\u029e\7\13\2")
        buf.write("\2\u029e\u02af\7\u00b4\2\2\u029f\u02a0\7*\2\2\u02a0\u02a1")
        buf.write("\5\u00be`\2\u02a1\u02a2\5\u00be`\2\u02a2\u02a3\5\u00be")
        buf.write("`\2\u02a3\u02af\3\2\2\2\u02a4\u02a5\7+\2\2\u02a5\u02af")
        buf.write("\5\u00be`\2\u02a6\u02a7\7\20\2\2\u02a7\u02af\7\u00b0\2")
        buf.write("\2\u02a8\u02a9\7\21\2\2\u02a9\u02af\7\u00cd\2\2\u02aa")
        buf.write("\u02ab\7\23\2\2\u02ab\u02ac\7\24\2\2\u02ac\u02af\5\u00be")
        buf.write("`\2\u02ad\u02af\7\25\2\2\u02ae\u029c\3\2\2\2\u02ae\u029d")
        buf.write("\3\2\2\2\u02ae\u029f\3\2\2\2\u02ae\u02a4\3\2\2\2\u02ae")
        buf.write("\u02a6\3\2\2\2\u02ae\u02a8\3\2\2\2\u02ae\u02aa\3\2\2\2")
        buf.write("\u02ae\u02ad\3\2\2\2\u02af?\3\2\2\2\u02b0\u02b1\7\6\2")
        buf.write("\2\u02b1\u02b2\5\u00b2Z\2\u02b2\u02b3\5\u00b2Z\2\u02b3")
        buf.write("\u02b4\5\u00b2Z\2\u02b4\u02b5\5\u00b2Z\2\u02b5\u02b6\5")
        buf.write("\u00b2Z\2\u02b6\u02b7\5\u00b2Z\2\u02b7\u02b8\5\u00ba^")
        buf.write("\2\u02b8\u02ba\5\u00ba^\2\u02b9\u02bb\5\u00ba^\2\u02ba")
        buf.write("\u02b9\3\2\2\2\u02ba\u02bb\3\2\2\2\u02bbA\3\2\2\2\u02bc")
        buf.write("\u02d7\5D#\2\u02bd\u02be\7\13\2\2\u02be\u02d7\7\u00b4")
        buf.write("\2\2\u02bf\u02c0\7.\2\2\u02c0\u02d7\7\u00d0\2\2\u02c1")
        buf.write("\u02c2\7\27\2\2\u02c2\u02d7\5\u00be`\2\u02c3\u02c4\7/")
        buf.write("\2\2\u02c4\u02d7\7\u00b1\2\2\u02c5\u02c6\7\60\2\2\u02c6")
        buf.write("\u02d7\7\u00c9\2\2\u02c7\u02c8\7*\2\2\u02c8\u02c9\5\u00be")
        buf.write("`\2\u02c9\u02ca\5\u00be`\2\u02ca\u02cb\5\u00be`\2\u02cb")
        buf.write("\u02d7\3\2\2\2\u02cc\u02cd\7+\2\2\u02cd\u02d7\5\u00be")
        buf.write("`\2\u02ce\u02cf\7\20\2\2\u02cf\u02d7\7\u00b0\2\2\u02d0")
        buf.write("\u02d1\7\21\2\2\u02d1\u02d7\7\u00cd\2\2\u02d2\u02d3\7")
        buf.write("\23\2\2\u02d3\u02d4\7\24\2\2\u02d4\u02d7\5\u00be`\2\u02d5")
        buf.write("\u02d7\7\25\2\2\u02d6\u02bc\3\2\2\2\u02d6\u02bd\3\2\2")
        buf.write("\2\u02d6\u02bf\3\2\2\2\u02d6\u02c1\3\2\2\2\u02d6\u02c3")
        buf.write("\3\2\2\2\u02d6\u02c5\3\2\2\2\u02d6\u02c7\3\2\2\2\u02d6")
        buf.write("\u02cc\3\2\2\2\u02d6\u02ce\3\2\2\2\u02d6\u02d0\3\2\2\2")
        buf.write("\u02d6\u02d2\3\2\2\2\u02d6\u02d5\3\2\2\2\u02d7C\3\2\2")
        buf.write("\2\u02d8\u02d9\7\6\2\2\u02d9\u02da\5\u00b2Z\2\u02da\u02db")
        buf.write("\5\u00b2Z\2\u02db\u02dc\5\u00b2Z\2\u02dc\u02dd\5\u00b2")
        buf.write("Z\2\u02dd\u02de\5\u00b2Z\2\u02de\u02df\5\u00b2Z\2\u02df")
        buf.write("\u02e0\5\u00ba^\2\u02e0\u02e7\5\u00ba^\2\u02e1\u02e8\5")
        buf.write("\u00ba^\2\u02e2\u02e3\5\u00ba^\2\u02e3\u02e4\5\u00ba^")
        buf.write("\2\u02e4\u02e5\5\u00ba^\2\u02e5\u02e6\5\u00ba^\2\u02e6")
        buf.write("\u02e8\3\2\2\2\u02e7\u02e1\3\2\2\2\u02e7\u02e2\3\2\2\2")
        buf.write("\u02e7\u02e8\3\2\2\2\u02e8E\3\2\2\2\u02e9\u0301\5H%\2")
        buf.write("\u02ea\u02ec\7\62\2\2\u02eb\u02ed\7\u00ba\2\2\u02ec\u02eb")
        buf.write("\3\2\2\2\u02ec\u02ed\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee")
        buf.write("\u0301\7\u00b0\2\2\u02ef\u02f0\7\13\2\2\u02f0\u0301\7")
        buf.write("\u00b4\2\2\u02f1\u02f2\7+\2\2\u02f2\u02f3\5\u00be`\2\u02f3")
        buf.write("\u02f4\5\u00be`\2\u02f4\u0301\3\2\2\2\u02f5\u02f6\7\20")
        buf.write("\2\2\u02f6\u0301\7\u00b0\2\2\u02f7\u02f9\7\63\2\2\u02f8")
        buf.write("\u02fa\7\u00ba\2\2\u02f9\u02f8\3\2\2\2\u02f9\u02fa\3\2")
        buf.write("\2\2\u02fa\u02fb\3\2\2\2\u02fb\u0301\7\u00b0\2\2\u02fc")
        buf.write("\u02fd\7\23\2\2\u02fd\u02fe\7\24\2\2\u02fe\u0301\5\u00be")
        buf.write("`\2\u02ff\u0301\7\25\2\2\u0300\u02e9\3\2\2\2\u0300\u02ea")
        buf.write("\3\2\2\2\u0300\u02ef\3\2\2\2\u0300\u02f1\3\2\2\2\u0300")
        buf.write("\u02f5\3\2\2\2\u0300\u02f7\3\2\2\2\u0300\u02fc\3\2\2\2")
        buf.write("\u0300\u02ff\3\2\2\2\u0301G\3\2\2\2\u0302\u0303\7\6\2")
        buf.write("\2\u0303\u0304\5\u00b2Z\2\u0304\u0305\5\u00b2Z\2\u0305")
        buf.write("\u0306\5\u00b2Z\2\u0306\u0307\5\u00b2Z\2\u0307\u0308\5")
        buf.write("\u00ba^\2\u0308\u0309\5\u00ba^\2\u0309\u030a\5\u00ba^")
        buf.write("\2\u030a\u030b\5\u00ba^\2\u030bI\3\2\2\2\u030c\u031a\5")
        buf.write("L\'\2\u030d\u030e\7\13\2\2\u030e\u031a\7\u00b4\2\2\u030f")
        buf.write("\u0310\7*\2\2\u0310\u031a\5\u00be`\2\u0311\u0312\7\20")
        buf.write("\2\2\u0312\u031a\7\u00b0\2\2\u0313\u0314\7\21\2\2\u0314")
        buf.write("\u031a\7\u00cd\2\2\u0315\u0316\7\23\2\2\u0316\u0317\7")
        buf.write("\24\2\2\u0317\u031a\5\u00be`\2\u0318\u031a\7\25\2\2\u0319")
        buf.write("\u030c\3\2\2\2\u0319\u030d\3\2\2\2\u0319\u030f\3\2\2\2")
        buf.write("\u0319\u0311\3\2\2\2\u0319\u0313\3\2\2\2\u0319\u0315\3")
        buf.write("\2\2\2\u0319\u0318\3\2\2\2\u031aK\3\2\2\2\u031b\u031c")
        buf.write("\7\6\2\2\u031c\u031d\5\u00b2Z\2\u031d\u031e\5\u00b2Z\2")
        buf.write("\u031e\u031f\5\u00ba^\2\u031f\u0320\5\u00ba^\2\u0320M")
        buf.write("\3\2\2\2\u0321\u0337\5P)\2\u0322\u0323\7\13\2\2\u0323")
        buf.write("\u0337\7\u00b4\2\2\u0324\u0325\7*\2\2\u0325\u0326\5\u00be")
        buf.write("`\2\u0326\u0327\5\u00be`\2\u0327\u0328\5\u00be`\2\u0328")
        buf.write("\u0329\5\u00be`\2\u0329\u0337\3\2\2\2\u032a\u032b\7+\2")
        buf.write("\2\u032b\u0337\5\u00be`\2\u032c\u032d\7\20\2\2\u032d\u0337")
        buf.write("\7\u00b0\2\2\u032e\u032f\7\21\2\2\u032f\u0337\7\u00cd")
        buf.write("\2\2\u0330\u0331\7\23\2\2\u0331\u0332\7\24\2\2\u0332\u0337")
        buf.write("\5\u00be`\2\u0333\u0337\7\25\2\2\u0334\u0335\7.\2\2\u0335")
        buf.write("\u0337\7\u00d1\2\2\u0336\u0321\3\2\2\2\u0336\u0322\3\2")
        buf.write("\2\2\u0336\u0324\3\2\2\2\u0336\u032a\3\2\2\2\u0336\u032c")
        buf.write("\3\2\2\2\u0336\u032e\3\2\2\2\u0336\u0330\3\2\2\2\u0336")
        buf.write("\u0333\3\2\2\2\u0336\u0334\3\2\2\2\u0337O\3\2\2\2\u0338")
        buf.write("\u0339\7\6\2\2\u0339\u033a\5\u00b2Z\2\u033a\u033b\5\u00b2")
        buf.write("Z\2\u033b\u033c\5\u00b2Z\2\u033c\u033d\5\u00b2Z\2\u033d")
        buf.write("\u033e\5\u00ba^\2\u033e\u033f\5\u00ba^\2\u033fQ\3\2\2")
        buf.write("\2\u0340\u0344\7\67\2\2\u0341\u0343\5T+\2\u0342\u0341")
        buf.write("\3\2\2\2\u0343\u0346\3\2\2\2\u0344\u0342\3\2\2\2\u0344")
        buf.write("\u0345\3\2\2\2\u0345\u0347\3\2\2\2\u0346\u0344\3\2\2\2")
        buf.write("\u0347\u034a\7\4\2\2\u0348\u034a\78\2\2\u0349\u0340\3")
        buf.write("\2\2\2\u0349\u0348\3\2\2\2\u034aS\3\2\2\2\u034b\u034d")
        buf.write("\79\2\2\u034c\u034e\7\u00ba\2\2\u034d\u034c\3\2\2\2\u034d")
        buf.write("\u034e\3\2\2\2\u034e\u034f\3\2\2\2\u034f\u0356\5\u00b2")
        buf.write("Z\2\u0350\u0352\7:\2\2\u0351\u0353\7\u00ba\2\2\u0352\u0351")
        buf.write("\3\2\2\2\u0352\u0353\3\2\2\2\u0353\u0354\3\2\2\2\u0354")
        buf.write("\u0356\5\u00be`\2\u0355\u034b\3\2\2\2\u0355\u0350\3\2")
        buf.write("\2\2\u0356U\3\2\2\2\u0357\u0370\5X-\2\u0358\u0359\7\13")
        buf.write("\2\2\u0359\u0370\7\u00b4\2\2\u035a\u035b\7<\2\2\u035b")
        buf.write("\u035c\7\u00b0\2\2\u035c\u0370\5\u00be`\2\u035d\u035e")
        buf.write("\7+\2\2\u035e\u0370\5\u00be`\2\u035f\u0360\7\20\2\2\u0360")
        buf.write("\u0370\7\u00b0\2\2\u0361\u0362\7\23\2\2\u0362\u0363\7")
        buf.write("\24\2\2\u0363\u0367\5\u00be`\2\u0364\u0368\7\u0087\2\2")
        buf.write("\u0365\u0366\7\13\2\2\u0366\u0368\7\u00b4\2\2\u0367\u0364")
        buf.write("\3\2\2\2\u0367\u0365\3\2\2\2\u0368\u0370\3\2\2\2\u0369")
        buf.write("\u0370\7\25\2\2\u036a\u036b\7=\2\2\u036b\u036c\5\u00be")
        buf.write("`\2\u036c\u036d\7\u00b0\2\2\u036d\u0370\3\2\2\2\u036e")
        buf.write("\u0370\7>\2\2\u036f\u0357\3\2\2\2\u036f\u0358\3\2\2\2")
        buf.write("\u036f\u035a\3\2\2\2\u036f\u035d\3\2\2\2\u036f\u035f\3")
        buf.write("\2\2\2\u036f\u0361\3\2\2\2\u036f\u0369\3\2\2\2\u036f\u036a")
        buf.write("\3\2\2\2\u036f\u036e\3\2\2\2\u0370W\3\2\2\2\u0371\u0372")
        buf.write("\7\6\2\2\u0372\u0373\5\u00b2Z\2\u0373\u0374\5\u00b2Z\2")
        buf.write("\u0374Y\3\2\2\2\u0375\u039d\5\\/\2\u0376\u0377\7\13\2")
        buf.write("\2\u0377\u039d\7\u00b4\2\2\u0378\u0379\7*\2\2\u0379\u037a")
        buf.write("\5\u00be`\2\u037a\u037b\5\u00be`\2\u037b\u037c\5\u00be")
        buf.write("`\2\u037c\u037d\5\u00be`\2\u037d\u039d\3\2\2\2\u037e\u0380")
        buf.write("\7\62\2\2\u037f\u0381\7\u00ba\2\2\u0380\u037f\3\2\2\2")
        buf.write("\u0380\u0381\3\2\2\2\u0381\u0382\3\2\2\2\u0382\u039d\7")
        buf.write("\u00b0\2\2\u0383\u0384\7@\2\2\u0384\u039d\7\u00b0\2\2")
        buf.write("\u0385\u0386\7+\2\2\u0386\u0388\5\u00be`\2\u0387\u0389")
        buf.write("\5\u00be`\2\u0388\u0387\3\2\2\2\u0388\u0389\3\2\2\2\u0389")
        buf.write("\u039d\3\2\2\2\u038a\u038b\7\20\2\2\u038b\u039d\7\u00b0")
        buf.write("\2\2\u038c\u038e\7\63\2\2\u038d\u038f\7\u00ba\2\2\u038e")
        buf.write("\u038d\3\2\2\2\u038e\u038f\3\2\2\2\u038f\u0390\3\2\2\2")
        buf.write("\u0390\u039d\7\u00b0\2\2\u0391\u0392\7\21\2\2\u0392\u039d")
        buf.write("\7\u00cd\2\2\u0393\u0394\7\23\2\2\u0394\u0395\7\24\2\2")
        buf.write("\u0395\u0399\5\u00be`\2\u0396\u039a\7\u0087\2\2\u0397")
        buf.write("\u0398\7\13\2\2\u0398\u039a\7\u00b4\2\2\u0399\u0396\3")
        buf.write("\2\2\2\u0399\u0397\3\2\2\2\u039a\u039d\3\2\2\2\u039b\u039d")
        buf.write("\7\25\2\2\u039c\u0375\3\2\2\2\u039c\u0376\3\2\2\2\u039c")
        buf.write("\u0378\3\2\2\2\u039c\u037e\3\2\2\2\u039c\u0383\3\2\2\2")
        buf.write("\u039c\u0385\3\2\2\2\u039c\u038a\3\2\2\2\u039c\u038c\3")
        buf.write("\2\2\2\u039c\u0391\3\2\2\2\u039c\u0393\3\2\2\2\u039c\u039b")
        buf.write("\3\2\2\2\u039d[\3\2\2\2\u039e\u039f\7\6\2\2\u039f\u03a0")
        buf.write("\5\u00b2Z\2\u03a0\u03a1\5\u00b2Z\2\u03a1\u03a2\5\u00b2")
        buf.write("Z\2\u03a2\u03a8\5\u00b2Z\2\u03a3\u03a4\5\u00b2Z\2\u03a4")
        buf.write("\u03a5\5\u00b2Z\2\u03a5\u03a6\5\u00b2Z\2\u03a6\u03a7\5")
        buf.write("\u00b2Z\2\u03a7\u03a9\3\2\2\2\u03a8\u03a3\3\2\2\2\u03a8")
        buf.write("\u03a9\3\2\2\2\u03a9\u03aa\3\2\2\2\u03aa\u03ab\5\u00ba")
        buf.write("^\2\u03ab\u03af\5\u00ba^\2\u03ac\u03ad\5\u00ba^\2\u03ad")
        buf.write("\u03ae\5\u00ba^\2\u03ae\u03b0\3\2\2\2\u03af\u03ac\3\2")
        buf.write("\2\2\u03af\u03b0\3\2\2\2\u03b0]\3\2\2\2\u03b1\u03cc\5")
        buf.write("`\61\2\u03b2\u03b3\7\13\2\2\u03b3\u03cc\7\u00b4\2\2\u03b4")
        buf.write("\u03b5\7<\2\2\u03b5\u03b6\7\u00b0\2\2\u03b6\u03b7\7\u00b0")
        buf.write("\2\2\u03b7\u03b8\5\u00be`\2\u03b8\u03b9\5\u00be`\2\u03b9")
        buf.write("\u03ba\5\u00be`\2\u03ba\u03cc\3\2\2\2\u03bb\u03bc\7+\2")
        buf.write("\2\u03bc\u03cc\5\u00be`\2\u03bd\u03be\7\20\2\2\u03be\u03cc")
        buf.write("\7\u00b0\2\2\u03bf\u03c0\7B\2\2\u03c0\u03cc\5\u00be`\2")
        buf.write("\u03c1\u03c2\7C\2\2\u03c2\u03cc\5\u00be`\2\u03c3\u03c4")
        buf.write("\7\21\2\2\u03c4\u03cc\7\u00cd\2\2\u03c5\u03c6\7\23\2\2")
        buf.write("\u03c6\u03c7\7\24\2\2\u03c7\u03cc\5\u00be`\2\u03c8\u03cc")
        buf.write("\5b\62\2\u03c9\u03cc\7\25\2\2\u03ca\u03cc\7>\2\2\u03cb")
        buf.write("\u03b1\3\2\2\2\u03cb\u03b2\3\2\2\2\u03cb\u03b4\3\2\2\2")
        buf.write("\u03cb\u03bb\3\2\2\2\u03cb\u03bd\3\2\2\2\u03cb\u03bf\3")
        buf.write("\2\2\2\u03cb\u03c1\3\2\2\2\u03cb\u03c3\3\2\2\2\u03cb\u03c5")
        buf.write("\3\2\2\2\u03cb\u03c8\3\2\2\2\u03cb\u03c9\3\2\2\2\u03cb")
        buf.write("\u03ca\3\2\2\2\u03cc_\3\2\2\2\u03cd\u03ce\7\6\2\2\u03ce")
        buf.write("\u03cf\5\u00b2Z\2\u03cf\u03d0\5\u00b2Z\2\u03d0\u03d1\5")
        buf.write("\u00b2Z\2\u03d1\u03d2\5\u00b2Z\2\u03d2\u03d3\5\u00b2Z")
        buf.write("\2\u03d3\u03d4\5\u00ba^\2\u03d4\u03d5\5\u00ba^\2\u03d5")
        buf.write("a\3\2\2\2\u03d6\u03d7\7D\2\2\u03d7\u03d8\5\u00b2Z\2\u03d8")
        buf.write("\u03d9\5\u00be`\2\u03d9\u03da\5\u00be`\2\u03dac\3\2\2")
        buf.write("\2\u03db\u03fd\5f\64\2\u03dc\u03fd\5h\65\2\u03dd\u03fd")
        buf.write("\5j\66\2\u03de\u03fd\5l\67\2\u03df\u03fd\5n8\2\u03e0\u03fd")
        buf.write("\5p9\2\u03e1\u03fd\5r:\2\u03e2\u03fd\5t;\2\u03e3\u03fd")
        buf.write("\5v<\2\u03e4\u03e5\7\13\2\2\u03e5\u03fd\7\u00b4\2\2\u03e6")
        buf.write("\u03e7\7L\2\2\u03e7\u03fd\5\u00be`\2\u03e8\u03e9\7@\2")
        buf.write("\2\u03e9\u03fd\7\u00b0\2\2\u03ea\u03eb\7+\2\2\u03eb\u03ed")
        buf.write("\5\u00be`\2\u03ec\u03ee\5\u00be`\2\u03ed\u03ec\3\2\2\2")
        buf.write("\u03ed\u03ee\3\2\2\2\u03ee\u03fd\3\2\2\2\u03ef\u03f0\7")
        buf.write("\21\2\2\u03f0\u03fd\7\u00cd\2\2\u03f1\u03f2\7\23\2\2\u03f2")
        buf.write("\u03f3\7\24\2\2\u03f3\u03f7\5\u00be`\2\u03f4\u03f8\7\u0087")
        buf.write("\2\2\u03f5\u03f6\7\13\2\2\u03f6\u03f8\7\u00b4\2\2\u03f7")
        buf.write("\u03f4\3\2\2\2\u03f7\u03f5\3\2\2\2\u03f8\u03f9\3\2\2\2")
        buf.write("\u03f9\u03fa\7\u00b4\2\2\u03fa\u03fd\3\2\2\2\u03fb\u03fd")
        buf.write("\7\25\2\2\u03fc\u03db\3\2\2\2\u03fc\u03dc\3\2\2\2\u03fc")
        buf.write("\u03dd\3\2\2\2\u03fc\u03de\3\2\2\2\u03fc\u03df\3\2\2\2")
        buf.write("\u03fc\u03e0\3\2\2\2\u03fc\u03e1\3\2\2\2\u03fc\u03e2\3")
        buf.write("\2\2\2\u03fc\u03e3\3\2\2\2\u03fc\u03e4\3\2\2\2\u03fc\u03e6")
        buf.write("\3\2\2\2\u03fc\u03e8\3\2\2\2\u03fc\u03ea\3\2\2\2\u03fc")
        buf.write("\u03ef\3\2\2\2\u03fc\u03f1\3\2\2\2\u03fc\u03fb\3\2\2\2")
        buf.write("\u03fde\3\2\2\2\u03fe\u03ff\7F\2\2\u03ff\u0401\5\u00b2")
        buf.write("Z\2\u0400\u0402\5\u00b2Z\2\u0401\u0400\3\2\2\2\u0401\u0402")
        buf.write("\3\2\2\2\u0402\u0403\3\2\2\2\u0403\u0405\5\u00be`\2\u0404")
        buf.write("\u0406\5\u00be`\2\u0405\u0404\3\2\2\2\u0405\u0406\3\2")
        buf.write("\2\2\u0406g\3\2\2\2\u0407\u0408\7D\2\2\u0408\u0409\5\u00b2")
        buf.write("Z\2\u0409\u040a\5\u00be`\2\u040ai\3\2\2\2\u040b\u040c")
        buf.write("\7\65\2\2\u040c\u040d\5\u00b2Z\2\u040d\u040e\5\u00b2Z")
        buf.write("\2\u040e\u040f\5\u00b2Z\2\u040f\u0411\7\u00b4\2\2\u0410")
        buf.write("\u0412\7\u00b1\2\2\u0411\u0410\3\2\2\2\u0411\u0412\3\2")
        buf.write("\2\2\u0412\u0413\3\2\2\2\u0413\u0414\7\u00b4\2\2\u0414")
        buf.write("k\3\2\2\2\u0415\u0416\7G\2\2\u0416\u0417\5\u00b2Z\2\u0417")
        buf.write("m\3\2\2\2\u0418\u0419\7A\2\2\u0419\u041a\5\u00b2Z\2\u041a")
        buf.write("o\3\2\2\2\u041b\u041c\7H\2\2\u041c\u041d\5\u00b2Z\2\u041d")
        buf.write("q\3\2\2\2\u041e\u041f\7I\2\2\u041f\u0420\5\u00b2Z\2\u0420")
        buf.write("s\3\2\2\2\u0421\u0422\7J\2\2\u0422\u0423\7\u00b4\2\2\u0423")
        buf.write("\u0424\5\u00b2Z\2\u0424\u0425\5\u00b2Z\2\u0425\u0426\5")
        buf.write("\u00b2Z\2\u0426\u0427\5\u00b2Z\2\u0427\u0429\5\u00b2Z")
        buf.write("\2\u0428\u042a\5\u00b2Z\2\u0429\u0428\3\2\2\2\u0429\u042a")
        buf.write("\3\2\2\2\u042au\3\2\2\2\u042b\u042c\7K\2\2\u042c\u042d")
        buf.write("\5\u00b2Z\2\u042dw\3\2\2\2\u042e\u0495\5z>\2\u042f\u0430")
        buf.write("\7\13\2\2\u0430\u0495\7\u00b4\2\2\u0431\u0432\7\35\2\2")
        buf.write("\u0432\u0495\5\u00be`\2\u0433\u0434\7+\2\2\u0434\u0495")
        buf.write("\5\u00be`\2\u0435\u0436\7N\2\2\u0436\u0437\5\u00be`\2")
        buf.write("\u0437\u0438\5\u00be`\2\u0438\u043d\5\u00be`\2\u0439\u043a")
        buf.write("\5\u00be`\2\u043a\u043b\5\u00be`\2\u043b\u043c\5\u00be")
        buf.write("`\2\u043c\u043e\3\2\2\2\u043d\u0439\3\2\2\2\u043d\u043e")
        buf.write("\3\2\2\2\u043e\u0443\3\2\2\2\u043f\u0440\5\u00be`\2\u0440")
        buf.write("\u0441\5\u00be`\2\u0441\u0442\5\u00be`\2\u0442\u0444\3")
        buf.write("\2\2\2\u0443\u043f\3\2\2\2\u0443\u0444\3\2\2\2\u0444\u0449")
        buf.write("\3\2\2\2\u0445\u0446\5\u00be`\2\u0446\u0447\5\u00be`\2")
        buf.write("\u0447\u0448\5\u00be`\2\u0448\u044a\3\2\2\2\u0449\u0445")
        buf.write("\3\2\2\2\u0449\u044a\3\2\2\2\u044a\u0495\3\2\2\2\u044b")
        buf.write("\u044c\7\20\2\2\u044c\u0495\7\u00b0\2\2\u044d\u044e\7")
        buf.write("O\2\2\u044e\u044f\5\u00be`\2\u044f\u0450\5\u00be`\2\u0450")
        buf.write("\u0455\5\u00be`\2\u0451\u0452\5\u00be`\2\u0452\u0453\5")
        buf.write("\u00be`\2\u0453\u0454\5\u00be`\2\u0454\u0456\3\2\2\2\u0455")
        buf.write("\u0451\3\2\2\2\u0455\u0456\3\2\2\2\u0456\u045b\3\2\2\2")
        buf.write("\u0457\u0458\5\u00be`\2\u0458\u0459\5\u00be`\2\u0459\u045a")
        buf.write("\5\u00be`\2\u045a\u045c\3\2\2\2\u045b\u0457\3\2\2\2\u045b")
        buf.write("\u045c\3\2\2\2\u045c\u0461\3\2\2\2\u045d\u045e\5\u00be")
        buf.write("`\2\u045e\u045f\5\u00be`\2\u045f\u0460\5\u00be`\2\u0460")
        buf.write("\u0462\3\2\2\2\u0461\u045d\3\2\2\2\u0461\u0462\3\2\2\2")
        buf.write("\u0462\u0495\3\2\2\2\u0463\u0464\7\23\2\2\u0464\u0465")
        buf.write("\7\24\2\2\u0465\u0469\5\u00be`\2\u0466\u046a\7\u0087\2")
        buf.write("\2\u0467\u0468\7\13\2\2\u0468\u046a\7\u00b4\2\2\u0469")
        buf.write("\u0466\3\2\2\2\u0469\u0467\3\2\2\2\u046a\u0495\3\2\2\2")
        buf.write("\u046b\u046c\7P\2\2\u046c\u046d\5\u00be`\2\u046d\u046e")
        buf.write("\5\u00be`\2\u046e\u0473\5\u00be`\2\u046f\u0470\5\u00be")
        buf.write("`\2\u0470\u0471\5\u00be`\2\u0471\u0472\5\u00be`\2\u0472")
        buf.write("\u0474\3\2\2\2\u0473\u046f\3\2\2\2\u0473\u0474\3\2\2\2")
        buf.write("\u0474\u0479\3\2\2\2\u0475\u0476\5\u00be`\2\u0476\u0477")
        buf.write("\5\u00be`\2\u0477\u0478\5\u00be`\2\u0478\u047a\3\2\2\2")
        buf.write("\u0479\u0475\3\2\2\2\u0479\u047a\3\2\2\2\u047a\u047f\3")
        buf.write("\2\2\2\u047b\u047c\5\u00be`\2\u047c\u047d\5\u00be`\2\u047d")
        buf.write("\u047e\5\u00be`\2\u047e\u0480\3\2\2\2\u047f\u047b\3\2")
        buf.write("\2\2\u047f\u0480\3\2\2\2\u0480\u0495\3\2\2\2\u0481\u0495")
        buf.write("\7\25\2\2\u0482\u0483\7\27\2\2\u0483\u0495\5\u00be`\2")
        buf.write("\u0484\u0485\7Q\2\2\u0485\u0495\7\u00d4\2\2\u0486\u0487")
        buf.write("\7=\2\2\u0487\u0488\7S\2\2\u0488\u048a\5\u00be`\2\u0489")
        buf.write("\u048b\5\u00be`\2\u048a\u0489\3\2\2\2\u048a\u048b\3\2")
        buf.write("\2\2\u048b\u048d\3\2\2\2\u048c\u048e\5\u00be`\2\u048d")
        buf.write("\u048c\3\2\2\2\u048d\u048e\3\2\2\2\u048e\u0490\3\2\2\2")
        buf.write("\u048f\u0491\5\u00be`\2\u0490\u048f\3\2\2\2\u0490\u0491")
        buf.write("\3\2\2\2\u0491\u0495\3\2\2\2\u0492\u0495\7R\2\2\u0493")
        buf.write("\u0495\7>\2\2\u0494\u042e\3\2\2\2\u0494\u042f\3\2\2\2")
        buf.write("\u0494\u0431\3\2\2\2\u0494\u0433\3\2\2\2\u0494\u0435\3")
        buf.write("\2\2\2\u0494\u044b\3\2\2\2\u0494\u044d\3\2\2\2\u0494\u0463")
        buf.write("\3\2\2\2\u0494\u046b\3\2\2\2\u0494\u0481\3\2\2\2\u0494")
        buf.write("\u0482\3\2\2\2\u0494\u0484\3\2\2\2\u0494\u0486\3\2\2\2")
        buf.write("\u0494\u0492\3\2\2\2\u0494\u0493\3\2\2\2\u0495y\3\2\2")
        buf.write("\2\u0496\u0497\7\6\2\2\u0497\u0498\5\u00b2Z\2\u0498\u0499")
        buf.write("\5\u00b2Z\2\u0499\u049a\5\u00b2Z\2\u049a\u04a0\5\u00b2")
        buf.write("Z\2\u049b\u049c\5\u00b2Z\2\u049c\u049d\5\u00b2Z\2\u049d")
        buf.write("\u049e\5\u00b2Z\2\u049e\u049f\5\u00b2Z\2\u049f\u04a1\3")
        buf.write("\2\2\2\u04a0\u049b\3\2\2\2\u04a0\u04a1\3\2\2\2\u04a1\u04a7")
        buf.write("\3\2\2\2\u04a2\u04a3\5\u00b2Z\2\u04a3\u04a4\5\u00b2Z\2")
        buf.write("\u04a4\u04a5\5\u00b2Z\2\u04a5\u04a6\5\u00b2Z\2\u04a6\u04a8")
        buf.write("\3\2\2\2\u04a7\u04a2\3\2\2\2\u04a7\u04a8\3\2\2\2\u04a8")
        buf.write("\u04ae\3\2\2\2\u04a9\u04aa\5\u00b2Z\2\u04aa\u04ab\5\u00b2")
        buf.write("Z\2\u04ab\u04ac\5\u00b2Z\2\u04ac\u04ad\5\u00b2Z\2\u04ad")
        buf.write("\u04af\3\2\2\2\u04ae\u04a9\3\2\2\2\u04ae\u04af\3\2\2\2")
        buf.write("\u04af{\3\2\2\2\u04b0\u04b6\5~@\2\u04b1\u04b2\7\27\2\2")
        buf.write("\u04b2\u04b6\5\u00be`\2\u04b3\u04b6\7\23\2\2\u04b4\u04b6")
        buf.write("\7\25\2\2\u04b5\u04b0\3\2\2\2\u04b5\u04b1\3\2\2\2\u04b5")
        buf.write("\u04b3\3\2\2\2\u04b5\u04b4\3\2\2\2\u04b6}\3\2\2\2\u04b7")
        buf.write("\u04b8\7\6\2\2\u04b8\u04b9\5\u00b2Z\2\u04b9\u04ba\5\u00ba")
        buf.write("^\2\u04ba\u04bb\5\u00ba^\2\u04bb\177\3\2\2\2\u04bc\u04d3")
        buf.write("\5\u0082B\2\u04bd\u04be\7\13\2\2\u04be\u04d3\7\u00b4\2")
        buf.write("\2\u04bf\u04c0\7*\2\2\u04c0\u04c1\5\u00be`\2\u04c1\u04c2")
        buf.write("\5\u00be`\2\u04c2\u04c3\5\u00be`\2\u04c3\u04c4\5\u00be")
        buf.write("`\2\u04c4\u04c5\5\u00be`\2\u04c5\u04d3\3\2\2\2\u04c6\u04c7")
        buf.write("\7+\2\2\u04c7\u04d3\5\u00be`\2\u04c8\u04c9\7\20\2\2\u04c9")
        buf.write("\u04d3\7\u00b0\2\2\u04ca\u04cb\7\21\2\2\u04cb\u04d3\7")
        buf.write("\u00cd\2\2\u04cc\u04cd\7\23\2\2\u04cd\u04ce\7\24\2\2\u04ce")
        buf.write("\u04d3\5\u00be`\2\u04cf\u04d3\7\25\2\2\u04d0\u04d1\7.")
        buf.write("\2\2\u04d1\u04d3\7\u00d1\2\2\u04d2\u04bc\3\2\2\2\u04d2")
        buf.write("\u04bd\3\2\2\2\u04d2\u04bf\3\2\2\2\u04d2\u04c6\3\2\2\2")
        buf.write("\u04d2\u04c8\3\2\2\2\u04d2\u04ca\3\2\2\2\u04d2\u04cc\3")
        buf.write("\2\2\2\u04d2\u04cf\3\2\2\2\u04d2\u04d0\3\2\2\2\u04d3\u0081")
        buf.write("\3\2\2\2\u04d4\u04d5\7\6\2\2\u04d5\u04d6\5\u00b2Z\2\u04d6")
        buf.write("\u04d7\5\u00b2Z\2\u04d7\u04d8\5\u00b2Z\2\u04d8\u04d9\5")
        buf.write("\u00b2Z\2\u04d9\u04da\5\u00b2Z\2\u04da\u04db\5\u00b2Z")
        buf.write("\2\u04db\u04dc\5\u00ba^\2\u04dc\u04dd\5\u00ba^\2\u04dd")
        buf.write("\u0083\3\2\2\2\u04de\u0518\5\u0086D\2\u04df\u04e0\7\13")
        buf.write("\2\2\u04e0\u0518\7\u00b4\2\2\u04e1\u04e2\7\35\2\2\u04e2")
        buf.write("\u0518\5\u00be`\2\u04e3\u04e4\7W\2\2\u04e4\u0518\5\u00be")
        buf.write("`\2\u04e5\u04e6\7+\2\2\u04e6\u0518\5\u00be`\2\u04e7\u04e8")
        buf.write("\7N\2\2\u04e8\u04e9\5\u00be`\2\u04e9\u04ea\5\u00be`\2")
        buf.write("\u04ea\u04eb\5\u00be`\2\u04eb\u04ec\5\u00be`\2\u04ec\u04ed")
        buf.write("\5\u00be`\2\u04ed\u04ee\5\u00be`\2\u04ee\u04ef\5\u00be")
        buf.write("`\2\u04ef\u0518\3\2\2\2\u04f0\u04f1\7X\2\2\u04f1\u0518")
        buf.write("\7\u00b0\2\2\u04f2\u04f3\7Y\2\2\u04f3\u04f4\5\u00be`\2")
        buf.write("\u04f4\u04f5\5\u00be`\2\u04f5\u04f6\5\u00be`\2\u04f6\u04f7")
        buf.write("\5\u00be`\2\u04f7\u04f8\5\u00be`\2\u04f8\u04f9\5\u00be")
        buf.write("`\2\u04f9\u04fa\5\u00be`\2\u04fa\u04fb\5\u00be`\2\u04fb")
        buf.write("\u0518\3\2\2\2\u04fc\u04fd\7\20\2\2\u04fd\u0518\7\u00b0")
        buf.write("\2\2\u04fe\u04ff\7\23\2\2\u04ff\u0500\7\24\2\2\u0500\u0504")
        buf.write("\5\u00be`\2\u0501\u0505\7\u0087\2\2\u0502\u0503\7\13\2")
        buf.write("\2\u0503\u0505\7\u00b4\2\2\u0504\u0501\3\2\2\2\u0504\u0502")
        buf.write("\3\2\2\2\u0505\u0518\3\2\2\2\u0506\u0507\7P\2\2\u0507")
        buf.write("\u0508\5\u00be`\2\u0508\u0509\5\u00be`\2\u0509\u050a\5")
        buf.write("\u00be`\2\u050a\u050b\5\u00be`\2\u050b\u050c\5\u00be`")
        buf.write("\2\u050c\u050d\5\u00be`\2\u050d\u050e\5\u00be`\2\u050e")
        buf.write("\u0518\3\2\2\2\u050f\u0518\7\25\2\2\u0510\u0511\7\u0097")
        buf.write("\2\2\u0511\u0518\7\u00b0\2\2\u0512\u0513\7=\2\2\u0513")
        buf.write("\u0514\5\u00be`\2\u0514\u0515\5\u00be`\2\u0515\u0518\3")
        buf.write("\2\2\2\u0516\u0518\7>\2\2\u0517\u04de\3\2\2\2\u0517\u04df")
        buf.write("\3\2\2\2\u0517\u04e1\3\2\2\2\u0517\u04e3\3\2\2\2\u0517")
        buf.write("\u04e5\3\2\2\2\u0517\u04e7\3\2\2\2\u0517\u04f0\3\2\2\2")
        buf.write("\u0517\u04f2\3\2\2\2\u0517\u04fc\3\2\2\2\u0517\u04fe\3")
        buf.write("\2\2\2\u0517\u0506\3\2\2\2\u0517\u050f\3\2\2\2\u0517\u0510")
        buf.write("\3\2\2\2\u0517\u0512\3\2\2\2\u0517\u0516\3\2\2\2\u0518")
        buf.write("\u0085\3\2\2\2\u0519\u051a\7\6\2\2\u051a\u051b\5\u00b2")
        buf.write("Z\2\u051b\u051c\5\u00b2Z\2\u051c\u051d\5\u00b2Z\2\u051d")
        buf.write("\u051e\5\u00b2Z\2\u051e\u0087\3\2\2\2\u051f\u053b\5\u008a")
        buf.write("F\2\u0520\u0521\7\13\2\2\u0521\u053b\7\u00b4\2\2\u0522")
        buf.write("\u0523\7\27\2\2\u0523\u053b\5\u00be`\2\u0524\u0525\7.")
        buf.write("\2\2\u0525\u053b\7\u00d2\2\2\u0526\u0527\7*\2\2\u0527")
        buf.write("\u0528\5\u00be`\2\u0528\u0529\5\u00be`\2\u0529\u052a\5")
        buf.write("\u00be`\2\u052a\u053b\3\2\2\2\u052b\u052c\7[\2\2\u052c")
        buf.write("\u052d\5\u00be`\2\u052d\u052e\5\u00be`\2\u052e\u052f\5")
        buf.write("\u00be`\2\u052f\u053b\3\2\2\2\u0530\u0531\7+\2\2\u0531")
        buf.write("\u053b\5\u00be`\2\u0532\u0533\7\20\2\2\u0533\u053b\7\u00b0")
        buf.write("\2\2\u0534\u0535\7\21\2\2\u0535\u053b\7\u00cd\2\2\u0536")
        buf.write("\u0537\7\23\2\2\u0537\u0538\7\24\2\2\u0538\u053b\5\u00be")
        buf.write("`\2\u0539\u053b\7\25\2\2\u053a\u051f\3\2\2\2\u053a\u0520")
        buf.write("\3\2\2\2\u053a\u0522\3\2\2\2\u053a\u0524\3\2\2\2\u053a")
        buf.write("\u0526\3\2\2\2\u053a\u052b\3\2\2\2\u053a\u0530\3\2\2\2")
        buf.write("\u053a\u0532\3\2\2\2\u053a\u0534\3\2\2\2\u053a\u0536\3")
        buf.write("\2\2\2\u053a\u0539\3\2\2\2\u053b\u0089\3\2\2\2\u053c\u053d")
        buf.write("\7\6\2\2\u053d\u053e\5\u00b2Z\2\u053e\u053f\5\u00b2Z\2")
        buf.write("\u053f\u0540\5\u00b2Z\2\u0540\u0541\5\u00b2Z\2\u0541\u0542")
        buf.write("\5\u00b2Z\2\u0542\u0543\5\u00b2Z\2\u0543\u0544\5\u00b2")
        buf.write("Z\2\u0544\u0545\5\u00ba^\2\u0545\u0546\5\u00ba^\2\u0546")
        buf.write("\u0547\5\u00ba^\2\u0547\u008b\3\2\2\2\u0548\u0563\5\u008a")
        buf.write("F\2\u0549\u054a\7\13\2\2\u054a\u0563\7\u00b4\2\2\u054b")
        buf.write("\u054c\7\27\2\2\u054c\u0563\5\u00be`\2\u054d\u054e\7*")
        buf.write("\2\2\u054e\u054f\5\u00be`\2\u054f\u0550\5\u00be`\2\u0550")
        buf.write("\u0551\5\u00be`\2\u0551\u0563\3\2\2\2\u0552\u0553\7[\2")
        buf.write("\2\u0553\u0554\5\u00be`\2\u0554\u0555\5\u00be`\2\u0555")
        buf.write("\u0556\5\u00be`\2\u0556\u0557\5\u00be`\2\u0557\u0563\3")
        buf.write("\2\2\2\u0558\u0559\7+\2\2\u0559\u0563\5\u00be`\2\u055a")
        buf.write("\u055b\7\20\2\2\u055b\u0563\7\u00b0\2\2\u055c\u055d\7")
        buf.write("\21\2\2\u055d\u0563\7\u00cd\2\2\u055e\u055f\7\23\2\2\u055f")
        buf.write("\u0560\7\24\2\2\u0560\u0563\5\u00be`\2\u0561\u0563\7\25")
        buf.write("\2\2\u0562\u0548\3\2\2\2\u0562\u0549\3\2\2\2\u0562\u054b")
        buf.write("\3\2\2\2\u0562\u054d\3\2\2\2\u0562\u0552\3\2\2\2\u0562")
        buf.write("\u0558\3\2\2\2\u0562\u055a\3\2\2\2\u0562\u055c\3\2\2\2")
        buf.write("\u0562\u055e\3\2\2\2\u0562\u0561\3\2\2\2\u0563\u008d\3")
        buf.write("\2\2\2\u0564\u057b\5\u0090I\2\u0565\u0566\7\13\2\2\u0566")
        buf.write("\u057b\7\u00b4\2\2\u0567\u0568\7*\2\2\u0568\u0569\5\u00be")
        buf.write("`\2\u0569\u056a\5\u00be`\2\u056a\u056b\5\u00be`\2\u056b")
        buf.write("\u056c\5\u00be`\2\u056c\u056d\5\u00be`\2\u056d\u056e\5")
        buf.write("\u00be`\2\u056e\u056f\5\u00be`\2\u056f\u057b\3\2\2\2\u0570")
        buf.write("\u0571\7+\2\2\u0571\u057b\5\u00be`\2\u0572\u0573\7\20")
        buf.write("\2\2\u0573\u057b\7\u00b0\2\2\u0574\u0575\7\21\2\2\u0575")
        buf.write("\u057b\7\u00cd\2\2\u0576\u0577\7\23\2\2\u0577\u0578\7")
        buf.write("\24\2\2\u0578\u057b\5\u00be`\2\u0579\u057b\7\25\2\2\u057a")
        buf.write("\u0564\3\2\2\2\u057a\u0565\3\2\2\2\u057a\u0567\3\2\2\2")
        buf.write("\u057a\u0570\3\2\2\2\u057a\u0572\3\2\2\2\u057a\u0574\3")
        buf.write("\2\2\2\u057a\u0576\3\2\2\2\u057a\u0579\3\2\2\2\u057b\u008f")
        buf.write("\3\2\2\2\u057c\u057d\7\6\2\2\u057d\u057e\5\u00b2Z\2\u057e")
        buf.write("\u057f\5\u00b2Z\2\u057f\u0580\5\u00b2Z\2\u0580\u0581\5")
        buf.write("\u00b2Z\2\u0581\u0582\5\u00b2Z\2\u0582\u0583\5\u00b2Z")
        buf.write("\2\u0583\u0584\5\u00b2Z\2\u0584\u0585\5\u00b2Z\2\u0585")
        buf.write("\u0586\5\u00ba^\2\u0586\u0587\5\u00ba^\2\u0587\u0091\3")
        buf.write("\2\2\2\u0588\u05a8\5\u0094K\2\u0589\u058a\7\13\2\2\u058a")
        buf.write("\u05a8\7\u00b4\2\2\u058b\u058c\7_\2\2\u058c\u05a8\7\u00b4")
        buf.write("\2\2\u058d\u058e\7<\2\2\u058e\u058f\7\u00b0\2\2\u058f")
        buf.write("\u0590\7\u00b0\2\2\u0590\u05a8\5\u00be`\2\u0591\u0592")
        buf.write("\7L\2\2\u0592\u05a8\5\u00be`\2\u0593\u0594\7+\2\2\u0594")
        buf.write("\u05a8\5\u00be`\2\u0595\u0596\7\20\2\2\u0596\u05a8\7\u00b0")
        buf.write("\2\2\u0597\u0598\7\21\2\2\u0598\u05a8\7\u00cd\2\2\u0599")
        buf.write("\u059a\7\23\2\2\u059a\u059b\7\24\2\2\u059b\u059f\5\u00be")
        buf.write("`\2\u059c\u05a0\7\u0087\2\2\u059d\u059e\7\13\2\2\u059e")
        buf.write("\u05a0\7\u00b4\2\2\u059f\u059c\3\2\2\2\u059f\u059d\3\2")
        buf.write("\2\2\u05a0\u05a8\3\2\2\2\u05a1\u05a8\7\25\2\2\u05a2\u05a3")
        buf.write("\7=\2\2\u05a3\u05a4\7`\2\2\u05a4\u05a5\7\u00b0\2\2\u05a5")
        buf.write("\u05a8\7\u00b0\2\2\u05a6\u05a8\7>\2\2\u05a7\u0588\3\2")
        buf.write("\2\2\u05a7\u0589\3\2\2\2\u05a7\u058b\3\2\2\2\u05a7\u058d")
        buf.write("\3\2\2\2\u05a7\u0591\3\2\2\2\u05a7\u0593\3\2\2\2\u05a7")
        buf.write("\u0595\3\2\2\2\u05a7\u0597\3\2\2\2\u05a7\u0599\3\2\2\2")
        buf.write("\u05a7\u05a1\3\2\2\2\u05a7\u05a2\3\2\2\2\u05a7\u05a6\3")
        buf.write("\2\2\2\u05a8\u0093\3\2\2\2\u05a9\u05aa\7\6\2\2\u05aa\u05ab")
        buf.write("\5\u00b2Z\2\u05ab\u05ac\5\u00b2Z\2\u05ac\u05ad\5\u00b2")
        buf.write("Z\2\u05ad\u05ae\5\u00b2Z\2\u05ae\u05af\5\u00b2Z\2\u05af")
        buf.write("\u05b0\5\u00b2Z\2\u05b0\u05b1\5\u00b2Z\2\u05b1\u05b2\5")
        buf.write("\u00b2Z\2\u05b2\u05b3\5\u00b2Z\2\u05b3\u05b4\5\u00b2Z")
        buf.write("\2\u05b4\u05b6\5\u00b2Z\2\u05b5\u05b7\5\u00b2Z\2\u05b6")
        buf.write("\u05b5\3\2\2\2\u05b6\u05b7\3\2\2\2\u05b7\u0095\3\2\2\2")
        buf.write("\u05b8\u05ee\5\u0098M\2\u05b9\u05bb\7\13\2\2\u05ba\u05bc")
        buf.write("\7\u00ba\2\2\u05bb\u05ba\3\2\2\2\u05bb\u05bc\3\2\2\2\u05bc")
        buf.write("\u05bd\3\2\2\2\u05bd\u05ee\7\u00b4\2\2\u05be\u05c0\7+")
        buf.write("\2\2\u05bf\u05c1\7\u00ba\2\2\u05c0\u05bf\3\2\2\2\u05c0")
        buf.write("\u05c1\3\2\2\2\u05c1\u05c2\3\2\2\2\u05c2\u05c3\7\u00b4")
        buf.write("\2\2\u05c3\u05ee\5\u00be`\2\u05c4\u05c6\7\20\2\2\u05c5")
        buf.write("\u05c7\7\u00ba\2\2\u05c6\u05c5\3\2\2\2\u05c6\u05c7\3\2")
        buf.write("\2\2\u05c7\u05c8\3\2\2\2\u05c8\u05ee\7\u00b0\2\2\u05c9")
        buf.write("\u05cb\7\21\2\2\u05ca\u05cc\7\u00cc\2\2\u05cb\u05ca\3")
        buf.write("\2\2\2\u05cb\u05cc\3\2\2\2\u05cc\u05cd\3\2\2\2\u05cd\u05ce")
        buf.write("\7\u00ce\2\2\u05ce\u05ee\7\u00cd\2\2\u05cf\u05d1\7b\2")
        buf.write("\2\u05d0\u05d2\7\u00ba\2\2\u05d1\u05d0\3\2\2\2\u05d1\u05d2")
        buf.write("\3\2\2\2\u05d2\u05d3\3\2\2\2\u05d3\u05d4\7\u00b4\2\2\u05d4")
        buf.write("\u05ee\5\u00be`\2\u05d5\u05d7\7c\2\2\u05d6\u05d8\7\u00ba")
        buf.write("\2\2\u05d7\u05d6\3\2\2\2\u05d7\u05d8\3\2\2\2\u05d8\u05d9")
        buf.write("\3\2\2\2\u05d9\u05da\7\u00b4\2\2\u05da\u05ee\5\u00be`")
        buf.write("\2\u05db\u05dd\7d\2\2\u05dc\u05de\7\u00ba\2\2\u05dd\u05dc")
        buf.write("\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u05df\3\2\2\2\u05df")
        buf.write("\u05e0\7\u00b4\2\2\u05e0\u05e1\5\u00be`\2\u05e1\u05e2")
        buf.write("\5\u00be`\2\u05e2\u05ee\3\2\2\2\u05e3\u05e4\7\23\2\2\u05e4")
        buf.write("\u05e5\7\24\2\2\u05e5\u05e9\5\u00be`\2\u05e6\u05ea\7\u0087")
        buf.write("\2\2\u05e7\u05e8\7\13\2\2\u05e8\u05ea\7\u00b4\2\2\u05e9")
        buf.write("\u05e6\3\2\2\2\u05e9\u05e7\3\2\2\2\u05ea\u05ee\3\2\2\2")
        buf.write("\u05eb\u05ee\7\25\2\2\u05ec\u05ee\7e\2\2\u05ed\u05b8\3")
        buf.write("\2\2\2\u05ed\u05b9\3\2\2\2\u05ed\u05be\3\2\2\2\u05ed\u05c4")
        buf.write("\3\2\2\2\u05ed\u05c9\3\2\2\2\u05ed\u05cf\3\2\2\2\u05ed")
        buf.write("\u05d5\3\2\2\2\u05ed\u05db\3\2\2\2\u05ed\u05e3\3\2\2\2")
        buf.write("\u05ed\u05eb\3\2\2\2\u05ed\u05ec\3\2\2\2\u05ee\u0097\3")
        buf.write("\2\2\2\u05ef\u05f0\7\6\2\2\u05f0\u05f1\5\u00b2Z\2\u05f1")
        buf.write("\u05f2\5\u00b2Z\2\u05f2\u05f3\5\u00ba^\2\u05f3\u05f4\5")
        buf.write("\u00ba^\2\u05f4\u0099\3\2\2\2\u05f5\u061a\5\u009cO\2\u05f6")
        buf.write("\u05f7\7\13\2\2\u05f7\u061a\7\u00b4\2\2\u05f8\u05f9\7")
        buf.write("g\2\2\u05f9\u061a\7\u00b0\2\2\u05fa\u05fb\7*\2\2\u05fb")
        buf.write("\u05fc\5\u00be`\2\u05fc\u05fd\5\u00be`\2\u05fd\u061a\3")
        buf.write("\2\2\2\u05fe\u05ff\7+\2\2\u05ff\u061a\5\u00be`\2\u0600")
        buf.write("\u0601\7\20\2\2\u0601\u061a\7\u00b0\2\2\u0602\u0603\7")
        buf.write("\23\2\2\u0603\u0604\7\24\2\2\u0604\u0608\5\u00be`\2\u0605")
        buf.write("\u0609\7\u0087\2\2\u0606\u0607\7\13\2\2\u0607\u0609\7")
        buf.write("\u00b4\2\2\u0608\u0605\3\2\2\2\u0608\u0606\3\2\2\2\u0609")
        buf.write("\u061a\3\2\2\2\u060a\u061a\7\25\2\2\u060b\u060c\7h\2\2")
        buf.write("\u060c\u061a\7\u00b4\2\2\u060d\u060e\7i\2\2\u060e\u060f")
        buf.write("\5\u00be`\2\u060f\u0610\7\u00b0\2\2\u0610\u061a\3\2\2")
        buf.write("\2\u0611\u061a\7j\2\2\u0612\u061a\7k\2\2\u0613\u061a\7")
        buf.write("l\2\2\u0614\u061a\7m\2\2\u0615\u061a\7n\2\2\u0616\u061a")
        buf.write("\7o\2\2\u0617\u0618\7p\2\2\u0618\u061a\7\u00b0\2\2\u0619")
        buf.write("\u05f5\3\2\2\2\u0619\u05f6\3\2\2\2\u0619\u05f8\3\2\2\2")
        buf.write("\u0619\u05fa\3\2\2\2\u0619\u05fe\3\2\2\2\u0619\u0600\3")
        buf.write("\2\2\2\u0619\u0602\3\2\2\2\u0619\u060a\3\2\2\2\u0619\u060b")
        buf.write("\3\2\2\2\u0619\u060d\3\2\2\2\u0619\u0611\3\2\2\2\u0619")
        buf.write("\u0612\3\2\2\2\u0619\u0613\3\2\2\2\u0619\u0614\3\2\2\2")
        buf.write("\u0619\u0615\3\2\2\2\u0619\u0616\3\2\2\2\u0619\u0617\3")
        buf.write("\2\2\2\u061a\u009b\3\2\2\2\u061b\u061c\7\6\2\2\u061c\u061d")
        buf.write("\5\u00b2Z\2\u061d\u061e\5\u00b2Z\2\u061e\u061f\5\u00b2")
        buf.write("Z\2\u061f\u0620\5\u00b2Z\2\u0620\u0621\5\u00b2Z\2\u0621")
        buf.write("\u0622\5\u00ba^\2\u0622\u0623\5\u00ba^\2\u0623\u009d\3")
        buf.write("\2\2\2\u0624\u063f\5\u00a0Q\2\u0625\u0626\7\13\2\2\u0626")
        buf.write("\u063f\7\u00b4\2\2\u0627\u0628\7g\2\2\u0628\u063f\7\u00b0")
        buf.write("\2\2\u0629\u062a\7*\2\2\u062a\u062b\5\u00be`\2\u062b\u062c")
        buf.write("\5\u00be`\2\u062c\u063f\3\2\2\2\u062d\u062e\7+\2\2\u062e")
        buf.write("\u063f\5\u00be`\2\u062f\u0630\7\20\2\2\u0630\u063f\7\u00b0")
        buf.write("\2\2\u0631\u063f\7j\2\2\u0632\u063f\7k\2\2\u0633\u063f")
        buf.write("\7i\2\2\u0634\u063f\7l\2\2\u0635\u063f\7m\2\2\u0636\u063f")
        buf.write("\7p\2\2\u0637\u0638\7\23\2\2\u0638\u063f\7\24\2\2\u0639")
        buf.write("\u063f\7\25\2\2\u063a\u063b\7h\2\2\u063b\u063f\7\u00b4")
        buf.write("\2\2\u063c\u063f\7n\2\2\u063d\u063f\7o\2\2\u063e\u0624")
        buf.write("\3\2\2\2\u063e\u0625\3\2\2\2\u063e\u0627\3\2\2\2\u063e")
        buf.write("\u0629\3\2\2\2\u063e\u062d\3\2\2\2\u063e\u062f\3\2\2\2")
        buf.write("\u063e\u0631\3\2\2\2\u063e\u0632\3\2\2\2\u063e\u0633\3")
        buf.write("\2\2\2\u063e\u0634\3\2\2\2\u063e\u0635\3\2\2\2\u063e\u0636")
        buf.write("\3\2\2\2\u063e\u0637\3\2\2\2\u063e\u0639\3\2\2\2\u063e")
        buf.write("\u063a\3\2\2\2\u063e\u063c\3\2\2\2\u063e\u063d\3\2\2\2")
        buf.write("\u063f\u009f\3\2\2\2\u0640\u0641\7\6\2\2\u0641\u0642\5")
        buf.write("\u00b2Z\2\u0642\u0643\5\u00b2Z\2\u0643\u0644\5\u00b2Z")
        buf.write("\2\u0644\u0645\5\u00b2Z\2\u0645\u0646\5\u00b2Z\2\u0646")
        buf.write("\u0647\5\u00b2Z\2\u0647\u0648\5\u00ba^\2\u0648\u0649\5")
        buf.write("\u00ba^\2\u0649\u00a1\3\2\2\2\u064a\u0656\5\u00a4S\2\u064b")
        buf.write("\u064c\7\13\2\2\u064c\u0656\7\u00b4\2\2\u064d\u064e\7")
        buf.write("+\2\2\u064e\u0656\5\u00be`\2\u064f\u0650\7\20\2\2\u0650")
        buf.write("\u0656\7\u00b0\2\2\u0651\u0652\7\23\2\2\u0652\u0653\7")
        buf.write("\24\2\2\u0653\u0656\5\u00be`\2\u0654\u0656\7\25\2\2\u0655")
        buf.write("\u064a\3\2\2\2\u0655\u064b\3\2\2\2\u0655\u064d\3\2\2\2")
        buf.write("\u0655\u064f\3\2\2\2\u0655\u0651\3\2\2\2\u0655\u0654\3")
        buf.write("\2\2\2\u0656\u00a3\3\2\2\2\u0657\u0658\7\6\2\2\u0658\u0659")
        buf.write("\5\u00b2Z\2\u0659\u065a\5\u00b2Z\2\u065a\u065b\5\u00ba")
        buf.write("^\2\u065b\u065c\5\u00ba^\2\u065c\u065d\5\u00ba^\2\u065d")
        buf.write("\u00a5\3\2\2\2\u065e\u0670\5\u00a8U\2\u065f\u0660\7\13")
        buf.write("\2\2\u0660\u0670\7\u00b4\2\2\u0661\u0662\7t\2\2\u0662")
        buf.write("\u0670\7\u00b0\2\2\u0663\u0664\7*\2\2\u0664\u0670\5\u00be")
        buf.write("`\2\u0665\u0666\7+\2\2\u0666\u0670\5\u00be`\2\u0667\u0668")
        buf.write("\7\20\2\2\u0668\u0670\7\u00b0\2\2\u0669\u066a\7\23\2\2")
        buf.write("\u066a\u066b\7\24\2\2\u066b\u0670\5\u00be`\2\u066c\u0670")
        buf.write("\7\25\2\2\u066d\u066e\7p\2\2\u066e\u0670\7\u00b0\2\2\u066f")
        buf.write("\u065e\3\2\2\2\u066f\u065f\3\2\2\2\u066f\u0661\3\2\2\2")
        buf.write("\u066f\u0663\3\2\2\2\u066f\u0665\3\2\2\2\u066f\u0667\3")
        buf.write("\2\2\2\u066f\u0669\3\2\2\2\u066f\u066c\3\2\2\2\u066f\u066d")
        buf.write("\3\2\2\2\u0670\u00a7\3\2\2\2\u0671\u0672\7\6\2\2\u0672")
        buf.write("\u0673\5\u00b2Z\2\u0673\u0674\5\u00b2Z\2\u0674\u0675\5")
        buf.write("\u00b2Z\2\u0675\u0676\5\u00ba^\2\u0676\u0677\5\u00ba^")
        buf.write("\2\u0677\u00a9\3\2\2\2\u0678\u0684\5\u00acW\2\u0679\u067a")
        buf.write("\7\13\2\2\u067a\u0684\7\u00b4\2\2\u067b\u067c\7+\2\2\u067c")
        buf.write("\u0684\5\u00be`\2\u067d\u067e\7\20\2\2\u067e\u0684\7\u00b0")
        buf.write("\2\2\u067f\u0680\7\23\2\2\u0680\u0681\7\24\2\2\u0681\u0684")
        buf.write("\5\u00be`\2\u0682\u0684\7\25\2\2\u0683\u0678\3\2\2\2\u0683")
        buf.write("\u0679\3\2\2\2\u0683\u067b\3\2\2\2\u0683\u067d\3\2\2\2")
        buf.write("\u0683\u067f\3\2\2\2\u0683\u0682\3\2\2\2\u0684\u00ab\3")
        buf.write("\2\2\2\u0685\u0686\7\6\2\2\u0686\u0687\5\u00b2Z\2\u0687")
        buf.write("\u0688\5\u00b2Z\2\u0688\u0689\5\u00b2Z\2\u0689\u00ad\3")
        buf.write("\2\2\2\u068a\u06cd\5\u00b0Y\2\u068b\u068d\7w\2\2\u068c")
        buf.write("\u068e\7\u00ba\2\2\u068d\u068c\3\2\2\2\u068d\u068e\3\2")
        buf.write("\2\2\u068e\u068f\3\2\2\2\u068f\u06cd\5\u00be`\2\u0690")
        buf.write("\u0692\7x\2\2\u0691\u0693\7\u00ba\2\2\u0692\u0691\3\2")
        buf.write("\2\2\u0692\u0693\3\2\2\2\u0693\u0694\3\2\2\2\u0694\u06cd")
        buf.write("\5\u00be`\2\u0695\u0697\7y\2\2\u0696\u0698\7\u00ba\2\2")
        buf.write("\u0697\u0696\3\2\2\2\u0697\u0698\3\2\2\2\u0698\u0699\3")
        buf.write("\2\2\2\u0699\u06cd\7\u00b0\2\2\u069a\u069c\7z\2\2\u069b")
        buf.write("\u069d\7\u00ba\2\2\u069c\u069b\3\2\2\2\u069c\u069d\3\2")
        buf.write("\2\2\u069d\u069e\3\2\2\2\u069e\u06cd\7\u00b0\2\2\u069f")
        buf.write("\u06a1\7{\2\2\u06a0\u06a2\7\u00ba\2\2\u06a1\u06a0\3\2")
        buf.write("\2\2\u06a1\u06a2\3\2\2\2\u06a2\u06a3\3\2\2\2\u06a3\u06cd")
        buf.write("\7\u00b0\2\2\u06a4\u06a6\7|\2\2\u06a5\u06a7\7\u00ba\2")
        buf.write("\2\u06a6\u06a5\3\2\2\2\u06a6\u06a7\3\2\2\2\u06a7\u06a8")
        buf.write("\3\2\2\2\u06a8\u06cd\7\u00b4\2\2\u06a9\u06ab\7}\2\2\u06aa")
        buf.write("\u06ac\7\u00ba\2\2\u06ab\u06aa\3\2\2\2\u06ab\u06ac\3\2")
        buf.write("\2\2\u06ac\u06ad\3\2\2\2\u06ad\u06cd\5\u00be`\2\u06ae")
        buf.write("\u06b0\7~\2\2\u06af\u06b1\7\u00ba\2\2\u06b0\u06af\3\2")
        buf.write("\2\2\u06b0\u06b1\3\2\2\2\u06b1\u06b2\3\2\2\2\u06b2\u06cd")
        buf.write("\5\u00be`\2\u06b3\u06b5\7\177\2\2\u06b4\u06b6\7\u00ba")
        buf.write("\2\2\u06b5\u06b4\3\2\2\2\u06b5\u06b6\3\2\2\2\u06b6\u06b7")
        buf.write("\3\2\2\2\u06b7\u06cd\5\u00be`\2\u06b8\u06ba\7\u0080\2")
        buf.write("\2\u06b9\u06bb\7\u00ba\2\2\u06ba\u06b9\3\2\2\2\u06ba\u06bb")
        buf.write("\3\2\2\2\u06bb\u06bc\3\2\2\2\u06bc\u06cd\5\u00be`\2\u06bd")
        buf.write("\u06bf\7\u0081\2\2\u06be\u06c0\7\u00ba\2\2\u06bf\u06be")
        buf.write("\3\2\2\2\u06bf\u06c0\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1")
        buf.write("\u06cd\7\u00b0\2\2\u06c2\u06c4\7\u0082\2\2\u06c3\u06c5")
        buf.write("\7\u00ba\2\2\u06c4\u06c3\3\2\2\2\u06c4\u06c5\3\2\2\2\u06c5")
        buf.write("\u06c6\3\2\2\2\u06c6\u06cd\7\u00b0\2\2\u06c7\u06c9\7\u0083")
        buf.write("\2\2\u06c8\u06ca\7\u00ba\2\2\u06c9\u06c8\3\2\2\2\u06c9")
        buf.write("\u06ca\3\2\2\2\u06ca\u06cb\3\2\2\2\u06cb\u06cd\7\u00b0")
        buf.write("\2\2\u06cc\u068a\3\2\2\2\u06cc\u068b\3\2\2\2\u06cc\u0690")
        buf.write("\3\2\2\2\u06cc\u0695\3\2\2\2\u06cc\u069a\3\2\2\2\u06cc")
        buf.write("\u069f\3\2\2\2\u06cc\u06a4\3\2\2\2\u06cc\u06a9\3\2\2\2")
        buf.write("\u06cc\u06ae\3\2\2\2\u06cc\u06b3\3\2\2\2\u06cc\u06b8\3")
        buf.write("\2\2\2\u06cc\u06bd\3\2\2\2\u06cc\u06c2\3\2\2\2\u06cc\u06c7")
        buf.write("\3\2\2\2\u06cd\u00af\3\2\2\2\u06ce\u06cf\7\6\2\2\u06cf")
        buf.write("\u06d0\5\u00b2Z\2\u06d0\u06d1\5\u00b2Z\2\u06d1\u00b1\3")
        buf.write("\2\2\2\u06d2\u06d3\7\u00b7\2\2\u06d3\u06d4\5\u00b4[\2")
        buf.write("\u06d4\u06d5\7\u00b8\2\2\u06d5\u00b3\3\2\2\2\u06d6\u06db")
        buf.write("\5\u00b6\\\2\u06d7\u06d8\7\u00ab\2\2\u06d8\u06da\5\u00b6")
        buf.write("\\\2\u06d9\u06d7\3\2\2\2\u06da\u06dd\3\2\2\2\u06db\u06d9")
        buf.write("\3\2\2\2\u06db\u06dc\3\2\2\2\u06dc\u00b5\3\2\2\2\u06dd")
        buf.write("\u06db\3\2\2\2\u06de\u06e3\5\u00b8]\2\u06df\u06e0\7\u00ac")
        buf.write("\2\2\u06e0\u06e2\5\u00b8]\2\u06e1\u06df\3\2\2\2\u06e2")
        buf.write("\u06e5\3\2\2\2\u06e3\u06e1\3\2\2\2\u06e3\u06e4\3\2\2\2")
        buf.write("\u06e4\u00b7\3\2\2\2\u06e5\u06e3\3\2\2\2\u06e6\u06e7\b")
        buf.write("]\1\2\u06e7\u06e8\7\u00b7\2\2\u06e8\u06e9\5\u00b4[\2\u06e9")
        buf.write("\u06ea\7\u00b8\2\2\u06ea\u0768\3\2\2\2\u06eb\u0768\7\u0087")
        buf.write("\2\2\u06ec\u06ed\7\u0089\2\2\u06ed\u06ee\t\3\2\2\u06ee")
        buf.write("\u06ef\t\4\2\2\u06ef\u0768\t\3\2\2\u06f0\u06f2\7\u008a")
        buf.write("\2\2\u06f1\u06f3\7\u00c5\2\2\u06f2\u06f1\3\2\2\2\u06f2")
        buf.write("\u06f3\3\2\2\2\u06f3\u06f4\3\2\2\2\u06f4\u06f5\7\u00c6")
        buf.write("\2\2\u06f5\u06f6\7\u00c7\2\2\u06f6\u0768\5\u00bc_\2\u06f7")
        buf.write("\u06f8\7\u008b\2\2\u06f8\u0768\5\u00b8]\37\u06f9\u06fa")
        buf.write("\7\u008c\2\2\u06fa\u0768\5\u00b8]\36\u06fb\u06fc\7\u008d")
        buf.write("\2\2\u06fc\u0768\5\u00b8]\35\u06fd\u0704\7\u008e\2\2\u06fe")
        buf.write("\u0705\7\u00b5\2\2\u06ff\u0702\7\u00b4\2\2\u0700\u0701")
        buf.write("\7\u00b9\2\2\u0701\u0703\7\u00b4\2\2\u0702\u0700\3\2\2")
        buf.write("\2\u0702\u0703\3\2\2\2\u0703\u0705\3\2\2\2\u0704\u06fe")
        buf.write("\3\2\2\2\u0704\u06ff\3\2\2\2\u0705\u0768\3\2\2\2\u0706")
        buf.write("\u0768\7\u008f\2\2\u0707\u0708\7\u0090\2\2\u0708\u0768")
        buf.write("\7\u00b0\2\2\u0709\u0768\7\u0091\2\2\u070a\u0711\7\u0092")
        buf.write("\2\2\u070b\u0712\7\u00b5\2\2\u070c\u070f\7\u00b4\2\2\u070d")
        buf.write("\u070e\7\u00b9\2\2\u070e\u0710\7\u00b4\2\2\u070f\u070d")
        buf.write("\3\2\2\2\u070f\u0710\3\2\2\2\u0710\u0712\3\2\2\2\u0711")
        buf.write("\u070b\3\2\2\2\u0711\u070c\3\2\2\2\u0712\u0768\3\2\2\2")
        buf.write("\u0713\u0714\7\u00ad\2\2\u0714\u0768\5\u00b8]\27\u0715")
        buf.write("\u0716\7\u0093\2\2\u0716\u0717\7\u00b7\2\2\u0717\u0719")
        buf.write("\5\u00bc_\2\u0718\u071a\7\u00ae\2\2\u0719\u0718\3\2\2")
        buf.write("\2\u0719\u071a\3\2\2\2\u071a\u071b\3\2\2\2\u071b\u071d")
        buf.write("\5\u00bc_\2\u071c\u071e\7\u00ae\2\2\u071d\u071c\3\2\2")
        buf.write("\2\u071d\u071e\3\2\2\2\u071e\u071f\3\2\2\2\u071f\u0720")
        buf.write("\5\u00bc_\2\u0720\u0721\7\u00b8\2\2\u0721\u0722\7\u0094")
        buf.write("\2\2\u0722\u0723\5\u00bc_\2\u0723\u0768\3\2\2\2\u0724")
        buf.write("\u0725\7\u0093\2\2\u0725\u0726\7\u00b7\2\2\u0726\u0728")
        buf.write("\7\u00a9\2\2\u0727\u0729\7\u00ba\2\2\u0728\u0727\3\2\2")
        buf.write("\2\u0728\u0729\3\2\2\2\u0729\u072a\3\2\2\2\u072a\u072c")
        buf.write("\5\u00b2Z\2\u072b\u072d\7\u00ae\2\2\u072c\u072b\3\2\2")
        buf.write("\2\u072c\u072d\3\2\2\2\u072d\u0733\3\2\2\2\u072e\u0730")
        buf.write("\7\u00aa\2\2\u072f\u0731\7\u00ba\2\2\u0730\u072f\3\2\2")
        buf.write("\2\u0730\u0731\3\2\2\2\u0731\u0732\3\2\2\2\u0732\u0734")
        buf.write("\5\u00b2Z\2\u0733\u072e\3\2\2\2\u0733\u0734\3\2\2\2\u0734")
        buf.write("\u0735\3\2\2\2\u0735\u0736\7\u00b8\2\2\u0736\u0737\7\u0094")
        buf.write("\2\2\u0737\u0738\5\u00bc_\2\u0738\u0768\3\2\2\2\u0739")
        buf.write("\u0768\7\u0095\2\2\u073a\u0768\7\u0096\2\2\u073b\u0742")
        buf.write("\7\u0097\2\2\u073c\u0743\7\u00b6\2\2\u073d\u0740\7\u00b0")
        buf.write("\2\2\u073e\u073f\7\u00b9\2\2\u073f\u0741\7\u00b0\2\2\u0740")
        buf.write("\u073e\3\2\2\2\u0740\u0741\3\2\2\2\u0741\u0743\3\2\2\2")
        buf.write("\u0742\u073c\3\2\2\2\u0742\u073d\3\2\2\2\u0743\u0768\3")
        buf.write("\2\2\2\u0744\u074b\7\u0098\2\2\u0745\u074c\7\u00b5\2\2")
        buf.write("\u0746\u0749\7\u00b4\2\2\u0747\u0748\7\u00b9\2\2\u0748")
        buf.write("\u074a\7\u00b4\2\2\u0749\u0747\3\2\2\2\u0749\u074a\3\2")
        buf.write("\2\2\u074a\u074c\3\2\2\2\u074b\u0745\3\2\2\2\u074b\u0746")
        buf.write("\3\2\2\2\u074c\u0768\3\2\2\2\u074d\u0759\7\u009a\2\2\u074e")
        buf.write("\u075a\7\u00b5\2\2\u074f\u0752\7\u00b4\2\2\u0750\u0751")
        buf.write("\7\u00b9\2\2\u0751\u0753\7\u00b4\2\2\u0752\u0750\3\2\2")
        buf.write("\2\u0752\u0753\3\2\2\2\u0753\u075a\3\2\2\2\u0754\u0757")
        buf.write("\7\u00b3\2\2\u0755\u0756\7\u00b9\2\2\u0756\u0758\7\u00b3")
        buf.write("\2\2\u0757\u0755\3\2\2\2\u0757\u0758\3\2\2\2\u0758\u075a")
        buf.write("\3\2\2\2\u0759\u074e\3\2\2\2\u0759\u074f\3\2\2\2\u0759")
        buf.write("\u0754\3\2\2\2\u075a\u0768\3\2\2\2\u075b\u0768\7\u009b")
        buf.write("\2\2\u075c\u0768\7\u009c\2\2\u075d\u0768\7\u009d\2\2\u075e")
        buf.write("\u0768\7\u009e\2\2\u075f\u0768\7\u009f\2\2\u0760\u0768")
        buf.write("\7\u00a0\2\2\u0761\u0768\7\u00a1\2\2\u0762\u0768\7\u00a2")
        buf.write("\2\2\u0763\u0768\7\u00a3\2\2\u0764\u0768\7\u00a4\2\2\u0765")
        buf.write("\u0768\7\u0084\2\2\u0766\u0768\7\u0085\2\2\u0767\u06e6")
        buf.write("\3\2\2\2\u0767\u06eb\3\2\2\2\u0767\u06ec\3\2\2\2\u0767")
        buf.write("\u06f0\3\2\2\2\u0767\u06f7\3\2\2\2\u0767\u06f9\3\2\2\2")
        buf.write("\u0767\u06fb\3\2\2\2\u0767\u06fd\3\2\2\2\u0767\u0706\3")
        buf.write("\2\2\2\u0767\u0707\3\2\2\2\u0767\u0709\3\2\2\2\u0767\u070a")
        buf.write("\3\2\2\2\u0767\u0713\3\2\2\2\u0767\u0715\3\2\2\2\u0767")
        buf.write("\u0724\3\2\2\2\u0767\u0739\3\2\2\2\u0767\u073a\3\2\2\2")
        buf.write("\u0767\u073b\3\2\2\2\u0767\u0744\3\2\2\2\u0767\u074d\3")
        buf.write("\2\2\2\u0767\u075b\3\2\2\2\u0767\u075c\3\2\2\2\u0767\u075d")
        buf.write("\3\2\2\2\u0767\u075e\3\2\2\2\u0767\u075f\3\2\2\2\u0767")
        buf.write("\u0760\3\2\2\2\u0767\u0761\3\2\2\2\u0767\u0762\3\2\2\2")
        buf.write("\u0767\u0763\3\2\2\2\u0767\u0764\3\2\2\2\u0767\u0765\3")
        buf.write("\2\2\2\u0767\u0766\3\2\2\2\u0768\u0771\3\2\2\2\u0769\u076a")
        buf.write("\f\"\2\2\u076a\u076b\7\u0088\2\2\u076b\u0770\5\u00bc_")
        buf.write("\2\u076c\u076d\f\20\2\2\u076d\u076e\7\u0099\2\2\u076e")
        buf.write("\u0770\5\u00bc_\2\u076f\u0769\3\2\2\2\u076f\u076c\3\2")
        buf.write("\2\2\u0770\u0773\3\2\2\2\u0771\u076f\3\2\2\2\u0771\u0772")
        buf.write("\3\2\2\2\u0772\u00b9\3\2\2\2\u0773\u0771\3\2\2\2\u0774")
        buf.write("\u0775\t\5\2\2\u0775\u00bb\3\2\2\2\u0776\u0777\t\5\2\2")
        buf.write("\u0777\u00bd\3\2\2\2\u0778\u0779\t\5\2\2\u0779\u00bf\3")
        buf.write("\2\2\2\u077a\u077b\t\5\2\2\u077b\u00c1\3\2\2\2\u077c\u0787")
        buf.write("\7\u0086\2\2\u077d\u0785\7\u00d6\2\2\u077e\u0780\7\u00d9")
        buf.write("\2\2\u077f\u077e\3\2\2\2\u0780\u0783\3\2\2\2\u0781\u077f")
        buf.write("\3\2\2\2\u0781\u0782\3\2\2\2\u0782\u0786\3\2\2\2\u0783")
        buf.write("\u0781\3\2\2\2\u0784\u0786\7\u00da\2\2\u0785\u0781\3\2")
        buf.write("\2\2\u0785\u0784\3\2\2\2\u0786\u0788\3\2\2\2\u0787\u077d")
        buf.write("\3\2\2\2\u0787\u0788\3\2\2\2\u0788\u0789\3\2\2\2\u0789")
        buf.write("\u078d\7\u00d7\2\2\u078a\u078c\7\u00d9\2\2\u078b\u078a")
        buf.write("\3\2\2\2\u078c\u078f\3\2\2\2\u078d\u078b\3\2\2\2\u078d")
        buf.write("\u078e\3\2\2\2\u078e\u0790\3\2\2\2\u078f\u078d\3\2\2\2")
        buf.write("\u0790\u0791\7\u00d8\2\2\u0791\u00c3\3\2\2\2\u0792\u0793")
        buf.write("\7\u00a5\2\2\u0793\u0794\5\u00c6d\2\u0794\u0795\5\u00b2")
        buf.write("Z\2\u0795\u00c5\3\2\2\2\u0796\u0797\t\6\2\2\u0797\u0798")
        buf.write("\5\u00c8e\2\u0798\u0799\7\u00dc\2\2\u0799\u079d\3\2\2")
        buf.write("\2\u079a\u079b\7\u00a8\2\2\u079b\u079d\5\u00d0i\2\u079c")
        buf.write("\u0796\3\2\2\2\u079c\u079a\3\2\2\2\u079d\u00c7\3\2\2\2")
        buf.write("\u079e\u07a1\7\u00e6\2\2\u079f\u07a0\7\u00dd\2\2\u07a0")
        buf.write("\u07a2\5\u00caf\2\u07a1\u079f\3\2\2\2\u07a1\u07a2\3\2")
        buf.write("\2\2\u07a2\u00c9\3\2\2\2\u07a3\u07a8\5\u00ccg\2\u07a4")
        buf.write("\u07a5\t\7\2\2\u07a5\u07a7\5\u00caf\2\u07a6\u07a4\3\2")
        buf.write("\2\2\u07a7\u07aa\3\2\2\2\u07a8\u07a6\3\2\2\2\u07a8\u07a9")
        buf.write("\3\2\2\2\u07a9\u00cb\3\2\2\2\u07aa\u07a8\3\2\2\2\u07ab")
        buf.write("\u07b2\7\u00e6\2\2\u07ac\u07b2\5\u00ceh\2\u07ad\u07b2")
        buf.write("\7\u00e4\2\2\u07ae\u07b2\7\u00e5\2\2\u07af\u07b2\7\u00fd")
        buf.write("\2\2\u07b0\u07b2\7\u00fe\2\2\u07b1\u07ab\3\2\2\2\u07b1")
        buf.write("\u07ac\3\2\2\2\u07b1\u07ad\3\2\2\2\u07b1\u07ae\3\2\2\2")
        buf.write("\u07b1\u07af\3\2\2\2\u07b1\u07b0\3\2\2\2\u07b2\u00cd\3")
        buf.write("\2\2\2\u07b3\u07b4\7\u00e7\2\2\u07b4\u07b5\7\u00ff\2\2")
        buf.write("\u07b5\u07b6\5\u00ccg\2\u07b6\u07b7\7\u00dc\2\2\u07b7")
        buf.write("\u082b\3\2\2\2\u07b8\u07b9\7\u00e8\2\2\u07b9\u07ba\7\u00ff")
        buf.write("\2\2\u07ba\u07bb\5\u00ccg\2\u07bb\u07bc\7\u00dc\2\2\u07bc")
        buf.write("\u082b\3\2\2\2\u07bd\u07be\7\u00ea\2\2\u07be\u07bf\7\u00ff")
        buf.write("\2\2\u07bf\u07c0\5\u00ccg\2\u07c0\u07c1\7\u00dc\2\2\u07c1")
        buf.write("\u082b\3\2\2\2\u07c2\u07c3\7\u00eb\2\2\u07c3\u07c4\7\u00ff")
        buf.write("\2\2\u07c4\u07c5\5\u00ccg\2\u07c5\u07c6\7\u00dc\2\2\u07c6")
        buf.write("\u082b\3\2\2\2\u07c7\u07c8\7\u00ec\2\2\u07c8\u07c9\7\u00ff")
        buf.write("\2\2\u07c9\u07ca\5\u00ccg\2\u07ca\u07cb\7\u00dc\2\2\u07cb")
        buf.write("\u082b\3\2\2\2\u07cc\u07cd\7\u00ed\2\2\u07cd\u07ce\7\u00ff")
        buf.write("\2\2\u07ce\u07cf\5\u00ccg\2\u07cf\u07d0\7\u00dc\2\2\u07d0")
        buf.write("\u082b\3\2\2\2\u07d1\u07d2\7\u00ee\2\2\u07d2\u07d3\7\u00ff")
        buf.write("\2\2\u07d3\u07d4\5\u00ccg\2\u07d4\u07d5\7\u00dc\2\2\u07d5")
        buf.write("\u082b\3\2\2\2\u07d6\u07d7\7\u00ef\2\2\u07d7\u07d8\7\u00ff")
        buf.write("\2\2\u07d8\u07d9\5\u00ccg\2\u07d9\u07da\7\u00dc\2\2\u07da")
        buf.write("\u082b\3\2\2\2\u07db\u07dc\7\u00f0\2\2\u07dc\u07dd\7\u00ff")
        buf.write("\2\2\u07dd\u07de\5\u00ccg\2\u07de\u07df\7\u00dc\2\2\u07df")
        buf.write("\u082b\3\2\2\2\u07e0\u07e1\7\u00f1\2\2\u07e1\u07e2\7\u00ff")
        buf.write("\2\2\u07e2\u07e3\5\u00ccg\2\u07e3\u07e4\7\u00dc\2\2\u07e4")
        buf.write("\u082b\3\2\2\2\u07e5\u07e6\7\u00f2\2\2\u07e6\u07e7\7\u00ff")
        buf.write("\2\2\u07e7\u07e8\5\u00ccg\2\u07e8\u07e9\7\u00dc\2\2\u07e9")
        buf.write("\u082b\3\2\2\2\u07ea\u07eb\7\u00f3\2\2\u07eb\u07ec\7\u00ff")
        buf.write("\2\2\u07ec\u07f1\5\u00ccg\2\u07ed\u07ee\7\u00e3\2\2\u07ee")
        buf.write("\u07f0\5\u00ccg\2\u07ef\u07ed\3\2\2\2\u07f0\u07f3\3\2")
        buf.write("\2\2\u07f1\u07ef\3\2\2\2\u07f1\u07f2\3\2\2\2\u07f2\u07f4")
        buf.write("\3\2\2\2\u07f3\u07f1\3\2\2\2\u07f4\u07f5\7\u00dc\2\2\u07f5")
        buf.write("\u082b\3\2\2\2\u07f6\u07f7\7\u00f4\2\2\u07f7\u07f8\7\u00ff")
        buf.write("\2\2\u07f8\u07f9\5\u00ccg\2\u07f9\u07fa\7\u00dc\2\2\u07fa")
        buf.write("\u082b\3\2\2\2\u07fb\u07fc\7\u00f5\2\2\u07fc\u07fd\7\u00ff")
        buf.write("\2\2\u07fd\u0802\5\u00ccg\2\u07fe\u07ff\7\u00e3\2\2\u07ff")
        buf.write("\u0801\5\u00ccg\2\u0800\u07fe\3\2\2\2\u0801\u0804\3\2")
        buf.write("\2\2\u0802\u0800\3\2\2\2\u0802\u0803\3\2\2\2\u0803\u0805")
        buf.write("\3\2\2\2\u0804\u0802\3\2\2\2\u0805\u0806\7\u00dc\2\2\u0806")
        buf.write("\u082b\3\2\2\2\u0807\u0808\7\u00f6\2\2\u0808\u0809\7\u00ff")
        buf.write("\2\2\u0809\u080a\5\u00ccg\2\u080a\u080b\7\u00e3\2\2\u080b")
        buf.write("\u080c\5\u00ccg\2\u080c\u080d\7\u00dc\2\2\u080d\u082b")
        buf.write("\3\2\2\2\u080e\u080f\7\u00f7\2\2\u080f\u0810\7\u00ff\2")
        buf.write("\2\u0810\u0811\5\u00ccg\2\u0811\u0812\7\u00dc\2\2\u0812")
        buf.write("\u082b\3\2\2\2\u0813\u0814\7\u00f8\2\2\u0814\u0815\7\u00ff")
        buf.write("\2\2\u0815\u082b\7\u00dc\2\2\u0816\u0817\7\u00f9\2\2\u0817")
        buf.write("\u0818\7\u00ff\2\2\u0818\u0819\5\u00ccg\2\u0819\u081a")
        buf.write("\7\u00dc\2\2\u081a\u082b\3\2\2\2\u081b\u081c\7\u00fa\2")
        buf.write("\2\u081c\u081d\7\u00ff\2\2\u081d\u081e\5\u00ccg\2\u081e")
        buf.write("\u081f\7\u00dc\2\2\u081f\u082b\3\2\2\2\u0820\u0821\7\u00fb")
        buf.write("\2\2\u0821\u0822\7\u00ff\2\2\u0822\u0823\5\u00ccg\2\u0823")
        buf.write("\u0824\7\u00dc\2\2\u0824\u082b\3\2\2\2\u0825\u0826\7\u00fc")
        buf.write("\2\2\u0826\u0827\7\u00ff\2\2\u0827\u0828\5\u00ccg\2\u0828")
        buf.write("\u0829\7\u00dc\2\2\u0829\u082b\3\2\2\2\u082a\u07b3\3\2")
        buf.write("\2\2\u082a\u07b8\3\2\2\2\u082a\u07bd\3\2\2\2\u082a\u07c2")
        buf.write("\3\2\2\2\u082a\u07c7\3\2\2\2\u082a\u07cc\3\2\2\2\u082a")
        buf.write("\u07d1\3\2\2\2\u082a\u07d6\3\2\2\2\u082a\u07db\3\2\2\2")
        buf.write("\u082a\u07e0\3\2\2\2\u082a\u07e5\3\2\2\2\u082a\u07ea\3")
        buf.write("\2\2\2\u082a\u07f6\3\2\2\2\u082a\u07fb\3\2\2\2\u082a\u0807")
        buf.write("\3\2\2\2\u082a\u080e\3\2\2\2\u082a\u0813\3\2\2\2\u082a")
        buf.write("\u0816\3\2\2\2\u082a\u081b\3\2\2\2\u082a\u0820\3\2\2\2")
        buf.write("\u082a\u0825\3\2\2\2\u082b\u00cf\3\2\2\2\u082c\u082d\t")
        buf.write("\b\2\2\u082d\u082e\7\u0100\2\2\u082e\u082f\7\u0109\2\2")
        buf.write("\u082f\u0830\7\u0101\2\2\u0830\u00d1\3\2\2\2\u00af\u00f7")
        buf.write("\u00f9\u0102\u0108\u010e\u0117\u011f\u0127\u012f\u0137")
        buf.write("\u013b\u013e\u0144\u014d\u0156\u015f\u0168\u0171\u017a")
        buf.write("\u0183\u018c\u0195\u019e\u01a7\u01b0\u01b9\u01c2\u01cb")
        buf.write("\u01d4\u01dd\u01e6\u01ef\u0200\u0213\u0220\u0238\u023b")
        buf.write("\u0246\u024f\u0254\u0259\u0260\u0264\u0269\u026e\u0273")
        buf.write("\u0278\u027d\u0282\u0285\u028a\u0290\u02ae\u02ba\u02d6")
        buf.write("\u02e7\u02ec\u02f9\u0300\u0319\u0336\u0344\u0349\u034d")
        buf.write("\u0352\u0355\u0367\u036f\u0380\u0388\u038e\u0399\u039c")
        buf.write("\u03a8\u03af\u03cb\u03ed\u03f7\u03fc\u0401\u0405\u0411")
        buf.write("\u0429\u043d\u0443\u0449\u0455\u045b\u0461\u0469\u0473")
        buf.write("\u0479\u047f\u048a\u048d\u0490\u0494\u04a0\u04a7\u04ae")
        buf.write("\u04b5\u04d2\u0504\u0517\u053a\u0562\u057a\u059f\u05a7")
        buf.write("\u05b6\u05bb\u05c0\u05c6\u05cb\u05d1\u05d7\u05dd\u05e9")
        buf.write("\u05ed\u0608\u0619\u063e\u0655\u066f\u0683\u068d\u0692")
        buf.write("\u0697\u069c\u06a1\u06a6\u06ab\u06b0\u06b5\u06ba\u06bf")
        buf.write("\u06c4\u06c9\u06cc\u06db\u06e3\u06f2\u0702\u0704\u070f")
        buf.write("\u0711\u0719\u071d\u0728\u072c\u0730\u0733\u0740\u0742")
        buf.write("\u0749\u074b\u0752\u0757\u0759\u0767\u076f\u0771\u0781")
        buf.write("\u0785\u0787\u078d\u079c\u07a1\u07a8\u07b1\u07f1\u0802")
        buf.write("\u082a")
        return buf.getvalue()


class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "':'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'<'", "'>'", "'<='", "'>='", "'#'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'+'", "'-'", "<INVALID>", "'/'" ]

    symbolicNames = [ "<INVALID>", "Set", "End", "Noe", "Assign", "Asymptote", 
                      "Averaging", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Cutoff", "Cuton", "From", 
                      "To", "Peak", "Spectrum", "Volume", "Ppm1", "Ppm2", 
                      "Restraints", "Dihedral", "Nassign", "Sanisotropy", 
                      "Coefficients", "ForceConstant", "Xdipolar", "Dipolar", 
                      "Type", "Sign", "Average", "VectorAngle", "Cv", "Partition", 
                      "Tensor", "Anisotropy", "Planar", "Group", "Initialize", 
                      "Selection", "Weight", "Xadc", "Expectation", "Size", 
                      "Zero", "Coupling", "DegEnergy", "Carbon", "PhiStep", 
                      "PsiStep", "Rcoil", "Proton", "Observed", "Amides", 
                      "Nitrogens", "Oxygens", "RingAtoms", "AlphasAndAmides", 
                      "Error", "Ramachandran", "Gaussian", "Phase", "Quartic", 
                      "Shape", "Sort", "Dimensions", "Collapse", "Danisotropy", 
                      "Orient", "Height", "MaxGaussians", "NewGaussian", 
                      "Dcsa", "Sigma", "Pcsa", "OneBond", "AngleDb", "DerivFlag", 
                      "Angle_or_Dihedral", "Paramagnetic", "Kconst", "Omega", 
                      "Tauc", "Debug", "Xpcs", "Tolerance", "Save", "Fmed", 
                      "ErrOn", "ErrOff", "Fon", "Foff", "Son", "Soff", "Frun", 
                      "Xrdcoupling", "Xangle", "Xccr", "Weip", "Hbda", "Hbdb", 
                      "Kdir", "Klin", "Nseg", "Nmin", "Nmax", "Segm", "Ohcut", 
                      "Coh1cut", "Coh2cut", "Ohncut", "Updfrq", "Prnfrq", 
                      "Freemode", "Donor", "Acceptor", "Flags", "All", "Around", 
                      "Atom", "Attribute", "BondedTo", "ByGroup", "ByRes", 
                      "Chemical", "Hydrogen", "Id", "Known", "Name", "Point", 
                      "Cut", "Previous", "Pseudo", "Residue", "Resname", 
                      "Saround", "SegIdentifier", "Store_1", "Store_2", 
                      "Store_3", "Store_4", "Store_5", "Store_6", "Store_7", 
                      "Store_8", "Store_9", "Tag", "Vector", "Do_Lp", "Identify_Lp", 
                      "Show", "Tail", "Head", "Or_op", "And_op", "Not_op", 
                      "Comma", "Complex", "Integer", "Logical", "Real", 
                      "Double_quote_string", "Simple_name", "Simple_names", 
                      "Integers", "L_paren", "R_paren", "Colon", "Equ_op", 
                      "SPACE", "COMMENT", "SECTION_COMMENT", "LINE_COMMENT", 
                      "SET_VARIABLE", "Lt_op", "Gt_op", "Leq_op", "Geq_op", 
                      "Neq_op", "Abs", "Attr_properties", "Comparison_ops", 
                      "SPACE_ATTR", "Averaging_methods", "Simple_name_A", 
                      "SPACE_AVER", "Equ_op_P", "Potential_types", "Simple_name_P", 
                      "SPACE_POTE", "Rdc_dist_fix_types", "Rdc_or_Diff_anis_types", 
                      "Csa_types", "SPACE_TYPE", "Gauss_or_Quart", "SPACE_SHAP", 
                      "Exclude", "Include", "End_F", "Class_name", "Any_class", 
                      "SPACE_FLAG", "R_paren_VE", "Equ_op_VE", "Add_op_VE", 
                      "Sub_op_VE", "Mul_op_VE", "Div_op_VE", "Exp_op_VE", 
                      "Comma_VE", "Integer_VE", "Real_VE", "Atom_properties_VE", 
                      "Abs_VE", "Acos_VE", "Asin_VE", "Cos_VE", "Decode_VE", 
                      "Encode_VE", "Exp_VE", "Gauss_VE", "Heavy_VE", "Int_VE", 
                      "Log10_VE", "Log_VE", "Max_VE", "Maxw_VE", "Min_VE", 
                      "Mod_VE", "Norm_VE", "Random_VE", "Sign_VE", "Sin_VE", 
                      "Sqrt_VE", "Tan_VE", "Simple_name_VE", "Double_quote_string_VE", 
                      "L_paren_VF", "L_paren_VS", "R_paren_VS", "Average_VS", 
                      "Element_VS", "Max_VS", "Min_VS", "Norm_VS", "Rms_VS", 
                      "Sum_VS", "Atom_properties_VS", "SPACE_VS" ]

    RULE_xplor_nih_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_rdc_restraint = 3
    RULE_planar_restraint = 4
    RULE_antidistance_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_dihedral_angle_db_restraint = 9
    RULE_radius_of_gyration_restraint = 10
    RULE_diffusion_anisotropy_restraint = 11
    RULE_orientation_db_restraint = 12
    RULE_csa_restraint = 13
    RULE_pcsa_restraint = 14
    RULE_one_bond_coupling_restraint = 15
    RULE_angle_db_restraint = 16
    RULE_pre_restraint = 17
    RULE_pcs_restraint = 18
    RULE_prdc_restraint = 19
    RULE_porientation_restraint = 20
    RULE_pccr_restraint = 21
    RULE_hbond_restraint = 22
    RULE_hbond_db_restraint = 23
    RULE_noe_statement = 24
    RULE_noe_assign = 25
    RULE_predict_statement = 26
    RULE_noe_annotation = 27
    RULE_dihedral_statement = 28
    RULE_dihedral_assign = 29
    RULE_sani_statement = 30
    RULE_sani_assign = 31
    RULE_xdip_statement = 32
    RULE_xdip_assign = 33
    RULE_vean_statement = 34
    RULE_vean_assign = 35
    RULE_tenso_statement = 36
    RULE_tenso_assign = 37
    RULE_anis_statement = 38
    RULE_anis_assign = 39
    RULE_planar_statement = 40
    RULE_group_statement = 41
    RULE_antidistance_statement = 42
    RULE_xadc_assign = 43
    RULE_coupling_statement = 44
    RULE_coup_assign = 45
    RULE_carbon_shift_statement = 46
    RULE_carbon_shift_assign = 47
    RULE_carbon_shift_rcoil = 48
    RULE_proton_shift_statement = 49
    RULE_observed = 50
    RULE_proton_shift_rcoil = 51
    RULE_proton_shift_anisotropy = 52
    RULE_proton_shift_amides = 53
    RULE_proton_shift_carbons = 54
    RULE_proton_shift_nitrogens = 55
    RULE_proton_shift_oxygens = 56
    RULE_proton_shift_ring_atoms = 57
    RULE_proton_shift_alphas_and_amides = 58
    RULE_ramachandran_statement = 59
    RULE_rama_assign = 60
    RULE_collapse_statement = 61
    RULE_coll_assign = 62
    RULE_diffusion_statement = 63
    RULE_dani_assign = 64
    RULE_orientation_statement = 65
    RULE_orie_assign = 66
    RULE_csa_statement = 67
    RULE_csa_assign = 68
    RULE_pcsa_statement = 69
    RULE_one_bond_coupling_statement = 70
    RULE_one_bond_assign = 71
    RULE_angle_db_statement = 72
    RULE_angle_db_assign = 73
    RULE_pre_statement = 74
    RULE_pre_assign = 75
    RULE_pcs_statement = 76
    RULE_pcs_assign = 77
    RULE_prdc_statement = 78
    RULE_prdc_assign = 79
    RULE_porientation_statement = 80
    RULE_porientation_assign = 81
    RULE_pccr_statement = 82
    RULE_pccr_assign = 83
    RULE_hbond_statement = 84
    RULE_hbond_assign = 85
    RULE_hbond_db_statement = 86
    RULE_hbond_db_assign = 87
    RULE_selection = 88
    RULE_selection_expression = 89
    RULE_term = 90
    RULE_factor = 91
    RULE_number = 92
    RULE_number_f = 93
    RULE_number_s = 94
    RULE_number_a = 95
    RULE_flag_statement = 96
    RULE_vector_statement = 97
    RULE_vector_mode = 98
    RULE_vector_expression = 99
    RULE_vector_operation = 100
    RULE_vflc = 101
    RULE_vector_func_call = 102
    RULE_vector_show_property = 103

    ruleNames =  [ "xplor_nih_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "antidistance_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "dihedral_angle_db_restraint", "radius_of_gyration_restraint", 
                   "diffusion_anisotropy_restraint", "orientation_db_restraint", 
                   "csa_restraint", "pcsa_restraint", "one_bond_coupling_restraint", 
                   "angle_db_restraint", "pre_restraint", "pcs_restraint", 
                   "prdc_restraint", "porientation_restraint", "pccr_restraint", 
                   "hbond_restraint", "hbond_db_restraint", "noe_statement", 
                   "noe_assign", "predict_statement", "noe_annotation", 
                   "dihedral_statement", "dihedral_assign", "sani_statement", 
                   "sani_assign", "xdip_statement", "xdip_assign", "vean_statement", 
                   "vean_assign", "tenso_statement", "tenso_assign", "anis_statement", 
                   "anis_assign", "planar_statement", "group_statement", 
                   "antidistance_statement", "xadc_assign", "coupling_statement", 
                   "coup_assign", "carbon_shift_statement", "carbon_shift_assign", 
                   "carbon_shift_rcoil", "proton_shift_statement", "observed", 
                   "proton_shift_rcoil", "proton_shift_anisotropy", "proton_shift_amides", 
                   "proton_shift_carbons", "proton_shift_nitrogens", "proton_shift_oxygens", 
                   "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "coll_assign", "diffusion_statement", "dani_assign", 
                   "orientation_statement", "orie_assign", "csa_statement", 
                   "csa_assign", "pcsa_statement", "one_bond_coupling_statement", 
                   "one_bond_assign", "angle_db_statement", "angle_db_assign", 
                   "pre_statement", "pre_assign", "pcs_statement", "pcs_assign", 
                   "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "hbond_db_statement", 
                   "hbond_db_assign", "selection", "selection_expression", 
                   "term", "factor", "number", "number_f", "number_s", "number_a", 
                   "flag_statement", "vector_statement", "vector_mode", 
                   "vector_expression", "vector_operation", "vflc", "vector_func_call", 
                   "vector_show_property" ]

    EOF = Token.EOF
    Set=1
    End=2
    Noe=3
    Assign=4
    Asymptote=5
    Averaging=6
    Bhig=7
    Ceiling=8
    Classification=9
    CountViol=10
    Distribute=11
    Monomers=12
    Ncount=13
    Nrestraints=14
    Potential=15
    Predict=16
    Print=17
    Threshold=18
    Reset=19
    Rswitch=20
    Scale=21
    SoExponent=22
    SqConstant=23
    SqExponent=24
    SqOffset=25
    Temperature=26
    Cutoff=27
    Cuton=28
    From=29
    To=30
    Peak=31
    Spectrum=32
    Volume=33
    Ppm1=34
    Ppm2=35
    Restraints=36
    Dihedral=37
    Nassign=38
    Sanisotropy=39
    Coefficients=40
    ForceConstant=41
    Xdipolar=42
    Dipolar=43
    Type=44
    Sign=45
    Average=46
    VectorAngle=47
    Cv=48
    Partition=49
    Tensor=50
    Anisotropy=51
    Planar=52
    Group=53
    Initialize=54
    Selection=55
    Weight=56
    Xadc=57
    Expectation=58
    Size=59
    Zero=60
    Coupling=61
    DegEnergy=62
    Carbon=63
    PhiStep=64
    PsiStep=65
    Rcoil=66
    Proton=67
    Observed=68
    Amides=69
    Nitrogens=70
    Oxygens=71
    RingAtoms=72
    AlphasAndAmides=73
    Error=74
    Ramachandran=75
    Gaussian=76
    Phase=77
    Quartic=78
    Shape=79
    Sort=80
    Dimensions=81
    Collapse=82
    Danisotropy=83
    Orient=84
    Height=85
    MaxGaussians=86
    NewGaussian=87
    Dcsa=88
    Sigma=89
    Pcsa=90
    OneBond=91
    AngleDb=92
    DerivFlag=93
    Angle_or_Dihedral=94
    Paramagnetic=95
    Kconst=96
    Omega=97
    Tauc=98
    Debug=99
    Xpcs=100
    Tolerance=101
    Save=102
    Fmed=103
    ErrOn=104
    ErrOff=105
    Fon=106
    Foff=107
    Son=108
    Soff=109
    Frun=110
    Xrdcoupling=111
    Xangle=112
    Xccr=113
    Weip=114
    Hbda=115
    Hbdb=116
    Kdir=117
    Klin=118
    Nseg=119
    Nmin=120
    Nmax=121
    Segm=122
    Ohcut=123
    Coh1cut=124
    Coh2cut=125
    Ohncut=126
    Updfrq=127
    Prnfrq=128
    Freemode=129
    Donor=130
    Acceptor=131
    Flags=132
    All=133
    Around=134
    Atom=135
    Attribute=136
    BondedTo=137
    ByGroup=138
    ByRes=139
    Chemical=140
    Hydrogen=141
    Id=142
    Known=143
    Name=144
    Point=145
    Cut=146
    Previous=147
    Pseudo=148
    Residue=149
    Resname=150
    Saround=151
    SegIdentifier=152
    Store_1=153
    Store_2=154
    Store_3=155
    Store_4=156
    Store_5=157
    Store_6=158
    Store_7=159
    Store_8=160
    Store_9=161
    Tag=162
    Vector=163
    Do_Lp=164
    Identify_Lp=165
    Show=166
    Tail=167
    Head=168
    Or_op=169
    And_op=170
    Not_op=171
    Comma=172
    Complex=173
    Integer=174
    Logical=175
    Real=176
    Double_quote_string=177
    Simple_name=178
    Simple_names=179
    Integers=180
    L_paren=181
    R_paren=182
    Colon=183
    Equ_op=184
    SPACE=185
    COMMENT=186
    SECTION_COMMENT=187
    LINE_COMMENT=188
    SET_VARIABLE=189
    Lt_op=190
    Gt_op=191
    Leq_op=192
    Geq_op=193
    Neq_op=194
    Abs=195
    Attr_properties=196
    Comparison_ops=197
    SPACE_ATTR=198
    Averaging_methods=199
    Simple_name_A=200
    SPACE_AVER=201
    Equ_op_P=202
    Potential_types=203
    Simple_name_P=204
    SPACE_POTE=205
    Rdc_dist_fix_types=206
    Rdc_or_Diff_anis_types=207
    Csa_types=208
    SPACE_TYPE=209
    Gauss_or_Quart=210
    SPACE_SHAP=211
    Exclude=212
    Include=213
    End_F=214
    Class_name=215
    Any_class=216
    SPACE_FLAG=217
    R_paren_VE=218
    Equ_op_VE=219
    Add_op_VE=220
    Sub_op_VE=221
    Mul_op_VE=222
    Div_op_VE=223
    Exp_op_VE=224
    Comma_VE=225
    Integer_VE=226
    Real_VE=227
    Atom_properties_VE=228
    Abs_VE=229
    Acos_VE=230
    Asin_VE=231
    Cos_VE=232
    Decode_VE=233
    Encode_VE=234
    Exp_VE=235
    Gauss_VE=236
    Heavy_VE=237
    Int_VE=238
    Log10_VE=239
    Log_VE=240
    Max_VE=241
    Maxw_VE=242
    Min_VE=243
    Mod_VE=244
    Norm_VE=245
    Random_VE=246
    Sign_VE=247
    Sin_VE=248
    Sqrt_VE=249
    Tan_VE=250
    Simple_name_VE=251
    Double_quote_string_VE=252
    L_paren_VF=253
    L_paren_VS=254
    R_paren_VS=255
    Average_VS=256
    Element_VS=257
    Max_VS=258
    Min_VS=259
    Norm_VS=260
    Rms_VS=261
    Sum_VS=262
    Atom_properties_VS=263
    SPACE_VS=264

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def hbond_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_restraintContext,i)


        def flag_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Flag_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Flag_statementContext,i)


        def vector_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_statementContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def hbond_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,i)


        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def coll_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coll_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,i)


        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 247
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Noe) | (1 << XplorMRParser.Assign) | (1 << XplorMRParser.Restraints) | (1 << XplorMRParser.Dihedral) | (1 << XplorMRParser.Sanisotropy) | (1 << XplorMRParser.Xdipolar) | (1 << XplorMRParser.Dipolar) | (1 << XplorMRParser.VectorAngle) | (1 << XplorMRParser.Tensor) | (1 << XplorMRParser.Anisotropy) | (1 << XplorMRParser.Planar) | (1 << XplorMRParser.Group) | (1 << XplorMRParser.Initialize) | (1 << XplorMRParser.Xadc) | (1 << XplorMRParser.Coupling) | (1 << XplorMRParser.Carbon))) != 0) or ((((_la - 67)) & ~0x3f) == 0 and ((1 << (_la - 67)) & ((1 << (XplorMRParser.Proton - 67)) | (1 << (XplorMRParser.Ramachandran - 67)) | (1 << (XplorMRParser.Collapse - 67)) | (1 << (XplorMRParser.Danisotropy - 67)) | (1 << (XplorMRParser.Orient - 67)) | (1 << (XplorMRParser.Dcsa - 67)) | (1 << (XplorMRParser.Pcsa - 67)) | (1 << (XplorMRParser.OneBond - 67)) | (1 << (XplorMRParser.AngleDb - 67)) | (1 << (XplorMRParser.Paramagnetic - 67)) | (1 << (XplorMRParser.Xpcs - 67)) | (1 << (XplorMRParser.Xrdcoupling - 67)) | (1 << (XplorMRParser.Xangle - 67)) | (1 << (XplorMRParser.Xccr - 67)) | (1 << (XplorMRParser.Hbda - 67)) | (1 << (XplorMRParser.Hbdb - 67)))) != 0) or _la==XplorMRParser.Flags or _la==XplorMRParser.Vector:
                self.state = 245
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 208
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 209
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 210
                    self.rdc_restraint()
                    pass

                elif la_ == 4:
                    self.state = 211
                    self.planar_restraint()
                    pass

                elif la_ == 5:
                    self.state = 212
                    self.antidistance_restraint()
                    pass

                elif la_ == 6:
                    self.state = 213
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 214
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 215
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 216
                    self.dihedral_angle_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 217
                    self.radius_of_gyration_restraint()
                    pass

                elif la_ == 11:
                    self.state = 218
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 12:
                    self.state = 219
                    self.orientation_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 220
                    self.csa_restraint()
                    pass

                elif la_ == 14:
                    self.state = 221
                    self.pcsa_restraint()
                    pass

                elif la_ == 15:
                    self.state = 222
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 16:
                    self.state = 223
                    self.angle_db_restraint()
                    pass

                elif la_ == 17:
                    self.state = 224
                    self.pre_restraint()
                    pass

                elif la_ == 18:
                    self.state = 225
                    self.pcs_restraint()
                    pass

                elif la_ == 19:
                    self.state = 226
                    self.prdc_restraint()
                    pass

                elif la_ == 20:
                    self.state = 227
                    self.porientation_restraint()
                    pass

                elif la_ == 21:
                    self.state = 228
                    self.pccr_restraint()
                    pass

                elif la_ == 22:
                    self.state = 229
                    self.hbond_restraint()
                    pass

                elif la_ == 23:
                    self.state = 230
                    self.hbond_db_restraint()
                    pass

                elif la_ == 24:
                    self.state = 231
                    self.flag_statement()
                    pass

                elif la_ == 25:
                    self.state = 232
                    self.vector_statement()
                    pass

                elif la_ == 26:
                    self.state = 233
                    self.noe_assign()
                    pass

                elif la_ == 27:
                    self.state = 234
                    self.dihedral_assign()
                    pass

                elif la_ == 28:
                    self.state = 235
                    self.sani_assign()
                    pass

                elif la_ == 29:
                    self.state = 236
                    self.planar_statement()
                    pass

                elif la_ == 30:
                    self.state = 237
                    self.hbond_assign()
                    pass

                elif la_ == 31:
                    self.state = 238
                    self.hbond_db_assign()
                    pass

                elif la_ == 32:
                    self.state = 239
                    self.coup_assign()
                    pass

                elif la_ == 33:
                    self.state = 240
                    self.xadc_assign()
                    pass

                elif la_ == 34:
                    self.state = 241
                    self.coll_assign()
                    pass

                elif la_ == 35:
                    self.state = 242
                    self.csa_assign()
                    pass

                elif la_ == 36:
                    self.state = 243
                    self.pre_assign()
                    pass

                elif la_ == 37:
                    self.state = 244
                    self.pcs_assign()
                    pass


                self.state = 249
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 250
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def noe_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 252
            self.match(XplorMRParser.Noe)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Asymptote) | (1 << XplorMRParser.Averaging) | (1 << XplorMRParser.Bhig) | (1 << XplorMRParser.Ceiling) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.CountViol) | (1 << XplorMRParser.Distribute) | (1 << XplorMRParser.Monomers) | (1 << XplorMRParser.Ncount) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Predict) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Rswitch) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.SoExponent) | (1 << XplorMRParser.SqConstant) | (1 << XplorMRParser.SqExponent) | (1 << XplorMRParser.SqOffset) | (1 << XplorMRParser.Temperature))) != 0):
                self.state = 253
                self.noe_statement()
                self.state = 258
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 259
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def dihedral_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 261
                self.match(XplorMRParser.Restraints)


            self.state = 264
            self.match(XplorMRParser.Dihedral)
            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Nassign))) != 0):
                self.state = 265
                self.dihedral_statement()
                self.state = 270
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 271
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def sani_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,i)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def xdip_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,i)


        def VectorAngle(self):
            return self.getToken(XplorMRParser.VectorAngle, 0)

        def vean_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,i)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tenso_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tenso_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tenso_statementContext,i)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Sanisotropy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 273
                self.match(XplorMRParser.Sanisotropy)
                self.state = 277
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                    self.state = 274
                    self.sani_statement()
                    self.state = 279
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 280
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Xdipolar, XplorMRParser.Dipolar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 281
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Xdipolar or _la==XplorMRParser.Dipolar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type) | (1 << XplorMRParser.Sign) | (1 << XplorMRParser.Average))) != 0):
                    self.state = 282
                    self.xdip_statement()
                    self.state = 287
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 288
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.VectorAngle]:
                self.enterOuterAlt(localctx, 3)
                self.state = 289
                self.match(XplorMRParser.VectorAngle)
                self.state = 293
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition))) != 0):
                    self.state = 290
                    self.vean_statement()
                    self.state = 295
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 296
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Tensor]:
                self.enterOuterAlt(localctx, 4)
                self.state = 297
                self.match(XplorMRParser.Tensor)
                self.state = 301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients))) != 0):
                    self.state = 298
                    self.tenso_statement()
                    self.state = 303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 304
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 305
                self.match(XplorMRParser.Anisotropy)
                self.state = 309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                    self.state = 306
                    self.anis_statement()
                    self.state = 311
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 312
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_planar_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 316
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Restraints:
                self.state = 315
                self.match(XplorMRParser.Restraints)


            self.state = 318
            self.match(XplorMRParser.Planar)
            self.state = 322
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Group or _la==XplorMRParser.Initialize:
                self.state = 319
                self.planar_statement()
                self.state = 324
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 325
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def antidistance_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_antidistance_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(XplorMRParser.Xadc)
            self.state = 331
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0):
                self.state = 328
                self.antidistance_statement()
                self.state = 333
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 334
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 336
            self.match(XplorMRParser.Coupling)
            self.state = 340
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Partition) | (1 << XplorMRParser.DegEnergy))) != 0):
                self.state = 337
                self.coupling_statement()
                self.state = 342
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 343
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def carbon_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(XplorMRParser.Carbon)
            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((((_la - 4)) & ~0x3f) == 0 and ((1 << (_la - 4)) & ((1 << (XplorMRParser.Assign - 4)) | (1 << (XplorMRParser.Classification - 4)) | (1 << (XplorMRParser.Nrestraints - 4)) | (1 << (XplorMRParser.Potential - 4)) | (1 << (XplorMRParser.Print - 4)) | (1 << (XplorMRParser.Reset - 4)) | (1 << (XplorMRParser.ForceConstant - 4)) | (1 << (XplorMRParser.Expectation - 4)) | (1 << (XplorMRParser.Zero - 4)) | (1 << (XplorMRParser.PhiStep - 4)) | (1 << (XplorMRParser.PsiStep - 4)) | (1 << (XplorMRParser.Rcoil - 4)))) != 0):
                self.state = 346
                self.carbon_shift_statement()
                self.state = 351
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 352
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def proton_shift_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 354
            self.match(XplorMRParser.Proton)
            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Classification) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Anisotropy) | (1 << XplorMRParser.DegEnergy) | (1 << XplorMRParser.Carbon))) != 0) or ((((_la - 66)) & ~0x3f) == 0 and ((1 << (_la - 66)) & ((1 << (XplorMRParser.Rcoil - 66)) | (1 << (XplorMRParser.Observed - 66)) | (1 << (XplorMRParser.Amides - 66)) | (1 << (XplorMRParser.Nitrogens - 66)) | (1 << (XplorMRParser.Oxygens - 66)) | (1 << (XplorMRParser.RingAtoms - 66)) | (1 << (XplorMRParser.AlphasAndAmides - 66)) | (1 << (XplorMRParser.Error - 66)))) != 0):
                self.state = 355
                self.proton_shift_statement()
                self.state = 360
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 361
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def ramachandran_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Ramachandran_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_dihedral_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(XplorMRParser.Ramachandran)
            self.state = 367
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (XplorMRParser.Gaussian - 76)) | (1 << (XplorMRParser.Phase - 76)) | (1 << (XplorMRParser.Quartic - 76)) | (1 << (XplorMRParser.Shape - 76)) | (1 << (XplorMRParser.Sort - 76)))) != 0):
                self.state = 364
                self.ramachandran_statement()
                self.state = 369
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 370
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def collapse_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Collapse_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_radius_of_gyration_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 372
            self.match(XplorMRParser.Collapse)
            self.state = 376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale))) != 0):
                self.state = 373
                self.collapse_statement()
                self.state = 378
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 379
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def diffusion_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_diffusion_anisotropy_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(XplorMRParser.Danisotropy)
            self.state = 385
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0):
                self.state = 382
                self.diffusion_statement()
                self.state = 387
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 388
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def orientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_orientation_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 390
            self.match(XplorMRParser.Orient)
            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Cutoff) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (XplorMRParser.Gaussian - 76)) | (1 << (XplorMRParser.Quartic - 76)) | (1 << (XplorMRParser.Height - 76)) | (1 << (XplorMRParser.MaxGaussians - 76)) | (1 << (XplorMRParser.NewGaussian - 76)))) != 0) or _la==XplorMRParser.Residue:
                self.state = 391
                self.orientation_statement()
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 397
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def csa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_csa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(XplorMRParser.Dcsa)
            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Type))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 400
                self.csa_statement()
                self.state = 405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 406
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcsa_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pcsa_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(XplorMRParser.Pcsa)
            self.state = 412
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Scale) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Sigma:
                self.state = 409
                self.pcsa_statement()
                self.state = 414
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 415
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def one_bond_coupling_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_one_bond_coupling_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 417
            self.match(XplorMRParser.OneBond)
            self.state = 421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 418
                self.one_bond_coupling_statement()
                self.state = 423
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 424
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def angle_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_angle_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 426
            self.match(XplorMRParser.AngleDb)
            self.state = 430
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant) | (1 << XplorMRParser.Expectation) | (1 << XplorMRParser.Size) | (1 << XplorMRParser.Zero))) != 0) or _la==XplorMRParser.Error or _la==XplorMRParser.DerivFlag:
                self.state = 427
                self.angle_db_statement()
                self.state = 432
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 433
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Paramagnetic(self):
            return self.getToken(XplorMRParser.Paramagnetic, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pre_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_pre_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 435
            self.match(XplorMRParser.Paramagnetic)
            self.state = 439
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Potential) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & ((1 << (XplorMRParser.Kconst - 96)) | (1 << (XplorMRParser.Omega - 96)) | (1 << (XplorMRParser.Tauc - 96)) | (1 << (XplorMRParser.Debug - 96)))) != 0):
                self.state = 436
                self.pre_statement()
                self.state = 441
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 442
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pcs_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pcs_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 444
            self.match(XplorMRParser.Xpcs)
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (XplorMRParser.Tolerance - 101)) | (1 << (XplorMRParser.Save - 101)) | (1 << (XplorMRParser.Fmed - 101)) | (1 << (XplorMRParser.ErrOn - 101)) | (1 << (XplorMRParser.ErrOff - 101)) | (1 << (XplorMRParser.Fon - 101)) | (1 << (XplorMRParser.Foff - 101)) | (1 << (XplorMRParser.Son - 101)) | (1 << (XplorMRParser.Soff - 101)) | (1 << (XplorMRParser.Frun - 101)))) != 0):
                self.state = 445
                self.pcs_statement()
                self.state = 450
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 451
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def prdc_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_prdc_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or ((((_la - 101)) & ~0x3f) == 0 and ((1 << (_la - 101)) & ((1 << (XplorMRParser.Tolerance - 101)) | (1 << (XplorMRParser.Save - 101)) | (1 << (XplorMRParser.Fmed - 101)) | (1 << (XplorMRParser.ErrOn - 101)) | (1 << (XplorMRParser.ErrOff - 101)) | (1 << (XplorMRParser.Fon - 101)) | (1 << (XplorMRParser.Foff - 101)) | (1 << (XplorMRParser.Son - 101)) | (1 << (XplorMRParser.Soff - 101)) | (1 << (XplorMRParser.Frun - 101)))) != 0):
                self.state = 454
                self.prdc_statement()
                self.state = 459
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 460
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def porientation_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_porientation_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 462
            self.match(XplorMRParser.Xangle)
            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 463
                self.porientation_statement()
                self.state = 468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 469
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def pccr_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pccr_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(XplorMRParser.Xccr)
            self.state = 475
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.Coefficients) | (1 << XplorMRParser.ForceConstant))) != 0) or _la==XplorMRParser.Frun or _la==XplorMRParser.Weip:
                self.state = 472
                self.pccr_statement()
                self.state = 477
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 478
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_hbond_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 480
            self.match(XplorMRParser.Hbda)
            self.state = 484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Assign) | (1 << XplorMRParser.Classification) | (1 << XplorMRParser.Nrestraints) | (1 << XplorMRParser.Print) | (1 << XplorMRParser.Reset) | (1 << XplorMRParser.ForceConstant))) != 0):
                self.state = 481
                self.hbond_statement()
                self.state = 486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 487
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbdb(self):
            return self.getToken(XplorMRParser.Hbdb, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def hbond_db_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_db_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_db_statementContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_restraint" ):
                listener.enterHbond_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_restraint" ):
                listener.exitHbond_db_restraint(self)




    def hbond_db_restraint(self):

        localctx = XplorMRParser.Hbond_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_hbond_db_restraint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(XplorMRParser.Hbdb)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign or ((((_la - 117)) & ~0x3f) == 0 and ((1 << (_la - 117)) & ((1 << (XplorMRParser.Kdir - 117)) | (1 << (XplorMRParser.Klin - 117)) | (1 << (XplorMRParser.Nseg - 117)) | (1 << (XplorMRParser.Nmin - 117)) | (1 << (XplorMRParser.Nmax - 117)) | (1 << (XplorMRParser.Segm - 117)) | (1 << (XplorMRParser.Ohcut - 117)) | (1 << (XplorMRParser.Coh1cut - 117)) | (1 << (XplorMRParser.Coh2cut - 117)) | (1 << (XplorMRParser.Ohncut - 117)) | (1 << (XplorMRParser.Updfrq - 117)) | (1 << (XplorMRParser.Prnfrq - 117)) | (1 << (XplorMRParser.Freemode - 117)))) != 0):
                self.state = 490
                self.hbond_db_statement()
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 496
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,0)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Averaging(self):
            return self.getToken(XplorMRParser.Averaging, 0)

        def Simple_name_A(self):
            return self.getToken(XplorMRParser.Simple_name_A, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 569
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 498
                self.noe_assign()
                pass
            elif token in [XplorMRParser.Asymptote]:
                self.enterOuterAlt(localctx, 2)
                self.state = 499
                self.match(XplorMRParser.Asymptote)
                self.state = 500
                self.match(XplorMRParser.Simple_name)
                self.state = 501
                self.number_s()
                pass
            elif token in [XplorMRParser.Averaging]:
                self.enterOuterAlt(localctx, 3)
                self.state = 502
                self.match(XplorMRParser.Averaging)
                self.state = 503
                self.match(XplorMRParser.Simple_name_A)
                self.state = 504
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Bhig]:
                self.enterOuterAlt(localctx, 4)
                self.state = 505
                self.match(XplorMRParser.Bhig)
                self.state = 506
                self.match(XplorMRParser.Simple_name)
                self.state = 507
                self.number_s()
                pass
            elif token in [XplorMRParser.Ceiling]:
                self.enterOuterAlt(localctx, 5)
                self.state = 508
                self.match(XplorMRParser.Ceiling)
                self.state = 510
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 509
                    self.match(XplorMRParser.Equ_op)


                self.state = 512
                self.number_s()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 6)
                self.state = 513
                self.match(XplorMRParser.Classification)
                self.state = 514
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.CountViol]:
                self.enterOuterAlt(localctx, 7)
                self.state = 515
                self.match(XplorMRParser.CountViol)
                self.state = 516
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Distribute]:
                self.enterOuterAlt(localctx, 8)
                self.state = 517
                self.match(XplorMRParser.Distribute)
                self.state = 518
                self.match(XplorMRParser.Simple_name)
                self.state = 519
                self.match(XplorMRParser.Simple_name)
                self.state = 520
                self.number_s()
                pass
            elif token in [XplorMRParser.Monomers]:
                self.enterOuterAlt(localctx, 9)
                self.state = 521
                self.match(XplorMRParser.Monomers)
                self.state = 522
                self.match(XplorMRParser.Simple_name)
                self.state = 523
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Ncount]:
                self.enterOuterAlt(localctx, 10)
                self.state = 524
                self.match(XplorMRParser.Ncount)
                self.state = 525
                self.match(XplorMRParser.Simple_name)
                self.state = 526
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 11)
                self.state = 527
                self.match(XplorMRParser.Nrestraints)
                self.state = 529
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 528
                    self.match(XplorMRParser.Equ_op)


                self.state = 531
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 12)
                self.state = 532
                self.match(XplorMRParser.Potential)
                self.state = 533
                self.match(XplorMRParser.Simple_name_P)
                self.state = 534
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Predict]:
                self.enterOuterAlt(localctx, 13)
                self.state = 535
                self.match(XplorMRParser.Predict)
                self.state = 536
                self.predict_statement()
                self.state = 537
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 539
                self.match(XplorMRParser.Print)
                self.state = 540
                self.match(XplorMRParser.Threshold)
                self.state = 542
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 541
                    self.match(XplorMRParser.Equ_op)


                self.state = 544
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 545
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Rswitch]:
                self.enterOuterAlt(localctx, 16)
                self.state = 546
                self.match(XplorMRParser.Rswitch)
                self.state = 547
                self.match(XplorMRParser.Simple_name)
                self.state = 548
                self.number_s()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 17)
                self.state = 549
                self.match(XplorMRParser.Scale)
                self.state = 550
                self.match(XplorMRParser.Simple_name)
                self.state = 551
                self.number_s()
                pass
            elif token in [XplorMRParser.SoExponent]:
                self.enterOuterAlt(localctx, 18)
                self.state = 552
                self.match(XplorMRParser.SoExponent)
                self.state = 553
                self.match(XplorMRParser.Simple_name)
                self.state = 554
                self.number_s()
                pass
            elif token in [XplorMRParser.SqConstant]:
                self.enterOuterAlt(localctx, 19)
                self.state = 555
                self.match(XplorMRParser.SqConstant)
                self.state = 556
                self.match(XplorMRParser.Simple_name)
                self.state = 557
                self.number_s()
                pass
            elif token in [XplorMRParser.SqExponent]:
                self.enterOuterAlt(localctx, 20)
                self.state = 558
                self.match(XplorMRParser.SqExponent)
                self.state = 559
                self.match(XplorMRParser.Simple_name)
                self.state = 560
                self.number_s()
                pass
            elif token in [XplorMRParser.SqOffset]:
                self.enterOuterAlt(localctx, 21)
                self.state = 561
                self.match(XplorMRParser.SqOffset)
                self.state = 562
                self.match(XplorMRParser.Simple_name)
                self.state = 563
                self.number_s()
                pass
            elif token in [XplorMRParser.Temperature]:
                self.enterOuterAlt(localctx, 22)
                self.state = 564
                self.match(XplorMRParser.Temperature)
                self.state = 566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 565
                    self.match(XplorMRParser.Equ_op)


                self.state = 568
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def noe_annotation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_annotationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_annotationContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 571
            self.match(XplorMRParser.Assign)
            self.state = 572
            self.selection()
            self.state = 573
            self.selection()
            self.state = 574
            self.number()
            self.state = 575
            self.number()
            self.state = 576
            self.number()
            self.state = 580
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Peak) | (1 << XplorMRParser.Spectrum) | (1 << XplorMRParser.Volume) | (1 << XplorMRParser.Ppm1) | (1 << XplorMRParser.Ppm2) | (1 << XplorMRParser.Cv) | (1 << XplorMRParser.Weight))) != 0):
                self.state = 577
                self.noe_annotation()
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 589
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 583
                self.match(XplorMRParser.Or_op)
                self.state = 584
                self.selection()
                self.state = 585
                self.selection()
                self.state = 591
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_predict_statement)
        self._la = 0 # Token type
        try:
            self.state = 606
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 592
                self.match(XplorMRParser.Cutoff)
                self.state = 594
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 593
                    self.match(XplorMRParser.Equ_op)


                self.state = 596
                self.number_s()
                pass
            elif token in [XplorMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 597
                self.match(XplorMRParser.Cuton)
                self.state = 599
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 598
                    self.match(XplorMRParser.Equ_op)


                self.state = 601
                self.number_s()
                pass
            elif token in [XplorMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 602
                self.match(XplorMRParser.From)
                self.state = 603
                self.selection()
                pass
            elif token in [XplorMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 604
                self.match(XplorMRParser.To)
                self.state = 605
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_annotationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Peak(self):
            return self.getToken(XplorMRParser.Peak, 0)

        def number_a(self):
            return self.getTypedRuleContext(XplorMRParser.Number_aContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Spectrum(self):
            return self.getToken(XplorMRParser.Spectrum, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Volume(self):
            return self.getToken(XplorMRParser.Volume, 0)

        def Ppm1(self):
            return self.getToken(XplorMRParser.Ppm1, 0)

        def Ppm2(self):
            return self.getToken(XplorMRParser.Ppm2, 0)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_annotation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_annotation" ):
                listener.enterNoe_annotation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_annotation" ):
                listener.exitNoe_annotation(self)




    def noe_annotation(self):

        localctx = XplorMRParser.Noe_annotationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_noe_annotation)
        self._la = 0 # Token type
        try:
            self.state = 643
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Peak]:
                self.enterOuterAlt(localctx, 1)
                self.state = 608
                self.match(XplorMRParser.Peak)
                self.state = 610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 609
                    self.match(XplorMRParser.Equ_op)


                self.state = 612
                self.number_a()
                pass
            elif token in [XplorMRParser.Spectrum]:
                self.enterOuterAlt(localctx, 2)
                self.state = 613
                self.match(XplorMRParser.Spectrum)
                self.state = 615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 614
                    self.match(XplorMRParser.Equ_op)


                self.state = 617
                self.number_a()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 3)
                self.state = 618
                self.match(XplorMRParser.Weight)
                self.state = 620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 619
                    self.match(XplorMRParser.Equ_op)


                self.state = 622
                self.number_a()
                pass
            elif token in [XplorMRParser.Volume]:
                self.enterOuterAlt(localctx, 4)
                self.state = 623
                self.match(XplorMRParser.Volume)
                self.state = 625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 624
                    self.match(XplorMRParser.Equ_op)


                self.state = 627
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm1]:
                self.enterOuterAlt(localctx, 5)
                self.state = 628
                self.match(XplorMRParser.Ppm1)
                self.state = 630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 629
                    self.match(XplorMRParser.Equ_op)


                self.state = 632
                self.number_a()
                pass
            elif token in [XplorMRParser.Ppm2]:
                self.enterOuterAlt(localctx, 6)
                self.state = 633
                self.match(XplorMRParser.Ppm2)
                self.state = 635
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 634
                    self.match(XplorMRParser.Equ_op)


                self.state = 637
                self.number_a()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 7)
                self.state = 638
                self.match(XplorMRParser.Cv)
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 639
                    self.match(XplorMRParser.Equ_op)


                self.state = 642
                self.number_a()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,0)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 654
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 645
                self.dihedral_assign()
                pass
            elif token in [XplorMRParser.Nassign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 646
                self.match(XplorMRParser.Nassign)
                self.state = 648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 647
                    self.match(XplorMRParser.Equ_op)


                self.state = 650
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 3)
                self.state = 651
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 652
                self.match(XplorMRParser.Scale)
                self.state = 653
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 656
            self.match(XplorMRParser.Assign)
            self.state = 657
            self.selection()
            self.state = 658
            self.selection()
            self.state = 659
            self.selection()
            self.state = 660
            self.selection()
            self.state = 661
            self.number()
            self.state = 662
            self.number()
            self.state = 663
            self.number()
            self.state = 664
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_sani_statement)
        try:
            self.state = 684
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 666
                self.sani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 667
                self.match(XplorMRParser.Classification)
                self.state = 668
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 669
                self.match(XplorMRParser.Coefficients)
                self.state = 670
                self.number_s()
                self.state = 671
                self.number_s()
                self.state = 672
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 674
                self.match(XplorMRParser.ForceConstant)
                self.state = 675
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 676
                self.match(XplorMRParser.Nrestraints)
                self.state = 677
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 678
                self.match(XplorMRParser.Potential)
                self.state = 679
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 680
                self.match(XplorMRParser.Print)
                self.state = 681
                self.match(XplorMRParser.Threshold)
                self.state = 682
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 683
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sani_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 686
            self.match(XplorMRParser.Assign)
            self.state = 687
            self.selection()
            self.state = 688
            self.selection()
            self.state = 689
            self.selection()
            self.state = 690
            self.selection()
            self.state = 691
            self.selection()
            self.state = 692
            self.selection()
            self.state = 693
            self.number()
            self.state = 694
            self.number()
            self.state = 696
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                self.state = 695
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Averaging_methods(self):
            return self.getToken(XplorMRParser.Averaging_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_xdip_statement)
        try:
            self.state = 724
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 698
                self.xdip_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 699
                self.match(XplorMRParser.Classification)
                self.state = 700
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 3)
                self.state = 701
                self.match(XplorMRParser.Type)
                self.state = 702
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 703
                self.match(XplorMRParser.Scale)
                self.state = 704
                self.number_s()
                pass
            elif token in [XplorMRParser.Sign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 705
                self.match(XplorMRParser.Sign)
                self.state = 706
                self.match(XplorMRParser.Logical)
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 6)
                self.state = 707
                self.match(XplorMRParser.Average)
                self.state = 708
                self.match(XplorMRParser.Averaging_methods)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 7)
                self.state = 709
                self.match(XplorMRParser.Coefficients)
                self.state = 710
                self.number_s()
                self.state = 711
                self.number_s()
                self.state = 712
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 714
                self.match(XplorMRParser.ForceConstant)
                self.state = 715
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 716
                self.match(XplorMRParser.Nrestraints)
                self.state = 717
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 718
                self.match(XplorMRParser.Potential)
                self.state = 719
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 720
                self.match(XplorMRParser.Print)
                self.state = 721
                self.match(XplorMRParser.Threshold)
                self.state = 722
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 723
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_xdip_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 726
            self.match(XplorMRParser.Assign)
            self.state = 727
            self.selection()
            self.state = 728
            self.selection()
            self.state = 729
            self.selection()
            self.state = 730
            self.selection()
            self.state = 731
            self.selection()
            self.state = 732
            self.selection()
            self.state = 733
            self.number()
            self.state = 734
            self.number()
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.state = 735
                self.number()

            elif la_ == 2:
                self.state = 736
                self.number()
                self.state = 737
                self.number()
                self.state = 738
                self.number()
                self.state = 739
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,0)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 766
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 743
                self.vean_assign()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 744
                self.match(XplorMRParser.Cv)
                self.state = 746
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 745
                    self.match(XplorMRParser.Equ_op)


                self.state = 748
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 749
                self.match(XplorMRParser.Classification)
                self.state = 750
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 751
                self.match(XplorMRParser.ForceConstant)
                self.state = 752
                self.number_s()
                self.state = 753
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 755
                self.match(XplorMRParser.Nrestraints)
                self.state = 756
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 757
                self.match(XplorMRParser.Partition)
                self.state = 759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 758
                    self.match(XplorMRParser.Equ_op)


                self.state = 761
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 762
                self.match(XplorMRParser.Print)
                self.state = 763
                self.match(XplorMRParser.Threshold)
                self.state = 764
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 765
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_vean_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self.match(XplorMRParser.Assign)
            self.state = 769
            self.selection()
            self.state = 770
            self.selection()
            self.state = 771
            self.selection()
            self.state = 772
            self.selection()
            self.state = 773
            self.number()
            self.state = 774
            self.number()
            self.state = 775
            self.number()
            self.state = 776
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tenso_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Tenso_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_statement" ):
                listener.enterTenso_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_statement" ):
                listener.exitTenso_statement(self)




    def tenso_statement(self):

        localctx = XplorMRParser.Tenso_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_tenso_statement)
        try:
            self.state = 791
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 778
                self.tenso_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 779
                self.match(XplorMRParser.Classification)
                self.state = 780
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 781
                self.match(XplorMRParser.Coefficients)
                self.state = 782
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 783
                self.match(XplorMRParser.Nrestraints)
                self.state = 784
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 785
                self.match(XplorMRParser.Potential)
                self.state = 786
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 787
                self.match(XplorMRParser.Print)
                self.state = 788
                self.match(XplorMRParser.Threshold)
                self.state = 789
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 790
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tenso_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_tenso_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTenso_assign" ):
                listener.enterTenso_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTenso_assign" ):
                listener.exitTenso_assign(self)




    def tenso_assign(self):

        localctx = XplorMRParser.Tenso_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_tenso_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(XplorMRParser.Assign)
            self.state = 794
            self.selection()
            self.state = 795
            self.selection()
            self.state = 796
            self.number()
            self.state = 797
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_anis_statement)
        try:
            self.state = 820
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 799
                self.anis_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 800
                self.match(XplorMRParser.Classification)
                self.state = 801
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 802
                self.match(XplorMRParser.Coefficients)
                self.state = 803
                self.number_s()
                self.state = 804
                self.number_s()
                self.state = 805
                self.number_s()
                self.state = 806
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 808
                self.match(XplorMRParser.ForceConstant)
                self.state = 809
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 810
                self.match(XplorMRParser.Nrestraints)
                self.state = 811
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 812
                self.match(XplorMRParser.Potential)
                self.state = 813
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 814
                self.match(XplorMRParser.Print)
                self.state = 815
                self.match(XplorMRParser.Threshold)
                self.state = 816
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 817
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 818
                self.match(XplorMRParser.Type)
                self.state = 819
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_anis_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 822
            self.match(XplorMRParser.Assign)
            self.state = 823
            self.selection()
            self.state = 824
            self.selection()
            self.state = 825
            self.selection()
            self.state = 826
            self.selection()
            self.state = 827
            self.number()
            self.state = 828
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def group_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Group_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Group_statementContext,i)


        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_planar_statement)
        self._la = 0 # Token type
        try:
            self.state = 839
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 830
                self.match(XplorMRParser.Group)
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Selection or _la==XplorMRParser.Weight:
                    self.state = 831
                    self.group_statement()
                    self.state = 836
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 837
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 838
                self.match(XplorMRParser.Initialize)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_group_statement)
        self._la = 0 # Token type
        try:
            self.state = 851
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 841
                self.match(XplorMRParser.Selection)
                self.state = 843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 842
                    self.match(XplorMRParser.Equ_op)


                self.state = 845
                self.selection()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 846
                self.match(XplorMRParser.Weight)
                self.state = 848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 847
                    self.match(XplorMRParser.Equ_op)


                self.state = 850
                self.number_s()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_antidistance_statement)
        try:
            self.state = 877
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 853
                self.xadc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 854
                self.match(XplorMRParser.Classification)
                self.state = 855
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 856
                self.match(XplorMRParser.Expectation)
                self.state = 857
                self.match(XplorMRParser.Integer)
                self.state = 858
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 859
                self.match(XplorMRParser.ForceConstant)
                self.state = 860
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 861
                self.match(XplorMRParser.Nrestraints)
                self.state = 862
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 863
                self.match(XplorMRParser.Print)
                self.state = 864
                self.match(XplorMRParser.Threshold)
                self.state = 865
                self.number_s()
                self.state = 869
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 866
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 867
                    self.match(XplorMRParser.Classification)
                    self.state = 868
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 871
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 8)
                self.state = 872
                self.match(XplorMRParser.Size)
                self.state = 873
                self.number_s()
                self.state = 874
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 9)
                self.state = 876
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 879
            self.match(XplorMRParser.Assign)
            self.state = 880
            self.selection()
            self.state = 881
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 922
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 883
                self.coup_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 884
                self.match(XplorMRParser.Classification)
                self.state = 885
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 886
                self.match(XplorMRParser.Coefficients)
                self.state = 887
                self.number_s()
                self.state = 888
                self.number_s()
                self.state = 889
                self.number_s()
                self.state = 890
                self.number_s()
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 892
                self.match(XplorMRParser.Cv)
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 893
                    self.match(XplorMRParser.Equ_op)


                self.state = 896
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 897
                self.match(XplorMRParser.DegEnergy)
                self.state = 898
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 899
                self.match(XplorMRParser.ForceConstant)
                self.state = 900
                self.number_s()
                self.state = 902
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 901
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 904
                self.match(XplorMRParser.Nrestraints)
                self.state = 905
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 8)
                self.state = 906
                self.match(XplorMRParser.Partition)
                self.state = 908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 907
                    self.match(XplorMRParser.Equ_op)


                self.state = 910
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 911
                self.match(XplorMRParser.Potential)
                self.state = 912
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 913
                self.match(XplorMRParser.Print)
                self.state = 914
                self.match(XplorMRParser.Threshold)
                self.state = 915
                self.number_s()
                self.state = 919
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 916
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 917
                    self.match(XplorMRParser.Classification)
                    self.state = 918
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 921
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 924
            self.match(XplorMRParser.Assign)
            self.state = 925
            self.selection()
            self.state = 926
            self.selection()
            self.state = 927
            self.selection()
            self.state = 928
            self.selection()
            self.state = 934
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 929
                self.selection()
                self.state = 930
                self.selection()
                self.state = 931
                self.selection()
                self.state = 932
                self.selection()


            self.state = 936
            self.number()
            self.state = 937
            self.number()
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                self.state = 938
                self.number()
                self.state = 939
                self.number()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,0)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_carbon_shift_statement)
        try:
            self.state = 969
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 943
                self.carbon_shift_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 944
                self.match(XplorMRParser.Classification)
                self.state = 945
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 946
                self.match(XplorMRParser.Expectation)
                self.state = 947
                self.match(XplorMRParser.Integer)
                self.state = 948
                self.match(XplorMRParser.Integer)
                self.state = 949
                self.number_s()
                self.state = 950
                self.number_s()
                self.state = 951
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 953
                self.match(XplorMRParser.ForceConstant)
                self.state = 954
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 955
                self.match(XplorMRParser.Nrestraints)
                self.state = 956
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.PhiStep]:
                self.enterOuterAlt(localctx, 6)
                self.state = 957
                self.match(XplorMRParser.PhiStep)
                self.state = 958
                self.number_s()
                pass
            elif token in [XplorMRParser.PsiStep]:
                self.enterOuterAlt(localctx, 7)
                self.state = 959
                self.match(XplorMRParser.PsiStep)
                self.state = 960
                self.number_s()
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 961
                self.match(XplorMRParser.Potential)
                self.state = 962
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 963
                self.match(XplorMRParser.Print)
                self.state = 964
                self.match(XplorMRParser.Threshold)
                self.state = 965
                self.number_s()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 10)
                self.state = 966
                self.carbon_shift_rcoil()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 967
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 968
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 971
            self.match(XplorMRParser.Assign)
            self.state = 972
            self.selection()
            self.state = 973
            self.selection()
            self.state = 974
            self.selection()
            self.state = 975
            self.selection()
            self.state = 976
            self.selection()
            self.state = 977
            self.number()
            self.state = 978
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.match(XplorMRParser.Rcoil)
            self.state = 981
            self.selection()
            self.state = 982
            self.number_s()
            self.state = 983
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self):
            return self.getTypedRuleContext(XplorMRParser.ObservedContext,0)


        def proton_shift_rcoil(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,0)


        def proton_shift_anisotropy(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,0)


        def proton_shift_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,0)


        def proton_shift_carbons(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,0)


        def proton_shift_nitrogens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,0)


        def proton_shift_oxygens(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,0)


        def proton_shift_ring_atoms(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,0)


        def proton_shift_alphas_and_amides(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 1018
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Observed]:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self.observed()
                pass
            elif token in [XplorMRParser.Rcoil]:
                self.enterOuterAlt(localctx, 2)
                self.state = 986
                self.proton_shift_rcoil()
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 3)
                self.state = 987
                self.proton_shift_anisotropy()
                pass
            elif token in [XplorMRParser.Amides]:
                self.enterOuterAlt(localctx, 4)
                self.state = 988
                self.proton_shift_amides()
                pass
            elif token in [XplorMRParser.Carbon]:
                self.enterOuterAlt(localctx, 5)
                self.state = 989
                self.proton_shift_carbons()
                pass
            elif token in [XplorMRParser.Nitrogens]:
                self.enterOuterAlt(localctx, 6)
                self.state = 990
                self.proton_shift_nitrogens()
                pass
            elif token in [XplorMRParser.Oxygens]:
                self.enterOuterAlt(localctx, 7)
                self.state = 991
                self.proton_shift_oxygens()
                pass
            elif token in [XplorMRParser.RingAtoms]:
                self.enterOuterAlt(localctx, 8)
                self.state = 992
                self.proton_shift_ring_atoms()
                pass
            elif token in [XplorMRParser.AlphasAndAmides]:
                self.enterOuterAlt(localctx, 9)
                self.state = 993
                self.proton_shift_alphas_and_amides()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 10)
                self.state = 994
                self.match(XplorMRParser.Classification)
                self.state = 995
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 11)
                self.state = 996
                self.match(XplorMRParser.Error)
                self.state = 997
                self.number_s()
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 12)
                self.state = 998
                self.match(XplorMRParser.DegEnergy)
                self.state = 999
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1000
                self.match(XplorMRParser.ForceConstant)
                self.state = 1001
                self.number_s()
                self.state = 1003
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1002
                    self.number_s()


                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1005
                self.match(XplorMRParser.Potential)
                self.state = 1006
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1007
                self.match(XplorMRParser.Print)
                self.state = 1008
                self.match(XplorMRParser.Threshold)
                self.state = 1009
                self.number_s()
                self.state = 1013
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1010
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1011
                    self.match(XplorMRParser.Classification)
                    self.state = 1012
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 1015
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1017
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1020
            self.match(XplorMRParser.Observed)
            self.state = 1021
            self.selection()
            self.state = 1023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1022
                self.selection()


            self.state = 1025
            self.number_s()
            self.state = 1027
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                self.state = 1026
                self.number_s()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1029
            self.match(XplorMRParser.Rcoil)
            self.state = 1030
            self.selection()
            self.state = 1031
            self.number_s()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(XplorMRParser.Anisotropy)
            self.state = 1034
            self.selection()
            self.state = 1035
            self.selection()
            self.state = 1036
            self.selection()
            self.state = 1037
            self.match(XplorMRParser.Simple_name)
            self.state = 1039
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Logical:
                self.state = 1038
                self.match(XplorMRParser.Logical)


            self.state = 1041
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self.match(XplorMRParser.Amides)
            self.state = 1044
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1046
            self.match(XplorMRParser.Carbon)
            self.state = 1047
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1049
            self.match(XplorMRParser.Nitrogens)
            self.state = 1050
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1052
            self.match(XplorMRParser.Oxygens)
            self.state = 1053
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1055
            self.match(XplorMRParser.RingAtoms)
            self.state = 1056
            self.match(XplorMRParser.Simple_name)
            self.state = 1057
            self.selection()
            self.state = 1058
            self.selection()
            self.state = 1059
            self.selection()
            self.state = 1060
            self.selection()
            self.state = 1061
            self.selection()
            self.state = 1063
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1062
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1065
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 1066
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1170
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1068
                self.rama_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1069
                self.match(XplorMRParser.Classification)
                self.state = 1070
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1071
                self.match(XplorMRParser.Cutoff)
                self.state = 1072
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1073
                self.match(XplorMRParser.ForceConstant)
                self.state = 1074
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1075
                self.match(XplorMRParser.Gaussian)
                self.state = 1076
                self.number_s()
                self.state = 1077
                self.number_s()
                self.state = 1078
                self.number_s()
                self.state = 1083
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,83,self._ctx)
                if la_ == 1:
                    self.state = 1079
                    self.number_s()
                    self.state = 1080
                    self.number_s()
                    self.state = 1081
                    self.number_s()


                self.state = 1089
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,84,self._ctx)
                if la_ == 1:
                    self.state = 1085
                    self.number_s()
                    self.state = 1086
                    self.number_s()
                    self.state = 1087
                    self.number_s()


                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1091
                    self.number_s()
                    self.state = 1092
                    self.number_s()
                    self.state = 1093
                    self.number_s()


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1097
                self.match(XplorMRParser.Nrestraints)
                self.state = 1098
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Phase]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1099
                self.match(XplorMRParser.Phase)
                self.state = 1100
                self.number_s()
                self.state = 1101
                self.number_s()
                self.state = 1102
                self.number_s()
                self.state = 1107
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,86,self._ctx)
                if la_ == 1:
                    self.state = 1103
                    self.number_s()
                    self.state = 1104
                    self.number_s()
                    self.state = 1105
                    self.number_s()


                self.state = 1113
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,87,self._ctx)
                if la_ == 1:
                    self.state = 1109
                    self.number_s()
                    self.state = 1110
                    self.number_s()
                    self.state = 1111
                    self.number_s()


                self.state = 1119
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1115
                    self.number_s()
                    self.state = 1116
                    self.number_s()
                    self.state = 1117
                    self.number_s()


                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1121
                self.match(XplorMRParser.Print)
                self.state = 1122
                self.match(XplorMRParser.Threshold)
                self.state = 1123
                self.number_s()
                self.state = 1127
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1124
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1125
                    self.match(XplorMRParser.Classification)
                    self.state = 1126
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1129
                self.match(XplorMRParser.Quartic)
                self.state = 1130
                self.number_s()
                self.state = 1131
                self.number_s()
                self.state = 1132
                self.number_s()
                self.state = 1137
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
                if la_ == 1:
                    self.state = 1133
                    self.number_s()
                    self.state = 1134
                    self.number_s()
                    self.state = 1135
                    self.number_s()


                self.state = 1143
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,91,self._ctx)
                if la_ == 1:
                    self.state = 1139
                    self.number_s()
                    self.state = 1140
                    self.number_s()
                    self.state = 1141
                    self.number_s()


                self.state = 1149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1145
                    self.number_s()
                    self.state = 1146
                    self.number_s()
                    self.state = 1147
                    self.number_s()


                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1151
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1152
                self.match(XplorMRParser.Scale)
                self.state = 1153
                self.number_s()
                pass
            elif token in [XplorMRParser.Shape]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1154
                self.match(XplorMRParser.Shape)
                self.state = 1155
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1156
                self.match(XplorMRParser.Size)
                self.state = 1157
                self.match(XplorMRParser.Dimensions)
                self.state = 1158
                self.number_s()
                self.state = 1160
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,93,self._ctx)
                if la_ == 1:
                    self.state = 1159
                    self.number_s()


                self.state = 1163
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,94,self._ctx)
                if la_ == 1:
                    self.state = 1162
                    self.number_s()


                self.state = 1166
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Integer or _la==XplorMRParser.Real:
                    self.state = 1165
                    self.number_s()


                pass
            elif token in [XplorMRParser.Sort]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1168
                self.match(XplorMRParser.Sort)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1169
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.match(XplorMRParser.Assign)
            self.state = 1173
            self.selection()
            self.state = 1174
            self.selection()
            self.state = 1175
            self.selection()
            self.state = 1176
            self.selection()
            self.state = 1182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 1177
                self.selection()
                self.state = 1178
                self.selection()
                self.state = 1179
                self.selection()
                self.state = 1180
                self.selection()


            self.state = 1189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 1184
                self.selection()
                self.state = 1185
                self.selection()
                self.state = 1186
                self.selection()
                self.state = 1187
                self.selection()


            self.state = 1196
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1191
                self.selection()
                self.state = 1192
                self.selection()
                self.state = 1193
                self.selection()
                self.state = 1194
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coll_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Coll_assignContext,0)


        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_collapse_statement)
        try:
            self.state = 1203
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1198
                self.coll_assign()
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1199
                self.match(XplorMRParser.Scale)
                self.state = 1200
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1201
                self.match(XplorMRParser.Print)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1202
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coll_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_coll_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColl_assign" ):
                listener.enterColl_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColl_assign" ):
                listener.exitColl_assign(self)




    def coll_assign(self):

        localctx = XplorMRParser.Coll_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_coll_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.match(XplorMRParser.Assign)
            self.state = 1206
            self.selection()
            self.state = 1207
            self.number()
            self.state = 1208
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_or_Diff_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_or_Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_diffusion_statement)
        try:
            self.state = 1232
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1210
                self.dani_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1211
                self.match(XplorMRParser.Classification)
                self.state = 1212
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1213
                self.match(XplorMRParser.Coefficients)
                self.state = 1214
                self.number_s()
                self.state = 1215
                self.number_s()
                self.state = 1216
                self.number_s()
                self.state = 1217
                self.number_s()
                self.state = 1218
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1220
                self.match(XplorMRParser.ForceConstant)
                self.state = 1221
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1222
                self.match(XplorMRParser.Nrestraints)
                self.state = 1223
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1224
                self.match(XplorMRParser.Potential)
                self.state = 1225
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1226
                self.match(XplorMRParser.Print)
                self.state = 1227
                self.match(XplorMRParser.Threshold)
                self.state = 1228
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1229
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1230
                self.match(XplorMRParser.Type)
                self.state = 1231
                self.match(XplorMRParser.Rdc_or_Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1234
            self.match(XplorMRParser.Assign)
            self.state = 1235
            self.selection()
            self.state = 1236
            self.selection()
            self.state = 1237
            self.selection()
            self.state = 1238
            self.selection()
            self.state = 1239
            self.selection()
            self.state = 1240
            self.selection()
            self.state = 1241
            self.number()
            self.state = 1242
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_orientation_statement)
        try:
            self.state = 1301
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1244
                self.orie_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1245
                self.match(XplorMRParser.Classification)
                self.state = 1246
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1247
                self.match(XplorMRParser.Cutoff)
                self.state = 1248
                self.number_s()
                pass
            elif token in [XplorMRParser.Height]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1249
                self.match(XplorMRParser.Height)
                self.state = 1250
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1251
                self.match(XplorMRParser.ForceConstant)
                self.state = 1252
                self.number_s()
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1253
                self.match(XplorMRParser.Gaussian)
                self.state = 1254
                self.number_s()
                self.state = 1255
                self.number_s()
                self.state = 1256
                self.number_s()
                self.state = 1257
                self.number_s()
                self.state = 1258
                self.number_s()
                self.state = 1259
                self.number_s()
                self.state = 1260
                self.number_s()
                pass
            elif token in [XplorMRParser.MaxGaussians]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1262
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1263
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.NewGaussian]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1264
                self.match(XplorMRParser.NewGaussian)
                self.state = 1265
                self.number_s()
                self.state = 1266
                self.number_s()
                self.state = 1267
                self.number_s()
                self.state = 1268
                self.number_s()
                self.state = 1269
                self.number_s()
                self.state = 1270
                self.number_s()
                self.state = 1271
                self.number_s()
                self.state = 1272
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1274
                self.match(XplorMRParser.Nrestraints)
                self.state = 1275
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1276
                self.match(XplorMRParser.Print)
                self.state = 1277
                self.match(XplorMRParser.Threshold)
                self.state = 1278
                self.number_s()
                self.state = 1282
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1279
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1280
                    self.match(XplorMRParser.Classification)
                    self.state = 1281
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1284
                self.match(XplorMRParser.Quartic)
                self.state = 1285
                self.number_s()
                self.state = 1286
                self.number_s()
                self.state = 1287
                self.number_s()
                self.state = 1288
                self.number_s()
                self.state = 1289
                self.number_s()
                self.state = 1290
                self.number_s()
                self.state = 1291
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1293
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Residue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1294
                self.match(XplorMRParser.Residue)
                self.state = 1295
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1296
                self.match(XplorMRParser.Size)
                self.state = 1297
                self.number_s()
                self.state = 1298
                self.number_s()
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1300
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1303
            self.match(XplorMRParser.Assign)
            self.state = 1304
            self.selection()
            self.state = 1305
            self.selection()
            self.state = 1306
            self.selection()
            self.state = 1307
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_csa_statement)
        try:
            self.state = 1336
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1309
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1310
                self.match(XplorMRParser.Classification)
                self.state = 1311
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1312
                self.match(XplorMRParser.Scale)
                self.state = 1313
                self.number_s()
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1314
                self.match(XplorMRParser.Type)
                self.state = 1315
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1316
                self.match(XplorMRParser.Coefficients)
                self.state = 1317
                self.number_s()
                self.state = 1318
                self.number_s()
                self.state = 1319
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1321
                self.match(XplorMRParser.Sigma)
                self.state = 1322
                self.number_s()
                self.state = 1323
                self.number_s()
                self.state = 1324
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1326
                self.match(XplorMRParser.ForceConstant)
                self.state = 1327
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1328
                self.match(XplorMRParser.Nrestraints)
                self.state = 1329
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1330
                self.match(XplorMRParser.Potential)
                self.state = 1331
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1332
                self.match(XplorMRParser.Print)
                self.state = 1333
                self.match(XplorMRParser.Threshold)
                self.state = 1334
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1335
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_csa_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1338
            self.match(XplorMRParser.Assign)
            self.state = 1339
            self.selection()
            self.state = 1340
            self.selection()
            self.state = 1341
            self.selection()
            self.state = 1342
            self.selection()
            self.state = 1343
            self.selection()
            self.state = 1344
            self.selection()
            self.state = 1345
            self.selection()
            self.state = 1346
            self.number()
            self.state = 1347
            self.number()
            self.state = 1348
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_pcsa_statement)
        try:
            self.state = 1376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1350
                self.csa_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1351
                self.match(XplorMRParser.Classification)
                self.state = 1352
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1353
                self.match(XplorMRParser.Scale)
                self.state = 1354
                self.number_s()
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1355
                self.match(XplorMRParser.Coefficients)
                self.state = 1356
                self.number_s()
                self.state = 1357
                self.number_s()
                self.state = 1358
                self.number_s()
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1360
                self.match(XplorMRParser.Sigma)
                self.state = 1361
                self.number_s()
                self.state = 1362
                self.number_s()
                self.state = 1363
                self.number_s()
                self.state = 1364
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1366
                self.match(XplorMRParser.ForceConstant)
                self.state = 1367
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1368
                self.match(XplorMRParser.Nrestraints)
                self.state = 1369
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1370
                self.match(XplorMRParser.Potential)
                self.state = 1371
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1372
                self.match(XplorMRParser.Print)
                self.state = 1373
                self.match(XplorMRParser.Threshold)
                self.state = 1374
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1375
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_one_bond_coupling_statement)
        try:
            self.state = 1400
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1378
                self.one_bond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1379
                self.match(XplorMRParser.Classification)
                self.state = 1380
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1381
                self.match(XplorMRParser.Coefficients)
                self.state = 1382
                self.number_s()
                self.state = 1383
                self.number_s()
                self.state = 1384
                self.number_s()
                self.state = 1385
                self.number_s()
                self.state = 1386
                self.number_s()
                self.state = 1387
                self.number_s()
                self.state = 1388
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1390
                self.match(XplorMRParser.ForceConstant)
                self.state = 1391
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1392
                self.match(XplorMRParser.Nrestraints)
                self.state = 1393
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1394
                self.match(XplorMRParser.Potential)
                self.state = 1395
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1396
                self.match(XplorMRParser.Print)
                self.state = 1397
                self.match(XplorMRParser.Threshold)
                self.state = 1398
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1399
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1402
            self.match(XplorMRParser.Assign)
            self.state = 1403
            self.selection()
            self.state = 1404
            self.selection()
            self.state = 1405
            self.selection()
            self.state = 1406
            self.selection()
            self.state = 1407
            self.selection()
            self.state = 1408
            self.selection()
            self.state = 1409
            self.selection()
            self.state = 1410
            self.selection()
            self.state = 1411
            self.number()
            self.state = 1412
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Angle_or_Dihedral(self):
            return self.getToken(XplorMRParser.Angle_or_Dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_angle_db_statement)
        try:
            self.state = 1445
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1414
                self.angle_db_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1415
                self.match(XplorMRParser.Classification)
                self.state = 1416
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1417
                self.match(XplorMRParser.DerivFlag)
                self.state = 1418
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1419
                self.match(XplorMRParser.Expectation)
                self.state = 1420
                self.match(XplorMRParser.Integer)
                self.state = 1421
                self.match(XplorMRParser.Integer)
                self.state = 1422
                self.number_s()
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1423
                self.match(XplorMRParser.Error)
                self.state = 1424
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1425
                self.match(XplorMRParser.ForceConstant)
                self.state = 1426
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1427
                self.match(XplorMRParser.Nrestraints)
                self.state = 1428
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1429
                self.match(XplorMRParser.Potential)
                self.state = 1430
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1431
                self.match(XplorMRParser.Print)
                self.state = 1432
                self.match(XplorMRParser.Threshold)
                self.state = 1433
                self.number_s()
                self.state = 1437
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1434
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1435
                    self.match(XplorMRParser.Classification)
                    self.state = 1436
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1439
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1440
                self.match(XplorMRParser.Size)
                self.state = 1441
                self.match(XplorMRParser.Angle_or_Dihedral)
                self.state = 1442
                self.match(XplorMRParser.Integer)
                self.state = 1443
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1444
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1447
            self.match(XplorMRParser.Assign)
            self.state = 1448
            self.selection()
            self.state = 1449
            self.selection()
            self.state = 1450
            self.selection()
            self.state = 1451
            self.selection()
            self.state = 1452
            self.selection()
            self.state = 1453
            self.selection()
            self.state = 1454
            self.selection()
            self.state = 1455
            self.selection()
            self.state = 1456
            self.selection()
            self.state = 1457
            self.selection()
            self.state = 1458
            self.selection()
            self.state = 1460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1459
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Simple_name_P(self):
            return self.getToken(XplorMRParser.Simple_name_P, 0)

        def Potential_types(self):
            return self.getToken(XplorMRParser.Potential_types, 0)

        def Equ_op_P(self):
            return self.getToken(XplorMRParser.Equ_op_P, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1515
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1462
                self.pre_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1463
                self.match(XplorMRParser.Classification)
                self.state = 1465
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1464
                    self.match(XplorMRParser.Equ_op)


                self.state = 1467
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1468
                self.match(XplorMRParser.ForceConstant)
                self.state = 1470
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1469
                    self.match(XplorMRParser.Equ_op)


                self.state = 1472
                self.match(XplorMRParser.Simple_name)
                self.state = 1473
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1474
                self.match(XplorMRParser.Nrestraints)
                self.state = 1476
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1475
                    self.match(XplorMRParser.Equ_op)


                self.state = 1478
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1479
                self.match(XplorMRParser.Potential)
                self.state = 1481
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op_P:
                    self.state = 1480
                    self.match(XplorMRParser.Equ_op_P)


                self.state = 1483
                self.match(XplorMRParser.Simple_name_P)
                self.state = 1484
                self.match(XplorMRParser.Potential_types)
                pass
            elif token in [XplorMRParser.Kconst]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1485
                self.match(XplorMRParser.Kconst)
                self.state = 1487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1486
                    self.match(XplorMRParser.Equ_op)


                self.state = 1489
                self.match(XplorMRParser.Simple_name)
                self.state = 1490
                self.number_s()
                pass
            elif token in [XplorMRParser.Omega]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1491
                self.match(XplorMRParser.Omega)
                self.state = 1493
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1492
                    self.match(XplorMRParser.Equ_op)


                self.state = 1495
                self.match(XplorMRParser.Simple_name)
                self.state = 1496
                self.number_s()
                pass
            elif token in [XplorMRParser.Tauc]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1497
                self.match(XplorMRParser.Tauc)
                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1498
                    self.match(XplorMRParser.Equ_op)


                self.state = 1501
                self.match(XplorMRParser.Simple_name)
                self.state = 1502
                self.number_s()
                self.state = 1503
                self.number_s()
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1505
                self.match(XplorMRParser.Print)
                self.state = 1506
                self.match(XplorMRParser.Threshold)
                self.state = 1507
                self.number_s()
                self.state = 1511
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1508
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1509
                    self.match(XplorMRParser.Classification)
                    self.state = 1510
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1513
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Debug]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1514
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_pre_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1517
            self.match(XplorMRParser.Assign)
            self.state = 1518
            self.selection()
            self.state = 1519
            self.selection()
            self.state = 1520
            self.number()
            self.state = 1521
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_pcs_statement)
        try:
            self.state = 1559
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1523
                self.pcs_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1524
                self.match(XplorMRParser.Classification)
                self.state = 1525
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1526
                self.match(XplorMRParser.Tolerance)
                self.state = 1527
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1528
                self.match(XplorMRParser.Coefficients)
                self.state = 1529
                self.number_s()
                self.state = 1530
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1532
                self.match(XplorMRParser.ForceConstant)
                self.state = 1533
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1534
                self.match(XplorMRParser.Nrestraints)
                self.state = 1535
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1536
                self.match(XplorMRParser.Print)
                self.state = 1537
                self.match(XplorMRParser.Threshold)
                self.state = 1538
                self.number_s()
                self.state = 1542
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1539
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1540
                    self.match(XplorMRParser.Classification)
                    self.state = 1541
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1544
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1545
                self.match(XplorMRParser.Save)
                self.state = 1546
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1547
                self.match(XplorMRParser.Fmed)
                self.state = 1548
                self.number_s()
                self.state = 1549
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1551
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1552
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1553
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1554
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1555
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1556
                self.match(XplorMRParser.Soff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1557
                self.match(XplorMRParser.Frun)
                self.state = 1558
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_pcs_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1561
            self.match(XplorMRParser.Assign)
            self.state = 1562
            self.selection()
            self.state = 1563
            self.selection()
            self.state = 1564
            self.selection()
            self.state = 1565
            self.selection()
            self.state = 1566
            self.selection()
            self.state = 1567
            self.number()
            self.state = 1568
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_sContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_sContext,i)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_prdc_statement)
        try:
            self.state = 1596
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1570
                self.prdc_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1571
                self.match(XplorMRParser.Classification)
                self.state = 1572
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1573
                self.match(XplorMRParser.Tolerance)
                self.state = 1574
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1575
                self.match(XplorMRParser.Coefficients)
                self.state = 1576
                self.number_s()
                self.state = 1577
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1579
                self.match(XplorMRParser.ForceConstant)
                self.state = 1580
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1581
                self.match(XplorMRParser.Nrestraints)
                self.state = 1582
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1583
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1584
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1585
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1586
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1587
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1588
                self.match(XplorMRParser.Frun)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1589
                self.match(XplorMRParser.Print)
                self.state = 1590
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1591
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1592
                self.match(XplorMRParser.Save)
                self.state = 1593
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1594
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1595
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_prdc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1598
            self.match(XplorMRParser.Assign)
            self.state = 1599
            self.selection()
            self.state = 1600
            self.selection()
            self.state = 1601
            self.selection()
            self.state = 1602
            self.selection()
            self.state = 1603
            self.selection()
            self.state = 1604
            self.selection()
            self.state = 1605
            self.number()
            self.state = 1606
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_porientation_statement)
        try:
            self.state = 1619
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1608
                self.porientation_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1609
                self.match(XplorMRParser.Classification)
                self.state = 1610
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1611
                self.match(XplorMRParser.ForceConstant)
                self.state = 1612
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1613
                self.match(XplorMRParser.Nrestraints)
                self.state = 1614
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1615
                self.match(XplorMRParser.Print)
                self.state = 1616
                self.match(XplorMRParser.Threshold)
                self.state = 1617
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1618
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1621
            self.match(XplorMRParser.Assign)
            self.state = 1622
            self.selection()
            self.state = 1623
            self.selection()
            self.state = 1624
            self.number()
            self.state = 1625
            self.number()
            self.state = 1626
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_pccr_statement)
        try:
            self.state = 1645
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1628
                self.pccr_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1629
                self.match(XplorMRParser.Classification)
                self.state = 1630
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Weip]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1631
                self.match(XplorMRParser.Weip)
                self.state = 1632
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1633
                self.match(XplorMRParser.Coefficients)
                self.state = 1634
                self.number_s()
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1635
                self.match(XplorMRParser.ForceConstant)
                self.state = 1636
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1637
                self.match(XplorMRParser.Nrestraints)
                self.state = 1638
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1639
                self.match(XplorMRParser.Print)
                self.state = 1640
                self.match(XplorMRParser.Threshold)
                self.state = 1641
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1642
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1643
                self.match(XplorMRParser.Frun)
                self.state = 1644
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def number(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.NumberContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.NumberContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_pccr_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1647
            self.match(XplorMRParser.Assign)
            self.state = 1648
            self.selection()
            self.state = 1649
            self.selection()
            self.state = 1650
            self.selection()
            self.state = 1651
            self.number()
            self.state = 1652
            self.number()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,0)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_hbond_statement)
        try:
            self.state = 1665
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1654
                self.hbond_assign()
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1655
                self.match(XplorMRParser.Classification)
                self.state = 1656
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1657
                self.match(XplorMRParser.ForceConstant)
                self.state = 1658
                self.number_s()
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1659
                self.match(XplorMRParser.Nrestraints)
                self.state = 1660
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1661
                self.match(XplorMRParser.Print)
                self.state = 1662
                self.match(XplorMRParser.Threshold)
                self.state = 1663
                self.number_s()
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1664
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1667
            self.match(XplorMRParser.Assign)
            self.state = 1668
            self.selection()
            self.state = 1669
            self.selection()
            self.state = 1670
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_db_assign(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_db_assignContext,0)


        def Kdir(self):
            return self.getToken(XplorMRParser.Kdir, 0)

        def number_s(self):
            return self.getTypedRuleContext(XplorMRParser.Number_sContext,0)


        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Klin(self):
            return self.getToken(XplorMRParser.Klin, 0)

        def Nseg(self):
            return self.getToken(XplorMRParser.Nseg, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Nmin(self):
            return self.getToken(XplorMRParser.Nmin, 0)

        def Nmax(self):
            return self.getToken(XplorMRParser.Nmax, 0)

        def Segm(self):
            return self.getToken(XplorMRParser.Segm, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Ohcut(self):
            return self.getToken(XplorMRParser.Ohcut, 0)

        def Coh1cut(self):
            return self.getToken(XplorMRParser.Coh1cut, 0)

        def Coh2cut(self):
            return self.getToken(XplorMRParser.Coh2cut, 0)

        def Ohncut(self):
            return self.getToken(XplorMRParser.Ohncut, 0)

        def Updfrq(self):
            return self.getToken(XplorMRParser.Updfrq, 0)

        def Prnfrq(self):
            return self.getToken(XplorMRParser.Prnfrq, 0)

        def Freemode(self):
            return self.getToken(XplorMRParser.Freemode, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_statement" ):
                listener.enterHbond_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_statement" ):
                listener.exitHbond_db_statement(self)




    def hbond_db_statement(self):

        localctx = XplorMRParser.Hbond_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_hbond_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1738
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1672
                self.hbond_db_assign()
                pass
            elif token in [XplorMRParser.Kdir]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1673
                self.match(XplorMRParser.Kdir)
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1674
                    self.match(XplorMRParser.Equ_op)


                self.state = 1677
                self.number_s()
                pass
            elif token in [XplorMRParser.Klin]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1678
                self.match(XplorMRParser.Klin)
                self.state = 1680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1679
                    self.match(XplorMRParser.Equ_op)


                self.state = 1682
                self.number_s()
                pass
            elif token in [XplorMRParser.Nseg]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1683
                self.match(XplorMRParser.Nseg)
                self.state = 1685
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1684
                    self.match(XplorMRParser.Equ_op)


                self.state = 1687
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmin]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1688
                self.match(XplorMRParser.Nmin)
                self.state = 1690
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1689
                    self.match(XplorMRParser.Equ_op)


                self.state = 1692
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nmax]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1693
                self.match(XplorMRParser.Nmax)
                self.state = 1695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1694
                    self.match(XplorMRParser.Equ_op)


                self.state = 1697
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Segm]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1698
                self.match(XplorMRParser.Segm)
                self.state = 1700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1699
                    self.match(XplorMRParser.Equ_op)


                self.state = 1702
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Ohcut]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1703
                self.match(XplorMRParser.Ohcut)
                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1704
                    self.match(XplorMRParser.Equ_op)


                self.state = 1707
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh1cut]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1708
                self.match(XplorMRParser.Coh1cut)
                self.state = 1710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1709
                    self.match(XplorMRParser.Equ_op)


                self.state = 1712
                self.number_s()
                pass
            elif token in [XplorMRParser.Coh2cut]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1713
                self.match(XplorMRParser.Coh2cut)
                self.state = 1715
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1714
                    self.match(XplorMRParser.Equ_op)


                self.state = 1717
                self.number_s()
                pass
            elif token in [XplorMRParser.Ohncut]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1718
                self.match(XplorMRParser.Ohncut)
                self.state = 1720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1719
                    self.match(XplorMRParser.Equ_op)


                self.state = 1722
                self.number_s()
                pass
            elif token in [XplorMRParser.Updfrq]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1723
                self.match(XplorMRParser.Updfrq)
                self.state = 1725
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1724
                    self.match(XplorMRParser.Equ_op)


                self.state = 1727
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Prnfrq]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1728
                self.match(XplorMRParser.Prnfrq)
                self.state = 1730
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1729
                    self.match(XplorMRParser.Equ_op)


                self.state = 1732
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Freemode]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1733
                self.match(XplorMRParser.Freemode)
                self.state = 1735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1734
                    self.match(XplorMRParser.Equ_op)


                self.state = 1737
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_db_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_db_assign" ):
                listener.enterHbond_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_db_assign" ):
                listener.exitHbond_db_assign(self)




    def hbond_db_assign(self):

        localctx = XplorMRParser.Hbond_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_hbond_db_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1740
            self.match(XplorMRParser.Assign)
            self.state = 1741
            self.selection()
            self.state = 1742
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1744
            self.match(XplorMRParser.L_paren)
            self.state = 1745
            self.selection_expression()
            self.state = 1746
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1748
            self.term()
            self.state = 1753
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 1749
                self.match(XplorMRParser.Or_op)
                self.state = 1750
                self.term()
                self.state = 1755
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1756
            self.factor(0)
            self.state = 1761
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.And_op:
                self.state = 1757
                self.match(XplorMRParser.And_op)
                self.state = 1758
                self.factor(0)
                self.state = 1763
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def number_f(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Number_fContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Number_fContext,i)


        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Store_1(self):
            return self.getToken(XplorMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(XplorMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(XplorMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(XplorMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(XplorMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(XplorMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(XplorMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(XplorMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(XplorMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Donor(self):
            return self.getToken(XplorMRParser.Donor, 0)

        def Acceptor(self):
            return self.getToken(XplorMRParser.Acceptor, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 182
        self.enterRecursionRule(localctx, 182, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1893
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
            if la_ == 1:
                self.state = 1765
                self.match(XplorMRParser.L_paren)
                self.state = 1766
                self.selection_expression()
                self.state = 1767
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1769
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1770
                self.match(XplorMRParser.Atom)
                self.state = 1771
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1772
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1773
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1774
                self.match(XplorMRParser.Attribute)
                self.state = 1776
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Abs:
                    self.state = 1775
                    self.match(XplorMRParser.Abs)


                self.state = 1778
                self.match(XplorMRParser.Attr_properties)
                self.state = 1779
                self.match(XplorMRParser.Comparison_ops)
                self.state = 1780
                self.number_f()
                pass

            elif la_ == 5:
                self.state = 1781
                self.match(XplorMRParser.BondedTo)
                self.state = 1782
                self.factor(29)
                pass

            elif la_ == 6:
                self.state = 1783
                self.match(XplorMRParser.ByGroup)
                self.state = 1784
                self.factor(28)
                pass

            elif la_ == 7:
                self.state = 1785
                self.match(XplorMRParser.ByRes)
                self.state = 1786
                self.factor(27)
                pass

            elif la_ == 8:
                self.state = 1787
                self.match(XplorMRParser.Chemical)
                self.state = 1794
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1788
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1789
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1792
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
                    if la_ == 1:
                        self.state = 1790
                        self.match(XplorMRParser.Colon)
                        self.state = 1791
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1796
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 1797
                self.match(XplorMRParser.Id)
                self.state = 1798
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 1799
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 1800
                self.match(XplorMRParser.Name)
                self.state = 1807
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1801
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1802
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1805
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,144,self._ctx)
                    if la_ == 1:
                        self.state = 1803
                        self.match(XplorMRParser.Colon)
                        self.state = 1804
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 1809
                self.match(XplorMRParser.Not_op)
                self.state = 1810
                self.factor(21)
                pass

            elif la_ == 14:
                self.state = 1811
                self.match(XplorMRParser.Point)
                self.state = 1812
                self.match(XplorMRParser.L_paren)
                self.state = 1813
                self.number_f()
                self.state = 1815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1814
                    self.match(XplorMRParser.Comma)


                self.state = 1817
                self.number_f()
                self.state = 1819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1818
                    self.match(XplorMRParser.Comma)


                self.state = 1821
                self.number_f()
                self.state = 1822
                self.match(XplorMRParser.R_paren)
                self.state = 1823
                self.match(XplorMRParser.Cut)
                self.state = 1824
                self.number_f()
                pass

            elif la_ == 15:
                self.state = 1826
                self.match(XplorMRParser.Point)
                self.state = 1827
                self.match(XplorMRParser.L_paren)
                self.state = 1828
                self.match(XplorMRParser.Tail)
                self.state = 1830
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 1829
                    self.match(XplorMRParser.Equ_op)


                self.state = 1832
                self.selection()
                self.state = 1834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1833
                    self.match(XplorMRParser.Comma)


                self.state = 1841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Head:
                    self.state = 1836
                    self.match(XplorMRParser.Head)
                    self.state = 1838
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==XplorMRParser.Equ_op:
                        self.state = 1837
                        self.match(XplorMRParser.Equ_op)


                    self.state = 1840
                    self.selection()


                self.state = 1843
                self.match(XplorMRParser.R_paren)
                self.state = 1844
                self.match(XplorMRParser.Cut)
                self.state = 1845
                self.number_f()
                pass

            elif la_ == 16:
                self.state = 1847
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 1848
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 1849
                self.match(XplorMRParser.Residue)
                self.state = 1856
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integers]:
                    self.state = 1850
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [XplorMRParser.Integer]:
                    self.state = 1851
                    self.match(XplorMRParser.Integer)
                    self.state = 1854
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,152,self._ctx)
                    if la_ == 1:
                        self.state = 1852
                        self.match(XplorMRParser.Colon)
                        self.state = 1853
                        self.match(XplorMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 1858
                self.match(XplorMRParser.Resname)
                self.state = 1865
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1859
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1860
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1863
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,154,self._ctx)
                    if la_ == 1:
                        self.state = 1861
                        self.match(XplorMRParser.Colon)
                        self.state = 1862
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 1867
                self.match(XplorMRParser.SegIdentifier)
                self.state = 1879
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1868
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1869
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1872
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,156,self._ctx)
                    if la_ == 1:
                        self.state = 1870
                        self.match(XplorMRParser.Colon)
                        self.state = 1871
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 1874
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 1877
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,157,self._ctx)
                    if la_ == 1:
                        self.state = 1875
                        self.match(XplorMRParser.Colon)
                        self.state = 1876
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1881
                self.match(XplorMRParser.Store_1)
                pass

            elif la_ == 22:
                self.state = 1882
                self.match(XplorMRParser.Store_2)
                pass

            elif la_ == 23:
                self.state = 1883
                self.match(XplorMRParser.Store_3)
                pass

            elif la_ == 24:
                self.state = 1884
                self.match(XplorMRParser.Store_4)
                pass

            elif la_ == 25:
                self.state = 1885
                self.match(XplorMRParser.Store_5)
                pass

            elif la_ == 26:
                self.state = 1886
                self.match(XplorMRParser.Store_6)
                pass

            elif la_ == 27:
                self.state = 1887
                self.match(XplorMRParser.Store_7)
                pass

            elif la_ == 28:
                self.state = 1888
                self.match(XplorMRParser.Store_8)
                pass

            elif la_ == 29:
                self.state = 1889
                self.match(XplorMRParser.Store_9)
                pass

            elif la_ == 30:
                self.state = 1890
                self.match(XplorMRParser.Tag)
                pass

            elif la_ == 31:
                self.state = 1891
                self.match(XplorMRParser.Donor)
                pass

            elif la_ == 32:
                self.state = 1892
                self.match(XplorMRParser.Acceptor)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1903
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,161,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1901
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1895
                        if not self.precpred(self._ctx, 32):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 32)")
                        self.state = 1896
                        self.match(XplorMRParser.Around)
                        self.state = 1897
                        self.number_f()
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1898
                        if not self.precpred(self._ctx, 14):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 14)")
                        self.state = 1899
                        self.match(XplorMRParser.Saround)
                        self.state = 1900
                        self.number_f()
                        pass

             
                self.state = 1905
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,161,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NumberContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber" ):
                listener.enterNumber(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber" ):
                listener.exitNumber(self)




    def number(self):

        localctx = XplorMRParser.NumberContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_number)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1906
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_fContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_f

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_f" ):
                listener.enterNumber_f(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_f" ):
                listener.exitNumber_f(self)




    def number_f(self):

        localctx = XplorMRParser.Number_fContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_number_f)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1908
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_sContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_s

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_s" ):
                listener.enterNumber_s(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_s" ):
                listener.exitNumber_s(self)




    def number_s(self):

        localctx = XplorMRParser.Number_sContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_number_s)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1910
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Number_aContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_number_a

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNumber_a" ):
                listener.enterNumber_a(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNumber_a" ):
                listener.exitNumber_a(self)




    def number_a(self):

        localctx = XplorMRParser.Number_aContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_number_a)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1912
            _la = self._input.LA(1)
            if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Real):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Flag_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Flags(self):
            return self.getToken(XplorMRParser.Flags, 0)

        def Include(self):
            return self.getToken(XplorMRParser.Include, 0)

        def End_F(self):
            return self.getToken(XplorMRParser.End_F, 0)

        def Exclude(self):
            return self.getToken(XplorMRParser.Exclude, 0)

        def Class_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Class_name)
            else:
                return self.getToken(XplorMRParser.Class_name, i)

        def Any_class(self):
            return self.getToken(XplorMRParser.Any_class, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_flag_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlag_statement" ):
                listener.enterFlag_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlag_statement" ):
                listener.exitFlag_statement(self)




    def flag_statement(self):

        localctx = XplorMRParser.Flag_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_flag_statement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1914
            self.match(XplorMRParser.Flags)
            self.state = 1925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Exclude:
                self.state = 1915
                self.match(XplorMRParser.Exclude)
                self.state = 1923
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Include, XplorMRParser.Class_name]:
                    self.state = 1919
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==XplorMRParser.Class_name:
                        self.state = 1916
                        self.match(XplorMRParser.Class_name)
                        self.state = 1921
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass
                elif token in [XplorMRParser.Any_class]:
                    self.state = 1922
                    self.match(XplorMRParser.Any_class)
                    pass
                else:
                    raise NoViableAltException(self)



            self.state = 1927
            self.match(XplorMRParser.Include)
            self.state = 1931
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Class_name:
                self.state = 1928
                self.match(XplorMRParser.Class_name)
                self.state = 1933
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1934
            self.match(XplorMRParser.End_F)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Vector(self):
            return self.getToken(XplorMRParser.Vector, 0)

        def vector_mode(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_modeContext,0)


        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_statement" ):
                listener.enterVector_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_statement" ):
                listener.exitVector_statement(self)




    def vector_statement(self):

        localctx = XplorMRParser.Vector_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_vector_statement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1936
            self.match(XplorMRParser.Vector)
            self.state = 1937
            self.vector_mode()
            self.state = 1938
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_modeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vector_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_expressionContext,0)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Do_Lp(self):
            return self.getToken(XplorMRParser.Do_Lp, 0)

        def Identify_Lp(self):
            return self.getToken(XplorMRParser.Identify_Lp, 0)

        def Show(self):
            return self.getToken(XplorMRParser.Show, 0)

        def vector_show_property(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_show_propertyContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_mode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_mode" ):
                listener.enterVector_mode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_mode" ):
                listener.exitVector_mode(self)




    def vector_mode(self):

        localctx = XplorMRParser.Vector_modeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_vector_mode)
        self._la = 0 # Token type
        try:
            self.state = 1946
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Do_Lp, XplorMRParser.Identify_Lp]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1940
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Do_Lp or _la==XplorMRParser.Identify_Lp):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1941
                self.vector_expression()
                self.state = 1942
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Show]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1944
                self.match(XplorMRParser.Show)
                self.state = 1945
                self.vector_show_property()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def Equ_op_VE(self):
            return self.getToken(XplorMRParser.Equ_op_VE, 0)

        def vector_operation(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_expression" ):
                listener.enterVector_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_expression" ):
                listener.exitVector_expression(self)




    def vector_expression(self):

        localctx = XplorMRParser.Vector_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_vector_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1948
            self.match(XplorMRParser.Atom_properties_VE)
            self.state = 1951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Equ_op_VE:
                self.state = 1949
                self.match(XplorMRParser.Equ_op_VE)
                self.state = 1950
                self.vector_operation()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_operationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vflc(self):
            return self.getTypedRuleContext(XplorMRParser.VflcContext,0)


        def vector_operation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vector_operationContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vector_operationContext,i)


        def Add_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Add_op_VE)
            else:
                return self.getToken(XplorMRParser.Add_op_VE, i)

        def Sub_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Sub_op_VE)
            else:
                return self.getToken(XplorMRParser.Sub_op_VE, i)

        def Mul_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Mul_op_VE)
            else:
                return self.getToken(XplorMRParser.Mul_op_VE, i)

        def Div_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Div_op_VE)
            else:
                return self.getToken(XplorMRParser.Div_op_VE, i)

        def Exp_op_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Exp_op_VE)
            else:
                return self.getToken(XplorMRParser.Exp_op_VE, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_operation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_operation" ):
                listener.enterVector_operation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_operation" ):
                listener.exitVector_operation(self)




    def vector_operation(self):

        localctx = XplorMRParser.Vector_operationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_vector_operation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1953
            self.vflc()
            self.state = 1958
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,168,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1954
                    _la = self._input.LA(1)
                    if not(((((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & ((1 << (XplorMRParser.Add_op_VE - 220)) | (1 << (XplorMRParser.Sub_op_VE - 220)) | (1 << (XplorMRParser.Mul_op_VE - 220)) | (1 << (XplorMRParser.Div_op_VE - 220)) | (1 << (XplorMRParser.Exp_op_VE - 220)))) != 0)):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 1955
                    self.vector_operation() 
                self.state = 1960
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VflcContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Atom_properties_VE(self):
            return self.getToken(XplorMRParser.Atom_properties_VE, 0)

        def vector_func_call(self):
            return self.getTypedRuleContext(XplorMRParser.Vector_func_callContext,0)


        def Integer_VE(self):
            return self.getToken(XplorMRParser.Integer_VE, 0)

        def Real_VE(self):
            return self.getToken(XplorMRParser.Real_VE, 0)

        def Simple_name_VE(self):
            return self.getToken(XplorMRParser.Simple_name_VE, 0)

        def Double_quote_string_VE(self):
            return self.getToken(XplorMRParser.Double_quote_string_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vflc

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVflc" ):
                listener.enterVflc(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVflc" ):
                listener.exitVflc(self)




    def vflc(self):

        localctx = XplorMRParser.VflcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_vflc)
        try:
            self.state = 1967
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Atom_properties_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1961
                self.match(XplorMRParser.Atom_properties_VE)
                pass
            elif token in [XplorMRParser.Abs_VE, XplorMRParser.Acos_VE, XplorMRParser.Cos_VE, XplorMRParser.Decode_VE, XplorMRParser.Encode_VE, XplorMRParser.Exp_VE, XplorMRParser.Gauss_VE, XplorMRParser.Heavy_VE, XplorMRParser.Int_VE, XplorMRParser.Log10_VE, XplorMRParser.Log_VE, XplorMRParser.Max_VE, XplorMRParser.Maxw_VE, XplorMRParser.Min_VE, XplorMRParser.Mod_VE, XplorMRParser.Norm_VE, XplorMRParser.Random_VE, XplorMRParser.Sign_VE, XplorMRParser.Sin_VE, XplorMRParser.Sqrt_VE, XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1962
                self.vector_func_call()
                pass
            elif token in [XplorMRParser.Integer_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1963
                self.match(XplorMRParser.Integer_VE)
                pass
            elif token in [XplorMRParser.Real_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1964
                self.match(XplorMRParser.Real_VE)
                pass
            elif token in [XplorMRParser.Simple_name_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1965
                self.match(XplorMRParser.Simple_name_VE)
                pass
            elif token in [XplorMRParser.Double_quote_string_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1966
                self.match(XplorMRParser.Double_quote_string_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_func_callContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Abs_VE(self):
            return self.getToken(XplorMRParser.Abs_VE, 0)

        def L_paren_VF(self):
            return self.getToken(XplorMRParser.L_paren_VF, 0)

        def vflc(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.VflcContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.VflcContext,i)


        def R_paren_VE(self):
            return self.getToken(XplorMRParser.R_paren_VE, 0)

        def Acos_VE(self):
            return self.getToken(XplorMRParser.Acos_VE, 0)

        def Cos_VE(self):
            return self.getToken(XplorMRParser.Cos_VE, 0)

        def Decode_VE(self):
            return self.getToken(XplorMRParser.Decode_VE, 0)

        def Encode_VE(self):
            return self.getToken(XplorMRParser.Encode_VE, 0)

        def Exp_VE(self):
            return self.getToken(XplorMRParser.Exp_VE, 0)

        def Gauss_VE(self):
            return self.getToken(XplorMRParser.Gauss_VE, 0)

        def Heavy_VE(self):
            return self.getToken(XplorMRParser.Heavy_VE, 0)

        def Int_VE(self):
            return self.getToken(XplorMRParser.Int_VE, 0)

        def Log10_VE(self):
            return self.getToken(XplorMRParser.Log10_VE, 0)

        def Log_VE(self):
            return self.getToken(XplorMRParser.Log_VE, 0)

        def Max_VE(self):
            return self.getToken(XplorMRParser.Max_VE, 0)

        def Comma_VE(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma_VE)
            else:
                return self.getToken(XplorMRParser.Comma_VE, i)

        def Maxw_VE(self):
            return self.getToken(XplorMRParser.Maxw_VE, 0)

        def Min_VE(self):
            return self.getToken(XplorMRParser.Min_VE, 0)

        def Mod_VE(self):
            return self.getToken(XplorMRParser.Mod_VE, 0)

        def Norm_VE(self):
            return self.getToken(XplorMRParser.Norm_VE, 0)

        def Random_VE(self):
            return self.getToken(XplorMRParser.Random_VE, 0)

        def Sign_VE(self):
            return self.getToken(XplorMRParser.Sign_VE, 0)

        def Sin_VE(self):
            return self.getToken(XplorMRParser.Sin_VE, 0)

        def Sqrt_VE(self):
            return self.getToken(XplorMRParser.Sqrt_VE, 0)

        def Tan_VE(self):
            return self.getToken(XplorMRParser.Tan_VE, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_func_call

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_func_call" ):
                listener.enterVector_func_call(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_func_call" ):
                listener.exitVector_func_call(self)




    def vector_func_call(self):

        localctx = XplorMRParser.Vector_func_callContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_vector_func_call)
        self._la = 0 # Token type
        try:
            self.state = 2088
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Abs_VE]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1969
                self.match(XplorMRParser.Abs_VE)
                self.state = 1970
                self.match(XplorMRParser.L_paren_VF)
                self.state = 1971
                self.vflc()
                self.state = 1972
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Acos_VE]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1974
                self.match(XplorMRParser.Acos_VE)
                self.state = 1975
                self.match(XplorMRParser.L_paren_VF)
                self.state = 1976
                self.vflc()
                self.state = 1977
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Cos_VE]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1979
                self.match(XplorMRParser.Cos_VE)
                self.state = 1980
                self.match(XplorMRParser.L_paren_VF)
                self.state = 1981
                self.vflc()
                self.state = 1982
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Decode_VE]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1984
                self.match(XplorMRParser.Decode_VE)
                self.state = 1985
                self.match(XplorMRParser.L_paren_VF)
                self.state = 1986
                self.vflc()
                self.state = 1987
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Encode_VE]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1989
                self.match(XplorMRParser.Encode_VE)
                self.state = 1990
                self.match(XplorMRParser.L_paren_VF)
                self.state = 1991
                self.vflc()
                self.state = 1992
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Exp_VE]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1994
                self.match(XplorMRParser.Exp_VE)
                self.state = 1995
                self.match(XplorMRParser.L_paren_VF)
                self.state = 1996
                self.vflc()
                self.state = 1997
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Gauss_VE]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1999
                self.match(XplorMRParser.Gauss_VE)
                self.state = 2000
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2001
                self.vflc()
                self.state = 2002
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Heavy_VE]:
                self.enterOuterAlt(localctx, 8)
                self.state = 2004
                self.match(XplorMRParser.Heavy_VE)
                self.state = 2005
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2006
                self.vflc()
                self.state = 2007
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Int_VE]:
                self.enterOuterAlt(localctx, 9)
                self.state = 2009
                self.match(XplorMRParser.Int_VE)
                self.state = 2010
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2011
                self.vflc()
                self.state = 2012
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log10_VE]:
                self.enterOuterAlt(localctx, 10)
                self.state = 2014
                self.match(XplorMRParser.Log10_VE)
                self.state = 2015
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2016
                self.vflc()
                self.state = 2017
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Log_VE]:
                self.enterOuterAlt(localctx, 11)
                self.state = 2019
                self.match(XplorMRParser.Log_VE)
                self.state = 2020
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2021
                self.vflc()
                self.state = 2022
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Max_VE]:
                self.enterOuterAlt(localctx, 12)
                self.state = 2024
                self.match(XplorMRParser.Max_VE)
                self.state = 2025
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2026
                self.vflc()
                self.state = 2031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2027
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2028
                    self.vflc()
                    self.state = 2033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2034
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Maxw_VE]:
                self.enterOuterAlt(localctx, 13)
                self.state = 2036
                self.match(XplorMRParser.Maxw_VE)
                self.state = 2037
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2038
                self.vflc()
                self.state = 2039
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Min_VE]:
                self.enterOuterAlt(localctx, 14)
                self.state = 2041
                self.match(XplorMRParser.Min_VE)
                self.state = 2042
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2043
                self.vflc()
                self.state = 2048
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Comma_VE:
                    self.state = 2044
                    self.match(XplorMRParser.Comma_VE)
                    self.state = 2045
                    self.vflc()
                    self.state = 2050
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2051
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Mod_VE]:
                self.enterOuterAlt(localctx, 15)
                self.state = 2053
                self.match(XplorMRParser.Mod_VE)
                self.state = 2054
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2055
                self.vflc()
                self.state = 2056
                self.match(XplorMRParser.Comma_VE)
                self.state = 2057
                self.vflc()
                self.state = 2058
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Norm_VE]:
                self.enterOuterAlt(localctx, 16)
                self.state = 2060
                self.match(XplorMRParser.Norm_VE)
                self.state = 2061
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2062
                self.vflc()
                self.state = 2063
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Random_VE]:
                self.enterOuterAlt(localctx, 17)
                self.state = 2065
                self.match(XplorMRParser.Random_VE)
                self.state = 2066
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2067
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sign_VE]:
                self.enterOuterAlt(localctx, 18)
                self.state = 2068
                self.match(XplorMRParser.Sign_VE)
                self.state = 2069
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2070
                self.vflc()
                self.state = 2071
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sin_VE]:
                self.enterOuterAlt(localctx, 19)
                self.state = 2073
                self.match(XplorMRParser.Sin_VE)
                self.state = 2074
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2075
                self.vflc()
                self.state = 2076
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Sqrt_VE]:
                self.enterOuterAlt(localctx, 20)
                self.state = 2078
                self.match(XplorMRParser.Sqrt_VE)
                self.state = 2079
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2080
                self.vflc()
                self.state = 2081
                self.match(XplorMRParser.R_paren_VE)
                pass
            elif token in [XplorMRParser.Tan_VE]:
                self.enterOuterAlt(localctx, 21)
                self.state = 2083
                self.match(XplorMRParser.Tan_VE)
                self.state = 2084
                self.match(XplorMRParser.L_paren_VF)
                self.state = 2085
                self.vflc()
                self.state = 2086
                self.match(XplorMRParser.R_paren_VE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vector_show_propertyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren_VS(self):
            return self.getToken(XplorMRParser.L_paren_VS, 0)

        def Atom_properties_VS(self):
            return self.getToken(XplorMRParser.Atom_properties_VS, 0)

        def R_paren_VS(self):
            return self.getToken(XplorMRParser.R_paren_VS, 0)

        def Average_VS(self):
            return self.getToken(XplorMRParser.Average_VS, 0)

        def Element_VS(self):
            return self.getToken(XplorMRParser.Element_VS, 0)

        def Max_VS(self):
            return self.getToken(XplorMRParser.Max_VS, 0)

        def Min_VS(self):
            return self.getToken(XplorMRParser.Min_VS, 0)

        def Norm_VS(self):
            return self.getToken(XplorMRParser.Norm_VS, 0)

        def Rms_VS(self):
            return self.getToken(XplorMRParser.Rms_VS, 0)

        def Sum_VS(self):
            return self.getToken(XplorMRParser.Sum_VS, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vector_show_property

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVector_show_property" ):
                listener.enterVector_show_property(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVector_show_property" ):
                listener.exitVector_show_property(self)




    def vector_show_property(self):

        localctx = XplorMRParser.Vector_show_propertyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_vector_show_property)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2090
            _la = self._input.LA(1)
            if not(((((_la - 256)) & ~0x3f) == 0 and ((1 << (_la - 256)) & ((1 << (XplorMRParser.Average_VS - 256)) | (1 << (XplorMRParser.Element_VS - 256)) | (1 << (XplorMRParser.Max_VS - 256)) | (1 << (XplorMRParser.Min_VS - 256)) | (1 << (XplorMRParser.Norm_VS - 256)) | (1 << (XplorMRParser.Rms_VS - 256)) | (1 << (XplorMRParser.Sum_VS - 256)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2091
            self.match(XplorMRParser.L_paren_VS)
            self.state = 2092
            self.match(XplorMRParser.Atom_properties_VS)
            self.state = 2093
            self.match(XplorMRParser.R_paren_VS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[91] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 32)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 14)
         




