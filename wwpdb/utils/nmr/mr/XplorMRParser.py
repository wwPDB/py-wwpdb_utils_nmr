# Generated from XplorMRParser.g4 by ANTLR 4.9
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u00b9")
        buf.write("\u06eb\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write("\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\7\2\u00c7")
        buf.write("\n\2\f\2\16\2\u00ca\13\2\3\2\7\2\u00cd\n\2\f\2\16\2\u00d0")
        buf.write("\13\2\3\2\7\2\u00d3\n\2\f\2\16\2\u00d6\13\2\3\2\7\2\u00d9")
        buf.write("\n\2\f\2\16\2\u00dc\13\2\3\2\7\2\u00df\n\2\f\2\16\2\u00e2")
        buf.write("\13\2\3\2\7\2\u00e5\n\2\f\2\16\2\u00e8\13\2\3\2\3\2\3")
        buf.write("\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\5")
        buf.write("\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3")
        buf.write("\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5")
        buf.write("\3\5\3\5\5\5\u0117\n\5\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3")
        buf.write("\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\13\3\13\3\13")
        buf.write("\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3")
        buf.write("\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3\17\3\17\3\17")
        buf.write("\3\17\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\23")
        buf.write("\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\24\3\24")
        buf.write("\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\27\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30")
        buf.write("\3\30\3\30\3\31\7\31\u018d\n\31\f\31\16\31\u0190\13\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\5\31\u01bb\n")
        buf.write("\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31\3\31")
        buf.write("\3\31\3\31\5\31\u01d4\n\31\3\32\3\32\3\32\3\32\3\32\3")
        buf.write("\32\3\32\3\32\3\32\3\32\7\32\u01e0\n\32\f\32\16\32\u01e3")
        buf.write("\13\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3")
        buf.write("\33\5\33\u01ef\n\33\3\34\7\34\u01f2\n\34\f\34\16\34\u01f5")
        buf.write("\13\34\3\34\3\34\3\34\3\34\3\34\3\34\5\34\u01fd\n\34\3")
        buf.write("\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\36")
        buf.write("\7\36\u020a\n\36\f\36\16\36\u020d\13\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36\3\36")
        buf.write("\3\36\3\36\5\36\u021f\n\36\3\37\3\37\3\37\3\37\3\37\3")
        buf.write("\37\3\37\3\37\3\37\3\37\3 \7 \u022c\n \f \16 \u022f\13")
        buf.write(" \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3 \3")
        buf.write(" \3 \3 \3 \3 \3 \3 \5 \u0249\n \3!\3!\3!\3!\3!\3!\3!\3")
        buf.write("!\3!\3!\3!\3!\3!\5!\u0258\n!\3\"\7\"\u025b\n\"\f\"\16")
        buf.write("\"\u025e\13\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"")
        buf.write("\3\"\3\"\3\"\3\"\3\"\3\"\3\"\5\"\u0271\n\"\3#\3#\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3$\7$\u027e\n$\f$\16$\u0281\13$\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\3$\5$\u028f\n$\3%\3%\3")
        buf.write("%\3%\3%\3%\3&\7&\u0298\n&\f&\16&\u029b\13&\3&\3&\3&\3")
        buf.write("&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\5&\u02b0")
        buf.write("\n&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(")
        buf.write("\5(\u02c0\n(\3)\3)\3)\3)\3)\3)\5)\u02c8\n)\3*\7*\u02cb")
        buf.write("\n*\f*\16*\u02ce\13*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*")
        buf.write("\3*\3*\3*\3*\5*\u02df\n*\3*\3*\3*\3*\3*\5*\u02e6\n*\3")
        buf.write("+\3+\3+\3+\3,\7,\u02ed\n,\f,\16,\u02f0\13,\3,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u0301\n,\3,\3,\3")
        buf.write(",\3,\3,\3,\3,\3,\3,\3,\3,\3,\3,\5,\u0310\n,\3,\5,\u0313")
        buf.write("\n,\3-\3-\3-\3-\3-\3-\3-\3-\3-\3-\5-\u031f\n-\3-\3-\3")
        buf.write("-\3-\5-\u0325\n-\3.\7.\u0328\n.\f.\16.\u032b\13.\3.\3")
        buf.write(".\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3.\3")
        buf.write(".\3.\3.\7.\u0343\n.\f.\16.\u0346\13.\3.\3.\5.\u034a\n")
        buf.write(".\3/\3/\3/\3/\3/\3/\3/\3/\3/\3\60\3\60\3\60\3\60\3\60")
        buf.write("\3\61\7\61\u035b\n\61\f\61\16\61\u035e\13\61\3\61\7\61")
        buf.write("\u0361\n\61\f\61\16\61\u0364\13\61\3\61\7\61\u0367\n\61")
        buf.write("\f\61\16\61\u036a\13\61\3\61\7\61\u036d\n\61\f\61\16\61")
        buf.write("\u0370\13\61\3\61\7\61\u0373\n\61\f\61\16\61\u0376\13")
        buf.write("\61\3\61\7\61\u0379\n\61\f\61\16\61\u037c\13\61\3\61\7")
        buf.write("\61\u037f\n\61\f\61\16\61\u0382\13\61\3\61\7\61\u0385")
        buf.write("\n\61\f\61\16\61\u0388\13\61\3\61\7\61\u038b\n\61\f\61")
        buf.write("\16\61\u038e\13\61\3\61\3\61\3\61\3\61\3\61\3\61\3\61")
        buf.write("\3\61\3\61\5\61\u0399\n\61\3\61\3\61\3\61\3\61\3\61\3")
        buf.write("\61\3\61\3\61\5\61\u03a3\n\61\3\61\3\61\5\61\u03a7\n\61")
        buf.write("\3\62\3\62\3\62\5\62\u03ac\n\62\3\62\3\62\5\62\u03b0\n")
        buf.write("\62\3\63\3\63\3\63\3\63\3\64\3\64\3\64\3\64\3\64\3\64")
        buf.write("\5\64\u03bc\n\64\3\64\3\64\3\65\3\65\3\65\3\66\3\66\3")
        buf.write("\66\3\67\3\67\3\67\38\38\38\39\39\39\39\39\39\39\39\5")
        buf.write("9\u03d4\n9\3:\3:\3:\3;\7;\u03da\n;\f;\16;\u03dd\13;\3")
        buf.write(";\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u03ec\n;\3;\3")
        buf.write(";\3;\5;\u03f1\n;\3;\3;\3;\5;\u03f6\n;\3;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\3;\5;\u0401\n;\3;\3;\3;\5;\u0406\n;\3;\3;\3;\5")
        buf.write(";\u040b\n;\3;\3;\3;\3;\3;\3;\5;\u0413\n;\3;\3;\3;\3;\3")
        buf.write(";\3;\3;\5;\u041c\n;\3;\3;\3;\5;\u0421\n;\3;\3;\3;\5;\u0426")
        buf.write("\n;\3;\3;\3;\3;\3;\3;\3;\3;\3;\5;\u0431\n;\3;\5;\u0434")
        buf.write("\n;\3;\5;\u0437\n;\3;\3;\5;\u043b\n;\3<\3<\3<\3<\3<\3")
        buf.write("<\3<\3<\3<\3<\5<\u0447\n<\3<\3<\3<\3<\3<\5<\u044e\n<\3")
        buf.write("<\3<\3<\3<\3<\5<\u0455\n<\3=\3=\3=\3=\3=\3=\3=\3=\3=\5")
        buf.write("=\u0460\n=\3>\7>\u0463\n>\f>\16>\u0466\13>\3>\3>\3>\3")
        buf.write(">\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\3>\5>\u047c")
        buf.write("\n>\3?\3?\3?\3?\3?\3?\3?\3?\3?\3?\3@\7@\u0489\n@\f@\16")
        buf.write("@\u048c\13@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@")
        buf.write("\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\3@\5@\u04b1\n@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\3@\3@\3@\3@\5@\u04c2\n@\3A\3A\3A\3A\3A\3A\3B\7B\u04cb")
        buf.write("\nB\fB\16B\u04ce\13B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B")
        buf.write("\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\3B\5B\u04e8\nB\3")
        buf.write("C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3C\3D\7D\u04f7\nD\fD\16")
        buf.write("D\u04fa\13D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D\3D")
        buf.write("\3D\3D\3D\3D\3D\3D\3D\3D\3D\5D\u0513\nD\3E\7E\u0516\n")
        buf.write("E\fE\16E\u0519\13E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3E\3")
        buf.write("E\3E\3E\3E\3E\3E\3E\3E\3E\5E\u052f\nE\3F\3F\3F\3F\3F\3")
        buf.write("F\3F\3F\3F\3F\3F\3F\3G\7G\u053e\nG\fG\16G\u0541\13G\3")
        buf.write("G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3G\3")
        buf.write("G\3G\3G\3G\5G\u0559\nG\3G\3G\3G\3G\3G\3G\5G\u0561\nG\3")
        buf.write("H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\3H\5H\u0570\nH\3I\7")
        buf.write("I\u0573\nI\fI\16I\u0576\13I\3I\3I\3I\3I\3I\3I\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3I\3")
        buf.write("I\3I\3I\3I\3I\3I\3I\5I\u0599\nI\3I\3I\5I\u059d\nI\3J\3")
        buf.write("J\3J\3J\3J\3J\3K\7K\u05a6\nK\fK\16K\u05a9\13K\3K\3K\3")
        buf.write("K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u05bc\n")
        buf.write("K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\3K\5K\u05cc\n")
        buf.write("K\3L\3L\3L\3L\3L\3L\3L\3L\3L\3M\7M\u05d8\nM\fM\16M\u05db")
        buf.write("\13M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3M\3")
        buf.write("M\3M\3M\3M\3M\3M\3M\3M\5M\u05f5\nM\3N\3N\3N\3N\3N\3N\3")
        buf.write("N\3N\3N\3N\3O\7O\u0602\nO\fO\16O\u0605\13O\3O\3O\3O\3")
        buf.write("O\3O\3O\3O\3O\3O\3O\5O\u0611\nO\3P\3P\3P\3P\3P\3P\3P\3")
        buf.write("Q\7Q\u061b\nQ\fQ\16Q\u061e\13Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3")
        buf.write("Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\3Q\5Q\u0630\nQ\3R\3R\3R\3R\3R\3")
        buf.write("R\3R\3S\7S\u063a\nS\fS\16S\u063d\13S\3S\3S\3S\3S\3S\3")
        buf.write("S\3S\3S\3S\3S\5S\u0649\nS\3T\3T\3T\3T\3T\3U\3U\3U\3U\3")
        buf.write("V\3V\3V\7V\u0657\nV\fV\16V\u065a\13V\3W\3W\3W\7W\u065f")
        buf.write("\nW\fW\16W\u0662\13W\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X")
        buf.write("\3X\5X\u0670\nX\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\3")
        buf.write("X\3X\5X\u0680\nX\5X\u0682\nX\3X\3X\3X\3X\3X\3X\3X\3X\3")
        buf.write("X\5X\u068d\nX\5X\u068f\nX\3X\3X\3X\3X\3X\3X\5X\u0697\n")
        buf.write("X\3X\3X\5X\u069b\nX\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u06a7")
        buf.write("\nX\3X\3X\3X\5X\u06ac\nX\3X\3X\3X\3X\3X\3X\3X\3X\3X\3")
        buf.write("X\3X\5X\u06b9\nX\5X\u06bb\nX\3X\3X\3X\3X\3X\5X\u06c2\n")
        buf.write("X\5X\u06c4\nX\3X\3X\3X\3X\3X\5X\u06cb\nX\3X\3X\3X\5X\u06d0")
        buf.write("\nX\5X\u06d2\nX\3X\3X\3X\3X\3X\3X\3X\3X\3X\3X\5X\u06de")
        buf.write("\nX\3X\3X\3X\3X\3X\3X\7X\u06e6\nX\fX\16X\u06e9\13X\3X")
        buf.write("\2\3\u00aeY\2\4\6\b\n\f\16\20\22\24\26\30\32\34\36 \"")
        buf.write("$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz")
        buf.write("|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c\u008e\u0090")
        buf.write("\u0092\u0094\u0096\u0098\u009a\u009c\u009e\u00a0\u00a2")
        buf.write("\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\2\5\3\2)*\3\2\u00a5")
        buf.write("\u00a6\4\2\u00a1\u00a1\u00a7\u00a7\2\u0820\2\u00c8\3\2")
        buf.write("\2\2\4\u00eb\3\2\2\2\6\u00f1\3\2\2\2\b\u0116\3\2\2\2\n")
        buf.write("\u0118\3\2\2\2\f\u011f\3\2\2\2\16\u0125\3\2\2\2\20\u012b")
        buf.write("\3\2\2\2\22\u0131\3\2\2\2\24\u0137\3\2\2\2\26\u013d\3")
        buf.write("\2\2\2\30\u0143\3\2\2\2\32\u0149\3\2\2\2\34\u014f\3\2")
        buf.write("\2\2\36\u0155\3\2\2\2 \u015b\3\2\2\2\"\u0161\3\2\2\2$")
        buf.write("\u0167\3\2\2\2&\u016d\3\2\2\2(\u0173\3\2\2\2*\u0179\3")
        buf.write("\2\2\2,\u017f\3\2\2\2.\u0185\3\2\2\2\60\u01d3\3\2\2\2")
        buf.write("\62\u01d5\3\2\2\2\64\u01ee\3\2\2\2\66\u01fc\3\2\2\28\u01fe")
        buf.write("\3\2\2\2:\u021e\3\2\2\2<\u0220\3\2\2\2>\u0248\3\2\2\2")
        buf.write("@\u024a\3\2\2\2B\u0270\3\2\2\2D\u0272\3\2\2\2F\u028e\3")
        buf.write("\2\2\2H\u0290\3\2\2\2J\u02af\3\2\2\2L\u02b1\3\2\2\2N\u02bf")
        buf.write("\3\2\2\2P\u02c7\3\2\2\2R\u02e5\3\2\2\2T\u02e7\3\2\2\2")
        buf.write("V\u0312\3\2\2\2X\u0314\3\2\2\2Z\u0349\3\2\2\2\\\u034b")
        buf.write("\3\2\2\2^\u0354\3\2\2\2`\u03a6\3\2\2\2b\u03a8\3\2\2\2")
        buf.write("d\u03b1\3\2\2\2f\u03b5\3\2\2\2h\u03bf\3\2\2\2j\u03c2\3")
        buf.write("\2\2\2l\u03c5\3\2\2\2n\u03c8\3\2\2\2p\u03cb\3\2\2\2r\u03d5")
        buf.write("\3\2\2\2t\u043a\3\2\2\2v\u043c\3\2\2\2x\u045f\3\2\2\2")
        buf.write("z\u047b\3\2\2\2|\u047d\3\2\2\2~\u04c1\3\2\2\2\u0080\u04c3")
        buf.write("\3\2\2\2\u0082\u04e7\3\2\2\2\u0084\u04e9\3\2\2\2\u0086")
        buf.write("\u0512\3\2\2\2\u0088\u052e\3\2\2\2\u008a\u0530\3\2\2\2")
        buf.write("\u008c\u0560\3\2\2\2\u008e\u0562\3\2\2\2\u0090\u059c\3")
        buf.write("\2\2\2\u0092\u059e\3\2\2\2\u0094\u05cb\3\2\2\2\u0096\u05cd")
        buf.write("\3\2\2\2\u0098\u05f4\3\2\2\2\u009a\u05f6\3\2\2\2\u009c")
        buf.write("\u0610\3\2\2\2\u009e\u0612\3\2\2\2\u00a0\u062f\3\2\2\2")
        buf.write("\u00a2\u0631\3\2\2\2\u00a4\u0648\3\2\2\2\u00a6\u064a\3")
        buf.write("\2\2\2\u00a8\u064f\3\2\2\2\u00aa\u0653\3\2\2\2\u00ac\u065b")
        buf.write("\3\2\2\2\u00ae\u06dd\3\2\2\2\u00b0\u00c7\5\4\3\2\u00b1")
        buf.write("\u00c7\5\6\4\2\u00b2\u00c7\5\b\5\2\u00b3\u00c7\5\n\6\2")
        buf.write("\u00b4\u00c7\5\f\7\2\u00b5\u00c7\5\16\b\2\u00b6\u00c7")
        buf.write("\5\20\t\2\u00b7\u00c7\5\22\n\2\u00b8\u00c7\5\24\13\2\u00b9")
        buf.write("\u00c7\5\26\f\2\u00ba\u00c7\5\30\r\2\u00bb\u00c7\5\32")
        buf.write("\16\2\u00bc\u00c7\5\34\17\2\u00bd\u00c7\5\36\20\2\u00be")
        buf.write("\u00c7\5 \21\2\u00bf\u00c7\5\"\22\2\u00c0\u00c7\5$\23")
        buf.write("\2\u00c1\u00c7\5&\24\2\u00c2\u00c7\5(\25\2\u00c3\u00c7")
        buf.write("\5*\26\2\u00c4\u00c7\5,\27\2\u00c5\u00c7\5.\30\2\u00c6")
        buf.write("\u00b0\3\2\2\2\u00c6\u00b1\3\2\2\2\u00c6\u00b2\3\2\2\2")
        buf.write("\u00c6\u00b3\3\2\2\2\u00c6\u00b4\3\2\2\2\u00c6\u00b5\3")
        buf.write("\2\2\2\u00c6\u00b6\3\2\2\2\u00c6\u00b7\3\2\2\2\u00c6\u00b8")
        buf.write("\3\2\2\2\u00c6\u00b9\3\2\2\2\u00c6\u00ba\3\2\2\2\u00c6")
        buf.write("\u00bb\3\2\2\2\u00c6\u00bc\3\2\2\2\u00c6\u00bd\3\2\2\2")
        buf.write("\u00c6\u00be\3\2\2\2\u00c6\u00bf\3\2\2\2\u00c6\u00c0\3")
        buf.write("\2\2\2\u00c6\u00c1\3\2\2\2\u00c6\u00c2\3\2\2\2\u00c6\u00c3")
        buf.write("\3\2\2\2\u00c6\u00c4\3\2\2\2\u00c6\u00c5\3\2\2\2\u00c7")
        buf.write("\u00ca\3\2\2\2\u00c8\u00c6\3\2\2\2\u00c8\u00c9\3\2\2\2")
        buf.write("\u00c9\u00ce\3\2\2\2\u00ca\u00c8\3\2\2\2\u00cb\u00cd\5")
        buf.write("\62\32\2\u00cc\u00cb\3\2\2\2\u00cd\u00d0\3\2\2\2\u00ce")
        buf.write("\u00cc\3\2\2\2\u00ce\u00cf\3\2\2\2\u00cf\u00d4\3\2\2\2")
        buf.write("\u00d0\u00ce\3\2\2\2\u00d1\u00d3\58\35\2\u00d2\u00d1\3")
        buf.write("\2\2\2\u00d3\u00d6\3\2\2\2\u00d4\u00d2\3\2\2\2\u00d4\u00d5")
        buf.write("\3\2\2\2\u00d5\u00da\3\2\2\2\u00d6\u00d4\3\2\2\2\u00d7")
        buf.write("\u00d9\5<\37\2\u00d8\u00d7\3\2\2\2\u00d9\u00dc\3\2\2\2")
        buf.write("\u00da\u00d8\3\2\2\2\u00da\u00db\3\2\2\2\u00db\u00e0\3")
        buf.write("\2\2\2\u00dc\u00da\3\2\2\2\u00dd\u00df\5N(\2\u00de\u00dd")
        buf.write("\3\2\2\2\u00df\u00e2\3\2\2\2\u00e0\u00de\3\2\2\2\u00e0")
        buf.write("\u00e1\3\2\2\2\u00e1\u00e6\3\2\2\2\u00e2\u00e0\3\2\2\2")
        buf.write("\u00e3\u00e5\5\u00a6T\2\u00e4\u00e3\3\2\2\2\u00e5\u00e8")
        buf.write("\3\2\2\2\u00e6\u00e4\3\2\2\2\u00e6\u00e7\3\2\2\2\u00e7")
        buf.write("\u00e9\3\2\2\2\u00e8\u00e6\3\2\2\2\u00e9\u00ea\7\2\2\3")
        buf.write("\u00ea\3\3\2\2\2\u00eb\u00ec\7\4\2\2\u00ec\u00ed\7\u00aa")
        buf.write("\2\2\u00ed\u00ee\5\60\31\2\u00ee\u00ef\7\u00ab\2\2\u00ef")
        buf.write("\u00f0\7\3\2\2\u00f0\5\3\2\2\2\u00f1\u00f2\7\"\2\2\u00f2")
        buf.write("\u00f3\7#\2\2\u00f3\u00f4\7\u00aa\2\2\u00f4\u00f5\5\66")
        buf.write("\34\2\u00f5\u00f6\7\u00ab\2\2\u00f6\u00f7\7\3\2\2\u00f7")
        buf.write("\7\3\2\2\2\u00f8\u00f9\7%\2\2\u00f9\u00fa\7\u00aa\2\2")
        buf.write("\u00fa\u00fb\5:\36\2\u00fb\u00fc\7\u00ab\2\2\u00fc\u00fd")
        buf.write("\7\3\2\2\u00fd\u0117\3\2\2\2\u00fe\u00ff\t\2\2\2\u00ff")
        buf.write("\u0100\7\u00aa\2\2\u0100\u0101\5> \2\u0101\u0102\7\u00ab")
        buf.write("\2\2\u0102\u0103\7\3\2\2\u0103\u0117\3\2\2\2\u0104\u0105")
        buf.write("\7\60\2\2\u0105\u0106\7\u00aa\2\2\u0106\u0107\5B\"\2\u0107")
        buf.write("\u0108\7\u00ab\2\2\u0108\u0109\7\3\2\2\u0109\u0117\3\2")
        buf.write("\2\2\u010a\u010b\7\63\2\2\u010b\u010c\7\u00aa\2\2\u010c")
        buf.write("\u010d\5F$\2\u010d\u010e\7\u00ab\2\2\u010e\u010f\7\3\2")
        buf.write("\2\u010f\u0117\3\2\2\2\u0110\u0111\7\64\2\2\u0111\u0112")
        buf.write("\7\u00aa\2\2\u0112\u0113\5J&\2\u0113\u0114\7\u00ab\2\2")
        buf.write("\u0114\u0115\7\3\2\2\u0115\u0117\3\2\2\2\u0116\u00f8\3")
        buf.write("\2\2\2\u0116\u00fe\3\2\2\2\u0116\u0104\3\2\2\2\u0116\u010a")
        buf.write("\3\2\2\2\u0116\u0110\3\2\2\2\u0117\t\3\2\2\2\u0118\u0119")
        buf.write("\7\"\2\2\u0119\u011a\7\66\2\2\u011a\u011b\7\u00aa\2\2")
        buf.write("\u011b\u011c\5N(\2\u011c\u011d\7\u00ab\2\2\u011d\u011e")
        buf.write("\7\3\2\2\u011e\13\3\2\2\2\u011f\u0120\7;\2\2\u0120\u0121")
        buf.write("\7\u00aa\2\2\u0121\u0122\5R*\2\u0122\u0123\7\u00ab\2\2")
        buf.write("\u0123\u0124\7\3\2\2\u0124\r\3\2\2\2\u0125\u0126\7?\2")
        buf.write("\2\u0126\u0127\7\u00aa\2\2\u0127\u0128\5V,\2\u0128\u0129")
        buf.write("\7\u00ab\2\2\u0129\u012a\7\3\2\2\u012a\17\3\2\2\2\u012b")
        buf.write("\u012c\7B\2\2\u012c\u012d\7\u00aa\2\2\u012d\u012e\5Z.")
        buf.write("\2\u012e\u012f\7\u00ab\2\2\u012f\u0130\7\3\2\2\u0130\21")
        buf.write("\3\2\2\2\u0131\u0132\7F\2\2\u0132\u0133\7\u00aa\2\2\u0133")
        buf.write("\u0134\5`\61\2\u0134\u0135\7\u00ab\2\2\u0135\u0136\7\3")
        buf.write("\2\2\u0136\23\3\2\2\2\u0137\u0138\7P\2\2\u0138\u0139\7")
        buf.write("\u00aa\2\2\u0139\u013a\5t;\2\u013a\u013b\7\u00ab\2\2\u013b")
        buf.write("\u013c\7\3\2\2\u013c\25\3\2\2\2\u013d\u013e\7X\2\2\u013e")
        buf.write("\u013f\7\u00aa\2\2\u013f\u0140\5x=\2\u0140\u0141\7\u00ab")
        buf.write("\2\2\u0141\u0142\7\3\2\2\u0142\27\3\2\2\2\u0143\u0144")
        buf.write("\7Y\2\2\u0144\u0145\7\u00aa\2\2\u0145\u0146\5z>\2\u0146")
        buf.write("\u0147\7\u00ab\2\2\u0147\u0148\7\3\2\2\u0148\31\3\2\2")
        buf.write("\2\u0149\u014a\7[\2\2\u014a\u014b\7\u00aa\2\2\u014b\u014c")
        buf.write("\5~@\2\u014c\u014d\7\u00ab\2\2\u014d\u014e\7\3\2\2\u014e")
        buf.write("\33\3\2\2\2\u014f\u0150\7_\2\2\u0150\u0151\7\u00aa\2\2")
        buf.write("\u0151\u0152\5\u0082B\2\u0152\u0153\7\u00ab\2\2\u0153")
        buf.write("\u0154\7\3\2\2\u0154\35\3\2\2\2\u0155\u0156\7b\2\2\u0156")
        buf.write("\u0157\7\u00aa\2\2\u0157\u0158\5\u0086D\2\u0158\u0159")
        buf.write("\7\u00ab\2\2\u0159\u015a\7\3\2\2\u015a\37\3\2\2\2\u015b")
        buf.write("\u015c\7c\2\2\u015c\u015d\7\u00aa\2\2\u015d\u015e\5\u0088")
        buf.write("E\2\u015e\u015f\7\u00ab\2\2\u015f\u0160\7\3\2\2\u0160")
        buf.write("!\3\2\2\2\u0161\u0162\7d\2\2\u0162\u0163\7\u00aa\2\2\u0163")
        buf.write("\u0164\5\u008cG\2\u0164\u0165\7\u00ab\2\2\u0165\u0166")
        buf.write("\7\3\2\2\u0166#\3\2\2\2\u0167\u0168\7g\2\2\u0168\u0169")
        buf.write("\7\u00aa\2\2\u0169\u016a\5\u0090I\2\u016a\u016b\7\u00ab")
        buf.write("\2\2\u016b\u016c\7\3\2\2\u016c%\3\2\2\2\u016d\u016e\7")
        buf.write("l\2\2\u016e\u016f\7\u00aa\2\2\u016f\u0170\5\u0094K\2\u0170")
        buf.write("\u0171\7\u00ab\2\2\u0171\u0172\7\3\2\2\u0172\'\3\2\2\2")
        buf.write("\u0173\u0174\7w\2\2\u0174\u0175\7\u00aa\2\2\u0175\u0176")
        buf.write("\5\u0098M\2\u0176\u0177\7\u00ab\2\2\u0177\u0178\7\3\2")
        buf.write("\2\u0178)\3\2\2\2\u0179\u017a\7x\2\2\u017a\u017b\7\u00aa")
        buf.write("\2\2\u017b\u017c\5\u009cO\2\u017c\u017d\7\u00ab\2\2\u017d")
        buf.write("\u017e\7\3\2\2\u017e+\3\2\2\2\u017f\u0180\7y\2\2\u0180")
        buf.write("\u0181\7\u00aa\2\2\u0181\u0182\5\u00a0Q\2\u0182\u0183")
        buf.write("\7\u00ab\2\2\u0183\u0184\7\3\2\2\u0184-\3\2\2\2\u0185")
        buf.write("\u0186\7{\2\2\u0186\u0187\7\u00aa\2\2\u0187\u0188\5\u00a4")
        buf.write("S\2\u0188\u0189\7\u00ab\2\2\u0189\u018a\7\3\2\2\u018a")
        buf.write("/\3\2\2\2\u018b\u018d\5\62\32\2\u018c\u018b\3\2\2\2\u018d")
        buf.write("\u0190\3\2\2\2\u018e\u018c\3\2\2\2\u018e\u018f\3\2\2\2")
        buf.write("\u018f\u01d4\3\2\2\2\u0190\u018e\3\2\2\2\u0191\u0192\7")
        buf.write("\6\2\2\u0192\u0193\7\u00a6\2\2\u0193\u01d4\7\u00a3\2\2")
        buf.write("\u0194\u0195\7\7\2\2\u0195\u0196\7\u00a6\2\2\u0196\u01d4")
        buf.write("\7\34\2\2\u0197\u0198\7\b\2\2\u0198\u0199\7\u00a6\2\2")
        buf.write("\u0199\u01d4\7\u00a3\2\2\u019a\u019b\7\t\2\2\u019b\u019c")
        buf.write("\7\u00ad\2\2\u019c\u01d4\7\u00a3\2\2\u019d\u019e\7\n\2")
        buf.write("\2\u019e\u01d4\7\u00a5\2\2\u019f\u01a0\7\13\2\2\u01a0")
        buf.write("\u01d4\7\u00a5\2\2\u01a1\u01a2\7\f\2\2\u01a2\u01a3\7\u00a5")
        buf.write("\2\2\u01a3\u01a4\7\u00a5\2\2\u01a4\u01d4\7\u00a3\2\2\u01a5")
        buf.write("\u01a6\7\r\2\2\u01a6\u01a7\7\u00a6\2\2\u01a7\u01d4\7\u00a1")
        buf.write("\2\2\u01a8\u01a9\7\16\2\2\u01a9\u01aa\7\u00a6\2\2\u01aa")
        buf.write("\u01d4\7\u00a1\2\2\u01ab\u01ac\7\17\2\2\u01ac\u01ad\7")
        buf.write("\u00ad\2\2\u01ad\u01d4\7\u00a1\2\2\u01ae\u01af\7\20\2")
        buf.write("\2\u01af\u01b0\7\u00a6\2\2\u01b0\u01d4\7\35\2\2\u01b1")
        buf.write("\u01b2\7\21\2\2\u01b2\u01b3\7\u00aa\2\2\u01b3\u01b4\5")
        buf.write("\64\33\2\u01b4\u01b5\7\u00ab\2\2\u01b5\u01b6\7\3\2\2\u01b6")
        buf.write("\u01d4\3\2\2\2\u01b7\u01b8\7\22\2\2\u01b8\u01ba\7\23\2")
        buf.write("\2\u01b9\u01bb\7\u00ad\2\2\u01ba\u01b9\3\2\2\2\u01ba\u01bb")
        buf.write("\3\2\2\2\u01bb\u01bc\3\2\2\2\u01bc\u01d4\7\u00a3\2\2\u01bd")
        buf.write("\u01d4\7\24\2\2\u01be\u01bf\7\25\2\2\u01bf\u01c0\7\u00a6")
        buf.write("\2\2\u01c0\u01d4\7\u00a3\2\2\u01c1\u01c2\7\26\2\2\u01c2")
        buf.write("\u01c3\7\u00a6\2\2\u01c3\u01d4\7\u00a3\2\2\u01c4\u01c5")
        buf.write("\7\27\2\2\u01c5\u01c6\7\u00a6\2\2\u01c6\u01d4\7\u00a3")
        buf.write("\2\2\u01c7\u01c8\7\30\2\2\u01c8\u01c9\7\u00a6\2\2\u01c9")
        buf.write("\u01d4\7\u00a3\2\2\u01ca\u01cb\7\31\2\2\u01cb\u01cc\7")
        buf.write("\u00a6\2\2\u01cc\u01d4\7\u00a3\2\2\u01cd\u01ce\7\32\2")
        buf.write("\2\u01ce\u01cf\7\u00a6\2\2\u01cf\u01d4\7\u00a3\2\2\u01d0")
        buf.write("\u01d1\7\33\2\2\u01d1\u01d2\7\u00ad\2\2\u01d2\u01d4\7")
        buf.write("\u00a3\2\2\u01d3\u018e\3\2\2\2\u01d3\u0191\3\2\2\2\u01d3")
        buf.write("\u0194\3\2\2\2\u01d3\u0197\3\2\2\2\u01d3\u019a\3\2\2\2")
        buf.write("\u01d3\u019d\3\2\2\2\u01d3\u019f\3\2\2\2\u01d3\u01a1\3")
        buf.write("\2\2\2\u01d3\u01a5\3\2\2\2\u01d3\u01a8\3\2\2\2\u01d3\u01ab")
        buf.write("\3\2\2\2\u01d3\u01ae\3\2\2\2\u01d3\u01b1\3\2\2\2\u01d3")
        buf.write("\u01b7\3\2\2\2\u01d3\u01bd\3\2\2\2\u01d3\u01be\3\2\2\2")
        buf.write("\u01d3\u01c1\3\2\2\2\u01d3\u01c4\3\2\2\2\u01d3\u01c7\3")
        buf.write("\2\2\2\u01d3\u01ca\3\2\2\2\u01d3\u01cd\3\2\2\2\u01d3\u01d0")
        buf.write("\3\2\2\2\u01d4\61\3\2\2\2\u01d5\u01d6\7\5\2\2\u01d6\u01d7")
        buf.write("\5\u00a8U\2\u01d7\u01d8\5\u00a8U\2\u01d8\u01d9\7\u00a3")
        buf.write("\2\2\u01d9\u01da\7\u00a3\2\2\u01da\u01e1\7\u00a3\2\2\u01db")
        buf.write("\u01dc\7\u009c\2\2\u01dc\u01dd\5\u00a8U\2\u01dd\u01de")
        buf.write("\5\u00a8U\2\u01de\u01e0\3\2\2\2\u01df\u01db\3\2\2\2\u01e0")
        buf.write("\u01e3\3\2\2\2\u01e1\u01df\3\2\2\2\u01e1\u01e2\3\2\2\2")
        buf.write("\u01e2\63\3\2\2\2\u01e3\u01e1\3\2\2\2\u01e4\u01e5\7\36")
        buf.write("\2\2\u01e5\u01e6\7\u00ad\2\2\u01e6\u01ef\7\u00a3\2\2\u01e7")
        buf.write("\u01e8\7\37\2\2\u01e8\u01e9\7\u00ad\2\2\u01e9\u01ef\7")
        buf.write("\u00a3\2\2\u01ea\u01eb\7 \2\2\u01eb\u01ef\5\u00a8U\2\u01ec")
        buf.write("\u01ed\7!\2\2\u01ed\u01ef\5\u00a8U\2\u01ee\u01e4\3\2\2")
        buf.write("\2\u01ee\u01e7\3\2\2\2\u01ee\u01ea\3\2\2\2\u01ee\u01ec")
        buf.write("\3\2\2\2\u01ef\65\3\2\2\2\u01f0\u01f2\58\35\2\u01f1\u01f0")
        buf.write("\3\2\2\2\u01f2\u01f5\3\2\2\2\u01f3\u01f1\3\2\2\2\u01f3")
        buf.write("\u01f4\3\2\2\2\u01f4\u01fd\3\2\2\2\u01f5\u01f3\3\2\2\2")
        buf.write("\u01f6\u01f7\7$\2\2\u01f7\u01f8\7\u00ad\2\2\u01f8\u01fd")
        buf.write("\7\u00a1\2\2\u01f9\u01fd\7\24\2\2\u01fa\u01fb\7\26\2\2")
        buf.write("\u01fb\u01fd\7\u00a3\2\2\u01fc\u01f3\3\2\2\2\u01fc\u01f6")
        buf.write("\3\2\2\2\u01fc\u01f9\3\2\2\2\u01fc\u01fa\3\2\2\2\u01fd")
        buf.write("\67\3\2\2\2\u01fe\u01ff\7\5\2\2\u01ff\u0200\5\u00a8U\2")
        buf.write("\u0200\u0201\5\u00a8U\2\u0201\u0202\5\u00a8U\2\u0202\u0203")
        buf.write("\5\u00a8U\2\u0203\u0204\7\u00a3\2\2\u0204\u0205\7\u00a3")
        buf.write("\2\2\u0205\u0206\7\u00a3\2\2\u0206\u0207\7\u00a1\2\2\u0207")
        buf.write("9\3\2\2\2\u0208\u020a\5<\37\2\u0209\u0208\3\2\2\2\u020a")
        buf.write("\u020d\3\2\2\2\u020b\u0209\3\2\2\2\u020b\u020c\3\2\2\2")
        buf.write("\u020c\u021f\3\2\2\2\u020d\u020b\3\2\2\2\u020e\u020f\7")
        buf.write("\n\2\2\u020f\u021f\7\u00a5\2\2\u0210\u0211\7&\2\2\u0211")
        buf.write("\u0212\7\u00a3\2\2\u0212\u0213\7\u00a3\2\2\u0213\u021f")
        buf.write("\7\u00a3\2\2\u0214\u0215\7\'\2\2\u0215\u021f\7\u00a3\2")
        buf.write("\2\u0216\u0217\7\17\2\2\u0217\u021f\7\u00a1\2\2\u0218")
        buf.write("\u0219\7\20\2\2\u0219\u021f\7(\2\2\u021a\u021b\7\22\2")
        buf.write("\2\u021b\u021c\7\23\2\2\u021c\u021f\7\u00a3\2\2\u021d")
        buf.write("\u021f\7\24\2\2\u021e\u020b\3\2\2\2\u021e\u020e\3\2\2")
        buf.write("\2\u021e\u0210\3\2\2\2\u021e\u0214\3\2\2\2\u021e\u0216")
        buf.write("\3\2\2\2\u021e\u0218\3\2\2\2\u021e\u021a\3\2\2\2\u021e")
        buf.write("\u021d\3\2\2\2\u021f;\3\2\2\2\u0220\u0221\7\5\2\2\u0221")
        buf.write("\u0222\5\u00a8U\2\u0222\u0223\5\u00a8U\2\u0223\u0224\5")
        buf.write("\u00a8U\2\u0224\u0225\5\u00a8U\2\u0225\u0226\5\u00a8U")
        buf.write("\2\u0226\u0227\5\u00a8U\2\u0227\u0228\7\u00a3\2\2\u0228")
        buf.write("\u0229\7\u00a3\2\2\u0229=\3\2\2\2\u022a\u022c\5@!\2\u022b")
        buf.write("\u022a\3\2\2\2\u022c\u022f\3\2\2\2\u022d\u022b\3\2\2\2")
        buf.write("\u022d\u022e\3\2\2\2\u022e\u0249\3\2\2\2\u022f\u022d\3")
        buf.write("\2\2\2\u0230\u0231\7\n\2\2\u0231\u0249\7\u00a5\2\2\u0232")
        buf.write("\u0233\7+\2\2\u0233\u0249\7.\2\2\u0234\u0235\7\26\2\2")
        buf.write("\u0235\u0249\7\u00a3\2\2\u0236\u0237\7,\2\2\u0237\u0249")
        buf.write("\7\u00a2\2\2\u0238\u0239\7-\2\2\u0239\u0249\7/\2\2\u023a")
        buf.write("\u023b\7&\2\2\u023b\u023c\7\u00a3\2\2\u023c\u023d\7\u00a3")
        buf.write("\2\2\u023d\u0249\7\u00a3\2\2\u023e\u023f\7\'\2\2\u023f")
        buf.write("\u0249\7\u00a3\2\2\u0240\u0241\7\17\2\2\u0241\u0249\7")
        buf.write("\u00a1\2\2\u0242\u0243\7\20\2\2\u0243\u0249\7(\2\2\u0244")
        buf.write("\u0245\7\22\2\2\u0245\u0246\7\23\2\2\u0246\u0249\7\u00a3")
        buf.write("\2\2\u0247\u0249\7\24\2\2\u0248\u022d\3\2\2\2\u0248\u0230")
        buf.write("\3\2\2\2\u0248\u0232\3\2\2\2\u0248\u0234\3\2\2\2\u0248")
        buf.write("\u0236\3\2\2\2\u0248\u0238\3\2\2\2\u0248\u023a\3\2\2\2")
        buf.write("\u0248\u023e\3\2\2\2\u0248\u0240\3\2\2\2\u0248\u0242\3")
        buf.write("\2\2\2\u0248\u0244\3\2\2\2\u0248\u0247\3\2\2\2\u0249?")
        buf.write("\3\2\2\2\u024a\u024b\7\5\2\2\u024b\u024c\5\u00a8U\2\u024c")
        buf.write("\u024d\5\u00a8U\2\u024d\u024e\5\u00a8U\2\u024e\u024f\5")
        buf.write("\u00a8U\2\u024f\u0250\5\u00a8U\2\u0250\u0251\5\u00a8U")
        buf.write("\2\u0251\u0252\7\u00a3\2\2\u0252\u0253\7\u00a3\2\2\u0253")
        buf.write("\u0257\7\u00a3\2\2\u0254\u0255\7\u00a3\2\2\u0255\u0256")
        buf.write("\7\u00a3\2\2\u0256\u0258\7\u00a3\2\2\u0257\u0254\3\2\2")
        buf.write("\2\u0257\u0258\3\2\2\2\u0258A\3\2\2\2\u0259\u025b\5D#")
        buf.write("\2\u025a\u0259\3\2\2\2\u025b\u025e\3\2\2\2\u025c\u025a")
        buf.write("\3\2\2\2\u025c\u025d\3\2\2\2\u025d\u0271\3\2\2\2\u025e")
        buf.write("\u025c\3\2\2\2\u025f\u0260\7\61\2\2\u0260\u0261\7\u00ad")
        buf.write("\2\2\u0261\u0271\7\u00a1\2\2\u0262\u0263\7\n\2\2\u0263")
        buf.write("\u0271\7\u00a5\2\2\u0264\u0265\7\'\2\2\u0265\u0266\7\u00a3")
        buf.write("\2\2\u0266\u0271\7\u00a3\2\2\u0267\u0268\7\17\2\2\u0268")
        buf.write("\u0271\7\u00a1\2\2\u0269\u026a\7\62\2\2\u026a\u026b\7")
        buf.write("\u00ad\2\2\u026b\u0271\7\u00a1\2\2\u026c\u026d\7\22\2")
        buf.write("\2\u026d\u026e\7\23\2\2\u026e\u0271\7\u00a3\2\2\u026f")
        buf.write("\u0271\7\24\2\2\u0270\u025c\3\2\2\2\u0270\u025f\3\2\2")
        buf.write("\2\u0270\u0262\3\2\2\2\u0270\u0264\3\2\2\2\u0270\u0267")
        buf.write("\3\2\2\2\u0270\u0269\3\2\2\2\u0270\u026c\3\2\2\2\u0270")
        buf.write("\u026f\3\2\2\2\u0271C\3\2\2\2\u0272\u0273\7\5\2\2\u0273")
        buf.write("\u0274\5\u00a8U\2\u0274\u0275\5\u00a8U\2\u0275\u0276\5")
        buf.write("\u00a8U\2\u0276\u0277\5\u00a8U\2\u0277\u0278\7\u00a3\2")
        buf.write("\2\u0278\u0279\7\u00a3\2\2\u0279\u027a\7\u00a3\2\2\u027a")
        buf.write("\u027b\7\u00a3\2\2\u027bE\3\2\2\2\u027c\u027e\5H%\2\u027d")
        buf.write("\u027c\3\2\2\2\u027e\u0281\3\2\2\2\u027f\u027d\3\2\2\2")
        buf.write("\u027f\u0280\3\2\2\2\u0280\u028f\3\2\2\2\u0281\u027f\3")
        buf.write("\2\2\2\u0282\u0283\7\n\2\2\u0283\u028f\7\u00a5\2\2\u0284")
        buf.write("\u0285\7&\2\2\u0285\u028f\7\u00a3\2\2\u0286\u0287\7\17")
        buf.write("\2\2\u0287\u028f\7\u00a1\2\2\u0288\u0289\7\20\2\2\u0289")
        buf.write("\u028f\7(\2\2\u028a\u028b\7\22\2\2\u028b\u028c\7\23\2")
        buf.write("\2\u028c\u028f\7\u00a3\2\2\u028d\u028f\7\24\2\2\u028e")
        buf.write("\u027f\3\2\2\2\u028e\u0282\3\2\2\2\u028e\u0284\3\2\2\2")
        buf.write("\u028e\u0286\3\2\2\2\u028e\u0288\3\2\2\2\u028e\u028a\3")
        buf.write("\2\2\2\u028e\u028d\3\2\2\2\u028fG\3\2\2\2\u0290\u0291")
        buf.write("\7\5\2\2\u0291\u0292\5\u00a8U\2\u0292\u0293\5\u00a8U\2")
        buf.write("\u0293\u0294\7\u00a3\2\2\u0294\u0295\7\u00a3\2\2\u0295")
        buf.write("I\3\2\2\2\u0296\u0298\5L\'\2\u0297\u0296\3\2\2\2\u0298")
        buf.write("\u029b\3\2\2\2\u0299\u0297\3\2\2\2\u0299\u029a\3\2\2\2")
        buf.write("\u029a\u02b0\3\2\2\2\u029b\u0299\3\2\2\2\u029c\u029d\7")
        buf.write("\n\2\2\u029d\u02b0\7\u00a5\2\2\u029e\u029f\7&\2\2\u029f")
        buf.write("\u02a0\7\u00a3\2\2\u02a0\u02a1\7\u00a3\2\2\u02a1\u02a2")
        buf.write("\7\u00a3\2\2\u02a2\u02b0\7\u00a3\2\2\u02a3\u02a4\7\'\2")
        buf.write("\2\u02a4\u02b0\7\u00a3\2\2\u02a5\u02a6\7\17\2\2\u02a6")
        buf.write("\u02b0\7\u00a1\2\2\u02a7\u02a8\7\20\2\2\u02a8\u02b0\7")
        buf.write("(\2\2\u02a9\u02aa\7\22\2\2\u02aa\u02ab\7\23\2\2\u02ab")
        buf.write("\u02b0\7\u00a3\2\2\u02ac\u02b0\7\24\2\2\u02ad\u02ae\7")
        buf.write("+\2\2\u02ae\u02b0\7\65\2\2\u02af\u0299\3\2\2\2\u02af\u029c")
        buf.write("\3\2\2\2\u02af\u029e\3\2\2\2\u02af\u02a3\3\2\2\2\u02af")
        buf.write("\u02a5\3\2\2\2\u02af\u02a7\3\2\2\2\u02af\u02a9\3\2\2\2")
        buf.write("\u02af\u02ac\3\2\2\2\u02af\u02ad\3\2\2\2\u02b0K\3\2\2")
        buf.write("\2\u02b1\u02b2\7\5\2\2\u02b2\u02b3\5\u00a8U\2\u02b3\u02b4")
        buf.write("\5\u00a8U\2\u02b4\u02b5\5\u00a8U\2\u02b5\u02b6\5\u00a8")
        buf.write("U\2\u02b6\u02b7\7\u00a3\2\2\u02b7\u02b8\7\u00a3\2\2\u02b8")
        buf.write("M\3\2\2\2\u02b9\u02ba\7\67\2\2\u02ba\u02bb\7\u00aa\2\2")
        buf.write("\u02bb\u02bc\5P)\2\u02bc\u02bd\7\u00ab\2\2\u02bd\u02c0")
        buf.write("\3\2\2\2\u02be\u02c0\78\2\2\u02bf\u02b9\3\2\2\2\u02bf")
        buf.write("\u02be\3\2\2\2\u02c0O\3\2\2\2\u02c1\u02c2\79\2\2\u02c2")
        buf.write("\u02c3\7\u00ad\2\2\u02c3\u02c8\5\u00a8U\2\u02c4\u02c5")
        buf.write("\7:\2\2\u02c5\u02c6\7\u00ad\2\2\u02c6\u02c8\7\u00a3\2")
        buf.write("\2\u02c7\u02c1\3\2\2\2\u02c7\u02c4\3\2\2\2\u02c8Q\3\2")
        buf.write("\2\2\u02c9\u02cb\5T+\2\u02ca\u02c9\3\2\2\2\u02cb\u02ce")
        buf.write("\3\2\2\2\u02cc\u02ca\3\2\2\2\u02cc\u02cd\3\2\2\2\u02cd")
        buf.write("\u02e6\3\2\2\2\u02ce\u02cc\3\2\2\2\u02cf\u02d0\7\n\2\2")
        buf.write("\u02d0\u02e6\7\u00a5\2\2\u02d1\u02d2\7<\2\2\u02d2\u02d3")
        buf.write("\7\u00a1\2\2\u02d3\u02e6\7\u00a3\2\2\u02d4\u02d5\7\'\2")
        buf.write("\2\u02d5\u02e6\7\u00a3\2\2\u02d6\u02d7\7\17\2\2\u02d7")
        buf.write("\u02e6\7\u00a1\2\2\u02d8\u02d9\7\22\2\2\u02d9\u02da\7")
        buf.write("\23\2\2\u02da\u02de\7\u00a3\2\2\u02db\u02df\7|\2\2\u02dc")
        buf.write("\u02dd\7\n\2\2\u02dd\u02df\7\u00a5\2\2\u02de\u02db\3\2")
        buf.write("\2\2\u02de\u02dc\3\2\2\2\u02df\u02e6\3\2\2\2\u02e0\u02e6")
        buf.write("\7\24\2\2\u02e1\u02e2\7=\2\2\u02e2\u02e3\7\u00a3\2\2\u02e3")
        buf.write("\u02e6\7\u00a1\2\2\u02e4\u02e6\7>\2\2\u02e5\u02cc\3\2")
        buf.write("\2\2\u02e5\u02cf\3\2\2\2\u02e5\u02d1\3\2\2\2\u02e5\u02d4")
        buf.write("\3\2\2\2\u02e5\u02d6\3\2\2\2\u02e5\u02d8\3\2\2\2\u02e5")
        buf.write("\u02e0\3\2\2\2\u02e5\u02e1\3\2\2\2\u02e5\u02e4\3\2\2\2")
        buf.write("\u02e6S\3\2\2\2\u02e7\u02e8\7\5\2\2\u02e8\u02e9\5\u00a8")
        buf.write("U\2\u02e9\u02ea\5\u00a8U\2\u02eaU\3\2\2\2\u02eb\u02ed")
        buf.write("\5X-\2\u02ec\u02eb\3\2\2\2\u02ed\u02f0\3\2\2\2\u02ee\u02ec")
        buf.write("\3\2\2\2\u02ee\u02ef\3\2\2\2\u02ef\u0313\3\2\2\2\u02f0")
        buf.write("\u02ee\3\2\2\2\u02f1\u02f2\7\n\2\2\u02f2\u0313\7\u00a5")
        buf.write("\2\2\u02f3\u02f4\7&\2\2\u02f4\u02f5\7\u00a3\2\2\u02f5")
        buf.write("\u02f6\7\u00a3\2\2\u02f6\u02f7\7\u00a3\2\2\u02f7\u0313")
        buf.write("\7\u00a3\2\2\u02f8\u02f9\7\61\2\2\u02f9\u02fa\7\u00ad")
        buf.write("\2\2\u02fa\u0313\7\u00a1\2\2\u02fb\u02fc\7@\2\2\u02fc")
        buf.write("\u0313\7\u00a1\2\2\u02fd\u02fe\7\'\2\2\u02fe\u0300\7\u00a3")
        buf.write("\2\2\u02ff\u0301\7\u00a3\2\2\u0300\u02ff\3\2\2\2\u0300")
        buf.write("\u0301\3\2\2\2\u0301\u0313\3\2\2\2\u0302\u0303\7\17\2")
        buf.write("\2\u0303\u0313\7\u00a1\2\2\u0304\u0305\7\62\2\2\u0305")
        buf.write("\u0306\7\u00ad\2\2\u0306\u0313\7\u00a1\2\2\u0307\u0308")
        buf.write("\7\20\2\2\u0308\u0313\7A\2\2\u0309\u030a\7\22\2\2\u030a")
        buf.write("\u030b\7\23\2\2\u030b\u030f\7\u00a3\2\2\u030c\u0310\7")
        buf.write("|\2\2\u030d\u030e\7\n\2\2\u030e\u0310\7\u00a5\2\2\u030f")
        buf.write("\u030c\3\2\2\2\u030f\u030d\3\2\2\2\u0310\u0313\3\2\2\2")
        buf.write("\u0311\u0313\7\24\2\2\u0312\u02ee\3\2\2\2\u0312\u02f1")
        buf.write("\3\2\2\2\u0312\u02f3\3\2\2\2\u0312\u02f8\3\2\2\2\u0312")
        buf.write("\u02fb\3\2\2\2\u0312\u02fd\3\2\2\2\u0312\u0302\3\2\2\2")
        buf.write("\u0312\u0304\3\2\2\2\u0312\u0307\3\2\2\2\u0312\u0309\3")
        buf.write("\2\2\2\u0312\u0311\3\2\2\2\u0313W\3\2\2\2\u0314\u0315")
        buf.write("\7\5\2\2\u0315\u0316\5\u00a8U\2\u0316\u0317\5\u00a8U\2")
        buf.write("\u0317\u0318\5\u00a8U\2\u0318\u031e\5\u00a8U\2\u0319\u031a")
        buf.write("\5\u00a8U\2\u031a\u031b\5\u00a8U\2\u031b\u031c\5\u00a8")
        buf.write("U\2\u031c\u031d\5\u00a8U\2\u031d\u031f\3\2\2\2\u031e\u0319")
        buf.write("\3\2\2\2\u031e\u031f\3\2\2\2\u031f\u0320\3\2\2\2\u0320")
        buf.write("\u0321\7\u00a3\2\2\u0321\u0324\7\u00a3\2\2\u0322\u0323")
        buf.write("\7\u00a3\2\2\u0323\u0325\7\u00a3\2\2\u0324\u0322\3\2\2")
        buf.write("\2\u0324\u0325\3\2\2\2\u0325Y\3\2\2\2\u0326\u0328\5\\")
        buf.write("/\2\u0327\u0326\3\2\2\2\u0328\u032b\3\2\2\2\u0329\u0327")
        buf.write("\3\2\2\2\u0329\u032a\3\2\2\2\u032a\u034a\3\2\2\2\u032b")
        buf.write("\u0329\3\2\2\2\u032c\u032d\7\n\2\2\u032d\u034a\7\u00a5")
        buf.write("\2\2\u032e\u032f\7<\2\2\u032f\u0330\7\u00a1\2\2\u0330")
        buf.write("\u0331\7\u00a1\2\2\u0331\u0332\7\u00a3\2\2\u0332\u0333")
        buf.write("\7\u00a3\2\2\u0333\u034a\7\u00a3\2\2\u0334\u0335\7\'\2")
        buf.write("\2\u0335\u034a\7\u00a3\2\2\u0336\u0337\7\17\2\2\u0337")
        buf.write("\u034a\7\u00a1\2\2\u0338\u0339\7C\2\2\u0339\u034a\7\u00a3")
        buf.write("\2\2\u033a\u033b\7D\2\2\u033b\u034a\7\u00a3\2\2\u033c")
        buf.write("\u033d\7\20\2\2\u033d\u034a\7A\2\2\u033e\u033f\7\22\2")
        buf.write("\2\u033f\u0340\7\23\2\2\u0340\u034a\7\u00a3\2\2\u0341")
        buf.write("\u0343\5^\60\2\u0342\u0341\3\2\2\2\u0343\u0346\3\2\2\2")
        buf.write("\u0344\u0342\3\2\2\2\u0344\u0345\3\2\2\2\u0345\u034a\3")
        buf.write("\2\2\2\u0346\u0344\3\2\2\2\u0347\u034a\7\24\2\2\u0348")
        buf.write("\u034a\7>\2\2\u0349\u0329\3\2\2\2\u0349\u032c\3\2\2\2")
        buf.write("\u0349\u032e\3\2\2\2\u0349\u0334\3\2\2\2\u0349\u0336\3")
        buf.write("\2\2\2\u0349\u0338\3\2\2\2\u0349\u033a\3\2\2\2\u0349\u033c")
        buf.write("\3\2\2\2\u0349\u033e\3\2\2\2\u0349\u0344\3\2\2\2\u0349")
        buf.write("\u0347\3\2\2\2\u0349\u0348\3\2\2\2\u034a[\3\2\2\2\u034b")
        buf.write("\u034c\7\5\2\2\u034c\u034d\5\u00a8U\2\u034d\u034e\5\u00a8")
        buf.write("U\2\u034e\u034f\5\u00a8U\2\u034f\u0350\5\u00a8U\2\u0350")
        buf.write("\u0351\5\u00a8U\2\u0351\u0352\7\u00a3\2\2\u0352\u0353")
        buf.write("\7\u00a3\2\2\u0353]\3\2\2\2\u0354\u0355\7E\2\2\u0355\u0356")
        buf.write("\5\u00a8U\2\u0356\u0357\7\u00a3\2\2\u0357\u0358\7\u00a3")
        buf.write("\2\2\u0358_\3\2\2\2\u0359\u035b\5b\62\2\u035a\u0359\3")
        buf.write("\2\2\2\u035b\u035e\3\2\2\2\u035c\u035a\3\2\2\2\u035c\u035d")
        buf.write("\3\2\2\2\u035d\u03a7\3\2\2\2\u035e\u035c\3\2\2\2\u035f")
        buf.write("\u0361\5d\63\2\u0360\u035f\3\2\2\2\u0361\u0364\3\2\2\2")
        buf.write("\u0362\u0360\3\2\2\2\u0362\u0363\3\2\2\2\u0363\u03a7\3")
        buf.write("\2\2\2\u0364\u0362\3\2\2\2\u0365\u0367\5f\64\2\u0366\u0365")
        buf.write("\3\2\2\2\u0367\u036a\3\2\2\2\u0368\u0366\3\2\2\2\u0368")
        buf.write("\u0369\3\2\2\2\u0369\u03a7\3\2\2\2\u036a\u0368\3\2\2\2")
        buf.write("\u036b\u036d\5h\65\2\u036c\u036b\3\2\2\2\u036d\u0370\3")
        buf.write("\2\2\2\u036e\u036c\3\2\2\2\u036e\u036f\3\2\2\2\u036f\u03a7")
        buf.write("\3\2\2\2\u0370\u036e\3\2\2\2\u0371\u0373\5j\66\2\u0372")
        buf.write("\u0371\3\2\2\2\u0373\u0376\3\2\2\2\u0374\u0372\3\2\2\2")
        buf.write("\u0374\u0375\3\2\2\2\u0375\u03a7\3\2\2\2\u0376\u0374\3")
        buf.write("\2\2\2\u0377\u0379\5l\67\2\u0378\u0377\3\2\2\2\u0379\u037c")
        buf.write("\3\2\2\2\u037a\u0378\3\2\2\2\u037a\u037b\3\2\2\2\u037b")
        buf.write("\u03a7\3\2\2\2\u037c\u037a\3\2\2\2\u037d\u037f\5n8\2\u037e")
        buf.write("\u037d\3\2\2\2\u037f\u0382\3\2\2\2\u0380\u037e\3\2\2\2")
        buf.write("\u0380\u0381\3\2\2\2\u0381\u03a7\3\2\2\2\u0382\u0380\3")
        buf.write("\2\2\2\u0383\u0385\5p9\2\u0384\u0383\3\2\2\2\u0385\u0388")
        buf.write("\3\2\2\2\u0386\u0384\3\2\2\2\u0386\u0387\3\2\2\2\u0387")
        buf.write("\u03a7\3\2\2\2\u0388\u0386\3\2\2\2\u0389\u038b\5r:\2\u038a")
        buf.write("\u0389\3\2\2\2\u038b\u038e\3\2\2\2\u038c\u038a\3\2\2\2")
        buf.write("\u038c\u038d\3\2\2\2\u038d\u03a7\3\2\2\2\u038e\u038c\3")
        buf.write("\2\2\2\u038f\u0390\7\n\2\2\u0390\u03a7\7\u00a5\2\2\u0391")
        buf.write("\u0392\7N\2\2\u0392\u03a7\7\u00a3\2\2\u0393\u0394\7@\2")
        buf.write("\2\u0394\u03a7\7\u00a1\2\2\u0395\u0396\7\'\2\2\u0396\u0398")
        buf.write("\7\u00a3\2\2\u0397\u0399\7\u00a3\2\2\u0398\u0397\3\2\2")
        buf.write("\2\u0398\u0399\3\2\2\2\u0399\u03a7\3\2\2\2\u039a\u039b")
        buf.write("\7\20\2\2\u039b\u03a7\7A\2\2\u039c\u039d\7\22\2\2\u039d")
        buf.write("\u039e\7\23\2\2\u039e\u03a2\7\u00a3\2\2\u039f\u03a3\7")
        buf.write("|\2\2\u03a0\u03a1\7\n\2\2\u03a1\u03a3\7\u00a5\2\2\u03a2")
        buf.write("\u039f\3\2\2\2\u03a2\u03a0\3\2\2\2\u03a3\u03a4\3\2\2\2")
        buf.write("\u03a4\u03a7\7\u00a5\2\2\u03a5\u03a7\7\24\2\2\u03a6\u035c")
        buf.write("\3\2\2\2\u03a6\u0362\3\2\2\2\u03a6\u0368\3\2\2\2\u03a6")
        buf.write("\u036e\3\2\2\2\u03a6\u0374\3\2\2\2\u03a6\u037a\3\2\2\2")
        buf.write("\u03a6\u0380\3\2\2\2\u03a6\u0386\3\2\2\2\u03a6\u038c\3")
        buf.write("\2\2\2\u03a6\u038f\3\2\2\2\u03a6\u0391\3\2\2\2\u03a6\u0393")
        buf.write("\3\2\2\2\u03a6\u0395\3\2\2\2\u03a6\u039a\3\2\2\2\u03a6")
        buf.write("\u039c\3\2\2\2\u03a6\u03a5\3\2\2\2\u03a7a\3\2\2\2\u03a8")
        buf.write("\u03a9\7G\2\2\u03a9\u03ab\5\u00a8U\2\u03aa\u03ac\5\u00a8")
        buf.write("U\2\u03ab\u03aa\3\2\2\2\u03ab\u03ac\3\2\2\2\u03ac\u03ad")
        buf.write("\3\2\2\2\u03ad\u03af\7\u00a3\2\2\u03ae\u03b0\7\u00a3\2")
        buf.write("\2\u03af\u03ae\3\2\2\2\u03af\u03b0\3\2\2\2\u03b0c\3\2")
        buf.write("\2\2\u03b1\u03b2\7E\2\2\u03b2\u03b3\5\u00a8U\2\u03b3\u03b4")
        buf.write("\7\u00a3\2\2\u03b4e\3\2\2\2\u03b5\u03b6\7\64\2\2\u03b6")
        buf.write("\u03b7\5\u00a8U\2\u03b7\u03b8\5\u00a8U\2\u03b8\u03b9\5")
        buf.write("\u00a8U\2\u03b9\u03bb\7\u00a5\2\2\u03ba\u03bc\7\u00a2")
        buf.write("\2\2\u03bb\u03ba\3\2\2\2\u03bb\u03bc\3\2\2\2\u03bc\u03bd")
        buf.write("\3\2\2\2\u03bd\u03be\7\u00a5\2\2\u03beg\3\2\2\2\u03bf")
        buf.write("\u03c0\7H\2\2\u03c0\u03c1\5\u00a8U\2\u03c1i\3\2\2\2\u03c2")
        buf.write("\u03c3\7I\2\2\u03c3\u03c4\5\u00a8U\2\u03c4k\3\2\2\2\u03c5")
        buf.write("\u03c6\7J\2\2\u03c6\u03c7\5\u00a8U\2\u03c7m\3\2\2\2\u03c8")
        buf.write("\u03c9\7K\2\2\u03c9\u03ca\5\u00a8U\2\u03cao\3\2\2\2\u03cb")
        buf.write("\u03cc\7L\2\2\u03cc\u03cd\7\u00a5\2\2\u03cd\u03ce\5\u00a8")
        buf.write("U\2\u03ce\u03cf\5\u00a8U\2\u03cf\u03d0\5\u00a8U\2\u03d0")
        buf.write("\u03d1\5\u00a8U\2\u03d1\u03d3\5\u00a8U\2\u03d2\u03d4\5")
        buf.write("\u00a8U\2\u03d3\u03d2\3\2\2\2\u03d3\u03d4\3\2\2\2\u03d4")
        buf.write("q\3\2\2\2\u03d5\u03d6\7M\2\2\u03d6\u03d7\5\u00a8U\2\u03d7")
        buf.write("s\3\2\2\2\u03d8\u03da\5v<\2\u03d9\u03d8\3\2\2\2\u03da")
        buf.write("\u03dd\3\2\2\2\u03db\u03d9\3\2\2\2\u03db\u03dc\3\2\2\2")
        buf.write("\u03dc\u043b\3\2\2\2\u03dd\u03db\3\2\2\2\u03de\u03df\7")
        buf.write("\n\2\2\u03df\u043b\7\u00a5\2\2\u03e0\u03e1\7\36\2\2\u03e1")
        buf.write("\u043b\7\u00a3\2\2\u03e2\u03e3\7\'\2\2\u03e3\u043b\7\u00a3")
        buf.write("\2\2\u03e4\u03e5\7Q\2\2\u03e5\u03e6\7\u00a3\2\2\u03e6")
        buf.write("\u03e7\7\u00a3\2\2\u03e7\u03eb\7\u00a3\2\2\u03e8\u03e9")
        buf.write("\7\u00a3\2\2\u03e9\u03ea\7\u00a3\2\2\u03ea\u03ec\7\u00a3")
        buf.write("\2\2\u03eb\u03e8\3\2\2\2\u03eb\u03ec\3\2\2\2\u03ec\u03f0")
        buf.write("\3\2\2\2\u03ed\u03ee\7\u00a3\2\2\u03ee\u03ef\7\u00a3\2")
        buf.write("\2\u03ef\u03f1\7\u00a3\2\2\u03f0\u03ed\3\2\2\2\u03f0\u03f1")
        buf.write("\3\2\2\2\u03f1\u03f5\3\2\2\2\u03f2\u03f3\7\u00a3\2\2\u03f3")
        buf.write("\u03f4\7\u00a3\2\2\u03f4\u03f6\7\u00a3\2\2\u03f5\u03f2")
        buf.write("\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u043b\3\2\2\2\u03f7")
        buf.write("\u03f8\7\17\2\2\u03f8\u043b\7\u00a1\2\2\u03f9\u03fa\7")
        buf.write("R\2\2\u03fa\u03fb\7\u00a3\2\2\u03fb\u03fc\7\u00a3\2\2")
        buf.write("\u03fc\u0400\7\u00a3\2\2\u03fd\u03fe\7\u00a3\2\2\u03fe")
        buf.write("\u03ff\7\u00a3\2\2\u03ff\u0401\7\u00a3\2\2\u0400\u03fd")
        buf.write("\3\2\2\2\u0400\u0401\3\2\2\2\u0401\u0405\3\2\2\2\u0402")
        buf.write("\u0403\7\u00a3\2\2\u0403\u0404\7\u00a3\2\2\u0404\u0406")
        buf.write("\7\u00a3\2\2\u0405\u0402\3\2\2\2\u0405\u0406\3\2\2\2\u0406")
        buf.write("\u040a\3\2\2\2\u0407\u0408\7\u00a3\2\2\u0408\u0409\7\u00a3")
        buf.write("\2\2\u0409\u040b\7\u00a3\2\2\u040a\u0407\3\2\2\2\u040a")
        buf.write("\u040b\3\2\2\2\u040b\u043b\3\2\2\2\u040c\u040d\7\22\2")
        buf.write("\2\u040d\u040e\7\23\2\2\u040e\u0412\7\u00a3\2\2\u040f")
        buf.write("\u0413\7|\2\2\u0410\u0411\7\n\2\2\u0411\u0413\7\u00a5")
        buf.write("\2\2\u0412\u040f\3\2\2\2\u0412\u0410\3\2\2\2\u0413\u043b")
        buf.write("\3\2\2\2\u0414\u0415\7S\2\2\u0415\u0416\7\u00a3\2\2\u0416")
        buf.write("\u0417\7\u00a3\2\2\u0417\u041b\7\u00a3\2\2\u0418\u0419")
        buf.write("\7\u00a3\2\2\u0419\u041a\7\u00a3\2\2\u041a\u041c\7\u00a3")
        buf.write("\2\2\u041b\u0418\3\2\2\2\u041b\u041c\3\2\2\2\u041c\u0420")
        buf.write("\3\2\2\2\u041d\u041e\7\u00a3\2\2\u041e\u041f\7\u00a3\2")
        buf.write("\2\u041f\u0421\7\u00a3\2\2\u0420\u041d\3\2\2\2\u0420\u0421")
        buf.write("\3\2\2\2\u0421\u0425\3\2\2\2\u0422\u0423\7\u00a3\2\2\u0423")
        buf.write("\u0424\7\u00a3\2\2\u0424\u0426\7\u00a3\2\2\u0425\u0422")
        buf.write("\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u043b\3\2\2\2\u0427")
        buf.write("\u043b\7\24\2\2\u0428\u0429\7\26\2\2\u0429\u043b\7\u00a3")
        buf.write("\2\2\u042a\u042b\7T\2\2\u042b\u043b\7V\2\2\u042c\u042d")
        buf.write("\7=\2\2\u042d\u042e\7W\2\2\u042e\u0430\7\u00a3\2\2\u042f")
        buf.write("\u0431\7\u00a3\2\2\u0430\u042f\3\2\2\2\u0430\u0431\3\2")
        buf.write("\2\2\u0431\u0433\3\2\2\2\u0432\u0434\7\u00a3\2\2\u0433")
        buf.write("\u0432\3\2\2\2\u0433\u0434\3\2\2\2\u0434\u0436\3\2\2\2")
        buf.write("\u0435\u0437\7\u00a3\2\2\u0436\u0435\3\2\2\2\u0436\u0437")
        buf.write("\3\2\2\2\u0437\u043b\3\2\2\2\u0438\u043b\7U\2\2\u0439")
        buf.write("\u043b\7>\2\2\u043a\u03db\3\2\2\2\u043a\u03de\3\2\2\2")
        buf.write("\u043a\u03e0\3\2\2\2\u043a\u03e2\3\2\2\2\u043a\u03e4\3")
        buf.write("\2\2\2\u043a\u03f7\3\2\2\2\u043a\u03f9\3\2\2\2\u043a\u040c")
        buf.write("\3\2\2\2\u043a\u0414\3\2\2\2\u043a\u0427\3\2\2\2\u043a")
        buf.write("\u0428\3\2\2\2\u043a\u042a\3\2\2\2\u043a\u042c\3\2\2\2")
        buf.write("\u043a\u0438\3\2\2\2\u043a\u0439\3\2\2\2\u043bu\3\2\2")
        buf.write("\2\u043c\u043d\7\5\2\2\u043d\u043e\5\u00a8U\2\u043e\u043f")
        buf.write("\5\u00a8U\2\u043f\u0440\5\u00a8U\2\u0440\u0446\5\u00a8")
        buf.write("U\2\u0441\u0442\5\u00a8U\2\u0442\u0443\5\u00a8U\2\u0443")
        buf.write("\u0444\5\u00a8U\2\u0444\u0445\5\u00a8U\2\u0445\u0447\3")
        buf.write("\2\2\2\u0446\u0441\3\2\2\2\u0446\u0447\3\2\2\2\u0447\u044d")
        buf.write("\3\2\2\2\u0448\u0449\5\u00a8U\2\u0449\u044a\5\u00a8U\2")
        buf.write("\u044a\u044b\5\u00a8U\2\u044b\u044c\5\u00a8U\2\u044c\u044e")
        buf.write("\3\2\2\2\u044d\u0448\3\2\2\2\u044d\u044e\3\2\2\2\u044e")
        buf.write("\u0454\3\2\2\2\u044f\u0450\5\u00a8U\2\u0450\u0451\5\u00a8")
        buf.write("U\2\u0451\u0452\5\u00a8U\2\u0452\u0453\5\u00a8U\2\u0453")
        buf.write("\u0455\3\2\2\2\u0454\u044f\3\2\2\2\u0454\u0455\3\2\2\2")
        buf.write("\u0455w\3\2\2\2\u0456\u0457\7\26\2\2\u0457\u0460\7\u00a3")
        buf.write("\2\2\u0458\u0459\7\5\2\2\u0459\u045a\5\u00a8U\2\u045a")
        buf.write("\u045b\7\u00a3\2\2\u045b\u045c\7\u00a3\2\2\u045c\u0460")
        buf.write("\3\2\2\2\u045d\u0460\7\22\2\2\u045e\u0460\7\24\2\2\u045f")
        buf.write("\u0456\3\2\2\2\u045f\u0458\3\2\2\2\u045f\u045d\3\2\2\2")
        buf.write("\u045f\u045e\3\2\2\2\u0460y\3\2\2\2\u0461\u0463\5|?\2")
        buf.write("\u0462\u0461\3\2\2\2\u0463\u0466\3\2\2\2\u0464\u0462\3")
        buf.write("\2\2\2\u0464\u0465\3\2\2\2\u0465\u047c\3\2\2\2\u0466\u0464")
        buf.write("\3\2\2\2\u0467\u0468\7\n\2\2\u0468\u047c\7\u00a5\2\2\u0469")
        buf.write("\u046a\7&\2\2\u046a\u046b\7\u00a3\2\2\u046b\u046c\7\u00a3")
        buf.write("\2\2\u046c\u046d\7\u00a3\2\2\u046d\u046e\7\u00a3\2\2\u046e")
        buf.write("\u047c\7\u00a3\2\2\u046f\u0470\7\'\2\2\u0470\u047c\7\u00a3")
        buf.write("\2\2\u0471\u0472\7\17\2\2\u0472\u047c\7\u00a1\2\2\u0473")
        buf.write("\u0474\7\20\2\2\u0474\u047c\7(\2\2\u0475\u0476\7\22\2")
        buf.write("\2\u0476\u0477\7\23\2\2\u0477\u047c\7\u00a3\2\2\u0478")
        buf.write("\u047c\7\24\2\2\u0479\u047a\7+\2\2\u047a\u047c\7Z\2\2")
        buf.write("\u047b\u0464\3\2\2\2\u047b\u0467\3\2\2\2\u047b\u0469\3")
        buf.write("\2\2\2\u047b\u046f\3\2\2\2\u047b\u0471\3\2\2\2\u047b\u0473")
        buf.write("\3\2\2\2\u047b\u0475\3\2\2\2\u047b\u0478\3\2\2\2\u047b")
        buf.write("\u0479\3\2\2\2\u047c{\3\2\2\2\u047d\u047e\7\5\2\2\u047e")
        buf.write("\u047f\5\u00a8U\2\u047f\u0480\5\u00a8U\2\u0480\u0481\5")
        buf.write("\u00a8U\2\u0481\u0482\5\u00a8U\2\u0482\u0483\5\u00a8U")
        buf.write("\2\u0483\u0484\5\u00a8U\2\u0484\u0485\7\u00a3\2\2\u0485")
        buf.write("\u0486\7\u00a3\2\2\u0486}\3\2\2\2\u0487\u0489\5\u0080")
        buf.write("A\2\u0488\u0487\3\2\2\2\u0489\u048c\3\2\2\2\u048a\u0488")
        buf.write("\3\2\2\2\u048a\u048b\3\2\2\2\u048b\u04c2\3\2\2\2\u048c")
        buf.write("\u048a\3\2\2\2\u048d\u048e\7\n\2\2\u048e\u04c2\7\u00a5")
        buf.write("\2\2\u048f\u0490\7\36\2\2\u0490\u04c2\7\u00a3\2\2\u0491")
        buf.write("\u0492\7\\\2\2\u0492\u04c2\7\u00a3\2\2\u0493\u0494\7\'")
        buf.write("\2\2\u0494\u04c2\7\u00a3\2\2\u0495\u0496\7Q\2\2\u0496")
        buf.write("\u0497\7\u00a3\2\2\u0497\u0498\7\u00a3\2\2\u0498\u0499")
        buf.write("\7\u00a3\2\2\u0499\u049a\7\u00a3\2\2\u049a\u049b\7\u00a3")
        buf.write("\2\2\u049b\u049c\7\u00a3\2\2\u049c\u04c2\7\u00a3\2\2\u049d")
        buf.write("\u049e\7]\2\2\u049e\u04c2\7\u00a1\2\2\u049f\u04a0\7^\2")
        buf.write("\2\u04a0\u04a1\7\u00a3\2\2\u04a1\u04a2\7\u00a3\2\2\u04a2")
        buf.write("\u04a3\7\u00a3\2\2\u04a3\u04a4\7\u00a3\2\2\u04a4\u04a5")
        buf.write("\7\u00a3\2\2\u04a5\u04a6\7\u00a3\2\2\u04a6\u04a7\7\u00a3")
        buf.write("\2\2\u04a7\u04c2\7\u00a3\2\2\u04a8\u04a9\7\17\2\2\u04a9")
        buf.write("\u04c2\7\u00a1\2\2\u04aa\u04ab\7\22\2\2\u04ab\u04ac\7")
        buf.write("\23\2\2\u04ac\u04b0\7\u00a3\2\2\u04ad\u04b1\7|\2\2\u04ae")
        buf.write("\u04af\7\n\2\2\u04af\u04b1\7\u00a5\2\2\u04b0\u04ad\3\2")
        buf.write("\2\2\u04b0\u04ae\3\2\2\2\u04b1\u04c2\3\2\2\2\u04b2\u04b3")
        buf.write("\7S\2\2\u04b3\u04b4\7\u00a3\2\2\u04b4\u04b5\7\u00a3\2")
        buf.write("\2\u04b5\u04b6\7\u00a3\2\2\u04b6\u04b7\7\u00a3\2\2\u04b7")
        buf.write("\u04b8\7\u00a3\2\2\u04b8\u04b9\7\u00a3\2\2\u04b9\u04c2")
        buf.write("\7\u00a3\2\2\u04ba\u04c2\7\24\2\2\u04bb\u04bc\7\u008c")
        buf.write("\2\2\u04bc\u04c2\7\u00a1\2\2\u04bd\u04be\7=\2\2\u04be")
        buf.write("\u04bf\7\u00a3\2\2\u04bf\u04c2\7\u00a3\2\2\u04c0\u04c2")
        buf.write("\7>\2\2\u04c1\u048a\3\2\2\2\u04c1\u048d\3\2\2\2\u04c1")
        buf.write("\u048f\3\2\2\2\u04c1\u0491\3\2\2\2\u04c1\u0493\3\2\2\2")
        buf.write("\u04c1\u0495\3\2\2\2\u04c1\u049d\3\2\2\2\u04c1\u049f\3")
        buf.write("\2\2\2\u04c1\u04a8\3\2\2\2\u04c1\u04aa\3\2\2\2\u04c1\u04b2")
        buf.write("\3\2\2\2\u04c1\u04ba\3\2\2\2\u04c1\u04bb\3\2\2\2\u04c1")
        buf.write("\u04bd\3\2\2\2\u04c1\u04c0\3\2\2\2\u04c2\177\3\2\2\2\u04c3")
        buf.write("\u04c4\7\5\2\2\u04c4\u04c5\5\u00a8U\2\u04c5\u04c6\5\u00a8")
        buf.write("U\2\u04c6\u04c7\5\u00a8U\2\u04c7\u04c8\5\u00a8U\2\u04c8")
        buf.write("\u0081\3\2\2\2\u04c9\u04cb\5\u0084C\2\u04ca\u04c9\3\2")
        buf.write("\2\2\u04cb\u04ce\3\2\2\2\u04cc\u04ca\3\2\2\2\u04cc\u04cd")
        buf.write("\3\2\2\2\u04cd\u04e8\3\2\2\2\u04ce\u04cc\3\2\2\2\u04cf")
        buf.write("\u04d0\7\n\2\2\u04d0\u04e8\7\u00a5\2\2\u04d1\u04d2\7\26")
        buf.write("\2\2\u04d2\u04e8\7\u00a3\2\2\u04d3\u04d4\7+\2\2\u04d4")
        buf.write("\u04e8\7a\2\2\u04d5\u04d6\7&\2\2\u04d6\u04d7\7\u00a3\2")
        buf.write("\2\u04d7\u04d8\7\u00a3\2\2\u04d8\u04e8\7\u00a3\2\2\u04d9")
        buf.write("\u04da\7`\2\2\u04da\u04db\7\u00a3\2\2\u04db\u04dc\7\u00a3")
        buf.write("\2\2\u04dc\u04e8\7\u00a3\2\2\u04dd\u04de\7\'\2\2\u04de")
        buf.write("\u04e8\7\u00a3\2\2\u04df\u04e0\7\17\2\2\u04e0\u04e8\7")
        buf.write("\u00a1\2\2\u04e1\u04e2\7\20\2\2\u04e2\u04e8\7(\2\2\u04e3")
        buf.write("\u04e4\7\22\2\2\u04e4\u04e5\7\23\2\2\u04e5\u04e8\7\u00a3")
        buf.write("\2\2\u04e6\u04e8\7\24\2\2\u04e7\u04cc\3\2\2\2\u04e7\u04cf")
        buf.write("\3\2\2\2\u04e7\u04d1\3\2\2\2\u04e7\u04d3\3\2\2\2\u04e7")
        buf.write("\u04d5\3\2\2\2\u04e7\u04d9\3\2\2\2\u04e7\u04dd\3\2\2\2")
        buf.write("\u04e7\u04df\3\2\2\2\u04e7\u04e1\3\2\2\2\u04e7\u04e3\3")
        buf.write("\2\2\2\u04e7\u04e6\3\2\2\2\u04e8\u0083\3\2\2\2\u04e9\u04ea")
        buf.write("\7\5\2\2\u04ea\u04eb\5\u00a8U\2\u04eb\u04ec\5\u00a8U\2")
        buf.write("\u04ec\u04ed\5\u00a8U\2\u04ed\u04ee\5\u00a8U\2\u04ee\u04ef")
        buf.write("\5\u00a8U\2\u04ef\u04f0\5\u00a8U\2\u04f0\u04f1\5\u00a8")
        buf.write("U\2\u04f1\u04f2\7\u00a3\2\2\u04f2\u04f3\7\u00a3\2\2\u04f3")
        buf.write("\u04f4\7\u00a3\2\2\u04f4\u0085\3\2\2\2\u04f5\u04f7\5\u0084")
        buf.write("C\2\u04f6\u04f5\3\2\2\2\u04f7\u04fa\3\2\2\2\u04f8\u04f6")
        buf.write("\3\2\2\2\u04f8\u04f9\3\2\2\2\u04f9\u0513\3\2\2\2\u04fa")
        buf.write("\u04f8\3\2\2\2\u04fb\u04fc\7\n\2\2\u04fc\u0513\7\u00a5")
        buf.write("\2\2\u04fd\u04fe\7\26\2\2\u04fe\u0513\7\u00a3\2\2\u04ff")
        buf.write("\u0500\7&\2\2\u0500\u0501\7\u00a3\2\2\u0501\u0502\7\u00a3")
        buf.write("\2\2\u0502\u0513\7\u00a3\2\2\u0503\u0504\7`\2\2\u0504")
        buf.write("\u0505\7\u00a3\2\2\u0505\u0506\7\u00a3\2\2\u0506\u0507")
        buf.write("\7\u00a3\2\2\u0507\u0513\7\u00a3\2\2\u0508\u0509\7\'\2")
        buf.write("\2\u0509\u0513\7\u00a3\2\2\u050a\u050b\7\17\2\2\u050b")
        buf.write("\u0513\7\u00a1\2\2\u050c\u050d\7\20\2\2\u050d\u0513\7")
        buf.write("(\2\2\u050e\u050f\7\22\2\2\u050f\u0510\7\23\2\2\u0510")
        buf.write("\u0513\7\u00a3\2\2\u0511\u0513\7\24\2\2\u0512\u04f8\3")
        buf.write("\2\2\2\u0512\u04fb\3\2\2\2\u0512\u04fd\3\2\2\2\u0512\u04ff")
        buf.write("\3\2\2\2\u0512\u0503\3\2\2\2\u0512\u0508\3\2\2\2\u0512")
        buf.write("\u050a\3\2\2\2\u0512\u050c\3\2\2\2\u0512\u050e\3\2\2\2")
        buf.write("\u0512\u0511\3\2\2\2\u0513\u0087\3\2\2\2\u0514\u0516\5")
        buf.write("\u008aF\2\u0515\u0514\3\2\2\2\u0516\u0519\3\2\2\2\u0517")
        buf.write("\u0515\3\2\2\2\u0517\u0518\3\2\2\2\u0518\u052f\3\2\2\2")
        buf.write("\u0519\u0517\3\2\2\2\u051a\u051b\7\n\2\2\u051b\u052f\7")
        buf.write("\u00a5\2\2\u051c\u051d\7&\2\2\u051d\u051e\7\u00a3\2\2")
        buf.write("\u051e\u051f\7\u00a3\2\2\u051f\u0520\7\u00a3\2\2\u0520")
        buf.write("\u0521\7\u00a3\2\2\u0521\u0522\7\u00a3\2\2\u0522\u0523")
        buf.write("\7\u00a3\2\2\u0523\u052f\7\u00a3\2\2\u0524\u0525\7\'\2")
        buf.write("\2\u0525\u052f\7\u00a3\2\2\u0526\u0527\7\17\2\2\u0527")
        buf.write("\u052f\7\u00a1\2\2\u0528\u0529\7\20\2\2\u0529\u052f\7")
        buf.write("(\2\2\u052a\u052b\7\22\2\2\u052b\u052c\7\23\2\2\u052c")
        buf.write("\u052f\7\u00a3\2\2\u052d\u052f\7\24\2\2\u052e\u0517\3")
        buf.write("\2\2\2\u052e\u051a\3\2\2\2\u052e\u051c\3\2\2\2\u052e\u0524")
        buf.write("\3\2\2\2\u052e\u0526\3\2\2\2\u052e\u0528\3\2\2\2\u052e")
        buf.write("\u052a\3\2\2\2\u052e\u052d\3\2\2\2\u052f\u0089\3\2\2\2")
        buf.write("\u0530\u0531\7\5\2\2\u0531\u0532\5\u00a8U\2\u0532\u0533")
        buf.write("\5\u00a8U\2\u0533\u0534\5\u00a8U\2\u0534\u0535\5\u00a8")
        buf.write("U\2\u0535\u0536\5\u00a8U\2\u0536\u0537\5\u00a8U\2\u0537")
        buf.write("\u0538\5\u00a8U\2\u0538\u0539\5\u00a8U\2\u0539\u053a\7")
        buf.write("\u00a3\2\2\u053a\u053b\7\u00a3\2\2\u053b\u008b\3\2\2\2")
        buf.write("\u053c\u053e\5\u008eH\2\u053d\u053c\3\2\2\2\u053e\u0541")
        buf.write("\3\2\2\2\u053f\u053d\3\2\2\2\u053f\u0540\3\2\2\2\u0540")
        buf.write("\u0561\3\2\2\2\u0541\u053f\3\2\2\2\u0542\u0543\7\n\2\2")
        buf.write("\u0543\u0561\7\u00a5\2\2\u0544\u0545\7e\2\2\u0545\u0561")
        buf.write("\7\u00a5\2\2\u0546\u0547\7<\2\2\u0547\u0548\7\u00a1\2")
        buf.write("\2\u0548\u0549\7\u00a1\2\2\u0549\u0561\7\u00a3\2\2\u054a")
        buf.write("\u054b\7N\2\2\u054b\u0561\7\u00a3\2\2\u054c\u054d\7\'")
        buf.write("\2\2\u054d\u0561\7\u00a3\2\2\u054e\u054f\7\17\2\2\u054f")
        buf.write("\u0561\7\u00a1\2\2\u0550\u0551\7\20\2\2\u0551\u0561\7")
        buf.write("(\2\2\u0552\u0553\7\22\2\2\u0553\u0554\7\23\2\2\u0554")
        buf.write("\u0558\7\u00a3\2\2\u0555\u0559\7|\2\2\u0556\u0557\7\n")
        buf.write("\2\2\u0557\u0559\7\u00a5\2\2\u0558\u0555\3\2\2\2\u0558")
        buf.write("\u0556\3\2\2\2\u0559\u0561\3\2\2\2\u055a\u0561\7\24\2")
        buf.write("\2\u055b\u055c\7=\2\2\u055c\u055d\7f\2\2\u055d\u055e\7")
        buf.write("\u00a1\2\2\u055e\u0561\7\u00a1\2\2\u055f\u0561\7>\2\2")
        buf.write("\u0560\u053f\3\2\2\2\u0560\u0542\3\2\2\2\u0560\u0544\3")
        buf.write("\2\2\2\u0560\u0546\3\2\2\2\u0560\u054a\3\2\2\2\u0560\u054c")
        buf.write("\3\2\2\2\u0560\u054e\3\2\2\2\u0560\u0550\3\2\2\2\u0560")
        buf.write("\u0552\3\2\2\2\u0560\u055a\3\2\2\2\u0560\u055b\3\2\2\2")
        buf.write("\u0560\u055f\3\2\2\2\u0561\u008d\3\2\2\2\u0562\u0563\7")
        buf.write("\5\2\2\u0563\u0564\5\u00a8U\2\u0564\u0565\5\u00a8U\2\u0565")
        buf.write("\u0566\5\u00a8U\2\u0566\u0567\5\u00a8U\2\u0567\u0568\5")
        buf.write("\u00a8U\2\u0568\u0569\5\u00a8U\2\u0569\u056a\5\u00a8U")
        buf.write("\2\u056a\u056b\5\u00a8U\2\u056b\u056c\5\u00a8U\2\u056c")
        buf.write("\u056d\5\u00a8U\2\u056d\u056f\5\u00a8U\2\u056e\u0570\5")
        buf.write("\u00a8U\2\u056f\u056e\3\2\2\2\u056f\u0570\3\2\2\2\u0570")
        buf.write("\u008f\3\2\2\2\u0571\u0573\5\u0092J\2\u0572\u0571\3\2")
        buf.write("\2\2\u0573\u0576\3\2\2\2\u0574\u0572\3\2\2\2\u0574\u0575")
        buf.write("\3\2\2\2\u0575\u059d\3\2\2\2\u0576\u0574\3\2\2\2\u0577")
        buf.write("\u0578\7\n\2\2\u0578\u0579\7\u00ad\2\2\u0579\u059d\7\u00a5")
        buf.write("\2\2\u057a\u057b\7\'\2\2\u057b\u057c\7\u00ad\2\2\u057c")
        buf.write("\u057d\7\u00a5\2\2\u057d\u059d\7\u00a3\2\2\u057e\u057f")
        buf.write("\7\17\2\2\u057f\u0580\7\u00ad\2\2\u0580\u059d\7\u00a1")
        buf.write("\2\2\u0581\u0582\7\20\2\2\u0582\u0583\7\u00ad\2\2\u0583")
        buf.write("\u0584\7\u00a5\2\2\u0584\u059d\7(\2\2\u0585\u0586\7h\2")
        buf.write("\2\u0586\u0587\7\u00ad\2\2\u0587\u0588\7\u00a5\2\2\u0588")
        buf.write("\u059d\7\u00a3\2\2\u0589\u058a\7i\2\2\u058a\u058b\7\u00ad")
        buf.write("\2\2\u058b\u058c\7\u00a5\2\2\u058c\u059d\7\u00a3\2\2\u058d")
        buf.write("\u058e\7j\2\2\u058e\u058f\7\u00ad\2\2\u058f\u0590\7\u00a5")
        buf.write("\2\2\u0590\u0591\7\u00a3\2\2\u0591\u059d\7\u00a3\2\2\u0592")
        buf.write("\u0593\7\22\2\2\u0593\u0594\7\23\2\2\u0594\u0598\7\u00a3")
        buf.write("\2\2\u0595\u0599\7|\2\2\u0596\u0597\7\n\2\2\u0597\u0599")
        buf.write("\7\u00a5\2\2\u0598\u0595\3\2\2\2\u0598\u0596\3\2\2\2\u0599")
        buf.write("\u059d\3\2\2\2\u059a\u059d\7\24\2\2\u059b\u059d\7k\2\2")
        buf.write("\u059c\u0574\3\2\2\2\u059c\u0577\3\2\2\2\u059c\u057a\3")
        buf.write("\2\2\2\u059c\u057e\3\2\2\2\u059c\u0581\3\2\2\2\u059c\u0585")
        buf.write("\3\2\2\2\u059c\u0589\3\2\2\2\u059c\u058d\3\2\2\2\u059c")
        buf.write("\u0592\3\2\2\2\u059c\u059a\3\2\2\2\u059c\u059b\3\2\2\2")
        buf.write("\u059d\u0091\3\2\2\2\u059e\u059f\7\5\2\2\u059f\u05a0\5")
        buf.write("\u00a8U\2\u05a0\u05a1\5\u00a8U\2\u05a1\u05a2\7\u00a3\2")
        buf.write("\2\u05a2\u05a3\7\u00a3\2\2\u05a3\u0093\3\2\2\2\u05a4\u05a6")
        buf.write("\5\u0096L\2\u05a5\u05a4\3\2\2\2\u05a6\u05a9\3\2\2\2\u05a7")
        buf.write("\u05a5\3\2\2\2\u05a7\u05a8\3\2\2\2\u05a8\u05cc\3\2\2\2")
        buf.write("\u05a9\u05a7\3\2\2\2\u05aa\u05ab\7\n\2\2\u05ab\u05cc\7")
        buf.write("\u00a5\2\2\u05ac\u05ad\7m\2\2\u05ad\u05cc\7\u00a1\2\2")
        buf.write("\u05ae\u05af\7&\2\2\u05af\u05b0\7\u00a3\2\2\u05b0\u05cc")
        buf.write("\7\u00a3\2\2\u05b1\u05b2\7\'\2\2\u05b2\u05cc\7\u00a3\2")
        buf.write("\2\u05b3\u05b4\7\17\2\2\u05b4\u05cc\7\u00a1\2\2\u05b5")
        buf.write("\u05b6\7\22\2\2\u05b6\u05b7\7\23\2\2\u05b7\u05bb\7\u00a3")
        buf.write("\2\2\u05b8\u05bc\7|\2\2\u05b9\u05ba\7\n\2\2\u05ba\u05bc")
        buf.write("\7\u00a5\2\2\u05bb\u05b8\3\2\2\2\u05bb\u05b9\3\2\2\2\u05bc")
        buf.write("\u05cc\3\2\2\2\u05bd\u05cc\7\24\2\2\u05be\u05bf\7n\2\2")
        buf.write("\u05bf\u05cc\7\u00a5\2\2\u05c0\u05c1\7o\2\2\u05c1\u05c2")
        buf.write("\7\u00a3\2\2\u05c2\u05cc\7\u00a1\2\2\u05c3\u05cc\7p\2")
        buf.write("\2\u05c4\u05cc\7q\2\2\u05c5\u05cc\7r\2\2\u05c6\u05cc\7")
        buf.write("s\2\2\u05c7\u05cc\7t\2\2\u05c8\u05cc\7u\2\2\u05c9\u05ca")
        buf.write("\7v\2\2\u05ca\u05cc\7\u00a1\2\2\u05cb\u05a7\3\2\2\2\u05cb")
        buf.write("\u05aa\3\2\2\2\u05cb\u05ac\3\2\2\2\u05cb\u05ae\3\2\2\2")
        buf.write("\u05cb\u05b1\3\2\2\2\u05cb\u05b3\3\2\2\2\u05cb\u05b5\3")
        buf.write("\2\2\2\u05cb\u05bd\3\2\2\2\u05cb\u05be\3\2\2\2\u05cb\u05c0")
        buf.write("\3\2\2\2\u05cb\u05c3\3\2\2\2\u05cb\u05c4\3\2\2\2\u05cb")
        buf.write("\u05c5\3\2\2\2\u05cb\u05c6\3\2\2\2\u05cb\u05c7\3\2\2\2")
        buf.write("\u05cb\u05c8\3\2\2\2\u05cb\u05c9\3\2\2\2\u05cc\u0095\3")
        buf.write("\2\2\2\u05cd\u05ce\7\5\2\2\u05ce\u05cf\5\u00a8U\2\u05cf")
        buf.write("\u05d0\5\u00a8U\2\u05d0\u05d1\5\u00a8U\2\u05d1\u05d2\5")
        buf.write("\u00a8U\2\u05d2\u05d3\5\u00a8U\2\u05d3\u05d4\7\u00a3\2")
        buf.write("\2\u05d4\u05d5\7\u00a3\2\2\u05d5\u0097\3\2\2\2\u05d6\u05d8")
        buf.write("\5\u009aN\2\u05d7\u05d6\3\2\2\2\u05d8\u05db\3\2\2\2\u05d9")
        buf.write("\u05d7\3\2\2\2\u05d9\u05da\3\2\2\2\u05da\u05f5\3\2\2\2")
        buf.write("\u05db\u05d9\3\2\2\2\u05dc\u05dd\7\n\2\2\u05dd\u05f5\7")
        buf.write("\u00a5\2\2\u05de\u05df\7m\2\2\u05df\u05f5\7\u00a1\2\2")
        buf.write("\u05e0\u05e1\7&\2\2\u05e1\u05e2\7\u00a3\2\2\u05e2\u05f5")
        buf.write("\7\u00a3\2\2\u05e3\u05e4\7\'\2\2\u05e4\u05f5\7\u00a3\2")
        buf.write("\2\u05e5\u05e6\7\17\2\2\u05e6\u05f5\7\u00a1\2\2\u05e7")
        buf.write("\u05f5\7p\2\2\u05e8\u05f5\7q\2\2\u05e9\u05f5\7o\2\2\u05ea")
        buf.write("\u05f5\7r\2\2\u05eb\u05f5\7s\2\2\u05ec\u05f5\7v\2\2\u05ed")
        buf.write("\u05ee\7\22\2\2\u05ee\u05f5\7\23\2\2\u05ef\u05f5\7\24")
        buf.write("\2\2\u05f0\u05f1\7n\2\2\u05f1\u05f5\7\u00a5\2\2\u05f2")
        buf.write("\u05f5\7t\2\2\u05f3\u05f5\7u\2\2\u05f4\u05d9\3\2\2\2\u05f4")
        buf.write("\u05dc\3\2\2\2\u05f4\u05de\3\2\2\2\u05f4\u05e0\3\2\2\2")
        buf.write("\u05f4\u05e3\3\2\2\2\u05f4\u05e5\3\2\2\2\u05f4\u05e7\3")
        buf.write("\2\2\2\u05f4\u05e8\3\2\2\2\u05f4\u05e9\3\2\2\2\u05f4\u05ea")
        buf.write("\3\2\2\2\u05f4\u05eb\3\2\2\2\u05f4\u05ec\3\2\2\2\u05f4")
        buf.write("\u05ed\3\2\2\2\u05f4\u05ef\3\2\2\2\u05f4\u05f0\3\2\2\2")
        buf.write("\u05f4\u05f2\3\2\2\2\u05f4\u05f3\3\2\2\2\u05f5\u0099\3")
        buf.write("\2\2\2\u05f6\u05f7\7\5\2\2\u05f7\u05f8\5\u00a8U\2\u05f8")
        buf.write("\u05f9\5\u00a8U\2\u05f9\u05fa\5\u00a8U\2\u05fa\u05fb\5")
        buf.write("\u00a8U\2\u05fb\u05fc\5\u00a8U\2\u05fc\u05fd\5\u00a8U")
        buf.write("\2\u05fd\u05fe\7\u00a3\2\2\u05fe\u05ff\7\u00a3\2\2\u05ff")
        buf.write("\u009b\3\2\2\2\u0600\u0602\5\u009eP\2\u0601\u0600\3\2")
        buf.write("\2\2\u0602\u0605\3\2\2\2\u0603\u0601\3\2\2\2\u0603\u0604")
        buf.write("\3\2\2\2\u0604\u0611\3\2\2\2\u0605\u0603\3\2\2\2\u0606")
        buf.write("\u0607\7\n\2\2\u0607\u0611\7\u00a5\2\2\u0608\u0609\7\'")
        buf.write("\2\2\u0609\u0611\7\u00a3\2\2\u060a\u060b\7\17\2\2\u060b")
        buf.write("\u0611\7\u00a1\2\2\u060c\u060d\7\22\2\2\u060d\u060e\7")
        buf.write("\23\2\2\u060e\u0611\7\u00a3\2\2\u060f\u0611\7\24\2\2\u0610")
        buf.write("\u0603\3\2\2\2\u0610\u0606\3\2\2\2\u0610\u0608\3\2\2\2")
        buf.write("\u0610\u060a\3\2\2\2\u0610\u060c\3\2\2\2\u0610\u060f\3")
        buf.write("\2\2\2\u0611\u009d\3\2\2\2\u0612\u0613\7\5\2\2\u0613\u0614")
        buf.write("\5\u00a8U\2\u0614\u0615\5\u00a8U\2\u0615\u0616\7\u00a3")
        buf.write("\2\2\u0616\u0617\7\u00a3\2\2\u0617\u0618\7\u00a3\2\2\u0618")
        buf.write("\u009f\3\2\2\2\u0619\u061b\5\u00a2R\2\u061a\u0619\3\2")
        buf.write("\2\2\u061b\u061e\3\2\2\2\u061c\u061a\3\2\2\2\u061c\u061d")
        buf.write("\3\2\2\2\u061d\u0630\3\2\2\2\u061e\u061c\3\2\2\2\u061f")
        buf.write("\u0620\7\n\2\2\u0620\u0630\7\u00a5\2\2\u0621\u0622\7z")
        buf.write("\2\2\u0622\u0630\7\u00a1\2\2\u0623\u0624\7&\2\2\u0624")
        buf.write("\u0630\7\u00a3\2\2\u0625\u0626\7\'\2\2\u0626\u0630\7\u00a3")
        buf.write("\2\2\u0627\u0628\7\17\2\2\u0628\u0630\7\u00a1\2\2\u0629")
        buf.write("\u062a\7\22\2\2\u062a\u062b\7\23\2\2\u062b\u0630\7\u00a3")
        buf.write("\2\2\u062c\u0630\7\24\2\2\u062d\u062e\7v\2\2\u062e\u0630")
        buf.write("\7\u00a1\2\2\u062f\u061c\3\2\2\2\u062f\u061f\3\2\2\2\u062f")
        buf.write("\u0621\3\2\2\2\u062f\u0623\3\2\2\2\u062f\u0625\3\2\2\2")
        buf.write("\u062f\u0627\3\2\2\2\u062f\u0629\3\2\2\2\u062f\u062c\3")
        buf.write("\2\2\2\u062f\u062d\3\2\2\2\u0630\u00a1\3\2\2\2\u0631\u0632")
        buf.write("\7\5\2\2\u0632\u0633\5\u00a8U\2\u0633\u0634\5\u00a8U\2")
        buf.write("\u0634\u0635\5\u00a8U\2\u0635\u0636\7\u00a3\2\2\u0636")
        buf.write("\u0637\7\u00a3\2\2\u0637\u00a3\3\2\2\2\u0638\u063a\5\u00a6")
        buf.write("T\2\u0639\u0638\3\2\2\2\u063a\u063d\3\2\2\2\u063b\u0639")
        buf.write("\3\2\2\2\u063b\u063c\3\2\2\2\u063c\u0649\3\2\2\2\u063d")
        buf.write("\u063b\3\2\2\2\u063e\u063f\7\n\2\2\u063f\u0649\7\u00a5")
        buf.write("\2\2\u0640\u0641\7\'\2\2\u0641\u0649\7\u00a3\2\2\u0642")
        buf.write("\u0643\7\17\2\2\u0643\u0649\7\u00a1\2\2\u0644\u0645\7")
        buf.write("\22\2\2\u0645\u0646\7\23\2\2\u0646\u0649\7\u00a3\2\2\u0647")
        buf.write("\u0649\7\24\2\2\u0648\u063b\3\2\2\2\u0648\u063e\3\2\2")
        buf.write("\2\u0648\u0640\3\2\2\2\u0648\u0642\3\2\2\2\u0648\u0644")
        buf.write("\3\2\2\2\u0648\u0647\3\2\2\2\u0649\u00a5\3\2\2\2\u064a")
        buf.write("\u064b\7\5\2\2\u064b\u064c\5\u00a8U\2\u064c\u064d\5\u00a8")
        buf.write("U\2\u064d\u064e\5\u00a8U\2\u064e\u00a7\3\2\2\2\u064f\u0650")
        buf.write("\7\u00a8\2\2\u0650\u0651\5\u00aaV\2\u0651\u0652\7\u00a9")
        buf.write("\2\2\u0652\u00a9\3\2\2\2\u0653\u0658\5\u00acW\2\u0654")
        buf.write("\u0655\7\u009c\2\2\u0655\u0657\5\u00acW\2\u0656\u0654")
        buf.write("\3\2\2\2\u0657\u065a\3\2\2\2\u0658\u0656\3\2\2\2\u0658")
        buf.write("\u0659\3\2\2\2\u0659\u00ab\3\2\2\2\u065a\u0658\3\2\2\2")
        buf.write("\u065b\u0660\5\u00aeX\2\u065c\u065d\7\u009d\2\2\u065d")
        buf.write("\u065f\5\u00aeX\2\u065e\u065c\3\2\2\2\u065f\u0662\3\2")
        buf.write("\2\2\u0660\u065e\3\2\2\2\u0660\u0661\3\2\2\2\u0661\u00ad")
        buf.write("\3\2\2\2\u0662\u0660\3\2\2\2\u0663\u0664\bX\1\2\u0664")
        buf.write("\u0665\7\u00a8\2\2\u0665\u0666\5\u00aaV\2\u0666\u0667")
        buf.write("\7\u00a9\2\2\u0667\u06de\3\2\2\2\u0668\u06de\7|\2\2\u0669")
        buf.write("\u066a\7~\2\2\u066a\u066b\t\3\2\2\u066b\u066c\t\4\2\2")
        buf.write("\u066c\u06de\t\3\2\2\u066d\u066f\7\177\2\2\u066e\u0670")
        buf.write("\7\u00b6\2\2\u066f\u066e\3\2\2\2\u066f\u0670\3\2\2\2\u0670")
        buf.write("\u0671\3\2\2\2\u0671\u0672\7\u00b7\2\2\u0672\u0673\7\u00b8")
        buf.write("\2\2\u0673\u06de\7\u00a3\2\2\u0674\u0675\7\u0080\2\2\u0675")
        buf.write("\u06de\5\u00aeX\35\u0676\u0677\7\u0081\2\2\u0677\u06de")
        buf.write("\5\u00aeX\34\u0678\u0679\7\u0082\2\2\u0679\u06de\5\u00ae")
        buf.write("X\33\u067a\u0681\7\u0083\2\2\u067b\u0682\7\u00a6\2\2\u067c")
        buf.write("\u067f\7\u00a5\2\2\u067d\u067e\7\u00ac\2\2\u067e\u0680")
        buf.write("\7\u00a5\2\2\u067f\u067d\3\2\2\2\u067f\u0680\3\2\2\2\u0680")
        buf.write("\u0682\3\2\2\2\u0681\u067b\3\2\2\2\u0681\u067c\3\2\2\2")
        buf.write("\u0682\u06de\3\2\2\2\u0683\u06de\7\u0084\2\2\u0684\u0685")
        buf.write("\7\u0085\2\2\u0685\u06de\7\u00a1\2\2\u0686\u06de\7\u0086")
        buf.write("\2\2\u0687\u068e\7\u0087\2\2\u0688\u068f\7\u00a6\2\2\u0689")
        buf.write("\u068c\7\u00a5\2\2\u068a\u068b\7\u00ac\2\2\u068b\u068d")
        buf.write("\7\u00a5\2\2\u068c\u068a\3\2\2\2\u068c\u068d\3\2\2\2\u068d")
        buf.write("\u068f\3\2\2\2\u068e\u0688\3\2\2\2\u068e\u0689\3\2\2\2")
        buf.write("\u068f\u06de\3\2\2\2\u0690\u0691\7\u009e\2\2\u0691\u06de")
        buf.write("\5\u00aeX\25\u0692\u0693\7\u0088\2\2\u0693\u0694\7\u00a8")
        buf.write("\2\2\u0694\u0696\7\u00a3\2\2\u0695\u0697\7\u009f\2\2\u0696")
        buf.write("\u0695\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u0698\3\2\2\2")
        buf.write("\u0698\u069a\7\u00a3\2\2\u0699\u069b\7\u009f\2\2\u069a")
        buf.write("\u0699\3\2\2\2\u069a\u069b\3\2\2\2\u069b\u069c\3\2\2\2")
        buf.write("\u069c\u069d\7\u00a3\2\2\u069d\u069e\7\u00a9\2\2\u069e")
        buf.write("\u069f\7\u0089\2\2\u069f\u06de\7\u00a3\2\2\u06a0\u06a1")
        buf.write("\7\u0088\2\2\u06a1\u06a2\7\u00a8\2\2\u06a2\u06a3\7\u009a")
        buf.write("\2\2\u06a3\u06a4\7\u00ad\2\2\u06a4\u06a6\5\u00a8U\2\u06a5")
        buf.write("\u06a7\7\u009f\2\2\u06a6\u06a5\3\2\2\2\u06a6\u06a7\3\2")
        buf.write("\2\2\u06a7\u06ab\3\2\2\2\u06a8\u06a9\7\u009b\2\2\u06a9")
        buf.write("\u06aa\7\u00ad\2\2\u06aa\u06ac\5\u00a8U\2\u06ab\u06a8")
        buf.write("\3\2\2\2\u06ab\u06ac\3\2\2\2\u06ac\u06ad\3\2\2\2\u06ad")
        buf.write("\u06ae\7\u00a9\2\2\u06ae\u06af\7\u0089\2\2\u06af\u06b0")
        buf.write("\7\u00a3\2\2\u06b0\u06de\3\2\2\2\u06b1\u06de\7\u008a\2")
        buf.write("\2\u06b2\u06de\7\u008b\2\2\u06b3\u06ba\7\u008c\2\2\u06b4")
        buf.write("\u06bb\7\u00a7\2\2\u06b5\u06b8\7\u00a1\2\2\u06b6\u06b7")
        buf.write("\7\u00ac\2\2\u06b7\u06b9\7\u00a1\2\2\u06b8\u06b6\3\2\2")
        buf.write("\2\u06b8\u06b9\3\2\2\2\u06b9\u06bb\3\2\2\2\u06ba\u06b4")
        buf.write("\3\2\2\2\u06ba\u06b5\3\2\2\2\u06bb\u06de\3\2\2\2\u06bc")
        buf.write("\u06c3\7\u008d\2\2\u06bd\u06c4\7\u00a6\2\2\u06be\u06c1")
        buf.write("\7\u00a5\2\2\u06bf\u06c0\7\u00ac\2\2\u06c0\u06c2\7\u00a5")
        buf.write("\2\2\u06c1\u06bf\3\2\2\2\u06c1\u06c2\3\2\2\2\u06c2\u06c4")
        buf.write("\3\2\2\2\u06c3\u06bd\3\2\2\2\u06c3\u06be\3\2\2\2\u06c4")
        buf.write("\u06de\3\2\2\2\u06c5\u06d1\7\u008f\2\2\u06c6\u06d2\7\u00a6")
        buf.write("\2\2\u06c7\u06ca\7\u00a5\2\2\u06c8\u06c9\7\u00ac\2\2\u06c9")
        buf.write("\u06cb\7\u00a5\2\2\u06ca\u06c8\3\2\2\2\u06ca\u06cb\3\2")
        buf.write("\2\2\u06cb\u06d2\3\2\2\2\u06cc\u06cf\7\u00a4\2\2\u06cd")
        buf.write("\u06ce\7\u00ac\2\2\u06ce\u06d0\7\u00a4\2\2\u06cf\u06cd")
        buf.write("\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06d2\3\2\2\2\u06d1")
        buf.write("\u06c6\3\2\2\2\u06d1\u06c7\3\2\2\2\u06d1\u06cc\3\2\2\2")
        buf.write("\u06d2\u06de\3\2\2\2\u06d3\u06de\7\u0090\2\2\u06d4\u06de")
        buf.write("\7\u0091\2\2\u06d5\u06de\7\u0092\2\2\u06d6\u06de\7\u0093")
        buf.write("\2\2\u06d7\u06de\7\u0094\2\2\u06d8\u06de\7\u0095\2\2\u06d9")
        buf.write("\u06de\7\u0096\2\2\u06da\u06de\7\u0097\2\2\u06db\u06de")
        buf.write("\7\u0098\2\2\u06dc\u06de\7\u0099\2\2\u06dd\u0663\3\2\2")
        buf.write("\2\u06dd\u0668\3\2\2\2\u06dd\u0669\3\2\2\2\u06dd\u066d")
        buf.write("\3\2\2\2\u06dd\u0674\3\2\2\2\u06dd\u0676\3\2\2\2\u06dd")
        buf.write("\u0678\3\2\2\2\u06dd\u067a\3\2\2\2\u06dd\u0683\3\2\2\2")
        buf.write("\u06dd\u0684\3\2\2\2\u06dd\u0686\3\2\2\2\u06dd\u0687\3")
        buf.write("\2\2\2\u06dd\u0690\3\2\2\2\u06dd\u0692\3\2\2\2\u06dd\u06a0")
        buf.write("\3\2\2\2\u06dd\u06b1\3\2\2\2\u06dd\u06b2\3\2\2\2\u06dd")
        buf.write("\u06b3\3\2\2\2\u06dd\u06bc\3\2\2\2\u06dd\u06c5\3\2\2\2")
        buf.write("\u06dd\u06d3\3\2\2\2\u06dd\u06d4\3\2\2\2\u06dd\u06d5\3")
        buf.write("\2\2\2\u06dd\u06d6\3\2\2\2\u06dd\u06d7\3\2\2\2\u06dd\u06d8")
        buf.write("\3\2\2\2\u06dd\u06d9\3\2\2\2\u06dd\u06da\3\2\2\2\u06dd")
        buf.write("\u06db\3\2\2\2\u06dd\u06dc\3\2\2\2\u06de\u06e7\3\2\2\2")
        buf.write("\u06df\u06e0\f \2\2\u06e0\u06e1\7}\2\2\u06e1\u06e6\7\u00a3")
        buf.write("\2\2\u06e2\u06e3\f\16\2\2\u06e3\u06e4\7\u008e\2\2\u06e4")
        buf.write("\u06e6\7\u00a3\2\2\u06e5\u06df\3\2\2\2\u06e5\u06e2\3\2")
        buf.write("\2\2\u06e6\u06e9\3\2\2\2\u06e7\u06e5\3\2\2\2\u06e7\u06e8")
        buf.write("\3\2\2\2\u06e8\u00af\3\2\2\2\u06e9\u06e7\3\2\2\2\177\u00c6")
        buf.write("\u00c8\u00ce\u00d4\u00da\u00e0\u00e6\u0116\u018e\u01ba")
        buf.write("\u01d3\u01e1\u01ee\u01f3\u01fc\u020b\u021e\u022d\u0248")
        buf.write("\u0257\u025c\u0270\u027f\u028e\u0299\u02af\u02bf\u02c7")
        buf.write("\u02cc\u02de\u02e5\u02ee\u0300\u030f\u0312\u031e\u0324")
        buf.write("\u0329\u0344\u0349\u035c\u0362\u0368\u036e\u0374\u037a")
        buf.write("\u0380\u0386\u038c\u0398\u03a2\u03a6\u03ab\u03af\u03bb")
        buf.write("\u03d3\u03db\u03eb\u03f0\u03f5\u0400\u0405\u040a\u0412")
        buf.write("\u041b\u0420\u0425\u0430\u0433\u0436\u043a\u0446\u044d")
        buf.write("\u0454\u045f\u0464\u047b\u048a\u04b0\u04c1\u04cc\u04e7")
        buf.write("\u04f8\u0512\u0517\u052e\u053f\u0558\u0560\u056f\u0574")
        buf.write("\u0598\u059c\u05a7\u05bb\u05cb\u05d9\u05f4\u0603\u0610")
        buf.write("\u061c\u062f\u063b\u0648\u0658\u0660\u066f\u067f\u0681")
        buf.write("\u068c\u068e\u0696\u069a\u06a6\u06ab\u06b8\u06ba\u06c1")
        buf.write("\u06c3\u06ca\u06cf\u06d1\u06dd\u06e5\u06e7")
        return buf.getvalue()


class XplorMRParser ( Parser ):

    grammarFileName = "XplorMRParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "','", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'('", "')'", "'{'", "'}'", "':'", "'='", 
                     "'<'", "'>'", "'<='", "'>='", "'#'" ]

    symbolicNames = [ "<INVALID>", "End", "Noe", "Assign", "Asymptote", 
                      "Averaging", "Bhig", "Ceiling", "Classification", 
                      "CountViol", "Distribute", "Monomers", "Ncount", "Nrestraints", 
                      "Potential", "Predict", "Print", "Threshold", "Reset", 
                      "Rswitch", "Scale", "SoExponent", "SqConstant", "SqExponent", 
                      "SqOffset", "Temperature", "Noe_avr_methods", "Noe_potential", 
                      "Cutoff", "Cuton", "From", "To", "Restraints", "Dihedral", 
                      "Nassign", "Sanisotropy", "Coefficients", "ForceConstant", 
                      "Rdc_potential", "Xdipolar", "Dipolar", "Type", "Sign", 
                      "Average", "Rdc_dist_fix_types", "Rdc_avr_methods", 
                      "VectorAngle", "Cv", "Partition", "Tensor", "Anisotropy", 
                      "Rdc_anis_types", "Planar", "Group", "Initialize", 
                      "Selection", "Weight", "Xadc", "Expectation", "Size", 
                      "Zero", "Coupling", "DegEnergy", "Coupling_potential", 
                      "Carbon", "PhiStep", "PsiStep", "Rcoil", "Proton", 
                      "Observed", "Amides", "Carbons", "Nitrogens", "Oxygens", 
                      "RingAtoms", "AlphasAndAmides", "Error", "Rmsd_or_Not", 
                      "Ramachandran", "Gaussian", "Phase", "Quartic", "Shape", 
                      "Sort", "Gauss_or_Quart", "Dimensions", "Collapse", 
                      "Danisotropy", "Diff_anis_types", "Orient", "Height", 
                      "MaxGaussians", "NewGaussian", "Dcsa", "Sigma", "Csa_types", 
                      "Pcsa", "OneBond", "AngleDb", "DerivFlag", "Angle_dihedral", 
                      "Paramagnetic", "Kconst", "Omega", "Tauc", "Debug", 
                      "Xpcs", "Tolerance", "Save", "Fmed", "ErrOn", "ErrOff", 
                      "Fon", "Foff", "Son", "Soff", "Frun", "Xrdcoupling", 
                      "Xangle", "Xccr", "Weip", "Hbda", "All", "Around", 
                      "Atom", "Attribute", "BondedTo", "ByGroup", "ByRes", 
                      "Chemical", "Hydrogen", "Id", "Known", "Name", "Point", 
                      "Cut", "Previous", "Pseudo", "Residue", "Resname", 
                      "Saround", "SegIdentifier", "Store_1", "Store_2", 
                      "Store_3", "Store_4", "Store_5", "Store_6", "Store_7", 
                      "Store_8", "Store_9", "Tag", "Tail", "Head", "Or_op", 
                      "And_op", "Not_op", "Comma", "Complex", "Integer", 
                      "Logical", "Real", "Double_quote_string", "Simple_name", 
                      "Simple_names", "Integers", "L_paren", "R_paren", 
                      "L_brace", "R_brace", "Colon", "Equ_op", "Lt_op", 
                      "Gt_op", "Leq_op", "Geq_op", "Neq_op", "SPACE", "COMMENT", 
                      "LINE_COMMENT", "Abs", "Attr_properties", "Comparison_ops", 
                      "WS" ]

    RULE_xplor_nih_mr = 0
    RULE_distance_restraint = 1
    RULE_dihedral_angle_restraint = 2
    RULE_rdc_restraint = 3
    RULE_planar_restraint = 4
    RULE_antidistance_restraint = 5
    RULE_coupling_restraint = 6
    RULE_carbon_shift_restraint = 7
    RULE_proton_shift_restraint = 8
    RULE_dihedral_angle_db_restraint = 9
    RULE_radius_of_gyration_restraint = 10
    RULE_diffusion_anisotropy_restraint = 11
    RULE_orientation_db_restraint = 12
    RULE_csa_restraint = 13
    RULE_pcsa_restraint = 14
    RULE_one_bond_coupling_restraint = 15
    RULE_angle_db_restraint = 16
    RULE_pre_restraint = 17
    RULE_pcs_restraint = 18
    RULE_prdc_restraint = 19
    RULE_porientation_restraint = 20
    RULE_pccr_restraint = 21
    RULE_hbond_restraint = 22
    RULE_noe_statement = 23
    RULE_noe_assign = 24
    RULE_predict_statement = 25
    RULE_dihedral_statement = 26
    RULE_dihedral_assign = 27
    RULE_sani_statement = 28
    RULE_sani_assign = 29
    RULE_xdip_statement = 30
    RULE_xdip_assign = 31
    RULE_vean_statement = 32
    RULE_vean_assign = 33
    RULE_tens_statement = 34
    RULE_tens_assign = 35
    RULE_anis_statement = 36
    RULE_anis_assign = 37
    RULE_planar_statement = 38
    RULE_group_statement = 39
    RULE_antidistance_statement = 40
    RULE_xadc_assign = 41
    RULE_coupling_statement = 42
    RULE_coup_assign = 43
    RULE_carbon_shift_statement = 44
    RULE_carbon_shift_assign = 45
    RULE_carbon_shift_rcoil = 46
    RULE_proton_shift_statement = 47
    RULE_observed = 48
    RULE_proton_shift_rcoil = 49
    RULE_proton_shift_anisotropy = 50
    RULE_proton_shift_amides = 51
    RULE_proton_shift_carbons = 52
    RULE_proton_shift_nitrogens = 53
    RULE_proton_shift_oxygens = 54
    RULE_proton_shift_ring_atoms = 55
    RULE_proton_shift_alphas_and_amides = 56
    RULE_ramachandran_statement = 57
    RULE_rama_assign = 58
    RULE_collapse_statement = 59
    RULE_diffusion_statement = 60
    RULE_dani_assign = 61
    RULE_orientation_statement = 62
    RULE_orie_assign = 63
    RULE_csa_statement = 64
    RULE_csa_assign = 65
    RULE_pcsa_statement = 66
    RULE_one_bond_coupling_statement = 67
    RULE_one_bond_assign = 68
    RULE_angle_db_statement = 69
    RULE_angle_db_assign = 70
    RULE_pre_statement = 71
    RULE_pre_assign = 72
    RULE_pcs_statement = 73
    RULE_pcs_assign = 74
    RULE_prdc_statement = 75
    RULE_prdc_assign = 76
    RULE_porientation_statement = 77
    RULE_porientation_assign = 78
    RULE_pccr_statement = 79
    RULE_pccr_assign = 80
    RULE_hbond_statement = 81
    RULE_hbond_assign = 82
    RULE_selection = 83
    RULE_selection_expression = 84
    RULE_term = 85
    RULE_factor = 86

    ruleNames =  [ "xplor_nih_mr", "distance_restraint", "dihedral_angle_restraint", 
                   "rdc_restraint", "planar_restraint", "antidistance_restraint", 
                   "coupling_restraint", "carbon_shift_restraint", "proton_shift_restraint", 
                   "dihedral_angle_db_restraint", "radius_of_gyration_restraint", 
                   "diffusion_anisotropy_restraint", "orientation_db_restraint", 
                   "csa_restraint", "pcsa_restraint", "one_bond_coupling_restraint", 
                   "angle_db_restraint", "pre_restraint", "pcs_restraint", 
                   "prdc_restraint", "porientation_restraint", "pccr_restraint", 
                   "hbond_restraint", "noe_statement", "noe_assign", "predict_statement", 
                   "dihedral_statement", "dihedral_assign", "sani_statement", 
                   "sani_assign", "xdip_statement", "xdip_assign", "vean_statement", 
                   "vean_assign", "tens_statement", "tens_assign", "anis_statement", 
                   "anis_assign", "planar_statement", "group_statement", 
                   "antidistance_statement", "xadc_assign", "coupling_statement", 
                   "coup_assign", "carbon_shift_statement", "carbon_shift_assign", 
                   "carbon_shift_rcoil", "proton_shift_statement", "observed", 
                   "proton_shift_rcoil", "proton_shift_anisotropy", "proton_shift_amides", 
                   "proton_shift_carbons", "proton_shift_nitrogens", "proton_shift_oxygens", 
                   "proton_shift_ring_atoms", "proton_shift_alphas_and_amides", 
                   "ramachandran_statement", "rama_assign", "collapse_statement", 
                   "diffusion_statement", "dani_assign", "orientation_statement", 
                   "orie_assign", "csa_statement", "csa_assign", "pcsa_statement", 
                   "one_bond_coupling_statement", "one_bond_assign", "angle_db_statement", 
                   "angle_db_assign", "pre_statement", "pre_assign", "pcs_statement", 
                   "pcs_assign", "prdc_statement", "prdc_assign", "porientation_statement", 
                   "porientation_assign", "pccr_statement", "pccr_assign", 
                   "hbond_statement", "hbond_assign", "selection", "selection_expression", 
                   "term", "factor" ]

    EOF = Token.EOF
    End=1
    Noe=2
    Assign=3
    Asymptote=4
    Averaging=5
    Bhig=6
    Ceiling=7
    Classification=8
    CountViol=9
    Distribute=10
    Monomers=11
    Ncount=12
    Nrestraints=13
    Potential=14
    Predict=15
    Print=16
    Threshold=17
    Reset=18
    Rswitch=19
    Scale=20
    SoExponent=21
    SqConstant=22
    SqExponent=23
    SqOffset=24
    Temperature=25
    Noe_avr_methods=26
    Noe_potential=27
    Cutoff=28
    Cuton=29
    From=30
    To=31
    Restraints=32
    Dihedral=33
    Nassign=34
    Sanisotropy=35
    Coefficients=36
    ForceConstant=37
    Rdc_potential=38
    Xdipolar=39
    Dipolar=40
    Type=41
    Sign=42
    Average=43
    Rdc_dist_fix_types=44
    Rdc_avr_methods=45
    VectorAngle=46
    Cv=47
    Partition=48
    Tensor=49
    Anisotropy=50
    Rdc_anis_types=51
    Planar=52
    Group=53
    Initialize=54
    Selection=55
    Weight=56
    Xadc=57
    Expectation=58
    Size=59
    Zero=60
    Coupling=61
    DegEnergy=62
    Coupling_potential=63
    Carbon=64
    PhiStep=65
    PsiStep=66
    Rcoil=67
    Proton=68
    Observed=69
    Amides=70
    Carbons=71
    Nitrogens=72
    Oxygens=73
    RingAtoms=74
    AlphasAndAmides=75
    Error=76
    Rmsd_or_Not=77
    Ramachandran=78
    Gaussian=79
    Phase=80
    Quartic=81
    Shape=82
    Sort=83
    Gauss_or_Quart=84
    Dimensions=85
    Collapse=86
    Danisotropy=87
    Diff_anis_types=88
    Orient=89
    Height=90
    MaxGaussians=91
    NewGaussian=92
    Dcsa=93
    Sigma=94
    Csa_types=95
    Pcsa=96
    OneBond=97
    AngleDb=98
    DerivFlag=99
    Angle_dihedral=100
    Paramagnetic=101
    Kconst=102
    Omega=103
    Tauc=104
    Debug=105
    Xpcs=106
    Tolerance=107
    Save=108
    Fmed=109
    ErrOn=110
    ErrOff=111
    Fon=112
    Foff=113
    Son=114
    Soff=115
    Frun=116
    Xrdcoupling=117
    Xangle=118
    Xccr=119
    Weip=120
    Hbda=121
    All=122
    Around=123
    Atom=124
    Attribute=125
    BondedTo=126
    ByGroup=127
    ByRes=128
    Chemical=129
    Hydrogen=130
    Id=131
    Known=132
    Name=133
    Point=134
    Cut=135
    Previous=136
    Pseudo=137
    Residue=138
    Resname=139
    Saround=140
    SegIdentifier=141
    Store_1=142
    Store_2=143
    Store_3=144
    Store_4=145
    Store_5=146
    Store_6=147
    Store_7=148
    Store_8=149
    Store_9=150
    Tag=151
    Tail=152
    Head=153
    Or_op=154
    And_op=155
    Not_op=156
    Comma=157
    Complex=158
    Integer=159
    Logical=160
    Real=161
    Double_quote_string=162
    Simple_name=163
    Simple_names=164
    Integers=165
    L_paren=166
    R_paren=167
    L_brace=168
    R_brace=169
    Colon=170
    Equ_op=171
    Lt_op=172
    Gt_op=173
    Leq_op=174
    Geq_op=175
    Neq_op=176
    SPACE=177
    COMMENT=178
    LINE_COMMENT=179
    Abs=180
    Attr_properties=181
    Comparison_ops=182
    WS=183

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class Xplor_nih_mrContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(XplorMRParser.EOF, 0)

        def distance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Distance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Distance_restraintContext,i)


        def dihedral_angle_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_restraintContext,i)


        def rdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rdc_restraintContext,i)


        def planar_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_restraintContext,i)


        def antidistance_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Antidistance_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Antidistance_restraintContext,i)


        def coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coupling_restraintContext,i)


        def carbon_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_restraintContext,i)


        def proton_shift_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_restraintContext,i)


        def dihedral_angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_angle_db_restraintContext,i)


        def radius_of_gyration_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Radius_of_gyration_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Radius_of_gyration_restraintContext,i)


        def diffusion_anisotropy_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Diffusion_anisotropy_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Diffusion_anisotropy_restraintContext,i)


        def orientation_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orientation_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orientation_db_restraintContext,i)


        def csa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_restraintContext,i)


        def pcsa_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcsa_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcsa_restraintContext,i)


        def one_bond_coupling_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_coupling_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_restraintContext,i)


        def angle_db_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_restraintContext,i)


        def pre_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_restraintContext,i)


        def pcs_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_restraintContext,i)


        def prdc_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_restraintContext,i)


        def porientation_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_restraintContext,i)


        def pccr_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_restraintContext,i)


        def hbond_restraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_restraintContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_restraintContext,i)


        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def planar_statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Planar_statementContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,i)


        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xplor_nih_mr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXplor_nih_mr" ):
                listener.enterXplor_nih_mr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXplor_nih_mr" ):
                listener.exitXplor_nih_mr(self)




    def xplor_nih_mr(self):

        localctx = XplorMRParser.Xplor_nih_mrContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_xplor_nih_mr)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << XplorMRParser.Noe) | (1 << XplorMRParser.Restraints) | (1 << XplorMRParser.Sanisotropy) | (1 << XplorMRParser.Xdipolar) | (1 << XplorMRParser.Dipolar) | (1 << XplorMRParser.VectorAngle) | (1 << XplorMRParser.Tensor) | (1 << XplorMRParser.Anisotropy) | (1 << XplorMRParser.Xadc) | (1 << XplorMRParser.Coupling))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (XplorMRParser.Carbon - 64)) | (1 << (XplorMRParser.Proton - 64)) | (1 << (XplorMRParser.Ramachandran - 64)) | (1 << (XplorMRParser.Collapse - 64)) | (1 << (XplorMRParser.Danisotropy - 64)) | (1 << (XplorMRParser.Orient - 64)) | (1 << (XplorMRParser.Dcsa - 64)) | (1 << (XplorMRParser.Pcsa - 64)) | (1 << (XplorMRParser.OneBond - 64)) | (1 << (XplorMRParser.AngleDb - 64)) | (1 << (XplorMRParser.Paramagnetic - 64)) | (1 << (XplorMRParser.Xpcs - 64)) | (1 << (XplorMRParser.Xrdcoupling - 64)) | (1 << (XplorMRParser.Xangle - 64)) | (1 << (XplorMRParser.Xccr - 64)) | (1 << (XplorMRParser.Hbda - 64)))) != 0):
                self.state = 196
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,0,self._ctx)
                if la_ == 1:
                    self.state = 174
                    self.distance_restraint()
                    pass

                elif la_ == 2:
                    self.state = 175
                    self.dihedral_angle_restraint()
                    pass

                elif la_ == 3:
                    self.state = 176
                    self.rdc_restraint()
                    pass

                elif la_ == 4:
                    self.state = 177
                    self.planar_restraint()
                    pass

                elif la_ == 5:
                    self.state = 178
                    self.antidistance_restraint()
                    pass

                elif la_ == 6:
                    self.state = 179
                    self.coupling_restraint()
                    pass

                elif la_ == 7:
                    self.state = 180
                    self.carbon_shift_restraint()
                    pass

                elif la_ == 8:
                    self.state = 181
                    self.proton_shift_restraint()
                    pass

                elif la_ == 9:
                    self.state = 182
                    self.dihedral_angle_db_restraint()
                    pass

                elif la_ == 10:
                    self.state = 183
                    self.radius_of_gyration_restraint()
                    pass

                elif la_ == 11:
                    self.state = 184
                    self.diffusion_anisotropy_restraint()
                    pass

                elif la_ == 12:
                    self.state = 185
                    self.orientation_db_restraint()
                    pass

                elif la_ == 13:
                    self.state = 186
                    self.csa_restraint()
                    pass

                elif la_ == 14:
                    self.state = 187
                    self.pcsa_restraint()
                    pass

                elif la_ == 15:
                    self.state = 188
                    self.one_bond_coupling_restraint()
                    pass

                elif la_ == 16:
                    self.state = 189
                    self.angle_db_restraint()
                    pass

                elif la_ == 17:
                    self.state = 190
                    self.pre_restraint()
                    pass

                elif la_ == 18:
                    self.state = 191
                    self.pcs_restraint()
                    pass

                elif la_ == 19:
                    self.state = 192
                    self.prdc_restraint()
                    pass

                elif la_ == 20:
                    self.state = 193
                    self.porientation_restraint()
                    pass

                elif la_ == 21:
                    self.state = 194
                    self.pccr_restraint()
                    pass

                elif la_ == 22:
                    self.state = 195
                    self.hbond_restraint()
                    pass


                self.state = 200
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 204
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,2,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 201
                    self.noe_assign() 
                self.state = 206
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,2,self._ctx)

            self.state = 210
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,3,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 207
                    self.dihedral_assign() 
                self.state = 212
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,3,self._ctx)

            self.state = 216
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,4,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 213
                    self.sani_assign() 
                self.state = 218
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,4,self._ctx)

            self.state = 222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Group or _la==XplorMRParser.Initialize:
                self.state = 219
                self.planar_statement()
                self.state = 224
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Assign:
                self.state = 225
                self.hbond_assign()
                self.state = 230
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 231
            self.match(XplorMRParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Distance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noe(self):
            return self.getToken(XplorMRParser.Noe, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def noe_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Noe_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_distance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDistance_restraint" ):
                listener.enterDistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDistance_restraint" ):
                listener.exitDistance_restraint(self)




    def distance_restraint(self):

        localctx = XplorMRParser.Distance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_distance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 233
            self.match(XplorMRParser.Noe)
            self.state = 234
            self.match(XplorMRParser.L_brace)
            self.state = 235
            self.noe_statement()
            self.state = 236
            self.match(XplorMRParser.R_brace)
            self.state = 237
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def Dihedral(self):
            return self.getToken(XplorMRParser.Dihedral, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def dihedral_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Dihedral_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_restraint" ):
                listener.enterDihedral_angle_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_restraint" ):
                listener.exitDihedral_angle_restraint(self)




    def dihedral_angle_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_dihedral_angle_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 239
            self.match(XplorMRParser.Restraints)
            self.state = 240
            self.match(XplorMRParser.Dihedral)
            self.state = 241
            self.match(XplorMRParser.L_brace)
            self.state = 242
            self.dihedral_statement()
            self.state = 243
            self.match(XplorMRParser.R_brace)
            self.state = 244
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Sanisotropy(self):
            return self.getToken(XplorMRParser.Sanisotropy, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def sani_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Sani_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def xdip_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Xdip_statementContext,0)


        def Xdipolar(self):
            return self.getToken(XplorMRParser.Xdipolar, 0)

        def Dipolar(self):
            return self.getToken(XplorMRParser.Dipolar, 0)

        def VectorAngle(self):
            return self.getToken(XplorMRParser.VectorAngle, 0)

        def vean_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Vean_statementContext,0)


        def Tensor(self):
            return self.getToken(XplorMRParser.Tensor, 0)

        def tens_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Tens_statementContext,0)


        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def anis_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Anis_statementContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRdc_restraint" ):
                listener.enterRdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRdc_restraint" ):
                listener.exitRdc_restraint(self)




    def rdc_restraint(self):

        localctx = XplorMRParser.Rdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_rdc_restraint)
        self._la = 0 # Token type
        try:
            self.state = 276
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Sanisotropy]:
                self.enterOuterAlt(localctx, 1)
                self.state = 246
                self.match(XplorMRParser.Sanisotropy)
                self.state = 247
                self.match(XplorMRParser.L_brace)
                self.state = 248
                self.sani_statement()
                self.state = 249
                self.match(XplorMRParser.R_brace)
                self.state = 250
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Xdipolar, XplorMRParser.Dipolar]:
                self.enterOuterAlt(localctx, 2)
                self.state = 252
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Xdipolar or _la==XplorMRParser.Dipolar):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 253
                self.match(XplorMRParser.L_brace)
                self.state = 254
                self.xdip_statement()
                self.state = 255
                self.match(XplorMRParser.R_brace)
                self.state = 256
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.VectorAngle]:
                self.enterOuterAlt(localctx, 3)
                self.state = 258
                self.match(XplorMRParser.VectorAngle)
                self.state = 259
                self.match(XplorMRParser.L_brace)
                self.state = 260
                self.vean_statement()
                self.state = 261
                self.match(XplorMRParser.R_brace)
                self.state = 262
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Tensor]:
                self.enterOuterAlt(localctx, 4)
                self.state = 264
                self.match(XplorMRParser.Tensor)
                self.state = 265
                self.match(XplorMRParser.L_brace)
                self.state = 266
                self.tens_statement()
                self.state = 267
                self.match(XplorMRParser.R_brace)
                self.state = 268
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Anisotropy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 270
                self.match(XplorMRParser.Anisotropy)
                self.state = 271
                self.match(XplorMRParser.L_brace)
                self.state = 272
                self.anis_statement()
                self.state = 273
                self.match(XplorMRParser.R_brace)
                self.state = 274
                self.match(XplorMRParser.End)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Restraints(self):
            return self.getToken(XplorMRParser.Restraints, 0)

        def Planar(self):
            return self.getToken(XplorMRParser.Planar, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def planar_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Planar_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_restraint" ):
                listener.enterPlanar_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_restraint" ):
                listener.exitPlanar_restraint(self)




    def planar_restraint(self):

        localctx = XplorMRParser.Planar_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_planar_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            self.match(XplorMRParser.Restraints)
            self.state = 279
            self.match(XplorMRParser.Planar)
            self.state = 280
            self.match(XplorMRParser.L_brace)
            self.state = 281
            self.planar_statement()
            self.state = 282
            self.match(XplorMRParser.R_brace)
            self.state = 283
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xadc(self):
            return self.getToken(XplorMRParser.Xadc, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def antidistance_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Antidistance_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_restraint" ):
                listener.enterAntidistance_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_restraint" ):
                listener.exitAntidistance_restraint(self)




    def antidistance_restraint(self):

        localctx = XplorMRParser.Antidistance_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_antidistance_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(XplorMRParser.Xadc)
            self.state = 286
            self.match(XplorMRParser.L_brace)
            self.state = 287
            self.antidistance_statement()
            self.state = 288
            self.match(XplorMRParser.R_brace)
            self.state = 289
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Coupling(self):
            return self.getToken(XplorMRParser.Coupling, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def coupling_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Coupling_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_restraint" ):
                listener.enterCoupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_restraint" ):
                listener.exitCoupling_restraint(self)




    def coupling_restraint(self):

        localctx = XplorMRParser.Coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 291
            self.match(XplorMRParser.Coupling)
            self.state = 292
            self.match(XplorMRParser.L_brace)
            self.state = 293
            self.coupling_statement()
            self.state = 294
            self.match(XplorMRParser.R_brace)
            self.state = 295
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbon(self):
            return self.getToken(XplorMRParser.Carbon, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def carbon_shift_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Carbon_shift_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_restraint" ):
                listener.enterCarbon_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_restraint" ):
                listener.exitCarbon_shift_restraint(self)




    def carbon_shift_restraint(self):

        localctx = XplorMRParser.Carbon_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_carbon_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 297
            self.match(XplorMRParser.Carbon)
            self.state = 298
            self.match(XplorMRParser.L_brace)
            self.state = 299
            self.carbon_shift_statement()
            self.state = 300
            self.match(XplorMRParser.R_brace)
            self.state = 301
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Proton(self):
            return self.getToken(XplorMRParser.Proton, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def proton_shift_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Proton_shift_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_restraint" ):
                listener.enterProton_shift_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_restraint" ):
                listener.exitProton_shift_restraint(self)




    def proton_shift_restraint(self):

        localctx = XplorMRParser.Proton_shift_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_proton_shift_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            self.match(XplorMRParser.Proton)
            self.state = 304
            self.match(XplorMRParser.L_brace)
            self.state = 305
            self.proton_shift_statement()
            self.state = 306
            self.match(XplorMRParser.R_brace)
            self.state = 307
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ramachandran(self):
            return self.getToken(XplorMRParser.Ramachandran, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def ramachandran_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Ramachandran_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_angle_db_restraint" ):
                listener.enterDihedral_angle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_angle_db_restraint" ):
                listener.exitDihedral_angle_db_restraint(self)




    def dihedral_angle_db_restraint(self):

        localctx = XplorMRParser.Dihedral_angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_dihedral_angle_db_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 309
            self.match(XplorMRParser.Ramachandran)
            self.state = 310
            self.match(XplorMRParser.L_brace)
            self.state = 311
            self.ramachandran_statement()
            self.state = 312
            self.match(XplorMRParser.R_brace)
            self.state = 313
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Radius_of_gyration_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Collapse(self):
            return self.getToken(XplorMRParser.Collapse, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def collapse_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Collapse_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_radius_of_gyration_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRadius_of_gyration_restraint" ):
                listener.enterRadius_of_gyration_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRadius_of_gyration_restraint" ):
                listener.exitRadius_of_gyration_restraint(self)




    def radius_of_gyration_restraint(self):

        localctx = XplorMRParser.Radius_of_gyration_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_radius_of_gyration_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.match(XplorMRParser.Collapse)
            self.state = 316
            self.match(XplorMRParser.L_brace)
            self.state = 317
            self.collapse_statement()
            self.state = 318
            self.match(XplorMRParser.R_brace)
            self.state = 319
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_anisotropy_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Danisotropy(self):
            return self.getToken(XplorMRParser.Danisotropy, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def diffusion_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Diffusion_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_anisotropy_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_anisotropy_restraint" ):
                listener.enterDiffusion_anisotropy_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_anisotropy_restraint" ):
                listener.exitDiffusion_anisotropy_restraint(self)




    def diffusion_anisotropy_restraint(self):

        localctx = XplorMRParser.Diffusion_anisotropy_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_diffusion_anisotropy_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 321
            self.match(XplorMRParser.Danisotropy)
            self.state = 322
            self.match(XplorMRParser.L_brace)
            self.state = 323
            self.diffusion_statement()
            self.state = 324
            self.match(XplorMRParser.R_brace)
            self.state = 325
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Orient(self):
            return self.getToken(XplorMRParser.Orient, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def orientation_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Orientation_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_db_restraint" ):
                listener.enterOrientation_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_db_restraint" ):
                listener.exitOrientation_db_restraint(self)




    def orientation_db_restraint(self):

        localctx = XplorMRParser.Orientation_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_orientation_db_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 327
            self.match(XplorMRParser.Orient)
            self.state = 328
            self.match(XplorMRParser.L_brace)
            self.state = 329
            self.orientation_statement()
            self.state = 330
            self.match(XplorMRParser.R_brace)
            self.state = 331
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Dcsa(self):
            return self.getToken(XplorMRParser.Dcsa, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def csa_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Csa_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_restraint" ):
                listener.enterCsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_restraint" ):
                listener.exitCsa_restraint(self)




    def csa_restraint(self):

        localctx = XplorMRParser.Csa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_csa_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 333
            self.match(XplorMRParser.Dcsa)
            self.state = 334
            self.match(XplorMRParser.L_brace)
            self.state = 335
            self.csa_statement()
            self.state = 336
            self.match(XplorMRParser.R_brace)
            self.state = 337
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Pcsa(self):
            return self.getToken(XplorMRParser.Pcsa, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def pcsa_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Pcsa_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_restraint" ):
                listener.enterPcsa_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_restraint" ):
                listener.exitPcsa_restraint(self)




    def pcsa_restraint(self):

        localctx = XplorMRParser.Pcsa_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_pcsa_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 339
            self.match(XplorMRParser.Pcsa)
            self.state = 340
            self.match(XplorMRParser.L_brace)
            self.state = 341
            self.pcsa_statement()
            self.state = 342
            self.match(XplorMRParser.R_brace)
            self.state = 343
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OneBond(self):
            return self.getToken(XplorMRParser.OneBond, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def one_bond_coupling_statement(self):
            return self.getTypedRuleContext(XplorMRParser.One_bond_coupling_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_restraint" ):
                listener.enterOne_bond_coupling_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_restraint" ):
                listener.exitOne_bond_coupling_restraint(self)




    def one_bond_coupling_restraint(self):

        localctx = XplorMRParser.One_bond_coupling_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_one_bond_coupling_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 345
            self.match(XplorMRParser.OneBond)
            self.state = 346
            self.match(XplorMRParser.L_brace)
            self.state = 347
            self.one_bond_coupling_statement()
            self.state = 348
            self.match(XplorMRParser.R_brace)
            self.state = 349
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AngleDb(self):
            return self.getToken(XplorMRParser.AngleDb, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def angle_db_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Angle_db_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_restraint" ):
                listener.enterAngle_db_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_restraint" ):
                listener.exitAngle_db_restraint(self)




    def angle_db_restraint(self):

        localctx = XplorMRParser.Angle_db_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_angle_db_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(XplorMRParser.AngleDb)
            self.state = 352
            self.match(XplorMRParser.L_brace)
            self.state = 353
            self.angle_db_statement()
            self.state = 354
            self.match(XplorMRParser.R_brace)
            self.state = 355
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Paramagnetic(self):
            return self.getToken(XplorMRParser.Paramagnetic, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def pre_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Pre_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_restraint" ):
                listener.enterPre_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_restraint" ):
                listener.exitPre_restraint(self)




    def pre_restraint(self):

        localctx = XplorMRParser.Pre_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_pre_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 357
            self.match(XplorMRParser.Paramagnetic)
            self.state = 358
            self.match(XplorMRParser.L_brace)
            self.state = 359
            self.pre_statement()
            self.state = 360
            self.match(XplorMRParser.R_brace)
            self.state = 361
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xpcs(self):
            return self.getToken(XplorMRParser.Xpcs, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def pcs_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Pcs_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_restraint" ):
                listener.enterPcs_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_restraint" ):
                listener.exitPcs_restraint(self)




    def pcs_restraint(self):

        localctx = XplorMRParser.Pcs_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_pcs_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(XplorMRParser.Xpcs)
            self.state = 364
            self.match(XplorMRParser.L_brace)
            self.state = 365
            self.pcs_statement()
            self.state = 366
            self.match(XplorMRParser.R_brace)
            self.state = 367
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xrdcoupling(self):
            return self.getToken(XplorMRParser.Xrdcoupling, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def prdc_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Prdc_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_restraint" ):
                listener.enterPrdc_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_restraint" ):
                listener.exitPrdc_restraint(self)




    def prdc_restraint(self):

        localctx = XplorMRParser.Prdc_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_prdc_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 369
            self.match(XplorMRParser.Xrdcoupling)
            self.state = 370
            self.match(XplorMRParser.L_brace)
            self.state = 371
            self.prdc_statement()
            self.state = 372
            self.match(XplorMRParser.R_brace)
            self.state = 373
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xangle(self):
            return self.getToken(XplorMRParser.Xangle, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def porientation_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Porientation_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_restraint" ):
                listener.enterPorientation_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_restraint" ):
                listener.exitPorientation_restraint(self)




    def porientation_restraint(self):

        localctx = XplorMRParser.Porientation_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_porientation_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 375
            self.match(XplorMRParser.Xangle)
            self.state = 376
            self.match(XplorMRParser.L_brace)
            self.state = 377
            self.porientation_statement()
            self.state = 378
            self.match(XplorMRParser.R_brace)
            self.state = 379
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Xccr(self):
            return self.getToken(XplorMRParser.Xccr, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def pccr_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Pccr_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_restraint" ):
                listener.enterPccr_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_restraint" ):
                listener.exitPccr_restraint(self)




    def pccr_restraint(self):

        localctx = XplorMRParser.Pccr_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_pccr_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 381
            self.match(XplorMRParser.Xccr)
            self.state = 382
            self.match(XplorMRParser.L_brace)
            self.state = 383
            self.pccr_statement()
            self.state = 384
            self.match(XplorMRParser.R_brace)
            self.state = 385
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_restraintContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Hbda(self):
            return self.getToken(XplorMRParser.Hbda, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def hbond_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Hbond_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_restraint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_restraint" ):
                listener.enterHbond_restraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_restraint" ):
                listener.exitHbond_restraint(self)




    def hbond_restraint(self):

        localctx = XplorMRParser.Hbond_restraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_hbond_restraint)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 387
            self.match(XplorMRParser.Hbda)
            self.state = 388
            self.match(XplorMRParser.L_brace)
            self.state = 389
            self.hbond_statement()
            self.state = 390
            self.match(XplorMRParser.R_brace)
            self.state = 391
            self.match(XplorMRParser.End)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noe_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Noe_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Noe_assignContext,i)


        def Asymptote(self):
            return self.getToken(XplorMRParser.Asymptote, 0)

        def Simple_names(self):
            return self.getToken(XplorMRParser.Simple_names, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Averaging(self):
            return self.getToken(XplorMRParser.Averaging, 0)

        def Noe_avr_methods(self):
            return self.getToken(XplorMRParser.Noe_avr_methods, 0)

        def Bhig(self):
            return self.getToken(XplorMRParser.Bhig, 0)

        def Ceiling(self):
            return self.getToken(XplorMRParser.Ceiling, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def CountViol(self):
            return self.getToken(XplorMRParser.CountViol, 0)

        def Distribute(self):
            return self.getToken(XplorMRParser.Distribute, 0)

        def Monomers(self):
            return self.getToken(XplorMRParser.Monomers, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Ncount(self):
            return self.getToken(XplorMRParser.Ncount, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Noe_potential(self):
            return self.getToken(XplorMRParser.Noe_potential, 0)

        def Predict(self):
            return self.getToken(XplorMRParser.Predict, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def predict_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Predict_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def End(self):
            return self.getToken(XplorMRParser.End, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Rswitch(self):
            return self.getToken(XplorMRParser.Rswitch, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def SoExponent(self):
            return self.getToken(XplorMRParser.SoExponent, 0)

        def SqConstant(self):
            return self.getToken(XplorMRParser.SqConstant, 0)

        def SqExponent(self):
            return self.getToken(XplorMRParser.SqExponent, 0)

        def SqOffset(self):
            return self.getToken(XplorMRParser.SqOffset, 0)

        def Temperature(self):
            return self.getToken(XplorMRParser.Temperature, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_statement" ):
                listener.enterNoe_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_statement" ):
                listener.exitNoe_statement(self)




    def noe_statement(self):

        localctx = XplorMRParser.Noe_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_noe_statement)
        self._la = 0 # Token type
        try:
            self.state = 465
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 396
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 393
                    self.noe_assign()
                    self.state = 398
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Asymptote]:
                self.enterOuterAlt(localctx, 2)
                self.state = 399
                self.match(XplorMRParser.Asymptote)
                self.state = 400
                self.match(XplorMRParser.Simple_names)
                self.state = 401
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Averaging]:
                self.enterOuterAlt(localctx, 3)
                self.state = 402
                self.match(XplorMRParser.Averaging)
                self.state = 403
                self.match(XplorMRParser.Simple_names)
                self.state = 404
                self.match(XplorMRParser.Noe_avr_methods)
                pass
            elif token in [XplorMRParser.Bhig]:
                self.enterOuterAlt(localctx, 4)
                self.state = 405
                self.match(XplorMRParser.Bhig)
                self.state = 406
                self.match(XplorMRParser.Simple_names)
                self.state = 407
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Ceiling]:
                self.enterOuterAlt(localctx, 5)
                self.state = 408
                self.match(XplorMRParser.Ceiling)
                self.state = 409
                self.match(XplorMRParser.Equ_op)
                self.state = 410
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 6)
                self.state = 411
                self.match(XplorMRParser.Classification)
                self.state = 412
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.CountViol]:
                self.enterOuterAlt(localctx, 7)
                self.state = 413
                self.match(XplorMRParser.CountViol)
                self.state = 414
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Distribute]:
                self.enterOuterAlt(localctx, 8)
                self.state = 415
                self.match(XplorMRParser.Distribute)
                self.state = 416
                self.match(XplorMRParser.Simple_name)
                self.state = 417
                self.match(XplorMRParser.Simple_name)
                self.state = 418
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Monomers]:
                self.enterOuterAlt(localctx, 9)
                self.state = 419
                self.match(XplorMRParser.Monomers)
                self.state = 420
                self.match(XplorMRParser.Simple_names)
                self.state = 421
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Ncount]:
                self.enterOuterAlt(localctx, 10)
                self.state = 422
                self.match(XplorMRParser.Ncount)
                self.state = 423
                self.match(XplorMRParser.Simple_names)
                self.state = 424
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 11)
                self.state = 425
                self.match(XplorMRParser.Nrestraints)
                self.state = 426
                self.match(XplorMRParser.Equ_op)
                self.state = 427
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 12)
                self.state = 428
                self.match(XplorMRParser.Potential)
                self.state = 429
                self.match(XplorMRParser.Simple_names)
                self.state = 430
                self.match(XplorMRParser.Noe_potential)
                pass
            elif token in [XplorMRParser.Predict]:
                self.enterOuterAlt(localctx, 13)
                self.state = 431
                self.match(XplorMRParser.Predict)
                self.state = 432
                self.match(XplorMRParser.L_brace)
                self.state = 433
                self.predict_statement()
                self.state = 434
                self.match(XplorMRParser.R_brace)
                self.state = 435
                self.match(XplorMRParser.End)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 14)
                self.state = 437
                self.match(XplorMRParser.Print)
                self.state = 438
                self.match(XplorMRParser.Threshold)
                self.state = 440
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Equ_op:
                    self.state = 439
                    self.match(XplorMRParser.Equ_op)


                self.state = 442
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 15)
                self.state = 443
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Rswitch]:
                self.enterOuterAlt(localctx, 16)
                self.state = 444
                self.match(XplorMRParser.Rswitch)
                self.state = 445
                self.match(XplorMRParser.Simple_names)
                self.state = 446
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 17)
                self.state = 447
                self.match(XplorMRParser.Scale)
                self.state = 448
                self.match(XplorMRParser.Simple_names)
                self.state = 449
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.SoExponent]:
                self.enterOuterAlt(localctx, 18)
                self.state = 450
                self.match(XplorMRParser.SoExponent)
                self.state = 451
                self.match(XplorMRParser.Simple_names)
                self.state = 452
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.SqConstant]:
                self.enterOuterAlt(localctx, 19)
                self.state = 453
                self.match(XplorMRParser.SqConstant)
                self.state = 454
                self.match(XplorMRParser.Simple_names)
                self.state = 455
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.SqExponent]:
                self.enterOuterAlt(localctx, 20)
                self.state = 456
                self.match(XplorMRParser.SqExponent)
                self.state = 457
                self.match(XplorMRParser.Simple_names)
                self.state = 458
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.SqOffset]:
                self.enterOuterAlt(localctx, 21)
                self.state = 459
                self.match(XplorMRParser.SqOffset)
                self.state = 460
                self.match(XplorMRParser.Simple_names)
                self.state = 461
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Temperature]:
                self.enterOuterAlt(localctx, 22)
                self.state = 462
                self.match(XplorMRParser.Temperature)
                self.state = 463
                self.match(XplorMRParser.Equ_op)
                self.state = 464
                self.match(XplorMRParser.Real)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Noe_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_noe_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoe_assign" ):
                listener.enterNoe_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoe_assign" ):
                listener.exitNoe_assign(self)




    def noe_assign(self):

        localctx = XplorMRParser.Noe_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_noe_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.match(XplorMRParser.Assign)
            self.state = 468
            self.selection()
            self.state = 469
            self.selection()
            self.state = 470
            self.match(XplorMRParser.Real)
            self.state = 471
            self.match(XplorMRParser.Real)
            self.state = 472
            self.match(XplorMRParser.Real)
            self.state = 479
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 473
                self.match(XplorMRParser.Or_op)
                self.state = 474
                self.selection()
                self.state = 475
                self.selection()
                self.state = 481
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Predict_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Cuton(self):
            return self.getToken(XplorMRParser.Cuton, 0)

        def From(self):
            return self.getToken(XplorMRParser.From, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def To(self):
            return self.getToken(XplorMRParser.To, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_predict_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredict_statement" ):
                listener.enterPredict_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredict_statement" ):
                listener.exitPredict_statement(self)




    def predict_statement(self):

        localctx = XplorMRParser.Predict_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_predict_statement)
        try:
            self.state = 492
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 1)
                self.state = 482
                self.match(XplorMRParser.Cutoff)
                self.state = 483
                self.match(XplorMRParser.Equ_op)
                self.state = 484
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Cuton]:
                self.enterOuterAlt(localctx, 2)
                self.state = 485
                self.match(XplorMRParser.Cuton)
                self.state = 486
                self.match(XplorMRParser.Equ_op)
                self.state = 487
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.From]:
                self.enterOuterAlt(localctx, 3)
                self.state = 488
                self.match(XplorMRParser.From)
                self.state = 489
                self.selection()
                pass
            elif token in [XplorMRParser.To]:
                self.enterOuterAlt(localctx, 4)
                self.state = 490
                self.match(XplorMRParser.To)
                self.state = 491
                self.selection()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dihedral_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dihedral_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dihedral_assignContext,i)


        def Nassign(self):
            return self.getToken(XplorMRParser.Nassign, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_statement" ):
                listener.enterDihedral_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_statement" ):
                listener.exitDihedral_statement(self)




    def dihedral_statement(self):

        localctx = XplorMRParser.Dihedral_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_dihedral_statement)
        self._la = 0 # Token type
        try:
            self.state = 506
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 494
                    self.dihedral_assign()
                    self.state = 499
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Nassign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 500
                self.match(XplorMRParser.Nassign)
                self.state = 501
                self.match(XplorMRParser.Equ_op)
                self.state = 502
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 3)
                self.state = 503
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 504
                self.match(XplorMRParser.Scale)
                self.state = 505
                self.match(XplorMRParser.Real)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dihedral_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dihedral_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDihedral_assign" ):
                listener.enterDihedral_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDihedral_assign" ):
                listener.exitDihedral_assign(self)




    def dihedral_assign(self):

        localctx = XplorMRParser.Dihedral_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_dihedral_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 508
            self.match(XplorMRParser.Assign)
            self.state = 509
            self.selection()
            self.state = 510
            self.selection()
            self.state = 511
            self.selection()
            self.state = 512
            self.selection()
            self.state = 513
            self.match(XplorMRParser.Real)
            self.state = 514
            self.match(XplorMRParser.Real)
            self.state = 515
            self.match(XplorMRParser.Real)
            self.state = 516
            self.match(XplorMRParser.Integer)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Sani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Sani_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_statement" ):
                listener.enterSani_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_statement" ):
                listener.exitSani_statement(self)




    def sani_statement(self):

        localctx = XplorMRParser.Sani_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_sani_statement)
        self._la = 0 # Token type
        try:
            self.state = 540
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 518
                    self.sani_assign()
                    self.state = 523
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 524
                self.match(XplorMRParser.Classification)
                self.state = 525
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 526
                self.match(XplorMRParser.Coefficients)
                self.state = 527
                self.match(XplorMRParser.Real)
                self.state = 528
                self.match(XplorMRParser.Real)
                self.state = 529
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 530
                self.match(XplorMRParser.ForceConstant)
                self.state = 531
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 532
                self.match(XplorMRParser.Nrestraints)
                self.state = 533
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 534
                self.match(XplorMRParser.Potential)
                self.state = 535
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 536
                self.match(XplorMRParser.Print)
                self.state = 537
                self.match(XplorMRParser.Threshold)
                self.state = 538
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 539
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Sani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_sani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSani_assign" ):
                listener.enterSani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSani_assign" ):
                listener.exitSani_assign(self)




    def sani_assign(self):

        localctx = XplorMRParser.Sani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_sani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 542
            self.match(XplorMRParser.Assign)
            self.state = 543
            self.selection()
            self.state = 544
            self.selection()
            self.state = 545
            self.selection()
            self.state = 546
            self.selection()
            self.state = 547
            self.selection()
            self.state = 548
            self.selection()
            self.state = 549
            self.match(XplorMRParser.Real)
            self.state = 550
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xdip_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xdip_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xdip_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_dist_fix_types(self):
            return self.getToken(XplorMRParser.Rdc_dist_fix_types, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Sign(self):
            return self.getToken(XplorMRParser.Sign, 0)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def Average(self):
            return self.getToken(XplorMRParser.Average, 0)

        def Rdc_avr_methods(self):
            return self.getToken(XplorMRParser.Rdc_avr_methods, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_statement" ):
                listener.enterXdip_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_statement" ):
                listener.exitXdip_statement(self)




    def xdip_statement(self):

        localctx = XplorMRParser.Xdip_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_xdip_statement)
        self._la = 0 # Token type
        try:
            self.state = 582
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 555
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 552
                    self.xdip_assign()
                    self.state = 557
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 558
                self.match(XplorMRParser.Classification)
                self.state = 559
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 3)
                self.state = 560
                self.match(XplorMRParser.Type)
                self.state = 561
                self.match(XplorMRParser.Rdc_dist_fix_types)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 4)
                self.state = 562
                self.match(XplorMRParser.Scale)
                self.state = 563
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Sign]:
                self.enterOuterAlt(localctx, 5)
                self.state = 564
                self.match(XplorMRParser.Sign)
                self.state = 565
                self.match(XplorMRParser.Logical)
                pass
            elif token in [XplorMRParser.Average]:
                self.enterOuterAlt(localctx, 6)
                self.state = 566
                self.match(XplorMRParser.Average)
                self.state = 567
                self.match(XplorMRParser.Rdc_avr_methods)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 7)
                self.state = 568
                self.match(XplorMRParser.Coefficients)
                self.state = 569
                self.match(XplorMRParser.Real)
                self.state = 570
                self.match(XplorMRParser.Real)
                self.state = 571
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 8)
                self.state = 572
                self.match(XplorMRParser.ForceConstant)
                self.state = 573
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 574
                self.match(XplorMRParser.Nrestraints)
                self.state = 575
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 10)
                self.state = 576
                self.match(XplorMRParser.Potential)
                self.state = 577
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 11)
                self.state = 578
                self.match(XplorMRParser.Print)
                self.state = 579
                self.match(XplorMRParser.Threshold)
                self.state = 580
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 581
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xdip_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_xdip_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXdip_assign" ):
                listener.enterXdip_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXdip_assign" ):
                listener.exitXdip_assign(self)




    def xdip_assign(self):

        localctx = XplorMRParser.Xdip_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_xdip_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 584
            self.match(XplorMRParser.Assign)
            self.state = 585
            self.selection()
            self.state = 586
            self.selection()
            self.state = 587
            self.selection()
            self.state = 588
            self.selection()
            self.state = 589
            self.selection()
            self.state = 590
            self.selection()
            self.state = 591
            self.match(XplorMRParser.Real)
            self.state = 592
            self.match(XplorMRParser.Real)
            self.state = 593
            self.match(XplorMRParser.Real)
            self.state = 597
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Real:
                self.state = 594
                self.match(XplorMRParser.Real)
                self.state = 595
                self.match(XplorMRParser.Real)
                self.state = 596
                self.match(XplorMRParser.Real)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def vean_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Vean_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Vean_assignContext,i)


        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_statement" ):
                listener.enterVean_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_statement" ):
                listener.exitVean_statement(self)




    def vean_statement(self):

        localctx = XplorMRParser.Vean_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_vean_statement)
        self._la = 0 # Token type
        try:
            self.state = 622
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 602
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 599
                    self.vean_assign()
                    self.state = 604
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 2)
                self.state = 605
                self.match(XplorMRParser.Cv)
                self.state = 606
                self.match(XplorMRParser.Equ_op)
                self.state = 607
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 3)
                self.state = 608
                self.match(XplorMRParser.Classification)
                self.state = 609
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 610
                self.match(XplorMRParser.ForceConstant)
                self.state = 611
                self.match(XplorMRParser.Real)
                self.state = 612
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 613
                self.match(XplorMRParser.Nrestraints)
                self.state = 614
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 6)
                self.state = 615
                self.match(XplorMRParser.Partition)
                self.state = 616
                self.match(XplorMRParser.Equ_op)
                self.state = 617
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 618
                self.match(XplorMRParser.Print)
                self.state = 619
                self.match(XplorMRParser.Threshold)
                self.state = 620
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 621
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Vean_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_vean_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVean_assign" ):
                listener.enterVean_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVean_assign" ):
                listener.exitVean_assign(self)




    def vean_assign(self):

        localctx = XplorMRParser.Vean_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_vean_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 624
            self.match(XplorMRParser.Assign)
            self.state = 625
            self.selection()
            self.state = 626
            self.selection()
            self.state = 627
            self.selection()
            self.state = 628
            self.selection()
            self.state = 629
            self.match(XplorMRParser.Real)
            self.state = 630
            self.match(XplorMRParser.Real)
            self.state = 631
            self.match(XplorMRParser.Real)
            self.state = 632
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tens_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tens_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Tens_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Tens_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tens_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTens_statement" ):
                listener.enterTens_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTens_statement" ):
                listener.exitTens_statement(self)




    def tens_statement(self):

        localctx = XplorMRParser.Tens_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_tens_statement)
        self._la = 0 # Token type
        try:
            self.state = 652
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 637
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 634
                    self.tens_assign()
                    self.state = 639
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 640
                self.match(XplorMRParser.Classification)
                self.state = 641
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 642
                self.match(XplorMRParser.Coefficients)
                self.state = 643
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 644
                self.match(XplorMRParser.Nrestraints)
                self.state = 645
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 646
                self.match(XplorMRParser.Potential)
                self.state = 647
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 648
                self.match(XplorMRParser.Print)
                self.state = 649
                self.match(XplorMRParser.Threshold)
                self.state = 650
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 651
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Tens_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_tens_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTens_assign" ):
                listener.enterTens_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTens_assign" ):
                listener.exitTens_assign(self)




    def tens_assign(self):

        localctx = XplorMRParser.Tens_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_tens_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 654
            self.match(XplorMRParser.Assign)
            self.state = 655
            self.selection()
            self.state = 656
            self.selection()
            self.state = 657
            self.match(XplorMRParser.Real)
            self.state = 658
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def anis_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Anis_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Anis_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Rdc_anis_types(self):
            return self.getToken(XplorMRParser.Rdc_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_statement" ):
                listener.enterAnis_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_statement" ):
                listener.exitAnis_statement(self)




    def anis_statement(self):

        localctx = XplorMRParser.Anis_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_anis_statement)
        self._la = 0 # Token type
        try:
            self.state = 685
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 663
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 660
                    self.anis_assign()
                    self.state = 665
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 666
                self.match(XplorMRParser.Classification)
                self.state = 667
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 668
                self.match(XplorMRParser.Coefficients)
                self.state = 669
                self.match(XplorMRParser.Real)
                self.state = 670
                self.match(XplorMRParser.Real)
                self.state = 671
                self.match(XplorMRParser.Real)
                self.state = 672
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 673
                self.match(XplorMRParser.ForceConstant)
                self.state = 674
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 675
                self.match(XplorMRParser.Nrestraints)
                self.state = 676
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 677
                self.match(XplorMRParser.Potential)
                self.state = 678
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 679
                self.match(XplorMRParser.Print)
                self.state = 680
                self.match(XplorMRParser.Threshold)
                self.state = 681
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 682
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 683
                self.match(XplorMRParser.Type)
                self.state = 684
                self.match(XplorMRParser.Rdc_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Anis_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_anis_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnis_assign" ):
                listener.enterAnis_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnis_assign" ):
                listener.exitAnis_assign(self)




    def anis_assign(self):

        localctx = XplorMRParser.Anis_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_anis_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 687
            self.match(XplorMRParser.Assign)
            self.state = 688
            self.selection()
            self.state = 689
            self.selection()
            self.state = 690
            self.selection()
            self.state = 691
            self.selection()
            self.state = 692
            self.match(XplorMRParser.Real)
            self.state = 693
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Planar_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Group(self):
            return self.getToken(XplorMRParser.Group, 0)

        def L_brace(self):
            return self.getToken(XplorMRParser.L_brace, 0)

        def group_statement(self):
            return self.getTypedRuleContext(XplorMRParser.Group_statementContext,0)


        def R_brace(self):
            return self.getToken(XplorMRParser.R_brace, 0)

        def Initialize(self):
            return self.getToken(XplorMRParser.Initialize, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_planar_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPlanar_statement" ):
                listener.enterPlanar_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPlanar_statement" ):
                listener.exitPlanar_statement(self)




    def planar_statement(self):

        localctx = XplorMRParser.Planar_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_planar_statement)
        try:
            self.state = 701
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Group]:
                self.enterOuterAlt(localctx, 1)
                self.state = 695
                self.match(XplorMRParser.Group)
                self.state = 696
                self.match(XplorMRParser.L_brace)
                self.state = 697
                self.group_statement()
                self.state = 698
                self.match(XplorMRParser.R_brace)
                pass
            elif token in [XplorMRParser.Initialize]:
                self.enterOuterAlt(localctx, 2)
                self.state = 700
                self.match(XplorMRParser.Initialize)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Group_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Selection(self):
            return self.getToken(XplorMRParser.Selection, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Weight(self):
            return self.getToken(XplorMRParser.Weight, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_group_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroup_statement" ):
                listener.enterGroup_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroup_statement" ):
                listener.exitGroup_statement(self)




    def group_statement(self):

        localctx = XplorMRParser.Group_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_group_statement)
        try:
            self.state = 709
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Selection]:
                self.enterOuterAlt(localctx, 1)
                self.state = 703
                self.match(XplorMRParser.Selection)
                self.state = 704
                self.match(XplorMRParser.Equ_op)
                self.state = 705
                self.selection()
                pass
            elif token in [XplorMRParser.Weight]:
                self.enterOuterAlt(localctx, 2)
                self.state = 706
                self.match(XplorMRParser.Weight)
                self.state = 707
                self.match(XplorMRParser.Equ_op)
                self.state = 708
                self.match(XplorMRParser.Real)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Antidistance_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def xadc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Xadc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Xadc_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_antidistance_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAntidistance_statement" ):
                listener.enterAntidistance_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAntidistance_statement" ):
                listener.exitAntidistance_statement(self)




    def antidistance_statement(self):

        localctx = XplorMRParser.Antidistance_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_antidistance_statement)
        self._la = 0 # Token type
        try:
            self.state = 739
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 711
                    self.xadc_assign()
                    self.state = 716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 717
                self.match(XplorMRParser.Classification)
                self.state = 718
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 3)
                self.state = 719
                self.match(XplorMRParser.Expectation)
                self.state = 720
                self.match(XplorMRParser.Integer)
                self.state = 721
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 722
                self.match(XplorMRParser.ForceConstant)
                self.state = 723
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 724
                self.match(XplorMRParser.Nrestraints)
                self.state = 725
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 6)
                self.state = 726
                self.match(XplorMRParser.Print)
                self.state = 727
                self.match(XplorMRParser.Threshold)
                self.state = 728
                self.match(XplorMRParser.Real)
                self.state = 732
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 729
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 730
                    self.match(XplorMRParser.Classification)
                    self.state = 731
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 7)
                self.state = 734
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 8)
                self.state = 735
                self.match(XplorMRParser.Size)
                self.state = 736
                self.match(XplorMRParser.Real)
                self.state = 737
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 9)
                self.state = 738
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Xadc_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_xadc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXadc_assign" ):
                listener.enterXadc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXadc_assign" ):
                listener.exitXadc_assign(self)




    def xadc_assign(self):

        localctx = XplorMRParser.Xadc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_xadc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.match(XplorMRParser.Assign)
            self.state = 742
            self.selection()
            self.state = 743
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def coup_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Coup_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Coup_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Cv(self):
            return self.getToken(XplorMRParser.Cv, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Partition(self):
            return self.getToken(XplorMRParser.Partition, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(XplorMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoupling_statement" ):
                listener.enterCoupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoupling_statement" ):
                listener.exitCoupling_statement(self)




    def coupling_statement(self):

        localctx = XplorMRParser.Coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 784
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 748
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 745
                    self.coup_assign()
                    self.state = 750
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 751
                self.match(XplorMRParser.Classification)
                self.state = 752
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 753
                self.match(XplorMRParser.Coefficients)
                self.state = 754
                self.match(XplorMRParser.Real)
                self.state = 755
                self.match(XplorMRParser.Real)
                self.state = 756
                self.match(XplorMRParser.Real)
                self.state = 757
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Cv]:
                self.enterOuterAlt(localctx, 4)
                self.state = 758
                self.match(XplorMRParser.Cv)
                self.state = 759
                self.match(XplorMRParser.Equ_op)
                self.state = 760
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.DegEnergy]:
                self.enterOuterAlt(localctx, 5)
                self.state = 761
                self.match(XplorMRParser.DegEnergy)
                self.state = 762
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 763
                self.match(XplorMRParser.ForceConstant)
                self.state = 764
                self.match(XplorMRParser.Real)
                self.state = 766
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Real:
                    self.state = 765
                    self.match(XplorMRParser.Real)


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 768
                self.match(XplorMRParser.Nrestraints)
                self.state = 769
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Partition]:
                self.enterOuterAlt(localctx, 8)
                self.state = 770
                self.match(XplorMRParser.Partition)
                self.state = 771
                self.match(XplorMRParser.Equ_op)
                self.state = 772
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 773
                self.match(XplorMRParser.Potential)
                self.state = 774
                self.match(XplorMRParser.Coupling_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 775
                self.match(XplorMRParser.Print)
                self.state = 776
                self.match(XplorMRParser.Threshold)
                self.state = 777
                self.match(XplorMRParser.Real)
                self.state = 781
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 778
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 779
                    self.match(XplorMRParser.Classification)
                    self.state = 780
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 783
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Coup_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_coup_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCoup_assign" ):
                listener.enterCoup_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCoup_assign" ):
                listener.exitCoup_assign(self)




    def coup_assign(self):

        localctx = XplorMRParser.Coup_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_coup_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 786
            self.match(XplorMRParser.Assign)
            self.state = 787
            self.selection()
            self.state = 788
            self.selection()
            self.state = 789
            self.selection()
            self.state = 790
            self.selection()
            self.state = 796
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 791
                self.selection()
                self.state = 792
                self.selection()
                self.state = 793
                self.selection()
                self.state = 794
                self.selection()


            self.state = 798
            self.match(XplorMRParser.Real)
            self.state = 799
            self.match(XplorMRParser.Real)
            self.state = 802
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Real:
                self.state = 800
                self.match(XplorMRParser.Real)
                self.state = 801
                self.match(XplorMRParser.Real)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def carbon_shift_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def PhiStep(self):
            return self.getToken(XplorMRParser.PhiStep, 0)

        def PsiStep(self):
            return self.getToken(XplorMRParser.PsiStep, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(XplorMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def carbon_shift_rcoil(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Carbon_shift_rcoilContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Carbon_shift_rcoilContext,i)


        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_statement" ):
                listener.enterCarbon_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_statement" ):
                listener.exitCarbon_shift_statement(self)




    def carbon_shift_statement(self):

        localctx = XplorMRParser.Carbon_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_carbon_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 839
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 807
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 804
                    self.carbon_shift_assign()
                    self.state = 809
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 810
                self.match(XplorMRParser.Classification)
                self.state = 811
                self.match(XplorMRParser.Simple_name)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 812
                self.match(XplorMRParser.Expectation)
                self.state = 813
                self.match(XplorMRParser.Integer)
                self.state = 814
                self.match(XplorMRParser.Integer)
                self.state = 815
                self.match(XplorMRParser.Real)
                self.state = 816
                self.match(XplorMRParser.Real)
                self.state = 817
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 818
                self.match(XplorMRParser.ForceConstant)
                self.state = 819
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 820
                self.match(XplorMRParser.Nrestraints)
                self.state = 821
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 822
                self.match(XplorMRParser.PhiStep)
                self.state = 823
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 824
                self.match(XplorMRParser.PsiStep)
                self.state = 825
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 826
                self.match(XplorMRParser.Potential)
                self.state = 827
                self.match(XplorMRParser.Coupling_potential)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 828
                self.match(XplorMRParser.Print)
                self.state = 829
                self.match(XplorMRParser.Threshold)
                self.state = 830
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 834
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Rcoil:
                    self.state = 831
                    self.carbon_shift_rcoil()
                    self.state = 836
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 837
                self.match(XplorMRParser.Reset)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 838
                self.match(XplorMRParser.Zero)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_assign" ):
                listener.enterCarbon_shift_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_assign" ):
                listener.exitCarbon_shift_assign(self)




    def carbon_shift_assign(self):

        localctx = XplorMRParser.Carbon_shift_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_carbon_shift_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 841
            self.match(XplorMRParser.Assign)
            self.state = 842
            self.selection()
            self.state = 843
            self.selection()
            self.state = 844
            self.selection()
            self.state = 845
            self.selection()
            self.state = 846
            self.selection()
            self.state = 847
            self.match(XplorMRParser.Real)
            self.state = 848
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Carbon_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_carbon_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCarbon_shift_rcoil" ):
                listener.enterCarbon_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCarbon_shift_rcoil" ):
                listener.exitCarbon_shift_rcoil(self)




    def carbon_shift_rcoil(self):

        localctx = XplorMRParser.Carbon_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_carbon_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 850
            self.match(XplorMRParser.Rcoil)
            self.state = 851
            self.selection()
            self.state = 852
            self.match(XplorMRParser.Real)
            self.state = 853
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def observed(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.ObservedContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.ObservedContext,i)


        def proton_shift_rcoil(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_rcoilContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_rcoilContext,i)


        def proton_shift_anisotropy(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_anisotropyContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_anisotropyContext,i)


        def proton_shift_amides(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_amidesContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_amidesContext,i)


        def proton_shift_carbons(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_carbonsContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_carbonsContext,i)


        def proton_shift_nitrogens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_nitrogensContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_nitrogensContext,i)


        def proton_shift_oxygens(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_oxygensContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_oxygensContext,i)


        def proton_shift_ring_atoms(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_ring_atomsContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_ring_atomsContext,i)


        def proton_shift_alphas_and_amides(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Proton_shift_alphas_and_amidesContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Proton_shift_alphas_and_amidesContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def DegEnergy(self):
            return self.getToken(XplorMRParser.DegEnergy, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Coupling_potential(self):
            return self.getToken(XplorMRParser.Coupling_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_statement" ):
                listener.enterProton_shift_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_statement" ):
                listener.exitProton_shift_statement(self)




    def proton_shift_statement(self):

        localctx = XplorMRParser.Proton_shift_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_proton_shift_statement)
        self._la = 0 # Token type
        try:
            self.state = 932
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 858
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Observed:
                    self.state = 855
                    self.observed()
                    self.state = 860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 864
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Rcoil:
                    self.state = 861
                    self.proton_shift_rcoil()
                    self.state = 866
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 870
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Anisotropy:
                    self.state = 867
                    self.proton_shift_anisotropy()
                    self.state = 872
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 876
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Amides:
                    self.state = 873
                    self.proton_shift_amides()
                    self.state = 878
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Carbons:
                    self.state = 879
                    self.proton_shift_carbons()
                    self.state = 884
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Nitrogens:
                    self.state = 885
                    self.proton_shift_nitrogens()
                    self.state = 890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Oxygens:
                    self.state = 891
                    self.proton_shift_oxygens()
                    self.state = 896
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 900
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.RingAtoms:
                    self.state = 897
                    self.proton_shift_ring_atoms()
                    self.state = 902
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 906
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.AlphasAndAmides:
                    self.state = 903
                    self.proton_shift_alphas_and_amides()
                    self.state = 908
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 909
                self.match(XplorMRParser.Classification)
                self.state = 910
                self.match(XplorMRParser.Simple_name)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 911
                self.match(XplorMRParser.Error)
                self.state = 912
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 913
                self.match(XplorMRParser.DegEnergy)
                self.state = 914
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 915
                self.match(XplorMRParser.ForceConstant)
                self.state = 916
                self.match(XplorMRParser.Real)
                self.state = 918
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Real:
                    self.state = 917
                    self.match(XplorMRParser.Real)


                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 920
                self.match(XplorMRParser.Potential)
                self.state = 921
                self.match(XplorMRParser.Coupling_potential)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 922
                self.match(XplorMRParser.Print)
                self.state = 923
                self.match(XplorMRParser.Threshold)
                self.state = 924
                self.match(XplorMRParser.Real)
                self.state = 928
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 925
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 926
                    self.match(XplorMRParser.Classification)
                    self.state = 927
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 930
                self.match(XplorMRParser.Simple_name)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 931
                self.match(XplorMRParser.Reset)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ObservedContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Observed(self):
            return self.getToken(XplorMRParser.Observed, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_observed

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterObserved" ):
                listener.enterObserved(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitObserved" ):
                listener.exitObserved(self)




    def observed(self):

        localctx = XplorMRParser.ObservedContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_observed)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 934
            self.match(XplorMRParser.Observed)
            self.state = 935
            self.selection()
            self.state = 937
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 936
                self.selection()


            self.state = 939
            self.match(XplorMRParser.Real)
            self.state = 941
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Real:
                self.state = 940
                self.match(XplorMRParser.Real)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_rcoilContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Rcoil(self):
            return self.getToken(XplorMRParser.Rcoil, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_rcoil

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_rcoil" ):
                listener.enterProton_shift_rcoil(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_rcoil" ):
                listener.exitProton_shift_rcoil(self)




    def proton_shift_rcoil(self):

        localctx = XplorMRParser.Proton_shift_rcoilContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_proton_shift_rcoil)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 943
            self.match(XplorMRParser.Rcoil)
            self.state = 944
            self.selection()
            self.state = 945
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_anisotropyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Anisotropy(self):
            return self.getToken(XplorMRParser.Anisotropy, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Logical(self):
            return self.getToken(XplorMRParser.Logical, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_anisotropy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_anisotropy" ):
                listener.enterProton_shift_anisotropy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_anisotropy" ):
                listener.exitProton_shift_anisotropy(self)




    def proton_shift_anisotropy(self):

        localctx = XplorMRParser.Proton_shift_anisotropyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_proton_shift_anisotropy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.match(XplorMRParser.Anisotropy)
            self.state = 948
            self.selection()
            self.state = 949
            self.selection()
            self.state = 950
            self.selection()
            self.state = 951
            self.match(XplorMRParser.Simple_name)
            self.state = 953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.Logical:
                self.state = 952
                self.match(XplorMRParser.Logical)


            self.state = 955
            self.match(XplorMRParser.Simple_name)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Amides(self):
            return self.getToken(XplorMRParser.Amides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_amides" ):
                listener.enterProton_shift_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_amides" ):
                listener.exitProton_shift_amides(self)




    def proton_shift_amides(self):

        localctx = XplorMRParser.Proton_shift_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_proton_shift_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 957
            self.match(XplorMRParser.Amides)
            self.state = 958
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_carbonsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Carbons(self):
            return self.getToken(XplorMRParser.Carbons, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_carbons

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_carbons" ):
                listener.enterProton_shift_carbons(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_carbons" ):
                listener.exitProton_shift_carbons(self)




    def proton_shift_carbons(self):

        localctx = XplorMRParser.Proton_shift_carbonsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_proton_shift_carbons)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 960
            self.match(XplorMRParser.Carbons)
            self.state = 961
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_nitrogensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nitrogens(self):
            return self.getToken(XplorMRParser.Nitrogens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_nitrogens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_nitrogens" ):
                listener.enterProton_shift_nitrogens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_nitrogens" ):
                listener.exitProton_shift_nitrogens(self)




    def proton_shift_nitrogens(self):

        localctx = XplorMRParser.Proton_shift_nitrogensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_proton_shift_nitrogens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 963
            self.match(XplorMRParser.Nitrogens)
            self.state = 964
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_oxygensContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Oxygens(self):
            return self.getToken(XplorMRParser.Oxygens, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_oxygens

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_oxygens" ):
                listener.enterProton_shift_oxygens(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_oxygens" ):
                listener.exitProton_shift_oxygens(self)




    def proton_shift_oxygens(self):

        localctx = XplorMRParser.Proton_shift_oxygensContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_proton_shift_oxygens)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 966
            self.match(XplorMRParser.Oxygens)
            self.state = 967
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_ring_atomsContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RingAtoms(self):
            return self.getToken(XplorMRParser.RingAtoms, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_ring_atoms

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_ring_atoms" ):
                listener.enterProton_shift_ring_atoms(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_ring_atoms" ):
                listener.exitProton_shift_ring_atoms(self)




    def proton_shift_ring_atoms(self):

        localctx = XplorMRParser.Proton_shift_ring_atomsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_proton_shift_ring_atoms)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 969
            self.match(XplorMRParser.RingAtoms)
            self.state = 970
            self.match(XplorMRParser.Simple_name)
            self.state = 971
            self.selection()
            self.state = 972
            self.selection()
            self.state = 973
            self.selection()
            self.state = 974
            self.selection()
            self.state = 975
            self.selection()
            self.state = 977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 976
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Proton_shift_alphas_and_amidesContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AlphasAndAmides(self):
            return self.getToken(XplorMRParser.AlphasAndAmides, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def getRuleIndex(self):
            return XplorMRParser.RULE_proton_shift_alphas_and_amides

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProton_shift_alphas_and_amides" ):
                listener.enterProton_shift_alphas_and_amides(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProton_shift_alphas_and_amides" ):
                listener.exitProton_shift_alphas_and_amides(self)




    def proton_shift_alphas_and_amides(self):

        localctx = XplorMRParser.Proton_shift_alphas_and_amidesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_proton_shift_alphas_and_amides)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 979
            self.match(XplorMRParser.AlphasAndAmides)
            self.state = 980
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Ramachandran_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def rama_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Rama_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Rama_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Phase(self):
            return self.getToken(XplorMRParser.Phase, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Shape(self):
            return self.getToken(XplorMRParser.Shape, 0)

        def Gauss_or_Quart(self):
            return self.getToken(XplorMRParser.Gauss_or_Quart, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Dimensions(self):
            return self.getToken(XplorMRParser.Dimensions, 0)

        def Sort(self):
            return self.getToken(XplorMRParser.Sort, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_ramachandran_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRamachandran_statement" ):
                listener.enterRamachandran_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRamachandran_statement" ):
                listener.exitRamachandran_statement(self)




    def ramachandran_statement(self):

        localctx = XplorMRParser.Ramachandran_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_ramachandran_statement)
        self._la = 0 # Token type
        try:
            self.state = 1080
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 982
                    self.rama_assign()
                    self.state = 987
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 988
                self.match(XplorMRParser.Classification)
                self.state = 989
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 990
                self.match(XplorMRParser.Cutoff)
                self.state = 991
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 992
                self.match(XplorMRParser.ForceConstant)
                self.state = 993
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 5)
                self.state = 994
                self.match(XplorMRParser.Gaussian)
                self.state = 995
                self.match(XplorMRParser.Real)
                self.state = 996
                self.match(XplorMRParser.Real)
                self.state = 997
                self.match(XplorMRParser.Real)
                self.state = 1001
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
                if la_ == 1:
                    self.state = 998
                    self.match(XplorMRParser.Real)
                    self.state = 999
                    self.match(XplorMRParser.Real)
                    self.state = 1000
                    self.match(XplorMRParser.Real)


                self.state = 1006
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                if la_ == 1:
                    self.state = 1003
                    self.match(XplorMRParser.Real)
                    self.state = 1004
                    self.match(XplorMRParser.Real)
                    self.state = 1005
                    self.match(XplorMRParser.Real)


                self.state = 1011
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Real:
                    self.state = 1008
                    self.match(XplorMRParser.Real)
                    self.state = 1009
                    self.match(XplorMRParser.Real)
                    self.state = 1010
                    self.match(XplorMRParser.Real)


                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1013
                self.match(XplorMRParser.Nrestraints)
                self.state = 1014
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Phase]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1015
                self.match(XplorMRParser.Phase)
                self.state = 1016
                self.match(XplorMRParser.Real)
                self.state = 1017
                self.match(XplorMRParser.Real)
                self.state = 1018
                self.match(XplorMRParser.Real)
                self.state = 1022
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,60,self._ctx)
                if la_ == 1:
                    self.state = 1019
                    self.match(XplorMRParser.Real)
                    self.state = 1020
                    self.match(XplorMRParser.Real)
                    self.state = 1021
                    self.match(XplorMRParser.Real)


                self.state = 1027
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 1024
                    self.match(XplorMRParser.Real)
                    self.state = 1025
                    self.match(XplorMRParser.Real)
                    self.state = 1026
                    self.match(XplorMRParser.Real)


                self.state = 1032
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Real:
                    self.state = 1029
                    self.match(XplorMRParser.Real)
                    self.state = 1030
                    self.match(XplorMRParser.Real)
                    self.state = 1031
                    self.match(XplorMRParser.Real)


                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1034
                self.match(XplorMRParser.Print)
                self.state = 1035
                self.match(XplorMRParser.Threshold)
                self.state = 1036
                self.match(XplorMRParser.Real)
                self.state = 1040
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1037
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1038
                    self.match(XplorMRParser.Classification)
                    self.state = 1039
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1042
                self.match(XplorMRParser.Quartic)
                self.state = 1043
                self.match(XplorMRParser.Real)
                self.state = 1044
                self.match(XplorMRParser.Real)
                self.state = 1045
                self.match(XplorMRParser.Real)
                self.state = 1049
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 1046
                    self.match(XplorMRParser.Real)
                    self.state = 1047
                    self.match(XplorMRParser.Real)
                    self.state = 1048
                    self.match(XplorMRParser.Real)


                self.state = 1054
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 1051
                    self.match(XplorMRParser.Real)
                    self.state = 1052
                    self.match(XplorMRParser.Real)
                    self.state = 1053
                    self.match(XplorMRParser.Real)


                self.state = 1059
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Real:
                    self.state = 1056
                    self.match(XplorMRParser.Real)
                    self.state = 1057
                    self.match(XplorMRParser.Real)
                    self.state = 1058
                    self.match(XplorMRParser.Real)


                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1061
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1062
                self.match(XplorMRParser.Scale)
                self.state = 1063
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Shape]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1064
                self.match(XplorMRParser.Shape)
                self.state = 1065
                self.match(XplorMRParser.Gauss_or_Quart)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1066
                self.match(XplorMRParser.Size)
                self.state = 1067
                self.match(XplorMRParser.Dimensions)
                self.state = 1068
                self.match(XplorMRParser.Real)
                self.state = 1070
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,67,self._ctx)
                if la_ == 1:
                    self.state = 1069
                    self.match(XplorMRParser.Real)


                self.state = 1073
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                if la_ == 1:
                    self.state = 1072
                    self.match(XplorMRParser.Real)


                self.state = 1076
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Real:
                    self.state = 1075
                    self.match(XplorMRParser.Real)


                pass
            elif token in [XplorMRParser.Sort]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1078
                self.match(XplorMRParser.Sort)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1079
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Rama_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_rama_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRama_assign" ):
                listener.enterRama_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRama_assign" ):
                listener.exitRama_assign(self)




    def rama_assign(self):

        localctx = XplorMRParser.Rama_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_rama_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.match(XplorMRParser.Assign)
            self.state = 1083
            self.selection()
            self.state = 1084
            self.selection()
            self.state = 1085
            self.selection()
            self.state = 1086
            self.selection()
            self.state = 1092
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,71,self._ctx)
            if la_ == 1:
                self.state = 1087
                self.selection()
                self.state = 1088
                self.selection()
                self.state = 1089
                self.selection()
                self.state = 1090
                self.selection()


            self.state = 1099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.state = 1094
                self.selection()
                self.state = 1095
                self.selection()
                self.state = 1096
                self.selection()
                self.state = 1097
                self.selection()


            self.state = 1106
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1101
                self.selection()
                self.state = 1102
                self.selection()
                self.state = 1103
                self.selection()
                self.state = 1104
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Collapse_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self):
            return self.getTypedRuleContext(XplorMRParser.SelectionContext,0)


        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_collapse_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollapse_statement" ):
                listener.enterCollapse_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollapse_statement" ):
                listener.exitCollapse_statement(self)




    def collapse_statement(self):

        localctx = XplorMRParser.Collapse_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_collapse_statement)
        try:
            self.state = 1117
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1108
                self.match(XplorMRParser.Scale)
                self.state = 1109
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Assign]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1110
                self.match(XplorMRParser.Assign)
                self.state = 1111
                self.selection()
                self.state = 1112
                self.match(XplorMRParser.Real)
                self.state = 1113
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1115
                self.match(XplorMRParser.Print)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1116
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Diffusion_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dani_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Dani_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Dani_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Diff_anis_types(self):
            return self.getToken(XplorMRParser.Diff_anis_types, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_diffusion_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiffusion_statement" ):
                listener.enterDiffusion_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiffusion_statement" ):
                listener.exitDiffusion_statement(self)




    def diffusion_statement(self):

        localctx = XplorMRParser.Diffusion_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_diffusion_statement)
        self._la = 0 # Token type
        try:
            self.state = 1145
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1119
                    self.dani_assign()
                    self.state = 1124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1125
                self.match(XplorMRParser.Classification)
                self.state = 1126
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1127
                self.match(XplorMRParser.Coefficients)
                self.state = 1128
                self.match(XplorMRParser.Real)
                self.state = 1129
                self.match(XplorMRParser.Real)
                self.state = 1130
                self.match(XplorMRParser.Real)
                self.state = 1131
                self.match(XplorMRParser.Real)
                self.state = 1132
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1133
                self.match(XplorMRParser.ForceConstant)
                self.state = 1134
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1135
                self.match(XplorMRParser.Nrestraints)
                self.state = 1136
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1137
                self.match(XplorMRParser.Potential)
                self.state = 1138
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1139
                self.match(XplorMRParser.Print)
                self.state = 1140
                self.match(XplorMRParser.Threshold)
                self.state = 1141
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1142
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1143
                self.match(XplorMRParser.Type)
                self.state = 1144
                self.match(XplorMRParser.Diff_anis_types)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Dani_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_dani_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDani_assign" ):
                listener.enterDani_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDani_assign" ):
                listener.exitDani_assign(self)




    def dani_assign(self):

        localctx = XplorMRParser.Dani_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_dani_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1147
            self.match(XplorMRParser.Assign)
            self.state = 1148
            self.selection()
            self.state = 1149
            self.selection()
            self.state = 1150
            self.selection()
            self.state = 1151
            self.selection()
            self.state = 1152
            self.selection()
            self.state = 1153
            self.selection()
            self.state = 1154
            self.match(XplorMRParser.Real)
            self.state = 1155
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orientation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def orie_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Orie_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Orie_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Cutoff(self):
            return self.getToken(XplorMRParser.Cutoff, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Height(self):
            return self.getToken(XplorMRParser.Height, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Gaussian(self):
            return self.getToken(XplorMRParser.Gaussian, 0)

        def MaxGaussians(self):
            return self.getToken(XplorMRParser.MaxGaussians, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def NewGaussian(self):
            return self.getToken(XplorMRParser.NewGaussian, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Quartic(self):
            return self.getToken(XplorMRParser.Quartic, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_orientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrientation_statement" ):
                listener.enterOrientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrientation_statement" ):
                listener.exitOrientation_statement(self)




    def orientation_statement(self):

        localctx = XplorMRParser.Orientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_orientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1215
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1157
                    self.orie_assign()
                    self.state = 1162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1163
                self.match(XplorMRParser.Classification)
                self.state = 1164
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Cutoff]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1165
                self.match(XplorMRParser.Cutoff)
                self.state = 1166
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Height]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1167
                self.match(XplorMRParser.Height)
                self.state = 1168
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1169
                self.match(XplorMRParser.ForceConstant)
                self.state = 1170
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Gaussian]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1171
                self.match(XplorMRParser.Gaussian)
                self.state = 1172
                self.match(XplorMRParser.Real)
                self.state = 1173
                self.match(XplorMRParser.Real)
                self.state = 1174
                self.match(XplorMRParser.Real)
                self.state = 1175
                self.match(XplorMRParser.Real)
                self.state = 1176
                self.match(XplorMRParser.Real)
                self.state = 1177
                self.match(XplorMRParser.Real)
                self.state = 1178
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.MaxGaussians]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1179
                self.match(XplorMRParser.MaxGaussians)
                self.state = 1180
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.NewGaussian]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1181
                self.match(XplorMRParser.NewGaussian)
                self.state = 1182
                self.match(XplorMRParser.Real)
                self.state = 1183
                self.match(XplorMRParser.Real)
                self.state = 1184
                self.match(XplorMRParser.Real)
                self.state = 1185
                self.match(XplorMRParser.Real)
                self.state = 1186
                self.match(XplorMRParser.Real)
                self.state = 1187
                self.match(XplorMRParser.Real)
                self.state = 1188
                self.match(XplorMRParser.Real)
                self.state = 1189
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1190
                self.match(XplorMRParser.Nrestraints)
                self.state = 1191
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1192
                self.match(XplorMRParser.Print)
                self.state = 1193
                self.match(XplorMRParser.Threshold)
                self.state = 1194
                self.match(XplorMRParser.Real)
                self.state = 1198
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1195
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1196
                    self.match(XplorMRParser.Classification)
                    self.state = 1197
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Quartic]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1200
                self.match(XplorMRParser.Quartic)
                self.state = 1201
                self.match(XplorMRParser.Real)
                self.state = 1202
                self.match(XplorMRParser.Real)
                self.state = 1203
                self.match(XplorMRParser.Real)
                self.state = 1204
                self.match(XplorMRParser.Real)
                self.state = 1205
                self.match(XplorMRParser.Real)
                self.state = 1206
                self.match(XplorMRParser.Real)
                self.state = 1207
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1208
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Residue]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1209
                self.match(XplorMRParser.Residue)
                self.state = 1210
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1211
                self.match(XplorMRParser.Size)
                self.state = 1212
                self.match(XplorMRParser.Real)
                self.state = 1213
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1214
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Orie_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_orie_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrie_assign" ):
                listener.enterOrie_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrie_assign" ):
                listener.exitOrie_assign(self)




    def orie_assign(self):

        localctx = XplorMRParser.Orie_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_orie_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1217
            self.match(XplorMRParser.Assign)
            self.state = 1218
            self.selection()
            self.state = 1219
            self.selection()
            self.state = 1220
            self.selection()
            self.state = 1221
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Type(self):
            return self.getToken(XplorMRParser.Type, 0)

        def Csa_types(self):
            return self.getToken(XplorMRParser.Csa_types, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_statement" ):
                listener.enterCsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_statement" ):
                listener.exitCsa_statement(self)




    def csa_statement(self):

        localctx = XplorMRParser.Csa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_csa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1253
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1226
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1223
                    self.csa_assign()
                    self.state = 1228
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1229
                self.match(XplorMRParser.Classification)
                self.state = 1230
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1231
                self.match(XplorMRParser.Scale)
                self.state = 1232
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Type]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1233
                self.match(XplorMRParser.Type)
                self.state = 1234
                self.match(XplorMRParser.Csa_types)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1235
                self.match(XplorMRParser.Coefficients)
                self.state = 1236
                self.match(XplorMRParser.Real)
                self.state = 1237
                self.match(XplorMRParser.Real)
                self.state = 1238
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1239
                self.match(XplorMRParser.Sigma)
                self.state = 1240
                self.match(XplorMRParser.Real)
                self.state = 1241
                self.match(XplorMRParser.Real)
                self.state = 1242
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1243
                self.match(XplorMRParser.ForceConstant)
                self.state = 1244
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1245
                self.match(XplorMRParser.Nrestraints)
                self.state = 1246
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1247
                self.match(XplorMRParser.Potential)
                self.state = 1248
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1249
                self.match(XplorMRParser.Print)
                self.state = 1250
                self.match(XplorMRParser.Threshold)
                self.state = 1251
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1252
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Csa_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_csa_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCsa_assign" ):
                listener.enterCsa_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCsa_assign" ):
                listener.exitCsa_assign(self)




    def csa_assign(self):

        localctx = XplorMRParser.Csa_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_csa_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1255
            self.match(XplorMRParser.Assign)
            self.state = 1256
            self.selection()
            self.state = 1257
            self.selection()
            self.state = 1258
            self.selection()
            self.state = 1259
            self.selection()
            self.state = 1260
            self.selection()
            self.state = 1261
            self.selection()
            self.state = 1262
            self.selection()
            self.state = 1263
            self.match(XplorMRParser.Real)
            self.state = 1264
            self.match(XplorMRParser.Real)
            self.state = 1265
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcsa_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def csa_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Csa_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Csa_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Scale(self):
            return self.getToken(XplorMRParser.Scale, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Sigma(self):
            return self.getToken(XplorMRParser.Sigma, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcsa_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcsa_statement" ):
                listener.enterPcsa_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcsa_statement" ):
                listener.exitPcsa_statement(self)




    def pcsa_statement(self):

        localctx = XplorMRParser.Pcsa_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_pcsa_statement)
        self._la = 0 # Token type
        try:
            self.state = 1296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1267
                    self.csa_assign()
                    self.state = 1272
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1273
                self.match(XplorMRParser.Classification)
                self.state = 1274
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Scale]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1275
                self.match(XplorMRParser.Scale)
                self.state = 1276
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1277
                self.match(XplorMRParser.Coefficients)
                self.state = 1278
                self.match(XplorMRParser.Real)
                self.state = 1279
                self.match(XplorMRParser.Real)
                self.state = 1280
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Sigma]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1281
                self.match(XplorMRParser.Sigma)
                self.state = 1282
                self.match(XplorMRParser.Real)
                self.state = 1283
                self.match(XplorMRParser.Real)
                self.state = 1284
                self.match(XplorMRParser.Real)
                self.state = 1285
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1286
                self.match(XplorMRParser.ForceConstant)
                self.state = 1287
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1288
                self.match(XplorMRParser.Nrestraints)
                self.state = 1289
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1290
                self.match(XplorMRParser.Potential)
                self.state = 1291
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1292
                self.match(XplorMRParser.Print)
                self.state = 1293
                self.match(XplorMRParser.Threshold)
                self.state = 1294
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1295
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_coupling_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def one_bond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.One_bond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.One_bond_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_coupling_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_coupling_statement" ):
                listener.enterOne_bond_coupling_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_coupling_statement" ):
                listener.exitOne_bond_coupling_statement(self)




    def one_bond_coupling_statement(self):

        localctx = XplorMRParser.One_bond_coupling_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_one_bond_coupling_statement)
        self._la = 0 # Token type
        try:
            self.state = 1324
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1301
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1298
                    self.one_bond_assign()
                    self.state = 1303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1304
                self.match(XplorMRParser.Classification)
                self.state = 1305
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1306
                self.match(XplorMRParser.Coefficients)
                self.state = 1307
                self.match(XplorMRParser.Real)
                self.state = 1308
                self.match(XplorMRParser.Real)
                self.state = 1309
                self.match(XplorMRParser.Real)
                self.state = 1310
                self.match(XplorMRParser.Real)
                self.state = 1311
                self.match(XplorMRParser.Real)
                self.state = 1312
                self.match(XplorMRParser.Real)
                self.state = 1313
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1314
                self.match(XplorMRParser.ForceConstant)
                self.state = 1315
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1316
                self.match(XplorMRParser.Nrestraints)
                self.state = 1317
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1318
                self.match(XplorMRParser.Potential)
                self.state = 1319
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1320
                self.match(XplorMRParser.Print)
                self.state = 1321
                self.match(XplorMRParser.Threshold)
                self.state = 1322
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1323
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class One_bond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_one_bond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOne_bond_assign" ):
                listener.enterOne_bond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOne_bond_assign" ):
                listener.exitOne_bond_assign(self)




    def one_bond_assign(self):

        localctx = XplorMRParser.One_bond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_one_bond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1326
            self.match(XplorMRParser.Assign)
            self.state = 1327
            self.selection()
            self.state = 1328
            self.selection()
            self.state = 1329
            self.selection()
            self.state = 1330
            self.selection()
            self.state = 1331
            self.selection()
            self.state = 1332
            self.selection()
            self.state = 1333
            self.selection()
            self.state = 1334
            self.selection()
            self.state = 1335
            self.match(XplorMRParser.Real)
            self.state = 1336
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def angle_db_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Angle_db_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Angle_db_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def DerivFlag(self):
            return self.getToken(XplorMRParser.DerivFlag, 0)

        def Expectation(self):
            return self.getToken(XplorMRParser.Expectation, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Error(self):
            return self.getToken(XplorMRParser.Error, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Size(self):
            return self.getToken(XplorMRParser.Size, 0)

        def Angle_dihedral(self):
            return self.getToken(XplorMRParser.Angle_dihedral, 0)

        def Zero(self):
            return self.getToken(XplorMRParser.Zero, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_statement" ):
                listener.enterAngle_db_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_statement" ):
                listener.exitAngle_db_statement(self)




    def angle_db_statement(self):

        localctx = XplorMRParser.Angle_db_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_angle_db_statement)
        self._la = 0 # Token type
        try:
            self.state = 1374
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1338
                    self.angle_db_assign()
                    self.state = 1343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1344
                self.match(XplorMRParser.Classification)
                self.state = 1345
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.DerivFlag]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1346
                self.match(XplorMRParser.DerivFlag)
                self.state = 1347
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Expectation]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1348
                self.match(XplorMRParser.Expectation)
                self.state = 1349
                self.match(XplorMRParser.Integer)
                self.state = 1350
                self.match(XplorMRParser.Integer)
                self.state = 1351
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Error]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1352
                self.match(XplorMRParser.Error)
                self.state = 1353
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1354
                self.match(XplorMRParser.ForceConstant)
                self.state = 1355
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1356
                self.match(XplorMRParser.Nrestraints)
                self.state = 1357
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1358
                self.match(XplorMRParser.Potential)
                self.state = 1359
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1360
                self.match(XplorMRParser.Print)
                self.state = 1361
                self.match(XplorMRParser.Threshold)
                self.state = 1362
                self.match(XplorMRParser.Real)
                self.state = 1366
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1363
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1364
                    self.match(XplorMRParser.Classification)
                    self.state = 1365
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1368
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Size]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1369
                self.match(XplorMRParser.Size)
                self.state = 1370
                self.match(XplorMRParser.Angle_dihedral)
                self.state = 1371
                self.match(XplorMRParser.Integer)
                self.state = 1372
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Zero]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1373
                self.match(XplorMRParser.Zero)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Angle_db_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_angle_db_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAngle_db_assign" ):
                listener.enterAngle_db_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAngle_db_assign" ):
                listener.exitAngle_db_assign(self)




    def angle_db_assign(self):

        localctx = XplorMRParser.Angle_db_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_angle_db_assign)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1376
            self.match(XplorMRParser.Assign)
            self.state = 1377
            self.selection()
            self.state = 1378
            self.selection()
            self.state = 1379
            self.selection()
            self.state = 1380
            self.selection()
            self.state = 1381
            self.selection()
            self.state = 1382
            self.selection()
            self.state = 1383
            self.selection()
            self.state = 1384
            self.selection()
            self.state = 1385
            self.selection()
            self.state = 1386
            self.selection()
            self.state = 1387
            self.selection()
            self.state = 1389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==XplorMRParser.L_paren:
                self.state = 1388
                self.selection()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pre_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pre_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pre_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Equ_op(self):
            return self.getToken(XplorMRParser.Equ_op, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Potential(self):
            return self.getToken(XplorMRParser.Potential, 0)

        def Rdc_potential(self):
            return self.getToken(XplorMRParser.Rdc_potential, 0)

        def Kconst(self):
            return self.getToken(XplorMRParser.Kconst, 0)

        def Omega(self):
            return self.getToken(XplorMRParser.Omega, 0)

        def Tauc(self):
            return self.getToken(XplorMRParser.Tauc, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Debug(self):
            return self.getToken(XplorMRParser.Debug, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_statement" ):
                listener.enterPre_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_statement" ):
                listener.exitPre_statement(self)




    def pre_statement(self):

        localctx = XplorMRParser.Pre_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_pre_statement)
        self._la = 0 # Token type
        try:
            self.state = 1434
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1394
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1391
                    self.pre_assign()
                    self.state = 1396
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1397
                self.match(XplorMRParser.Classification)
                self.state = 1398
                self.match(XplorMRParser.Equ_op)
                self.state = 1399
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1400
                self.match(XplorMRParser.ForceConstant)
                self.state = 1401
                self.match(XplorMRParser.Equ_op)
                self.state = 1402
                self.match(XplorMRParser.Simple_name)
                self.state = 1403
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1404
                self.match(XplorMRParser.Nrestraints)
                self.state = 1405
                self.match(XplorMRParser.Equ_op)
                self.state = 1406
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Potential]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1407
                self.match(XplorMRParser.Potential)
                self.state = 1408
                self.match(XplorMRParser.Equ_op)
                self.state = 1409
                self.match(XplorMRParser.Simple_name)
                self.state = 1410
                self.match(XplorMRParser.Rdc_potential)
                pass
            elif token in [XplorMRParser.Kconst]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1411
                self.match(XplorMRParser.Kconst)
                self.state = 1412
                self.match(XplorMRParser.Equ_op)
                self.state = 1413
                self.match(XplorMRParser.Simple_name)
                self.state = 1414
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Omega]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1415
                self.match(XplorMRParser.Omega)
                self.state = 1416
                self.match(XplorMRParser.Equ_op)
                self.state = 1417
                self.match(XplorMRParser.Simple_name)
                self.state = 1418
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Tauc]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1419
                self.match(XplorMRParser.Tauc)
                self.state = 1420
                self.match(XplorMRParser.Equ_op)
                self.state = 1421
                self.match(XplorMRParser.Simple_name)
                self.state = 1422
                self.match(XplorMRParser.Real)
                self.state = 1423
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1424
                self.match(XplorMRParser.Print)
                self.state = 1425
                self.match(XplorMRParser.Threshold)
                self.state = 1426
                self.match(XplorMRParser.Real)
                self.state = 1430
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1427
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1428
                    self.match(XplorMRParser.Classification)
                    self.state = 1429
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1432
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Debug]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1433
                self.match(XplorMRParser.Debug)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pre_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pre_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPre_assign" ):
                listener.enterPre_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPre_assign" ):
                listener.exitPre_assign(self)




    def pre_assign(self):

        localctx = XplorMRParser.Pre_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_pre_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1436
            self.match(XplorMRParser.Assign)
            self.state = 1437
            self.selection()
            self.state = 1438
            self.selection()
            self.state = 1439
            self.match(XplorMRParser.Real)
            self.state = 1440
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pcs_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pcs_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pcs_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_statement" ):
                listener.enterPcs_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_statement" ):
                listener.exitPcs_statement(self)




    def pcs_statement(self):

        localctx = XplorMRParser.Pcs_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_pcs_statement)
        self._la = 0 # Token type
        try:
            self.state = 1481
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1445
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1442
                    self.pcs_assign()
                    self.state = 1447
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1448
                self.match(XplorMRParser.Classification)
                self.state = 1449
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1450
                self.match(XplorMRParser.Tolerance)
                self.state = 1451
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1452
                self.match(XplorMRParser.Coefficients)
                self.state = 1453
                self.match(XplorMRParser.Real)
                self.state = 1454
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1455
                self.match(XplorMRParser.ForceConstant)
                self.state = 1456
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1457
                self.match(XplorMRParser.Nrestraints)
                self.state = 1458
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1459
                self.match(XplorMRParser.Print)
                self.state = 1460
                self.match(XplorMRParser.Threshold)
                self.state = 1461
                self.match(XplorMRParser.Real)
                self.state = 1465
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.All]:
                    self.state = 1462
                    self.match(XplorMRParser.All)
                    pass
                elif token in [XplorMRParser.Classification]:
                    self.state = 1463
                    self.match(XplorMRParser.Classification)
                    self.state = 1464
                    self.match(XplorMRParser.Simple_name)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1467
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1468
                self.match(XplorMRParser.Save)
                self.state = 1469
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1470
                self.match(XplorMRParser.Fmed)
                self.state = 1471
                self.match(XplorMRParser.Real)
                self.state = 1472
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1473
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1474
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1475
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1476
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1477
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1478
                self.match(XplorMRParser.Soff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1479
                self.match(XplorMRParser.Frun)
                self.state = 1480
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pcs_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pcs_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPcs_assign" ):
                listener.enterPcs_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPcs_assign" ):
                listener.exitPcs_assign(self)




    def pcs_assign(self):

        localctx = XplorMRParser.Pcs_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_pcs_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1483
            self.match(XplorMRParser.Assign)
            self.state = 1484
            self.selection()
            self.state = 1485
            self.selection()
            self.state = 1486
            self.selection()
            self.state = 1487
            self.selection()
            self.state = 1488
            self.selection()
            self.state = 1489
            self.match(XplorMRParser.Real)
            self.state = 1490
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prdc_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Prdc_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Prdc_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Tolerance(self):
            return self.getToken(XplorMRParser.Tolerance, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def ErrOn(self):
            return self.getToken(XplorMRParser.ErrOn, 0)

        def ErrOff(self):
            return self.getToken(XplorMRParser.ErrOff, 0)

        def Fmed(self):
            return self.getToken(XplorMRParser.Fmed, 0)

        def Fon(self):
            return self.getToken(XplorMRParser.Fon, 0)

        def Foff(self):
            return self.getToken(XplorMRParser.Foff, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Save(self):
            return self.getToken(XplorMRParser.Save, 0)

        def Son(self):
            return self.getToken(XplorMRParser.Son, 0)

        def Soff(self):
            return self.getToken(XplorMRParser.Soff, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_statement" ):
                listener.enterPrdc_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_statement" ):
                listener.exitPrdc_statement(self)




    def prdc_statement(self):

        localctx = XplorMRParser.Prdc_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_prdc_statement)
        self._la = 0 # Token type
        try:
            self.state = 1522
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1495
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1492
                    self.prdc_assign()
                    self.state = 1497
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1498
                self.match(XplorMRParser.Classification)
                self.state = 1499
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Tolerance]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1500
                self.match(XplorMRParser.Tolerance)
                self.state = 1501
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1502
                self.match(XplorMRParser.Coefficients)
                self.state = 1503
                self.match(XplorMRParser.Real)
                self.state = 1504
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1505
                self.match(XplorMRParser.ForceConstant)
                self.state = 1506
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1507
                self.match(XplorMRParser.Nrestraints)
                self.state = 1508
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.ErrOn]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1509
                self.match(XplorMRParser.ErrOn)
                pass
            elif token in [XplorMRParser.ErrOff]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1510
                self.match(XplorMRParser.ErrOff)
                pass
            elif token in [XplorMRParser.Fmed]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1511
                self.match(XplorMRParser.Fmed)
                pass
            elif token in [XplorMRParser.Fon]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1512
                self.match(XplorMRParser.Fon)
                pass
            elif token in [XplorMRParser.Foff]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1513
                self.match(XplorMRParser.Foff)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1514
                self.match(XplorMRParser.Frun)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1515
                self.match(XplorMRParser.Print)
                self.state = 1516
                self.match(XplorMRParser.Threshold)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 14)
                self.state = 1517
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Save]:
                self.enterOuterAlt(localctx, 15)
                self.state = 1518
                self.match(XplorMRParser.Save)
                self.state = 1519
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Son]:
                self.enterOuterAlt(localctx, 16)
                self.state = 1520
                self.match(XplorMRParser.Son)
                pass
            elif token in [XplorMRParser.Soff]:
                self.enterOuterAlt(localctx, 17)
                self.state = 1521
                self.match(XplorMRParser.Soff)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Prdc_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_prdc_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrdc_assign" ):
                listener.enterPrdc_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrdc_assign" ):
                listener.exitPrdc_assign(self)




    def prdc_assign(self):

        localctx = XplorMRParser.Prdc_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_prdc_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1524
            self.match(XplorMRParser.Assign)
            self.state = 1525
            self.selection()
            self.state = 1526
            self.selection()
            self.state = 1527
            self.selection()
            self.state = 1528
            self.selection()
            self.state = 1529
            self.selection()
            self.state = 1530
            self.selection()
            self.state = 1531
            self.match(XplorMRParser.Real)
            self.state = 1532
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def porientation_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Porientation_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Porientation_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_statement" ):
                listener.enterPorientation_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_statement" ):
                listener.exitPorientation_statement(self)




    def porientation_statement(self):

        localctx = XplorMRParser.Porientation_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_porientation_statement)
        self._la = 0 # Token type
        try:
            self.state = 1550
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1537
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1534
                    self.porientation_assign()
                    self.state = 1539
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1540
                self.match(XplorMRParser.Classification)
                self.state = 1541
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1542
                self.match(XplorMRParser.ForceConstant)
                self.state = 1543
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1544
                self.match(XplorMRParser.Nrestraints)
                self.state = 1545
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1546
                self.match(XplorMRParser.Print)
                self.state = 1547
                self.match(XplorMRParser.Threshold)
                self.state = 1548
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1549
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Porientation_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_porientation_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPorientation_assign" ):
                listener.enterPorientation_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPorientation_assign" ):
                listener.exitPorientation_assign(self)




    def porientation_assign(self):

        localctx = XplorMRParser.Porientation_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_porientation_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1552
            self.match(XplorMRParser.Assign)
            self.state = 1553
            self.selection()
            self.state = 1554
            self.selection()
            self.state = 1555
            self.match(XplorMRParser.Real)
            self.state = 1556
            self.match(XplorMRParser.Real)
            self.state = 1557
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pccr_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Pccr_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Pccr_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def Weip(self):
            return self.getToken(XplorMRParser.Weip, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Coefficients(self):
            return self.getToken(XplorMRParser.Coefficients, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def Frun(self):
            return self.getToken(XplorMRParser.Frun, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_statement" ):
                listener.enterPccr_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_statement" ):
                listener.exitPccr_statement(self)




    def pccr_statement(self):

        localctx = XplorMRParser.Pccr_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_pccr_statement)
        self._la = 0 # Token type
        try:
            self.state = 1581
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1562
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1559
                    self.pccr_assign()
                    self.state = 1564
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1565
                self.match(XplorMRParser.Classification)
                self.state = 1566
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.Weip]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1567
                self.match(XplorMRParser.Weip)
                self.state = 1568
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Coefficients]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1569
                self.match(XplorMRParser.Coefficients)
                self.state = 1570
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1571
                self.match(XplorMRParser.ForceConstant)
                self.state = 1572
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1573
                self.match(XplorMRParser.Nrestraints)
                self.state = 1574
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1575
                self.match(XplorMRParser.Print)
                self.state = 1576
                self.match(XplorMRParser.Threshold)
                self.state = 1577
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1578
                self.match(XplorMRParser.Reset)
                pass
            elif token in [XplorMRParser.Frun]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1579
                self.match(XplorMRParser.Frun)
                self.state = 1580
                self.match(XplorMRParser.Integer)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Pccr_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_pccr_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPccr_assign" ):
                listener.enterPccr_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPccr_assign" ):
                listener.exitPccr_assign(self)




    def pccr_assign(self):

        localctx = XplorMRParser.Pccr_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_pccr_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1583
            self.match(XplorMRParser.Assign)
            self.state = 1584
            self.selection()
            self.state = 1585
            self.selection()
            self.state = 1586
            self.selection()
            self.state = 1587
            self.match(XplorMRParser.Real)
            self.state = 1588
            self.match(XplorMRParser.Real)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_statementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def hbond_assign(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.Hbond_assignContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.Hbond_assignContext,i)


        def Classification(self):
            return self.getToken(XplorMRParser.Classification, 0)

        def Simple_name(self):
            return self.getToken(XplorMRParser.Simple_name, 0)

        def ForceConstant(self):
            return self.getToken(XplorMRParser.ForceConstant, 0)

        def Real(self):
            return self.getToken(XplorMRParser.Real, 0)

        def Nrestraints(self):
            return self.getToken(XplorMRParser.Nrestraints, 0)

        def Integer(self):
            return self.getToken(XplorMRParser.Integer, 0)

        def Print(self):
            return self.getToken(XplorMRParser.Print, 0)

        def Threshold(self):
            return self.getToken(XplorMRParser.Threshold, 0)

        def Reset(self):
            return self.getToken(XplorMRParser.Reset, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_statement" ):
                listener.enterHbond_statement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_statement" ):
                listener.exitHbond_statement(self)




    def hbond_statement(self):

        localctx = XplorMRParser.Hbond_statementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_hbond_statement)
        self._la = 0 # Token type
        try:
            self.state = 1606
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [XplorMRParser.Assign, XplorMRParser.R_brace]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==XplorMRParser.Assign:
                    self.state = 1590
                    self.hbond_assign()
                    self.state = 1595
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [XplorMRParser.Classification]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1596
                self.match(XplorMRParser.Classification)
                self.state = 1597
                self.match(XplorMRParser.Simple_name)
                pass
            elif token in [XplorMRParser.ForceConstant]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1598
                self.match(XplorMRParser.ForceConstant)
                self.state = 1599
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Nrestraints]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1600
                self.match(XplorMRParser.Nrestraints)
                self.state = 1601
                self.match(XplorMRParser.Integer)
                pass
            elif token in [XplorMRParser.Print]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1602
                self.match(XplorMRParser.Print)
                self.state = 1603
                self.match(XplorMRParser.Threshold)
                self.state = 1604
                self.match(XplorMRParser.Real)
                pass
            elif token in [XplorMRParser.Reset]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1605
                self.match(XplorMRParser.Reset)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Hbond_assignContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(XplorMRParser.Assign, 0)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def getRuleIndex(self):
            return XplorMRParser.RULE_hbond_assign

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHbond_assign" ):
                listener.enterHbond_assign(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHbond_assign" ):
                listener.exitHbond_assign(self)




    def hbond_assign(self):

        localctx = XplorMRParser.Hbond_assignContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_hbond_assign)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1608
            self.match(XplorMRParser.Assign)
            self.state = 1609
            self.selection()
            self.state = 1610
            self.selection()
            self.state = 1611
            self.selection()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection" ):
                listener.enterSelection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection" ):
                listener.exitSelection(self)




    def selection(self):

        localctx = XplorMRParser.SelectionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_selection)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1613
            self.match(XplorMRParser.L_paren)
            self.state = 1614
            self.selection_expression()
            self.state = 1615
            self.match(XplorMRParser.R_paren)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Selection_expressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def term(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.TermContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.TermContext,i)


        def Or_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Or_op)
            else:
                return self.getToken(XplorMRParser.Or_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_selection_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelection_expression" ):
                listener.enterSelection_expression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelection_expression" ):
                listener.exitSelection_expression(self)




    def selection_expression(self):

        localctx = XplorMRParser.Selection_expressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_selection_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1617
            self.term()
            self.state = 1622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.Or_op:
                self.state = 1618
                self.match(XplorMRParser.Or_op)
                self.state = 1619
                self.term()
                self.state = 1624
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TermContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def factor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.FactorContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.FactorContext,i)


        def And_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.And_op)
            else:
                return self.getToken(XplorMRParser.And_op, i)

        def getRuleIndex(self):
            return XplorMRParser.RULE_term

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTerm" ):
                listener.enterTerm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTerm" ):
                listener.exitTerm(self)




    def term(self):

        localctx = XplorMRParser.TermContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_term)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1625
            self.factor(0)
            self.state = 1630
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==XplorMRParser.And_op:
                self.state = 1626
                self.match(XplorMRParser.And_op)
                self.state = 1627
                self.factor(0)
                self.state = 1632
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FactorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def L_paren(self):
            return self.getToken(XplorMRParser.L_paren, 0)

        def selection_expression(self):
            return self.getTypedRuleContext(XplorMRParser.Selection_expressionContext,0)


        def R_paren(self):
            return self.getToken(XplorMRParser.R_paren, 0)

        def All(self):
            return self.getToken(XplorMRParser.All, 0)

        def Atom(self):
            return self.getToken(XplorMRParser.Atom, 0)

        def Simple_names(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_names)
            else:
                return self.getToken(XplorMRParser.Simple_names, i)

        def Simple_name(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Simple_name)
            else:
                return self.getToken(XplorMRParser.Simple_name, i)

        def Integers(self):
            return self.getToken(XplorMRParser.Integers, 0)

        def Integer(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Integer)
            else:
                return self.getToken(XplorMRParser.Integer, i)

        def Attribute(self):
            return self.getToken(XplorMRParser.Attribute, 0)

        def Attr_properties(self):
            return self.getToken(XplorMRParser.Attr_properties, 0)

        def Comparison_ops(self):
            return self.getToken(XplorMRParser.Comparison_ops, 0)

        def Real(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Real)
            else:
                return self.getToken(XplorMRParser.Real, i)

        def Abs(self):
            return self.getToken(XplorMRParser.Abs, 0)

        def BondedTo(self):
            return self.getToken(XplorMRParser.BondedTo, 0)

        def factor(self):
            return self.getTypedRuleContext(XplorMRParser.FactorContext,0)


        def ByGroup(self):
            return self.getToken(XplorMRParser.ByGroup, 0)

        def ByRes(self):
            return self.getToken(XplorMRParser.ByRes, 0)

        def Chemical(self):
            return self.getToken(XplorMRParser.Chemical, 0)

        def Colon(self):
            return self.getToken(XplorMRParser.Colon, 0)

        def Hydrogen(self):
            return self.getToken(XplorMRParser.Hydrogen, 0)

        def Id(self):
            return self.getToken(XplorMRParser.Id, 0)

        def Known(self):
            return self.getToken(XplorMRParser.Known, 0)

        def Name(self):
            return self.getToken(XplorMRParser.Name, 0)

        def Not_op(self):
            return self.getToken(XplorMRParser.Not_op, 0)

        def Point(self):
            return self.getToken(XplorMRParser.Point, 0)

        def Cut(self):
            return self.getToken(XplorMRParser.Cut, 0)

        def Comma(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Comma)
            else:
                return self.getToken(XplorMRParser.Comma, i)

        def Tail(self):
            return self.getToken(XplorMRParser.Tail, 0)

        def Equ_op(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Equ_op)
            else:
                return self.getToken(XplorMRParser.Equ_op, i)

        def selection(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(XplorMRParser.SelectionContext)
            else:
                return self.getTypedRuleContext(XplorMRParser.SelectionContext,i)


        def Head(self):
            return self.getToken(XplorMRParser.Head, 0)

        def Previous(self):
            return self.getToken(XplorMRParser.Previous, 0)

        def Pseudo(self):
            return self.getToken(XplorMRParser.Pseudo, 0)

        def Residue(self):
            return self.getToken(XplorMRParser.Residue, 0)

        def Resname(self):
            return self.getToken(XplorMRParser.Resname, 0)

        def SegIdentifier(self):
            return self.getToken(XplorMRParser.SegIdentifier, 0)

        def Double_quote_string(self, i:int=None):
            if i is None:
                return self.getTokens(XplorMRParser.Double_quote_string)
            else:
                return self.getToken(XplorMRParser.Double_quote_string, i)

        def Store_1(self):
            return self.getToken(XplorMRParser.Store_1, 0)

        def Store_2(self):
            return self.getToken(XplorMRParser.Store_2, 0)

        def Store_3(self):
            return self.getToken(XplorMRParser.Store_3, 0)

        def Store_4(self):
            return self.getToken(XplorMRParser.Store_4, 0)

        def Store_5(self):
            return self.getToken(XplorMRParser.Store_5, 0)

        def Store_6(self):
            return self.getToken(XplorMRParser.Store_6, 0)

        def Store_7(self):
            return self.getToken(XplorMRParser.Store_7, 0)

        def Store_8(self):
            return self.getToken(XplorMRParser.Store_8, 0)

        def Store_9(self):
            return self.getToken(XplorMRParser.Store_9, 0)

        def Tag(self):
            return self.getToken(XplorMRParser.Tag, 0)

        def Around(self):
            return self.getToken(XplorMRParser.Around, 0)

        def Saround(self):
            return self.getToken(XplorMRParser.Saround, 0)

        def getRuleIndex(self):
            return XplorMRParser.RULE_factor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFactor" ):
                listener.enterFactor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFactor" ):
                listener.exitFactor(self)



    def factor(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = XplorMRParser.FactorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 172
        self.enterRecursionRule(localctx, 172, self.RULE_factor, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,122,self._ctx)
            if la_ == 1:
                self.state = 1634
                self.match(XplorMRParser.L_paren)
                self.state = 1635
                self.selection_expression()
                self.state = 1636
                self.match(XplorMRParser.R_paren)
                pass

            elif la_ == 2:
                self.state = 1638
                self.match(XplorMRParser.All)
                pass

            elif la_ == 3:
                self.state = 1639
                self.match(XplorMRParser.Atom)
                self.state = 1640
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1641
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Integer or _la==XplorMRParser.Integers):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1642
                _la = self._input.LA(1)
                if not(_la==XplorMRParser.Simple_name or _la==XplorMRParser.Simple_names):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 4:
                self.state = 1643
                self.match(XplorMRParser.Attribute)
                self.state = 1645
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Abs:
                    self.state = 1644
                    self.match(XplorMRParser.Abs)


                self.state = 1647
                self.match(XplorMRParser.Attr_properties)
                self.state = 1648
                self.match(XplorMRParser.Comparison_ops)
                self.state = 1649
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 5:
                self.state = 1650
                self.match(XplorMRParser.BondedTo)
                self.state = 1651
                self.factor(27)
                pass

            elif la_ == 6:
                self.state = 1652
                self.match(XplorMRParser.ByGroup)
                self.state = 1653
                self.factor(26)
                pass

            elif la_ == 7:
                self.state = 1654
                self.match(XplorMRParser.ByRes)
                self.state = 1655
                self.factor(25)
                pass

            elif la_ == 8:
                self.state = 1656
                self.match(XplorMRParser.Chemical)
                self.state = 1663
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1657
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1658
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1661
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                    if la_ == 1:
                        self.state = 1659
                        self.match(XplorMRParser.Colon)
                        self.state = 1660
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 9:
                self.state = 1665
                self.match(XplorMRParser.Hydrogen)
                pass

            elif la_ == 10:
                self.state = 1666
                self.match(XplorMRParser.Id)
                self.state = 1667
                self.match(XplorMRParser.Integer)
                pass

            elif la_ == 11:
                self.state = 1668
                self.match(XplorMRParser.Known)
                pass

            elif la_ == 12:
                self.state = 1669
                self.match(XplorMRParser.Name)
                self.state = 1676
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1670
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1671
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1674
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,109,self._ctx)
                    if la_ == 1:
                        self.state = 1672
                        self.match(XplorMRParser.Colon)
                        self.state = 1673
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 13:
                self.state = 1678
                self.match(XplorMRParser.Not_op)
                self.state = 1679
                self.factor(19)
                pass

            elif la_ == 14:
                self.state = 1680
                self.match(XplorMRParser.Point)
                self.state = 1681
                self.match(XplorMRParser.L_paren)
                self.state = 1682
                self.match(XplorMRParser.Real)
                self.state = 1684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1683
                    self.match(XplorMRParser.Comma)


                self.state = 1686
                self.match(XplorMRParser.Real)
                self.state = 1688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1687
                    self.match(XplorMRParser.Comma)


                self.state = 1690
                self.match(XplorMRParser.Real)
                self.state = 1691
                self.match(XplorMRParser.R_paren)
                self.state = 1692
                self.match(XplorMRParser.Cut)
                self.state = 1693
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 15:
                self.state = 1694
                self.match(XplorMRParser.Point)
                self.state = 1695
                self.match(XplorMRParser.L_paren)
                self.state = 1696
                self.match(XplorMRParser.Tail)
                self.state = 1697
                self.match(XplorMRParser.Equ_op)
                self.state = 1698
                self.selection()
                self.state = 1700
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Comma:
                    self.state = 1699
                    self.match(XplorMRParser.Comma)


                self.state = 1705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==XplorMRParser.Head:
                    self.state = 1702
                    self.match(XplorMRParser.Head)
                    self.state = 1703
                    self.match(XplorMRParser.Equ_op)
                    self.state = 1704
                    self.selection()


                self.state = 1707
                self.match(XplorMRParser.R_paren)
                self.state = 1708
                self.match(XplorMRParser.Cut)
                self.state = 1709
                self.match(XplorMRParser.Real)
                pass

            elif la_ == 16:
                self.state = 1711
                self.match(XplorMRParser.Previous)
                pass

            elif la_ == 17:
                self.state = 1712
                self.match(XplorMRParser.Pseudo)
                pass

            elif la_ == 18:
                self.state = 1713
                self.match(XplorMRParser.Residue)
                self.state = 1720
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Integers]:
                    self.state = 1714
                    self.match(XplorMRParser.Integers)
                    pass
                elif token in [XplorMRParser.Integer]:
                    self.state = 1715
                    self.match(XplorMRParser.Integer)
                    self.state = 1718
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
                    if la_ == 1:
                        self.state = 1716
                        self.match(XplorMRParser.Colon)
                        self.state = 1717
                        self.match(XplorMRParser.Integer)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 19:
                self.state = 1722
                self.match(XplorMRParser.Resname)
                self.state = 1729
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1723
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1724
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1727
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
                    if la_ == 1:
                        self.state = 1725
                        self.match(XplorMRParser.Colon)
                        self.state = 1726
                        self.match(XplorMRParser.Simple_name)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 20:
                self.state = 1731
                self.match(XplorMRParser.SegIdentifier)
                self.state = 1743
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [XplorMRParser.Simple_names]:
                    self.state = 1732
                    self.match(XplorMRParser.Simple_names)
                    pass
                elif token in [XplorMRParser.Simple_name]:
                    self.state = 1733
                    self.match(XplorMRParser.Simple_name)
                    self.state = 1736
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
                    if la_ == 1:
                        self.state = 1734
                        self.match(XplorMRParser.Colon)
                        self.state = 1735
                        self.match(XplorMRParser.Simple_name)


                    pass
                elif token in [XplorMRParser.Double_quote_string]:
                    self.state = 1738
                    self.match(XplorMRParser.Double_quote_string)
                    self.state = 1741
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
                    if la_ == 1:
                        self.state = 1739
                        self.match(XplorMRParser.Colon)
                        self.state = 1740
                        self.match(XplorMRParser.Double_quote_string)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 21:
                self.state = 1745
                self.match(XplorMRParser.Store_1)
                pass

            elif la_ == 22:
                self.state = 1746
                self.match(XplorMRParser.Store_2)
                pass

            elif la_ == 23:
                self.state = 1747
                self.match(XplorMRParser.Store_3)
                pass

            elif la_ == 24:
                self.state = 1748
                self.match(XplorMRParser.Store_4)
                pass

            elif la_ == 25:
                self.state = 1749
                self.match(XplorMRParser.Store_5)
                pass

            elif la_ == 26:
                self.state = 1750
                self.match(XplorMRParser.Store_6)
                pass

            elif la_ == 27:
                self.state = 1751
                self.match(XplorMRParser.Store_7)
                pass

            elif la_ == 28:
                self.state = 1752
                self.match(XplorMRParser.Store_8)
                pass

            elif la_ == 29:
                self.state = 1753
                self.match(XplorMRParser.Store_9)
                pass

            elif la_ == 30:
                self.state = 1754
                self.match(XplorMRParser.Tag)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1765
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,124,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1763
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                    if la_ == 1:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1757
                        if not self.precpred(self._ctx, 30):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 30)")
                        self.state = 1758
                        self.match(XplorMRParser.Around)
                        self.state = 1759
                        self.match(XplorMRParser.Real)
                        pass

                    elif la_ == 2:
                        localctx = XplorMRParser.FactorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_factor)
                        self.state = 1760
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 1761
                        self.match(XplorMRParser.Saround)
                        self.state = 1762
                        self.match(XplorMRParser.Real)
                        pass

             
                self.state = 1767
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,124,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[86] = self.factor_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def factor_sempred(self, localctx:FactorContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 30)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 12)
         




